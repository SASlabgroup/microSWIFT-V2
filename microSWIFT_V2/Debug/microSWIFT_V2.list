
microSWIFT_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08009e68  08009e68  00019e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a414  0800a414  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a41c  0800a41c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a41c  0800a41c  0001a41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a420  0800a420  0001a420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010fbc  200001f4  0800a618  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200111b0  0800a618  000211b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000201ed  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043e8  00000000  00000000  00040411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  00044800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00046218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e53c  00000000  00000000  00047a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002047d  00000000  00000000  00065fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4fd5  00000000  00000000  00086449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b41e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e10  00000000  00000000  0012b470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e4c 	.word	0x08009e4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08009e4c 	.word	0x08009e4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <_ZN3GPSC1EP20__UART_HandleTypeDef>:
 *`TODO: Create teardown function
 */

#include <gps.h>

GPS::GPS(UART_HandleTypeDef* uart_handle) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <_ZN3GPSC1EP20__UART_HandleTypeDef+0x80>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	839a      	strh	r2, [r3, #28]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	83da      	strh	r2, [r3, #30]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	841a      	strh	r2, [r3, #32]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	// configure, init, toggle power pin, get a few messages, flush the buffer
	gps_uart_handle = uart_handle;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	08009ef8 	.word	0x08009ef8

08000f50 <_ZN3GPSD1Ev>:

GPS::~GPS(void) {
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <_ZN3GPSD1Ev+0x1c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
	/* TODO:Power down
	        free any allocated memory
	        Set flags for deep sleep?
	*/
}
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	08009ef8 	.word	0x08009ef8

08000f70 <_ZN3GPSD0Ev>:
GPS::~GPS(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
}
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ffe9 	bl	8000f50 <_ZN3GPSD1Ev>
 8000f7e:	21b4      	movs	r1, #180	; 0xb4
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f006 f9a3 	bl	80072cc <_ZdlPvj>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZN3GPS20getAndProcessMessageEv>:
/**
 * Pull from the UART message buffer and try to process to UBX_NAV_PVT message.
 *
 * @return GPS error code (marcos defined in gps_error_codes.h)
 */
gps_error_code_t GPS::getAndProcessMessage(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 8000f96:	af04      	add	r7, sp, #16
 8000f98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000f9c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000fa0:	6018      	str	r0, [r3, #0]
	// Message + overhead bits = 99 bytes. We'll make enough space for 5 msgs
	uint8_t UART_receive_buf[500];
	memset(UART_receive_buf, 0, sizeof(UART_receive_buf));
 8000fa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fa6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 fad3 	bl	8007558 <memset>

    HAL_StatusTypeDef ret = HAL_UART_Receive(gps_uart_handle,
 8000fb2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000fb6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8000fc0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000fc4:	23c8      	movs	r3, #200	; 0xc8
 8000fc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fca:	f002 fe7a 	bl	8003cc2 <HAL_UART_Receive>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 3259 	strb.w	r3, [r7, #601]	; 0x259
    		&UART_receive_buf[0], 500, 200);
    if (!(ret == HAL_OK || ret == HAL_TIMEOUT)) {
 8000fd4:	f897 3259 	ldrb.w	r3, [r7, #601]	; 0x259
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01b      	beq.n	8001014 <_ZN3GPS20getAndProcessMessageEv+0x84>
 8000fdc:	f897 3259 	ldrb.w	r3, [r7, #601]	; 0x259
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d017      	beq.n	8001014 <_ZN3GPS20getAndProcessMessageEv+0x84>
    	// Something went wrong trying to pull from UART buffer
    	++numberCyclesWithoutData;
 8000fe4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000fe8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	8c1b      	ldrh	r3, [r3, #32]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000ff8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	841a      	strh	r2, [r3, #32]
    	switch(ret){
 8001000:	f897 3259 	ldrb.w	r3, [r7, #601]	; 0x259
 8001004:	2b02      	cmp	r3, #2
 8001006:	d102      	bne.n	800100e <_ZN3GPS20getAndProcessMessageEv+0x7e>
		case HAL_BUSY: {return GPS_BUSY_ERROR;}
 8001008:	f06f 0305 	mvn.w	r3, #5
 800100c:	e329      	b.n	8001662 <_ZN3GPS20getAndProcessMessageEv+0x6d2>
//		case HAL_TIMEOUT: {return GPS_TIMEOUT_ERROR;}
		default: {return GPS_UNKNOWN_ERROR;}
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e326      	b.n	8001662 <_ZN3GPS20getAndProcessMessageEv+0x6d2>
    	}
    }
	// Start with a fresh buffer all zero'd out
    memset(UBX_NAV_PVT_message_buf, 0, sizeof(UBX_NAV_PVT_message_buf));
 8001014:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001018:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3322      	adds	r3, #34	; 0x22
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f006 fa97 	bl	8007558 <memset>
    validMessageProcessed = false;
 800102a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800102e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	// Some fields to keep track of
    int32_t messageClass = 0;
 800103a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800103e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
    int32_t messageId = 0;
 8001046:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800104a:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
    const char* UART_buffer_start = (const char*)&(UART_receive_buf[0]);
 8001052:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001056:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
    const char* UART_buffer_end = UART_buffer_start;
 800105a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800105e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001062:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001066:	601a      	str	r2, [r3, #0]
    size_t bufferLength = sizeof(UART_receive_buf);
 8001068:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800106c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    // Really hideous for loop
    for (int32_t numBytes = uUbxProtocolDecode(UART_buffer_start,
 8001070:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001074:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3322      	adds	r3, #34	; 0x22
 800107c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001080:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001084:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001088:	9202      	str	r2, [sp, #8]
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	4603      	mov	r3, r0
 8001092:	460a      	mov	r2, r1
 8001094:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8001098:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 800109c:	f003 f996 	bl	80043cc <uUbxProtocolDecode>
 80010a0:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
    			bufferLength, &messageClass, &messageId,
				&(UBX_NAV_PVT_message_buf[0]), sizeof(UBX_NAV_PVT_message_buf),
				&UART_buffer_end);
    	numBytes > 0;
 80010a4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f340 8273 	ble.w	8001594 <_ZN3GPS20getAndProcessMessageEv+0x604>
    	numBytes = uUbxProtocolDecode(UART_buffer_start, bufferLength,
				&messageClass, &messageId, &(UBX_NAV_PVT_message_buf[0]),
				sizeof(UBX_NAV_PVT_message_buf), &UART_buffer_end))
    { // start for loop

		if (messageClass != UBX_NAV_PVT_MESSAGE_CLASS ||
 80010ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80010b2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d10a      	bne.n	80010d2 <_ZN3GPS20getAndProcessMessageEv+0x142>
			messageId != UBX_NAV_PVT_MESSAGE_ID ||
 80010bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80010c0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80010c4:	681b      	ldr	r3, [r3, #0]
		if (messageClass != UBX_NAV_PVT_MESSAGE_CLASS ||
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d103      	bne.n	80010d2 <_ZN3GPS20getAndProcessMessageEv+0x142>
			messageId != UBX_NAV_PVT_MESSAGE_ID ||
 80010ca:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80010ce:	2b5c      	cmp	r3, #92	; 0x5c
 80010d0:	d015      	beq.n	80010fe <_ZN3GPS20getAndProcessMessageEv+0x16e>
			// Message was not of type UBX_NAV_PVT or not the right length

			// This will get our pointers pointing to the next message in the
			// buf, and the for loop will try processing the next message if
			// there is one.
			bufferLength -= UART_buffer_end - UART_buffer_start;
 80010d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80010d6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
			UART_buffer_start = UART_buffer_end;
 80010ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80010f2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
			continue;
 80010fc:	e22f      	b.n	800155e <_ZN3GPS20getAndProcessMessageEv+0x5ce>
		}
		// If we made it here, we're good to process a message

		// Start by setting the clock if needed
		if (!clockHasBeenSet) {
 80010fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001102:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80ab 	beq.w	800126e <_ZN3GPS20getAndProcessMessageEv+0x2de>
			// Grab time accuracy estimate
			int32_t tAcc = UBX_NAV_PVT_message_buf[12] +
 8001118:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800111c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001126:	461a      	mov	r2, r3
					(UBX_NAV_PVT_message_buf[13]<<8) +
 8001128:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800112c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001136:	021b      	lsls	r3, r3, #8
			int32_t tAcc = UBX_NAV_PVT_message_buf[12] +
 8001138:	441a      	add	r2, r3
					(UBX_NAV_PVT_message_buf[14]<<16) +
 800113a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800113e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001148:	041b      	lsls	r3, r3, #16
					(UBX_NAV_PVT_message_buf[13]<<8) +
 800114a:	441a      	add	r2, r3
					(UBX_NAV_PVT_message_buf[15]<<24);
 800114c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001150:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800115a:	061b      	lsls	r3, r3, #24
			int32_t tAcc = UBX_NAV_PVT_message_buf[12] +
 800115c:	4413      	add	r3, r2
 800115e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

			if (tAcc < MAX_ACCEPTABLE_TACC) {
 8001162:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8001166:	2b31      	cmp	r3, #49	; 0x31
 8001168:	f300 8081 	bgt.w	800126e <_ZN3GPS20getAndProcessMessageEv+0x2de>
				// TODO: Figure this out and then make it a function
				// set clock
				uint16_t year = UBX_NAV_PVT_message_buf[4];
 800116c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001170:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800117a:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252
				uint8_t month = UBX_NAV_PVT_message_buf[6];
 800117e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001182:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800118c:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
				uint8_t day = UBX_NAV_PVT_message_buf[7];
 8001190:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001194:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800119e:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
				uint8_t hour = UBX_NAV_PVT_message_buf[8];
 80011a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80011a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80011b0:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				bool isAM = true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f887 325a 	strb.w	r3, [r7, #602]	; 0x25a
				if (hour > 12) { hour %= 12; isAM = false;}
 80011ba:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d90f      	bls.n	80011e2 <_ZN3GPS20getAndProcessMessageEv+0x252>
 80011c2:	f897 225b 	ldrb.w	r2, [r7, #603]	; 0x25b
 80011c6:	4bd0      	ldr	r3, [pc, #832]	; (8001508 <_ZN3GPS20getAndProcessMessageEv+0x578>)
 80011c8:	fba3 1302 	umull	r1, r3, r3, r2
 80011cc:	08d9      	lsrs	r1, r3, #3
 80011ce:	460b      	mov	r3, r1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	440b      	add	r3, r1
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 325a 	strb.w	r3, [r7, #602]	; 0x25a
				uint8_t min = UBX_NAV_PVT_message_buf[9];
 80011e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80011e6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80011f0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				uint8_t sec = UBX_NAV_PVT_message_buf[10];
 80011f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80011f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001202:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e

				RTC_TimeTypeDef time = {hour, min, sec,
 8001206:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800120a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800120e:	461a      	mov	r2, r3
 8001210:	2300      	movs	r3, #0
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	6053      	str	r3, [r2, #4]
 8001216:	6093      	str	r3, [r2, #8]
 8001218:	60d3      	str	r3, [r2, #12]
 800121a:	6113      	str	r3, [r2, #16]
						(isAM) ?
						RTC_HOURFORMAT12_AM : RTC_HOURFORMAT12_PM, 0, 0};
 800121c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001220:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001224:	f897 225b 	ldrb.w	r2, [r7, #603]	; 0x25b
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800122e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001232:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8001236:	705a      	strb	r2, [r3, #1]
 8001238:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800123c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001240:	f897 224e 	ldrb.w	r2, [r7, #590]	; 0x24e
 8001244:	709a      	strb	r2, [r3, #2]
						(isAM) ?
 8001246:	f897 325a 	ldrb.w	r3, [r7, #602]	; 0x25a
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <_ZN3GPS20getAndProcessMessageEv+0x2c2>
 800124e:	2200      	movs	r2, #0
 8001250:	e000      	b.n	8001254 <_ZN3GPS20getAndProcessMessageEv+0x2c4>
 8001252:	2201      	movs	r2, #1
						RTC_HOURFORMAT12_AM : RTC_HOURFORMAT12_PM, 0, 0};
 8001254:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001258:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800125c:	70da      	strb	r2, [r3, #3]
				// Set RTC time

				clockHasBeenSet = true;
 800125e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001262:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
			}
		}

		// Check Lat/Long accuracy, assign to class fields if good
		int32_t lon = UBX_NAV_PVT_message_buf[24] +
 800126e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001272:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800127c:	461a      	mov	r2, r3
				(UBX_NAV_PVT_message_buf[25]<<8) +
 800127e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001282:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800128c:	021b      	lsls	r3, r3, #8
		int32_t lon = UBX_NAV_PVT_message_buf[24] +
 800128e:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[26]<<16) +
 8001290:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001294:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800129e:	041b      	lsls	r3, r3, #16
				(UBX_NAV_PVT_message_buf[25]<<8) +
 80012a0:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[27]<<24);
 80012a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80012a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b0:	061b      	lsls	r3, r3, #24
		int32_t lon = UBX_NAV_PVT_message_buf[24] +
 80012b2:	4413      	add	r3, r2
 80012b4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
		int32_t lat = UBX_NAV_PVT_message_buf[28] +
 80012b8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80012bc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80012c6:	461a      	mov	r2, r3
				(UBX_NAV_PVT_message_buf[29]<<8) +
 80012c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80012cc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80012d6:	021b      	lsls	r3, r3, #8
		int32_t lat = UBX_NAV_PVT_message_buf[28] +
 80012d8:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[30]<<16) +
 80012da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80012de:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012e8:	041b      	lsls	r3, r3, #16
				(UBX_NAV_PVT_message_buf[29]<<8) +
 80012ea:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[31]<<24);
 80012ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80012f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012fa:	061b      	lsls	r3, r3, #24
		int32_t lat = UBX_NAV_PVT_message_buf[28] +
 80012fc:	4413      	add	r3, r2
 80012fe:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
		int16_t pDOP =  UBX_NAV_PVT_message_buf[76] +
 8001302:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001306:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001310:	b29a      	uxth	r2, r3
				(UBX_NAV_PVT_message_buf[77]<<8);
 8001312:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001316:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001320:	b29b      	uxth	r3, r3
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b29b      	uxth	r3, r3
		int16_t pDOP =  UBX_NAV_PVT_message_buf[76] +
 8001326:	4413      	add	r3, r2
 8001328:	b29b      	uxth	r3, r3
 800132a:	f8a7 3242 	strh.w	r3, [r7, #578]	; 0x242

		if (pDOP < MAX_ACCEPTABLE_PDOP) {
 800132e:	f9b7 3242 	ldrsh.w	r3, [r7, #578]	; 0x242
 8001332:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001336:	da11      	bge.n	800135c <_ZN3GPS20getAndProcessMessageEv+0x3cc>
			currentLatitude = lat;
 8001338:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800133c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8001346:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			currentLongitude = lon;
 800134a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800134e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8001358:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		}

		// Grab velocities, start by checking speed accuracy estimate (sAcc)
		int32_t sAcc = UBX_NAV_PVT_message_buf[68] +
 800135c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001360:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800136a:	461a      	mov	r2, r3
				(UBX_NAV_PVT_message_buf[69] << 8) +
 800136c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001370:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800137a:	021b      	lsls	r3, r3, #8
		int32_t sAcc = UBX_NAV_PVT_message_buf[68] +
 800137c:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[70] << 16) +
 800137e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001382:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800138c:	041b      	lsls	r3, r3, #16
				(UBX_NAV_PVT_message_buf[69] << 8) +
 800138e:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[71] << 24);
 8001390:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001394:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800139e:	061b      	lsls	r3, r3, #24
		int32_t sAcc = UBX_NAV_PVT_message_buf[68] +
 80013a0:	4413      	add	r3, r2
 80013a2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

		if (sAcc > MAX_ACCEPTABLE_SACC) {
 80013a6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	dd15      	ble.n	80013da <_ZN3GPS20getAndProcessMessageEv+0x44a>
			// This message was not within acceptable parameters,
			bufferLength -= UART_buffer_end - UART_buffer_start;
 80013ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80013b2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
			UART_buffer_start = UART_buffer_end;
 80013ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80013ce:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
			continue;
 80013d8:	e0c1      	b.n	800155e <_ZN3GPS20getAndProcessMessageEv+0x5ce>
		}

		// vAcc was within acceptable range, still need to check
		// individual velocities are less than MAX_POSSIBLE_VELOCITY
		int32_t vnorth = UBX_NAV_PVT_message_buf[48] +
 80013da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80013de:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80013e8:	461a      	mov	r2, r3
				(UBX_NAV_PVT_message_buf[49] << 8) +
 80013ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80013ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80013f8:	021b      	lsls	r3, r3, #8
		int32_t vnorth = UBX_NAV_PVT_message_buf[48] +
 80013fa:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[50] << 16) +
 80013fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001400:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800140a:	041b      	lsls	r3, r3, #16
				(UBX_NAV_PVT_message_buf[49] << 8) +
 800140c:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[51] << 24);
 800140e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001412:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800141c:	061b      	lsls	r3, r3, #24
		int32_t vnorth = UBX_NAV_PVT_message_buf[48] +
 800141e:	4413      	add	r3, r2
 8001420:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		int32_t veast = UBX_NAV_PVT_message_buf[52] +
 8001424:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001428:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001432:	461a      	mov	r2, r3
				(UBX_NAV_PVT_message_buf[53] << 8) +
 8001434:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001438:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001442:	021b      	lsls	r3, r3, #8
		int32_t veast = UBX_NAV_PVT_message_buf[52] +
 8001444:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[54] << 16) +
 8001446:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800144a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001454:	041b      	lsls	r3, r3, #16
				(UBX_NAV_PVT_message_buf[53] << 8) +
 8001456:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[55] << 24);
 8001458:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800145c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001466:	061b      	lsls	r3, r3, #24
		int32_t veast = UBX_NAV_PVT_message_buf[52] +
 8001468:	4413      	add	r3, r2
 800146a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
		int32_t vdown = UBX_NAV_PVT_message_buf[56] +
 800146e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001472:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800147c:	461a      	mov	r2, r3
				(UBX_NAV_PVT_message_buf[57] << 8) +
 800147e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001482:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800148c:	021b      	lsls	r3, r3, #8
		int32_t vdown = UBX_NAV_PVT_message_buf[56] +
 800148e:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[58] << 16) +
 8001490:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001494:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800149e:	041b      	lsls	r3, r3, #16
				(UBX_NAV_PVT_message_buf[57] << 8) +
 80014a0:	441a      	add	r2, r3
				(UBX_NAV_PVT_message_buf[59] << 24);
 80014a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80014a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80014b0:	061b      	lsls	r3, r3, #24
		int32_t vdown = UBX_NAV_PVT_message_buf[56] +
 80014b2:	4413      	add	r3, r2
 80014b4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

		if (vnorth > MAX_POSSIBLE_VELOCITY ||
 80014b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80014bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80014c0:	4293      	cmp	r3, r2
 80014c2:	dc0b      	bgt.n	80014dc <_ZN3GPS20getAndProcessMessageEv+0x54c>
 80014c4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80014c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dc05      	bgt.n	80014dc <_ZN3GPS20getAndProcessMessageEv+0x54c>
			veast > MAX_POSSIBLE_VELOCITY ||
 80014d0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80014d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80014d8:	4293      	cmp	r3, r2
 80014da:	dd17      	ble.n	800150c <_ZN3GPS20getAndProcessMessageEv+0x57c>
			vdown > MAX_POSSIBLE_VELOCITY) {
			// One or more velocity component was greater than the
			// max possible velocity. Loop around and try again
			bufferLength -= UART_buffer_end - UART_buffer_start;
 80014dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80014e0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
			UART_buffer_start = UART_buffer_end;
 80014f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80014fc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
			continue;
 8001506:	e02a      	b.n	800155e <_ZN3GPS20getAndProcessMessageEv+0x5ce>
 8001508:	aaaaaaab 	.word	0xaaaaaaab
		}

		// All velocity values are good to go, convert them to
		// shorts and store them in the arrays
		int16_t vNorthShort = (uint16_t)vnorth;
 800150c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001510:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
		int16_t vEastShort = (uint16_t)veast;
 8001514:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001518:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
		int16_t vDownShort = (uint16_t)vdown;
 800151c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001520:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a

		// TODO: add these values to the arrays
		// TODO: increment whatever counters, trackers
		numberCyclesWithoutData = 0;
 8001524:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001528:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	841a      	strh	r2, [r3, #32]
		++totalSamples;
 8001532:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001536:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	8b9b      	ldrh	r3, [r3, #28]
 800153e:	3301      	adds	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001546:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	839a      	strh	r2, [r3, #28]
		validMessageProcessed = true;
 800154e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001552:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    	numBytes = uUbxProtocolDecode(UART_buffer_start, bufferLength,
 800155e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001562:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3322      	adds	r3, #34	; 0x22
 800156a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800156e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001572:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001576:	9202      	str	r2, [sp, #8]
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	9201      	str	r2, [sp, #4]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4603      	mov	r3, r0
 8001580:	460a      	mov	r2, r1
 8001582:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8001586:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 800158a:	f002 ff1f 	bl	80043cc <uUbxProtocolDecode>
 800158e:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
    for (int32_t numBytes = uUbxProtocolDecode(UART_buffer_start,
 8001592:	e587      	b.n	80010a4 <_ZN3GPS20getAndProcessMessageEv+0x114>
	} // end for loop

    if (!validMessageProcessed) {
 8001594:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001598:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80015a2:	f083 0301 	eor.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d059      	beq.n	8001660 <_ZN3GPS20getAndProcessMessageEv+0x6d0>
    	// We weren't able to get a valid message from the buffer, so we'll sub
    	// a running average iff there are more than 0 valid samples so far
    	if (++numberCyclesWithoutData > MAX_EMPTY_CYCLES) {
 80015ac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80015b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	8c1b      	ldrh	r3, [r3, #32]
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80015c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	841a      	strh	r2, [r3, #32]
 80015c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80015cc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	8c1b      	ldrh	r3, [r3, #32]
 80015d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf8c      	ite	hi
 80015dc:	2301      	movhi	r3, #1
 80015de:	2300      	movls	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d139      	bne.n	800165a <_ZN3GPS20getAndProcessMessageEv+0x6ca>

    		//TODO: figure out what we'll do in this situation. Likely revert
    		//      to taking measurements from the IMU
    	} else {
    		// We'll replace the values with running average
    		float north = 0, east = 0, down = 0;
 80015e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80015ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80015f8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001606:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
    		// make sure there are samples to average
    		gps_error_code_t code = getRunningAverage(north, east, down);
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	f107 020c 	add.w	r2, r7, #12
 8001618:	f107 0110 	add.w	r1, r7, #16
 800161c:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8001620:	f5a0 7019 	sub.w	r0, r0, #612	; 0x264
 8001624:	6800      	ldr	r0, [r0, #0]
 8001626:	f000 f821 	bl	800166c <_ZN3GPS17getRunningAverageERfS0_S0_>
 800162a:	4603      	mov	r3, r0
 800162c:	f887 3229 	strb.w	r3, [r7, #553]	; 0x229
    		if (code != GPS_SUCCESS) {
 8001630:	f997 3229 	ldrsb.w	r3, [r7, #553]	; 0x229
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <_ZN3GPS20getAndProcessMessageEv+0x6ae>
    			return code;
 8001638:	f997 3229 	ldrsb.w	r3, [r7, #553]	; 0x229
 800163c:	e011      	b.n	8001662 <_ZN3GPS20getAndProcessMessageEv+0x6d2>
    		} else {
    			// got the averaged values
    			// TODO: add them to the arrays
    			++totalSamples;
 800163e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001642:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	8b9b      	ldrh	r3, [r3, #28]
 800164a:	3301      	adds	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001652:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	839a      	strh	r2, [r3, #28]
    		}
    	}
		return GPS_NO_MESSAGE_RECEIVED;
 800165a:	f06f 0306 	mvn.w	r3, #6
 800165e:	e000      	b.n	8001662 <_ZN3GPS20getAndProcessMessageEv+0x6d2>
    }
    return GPS_SUCCESS;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_ZN3GPS17getRunningAverageERfS0_S0_>:
 * @param returnNorth - return parameter for the running average North value
 * @param returnEast - return parameter for the running average East value
 * @param returnDown - return parameter for the running average Down value
 * @return GPS error code (marcos defined in gps_error_codes.h)
 */
gps_error_code_t GPS::getRunningAverage(float& returnNorth, float& returnEast, float& returnDown) {
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
	if (totalSamples > 0) {
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8b9b      	ldrh	r3, [r3, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d055      	beq.n	800172e <_ZN3GPS17getRunningAverageERfS0_S0_+0xc2>
		float substituteNorth = vNorthSum / static_cast<float>(totalSamples);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edd3 6a04 	vldr	s13, [r3, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8b9b      	ldrh	r3, [r3, #28]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001698:	edc7 7a07 	vstr	s15, [r7, #28]
		returnNorth = substituteNorth;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	601a      	str	r2, [r3, #0]
		vNorthSum += substituteNorth;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80016a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	edc3 7a04 	vstr	s15, [r3, #16]

		float substituteEast = vEastSum / static_cast<float>(totalSamples);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8b9b      	ldrh	r3, [r3, #28]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016cc:	edc7 7a06 	vstr	s15, [r7, #24]
		returnEast = substituteEast;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	601a      	str	r2, [r3, #0]
		vEastSum += substituteEast;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	edc3 7a05 	vstr	s15, [r3, #20]

		float substituteDown = vDownSum / static_cast<float>(totalSamples);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	edd3 6a06 	vldr	s13, [r3, #24]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8b9b      	ldrh	r3, [r3, #28]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001700:	edc7 7a05 	vstr	s15, [r7, #20]
		returnDown = substituteDown;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	601a      	str	r2, [r3, #0]
		vDownSum += substituteDown;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001710:	edd7 7a05 	vldr	s15, [r7, #20]
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	edc3 7a06 	vstr	s15, [r3, #24]

		++totalSamplesAveraged;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8bdb      	ldrh	r3, [r3, #30]
 8001722:	3301      	adds	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	83da      	strh	r2, [r3, #30]
		return GPS_SUCCESS;
 800172a:	2300      	movs	r3, #0
 800172c:	e001      	b.n	8001732 <_ZN3GPS17getRunningAverageERfS0_S0_+0xc6>
	} else {
		// No valid samples yet, avoid divide by zero error
		return GPS_NO_SAMPLES_ERROR;
 800172e:	f06f 0303 	mvn.w	r3, #3
	}
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001744:	f000 fd38 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001748:	f000 f882 	bl	8001850 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174c:	f000 f9b2 	bl	8001ab4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001750:	f000 f954 	bl	80019fc <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001754:	f000 f8f4 	bl	8001940 <_ZL12MX_I2C1_Initv>
  MX_FATFS_Init();
 8001758:	f002 ff2e 	bl	80045b8 <MX_FATFS_Init>
  MX_RTC_Init();
 800175c:	f000 f924 	bl	80019a8 <_ZL11MX_RTC_Initv>
  MX_USART6_UART_Init();
 8001760:	f000 f97a 	bl	8001a58 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001764:	f003 f832 	bl	80047cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GPS_Task */
  GPS_TaskHandle = osThreadNew(GPS_Start, NULL, &GPS_Task_attributes);
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <main+0xb0>)
 800176a:	2100      	movs	r1, #0
 800176c:	4821      	ldr	r0, [pc, #132]	; (80017f4 <main+0xb4>)
 800176e:	f003 f877 	bl	8004860 <osThreadNew>
 8001772:	4603      	mov	r3, r0
 8001774:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <main+0xb8>)
 8001776:	6013      	str	r3, [r2, #0]

  /* creation of IMU_Task */
  IMU_TaskHandle = osThreadNew(IMU_Start, NULL, &IMU_Task_attributes);
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <main+0xbc>)
 800177a:	2100      	movs	r1, #0
 800177c:	4820      	ldr	r0, [pc, #128]	; (8001800 <main+0xc0>)
 800177e:	f003 f86f 	bl	8004860 <osThreadNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <main+0xc4>)
 8001786:	6013      	str	r3, [r2, #0]

  /* creation of GPSWaves_Task */
  GPSWaves_TaskHandle = osThreadNew(GPSWaves_Start, NULL, &GPSWaves_Task_attributes);
 8001788:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <main+0xc8>)
 800178a:	2100      	movs	r1, #0
 800178c:	481f      	ldr	r0, [pc, #124]	; (800180c <main+0xcc>)
 800178e:	f003 f867 	bl	8004860 <osThreadNew>
 8001792:	4603      	mov	r3, r0
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <main+0xd0>)
 8001796:	6013      	str	r3, [r2, #0]

  /* creation of Update_Sys_Cloc */
  Update_Sys_ClocHandle = osThreadNew(Update_Sys_Clock_Start, NULL, &Update_Sys_Cloc_attributes);
 8001798:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <main+0xd4>)
 800179a:	2100      	movs	r1, #0
 800179c:	481e      	ldr	r0, [pc, #120]	; (8001818 <main+0xd8>)
 800179e:	f003 f85f 	bl	8004860 <osThreadNew>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <main+0xdc>)
 80017a6:	6013      	str	r3, [r2, #0]

  /* creation of CT_Task */
  CT_TaskHandle = osThreadNew(CT_Start, NULL, &CT_Task_attributes);
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <main+0xe0>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	481d      	ldr	r0, [pc, #116]	; (8001824 <main+0xe4>)
 80017ae:	f003 f857 	bl	8004860 <osThreadNew>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <main+0xe8>)
 80017b6:	6013      	str	r3, [r2, #0]

  /* creation of Write_Logs_Task */
  Write_Logs_TaskHandle = osThreadNew(Write_Logs_Start, NULL, &Write_Logs_Task_attributes);
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <main+0xec>)
 80017ba:	2100      	movs	r1, #0
 80017bc:	481c      	ldr	r0, [pc, #112]	; (8001830 <main+0xf0>)
 80017be:	f003 f84f 	bl	8004860 <osThreadNew>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <main+0xf4>)
 80017c6:	6013      	str	r3, [r2, #0]

  /* creation of Check_Batt_Task */
  Check_Batt_TaskHandle = osThreadNew(Check_Battery_Start, NULL, &Check_Batt_Task_attributes);
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <main+0xf8>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	481b      	ldr	r0, [pc, #108]	; (800183c <main+0xfc>)
 80017ce:	f003 f847 	bl	8004860 <osThreadNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <main+0x100>)
 80017d6:	6013      	str	r3, [r2, #0]

  /* creation of Send_Msg_Task */
  Send_Msg_TaskHandle = osThreadNew(Send_Msg_Start, NULL, &Send_Msg_Task_attributes);
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <main+0x104>)
 80017da:	2100      	movs	r1, #0
 80017dc:	481a      	ldr	r0, [pc, #104]	; (8001848 <main+0x108>)
 80017de:	f003 f83f 	bl	8004860 <osThreadNew>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <main+0x10c>)
 80017e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017e8:	f003 f814 	bl	8004814 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <main+0xac>
 80017ee:	bf00      	nop
 80017f0:	08009f00 	.word	0x08009f00
 80017f4:	08001b91 	.word	0x08001b91
 80017f8:	2000030c 	.word	0x2000030c
 80017fc:	08009f24 	.word	0x08009f24
 8001800:	08001bb5 	.word	0x08001bb5
 8001804:	20000310 	.word	0x20000310
 8001808:	08009f48 	.word	0x08009f48
 800180c:	08001bc5 	.word	0x08001bc5
 8001810:	20000314 	.word	0x20000314
 8001814:	08009f6c 	.word	0x08009f6c
 8001818:	08001bd5 	.word	0x08001bd5
 800181c:	20000318 	.word	0x20000318
 8001820:	08009f90 	.word	0x08009f90
 8001824:	08001be5 	.word	0x08001be5
 8001828:	2000031c 	.word	0x2000031c
 800182c:	08009fb4 	.word	0x08009fb4
 8001830:	08001bf5 	.word	0x08001bf5
 8001834:	20000320 	.word	0x20000320
 8001838:	08009fd8 	.word	0x08009fd8
 800183c:	08001c05 	.word	0x08001c05
 8001840:	20000324 	.word	0x20000324
 8001844:	08009ffc 	.word	0x08009ffc
 8001848:	08001c15 	.word	0x08001c15
 800184c:	20000328 	.word	0x20000328

08001850 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b094      	sub	sp, #80	; 0x50
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	2230      	movs	r2, #48	; 0x30
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f005 fe7a 	bl	8007558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <_Z18SystemClock_Configv+0xe8>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <_Z18SystemClock_Configv+0xe8>)
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001882:	6413      	str	r3, [r2, #64]	; 0x40
 8001884:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <_Z18SystemClock_Configv+0xe8>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <_Z18SystemClock_Configv+0xec>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <_Z18SystemClock_Configv+0xec>)
 800189e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <_Z18SystemClock_Configv+0xec>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018b0:	230a      	movs	r3, #10
 80018b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b8:	2310      	movs	r3, #16
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018bc:	2301      	movs	r3, #1
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c0:	2302      	movs	r3, #2
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018c8:	2310      	movs	r3, #16
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018d2:	2304      	movs	r3, #4
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018d6:	2307      	movs	r3, #7
 80018d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 f870 	bl	80029c4 <HAL_RCC_OscConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80018f4:	f000 f9a8 	bl	8001c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2102      	movs	r1, #2
 8001914:	4618      	mov	r0, r3
 8001916:	f001 facd 	bl	8002eb4 <HAL_RCC_ClockConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf14      	ite	ne
 8001920:	2301      	movne	r3, #1
 8001922:	2300      	moveq	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800192a:	f000 f98d 	bl	8001c48 <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3750      	adds	r7, #80	; 0x50
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000

08001940 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 8001946:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <_ZL12MX_I2C1_Initv+0x60>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 800194c:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <_ZL12MX_I2C1_Initv+0x64>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 800195e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <_ZL12MX_I2C1_Initv+0x5c>)
 800197e:	f000 fedd 	bl	800273c <HAL_I2C_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001992:	f000 f959 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000210 	.word	0x20000210
 80019a0:	40005400 	.word	0x40005400
 80019a4:	000186a0 	.word	0x000186a0

080019a8 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_ZL11MX_RTC_Initv+0x4c>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_ZL11MX_RTC_Initv+0x50>)
 80019b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_ZL11MX_RTC_Initv+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <_ZL11MX_RTC_Initv+0x4c>)
 80019ba:	227f      	movs	r2, #127	; 0x7f
 80019bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <_ZL11MX_RTC_Initv+0x4c>)
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <_ZL11MX_RTC_Initv+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <_ZL11MX_RTC_Initv+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_ZL11MX_RTC_Initv+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <_ZL11MX_RTC_Initv+0x4c>)
 80019d8:	f001 fdac 	bl	8003534 <HAL_RTC_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf14      	ite	ne
 80019e2:	2301      	movne	r3, #1
 80019e4:	2300      	moveq	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <_ZL11MX_RTC_Initv+0x48>
  {
    Error_Handler();
 80019ec:	f000 f92c 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000264 	.word	0x20000264
 80019f8:	40002800 	.word	0x40002800

080019fc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a02:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a34:	f002 f8f8 	bl	8003c28 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	bf14      	ite	ne
 8001a3e:	2301      	movne	r3, #1
 8001a40:	2300      	moveq	r3, #0
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001a48:	f000 f8fe 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000284 	.word	0x20000284
 8001a54:	40004400 	.word	0x40004400

08001a58 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 460800;
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a64:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001a68:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a90:	f002 f8ca 	bl	8003c28 <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001aa4:	f000 f8d0 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200002c8 	.word	0x200002c8
 8001ab0:	40011400 	.word	0x40011400

08001ab4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2120      	movs	r1, #32
 8001b3e:	4812      	ldr	r0, [pc, #72]	; (8001b88 <_ZL12MX_GPIO_Initv+0xd4>)
 8001b40:	f000 fde2 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480c      	ldr	r0, [pc, #48]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b5c:	f000 fc50 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b60:	2320      	movs	r3, #32
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	4804      	ldr	r0, [pc, #16]	; (8001b88 <_ZL12MX_GPIO_Initv+0xd4>)
 8001b78:	f000 fc42 	bl	8002400 <HAL_GPIO_Init>

}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020800 	.word	0x40020800

08001b90 <_Z9GPS_StartPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_GPS_Start */
void GPS_Start(void *argument)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0b0      	sub	sp, #192	; 0xc0
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	GPS gps(&huart6);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4904      	ldr	r1, [pc, #16]	; (8001bb0 <_Z9GPS_StartPv+0x20>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f994 	bl	8000ecc <_ZN3GPSC1EP20__UART_HandleTypeDef>
  /* Infinite loop */
  for(;;)
  {
	  gps.getAndProcessMessage();
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f9f1 	bl	8000f90 <_ZN3GPS20getAndProcessMessageEv>
 8001bae:	e7f9      	b.n	8001ba4 <_Z9GPS_StartPv+0x14>
 8001bb0:	200002c8 	.word	0x200002c8

08001bb4 <_Z9IMU_StartPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU_Start */
void IMU_Start(void *argument)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f002 fee1 	bl	8004984 <osDelay>
 8001bc2:	e7fb      	b.n	8001bbc <_Z9IMU_StartPv+0x8>

08001bc4 <_Z14GPSWaves_StartPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPSWaves_Start */
void GPSWaves_Start(void *argument)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPSWaves_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f002 fed9 	bl	8004984 <osDelay>
 8001bd2:	e7fb      	b.n	8001bcc <_Z14GPSWaves_StartPv+0x8>

08001bd4 <_Z22Update_Sys_Clock_StartPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Sys_Clock_Start */
void Update_Sys_Clock_Start(void *argument)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Sys_Clock_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f002 fed1 	bl	8004984 <osDelay>
 8001be2:	e7fb      	b.n	8001bdc <_Z22Update_Sys_Clock_StartPv+0x8>

08001be4 <_Z8CT_StartPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CT_Start */
void CT_Start(void *argument)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CT_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f002 fec9 	bl	8004984 <osDelay>
 8001bf2:	e7fb      	b.n	8001bec <_Z8CT_StartPv+0x8>

08001bf4 <_Z16Write_Logs_StartPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Write_Logs_Start */
void Write_Logs_Start(void *argument)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Write_Logs_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f002 fec1 	bl	8004984 <osDelay>
 8001c02:	e7fb      	b.n	8001bfc <_Z16Write_Logs_StartPv+0x8>

08001c04 <_Z19Check_Battery_StartPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Check_Battery_Start */
void Check_Battery_Start(void *argument)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Check_Battery_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f002 feb9 	bl	8004984 <osDelay>
 8001c12:	e7fb      	b.n	8001c0c <_Z19Check_Battery_StartPv+0x8>

08001c14 <_Z14Send_Msg_StartPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Send_Msg_Start */
void Send_Msg_Start(void *argument)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Send_Msg_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f002 feb1 	bl	8004984 <osDelay>
 8001c22:	e7fb      	b.n	8001c1c <_Z14Send_Msg_StartPv+0x8>

08001c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c36:	f000 fae1 	bl	80021fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40010000 	.word	0x40010000

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>
	...

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	210f      	movs	r1, #15
 8001c96:	f06f 0001 	mvn.w	r0, #1
 8001c9a:	f000 fb87 	bl	80023ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_I2C_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12b      	bne.n	8001d26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cea:	23c0      	movs	r3, #192	; 0xc0
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <HAL_I2C_MspInit+0x8c>)
 8001d06:	f000 fb7b 	bl	8002400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40005400 	.word	0x40005400
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020400 	.word	0x40020400

08001d3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <HAL_RTC_MspInit+0x50>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d111      	bne.n	8001d82 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d66:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 faf3 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d78:	f7ff ff66 	bl	8001c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_RTC_MspInit+0x54>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d82:	bf00      	nop
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40002800 	.word	0x40002800
 8001d90:	42470e3c 	.word	0x42470e3c

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	; 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a32      	ldr	r2, [pc, #200]	; (8001e7c <HAL_UART_MspInit+0xe8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12c      	bne.n	8001e10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = IRIDIUM_UART_TX_Pin|IRIDIUM_UART_RX_Pin;
 8001dee:	230c      	movs	r3, #12
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dfe:	2307      	movs	r3, #7
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	481e      	ldr	r0, [pc, #120]	; (8001e84 <HAL_UART_MspInit+0xf0>)
 8001e0a:	f000 faf9 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e0e:	e030      	b.n	8001e72 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <HAL_UART_MspInit+0xf4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e24:	f043 0320 	orr.w	r3, r3, #32
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_UART_MspInit+0xec>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e52:	23c0      	movs	r3, #192	; 0xc0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e62:	2308      	movs	r3, #8
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4807      	ldr	r0, [pc, #28]	; (8001e8c <HAL_UART_MspInit+0xf8>)
 8001e6e:	f000 fac7 	bl	8002400 <HAL_GPIO_Init>
}
 8001e72:	bf00      	nop
 8001e74:	3730      	adds	r7, #48	; 0x30
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40011400 	.word	0x40011400
 8001e8c:	40020800 	.word	0x40020800

08001e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_InitTick+0xd0>)
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	4a2d      	ldr	r2, [pc, #180]	; (8001f60 <HAL_InitTick+0xd0>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_InitTick+0xd0>)
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ebc:	f107 020c 	add.w	r2, r7, #12
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 fa14 	bl	80032f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ecc:	f001 f9fe 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8001ed0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_InitTick+0xd4>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	3b01      	subs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_InitTick+0xd8>)
 8001ee2:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <HAL_InitTick+0xdc>)
 8001ee4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_InitTick+0xd8>)
 8001ee8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_InitTick+0xd8>)
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_InitTick+0xd8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_InitTick+0xd8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_InitTick+0xd8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f06:	4818      	ldr	r0, [pc, #96]	; (8001f68 <HAL_InitTick+0xd8>)
 8001f08:	f001 fc0e 	bl	8003728 <HAL_TIM_Base_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11b      	bne.n	8001f52 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f1a:	4813      	ldr	r0, [pc, #76]	; (8001f68 <HAL_InitTick+0xd8>)
 8001f1c:	f001 fc5e 	bl	80037dc <HAL_TIM_Base_Start_IT>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d111      	bne.n	8001f52 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f2e:	2019      	movs	r0, #25
 8001f30:	f000 fa58 	bl	80023e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	d808      	bhi.n	8001f4c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	2019      	movs	r0, #25
 8001f40:	f000 fa34 	bl	80023ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_InitTick+0xe0>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e002      	b.n	8001f52 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3730      	adds	r7, #48	; 0x30
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	431bde83 	.word	0x431bde83
 8001f68:	2000032c 	.word	0x2000032c
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	20000004 	.word	0x20000004

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fa6:	f001 fc7b 	bl	80038a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000032c 	.word	0x2000032c

08001fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_kill>:

int _kill(int pid, int sig)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fce:	f005 f981 	bl	80072d4 <__errno>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2216      	movs	r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_exit>:

void _exit (int status)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ffe7 	bl	8001fc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ff6:	e7fe      	b.n	8001ff6 <_exit+0x12>

08001ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e00a      	b.n	8002020 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800200a:	f3af 8000 	nop.w
 800200e:	4601      	mov	r1, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf0      	blt.n	800200a <_read+0x12>
	}

return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e009      	b.n	8002058 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf1      	blt.n	8002044 <_write+0x12>
	}
	return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_close>:

int _close(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	return -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002092:	605a      	str	r2, [r3, #4]
	return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_isatty>:

int _isatty(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
	return 1;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <_sbrk+0x5c>)
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <_sbrk+0x60>)
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <_sbrk+0x64>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <_sbrk+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002104:	f005 f8e6 	bl	80072d4 <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	220c      	movs	r2, #12
 800210c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e009      	b.n	8002128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <_sbrk+0x64>)
 8002124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20018000 	.word	0x20018000
 8002134:	00000400 	.word	0x00000400
 8002138:	20000374 	.word	0x20000374
 800213c:	200111b0 	.word	0x200111b0

08002140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <SystemInit+0x20>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <SystemInit+0x20>)
 800214c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800216a:	490e      	ldr	r1, [pc, #56]	; (80021a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002180:	4c0b      	ldr	r4, [pc, #44]	; (80021b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800218e:	f7ff ffd7 	bl	8002140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002192:	f005 f99b 	bl	80074cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002196:	f7ff fad3 	bl	8001740 <main>
  bx  lr    
 800219a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800219c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80021a8:	0800a424 	.word	0x0800a424
  ldr r2, =_sbss
 80021ac:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80021b0:	200111b0 	.word	0x200111b0

080021b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_Init+0x40>)
 80021c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_Init+0x40>)
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_Init+0x40>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 f8d8 	bl	8002396 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f7ff fe52 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fd32 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	20000378 	.word	0x20000378

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000378 	.word	0x20000378

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ff4c 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023be:	f7ff ff61 	bl	8002284 <__NVIC_GetPriorityGrouping>
 80023c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7ff ffb1 	bl	8002330 <NVIC_EncodePriority>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff80 	bl	80022dc <__NVIC_SetPriority>
}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff54 	bl	80022a0 <__NVIC_EnableIRQ>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e159      	b.n	80026d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800241c:	2201      	movs	r2, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	429a      	cmp	r2, r3
 8002436:	f040 8148 	bne.w	80026ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d005      	beq.n	8002452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	2b02      	cmp	r3, #2
 8002450:	d130      	bne.n	80024b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	2203      	movs	r2, #3
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002488:	2201      	movs	r2, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 0201 	and.w	r2, r3, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d017      	beq.n	80024f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d123      	bne.n	8002544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	08da      	lsrs	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3208      	adds	r2, #8
 8002504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	220f      	movs	r2, #15
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	08da      	lsrs	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3208      	adds	r2, #8
 800253e:	69b9      	ldr	r1, [r7, #24]
 8002540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0203 	and.w	r2, r3, #3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a2 	beq.w	80026ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b57      	ldr	r3, [pc, #348]	; (80026e8 <HAL_GPIO_Init+0x2e8>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_GPIO_Init+0x2e8>)
 8002590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002594:	6453      	str	r3, [r2, #68]	; 0x44
 8002596:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <HAL_GPIO_Init+0x2e8>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a2:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_GPIO_Init+0x2ec>)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a49      	ldr	r2, [pc, #292]	; (80026f0 <HAL_GPIO_Init+0x2f0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d019      	beq.n	8002602 <HAL_GPIO_Init+0x202>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a48      	ldr	r2, [pc, #288]	; (80026f4 <HAL_GPIO_Init+0x2f4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_GPIO_Init+0x1fe>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a47      	ldr	r2, [pc, #284]	; (80026f8 <HAL_GPIO_Init+0x2f8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00d      	beq.n	80025fa <HAL_GPIO_Init+0x1fa>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a46      	ldr	r2, [pc, #280]	; (80026fc <HAL_GPIO_Init+0x2fc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <HAL_GPIO_Init+0x1f6>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a45      	ldr	r2, [pc, #276]	; (8002700 <HAL_GPIO_Init+0x300>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_GPIO_Init+0x1f2>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e008      	b.n	8002604 <HAL_GPIO_Init+0x204>
 80025f2:	2307      	movs	r3, #7
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x204>
 80025f6:	2303      	movs	r3, #3
 80025f8:	e004      	b.n	8002604 <HAL_GPIO_Init+0x204>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_Init+0x204>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_GPIO_Init+0x204>
 8002602:	2300      	movs	r3, #0
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f002 0203 	and.w	r2, r2, #3
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	4093      	lsls	r3, r2
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002614:	4935      	ldr	r1, [pc, #212]	; (80026ec <HAL_GPIO_Init+0x2ec>)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_GPIO_Init+0x304>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002646:	4a2f      	ldr	r2, [pc, #188]	; (8002704 <HAL_GPIO_Init+0x304>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_GPIO_Init+0x304>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002670:	4a24      	ldr	r2, [pc, #144]	; (8002704 <HAL_GPIO_Init+0x304>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HAL_GPIO_Init+0x304>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269a:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <HAL_GPIO_Init+0x304>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_GPIO_Init+0x304>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c4:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <HAL_GPIO_Init+0x304>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	f67f aea2 	bls.w	800241c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40013800 	.word	0x40013800
 80026f0:	40020000 	.word	0x40020000
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020c00 	.word	0x40020c00
 8002700:	40021000 	.word	0x40021000
 8002704:	40013c00 	.word	0x40013c00

08002708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
 8002714:	4613      	mov	r3, r2
 8002716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002718:	787b      	ldrb	r3, [r7, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002724:	e003      	b.n	800272e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002726:	887b      	ldrh	r3, [r7, #2]
 8002728:	041a      	lsls	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	619a      	str	r2, [r3, #24]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e12b      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff faa2 	bl	8001cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a0:	f000 fd80 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a81      	ldr	r2, [pc, #516]	; (80029b0 <HAL_I2C_Init+0x274>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d807      	bhi.n	80027c0 <HAL_I2C_Init+0x84>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a80      	ldr	r2, [pc, #512]	; (80029b4 <HAL_I2C_Init+0x278>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bf94      	ite	ls
 80027b8:	2301      	movls	r3, #1
 80027ba:	2300      	movhi	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e006      	b.n	80027ce <HAL_I2C_Init+0x92>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a7d      	ldr	r2, [pc, #500]	; (80029b8 <HAL_I2C_Init+0x27c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0e7      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a78      	ldr	r2, [pc, #480]	; (80029bc <HAL_I2C_Init+0x280>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a6a      	ldr	r2, [pc, #424]	; (80029b0 <HAL_I2C_Init+0x274>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d802      	bhi.n	8002810 <HAL_I2C_Init+0xd4>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3301      	adds	r3, #1
 800280e:	e009      	b.n	8002824 <HAL_I2C_Init+0xe8>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4a69      	ldr	r2, [pc, #420]	; (80029c0 <HAL_I2C_Init+0x284>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	3301      	adds	r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	495c      	ldr	r1, [pc, #368]	; (80029b0 <HAL_I2C_Init+0x274>)
 8002840:	428b      	cmp	r3, r1
 8002842:	d819      	bhi.n	8002878 <HAL_I2C_Init+0x13c>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e59      	subs	r1, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002852:	1c59      	adds	r1, r3, #1
 8002854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002858:	400b      	ands	r3, r1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_I2C_Init+0x138>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e59      	subs	r1, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fbb1 f3f3 	udiv	r3, r1, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	e051      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002874:	2304      	movs	r3, #4
 8002876:	e04f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <HAL_I2C_Init+0x168>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e012      	b.n	80028ca <HAL_I2C_Init+0x18e>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e58      	subs	r0, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	0099      	lsls	r1, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x196>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e022      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <HAL_I2C_Init+0x1bc>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e58      	subs	r0, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	0099      	lsls	r1, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6809      	ldr	r1, [r1, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6911      	ldr	r1, [r2, #16]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	4311      	orrs	r1, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	000186a0 	.word	0x000186a0
 80029b4:	001e847f 	.word	0x001e847f
 80029b8:	003d08ff 	.word	0x003d08ff
 80029bc:	431bde83 	.word	0x431bde83
 80029c0:	10624dd3 	.word	0x10624dd3

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e267      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d075      	beq.n	8002ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d00c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b85      	ldr	r3, [pc, #532]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d112      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	4b7e      	ldr	r3, [pc, #504]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05b      	beq.n	8002acc <HAL_RCC_OscConfig+0x108>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d157      	bne.n	8002acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e242      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x74>
 8002a2a:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a75      	ldr	r2, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e01d      	b.n	8002a74 <HAL_RCC_OscConfig+0xb0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x98>
 8002a42:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6f      	ldr	r2, [pc, #444]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6c      	ldr	r2, [pc, #432]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0xb0>
 8002a5c:	4b69      	ldr	r3, [pc, #420]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a68      	ldr	r2, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a65      	ldr	r2, [pc, #404]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fbd2 	bl	8002224 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a84:	f7ff fbce 	bl	8002224 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e207      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0xc0>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff fbbe 	bl	8002224 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aac:	f7ff fbba 	bl	8002224 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1f3      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0xe8>
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d063      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ada:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b44      	ldr	r3, [pc, #272]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x152>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e1c7      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4937      	ldr	r1, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	e03a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCC_OscConfig+0x244>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7ff fb73 	bl	8002224 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b42:	f7ff fb6f 	bl	8002224 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e1a8      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4925      	ldr	r1, [pc, #148]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_OscConfig+0x244>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff fb52 	bl	8002224 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b84:	f7ff fb4e 	bl	8002224 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e187      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d036      	beq.n	8002c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_RCC_OscConfig+0x248>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7ff fb32 	bl	8002224 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7ff fb2e 	bl	8002224 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e167      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x200>
 8002be2:	e01b      	b.n	8002c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_OscConfig+0x248>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bea:	f7ff fb1b 	bl	8002224 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	e00e      	b.n	8002c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf2:	f7ff fb17 	bl	8002224 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d907      	bls.n	8002c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e150      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	42470000 	.word	0x42470000
 8002c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b88      	ldr	r3, [pc, #544]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ea      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8097 	beq.w	8002d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b81      	ldr	r3, [pc, #516]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a7c      	ldr	r2, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b77      	ldr	r3, [pc, #476]	; (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a73      	ldr	r2, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7ff fad7 	bl	8002224 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7ff fad3 	bl	8002224 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e10c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x2ea>
 8002ca0:	4b64      	ldr	r3, [pc, #400]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a63      	ldr	r2, [pc, #396]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x324>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x30c>
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a5b      	ldr	r2, [pc, #364]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x324>
 8002cd0:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a57      	ldr	r2, [pc, #348]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a54      	ldr	r2, [pc, #336]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7ff fa98 	bl	8002224 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7ff fa94 	bl	8002224 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0cb      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ee      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x334>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7ff fa82 	bl	8002224 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7ff fa7e 	bl	8002224 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0b5      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ee      	bne.n	8002d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a1 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d05c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d141      	bne.n	8002dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff fa52 	bl	8002224 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff fa4e 	bl	8002224 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e087      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	041b      	lsls	r3, r3, #16
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	491b      	ldr	r1, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7ff fa27 	bl	8002224 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7ff fa23 	bl	8002224 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e05c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x416>
 8002df8:	e054      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7ff fa10 	bl	8002224 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e08:	f7ff fa0c 	bl	8002224 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e045      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x444>
 8002e26:	e03d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e038      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_RCC_OscConfig+0x4ec>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d121      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d11a      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d111      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cc      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d90c      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d044      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e067      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4934      	ldr	r1, [pc, #208]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7ff f93e 	bl	8002224 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7ff f93a 	bl	8002224 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d20c      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f821 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490a      	ldr	r1, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe ff18 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023c00 	.word	0x40023c00
 8003070:	40023800 	.word	0x40023800
 8003074:	0800a020 	.word	0x0800a020
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003084:	b094      	sub	sp, #80	; 0x50
 8003086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
 800308c:	2300      	movs	r3, #0
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003090:	2300      	movs	r3, #0
 8003092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003098:	4b79      	ldr	r3, [pc, #484]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d00d      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x40>
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	f200 80e1 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x1ec>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x3a>
 80030b2:	e0db      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b73      	ldr	r3, [pc, #460]	; (8003284 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030b8:	e0db      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ba:	4b73      	ldr	r3, [pc, #460]	; (8003288 <HAL_RCC_GetSysClockFreq+0x208>)
 80030bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030be:	e0d8      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c0:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	099b      	lsrs	r3, r3, #6
 80030dc:	2200      	movs	r2, #0
 80030de:	63bb      	str	r3, [r7, #56]	; 0x38
 80030e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
 80030ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030f2:	4622      	mov	r2, r4
 80030f4:	462b      	mov	r3, r5
 80030f6:	f04f 0000 	mov.w	r0, #0
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	0159      	lsls	r1, r3, #5
 8003100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003104:	0150      	lsls	r0, r2, #5
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4621      	mov	r1, r4
 800310c:	1a51      	subs	r1, r2, r1
 800310e:	6139      	str	r1, [r7, #16]
 8003110:	4629      	mov	r1, r5
 8003112:	eb63 0301 	sbc.w	r3, r3, r1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003124:	4659      	mov	r1, fp
 8003126:	018b      	lsls	r3, r1, #6
 8003128:	4651      	mov	r1, sl
 800312a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800312e:	4651      	mov	r1, sl
 8003130:	018a      	lsls	r2, r1, #6
 8003132:	4651      	mov	r1, sl
 8003134:	ebb2 0801 	subs.w	r8, r2, r1
 8003138:	4659      	mov	r1, fp
 800313a:	eb63 0901 	sbc.w	r9, r3, r1
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800314e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003152:	4690      	mov	r8, r2
 8003154:	4699      	mov	r9, r3
 8003156:	4623      	mov	r3, r4
 8003158:	eb18 0303 	adds.w	r3, r8, r3
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	462b      	mov	r3, r5
 8003160:	eb49 0303 	adc.w	r3, r9, r3
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003172:	4629      	mov	r1, r5
 8003174:	024b      	lsls	r3, r1, #9
 8003176:	4621      	mov	r1, r4
 8003178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800317c:	4621      	mov	r1, r4
 800317e:	024a      	lsls	r2, r1, #9
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003186:	2200      	movs	r2, #0
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
 800318a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800318c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003190:	f7fd fd12 	bl	8000bb8 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4613      	mov	r3, r2
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800319c:	e058      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	2200      	movs	r2, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	4611      	mov	r1, r2
 80031aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
 80031b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	f04f 0000 	mov.w	r0, #0
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	0159      	lsls	r1, r3, #5
 80031c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ca:	0150      	lsls	r0, r2, #5
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4641      	mov	r1, r8
 80031d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031d6:	4649      	mov	r1, r9
 80031d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f0:	ebb2 040a 	subs.w	r4, r2, sl
 80031f4:	eb63 050b 	sbc.w	r5, r3, fp
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	00eb      	lsls	r3, r5, #3
 8003202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003206:	00e2      	lsls	r2, r4, #3
 8003208:	4614      	mov	r4, r2
 800320a:	461d      	mov	r5, r3
 800320c:	4643      	mov	r3, r8
 800320e:	18e3      	adds	r3, r4, r3
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	464b      	mov	r3, r9
 8003214:	eb45 0303 	adc.w	r3, r5, r3
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003226:	4629      	mov	r1, r5
 8003228:	028b      	lsls	r3, r1, #10
 800322a:	4621      	mov	r1, r4
 800322c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003230:	4621      	mov	r1, r4
 8003232:	028a      	lsls	r2, r1, #10
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323a:	2200      	movs	r2, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	61fa      	str	r2, [r7, #28]
 8003240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003244:	f7fd fcb8 	bl	8000bb8 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetSysClockFreq+0x204>)
 800326e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003274:	4618      	mov	r0, r3
 8003276:	3750      	adds	r7, #80	; 0x50
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	00f42400 	.word	0x00f42400
 8003288:	007a1200 	.word	0x007a1200

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000

080032a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a8:	f7ff fff0 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0a9b      	lsrs	r3, r3, #10
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	0800a030 	.word	0x0800a030

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d0:	f7ff ffdc 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0b5b      	lsrs	r3, r3, #13
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	0800a030 	.word	0x0800a030

080032f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	220f      	movs	r2, #15
 8003302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_RCC_GetClockConfig+0x60>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0207 	and.w	r2, r3, #7
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40023c00 	.word	0x40023c00

08003358 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800337c:	2b00      	cmp	r3, #0
 800337e:	d035      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003380:	4b67      	ldr	r3, [pc, #412]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003386:	f7fe ff4d 	bl	8002224 <HAL_GetTick>
 800338a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800338e:	f7fe ff49 	bl	8002224 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0ba      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033a0:	4b60      	ldr	r3, [pc, #384]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	019a      	lsls	r2, r3, #6
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	071b      	lsls	r3, r3, #28
 80033b8:	495a      	ldr	r1, [pc, #360]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033c0:	4b57      	ldr	r3, [pc, #348]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033c6:	f7fe ff2d 	bl	8002224 <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033ce:	f7fe ff29 	bl	8002224 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e09a      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8083 	beq.w	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b49      	ldr	r3, [pc, #292]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a48      	ldr	r2, [pc, #288]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003416:	4b44      	ldr	r3, [pc, #272]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a43      	ldr	r2, [pc, #268]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003422:	f7fe feff 	bl	8002224 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe fefb 	bl	8002224 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e06c      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003448:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003450:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d02f      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	429a      	cmp	r2, r3
 8003464:	d028      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003466:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003470:	4b2e      	ldr	r3, [pc, #184]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800347c:	4a29      	ldr	r2, [pc, #164]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003482:	4b28      	ldr	r3, [pc, #160]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d114      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800348e:	f7fe fec9 	bl	8002224 <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fe fec5 	bl	8002224 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e034      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ee      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c4:	d10d      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	4912      	ldr	r1, [pc, #72]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]
 80034e0:	e005      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034ec:	6093      	str	r3, [r2, #8]
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fa:	490a      	ldr	r1, [pc, #40]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7c1a      	ldrb	r2, [r3, #16]
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003512:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	42470068 	.word	0x42470068
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	42470e40 	.word	0x42470e40
 8003530:	424711e0 	.word	0x424711e0

08003534 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e066      	b.n	8003618 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7f5b      	ldrb	r3, [r3, #29]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fbee 	bl	8001d3c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	22ca      	movs	r2, #202	; 0xca
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2253      	movs	r2, #83	; 0x53
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f87a 	bl	8003670 <RTC_EnterInitMode>
 800357c:	4603      	mov	r3, r0
 800357e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d12c      	bne.n	80035e0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003598:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68d2      	ldr	r2, [r2, #12]
 80035c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6919      	ldr	r1, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	041a      	lsls	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f881 	bl	80036de <RTC_ExitInitMode>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	22ff      	movs	r2, #255	; 0xff
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800363c:	f7fe fdf2 	bl	8002224 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003642:	e009      	b.n	8003658 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003644:	f7fe fdee 	bl	8002224 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003652:	d901      	bls.n	8003658 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e007      	b.n	8003668 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ee      	beq.n	8003644 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d122      	bne.n	80036d4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800369c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800369e:	f7fe fdc1 	bl	8002224 <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036a4:	e00c      	b.n	80036c0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036a6:	f7fe fdbd 	bl	8002224 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b4:	d904      	bls.n	80036c0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <RTC_EnterInitMode+0x64>
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d1e8      	bne.n	80036a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff89 	bl	8003620 <HAL_RTC_WaitForSynchro>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2204      	movs	r2, #4
 8003718:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e041      	b.n	80037be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f839 	bl	80037c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f000 f9ca 	bl	8003b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d001      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e044      	b.n	800387e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_TIM_Base_Start_IT+0xb0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d018      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d013      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <HAL_TIM_Base_Start_IT+0xb4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00e      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_TIM_Base_Start_IT+0xb8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d009      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a17      	ldr	r2, [pc, #92]	; (8003898 <HAL_TIM_Base_Start_IT+0xbc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a16      	ldr	r2, [pc, #88]	; (800389c <HAL_TIM_Base_Start_IT+0xc0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d111      	bne.n	800386c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b06      	cmp	r3, #6
 8003858:	d010      	beq.n	800387c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	e007      	b.n	800387c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40000c00 	.word	0x40000c00
 800389c:	40014000 	.word	0x40014000

080038a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d122      	bne.n	80038fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d11b      	bne.n	80038fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0202 	mvn.w	r2, #2
 80038cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8ee 	bl	8003ac4 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8e0 	bl	8003ab0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8f1 	bl	8003ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d122      	bne.n	8003950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0204 	mvn.w	r2, #4
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8c4 	bl	8003ac4 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8b6 	bl	8003ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8c7 	bl	8003ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b08      	cmp	r3, #8
 800395c:	d122      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b08      	cmp	r3, #8
 800396a:	d11b      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0208 	mvn.w	r2, #8
 8003974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2204      	movs	r2, #4
 800397a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f89a 	bl	8003ac4 <HAL_TIM_IC_CaptureCallback>
 8003990:	e005      	b.n	800399e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f88c 	bl	8003ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f89d 	bl	8003ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d122      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d11b      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0210 	mvn.w	r2, #16
 80039c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2208      	movs	r2, #8
 80039ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f870 	bl	8003ac4 <HAL_TIM_IC_CaptureCallback>
 80039e4:	e005      	b.n	80039f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f862 	bl	8003ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f873 	bl	8003ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0201 	mvn.w	r2, #1
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe f900 	bl	8001c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b80      	cmp	r3, #128	; 0x80
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3c:	2b80      	cmp	r3, #128	; 0x80
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8e2 	bl	8003c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d10e      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d107      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f838 	bl	8003aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0220 	mvn.w	r2, #32
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8ac 	bl	8003c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a34      	ldr	r2, [pc, #208]	; (8003be4 <TIM_Base_SetConfig+0xe4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00f      	beq.n	8003b38 <TIM_Base_SetConfig+0x38>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1e:	d00b      	beq.n	8003b38 <TIM_Base_SetConfig+0x38>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a31      	ldr	r2, [pc, #196]	; (8003be8 <TIM_Base_SetConfig+0xe8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <TIM_Base_SetConfig+0x38>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a30      	ldr	r2, [pc, #192]	; (8003bec <TIM_Base_SetConfig+0xec>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_Base_SetConfig+0x38>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <TIM_Base_SetConfig+0xf0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d108      	bne.n	8003b4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <TIM_Base_SetConfig+0xe4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01b      	beq.n	8003b8a <TIM_Base_SetConfig+0x8a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d017      	beq.n	8003b8a <TIM_Base_SetConfig+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a22      	ldr	r2, [pc, #136]	; (8003be8 <TIM_Base_SetConfig+0xe8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a21      	ldr	r2, [pc, #132]	; (8003bec <TIM_Base_SetConfig+0xec>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00f      	beq.n	8003b8a <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <TIM_Base_SetConfig+0xf0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_Base_SetConfig+0x8a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <TIM_Base_SetConfig+0xf4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_Base_SetConfig+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <TIM_Base_SetConfig+0xf8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_Base_SetConfig+0x8a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <TIM_Base_SetConfig+0xfc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d108      	bne.n	8003b9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a08      	ldr	r2, [pc, #32]	; (8003be4 <TIM_Base_SetConfig+0xe4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d103      	bne.n	8003bd0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800

08003c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e03f      	b.n	8003cba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe f8a0 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	; 0x24
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f939 	bl	8003ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b08a      	sub	sp, #40	; 0x28
 8003cc6:	af02      	add	r7, sp, #8
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	f040 808c 	bne.w	8003dfc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_UART_Receive+0x2e>
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e084      	b.n	8003dfe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Receive+0x40>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e07d      	b.n	8003dfe <HAL_UART_Receive+0x13c>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2222      	movs	r2, #34	; 0x22
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1e:	f7fe fa81 	bl	8002224 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	88fa      	ldrh	r2, [r7, #6]
 8003d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d38:	d108      	bne.n	8003d4c <HAL_UART_Receive+0x8a>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d104      	bne.n	8003d4c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	e003      	b.n	8003d54 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d5c:	e043      	b.n	8003de6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2120      	movs	r1, #32
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f84c 	bl	8003e06 <UART_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e042      	b.n	8003dfe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10c      	bne.n	8003d98 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	3302      	adds	r3, #2
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	e01f      	b.n	8003dd8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d007      	beq.n	8003db2 <HAL_UART_Receive+0xf0>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <HAL_UART_Receive+0xfe>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e008      	b.n	8003dd2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1b6      	bne.n	8003d5e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b090      	sub	sp, #64	; 0x40
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e16:	e050      	b.n	8003eba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d04c      	beq.n	8003eba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e26:	f7fe f9fd 	bl	8002224 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d241      	bcs.n	8003eba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e56:	637a      	str	r2, [r7, #52]	; 0x34
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3314      	adds	r3, #20
 8003e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e8a:	623a      	str	r2, [r7, #32]
 8003e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	69f9      	ldr	r1, [r7, #28]
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e00f      	b.n	8003eda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	bf0c      	ite	eq
 8003eca:	2301      	moveq	r3, #1
 8003ecc:	2300      	movne	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d09f      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3740      	adds	r7, #64	; 0x40
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b0c0      	sub	sp, #256	; 0x100
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	68d9      	ldr	r1, [r3, #12]
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	ea40 0301 	orr.w	r3, r0, r1
 8003f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f3c:	f021 010c 	bic.w	r1, r1, #12
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	6999      	ldr	r1, [r3, #24]
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	ea40 0301 	orr.w	r3, r0, r1
 8003f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b8f      	ldr	r3, [pc, #572]	; (80041b0 <UART_SetConfig+0x2cc>)
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d005      	beq.n	8003f84 <UART_SetConfig+0xa0>
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b8d      	ldr	r3, [pc, #564]	; (80041b4 <UART_SetConfig+0x2d0>)
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d104      	bne.n	8003f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7ff f9a2 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8003f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f8c:	e003      	b.n	8003f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f8e:	f7ff f989 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 8003f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	f040 810c 	bne.w	80041bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	462b      	mov	r3, r5
 8003fba:	1891      	adds	r1, r2, r2
 8003fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	eb12 0801 	adds.w	r8, r2, r1
 8003fcc:	4629      	mov	r1, r5
 8003fce:	eb43 0901 	adc.w	r9, r3, r1
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fe6:	4690      	mov	r8, r2
 8003fe8:	4699      	mov	r9, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	eb18 0303 	adds.w	r3, r8, r3
 8003ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	eb49 0303 	adc.w	r3, r9, r3
 8003ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800400a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800400e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004012:	460b      	mov	r3, r1
 8004014:	18db      	adds	r3, r3, r3
 8004016:	653b      	str	r3, [r7, #80]	; 0x50
 8004018:	4613      	mov	r3, r2
 800401a:	eb42 0303 	adc.w	r3, r2, r3
 800401e:	657b      	str	r3, [r7, #84]	; 0x54
 8004020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004028:	f7fc fdc6 	bl	8000bb8 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <UART_SetConfig+0x2d4>)
 8004032:	fba3 2302 	umull	r2, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	011c      	lsls	r4, r3, #4
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	1891      	adds	r1, r2, r2
 8004052:	64b9      	str	r1, [r7, #72]	; 0x48
 8004054:	415b      	adcs	r3, r3
 8004056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800405c:	4641      	mov	r1, r8
 800405e:	eb12 0a01 	adds.w	sl, r2, r1
 8004062:	4649      	mov	r1, r9
 8004064:	eb43 0b01 	adc.w	fp, r3, r1
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800407c:	4692      	mov	sl, r2
 800407e:	469b      	mov	fp, r3
 8004080:	4643      	mov	r3, r8
 8004082:	eb1a 0303 	adds.w	r3, sl, r3
 8004086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800408a:	464b      	mov	r3, r9
 800408c:	eb4b 0303 	adc.w	r3, fp, r3
 8004090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040a8:	460b      	mov	r3, r1
 80040aa:	18db      	adds	r3, r3, r3
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
 80040ae:	4613      	mov	r3, r2
 80040b0:	eb42 0303 	adc.w	r3, r2, r3
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
 80040b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040be:	f7fc fd7b 	bl	8000bb8 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <UART_SetConfig+0x2d4>)
 80040ca:	fba3 2301 	umull	r2, r3, r3, r1
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2264      	movs	r2, #100	; 0x64
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	1acb      	subs	r3, r1, r3
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040de:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <UART_SetConfig+0x2d4>)
 80040e0:	fba3 2302 	umull	r2, r3, r3, r2
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040ec:	441c      	add	r4, r3
 80040ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	1891      	adds	r1, r2, r2
 8004106:	63b9      	str	r1, [r7, #56]	; 0x38
 8004108:	415b      	adcs	r3, r3
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800410c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004110:	4641      	mov	r1, r8
 8004112:	1851      	adds	r1, r2, r1
 8004114:	6339      	str	r1, [r7, #48]	; 0x30
 8004116:	4649      	mov	r1, r9
 8004118:	414b      	adcs	r3, r1
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004128:	4659      	mov	r1, fp
 800412a:	00cb      	lsls	r3, r1, #3
 800412c:	4651      	mov	r1, sl
 800412e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004132:	4651      	mov	r1, sl
 8004134:	00ca      	lsls	r2, r1, #3
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	4603      	mov	r3, r0
 800413c:	4642      	mov	r2, r8
 800413e:	189b      	adds	r3, r3, r2
 8004140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004144:	464b      	mov	r3, r9
 8004146:	460a      	mov	r2, r1
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800415c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004164:	460b      	mov	r3, r1
 8004166:	18db      	adds	r3, r3, r3
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
 800416a:	4613      	mov	r3, r2
 800416c:	eb42 0303 	adc.w	r3, r2, r3
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800417a:	f7fc fd1d 	bl	8000bb8 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <UART_SetConfig+0x2d4>)
 8004184:	fba3 1302 	umull	r1, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	2164      	movs	r1, #100	; 0x64
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	3332      	adds	r3, #50	; 0x32
 8004196:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <UART_SetConfig+0x2d4>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	f003 0207 	and.w	r2, r3, #7
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4422      	add	r2, r4
 80041aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041ac:	e105      	b.n	80043ba <UART_SetConfig+0x4d6>
 80041ae:	bf00      	nop
 80041b0:	40011000 	.word	0x40011000
 80041b4:	40011400 	.word	0x40011400
 80041b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ce:	4642      	mov	r2, r8
 80041d0:	464b      	mov	r3, r9
 80041d2:	1891      	adds	r1, r2, r2
 80041d4:	6239      	str	r1, [r7, #32]
 80041d6:	415b      	adcs	r3, r3
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
 80041da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041de:	4641      	mov	r1, r8
 80041e0:	1854      	adds	r4, r2, r1
 80041e2:	4649      	mov	r1, r9
 80041e4:	eb43 0501 	adc.w	r5, r3, r1
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	00eb      	lsls	r3, r5, #3
 80041f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f6:	00e2      	lsls	r2, r4, #3
 80041f8:	4614      	mov	r4, r2
 80041fa:	461d      	mov	r5, r3
 80041fc:	4643      	mov	r3, r8
 80041fe:	18e3      	adds	r3, r4, r3
 8004200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004204:	464b      	mov	r3, r9
 8004206:	eb45 0303 	adc.w	r3, r5, r3
 800420a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800421a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800422a:	4629      	mov	r1, r5
 800422c:	008b      	lsls	r3, r1, #2
 800422e:	4621      	mov	r1, r4
 8004230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004234:	4621      	mov	r1, r4
 8004236:	008a      	lsls	r2, r1, #2
 8004238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800423c:	f7fc fcbc 	bl	8000bb8 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4b60      	ldr	r3, [pc, #384]	; (80043c8 <UART_SetConfig+0x4e4>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	011c      	lsls	r4, r3, #4
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800425c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	61b9      	str	r1, [r7, #24]
 8004268:	415b      	adcs	r3, r3
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6139      	str	r1, [r7, #16]
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a4:	464b      	mov	r3, r9
 80042a6:	460a      	mov	r2, r1
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042c8:	4649      	mov	r1, r9
 80042ca:	008b      	lsls	r3, r1, #2
 80042cc:	4641      	mov	r1, r8
 80042ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d2:	4641      	mov	r1, r8
 80042d4:	008a      	lsls	r2, r1, #2
 80042d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042da:	f7fc fc6d 	bl	8000bb8 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <UART_SetConfig+0x4e4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	; 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	3332      	adds	r3, #50	; 0x32
 80042f6:	4a34      	ldr	r2, [pc, #208]	; (80043c8 <UART_SetConfig+0x4e4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004302:	441c      	add	r4, r3
 8004304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004308:	2200      	movs	r2, #0
 800430a:	673b      	str	r3, [r7, #112]	; 0x70
 800430c:	677a      	str	r2, [r7, #116]	; 0x74
 800430e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004312:	4642      	mov	r2, r8
 8004314:	464b      	mov	r3, r9
 8004316:	1891      	adds	r1, r2, r2
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	415b      	adcs	r3, r3
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004322:	4641      	mov	r1, r8
 8004324:	1851      	adds	r1, r2, r1
 8004326:	6039      	str	r1, [r7, #0]
 8004328:	4649      	mov	r1, r9
 800432a:	414b      	adcs	r3, r1
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800433a:	4659      	mov	r1, fp
 800433c:	00cb      	lsls	r3, r1, #3
 800433e:	4651      	mov	r1, sl
 8004340:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004344:	4651      	mov	r1, sl
 8004346:	00ca      	lsls	r2, r1, #3
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	4603      	mov	r3, r0
 800434e:	4642      	mov	r2, r8
 8004350:	189b      	adds	r3, r3, r2
 8004352:	66bb      	str	r3, [r7, #104]	; 0x68
 8004354:	464b      	mov	r3, r9
 8004356:	460a      	mov	r2, r1
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	663b      	str	r3, [r7, #96]	; 0x60
 8004368:	667a      	str	r2, [r7, #100]	; 0x64
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004376:	4649      	mov	r1, r9
 8004378:	008b      	lsls	r3, r1, #2
 800437a:	4641      	mov	r1, r8
 800437c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004380:	4641      	mov	r1, r8
 8004382:	008a      	lsls	r2, r1, #2
 8004384:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004388:	f7fc fc16 	bl	8000bb8 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <UART_SetConfig+0x4e4>)
 8004392:	fba3 1302 	umull	r1, r3, r3, r2
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2164      	movs	r1, #100	; 0x64
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	3332      	adds	r3, #50	; 0x32
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <UART_SetConfig+0x4e4>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	f003 020f 	and.w	r2, r3, #15
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4422      	add	r2, r4
 80043b8:	609a      	str	r2, [r3, #8]
}
 80043ba:	bf00      	nop
 80043bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043c0:	46bd      	mov	sp, r7
 80043c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c6:	bf00      	nop
 80043c8:	51eb851f 	.word	0x51eb851f

080043cc <uUbxProtocolDecode>:
// Decode a UBX protocol message.
int32_t uUbxProtocolDecode(const char *pBufferIn, size_t bufferLengthBytes,
                           int32_t *pMessageClass, int32_t *pMessageId,
                           char *pMessage, size_t maxMessageLengthBytes,
                           const char **ppBufferOut)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b08f      	sub	sp, #60	; 0x3c
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
    int32_t sizeOrErrorCode = (int32_t) U_ERROR_COMMON_NOT_FOUND;
 80043da:	f06f 030a 	mvn.w	r3, #10
 80043de:	637b      	str	r3, [r7, #52]	; 0x34
    // Use a uint8_t pointer for maths, more certain of its behaviour than char
    const uint8_t *pInput = (const uint8_t *) pBufferIn;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t overheadByteCount = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool updateCrc = false;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    size_t expectedMessageByteCount = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    size_t messageByteCount = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]
    int32_t ca = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
    int32_t cb = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]

    for (size_t x = 0; (x < bufferLengthBytes) &&
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e0b9      	b.n	8004578 <uUbxProtocolDecode+0x1ac>
         (overheadByteCount < U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES); x++) {
        switch (overheadByteCount) {
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	2b07      	cmp	r3, #7
 8004408:	f200 809b 	bhi.w	8004542 <uUbxProtocolDecode+0x176>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <uUbxProtocolDecode+0x48>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004435 	.word	0x08004435
 8004418:	08004447 	.word	0x08004447
 800441c:	0800445d 	.word	0x0800445d
 8004420:	08004483 	.word	0x08004483
 8004424:	080044a1 	.word	0x080044a1
 8004428:	080044b5 	.word	0x080044b5
 800442c:	080044d3 	.word	0x080044d3
 8004430:	08004523 	.word	0x08004523
            case 0:
                //lint -e{650} Suppress warning about 0xb5 being out of range for char
                if (*pInput == 0xb5) {
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2bb5      	cmp	r3, #181	; 0xb5
 800443a:	f040 8085 	bne.w	8004548 <uUbxProtocolDecode+0x17c>
                    // Got first byte of header, increment count
                    overheadByteCount++;
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	3301      	adds	r3, #1
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                break;
 8004444:	e080      	b.n	8004548 <uUbxProtocolDecode+0x17c>
            case 1:
                if (*pInput == 0x62) {
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b62      	cmp	r3, #98	; 0x62
 800444c:	d103      	bne.n	8004456 <uUbxProtocolDecode+0x8a>
                    // Got second byte of header, increment count
                    overheadByteCount++;
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	3301      	adds	r3, #1
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
                } else {
                    // Not a valid message, start again
                    overheadByteCount = 0;
                }
                break;
 8004454:	e079      	b.n	800454a <uUbxProtocolDecode+0x17e>
                    overheadByteCount = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800445a:	e076      	b.n	800454a <uUbxProtocolDecode+0x17e>
            case 2:
                // Got message class, store it, start CRC
                // calculation and increment count
                if (pMessageClass != NULL) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d004      	beq.n	800446c <uUbxProtocolDecode+0xa0>
                    *pMessageClass = *pInput;
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]
                }
                ca = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
                cb = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
                updateCrc = true;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	3301      	adds	r3, #1
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8004480:	e063      	b.n	800454a <uUbxProtocolDecode+0x17e>
            case 3:
                // Got message ID, store it, update CRC and
                // increment count
                if (pMessageId != NULL) {
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <uUbxProtocolDecode+0xc6>
                    *pMessageId = *pInput;
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	601a      	str	r2, [r3, #0]
                }
                updateCrc = true;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	3301      	adds	r3, #1
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800449e:	e054      	b.n	800454a <uUbxProtocolDecode+0x17e>
            case 4:
                // Got first byte of length, store it, update
                // CRC and increment count
                expectedMessageByteCount = *pInput;
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
                updateCrc = true;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ae:	3301      	adds	r3, #1
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 80044b2:	e04a      	b.n	800454a <uUbxProtocolDecode+0x17e>
            case 5:
                // Got second byte of length, add it to the first,
                // updat CRC, increment count and reset the
                // message byte count ready for the body to come next.
                // Cast twice to keep Lint happy
                expectedMessageByteCount += ((size_t) *pInput) << 8; // *NOPAD*
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	4413      	add	r3, r2
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
                messageByteCount = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	623b      	str	r3, [r7, #32]
                updateCrc = true;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	3301      	adds	r3, #1
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 80044d0:	e03b      	b.n	800454a <uUbxProtocolDecode+0x17e>
            case 6:
                if (messageByteCount < expectedMessageByteCount) {
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d213      	bcs.n	8004502 <uUbxProtocolDecode+0x136>
                    // Store the next byte of the message and
                    // update CRC
                    if ((pMessage != NULL) && (messageByteCount < maxMessageLengthBytes)) {
 80044da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <uUbxProtocolDecode+0x128>
 80044e0:	6a3a      	ldr	r2, [r7, #32]
 80044e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d205      	bcs.n	80044f4 <uUbxProtocolDecode+0x128>
                        *pMessage++ = (char) *pInput; // *NOPAD*
 80044e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	643a      	str	r2, [r7, #64]	; 0x40
 80044ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	701a      	strb	r2, [r3, #0]
                    }
                    updateCrc = true;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    messageByteCount++;
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	3301      	adds	r3, #1
 80044fe:	623b      	str	r3, [r7, #32]
                    } else {
                        // Not a valid message, start again
                        overheadByteCount = 0;
                    }
                }
                break;
 8004500:	e023      	b.n	800454a <uUbxProtocolDecode+0x17e>
                    ca &= 0xff;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	61fb      	str	r3, [r7, #28]
                    if ((uint8_t) ca == *pInput) {
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d103      	bne.n	800451c <uUbxProtocolDecode+0x150>
                        overheadByteCount++;
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	3301      	adds	r3, #1
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800451a:	e016      	b.n	800454a <uUbxProtocolDecode+0x17e>
                        overheadByteCount = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8004520:	e013      	b.n	800454a <uUbxProtocolDecode+0x17e>
            case 7:
                // Second byte of CRC, check it
                cb &= 0xff;
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	61bb      	str	r3, [r7, #24]
                if ((uint8_t) cb == *pInput) {
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d103      	bne.n	800453c <uUbxProtocolDecode+0x170>
                    overheadByteCount++;
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	3301      	adds	r3, #1
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
                } else {
                    // Not a valid message, start again
                    overheadByteCount = 0;
                }
                break;
 800453a:	e006      	b.n	800454a <uUbxProtocolDecode+0x17e>
                    overheadByteCount = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8004540:	e003      	b.n	800454a <uUbxProtocolDecode+0x17e>
            default:
                overheadByteCount = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8004546:	e000      	b.n	800454a <uUbxProtocolDecode+0x17e>
                break;
 8004548:	bf00      	nop
        }

        if (updateCrc) {
 800454a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <uUbxProtocolDecode+0x1a0>
            ca += *pInput;
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	61fb      	str	r3, [r7, #28]
            cb += ca;
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
            updateCrc = false;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        // Next byte
        pInput++;
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	3301      	adds	r3, #1
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
         (overheadByteCount < U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES); x++) {
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	3301      	adds	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
    for (size_t x = 0; (x < bufferLengthBytes) &&
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	d203      	bcs.n	8004588 <uUbxProtocolDecode+0x1bc>
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	2b07      	cmp	r3, #7
 8004584:	f77f af3e 	ble.w	8004404 <uUbxProtocolDecode+0x38>
    }

    if (overheadByteCount > 0) {
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	2b00      	cmp	r3, #0
 800458c:	dd07      	ble.n	800459e <uUbxProtocolDecode+0x1d2>
        // We got some parts of the message overhead, so
        // could be a message
        sizeOrErrorCode = (int32_t) U_ERROR_COMMON_TIMEOUT;
 800458e:	f06f 0308 	mvn.w	r3, #8
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
        if (overheadByteCount == U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES) {
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004596:	2b08      	cmp	r3, #8
 8004598:	d101      	bne.n	800459e <uUbxProtocolDecode+0x1d2>
            // We got all the overhead bytes, this is a complete message
            sizeOrErrorCode = (int32_t) messageByteCount;
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    if (ppBufferOut != NULL) {
 800459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <uUbxProtocolDecode+0x1de>
        *ppBufferOut =  (const char *) pInput;
 80045a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a8:	601a      	str	r2, [r3, #0]
    }

    return sizeOrErrorCode;
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	373c      	adds	r7, #60	; 0x3c
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80045bc:	4904      	ldr	r1, [pc, #16]	; (80045d0 <MX_FATFS_Init+0x18>)
 80045be:	4805      	ldr	r0, [pc, #20]	; (80045d4 <MX_FATFS_Init+0x1c>)
 80045c0:	f000 f8b0 	bl	8004724 <FATFS_LinkDriver>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <MX_FATFS_Init+0x20>)
 80045ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80045cc:	bf00      	nop
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20000380 	.word	0x20000380
 80045d4:	2000000c 	.word	0x2000000c
 80045d8:	2000037c 	.word	0x2000037c

080045dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <USER_initialize+0x24>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
    return Stat;
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <USER_initialize+0x24>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000009 	.word	0x20000009

08004604 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <USER_status+0x24>)
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <USER_status+0x24>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000009 	.word	0x20000009

0800462c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800463c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	4603      	mov	r3, r0
 8004658:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800465a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	603a      	str	r2, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
 8004674:	460b      	mov	r3, r1
 8004676:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
    return res;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046a4:	7a5b      	ldrb	r3, [r3, #9]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d131      	bne.n	8004710 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80046ac:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046ae:	7a5b      	ldrb	r3, [r3, #9]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046b6:	2100      	movs	r1, #0
 80046b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80046ba:	4b19      	ldr	r3, [pc, #100]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046bc:	7a5b      	ldrb	r3, [r3, #9]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046cc:	7a5b      	ldrb	r3, [r3, #9]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046d4:	4413      	add	r3, r2
 80046d6:	79fa      	ldrb	r2, [r7, #7]
 80046d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046dc:	7a5b      	ldrb	r3, [r3, #9]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	b2d1      	uxtb	r1, r2
 80046e4:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <FATFS_LinkDriverEx+0x94>)
 80046e6:	7251      	strb	r1, [r2, #9]
 80046e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80046ea:	7dbb      	ldrb	r3, [r7, #22]
 80046ec:	3330      	adds	r3, #48	; 0x30
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	3301      	adds	r3, #1
 80046f8:	223a      	movs	r2, #58	; 0x3a
 80046fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3302      	adds	r3, #2
 8004700:	222f      	movs	r2, #47	; 0x2f
 8004702:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	3303      	adds	r3, #3
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004710:	7dfb      	ldrb	r3, [r7, #23]
}
 8004712:	4618      	mov	r0, r3
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000384 	.word	0x20000384

08004724 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800472e:	2200      	movs	r2, #0
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff ffaa 	bl	800468c <FATFS_LinkDriverEx>
 8004738:	4603      	mov	r3, r0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <__NVIC_SetPriority>:
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004754:	2b00      	cmp	r3, #0
 8004756:	db0a      	blt.n	800476e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	490c      	ldr	r1, [pc, #48]	; (8004790 <__NVIC_SetPriority+0x4c>)
 800475e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004762:	0112      	lsls	r2, r2, #4
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	440b      	add	r3, r1
 8004768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800476c:	e00a      	b.n	8004784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	4908      	ldr	r1, [pc, #32]	; (8004794 <__NVIC_SetPriority+0x50>)
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	3b04      	subs	r3, #4
 800477c:	0112      	lsls	r2, r2, #4
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	440b      	add	r3, r1
 8004782:	761a      	strb	r2, [r3, #24]
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000e100 	.word	0xe000e100
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <SysTick_Handler+0x1c>)
 800479e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80047a0:	f001 fd2a 	bl	80061f8 <xTaskGetSchedulerState>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d001      	beq.n	80047ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80047aa:	f002 fb15 	bl	8006dd8 <xPortSysTickHandler>
  }
}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000e010 	.word	0xe000e010

080047b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80047bc:	2100      	movs	r1, #0
 80047be:	f06f 0004 	mvn.w	r0, #4
 80047c2:	f7ff ffbf 	bl	8004744 <__NVIC_SetPriority>
#endif
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d2:	f3ef 8305 	mrs	r3, IPSR
 80047d6:	603b      	str	r3, [r7, #0]
  return(result);
 80047d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80047de:	f06f 0305 	mvn.w	r3, #5
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	e00c      	b.n	8004800 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047e6:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <osKernelInitialize+0x44>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <osKernelInitialize+0x44>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e002      	b.n	8004800 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
 80047fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004800:	687b      	ldr	r3, [r7, #4]
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000390 	.word	0x20000390

08004814 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800481a:	f3ef 8305 	mrs	r3, IPSR
 800481e:	603b      	str	r3, [r7, #0]
  return(result);
 8004820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004826:	f06f 0305 	mvn.w	r3, #5
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	e010      	b.n	8004850 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <osKernelStart+0x48>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d109      	bne.n	800484a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004836:	f7ff ffbf 	bl	80047b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <osKernelStart+0x48>)
 800483c:	2202      	movs	r2, #2
 800483e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004840:	f001 f87c 	bl	800593c <vTaskStartScheduler>
      stat = osOK;
 8004844:	2300      	movs	r3, #0
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	e002      	b.n	8004850 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
 800484e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004850:	687b      	ldr	r3, [r7, #4]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000390 	.word	0x20000390

08004860 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b08e      	sub	sp, #56	; 0x38
 8004864:	af04      	add	r7, sp, #16
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004870:	f3ef 8305 	mrs	r3, IPSR
 8004874:	617b      	str	r3, [r7, #20]
  return(result);
 8004876:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004878:	2b00      	cmp	r3, #0
 800487a:	d17e      	bne.n	800497a <osThreadNew+0x11a>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d07b      	beq.n	800497a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004886:	2318      	movs	r3, #24
 8004888:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800488e:	f04f 33ff 	mov.w	r3, #4294967295
 8004892:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d045      	beq.n	8004926 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <osThreadNew+0x48>
        name = attr->name;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <osThreadNew+0x6e>
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b38      	cmp	r3, #56	; 0x38
 80048c0:	d805      	bhi.n	80048ce <osThreadNew+0x6e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <osThreadNew+0x72>
        return (NULL);
 80048ce:	2300      	movs	r3, #0
 80048d0:	e054      	b.n	800497c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00e      	beq.n	8004908 <osThreadNew+0xa8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2bbb      	cmp	r3, #187	; 0xbb
 80048f0:	d90a      	bls.n	8004908 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d006      	beq.n	8004908 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <osThreadNew+0xa8>
        mem = 1;
 8004902:	2301      	movs	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	e010      	b.n	800492a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10c      	bne.n	800492a <osThreadNew+0xca>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <osThreadNew+0xca>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <osThreadNew+0xca>
          mem = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	e001      	b.n	800492a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d110      	bne.n	8004952 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004938:	9202      	str	r2, [sp, #8]
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6a3a      	ldr	r2, [r7, #32]
 8004944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fe0c 	bl	8005564 <xTaskCreateStatic>
 800494c:	4603      	mov	r3, r0
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e013      	b.n	800497a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d110      	bne.n	800497a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	b29a      	uxth	r2, r3
 800495c:	f107 0310 	add.w	r3, r7, #16
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fe57 	bl	800561e <xTaskCreate>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d001      	beq.n	800497a <osThreadNew+0x11a>
            hTask = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800497a:	693b      	ldr	r3, [r7, #16]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800498c:	f3ef 8305 	mrs	r3, IPSR
 8004990:	60bb      	str	r3, [r7, #8]
  return(result);
 8004992:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <osDelay+0x1c>
    stat = osErrorISR;
 8004998:	f06f 0305 	mvn.w	r3, #5
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	e007      	b.n	80049b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 ff92 	bl	80058d4 <vTaskDelay>
    }
  }

  return (stat);
 80049b0:	68fb      	ldr	r3, [r7, #12]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80049cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4a06      	ldr	r2, [pc, #24]	; (80049ec <vApplicationGetIdleTaskMemory+0x30>)
 80049d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2280      	movs	r2, #128	; 0x80
 80049d8:	601a      	str	r2, [r3, #0]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000394 	.word	0x20000394
 80049ec:	20000450 	.word	0x20000450

080049f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8004a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a06      	ldr	r2, [pc, #24]	; (8004a20 <vApplicationGetTimerTaskMemory+0x30>)
 8004a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	20000650 	.word	0x20000650
 8004a20:	2000070c 	.word	0x2000070c

08004a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f103 0208 	add.w	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f103 0208 	add.w	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f103 0208 	add.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d103      	bne.n	8004ae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e00c      	b.n	8004b00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e002      	b.n	8004af4 <vListInsert+0x2e>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d2f6      	bcs.n	8004aee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	601a      	str	r2, [r3, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6892      	ldr	r2, [r2, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6852      	ldr	r2, [r2, #4]
 8004b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d103      	bne.n	8004b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	1e5a      	subs	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bb6:	f002 f87d 	bl	8006cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	441a      	add	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	3b01      	subs	r3, #1
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d114      	bne.n	8004c36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01a      	beq.n	8004c4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3310      	adds	r3, #16
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 f929 	bl	8005e70 <xTaskRemoveFromEventList>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d012      	beq.n	8004c4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <xQueueGenericReset+0xcc>)
 8004c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	e009      	b.n	8004c4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3310      	adds	r3, #16
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fef2 	bl	8004a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3324      	adds	r3, #36	; 0x24
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff feed 	bl	8004a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c4a:	f002 f863 	bl	8006d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c4e:	2301      	movs	r3, #1
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	; 0x38
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <xQueueGenericCreateStatic+0x52>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <xQueueGenericCreateStatic+0x56>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericCreateStatic+0x58>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <xQueueGenericCreateStatic+0x7e>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <xQueueGenericCreateStatic+0x82>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <xQueueGenericCreateStatic+0x84>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	61fb      	str	r3, [r7, #28]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cfa:	2350      	movs	r3, #80	; 0x50
 8004cfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b50      	cmp	r3, #80	; 0x50
 8004d02:	d00a      	beq.n	8004d1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	61bb      	str	r3, [r7, #24]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f805 	bl	8004d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3730      	adds	r7, #48	; 0x30
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e002      	b.n	8004d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	69b8      	ldr	r0, [r7, #24]
 8004d7e:	f7ff ff05 	bl	8004b8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	; 0x38
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004da2:	2300      	movs	r3, #0
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericSend+0x32>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <xQueueGenericSend+0x40>
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <xQueueGenericSend+0x44>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <xQueueGenericSend+0x46>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <xQueueGenericSend+0x60>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d103      	bne.n	8004e02 <xQueueGenericSend+0x6e>
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <xQueueGenericSend+0x72>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueGenericSend+0x74>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xQueueGenericSend+0x8e>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	623b      	str	r3, [r7, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e22:	f001 f9e9 	bl	80061f8 <xTaskGetSchedulerState>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <xQueueGenericSend+0x9e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <xQueueGenericSend+0xa2>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <xQueueGenericSend+0xa4>
 8004e36:	2300      	movs	r3, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	61fb      	str	r3, [r7, #28]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e52:	f001 ff2f 	bl	8006cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <xQueueGenericSend+0xd4>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d129      	bne.n	8004ebc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e6e:	f000 fa0b 	bl	8005288 <prvCopyDataToQueue>
 8004e72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	3324      	adds	r3, #36	; 0x24
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fff5 	bl	8005e70 <xTaskRemoveFromEventList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e8c:	4b3f      	ldr	r3, [pc, #252]	; (8004f8c <xQueueGenericSend+0x1f8>)
 8004e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	e00a      	b.n	8004eb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ea4:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <xQueueGenericSend+0x1f8>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004eb4:	f001 ff2e 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e063      	b.n	8004f84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec2:	f001 ff27 	bl	8006d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e05c      	b.n	8004f84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 f82f 	bl	8005f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ede:	f001 ff19 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ee2:	f000 fd9b 	bl	8005a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ee6:	f001 fee5 	bl	8006cb4 <vPortEnterCritical>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d103      	bne.n	8004f00 <xQueueGenericSend+0x16c>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d103      	bne.n	8004f16 <xQueueGenericSend+0x182>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f16:	f001 fefd 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1a:	1d3a      	adds	r2, r7, #4
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 f81e 	bl	8005f64 <xTaskCheckForTimeOut>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d124      	bne.n	8004f78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f30:	f000 faa2 	bl	8005478 <prvIsQueueFull>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d018      	beq.n	8004f6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 ff44 	bl	8005dd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f4a:	f000 fa2d 	bl	80053a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f4e:	f000 fd73 	bl	8005a38 <xTaskResumeAll>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f47f af7c 	bne.w	8004e52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <xQueueGenericSend+0x1f8>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	e772      	b.n	8004e52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f6e:	f000 fa1b 	bl	80053a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f72:	f000 fd61 	bl	8005a38 <xTaskResumeAll>
 8004f76:	e76c      	b.n	8004e52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7a:	f000 fa15 	bl	80053a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f7e:	f000 fd5b 	bl	8005a38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3738      	adds	r7, #56	; 0x38
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b090      	sub	sp, #64	; 0x40
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <xQueueGenericSendFromISR+0x3c>
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <xQueueGenericSendFromISR+0x40>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <xQueueGenericSendFromISR+0x42>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d103      	bne.n	8004ffa <xQueueGenericSendFromISR+0x6a>
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <xQueueGenericSendFromISR+0x6e>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <xQueueGenericSendFromISR+0x70>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	623b      	str	r3, [r7, #32]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800501a:	f001 ff2d 	bl	8006e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800501e:	f3ef 8211 	mrs	r2, BASEPRI
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	61fa      	str	r2, [r7, #28]
 8005034:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005036:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <xQueueGenericSendFromISR+0xbc>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d12f      	bne.n	80050ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005062:	f000 f911 	bl	8005288 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005066:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d112      	bne.n	8005096 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	d016      	beq.n	80050a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	3324      	adds	r3, #36	; 0x24
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fef7 	bl	8005e70 <xTaskRemoveFromEventList>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00e      	beq.n	80050a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e007      	b.n	80050a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005096:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800509a:	3301      	adds	r3, #1
 800509c:	b2db      	uxtb	r3, r3
 800509e:	b25a      	sxtb	r2, r3
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050a6:	2301      	movs	r3, #1
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050aa:	e001      	b.n	80050b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3740      	adds	r7, #64	; 0x40
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	; 0x30
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <xQueueReceive+0x30>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	623b      	str	r3, [r7, #32]
}
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <xQueueReceive+0x3e>
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <xQueueReceive+0x42>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <xQueueReceive+0x44>
 800510a:	2300      	movs	r3, #0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xQueueReceive+0x5e>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61fb      	str	r3, [r7, #28]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005126:	f001 f867 	bl	80061f8 <xTaskGetSchedulerState>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d102      	bne.n	8005136 <xQueueReceive+0x6e>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <xQueueReceive+0x72>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <xQueueReceive+0x74>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xQueueReceive+0x8e>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	61bb      	str	r3, [r7, #24]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005156:	f001 fdad 	bl	8006cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01f      	beq.n	80051a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800516a:	f000 f8f7 	bl	800535c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	1e5a      	subs	r2, r3, #1
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00f      	beq.n	800519e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	3310      	adds	r3, #16
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fe74 	bl	8005e70 <xTaskRemoveFromEventList>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800518e:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <xQueueReceive+0x1bc>)
 8005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800519e:	f001 fdb9 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e069      	b.n	800527a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d103      	bne.n	80051b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ac:	f001 fdb2 	bl	8006d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e062      	b.n	800527a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 feba 	bl	8005f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051c4:	2301      	movs	r3, #1
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051c8:	f001 fda4 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051cc:	f000 fc26 	bl	8005a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051d0:	f001 fd70 	bl	8006cb4 <vPortEnterCritical>
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051da:	b25b      	sxtb	r3, r3
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d103      	bne.n	80051ea <xQueueReceive+0x122>
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f0:	b25b      	sxtb	r3, r3
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d103      	bne.n	8005200 <xQueueReceive+0x138>
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005200:	f001 fd88 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005204:	1d3a      	adds	r2, r7, #4
 8005206:	f107 0310 	add.w	r3, r7, #16
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fea9 	bl	8005f64 <xTaskCheckForTimeOut>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d123      	bne.n	8005260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800521a:	f000 f917 	bl	800544c <prvIsQueueEmpty>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d017      	beq.n	8005254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	3324      	adds	r3, #36	; 0x24
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fdcf 	bl	8005dd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005234:	f000 f8b8 	bl	80053a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005238:	f000 fbfe 	bl	8005a38 <xTaskResumeAll>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d189      	bne.n	8005156 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <xQueueReceive+0x1bc>)
 8005244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	e780      	b.n	8005156 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005256:	f000 f8a7 	bl	80053a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800525a:	f000 fbed 	bl	8005a38 <xTaskResumeAll>
 800525e:	e77a      	b.n	8005156 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005262:	f000 f8a1 	bl	80053a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005266:	f000 fbe7 	bl	8005a38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800526a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526c:	f000 f8ee 	bl	800544c <prvIsQueueEmpty>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f43f af6f 	beq.w	8005156 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800527a:	4618      	mov	r0, r3
 800527c:	3730      	adds	r7, #48	; 0x30
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10d      	bne.n	80052c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d14d      	bne.n	800534a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 ffbe 	bl	8006234 <xTaskPriorityDisinherit>
 80052b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	609a      	str	r2, [r3, #8]
 80052c0:	e043      	b.n	800534a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d119      	bne.n	80052fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6858      	ldr	r0, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	461a      	mov	r2, r3
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	f002 f932 	bl	800753c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	441a      	add	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d32b      	bcc.n	800534a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	e026      	b.n	800534a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	68d8      	ldr	r0, [r3, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	461a      	mov	r2, r3
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	f002 f918 	bl	800753c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	425b      	negs	r3, r3
 8005316:	441a      	add	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d207      	bcs.n	8005338 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	425b      	negs	r3, r3
 8005332:	441a      	add	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d105      	bne.n	800534a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3b01      	subs	r3, #1
 8005348:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005352:	697b      	ldr	r3, [r7, #20]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	441a      	add	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	d303      	bcc.n	8005390 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68d9      	ldr	r1, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	461a      	mov	r2, r3
 800539a:	6838      	ldr	r0, [r7, #0]
 800539c:	f002 f8ce 	bl	800753c <memcpy>
	}
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053b0:	f001 fc80 	bl	8006cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053bc:	e011      	b.n	80053e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d012      	beq.n	80053ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3324      	adds	r3, #36	; 0x24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fd50 	bl	8005e70 <xTaskRemoveFromEventList>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053d6:	f000 fe27 	bl	8006028 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	3b01      	subs	r3, #1
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	dce9      	bgt.n	80053be <prvUnlockQueue+0x16>
 80053ea:	e000      	b.n	80053ee <prvUnlockQueue+0x46>
					break;
 80053ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	22ff      	movs	r2, #255	; 0xff
 80053f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053f6:	f001 fc8d 	bl	8006d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053fa:	f001 fc5b 	bl	8006cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005404:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005406:	e011      	b.n	800542c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d012      	beq.n	8005436 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3310      	adds	r3, #16
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fd2b 	bl	8005e70 <xTaskRemoveFromEventList>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005420:	f000 fe02 	bl	8006028 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	3b01      	subs	r3, #1
 8005428:	b2db      	uxtb	r3, r3
 800542a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800542c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005430:	2b00      	cmp	r3, #0
 8005432:	dce9      	bgt.n	8005408 <prvUnlockQueue+0x60>
 8005434:	e000      	b.n	8005438 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005436:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	22ff      	movs	r2, #255	; 0xff
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005440:	f001 fc68 	bl	8006d14 <vPortExitCritical>
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005454:	f001 fc2e 	bl	8006cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e001      	b.n	800546a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800546a:	f001 fc53 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 800546e:	68fb      	ldr	r3, [r7, #12]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005480:	f001 fc18 	bl	8006cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548c:	429a      	cmp	r2, r3
 800548e:	d102      	bne.n	8005496 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e001      	b.n	800549a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800549a:	f001 fc3b 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 800549e:	68fb      	ldr	r3, [r7, #12]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	e014      	b.n	80054e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054b8:	4a0f      	ldr	r2, [pc, #60]	; (80054f8 <vQueueAddToRegistry+0x50>)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054c4:	490c      	ldr	r1, [pc, #48]	; (80054f8 <vQueueAddToRegistry+0x50>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <vQueueAddToRegistry+0x50>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4413      	add	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054da:	e006      	b.n	80054ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b07      	cmp	r3, #7
 80054e6:	d9e7      	bls.n	80054b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000b0c 	.word	0x20000b0c

080054fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800550c:	f001 fbd2 	bl	8006cb4 <vPortEnterCritical>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005516:	b25b      	sxtb	r3, r3
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d103      	bne.n	8005526 <vQueueWaitForMessageRestricted+0x2a>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800552c:	b25b      	sxtb	r3, r3
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d103      	bne.n	800553c <vQueueWaitForMessageRestricted+0x40>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800553c:	f001 fbea 	bl	8006d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	3324      	adds	r3, #36	; 0x24
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fc61 	bl	8005e18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005556:	6978      	ldr	r0, [r7, #20]
 8005558:	f7ff ff26 	bl	80053a8 <prvUnlockQueue>
	}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	; 0x38
 8005568:	af04      	add	r7, sp, #16
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	623b      	str	r3, [r7, #32]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xTaskCreateStatic+0x46>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	61fb      	str	r3, [r7, #28]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055aa:	23bc      	movs	r3, #188	; 0xbc
 80055ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2bbc      	cmp	r3, #188	; 0xbc
 80055b2:	d00a      	beq.n	80055ca <xTaskCreateStatic+0x66>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	61bb      	str	r3, [r7, #24]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01e      	beq.n	8005610 <xTaskCreateStatic+0xac>
 80055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01b      	beq.n	8005610 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055ea:	2300      	movs	r3, #0
 80055ec:	9303      	str	r3, [sp, #12]
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	9302      	str	r3, [sp, #8]
 80055f2:	f107 0314 	add.w	r3, r7, #20
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f850 	bl	80056a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800560a:	f000 f8f3 	bl	80057f4 <prvAddNewTaskToReadyList>
 800560e:	e001      	b.n	8005614 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005614:	697b      	ldr	r3, [r7, #20]
	}
 8005616:	4618      	mov	r0, r3
 8005618:	3728      	adds	r7, #40	; 0x28
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800561e:	b580      	push	{r7, lr}
 8005620:	b08c      	sub	sp, #48	; 0x30
 8005622:	af04      	add	r7, sp, #16
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4618      	mov	r0, r3
 8005634:	f001 fc60 	bl	8006ef8 <pvPortMalloc>
 8005638:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00e      	beq.n	800565e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005640:	20bc      	movs	r0, #188	; 0xbc
 8005642:	f001 fc59 	bl	8006ef8 <pvPortMalloc>
 8005646:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
 8005654:	e005      	b.n	8005662 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f001 fd1a 	bl	8007090 <vPortFree>
 800565c:	e001      	b.n	8005662 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d017      	beq.n	8005698 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005670:	88fa      	ldrh	r2, [r7, #6]
 8005672:	2300      	movs	r3, #0
 8005674:	9303      	str	r3, [sp, #12]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	9302      	str	r3, [sp, #8]
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f80e 	bl	80056a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800568c:	69f8      	ldr	r0, [r7, #28]
 800568e:	f000 f8b1 	bl	80057f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005692:	2301      	movs	r3, #1
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	e002      	b.n	800569e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005698:	f04f 33ff 	mov.w	r3, #4294967295
 800569c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800569e:	69bb      	ldr	r3, [r7, #24]
	}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	461a      	mov	r2, r3
 80056c0:	21a5      	movs	r1, #165	; 0xa5
 80056c2:	f001 ff49 	bl	8007558 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056d0:	3b01      	subs	r3, #1
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f023 0307 	bic.w	r3, r3, #7
 80056de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <prvInitialiseNewTask+0x58>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	617b      	str	r3, [r7, #20]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01f      	beq.n	8005746 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	e012      	b.n	8005732 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	7819      	ldrb	r1, [r3, #0]
 8005714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	3334      	adds	r3, #52	; 0x34
 800571c:	460a      	mov	r2, r1
 800571e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d006      	beq.n	800573a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b0f      	cmp	r3, #15
 8005736:	d9e9      	bls.n	800570c <prvInitialiseNewTask+0x64>
 8005738:	e000      	b.n	800573c <prvInitialiseNewTask+0x94>
			{
				break;
 800573a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005744:	e003      	b.n	800574e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	2b37      	cmp	r3, #55	; 0x37
 8005752:	d901      	bls.n	8005758 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005754:	2337      	movs	r3, #55	; 0x37
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800575c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005762:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	2200      	movs	r2, #0
 8005768:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	3304      	adds	r3, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff f978 	bl	8004a64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	3318      	adds	r3, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff f973 	bl	8004a64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005792:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	3354      	adds	r3, #84	; 0x54
 80057a8:	2260      	movs	r2, #96	; 0x60
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 fed3 	bl	8007558 <memset>
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <prvInitialiseNewTask+0x140>)
 80057b6:	659a      	str	r2, [r3, #88]	; 0x58
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	4a0c      	ldr	r2, [pc, #48]	; (80057ec <prvInitialiseNewTask+0x144>)
 80057bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	4a0b      	ldr	r2, [pc, #44]	; (80057f0 <prvInitialiseNewTask+0x148>)
 80057c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	68f9      	ldr	r1, [r7, #12]
 80057c8:	69b8      	ldr	r0, [r7, #24]
 80057ca:	f001 f943 	bl	8006a54 <pxPortInitialiseStack>
 80057ce:	4602      	mov	r2, r0
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e0:	bf00      	nop
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	0800a058 	.word	0x0800a058
 80057ec:	0800a078 	.word	0x0800a078
 80057f0:	0800a038 	.word	0x0800a038

080057f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057fc:	f001 fa5a 	bl	8006cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005800:	4b2d      	ldr	r3, [pc, #180]	; (80058b8 <prvAddNewTaskToReadyList+0xc4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a2c      	ldr	r2, [pc, #176]	; (80058b8 <prvAddNewTaskToReadyList+0xc4>)
 8005808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800580a:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <prvAddNewTaskToReadyList+0xc8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005812:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <prvAddNewTaskToReadyList+0xc8>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005818:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <prvAddNewTaskToReadyList+0xc4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d110      	bne.n	8005842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005820:	f000 fc28 	bl	8006074 <prvInitialiseTaskLists>
 8005824:	e00d      	b.n	8005842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005826:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <prvAddNewTaskToReadyList+0xcc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800582e:	4b23      	ldr	r3, [pc, #140]	; (80058bc <prvAddNewTaskToReadyList+0xc8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	429a      	cmp	r2, r3
 800583a:	d802      	bhi.n	8005842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800583c:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <prvAddNewTaskToReadyList+0xc8>)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005842:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <prvAddNewTaskToReadyList+0xd0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <prvAddNewTaskToReadyList+0xd0>)
 800584a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800584c:	4b1d      	ldr	r3, [pc, #116]	; (80058c4 <prvAddNewTaskToReadyList+0xd0>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005858:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <prvAddNewTaskToReadyList+0xd4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d903      	bls.n	8005868 <prvAddNewTaskToReadyList+0x74>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <prvAddNewTaskToReadyList+0xd4>)
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4a15      	ldr	r2, [pc, #84]	; (80058cc <prvAddNewTaskToReadyList+0xd8>)
 8005876:	441a      	add	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f7ff f8fd 	bl	8004a7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005884:	f001 fa46 	bl	8006d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <prvAddNewTaskToReadyList+0xcc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00e      	beq.n	80058ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <prvAddNewTaskToReadyList+0xc8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	429a      	cmp	r2, r3
 800589c:	d207      	bcs.n	80058ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <prvAddNewTaskToReadyList+0xdc>)
 80058a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20001020 	.word	0x20001020
 80058bc:	20000b4c 	.word	0x20000b4c
 80058c0:	2000102c 	.word	0x2000102c
 80058c4:	2000103c 	.word	0x2000103c
 80058c8:	20001028 	.word	0x20001028
 80058cc:	20000b50 	.word	0x20000b50
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d017      	beq.n	8005916 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <vTaskDelay+0x60>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <vTaskDelay+0x30>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	60bb      	str	r3, [r7, #8]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005904:	f000 f88a 	bl	8005a1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005908:	2100      	movs	r1, #0
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fd00 	bl	8006310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005910:	f000 f892 	bl	8005a38 <xTaskResumeAll>
 8005914:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <vTaskDelay+0x64>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20001048 	.word	0x20001048
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800594a:	463a      	mov	r2, r7
 800594c:	1d39      	adds	r1, r7, #4
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff f832 	bl	80049bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	9202      	str	r2, [sp, #8]
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	2300      	movs	r3, #0
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	2300      	movs	r3, #0
 8005968:	460a      	mov	r2, r1
 800596a:	4924      	ldr	r1, [pc, #144]	; (80059fc <vTaskStartScheduler+0xc0>)
 800596c:	4824      	ldr	r0, [pc, #144]	; (8005a00 <vTaskStartScheduler+0xc4>)
 800596e:	f7ff fdf9 	bl	8005564 <xTaskCreateStatic>
 8005972:	4603      	mov	r3, r0
 8005974:	4a23      	ldr	r2, [pc, #140]	; (8005a04 <vTaskStartScheduler+0xc8>)
 8005976:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005978:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <vTaskStartScheduler+0xc8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005980:	2301      	movs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e001      	b.n	800598a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d102      	bne.n	8005996 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005990:	f000 fd12 	bl	80063b8 <xTimerCreateTimerTask>
 8005994:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d11b      	bne.n	80059d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	613b      	str	r3, [r7, #16]
}
 80059ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059b0:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <vTaskStartScheduler+0xcc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3354      	adds	r3, #84	; 0x54
 80059b6:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <vTaskStartScheduler+0xd0>)
 80059b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059ba:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <vTaskStartScheduler+0xd4>)
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059c2:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <vTaskStartScheduler+0xd8>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059c8:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <vTaskStartScheduler+0xdc>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059ce:	f001 f8cf 	bl	8006b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059d2:	e00e      	b.n	80059f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d10a      	bne.n	80059f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60fb      	str	r3, [r7, #12]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <vTaskStartScheduler+0xb4>
}
 80059f2:	bf00      	nop
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	08009ed8 	.word	0x08009ed8
 8005a00:	08006041 	.word	0x08006041
 8005a04:	20001044 	.word	0x20001044
 8005a08:	20000b4c 	.word	0x20000b4c
 8005a0c:	20000024 	.word	0x20000024
 8005a10:	20001040 	.word	0x20001040
 8005a14:	2000102c 	.word	0x2000102c
 8005a18:	20001024 	.word	0x20001024

08005a1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <vTaskSuspendAll+0x18>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	4a03      	ldr	r2, [pc, #12]	; (8005a34 <vTaskSuspendAll+0x18>)
 8005a28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20001048 	.word	0x20001048

08005a38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a46:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <xTaskResumeAll+0x118>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	603b      	str	r3, [r7, #0]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a64:	f001 f926 	bl	8006cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a68:	4b39      	ldr	r3, [pc, #228]	; (8005b50 <xTaskResumeAll+0x118>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	4a38      	ldr	r2, [pc, #224]	; (8005b50 <xTaskResumeAll+0x118>)
 8005a70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a72:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <xTaskResumeAll+0x118>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d162      	bne.n	8005b40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a7a:	4b36      	ldr	r3, [pc, #216]	; (8005b54 <xTaskResumeAll+0x11c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d05e      	beq.n	8005b40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a82:	e02f      	b.n	8005ae4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a84:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <xTaskResumeAll+0x120>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3318      	adds	r3, #24
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff f851 	bl	8004b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff f84c 	bl	8004b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <xTaskResumeAll+0x124>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d903      	bls.n	8005ab4 <xTaskResumeAll+0x7c>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <xTaskResumeAll+0x124>)
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4a27      	ldr	r2, [pc, #156]	; (8005b60 <xTaskResumeAll+0x128>)
 8005ac2:	441a      	add	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f7fe ffd7 	bl	8004a7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad4:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <xTaskResumeAll+0x12c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ade:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <xTaskResumeAll+0x130>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <xTaskResumeAll+0x120>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1cb      	bne.n	8005a84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005af2:	f000 fb61 	bl	80061b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005af6:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <xTaskResumeAll+0x134>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d010      	beq.n	8005b24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b02:	f000 f847 	bl	8005b94 <xTaskIncrementTick>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b0c:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <xTaskResumeAll+0x130>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f1      	bne.n	8005b02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <xTaskResumeAll+0x134>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b24:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <xTaskResumeAll+0x130>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b30:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <xTaskResumeAll+0x138>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b40:	f001 f8e8 	bl	8006d14 <vPortExitCritical>

	return xAlreadyYielded;
 8005b44:	68bb      	ldr	r3, [r7, #8]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20001048 	.word	0x20001048
 8005b54:	20001020 	.word	0x20001020
 8005b58:	20000fe0 	.word	0x20000fe0
 8005b5c:	20001028 	.word	0x20001028
 8005b60:	20000b50 	.word	0x20000b50
 8005b64:	20000b4c 	.word	0x20000b4c
 8005b68:	20001034 	.word	0x20001034
 8005b6c:	20001030 	.word	0x20001030
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <xTaskGetTickCount+0x1c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b80:	687b      	ldr	r3, [r7, #4]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20001024 	.word	0x20001024

08005b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b9e:	4b4f      	ldr	r3, [pc, #316]	; (8005cdc <xTaskIncrementTick+0x148>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 808f 	bne.w	8005cc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ba8:	4b4d      	ldr	r3, [pc, #308]	; (8005ce0 <xTaskIncrementTick+0x14c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bb0:	4a4b      	ldr	r2, [pc, #300]	; (8005ce0 <xTaskIncrementTick+0x14c>)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d120      	bne.n	8005bfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bbc:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <xTaskIncrementTick+0x150>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <xTaskIncrementTick+0x48>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	603b      	str	r3, [r7, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <xTaskIncrementTick+0x46>
 8005bdc:	4b41      	ldr	r3, [pc, #260]	; (8005ce4 <xTaskIncrementTick+0x150>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <xTaskIncrementTick+0x154>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a3f      	ldr	r2, [pc, #252]	; (8005ce4 <xTaskIncrementTick+0x150>)
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	4a3f      	ldr	r2, [pc, #252]	; (8005ce8 <xTaskIncrementTick+0x154>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	4b3e      	ldr	r3, [pc, #248]	; (8005cec <xTaskIncrementTick+0x158>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	4a3d      	ldr	r2, [pc, #244]	; (8005cec <xTaskIncrementTick+0x158>)
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	f000 fadd 	bl	80061b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bfe:	4b3c      	ldr	r3, [pc, #240]	; (8005cf0 <xTaskIncrementTick+0x15c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d349      	bcc.n	8005c9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c08:	4b36      	ldr	r3, [pc, #216]	; (8005ce4 <xTaskIncrementTick+0x150>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c12:	4b37      	ldr	r3, [pc, #220]	; (8005cf0 <xTaskIncrementTick+0x15c>)
 8005c14:	f04f 32ff 	mov.w	r2, #4294967295
 8005c18:	601a      	str	r2, [r3, #0]
					break;
 8005c1a:	e03f      	b.n	8005c9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1c:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <xTaskIncrementTick+0x150>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d203      	bcs.n	8005c3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c34:	4a2e      	ldr	r2, [pc, #184]	; (8005cf0 <xTaskIncrementTick+0x15c>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c3a:	e02f      	b.n	8005c9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe ff79 	bl	8004b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	3318      	adds	r3, #24
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe ff70 	bl	8004b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <xTaskIncrementTick+0x160>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d903      	bls.n	8005c6c <xTaskIncrementTick+0xd8>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <xTaskIncrementTick+0x160>)
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <xTaskIncrementTick+0x164>)
 8005c7a:	441a      	add	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fe fefb 	bl	8004a7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <xTaskIncrementTick+0x168>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d3b8      	bcc.n	8005c08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c96:	2301      	movs	r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c9a:	e7b5      	b.n	8005c08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c9c:	4b17      	ldr	r3, [pc, #92]	; (8005cfc <xTaskIncrementTick+0x168>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	4915      	ldr	r1, [pc, #84]	; (8005cf8 <xTaskIncrementTick+0x164>)
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d901      	bls.n	8005cb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005cb8:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <xTaskIncrementTick+0x16c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e004      	b.n	8005cd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <xTaskIncrementTick+0x170>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <xTaskIncrementTick+0x170>)
 8005cce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cd0:	697b      	ldr	r3, [r7, #20]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20001048 	.word	0x20001048
 8005ce0:	20001024 	.word	0x20001024
 8005ce4:	20000fd8 	.word	0x20000fd8
 8005ce8:	20000fdc 	.word	0x20000fdc
 8005cec:	20001038 	.word	0x20001038
 8005cf0:	20001040 	.word	0x20001040
 8005cf4:	20001028 	.word	0x20001028
 8005cf8:	20000b50 	.word	0x20000b50
 8005cfc:	20000b4c 	.word	0x20000b4c
 8005d00:	20001034 	.word	0x20001034
 8005d04:	20001030 	.word	0x20001030

08005d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d0e:	4b2a      	ldr	r3, [pc, #168]	; (8005db8 <vTaskSwitchContext+0xb0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d16:	4b29      	ldr	r3, [pc, #164]	; (8005dbc <vTaskSwitchContext+0xb4>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d1c:	e046      	b.n	8005dac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005d1e:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <vTaskSwitchContext+0xb4>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d24:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <vTaskSwitchContext+0xb8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e010      	b.n	8005d4e <vTaskSwitchContext+0x46>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <vTaskSwitchContext+0x40>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	607b      	str	r3, [r7, #4]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <vTaskSwitchContext+0x3e>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	491d      	ldr	r1, [pc, #116]	; (8005dc4 <vTaskSwitchContext+0xbc>)
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0e4      	beq.n	8005d2c <vTaskSwitchContext+0x24>
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <vTaskSwitchContext+0xbc>)
 8005d6e:	4413      	add	r3, r2
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3308      	adds	r3, #8
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d104      	bne.n	8005d92 <vTaskSwitchContext+0x8a>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	605a      	str	r2, [r3, #4]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <vTaskSwitchContext+0xc0>)
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <vTaskSwitchContext+0xb8>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <vTaskSwitchContext+0xc0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3354      	adds	r3, #84	; 0x54
 8005da8:	4a08      	ldr	r2, [pc, #32]	; (8005dcc <vTaskSwitchContext+0xc4>)
 8005daa:	6013      	str	r3, [r2, #0]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	20001048 	.word	0x20001048
 8005dbc:	20001034 	.word	0x20001034
 8005dc0:	20001028 	.word	0x20001028
 8005dc4:	20000b50 	.word	0x20000b50
 8005dc8:	20000b4c 	.word	0x20000b4c
 8005dcc:	20000024 	.word	0x20000024

08005dd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <vTaskPlaceOnEventList+0x44>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3318      	adds	r3, #24
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fe fe61 	bl	8004ac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e04:	2101      	movs	r1, #1
 8005e06:	6838      	ldr	r0, [r7, #0]
 8005e08:	f000 fa82 	bl	8006310 <prvAddCurrentTaskToDelayedList>
}
 8005e0c:	bf00      	nop
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20000b4c 	.word	0x20000b4c

08005e18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	617b      	str	r3, [r7, #20]
}
 8005e3c:	bf00      	nop
 8005e3e:	e7fe      	b.n	8005e3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <vTaskPlaceOnEventListRestricted+0x54>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3318      	adds	r3, #24
 8005e46:	4619      	mov	r1, r3
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7fe fe18 	bl	8004a7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e54:	f04f 33ff 	mov.w	r3, #4294967295
 8005e58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	68b8      	ldr	r0, [r7, #8]
 8005e5e:	f000 fa57 	bl	8006310 <prvAddCurrentTaskToDelayedList>
	}
 8005e62:	bf00      	nop
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000b4c 	.word	0x20000b4c

08005e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60fb      	str	r3, [r7, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	3318      	adds	r3, #24
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fe49 	bl	8004b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea6:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <xTaskRemoveFromEventList+0xb0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d11d      	bne.n	8005eea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fe40 	bl	8004b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <xTaskRemoveFromEventList+0xb4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d903      	bls.n	8005ecc <xTaskRemoveFromEventList+0x5c>
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <xTaskRemoveFromEventList+0xb4>)
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <xTaskRemoveFromEventList+0xb8>)
 8005eda:	441a      	add	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f7fe fdcb 	bl	8004a7e <vListInsertEnd>
 8005ee8:	e005      	b.n	8005ef6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3318      	adds	r3, #24
 8005eee:	4619      	mov	r1, r3
 8005ef0:	480e      	ldr	r0, [pc, #56]	; (8005f2c <xTaskRemoveFromEventList+0xbc>)
 8005ef2:	f7fe fdc4 	bl	8004a7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <xTaskRemoveFromEventList+0xc0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d905      	bls.n	8005f10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f04:	2301      	movs	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <xTaskRemoveFromEventList+0xc4>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e001      	b.n	8005f14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f14:	697b      	ldr	r3, [r7, #20]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20001048 	.word	0x20001048
 8005f24:	20001028 	.word	0x20001028
 8005f28:	20000b50 	.word	0x20000b50
 8005f2c:	20000fe0 	.word	0x20000fe0
 8005f30:	20000b4c 	.word	0x20000b4c
 8005f34:	20001034 	.word	0x20001034

08005f38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <vTaskInternalSetTimeOutState+0x24>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <vTaskInternalSetTimeOutState+0x28>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	605a      	str	r2, [r3, #4]
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	20001038 	.word	0x20001038
 8005f60:	20001024 	.word	0x20001024

08005f64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	613b      	str	r3, [r7, #16]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005fa6:	f000 fe85 	bl	8006cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005faa:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <xTaskCheckForTimeOut+0xbc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc2:	d102      	bne.n	8005fca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	e023      	b.n	8006012 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b15      	ldr	r3, [pc, #84]	; (8006024 <xTaskCheckForTimeOut+0xc0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d007      	beq.n	8005fe6 <xTaskCheckForTimeOut+0x82>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	e015      	b.n	8006012 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d20b      	bcs.n	8006008 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	1ad2      	subs	r2, r2, r3
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ff9b 	bl	8005f38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
 8006006:	e004      	b.n	8006012 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800600e:	2301      	movs	r3, #1
 8006010:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006012:	f000 fe7f 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 8006016:	69fb      	ldr	r3, [r7, #28]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20001024 	.word	0x20001024
 8006024:	20001038 	.word	0x20001038

08006028 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800602c:	4b03      	ldr	r3, [pc, #12]	; (800603c <vTaskMissedYield+0x14>)
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
}
 8006032:	bf00      	nop
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	20001034 	.word	0x20001034

08006040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006048:	f000 f854 	bl	80060f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800604c:	4b07      	ldr	r3, [pc, #28]	; (800606c <prvIdleTask+0x2c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d907      	bls.n	8006064 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <prvIdleTask+0x30>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006064:	f7fa ff2a 	bl	8000ebc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006068:	e7ee      	b.n	8006048 <prvIdleTask+0x8>
 800606a:	bf00      	nop
 800606c:	20000b50 	.word	0x20000b50
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800607a:	2300      	movs	r3, #0
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	e00c      	b.n	800609a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4a12      	ldr	r2, [pc, #72]	; (80060d4 <prvInitialiseTaskLists+0x60>)
 800608c:	4413      	add	r3, r2
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fcc8 	bl	8004a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3301      	adds	r3, #1
 8006098:	607b      	str	r3, [r7, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b37      	cmp	r3, #55	; 0x37
 800609e:	d9ef      	bls.n	8006080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060a0:	480d      	ldr	r0, [pc, #52]	; (80060d8 <prvInitialiseTaskLists+0x64>)
 80060a2:	f7fe fcbf 	bl	8004a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060a6:	480d      	ldr	r0, [pc, #52]	; (80060dc <prvInitialiseTaskLists+0x68>)
 80060a8:	f7fe fcbc 	bl	8004a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060ac:	480c      	ldr	r0, [pc, #48]	; (80060e0 <prvInitialiseTaskLists+0x6c>)
 80060ae:	f7fe fcb9 	bl	8004a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060b2:	480c      	ldr	r0, [pc, #48]	; (80060e4 <prvInitialiseTaskLists+0x70>)
 80060b4:	f7fe fcb6 	bl	8004a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060b8:	480b      	ldr	r0, [pc, #44]	; (80060e8 <prvInitialiseTaskLists+0x74>)
 80060ba:	f7fe fcb3 	bl	8004a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060be:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <prvInitialiseTaskLists+0x78>)
 80060c0:	4a05      	ldr	r2, [pc, #20]	; (80060d8 <prvInitialiseTaskLists+0x64>)
 80060c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <prvInitialiseTaskLists+0x7c>)
 80060c6:	4a05      	ldr	r2, [pc, #20]	; (80060dc <prvInitialiseTaskLists+0x68>)
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000b50 	.word	0x20000b50
 80060d8:	20000fb0 	.word	0x20000fb0
 80060dc:	20000fc4 	.word	0x20000fc4
 80060e0:	20000fe0 	.word	0x20000fe0
 80060e4:	20000ff4 	.word	0x20000ff4
 80060e8:	2000100c 	.word	0x2000100c
 80060ec:	20000fd8 	.word	0x20000fd8
 80060f0:	20000fdc 	.word	0x20000fdc

080060f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060fa:	e019      	b.n	8006130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060fc:	f000 fdda 	bl	8006cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	4b10      	ldr	r3, [pc, #64]	; (8006144 <prvCheckTasksWaitingTermination+0x50>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fd13 	bl	8004b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006112:	4b0d      	ldr	r3, [pc, #52]	; (8006148 <prvCheckTasksWaitingTermination+0x54>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3b01      	subs	r3, #1
 8006118:	4a0b      	ldr	r2, [pc, #44]	; (8006148 <prvCheckTasksWaitingTermination+0x54>)
 800611a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <prvCheckTasksWaitingTermination+0x58>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3b01      	subs	r3, #1
 8006122:	4a0a      	ldr	r2, [pc, #40]	; (800614c <prvCheckTasksWaitingTermination+0x58>)
 8006124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006126:	f000 fdf5 	bl	8006d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f810 	bl	8006150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <prvCheckTasksWaitingTermination+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e1      	bne.n	80060fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000ff4 	.word	0x20000ff4
 8006148:	20001020 	.word	0x20001020
 800614c:	20001008 	.word	0x20001008

08006150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3354      	adds	r3, #84	; 0x54
 800615c:	4618      	mov	r0, r3
 800615e:	f001 ff5b 	bl	8008018 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006168:	2b00      	cmp	r3, #0
 800616a:	d108      	bne.n	800617e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	4618      	mov	r0, r3
 8006172:	f000 ff8d 	bl	8007090 <vPortFree>
				vPortFree( pxTCB );
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 ff8a 	bl	8007090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800617c:	e018      	b.n	80061b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006184:	2b01      	cmp	r3, #1
 8006186:	d103      	bne.n	8006190 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 ff81 	bl	8007090 <vPortFree>
	}
 800618e:	e00f      	b.n	80061b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006196:	2b02      	cmp	r3, #2
 8006198:	d00a      	beq.n	80061b0 <prvDeleteTCB+0x60>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60fb      	str	r3, [r7, #12]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <prvDeleteTCB+0x5e>
	}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061be:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <prvResetNextTaskUnblockTime+0x38>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061c8:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <prvResetNextTaskUnblockTime+0x3c>)
 80061ca:	f04f 32ff 	mov.w	r2, #4294967295
 80061ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061d0:	e008      	b.n	80061e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <prvResetNextTaskUnblockTime+0x38>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <prvResetNextTaskUnblockTime+0x3c>)
 80061e2:	6013      	str	r3, [r2, #0]
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	20000fd8 	.word	0x20000fd8
 80061f4:	20001040 	.word	0x20001040

080061f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <xTaskGetSchedulerState+0x34>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006206:	2301      	movs	r3, #1
 8006208:	607b      	str	r3, [r7, #4]
 800620a:	e008      	b.n	800621e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <xTaskGetSchedulerState+0x38>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006214:	2302      	movs	r3, #2
 8006216:	607b      	str	r3, [r7, #4]
 8006218:	e001      	b.n	800621e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800621e:	687b      	ldr	r3, [r7, #4]
	}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	2000102c 	.word	0x2000102c
 8006230:	20001048 	.word	0x20001048

08006234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d056      	beq.n	80062f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800624a:	4b2e      	ldr	r3, [pc, #184]	; (8006304 <xTaskPriorityDisinherit+0xd0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	429a      	cmp	r2, r3
 8006252:	d00a      	beq.n	800626a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	60fb      	str	r3, [r7, #12]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	1e5a      	subs	r2, r3, #1
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629a:	429a      	cmp	r2, r3
 800629c:	d02c      	beq.n	80062f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d128      	bne.n	80062f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe fc44 	bl	8004b38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c8:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <xTaskPriorityDisinherit+0xd4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d903      	bls.n	80062d8 <xTaskPriorityDisinherit+0xa4>
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <xTaskPriorityDisinherit+0xd4>)
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4a09      	ldr	r2, [pc, #36]	; (800630c <xTaskPriorityDisinherit+0xd8>)
 80062e6:	441a      	add	r2, r3
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f7fe fbc5 	bl	8004a7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062f8:	697b      	ldr	r3, [r7, #20]
	}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000b4c 	.word	0x20000b4c
 8006308:	20001028 	.word	0x20001028
 800630c:	20000b50 	.word	0x20000b50

08006310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800631a:	4b21      	ldr	r3, [pc, #132]	; (80063a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006320:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fc06 	bl	8004b38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d10a      	bne.n	800634a <prvAddCurrentTaskToDelayedList+0x3a>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800633a:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4819      	ldr	r0, [pc, #100]	; (80063a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006344:	f7fe fb9b 	bl	8004a7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006348:	e026      	b.n	8006398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4413      	add	r3, r2
 8006350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006352:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	429a      	cmp	r2, r3
 8006360:	d209      	bcs.n	8006376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006362:	4b12      	ldr	r3, [pc, #72]	; (80063ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f7fe fba9 	bl	8004ac6 <vListInsert>
}
 8006374:	e010      	b.n	8006398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006376:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f7fe fb9f 	bl	8004ac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	d202      	bcs.n	8006398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006392:	4a08      	ldr	r2, [pc, #32]	; (80063b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6013      	str	r3, [r2, #0]
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20001024 	.word	0x20001024
 80063a4:	20000b4c 	.word	0x20000b4c
 80063a8:	2000100c 	.word	0x2000100c
 80063ac:	20000fdc 	.word	0x20000fdc
 80063b0:	20000fd8 	.word	0x20000fd8
 80063b4:	20001040 	.word	0x20001040

080063b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80063c2:	f000 fb07 	bl	80069d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80063c6:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <xTimerCreateTimerTask+0x80>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d021      	beq.n	8006412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80063d6:	1d3a      	adds	r2, r7, #4
 80063d8:	f107 0108 	add.w	r1, r7, #8
 80063dc:	f107 030c 	add.w	r3, r7, #12
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe fb05 	bl	80049f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	9202      	str	r2, [sp, #8]
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	2302      	movs	r3, #2
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	460a      	mov	r2, r1
 80063f8:	4910      	ldr	r1, [pc, #64]	; (800643c <xTimerCreateTimerTask+0x84>)
 80063fa:	4811      	ldr	r0, [pc, #68]	; (8006440 <xTimerCreateTimerTask+0x88>)
 80063fc:	f7ff f8b2 	bl	8005564 <xTaskCreateStatic>
 8006400:	4603      	mov	r3, r0
 8006402:	4a10      	ldr	r2, [pc, #64]	; (8006444 <xTimerCreateTimerTask+0x8c>)
 8006404:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006406:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <xTimerCreateTimerTask+0x8c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800640e:	2301      	movs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	613b      	str	r3, [r7, #16]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800642e:	697b      	ldr	r3, [r7, #20]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	2000107c 	.word	0x2000107c
 800643c:	08009ee0 	.word	0x08009ee0
 8006440:	0800657d 	.word	0x0800657d
 8006444:	20001080 	.word	0x20001080

08006448 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006456:	2300      	movs	r3, #0
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	623b      	str	r3, [r7, #32]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <xTimerGenericCommand+0x98>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d02a      	beq.n	80064d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b05      	cmp	r3, #5
 800648e:	dc18      	bgt.n	80064c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006490:	f7ff feb2 	bl	80061f8 <xTaskGetSchedulerState>
 8006494:	4603      	mov	r3, r0
 8006496:	2b02      	cmp	r3, #2
 8006498:	d109      	bne.n	80064ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800649a:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <xTimerGenericCommand+0x98>)
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	f107 0110 	add.w	r1, r7, #16
 80064a2:	2300      	movs	r3, #0
 80064a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a6:	f7fe fc75 	bl	8004d94 <xQueueGenericSend>
 80064aa:	6278      	str	r0, [r7, #36]	; 0x24
 80064ac:	e012      	b.n	80064d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064ae:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <xTimerGenericCommand+0x98>)
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	f107 0110 	add.w	r1, r7, #16
 80064b6:	2300      	movs	r3, #0
 80064b8:	2200      	movs	r2, #0
 80064ba:	f7fe fc6b 	bl	8004d94 <xQueueGenericSend>
 80064be:	6278      	str	r0, [r7, #36]	; 0x24
 80064c0:	e008      	b.n	80064d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064c2:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <xTimerGenericCommand+0x98>)
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	f107 0110 	add.w	r1, r7, #16
 80064ca:	2300      	movs	r3, #0
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	f7fe fd5f 	bl	8004f90 <xQueueGenericSendFromISR>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3728      	adds	r7, #40	; 0x28
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2000107c 	.word	0x2000107c

080064e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ee:	4b22      	ldr	r3, [pc, #136]	; (8006578 <prvProcessExpiredTimer+0x94>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fb1b 	bl	8004b38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d022      	beq.n	8006556 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	18d1      	adds	r1, r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	6978      	ldr	r0, [r7, #20]
 800651e:	f000 f8d1 	bl	80066c4 <prvInsertTimerInActiveList>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01f      	beq.n	8006568 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006528:	2300      	movs	r3, #0
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	2300      	movs	r3, #0
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	2100      	movs	r1, #0
 8006532:	6978      	ldr	r0, [r7, #20]
 8006534:	f7ff ff88 	bl	8006448 <xTimerGenericCommand>
 8006538:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d113      	bne.n	8006568 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	60fb      	str	r3, [r7, #12]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	6978      	ldr	r0, [r7, #20]
 800656e:	4798      	blx	r3
}
 8006570:	bf00      	nop
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20001074 	.word	0x20001074

0800657c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006584:	f107 0308 	add.w	r3, r7, #8
 8006588:	4618      	mov	r0, r3
 800658a:	f000 f857 	bl	800663c <prvGetNextExpireTime>
 800658e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4619      	mov	r1, r3
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f803 	bl	80065a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800659a:	f000 f8d5 	bl	8006748 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800659e:	e7f1      	b.n	8006584 <prvTimerTask+0x8>

080065a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065aa:	f7ff fa37 	bl	8005a1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065ae:	f107 0308 	add.w	r3, r7, #8
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 f866 	bl	8006684 <prvSampleTimeNow>
 80065b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d130      	bne.n	8006622 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <prvProcessTimerOrBlockTask+0x3c>
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d806      	bhi.n	80065dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80065ce:	f7ff fa33 	bl	8005a38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff85 	bl	80064e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065da:	e024      	b.n	8006626 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065e2:	4b13      	ldr	r3, [pc, #76]	; (8006630 <prvProcessTimerOrBlockTask+0x90>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <prvProcessTimerOrBlockTask+0x50>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <prvProcessTimerOrBlockTask+0x52>
 80065f0:	2300      	movs	r3, #0
 80065f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065f4:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <prvProcessTimerOrBlockTask+0x94>)
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	f7fe ff7b 	bl	80054fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006606:	f7ff fa17 	bl	8005a38 <xTaskResumeAll>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <prvProcessTimerOrBlockTask+0x98>)
 8006612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
}
 8006620:	e001      	b.n	8006626 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006622:	f7ff fa09 	bl	8005a38 <xTaskResumeAll>
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20001078 	.word	0x20001078
 8006634:	2000107c 	.word	0x2000107c
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <prvGetNextExpireTime+0x44>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <prvGetNextExpireTime+0x16>
 800664e:	2201      	movs	r2, #1
 8006650:	e000      	b.n	8006654 <prvGetNextExpireTime+0x18>
 8006652:	2200      	movs	r2, #0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d105      	bne.n	800666c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <prvGetNextExpireTime+0x44>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e001      	b.n	8006670 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006670:	68fb      	ldr	r3, [r7, #12]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20001074 	.word	0x20001074

08006684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800668c:	f7ff fa72 	bl	8005b74 <xTaskGetTickCount>
 8006690:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <prvSampleTimeNow+0x3c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	429a      	cmp	r2, r3
 800669a:	d205      	bcs.n	80066a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800669c:	f000 f936 	bl	800690c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e002      	b.n	80066ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066ae:	4a04      	ldr	r2, [pc, #16]	; (80066c0 <prvSampleTimeNow+0x3c>)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20001084 	.word	0x20001084

080066c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d812      	bhi.n	8006710 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d302      	bcc.n	80066fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e01b      	b.n	8006736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <prvInsertTimerInActiveList+0x7c>)
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fe f9dc 	bl	8004ac6 <vListInsert>
 800670e:	e012      	b.n	8006736 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d206      	bcs.n	8006726 <prvInsertTimerInActiveList+0x62>
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d302      	bcc.n	8006726 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006720:	2301      	movs	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	e007      	b.n	8006736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006726:	4b07      	ldr	r3, [pc, #28]	; (8006744 <prvInsertTimerInActiveList+0x80>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3304      	adds	r3, #4
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f7fe f9c8 	bl	8004ac6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006736:	697b      	ldr	r3, [r7, #20]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20001078 	.word	0x20001078
 8006744:	20001074 	.word	0x20001074

08006748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08e      	sub	sp, #56	; 0x38
 800674c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800674e:	e0ca      	b.n	80068e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	da18      	bge.n	8006788 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	3304      	adds	r3, #4
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	61fb      	str	r3, [r7, #28]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800677e:	6850      	ldr	r0, [r2, #4]
 8006780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006782:	6892      	ldr	r2, [r2, #8]
 8006784:	4611      	mov	r1, r2
 8006786:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f2c0 80aa 	blt.w	80068e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	3304      	adds	r3, #4
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe f9c9 	bl	8004b38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067a6:	463b      	mov	r3, r7
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff ff6b 	bl	8006684 <prvSampleTimeNow>
 80067ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	f200 8097 	bhi.w	80068e6 <prvProcessReceivedCommands+0x19e>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <prvProcessReceivedCommands+0x78>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067e9 	.word	0x080067e9
 80067c4:	080067e9 	.word	0x080067e9
 80067c8:	080067e9 	.word	0x080067e9
 80067cc:	0800685d 	.word	0x0800685d
 80067d0:	08006871 	.word	0x08006871
 80067d4:	080068bb 	.word	0x080068bb
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	080067e9 	.word	0x080067e9
 80067e0:	0800685d 	.word	0x0800685d
 80067e4:	08006871 	.word	0x08006871
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	18d1      	adds	r1, r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006808:	f7ff ff5c 	bl	80066c4 <prvInsertTimerInActiveList>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d069      	beq.n	80068e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006818:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05e      	beq.n	80068e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	441a      	add	r2, r3
 8006830:	2300      	movs	r3, #0
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	2100      	movs	r1, #0
 8006838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800683a:	f7ff fe05 	bl	8006448 <xTimerGenericCommand>
 800683e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d14f      	bne.n	80068e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	61bb      	str	r3, [r7, #24]
}
 8006858:	bf00      	nop
 800685a:	e7fe      	b.n	800685a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	b2da      	uxtb	r2, r3
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800686e:	e03a      	b.n	80068e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	b2da      	uxtb	r2, r3
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	617b      	str	r3, [r7, #20]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	18d1      	adds	r1, r2, r3
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068b4:	f7ff ff06 	bl	80066c4 <prvInsertTimerInActiveList>
					break;
 80068b8:	e015      	b.n	80068e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d103      	bne.n	80068d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80068c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ca:	f000 fbe1 	bl	8007090 <vPortFree>
 80068ce:	e00a      	b.n	80068e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068e2:	e000      	b.n	80068e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80068e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068e6:	4b08      	ldr	r3, [pc, #32]	; (8006908 <prvProcessReceivedCommands+0x1c0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	1d39      	adds	r1, r7, #4
 80068ec:	2200      	movs	r2, #0
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fbea 	bl	80050c8 <xQueueReceive>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f47f af2a 	bne.w	8006750 <prvProcessReceivedCommands+0x8>
	}
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	3730      	adds	r7, #48	; 0x30
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	2000107c 	.word	0x2000107c

0800690c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006912:	e048      	b.n	80069a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006914:	4b2d      	ldr	r3, [pc, #180]	; (80069cc <prvSwitchTimerLists+0xc0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691e:	4b2b      	ldr	r3, [pc, #172]	; (80069cc <prvSwitchTimerLists+0xc0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3304      	adds	r3, #4
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe f903 	bl	8004b38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02e      	beq.n	80069a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4413      	add	r3, r2
 8006950:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d90e      	bls.n	8006978 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006966:	4b19      	ldr	r3, [pc, #100]	; (80069cc <prvSwitchTimerLists+0xc0>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7fe f8a8 	bl	8004ac6 <vListInsert>
 8006976:	e016      	b.n	80069a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006978:	2300      	movs	r3, #0
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	2300      	movs	r3, #0
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	2100      	movs	r1, #0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fd60 	bl	8006448 <xTimerGenericCommand>
 8006988:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	603b      	str	r3, [r7, #0]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <prvSwitchTimerLists+0xc0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1b1      	bne.n	8006914 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <prvSwitchTimerLists+0xc0>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069b6:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <prvSwitchTimerLists+0xc4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a04      	ldr	r2, [pc, #16]	; (80069cc <prvSwitchTimerLists+0xc0>)
 80069bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069be:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <prvSwitchTimerLists+0xc4>)
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	6013      	str	r3, [r2, #0]
}
 80069c4:	bf00      	nop
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20001074 	.word	0x20001074
 80069d0:	20001078 	.word	0x20001078

080069d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069da:	f000 f96b 	bl	8006cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069de:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <prvCheckForValidListAndQueue+0x60>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d120      	bne.n	8006a28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069e6:	4814      	ldr	r0, [pc, #80]	; (8006a38 <prvCheckForValidListAndQueue+0x64>)
 80069e8:	f7fe f81c 	bl	8004a24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069ec:	4813      	ldr	r0, [pc, #76]	; (8006a3c <prvCheckForValidListAndQueue+0x68>)
 80069ee:	f7fe f819 	bl	8004a24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <prvCheckForValidListAndQueue+0x6c>)
 80069f4:	4a10      	ldr	r2, [pc, #64]	; (8006a38 <prvCheckForValidListAndQueue+0x64>)
 80069f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069f8:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <prvCheckForValidListAndQueue+0x70>)
 80069fa:	4a10      	ldr	r2, [pc, #64]	; (8006a3c <prvCheckForValidListAndQueue+0x68>)
 80069fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069fe:	2300      	movs	r3, #0
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <prvCheckForValidListAndQueue+0x74>)
 8006a04:	4a11      	ldr	r2, [pc, #68]	; (8006a4c <prvCheckForValidListAndQueue+0x78>)
 8006a06:	2110      	movs	r1, #16
 8006a08:	200a      	movs	r0, #10
 8006a0a:	f7fe f927 	bl	8004c5c <xQueueGenericCreateStatic>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4a08      	ldr	r2, [pc, #32]	; (8006a34 <prvCheckForValidListAndQueue+0x60>)
 8006a12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <prvCheckForValidListAndQueue+0x60>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a1c:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <prvCheckForValidListAndQueue+0x60>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	490b      	ldr	r1, [pc, #44]	; (8006a50 <prvCheckForValidListAndQueue+0x7c>)
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fd40 	bl	80054a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a28:	f000 f974 	bl	8006d14 <vPortExitCritical>
}
 8006a2c:	bf00      	nop
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	2000107c 	.word	0x2000107c
 8006a38:	2000104c 	.word	0x2000104c
 8006a3c:	20001060 	.word	0x20001060
 8006a40:	20001074 	.word	0x20001074
 8006a44:	20001078 	.word	0x20001078
 8006a48:	20001128 	.word	0x20001128
 8006a4c:	20001088 	.word	0x20001088
 8006a50:	08009ee8 	.word	0x08009ee8

08006a54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3b04      	subs	r3, #4
 8006a64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3b04      	subs	r3, #4
 8006a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f023 0201 	bic.w	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3b04      	subs	r3, #4
 8006a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a84:	4a0c      	ldr	r2, [pc, #48]	; (8006ab8 <pxPortInitialiseStack+0x64>)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3b14      	subs	r3, #20
 8006a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3b04      	subs	r3, #4
 8006a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f06f 0202 	mvn.w	r2, #2
 8006aa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3b20      	subs	r3, #32
 8006aa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	08006abd 	.word	0x08006abd

08006abc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ac6:	4b12      	ldr	r3, [pc, #72]	; (8006b10 <prvTaskExitError+0x54>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d00a      	beq.n	8006ae6 <prvTaskExitError+0x2a>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60fb      	str	r3, [r7, #12]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <prvTaskExitError+0x28>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60bb      	str	r3, [r7, #8]
}
 8006af8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006afa:	bf00      	nop
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0fc      	beq.n	8006afc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20000020 	.word	0x20000020
	...

08006b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <pxCurrentTCBConst2>)
 8006b22:	6819      	ldr	r1, [r3, #0]
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	f380 8809 	msr	PSP, r0
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f380 8811 	msr	BASEPRI, r0
 8006b3a:	4770      	bx	lr
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst2>:
 8006b40:	20000b4c 	.word	0x20000b4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b48:	4808      	ldr	r0, [pc, #32]	; (8006b6c <prvPortStartFirstTask+0x24>)
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	6800      	ldr	r0, [r0, #0]
 8006b4e:	f380 8808 	msr	MSP, r0
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f380 8814 	msr	CONTROL, r0
 8006b5a:	b662      	cpsie	i
 8006b5c:	b661      	cpsie	f
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	df00      	svc	0
 8006b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b6a:	bf00      	nop
 8006b6c:	e000ed08 	.word	0xe000ed08

08006b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b76:	4b46      	ldr	r3, [pc, #280]	; (8006c90 <xPortStartScheduler+0x120>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a46      	ldr	r2, [pc, #280]	; (8006c94 <xPortStartScheduler+0x124>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d10a      	bne.n	8006b96 <xPortStartScheduler+0x26>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b96:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <xPortStartScheduler+0x120>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3f      	ldr	r2, [pc, #252]	; (8006c98 <xPortStartScheduler+0x128>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10a      	bne.n	8006bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	22ff      	movs	r2, #255	; 0xff
 8006bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006be0:	2207      	movs	r2, #7
 8006be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006be4:	e009      	b.n	8006bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006be6:	4b2f      	ldr	r3, [pc, #188]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	4a2d      	ldr	r2, [pc, #180]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c02:	2b80      	cmp	r3, #128	; 0x80
 8006c04:	d0ef      	beq.n	8006be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c06:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1c3 0307 	rsb	r3, r3, #7
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d00a      	beq.n	8006c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	60bb      	str	r3, [r7, #8]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c28:	4b1e      	ldr	r3, [pc, #120]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c46:	4b18      	ldr	r3, [pc, #96]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c5e:	f000 f8dd 	bl	8006e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c62:	4b12      	ldr	r3, [pc, #72]	; (8006cac <xPortStartScheduler+0x13c>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c68:	f000 f8fc 	bl	8006e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <xPortStartScheduler+0x140>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a0f      	ldr	r2, [pc, #60]	; (8006cb0 <xPortStartScheduler+0x140>)
 8006c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c78:	f7ff ff66 	bl	8006b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c7c:	f7ff f844 	bl	8005d08 <vTaskSwitchContext>
	prvTaskExitError();
 8006c80:	f7ff ff1c 	bl	8006abc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	e000ed00 	.word	0xe000ed00
 8006c94:	410fc271 	.word	0x410fc271
 8006c98:	410fc270 	.word	0x410fc270
 8006c9c:	e000e400 	.word	0xe000e400
 8006ca0:	20001178 	.word	0x20001178
 8006ca4:	2000117c 	.word	0x2000117c
 8006ca8:	e000ed20 	.word	0xe000ed20
 8006cac:	20000020 	.word	0x20000020
 8006cb0:	e000ef34 	.word	0xe000ef34

08006cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	607b      	str	r3, [r7, #4]
}
 8006ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a0d      	ldr	r2, [pc, #52]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <vPortEnterCritical+0x58>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10f      	bne.n	8006d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <vPortEnterCritical+0x5c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	603b      	str	r3, [r7, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <vPortEnterCritical+0x4a>
	}
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	20000020 	.word	0x20000020
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d1a:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <vPortExitCritical+0x50>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <vPortExitCritical+0x24>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	607b      	str	r3, [r7, #4]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d38:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <vPortExitCritical+0x50>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <vPortExitCritical+0x50>)
 8006d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d42:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <vPortExitCritical+0x50>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d105      	bne.n	8006d56 <vPortExitCritical+0x42>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	f383 8811 	msr	BASEPRI, r3
}
 8006d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20000020 	.word	0x20000020
	...

08006d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d70:	f3ef 8009 	mrs	r0, PSP
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	4b15      	ldr	r3, [pc, #84]	; (8006dd0 <pxCurrentTCBConst>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	f01e 0f10 	tst.w	lr, #16
 8006d80:	bf08      	it	eq
 8006d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	6010      	str	r0, [r2, #0]
 8006d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d94:	f380 8811 	msr	BASEPRI, r0
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f7fe ffb2 	bl	8005d08 <vTaskSwitchContext>
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f380 8811 	msr	BASEPRI, r0
 8006dac:	bc09      	pop	{r0, r3}
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	6808      	ldr	r0, [r1, #0]
 8006db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db6:	f01e 0f10 	tst.w	lr, #16
 8006dba:	bf08      	it	eq
 8006dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006dc0:	f380 8809 	msr	PSP, r0
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	f3af 8000 	nop.w

08006dd0 <pxCurrentTCBConst>:
 8006dd0:	20000b4c 	.word	0x20000b4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop

08006dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	607b      	str	r3, [r7, #4]
}
 8006df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006df2:	f7fe fecf 	bl	8005b94 <xTaskIncrementTick>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <xPortSysTickHandler+0x40>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	2300      	movs	r3, #0
 8006e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
}
 8006e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <vPortSetupTimerInterrupt+0x38>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <vPortSetupTimerInterrupt+0x3c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <vPortSetupTimerInterrupt+0x40>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <vPortSetupTimerInterrupt+0x44>)
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e010 	.word	0xe000e010
 8006e54:	e000e018 	.word	0xe000e018
 8006e58:	20000000 	.word	0x20000000
 8006e5c:	10624dd3 	.word	0x10624dd3
 8006e60:	e000e014 	.word	0xe000e014

08006e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e74 <vPortEnableVFP+0x10>
 8006e68:	6801      	ldr	r1, [r0, #0]
 8006e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e6e:	6001      	str	r1, [r0, #0]
 8006e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e72:	bf00      	nop
 8006e74:	e000ed88 	.word	0xe000ed88

08006e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e7e:	f3ef 8305 	mrs	r3, IPSR
 8006e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b0f      	cmp	r3, #15
 8006e88:	d914      	bls.n	8006eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e8a:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <vPortValidateInterruptPriority+0x70>)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e94:	4b15      	ldr	r3, [pc, #84]	; (8006eec <vPortValidateInterruptPriority+0x74>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	7afa      	ldrb	r2, [r7, #11]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d20a      	bcs.n	8006eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <vPortValidateInterruptPriority+0x78>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <vPortValidateInterruptPriority+0x7c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d90a      	bls.n	8006eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	603b      	str	r3, [r7, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <vPortValidateInterruptPriority+0x60>
	}
 8006eda:	bf00      	nop
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	e000e3f0 	.word	0xe000e3f0
 8006eec:	20001178 	.word	0x20001178
 8006ef0:	e000ed0c 	.word	0xe000ed0c
 8006ef4:	2000117c 	.word	0x2000117c

08006ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f04:	f7fe fd8a 	bl	8005a1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f08:	4b5b      	ldr	r3, [pc, #364]	; (8007078 <pvPortMalloc+0x180>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f10:	f000 f920 	bl	8007154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f14:	4b59      	ldr	r3, [pc, #356]	; (800707c <pvPortMalloc+0x184>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8093 	bne.w	8007048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01d      	beq.n	8006f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f28:	2208      	movs	r2, #8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d014      	beq.n	8006f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	3308      	adds	r3, #8
 8006f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <pvPortMalloc+0x6c>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	617b      	str	r3, [r7, #20]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d06e      	beq.n	8007048 <pvPortMalloc+0x150>
 8006f6a:	4b45      	ldr	r3, [pc, #276]	; (8007080 <pvPortMalloc+0x188>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d869      	bhi.n	8007048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f74:	4b43      	ldr	r3, [pc, #268]	; (8007084 <pvPortMalloc+0x18c>)
 8006f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f78:	4b42      	ldr	r3, [pc, #264]	; (8007084 <pvPortMalloc+0x18c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f7e:	e004      	b.n	8006f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d903      	bls.n	8006f9c <pvPortMalloc+0xa4>
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f1      	bne.n	8006f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f9c:	4b36      	ldr	r3, [pc, #216]	; (8007078 <pvPortMalloc+0x180>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d050      	beq.n	8007048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2208      	movs	r2, #8
 8006fac:	4413      	add	r3, r2
 8006fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d91f      	bls.n	8007008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	613b      	str	r3, [r7, #16]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	1ad2      	subs	r2, r2, r3
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007002:	69b8      	ldr	r0, [r7, #24]
 8007004:	f000 f908 	bl	8007218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007008:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <pvPortMalloc+0x188>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <pvPortMalloc+0x188>)
 8007014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007016:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <pvPortMalloc+0x188>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4b1b      	ldr	r3, [pc, #108]	; (8007088 <pvPortMalloc+0x190>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d203      	bcs.n	800702a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007022:	4b17      	ldr	r3, [pc, #92]	; (8007080 <pvPortMalloc+0x188>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a18      	ldr	r2, [pc, #96]	; (8007088 <pvPortMalloc+0x190>)
 8007028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <pvPortMalloc+0x184>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	431a      	orrs	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <pvPortMalloc+0x194>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3301      	adds	r3, #1
 8007044:	4a11      	ldr	r2, [pc, #68]	; (800708c <pvPortMalloc+0x194>)
 8007046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007048:	f7fe fcf6 	bl	8005a38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <pvPortMalloc+0x174>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60fb      	str	r3, [r7, #12]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <pvPortMalloc+0x172>
	return pvReturn;
 800706c:	69fb      	ldr	r3, [r7, #28]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3728      	adds	r7, #40	; 0x28
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20011188 	.word	0x20011188
 800707c:	2001119c 	.word	0x2001119c
 8007080:	2001118c 	.word	0x2001118c
 8007084:	20011180 	.word	0x20011180
 8007088:	20011190 	.word	0x20011190
 800708c:	20011194 	.word	0x20011194

08007090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04d      	beq.n	800713e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070a2:	2308      	movs	r3, #8
 80070a4:	425b      	negs	r3, r3
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	4b24      	ldr	r3, [pc, #144]	; (8007148 <vPortFree+0xb8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <vPortFree+0x44>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	60fb      	str	r3, [r7, #12]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <vPortFree+0x62>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60bb      	str	r3, [r7, #8]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <vPortFree+0xb8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4013      	ands	r3, r2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01e      	beq.n	800713e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11a      	bne.n	800713e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <vPortFree+0xb8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	43db      	mvns	r3, r3
 8007112:	401a      	ands	r2, r3
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007118:	f7fe fc80 	bl	8005a1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <vPortFree+0xbc>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4413      	add	r3, r2
 8007126:	4a09      	ldr	r2, [pc, #36]	; (800714c <vPortFree+0xbc>)
 8007128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800712a:	6938      	ldr	r0, [r7, #16]
 800712c:	f000 f874 	bl	8007218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <vPortFree+0xc0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	4a06      	ldr	r2, [pc, #24]	; (8007150 <vPortFree+0xc0>)
 8007138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800713a:	f7fe fc7d 	bl	8005a38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800713e:	bf00      	nop
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	2001119c 	.word	0x2001119c
 800714c:	2001118c 	.word	0x2001118c
 8007150:	20011198 	.word	0x20011198

08007154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800715a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800715e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007160:	4b27      	ldr	r3, [pc, #156]	; (8007200 <prvHeapInit+0xac>)
 8007162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0307 	bic.w	r3, r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <prvHeapInit+0xac>)
 8007184:	4413      	add	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800718c:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <prvHeapInit+0xb0>)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007192:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <prvHeapInit+0xb0>)
 8007194:	2200      	movs	r2, #0
 8007196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071a0:	2208      	movs	r2, #8
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a15      	ldr	r2, [pc, #84]	; (8007208 <prvHeapInit+0xb4>)
 80071b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <prvHeapInit+0xb4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <prvHeapInit+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	1ad2      	subs	r2, r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071d4:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <prvHeapInit+0xb4>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4a0a      	ldr	r2, [pc, #40]	; (800720c <prvHeapInit+0xb8>)
 80071e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <prvHeapInit+0xbc>)
 80071ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <prvHeapInit+0xc0>)
 80071ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071f2:	601a      	str	r2, [r3, #0]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	20001180 	.word	0x20001180
 8007204:	20011180 	.word	0x20011180
 8007208:	20011188 	.word	0x20011188
 800720c:	20011190 	.word	0x20011190
 8007210:	2001118c 	.word	0x2001118c
 8007214:	2001119c 	.word	0x2001119c

08007218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007220:	4b28      	ldr	r3, [pc, #160]	; (80072c4 <prvInsertBlockIntoFreeList+0xac>)
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e002      	b.n	800722c <prvInsertBlockIntoFreeList+0x14>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d8f7      	bhi.n	8007226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d108      	bne.n	800725a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	441a      	add	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d118      	bne.n	80072a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d00d      	beq.n	8007296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e008      	b.n	80072a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e003      	b.n	80072a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d002      	beq.n	80072b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072b6:	bf00      	nop
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20011180 	.word	0x20011180
 80072c8:	20011188 	.word	0x20011188

080072cc <_ZdlPvj>:
 80072cc:	f000 b800 	b.w	80072d0 <_ZdlPv>

080072d0 <_ZdlPv>:
 80072d0:	f000 b92c 	b.w	800752c <free>

080072d4 <__errno>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <__errno+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000024 	.word	0x20000024

080072e0 <std>:
 80072e0:	2300      	movs	r3, #0
 80072e2:	b510      	push	{r4, lr}
 80072e4:	4604      	mov	r4, r0
 80072e6:	e9c0 3300 	strd	r3, r3, [r0]
 80072ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ee:	6083      	str	r3, [r0, #8]
 80072f0:	8181      	strh	r1, [r0, #12]
 80072f2:	6643      	str	r3, [r0, #100]	; 0x64
 80072f4:	81c2      	strh	r2, [r0, #14]
 80072f6:	6183      	str	r3, [r0, #24]
 80072f8:	4619      	mov	r1, r3
 80072fa:	2208      	movs	r2, #8
 80072fc:	305c      	adds	r0, #92	; 0x5c
 80072fe:	f000 f92b 	bl	8007558 <memset>
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <std+0x38>)
 8007304:	6263      	str	r3, [r4, #36]	; 0x24
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <std+0x3c>)
 8007308:	62a3      	str	r3, [r4, #40]	; 0x28
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <std+0x40>)
 800730c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <std+0x44>)
 8007310:	6224      	str	r4, [r4, #32]
 8007312:	6323      	str	r3, [r4, #48]	; 0x30
 8007314:	bd10      	pop	{r4, pc}
 8007316:	bf00      	nop
 8007318:	080080f1 	.word	0x080080f1
 800731c:	08008113 	.word	0x08008113
 8007320:	0800814b 	.word	0x0800814b
 8007324:	0800816f 	.word	0x0800816f

08007328 <_cleanup_r>:
 8007328:	4901      	ldr	r1, [pc, #4]	; (8007330 <_cleanup_r+0x8>)
 800732a:	f000 b8af 	b.w	800748c <_fwalk_reent>
 800732e:	bf00      	nop
 8007330:	08008fc1 	.word	0x08008fc1

08007334 <__sfmoreglue>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	2268      	movs	r2, #104	; 0x68
 8007338:	1e4d      	subs	r5, r1, #1
 800733a:	4355      	muls	r5, r2
 800733c:	460e      	mov	r6, r1
 800733e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007342:	f000 f97d 	bl	8007640 <_malloc_r>
 8007346:	4604      	mov	r4, r0
 8007348:	b140      	cbz	r0, 800735c <__sfmoreglue+0x28>
 800734a:	2100      	movs	r1, #0
 800734c:	e9c0 1600 	strd	r1, r6, [r0]
 8007350:	300c      	adds	r0, #12
 8007352:	60a0      	str	r0, [r4, #8]
 8007354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007358:	f000 f8fe 	bl	8007558 <memset>
 800735c:	4620      	mov	r0, r4
 800735e:	bd70      	pop	{r4, r5, r6, pc}

08007360 <__sfp_lock_acquire>:
 8007360:	4801      	ldr	r0, [pc, #4]	; (8007368 <__sfp_lock_acquire+0x8>)
 8007362:	f000 b8d8 	b.w	8007516 <__retarget_lock_acquire_recursive>
 8007366:	bf00      	nop
 8007368:	200111a1 	.word	0x200111a1

0800736c <__sfp_lock_release>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__sfp_lock_release+0x8>)
 800736e:	f000 b8d3 	b.w	8007518 <__retarget_lock_release_recursive>
 8007372:	bf00      	nop
 8007374:	200111a1 	.word	0x200111a1

08007378 <__sinit_lock_acquire>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__sinit_lock_acquire+0x8>)
 800737a:	f000 b8cc 	b.w	8007516 <__retarget_lock_acquire_recursive>
 800737e:	bf00      	nop
 8007380:	200111a2 	.word	0x200111a2

08007384 <__sinit_lock_release>:
 8007384:	4801      	ldr	r0, [pc, #4]	; (800738c <__sinit_lock_release+0x8>)
 8007386:	f000 b8c7 	b.w	8007518 <__retarget_lock_release_recursive>
 800738a:	bf00      	nop
 800738c:	200111a2 	.word	0x200111a2

08007390 <__sinit>:
 8007390:	b510      	push	{r4, lr}
 8007392:	4604      	mov	r4, r0
 8007394:	f7ff fff0 	bl	8007378 <__sinit_lock_acquire>
 8007398:	69a3      	ldr	r3, [r4, #24]
 800739a:	b11b      	cbz	r3, 80073a4 <__sinit+0x14>
 800739c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a0:	f7ff bff0 	b.w	8007384 <__sinit_lock_release>
 80073a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073a8:	6523      	str	r3, [r4, #80]	; 0x50
 80073aa:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <__sinit+0x68>)
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <__sinit+0x6c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	bf04      	itt	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	61a3      	streq	r3, [r4, #24]
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 f820 	bl	8007400 <__sfp>
 80073c0:	6060      	str	r0, [r4, #4]
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 f81c 	bl	8007400 <__sfp>
 80073c8:	60a0      	str	r0, [r4, #8]
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f818 	bl	8007400 <__sfp>
 80073d0:	2200      	movs	r2, #0
 80073d2:	60e0      	str	r0, [r4, #12]
 80073d4:	2104      	movs	r1, #4
 80073d6:	6860      	ldr	r0, [r4, #4]
 80073d8:	f7ff ff82 	bl	80072e0 <std>
 80073dc:	68a0      	ldr	r0, [r4, #8]
 80073de:	2201      	movs	r2, #1
 80073e0:	2109      	movs	r1, #9
 80073e2:	f7ff ff7d 	bl	80072e0 <std>
 80073e6:	68e0      	ldr	r0, [r4, #12]
 80073e8:	2202      	movs	r2, #2
 80073ea:	2112      	movs	r1, #18
 80073ec:	f7ff ff78 	bl	80072e0 <std>
 80073f0:	2301      	movs	r3, #1
 80073f2:	61a3      	str	r3, [r4, #24]
 80073f4:	e7d2      	b.n	800739c <__sinit+0xc>
 80073f6:	bf00      	nop
 80073f8:	0800a098 	.word	0x0800a098
 80073fc:	08007329 	.word	0x08007329

08007400 <__sfp>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	4607      	mov	r7, r0
 8007404:	f7ff ffac 	bl	8007360 <__sfp_lock_acquire>
 8007408:	4b1e      	ldr	r3, [pc, #120]	; (8007484 <__sfp+0x84>)
 800740a:	681e      	ldr	r6, [r3, #0]
 800740c:	69b3      	ldr	r3, [r6, #24]
 800740e:	b913      	cbnz	r3, 8007416 <__sfp+0x16>
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffbd 	bl	8007390 <__sinit>
 8007416:	3648      	adds	r6, #72	; 0x48
 8007418:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800741c:	3b01      	subs	r3, #1
 800741e:	d503      	bpl.n	8007428 <__sfp+0x28>
 8007420:	6833      	ldr	r3, [r6, #0]
 8007422:	b30b      	cbz	r3, 8007468 <__sfp+0x68>
 8007424:	6836      	ldr	r6, [r6, #0]
 8007426:	e7f7      	b.n	8007418 <__sfp+0x18>
 8007428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800742c:	b9d5      	cbnz	r5, 8007464 <__sfp+0x64>
 800742e:	4b16      	ldr	r3, [pc, #88]	; (8007488 <__sfp+0x88>)
 8007430:	60e3      	str	r3, [r4, #12]
 8007432:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007436:	6665      	str	r5, [r4, #100]	; 0x64
 8007438:	f000 f86c 	bl	8007514 <__retarget_lock_init_recursive>
 800743c:	f7ff ff96 	bl	800736c <__sfp_lock_release>
 8007440:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007444:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007448:	6025      	str	r5, [r4, #0]
 800744a:	61a5      	str	r5, [r4, #24]
 800744c:	2208      	movs	r2, #8
 800744e:	4629      	mov	r1, r5
 8007450:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007454:	f000 f880 	bl	8007558 <memset>
 8007458:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800745c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007460:	4620      	mov	r0, r4
 8007462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007464:	3468      	adds	r4, #104	; 0x68
 8007466:	e7d9      	b.n	800741c <__sfp+0x1c>
 8007468:	2104      	movs	r1, #4
 800746a:	4638      	mov	r0, r7
 800746c:	f7ff ff62 	bl	8007334 <__sfmoreglue>
 8007470:	4604      	mov	r4, r0
 8007472:	6030      	str	r0, [r6, #0]
 8007474:	2800      	cmp	r0, #0
 8007476:	d1d5      	bne.n	8007424 <__sfp+0x24>
 8007478:	f7ff ff78 	bl	800736c <__sfp_lock_release>
 800747c:	230c      	movs	r3, #12
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	e7ee      	b.n	8007460 <__sfp+0x60>
 8007482:	bf00      	nop
 8007484:	0800a098 	.word	0x0800a098
 8007488:	ffff0001 	.word	0xffff0001

0800748c <_fwalk_reent>:
 800748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007490:	4606      	mov	r6, r0
 8007492:	4688      	mov	r8, r1
 8007494:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007498:	2700      	movs	r7, #0
 800749a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800749e:	f1b9 0901 	subs.w	r9, r9, #1
 80074a2:	d505      	bpl.n	80074b0 <_fwalk_reent+0x24>
 80074a4:	6824      	ldr	r4, [r4, #0]
 80074a6:	2c00      	cmp	r4, #0
 80074a8:	d1f7      	bne.n	800749a <_fwalk_reent+0xe>
 80074aa:	4638      	mov	r0, r7
 80074ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b0:	89ab      	ldrh	r3, [r5, #12]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d907      	bls.n	80074c6 <_fwalk_reent+0x3a>
 80074b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074ba:	3301      	adds	r3, #1
 80074bc:	d003      	beq.n	80074c6 <_fwalk_reent+0x3a>
 80074be:	4629      	mov	r1, r5
 80074c0:	4630      	mov	r0, r6
 80074c2:	47c0      	blx	r8
 80074c4:	4307      	orrs	r7, r0
 80074c6:	3568      	adds	r5, #104	; 0x68
 80074c8:	e7e9      	b.n	800749e <_fwalk_reent+0x12>
	...

080074cc <__libc_init_array>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	4d0d      	ldr	r5, [pc, #52]	; (8007504 <__libc_init_array+0x38>)
 80074d0:	4c0d      	ldr	r4, [pc, #52]	; (8007508 <__libc_init_array+0x3c>)
 80074d2:	1b64      	subs	r4, r4, r5
 80074d4:	10a4      	asrs	r4, r4, #2
 80074d6:	2600      	movs	r6, #0
 80074d8:	42a6      	cmp	r6, r4
 80074da:	d109      	bne.n	80074f0 <__libc_init_array+0x24>
 80074dc:	4d0b      	ldr	r5, [pc, #44]	; (800750c <__libc_init_array+0x40>)
 80074de:	4c0c      	ldr	r4, [pc, #48]	; (8007510 <__libc_init_array+0x44>)
 80074e0:	f002 fcb4 	bl	8009e4c <_init>
 80074e4:	1b64      	subs	r4, r4, r5
 80074e6:	10a4      	asrs	r4, r4, #2
 80074e8:	2600      	movs	r6, #0
 80074ea:	42a6      	cmp	r6, r4
 80074ec:	d105      	bne.n	80074fa <__libc_init_array+0x2e>
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f4:	4798      	blx	r3
 80074f6:	3601      	adds	r6, #1
 80074f8:	e7ee      	b.n	80074d8 <__libc_init_array+0xc>
 80074fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fe:	4798      	blx	r3
 8007500:	3601      	adds	r6, #1
 8007502:	e7f2      	b.n	80074ea <__libc_init_array+0x1e>
 8007504:	0800a41c 	.word	0x0800a41c
 8007508:	0800a41c 	.word	0x0800a41c
 800750c:	0800a41c 	.word	0x0800a41c
 8007510:	0800a420 	.word	0x0800a420

08007514 <__retarget_lock_init_recursive>:
 8007514:	4770      	bx	lr

08007516 <__retarget_lock_acquire_recursive>:
 8007516:	4770      	bx	lr

08007518 <__retarget_lock_release_recursive>:
 8007518:	4770      	bx	lr
	...

0800751c <malloc>:
 800751c:	4b02      	ldr	r3, [pc, #8]	; (8007528 <malloc+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f000 b88d 	b.w	8007640 <_malloc_r>
 8007526:	bf00      	nop
 8007528:	20000024 	.word	0x20000024

0800752c <free>:
 800752c:	4b02      	ldr	r3, [pc, #8]	; (8007538 <free+0xc>)
 800752e:	4601      	mov	r1, r0
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	f000 b819 	b.w	8007568 <_free_r>
 8007536:	bf00      	nop
 8007538:	20000024 	.word	0x20000024

0800753c <memcpy>:
 800753c:	440a      	add	r2, r1
 800753e:	4291      	cmp	r1, r2
 8007540:	f100 33ff 	add.w	r3, r0, #4294967295
 8007544:	d100      	bne.n	8007548 <memcpy+0xc>
 8007546:	4770      	bx	lr
 8007548:	b510      	push	{r4, lr}
 800754a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007552:	4291      	cmp	r1, r2
 8007554:	d1f9      	bne.n	800754a <memcpy+0xe>
 8007556:	bd10      	pop	{r4, pc}

08007558 <memset>:
 8007558:	4402      	add	r2, r0
 800755a:	4603      	mov	r3, r0
 800755c:	4293      	cmp	r3, r2
 800755e:	d100      	bne.n	8007562 <memset+0xa>
 8007560:	4770      	bx	lr
 8007562:	f803 1b01 	strb.w	r1, [r3], #1
 8007566:	e7f9      	b.n	800755c <memset+0x4>

08007568 <_free_r>:
 8007568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800756a:	2900      	cmp	r1, #0
 800756c:	d044      	beq.n	80075f8 <_free_r+0x90>
 800756e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007572:	9001      	str	r0, [sp, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f1a1 0404 	sub.w	r4, r1, #4
 800757a:	bfb8      	it	lt
 800757c:	18e4      	addlt	r4, r4, r3
 800757e:	f001 fd71 	bl	8009064 <__malloc_lock>
 8007582:	4a1e      	ldr	r2, [pc, #120]	; (80075fc <_free_r+0x94>)
 8007584:	9801      	ldr	r0, [sp, #4]
 8007586:	6813      	ldr	r3, [r2, #0]
 8007588:	b933      	cbnz	r3, 8007598 <_free_r+0x30>
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	6014      	str	r4, [r2, #0]
 800758e:	b003      	add	sp, #12
 8007590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007594:	f001 bd6c 	b.w	8009070 <__malloc_unlock>
 8007598:	42a3      	cmp	r3, r4
 800759a:	d908      	bls.n	80075ae <_free_r+0x46>
 800759c:	6825      	ldr	r5, [r4, #0]
 800759e:	1961      	adds	r1, r4, r5
 80075a0:	428b      	cmp	r3, r1
 80075a2:	bf01      	itttt	eq
 80075a4:	6819      	ldreq	r1, [r3, #0]
 80075a6:	685b      	ldreq	r3, [r3, #4]
 80075a8:	1949      	addeq	r1, r1, r5
 80075aa:	6021      	streq	r1, [r4, #0]
 80075ac:	e7ed      	b.n	800758a <_free_r+0x22>
 80075ae:	461a      	mov	r2, r3
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	b10b      	cbz	r3, 80075b8 <_free_r+0x50>
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d9fa      	bls.n	80075ae <_free_r+0x46>
 80075b8:	6811      	ldr	r1, [r2, #0]
 80075ba:	1855      	adds	r5, r2, r1
 80075bc:	42a5      	cmp	r5, r4
 80075be:	d10b      	bne.n	80075d8 <_free_r+0x70>
 80075c0:	6824      	ldr	r4, [r4, #0]
 80075c2:	4421      	add	r1, r4
 80075c4:	1854      	adds	r4, r2, r1
 80075c6:	42a3      	cmp	r3, r4
 80075c8:	6011      	str	r1, [r2, #0]
 80075ca:	d1e0      	bne.n	800758e <_free_r+0x26>
 80075cc:	681c      	ldr	r4, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	6053      	str	r3, [r2, #4]
 80075d2:	4421      	add	r1, r4
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	e7da      	b.n	800758e <_free_r+0x26>
 80075d8:	d902      	bls.n	80075e0 <_free_r+0x78>
 80075da:	230c      	movs	r3, #12
 80075dc:	6003      	str	r3, [r0, #0]
 80075de:	e7d6      	b.n	800758e <_free_r+0x26>
 80075e0:	6825      	ldr	r5, [r4, #0]
 80075e2:	1961      	adds	r1, r4, r5
 80075e4:	428b      	cmp	r3, r1
 80075e6:	bf04      	itt	eq
 80075e8:	6819      	ldreq	r1, [r3, #0]
 80075ea:	685b      	ldreq	r3, [r3, #4]
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	bf04      	itt	eq
 80075f0:	1949      	addeq	r1, r1, r5
 80075f2:	6021      	streq	r1, [r4, #0]
 80075f4:	6054      	str	r4, [r2, #4]
 80075f6:	e7ca      	b.n	800758e <_free_r+0x26>
 80075f8:	b003      	add	sp, #12
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	200111a4 	.word	0x200111a4

08007600 <sbrk_aligned>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4e0e      	ldr	r6, [pc, #56]	; (800763c <sbrk_aligned+0x3c>)
 8007604:	460c      	mov	r4, r1
 8007606:	6831      	ldr	r1, [r6, #0]
 8007608:	4605      	mov	r5, r0
 800760a:	b911      	cbnz	r1, 8007612 <sbrk_aligned+0x12>
 800760c:	f000 fd60 	bl	80080d0 <_sbrk_r>
 8007610:	6030      	str	r0, [r6, #0]
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f000 fd5b 	bl	80080d0 <_sbrk_r>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d00a      	beq.n	8007634 <sbrk_aligned+0x34>
 800761e:	1cc4      	adds	r4, r0, #3
 8007620:	f024 0403 	bic.w	r4, r4, #3
 8007624:	42a0      	cmp	r0, r4
 8007626:	d007      	beq.n	8007638 <sbrk_aligned+0x38>
 8007628:	1a21      	subs	r1, r4, r0
 800762a:	4628      	mov	r0, r5
 800762c:	f000 fd50 	bl	80080d0 <_sbrk_r>
 8007630:	3001      	adds	r0, #1
 8007632:	d101      	bne.n	8007638 <sbrk_aligned+0x38>
 8007634:	f04f 34ff 	mov.w	r4, #4294967295
 8007638:	4620      	mov	r0, r4
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	200111a8 	.word	0x200111a8

08007640 <_malloc_r>:
 8007640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007644:	1ccd      	adds	r5, r1, #3
 8007646:	f025 0503 	bic.w	r5, r5, #3
 800764a:	3508      	adds	r5, #8
 800764c:	2d0c      	cmp	r5, #12
 800764e:	bf38      	it	cc
 8007650:	250c      	movcc	r5, #12
 8007652:	2d00      	cmp	r5, #0
 8007654:	4607      	mov	r7, r0
 8007656:	db01      	blt.n	800765c <_malloc_r+0x1c>
 8007658:	42a9      	cmp	r1, r5
 800765a:	d905      	bls.n	8007668 <_malloc_r+0x28>
 800765c:	230c      	movs	r3, #12
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	2600      	movs	r6, #0
 8007662:	4630      	mov	r0, r6
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	4e2e      	ldr	r6, [pc, #184]	; (8007724 <_malloc_r+0xe4>)
 800766a:	f001 fcfb 	bl	8009064 <__malloc_lock>
 800766e:	6833      	ldr	r3, [r6, #0]
 8007670:	461c      	mov	r4, r3
 8007672:	bb34      	cbnz	r4, 80076c2 <_malloc_r+0x82>
 8007674:	4629      	mov	r1, r5
 8007676:	4638      	mov	r0, r7
 8007678:	f7ff ffc2 	bl	8007600 <sbrk_aligned>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	4604      	mov	r4, r0
 8007680:	d14d      	bne.n	800771e <_malloc_r+0xde>
 8007682:	6834      	ldr	r4, [r6, #0]
 8007684:	4626      	mov	r6, r4
 8007686:	2e00      	cmp	r6, #0
 8007688:	d140      	bne.n	800770c <_malloc_r+0xcc>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	4631      	mov	r1, r6
 800768e:	4638      	mov	r0, r7
 8007690:	eb04 0803 	add.w	r8, r4, r3
 8007694:	f000 fd1c 	bl	80080d0 <_sbrk_r>
 8007698:	4580      	cmp	r8, r0
 800769a:	d13a      	bne.n	8007712 <_malloc_r+0xd2>
 800769c:	6821      	ldr	r1, [r4, #0]
 800769e:	3503      	adds	r5, #3
 80076a0:	1a6d      	subs	r5, r5, r1
 80076a2:	f025 0503 	bic.w	r5, r5, #3
 80076a6:	3508      	adds	r5, #8
 80076a8:	2d0c      	cmp	r5, #12
 80076aa:	bf38      	it	cc
 80076ac:	250c      	movcc	r5, #12
 80076ae:	4629      	mov	r1, r5
 80076b0:	4638      	mov	r0, r7
 80076b2:	f7ff ffa5 	bl	8007600 <sbrk_aligned>
 80076b6:	3001      	adds	r0, #1
 80076b8:	d02b      	beq.n	8007712 <_malloc_r+0xd2>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	442b      	add	r3, r5
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	e00e      	b.n	80076e0 <_malloc_r+0xa0>
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	1b52      	subs	r2, r2, r5
 80076c6:	d41e      	bmi.n	8007706 <_malloc_r+0xc6>
 80076c8:	2a0b      	cmp	r2, #11
 80076ca:	d916      	bls.n	80076fa <_malloc_r+0xba>
 80076cc:	1961      	adds	r1, r4, r5
 80076ce:	42a3      	cmp	r3, r4
 80076d0:	6025      	str	r5, [r4, #0]
 80076d2:	bf18      	it	ne
 80076d4:	6059      	strne	r1, [r3, #4]
 80076d6:	6863      	ldr	r3, [r4, #4]
 80076d8:	bf08      	it	eq
 80076da:	6031      	streq	r1, [r6, #0]
 80076dc:	5162      	str	r2, [r4, r5]
 80076de:	604b      	str	r3, [r1, #4]
 80076e0:	4638      	mov	r0, r7
 80076e2:	f104 060b 	add.w	r6, r4, #11
 80076e6:	f001 fcc3 	bl	8009070 <__malloc_unlock>
 80076ea:	f026 0607 	bic.w	r6, r6, #7
 80076ee:	1d23      	adds	r3, r4, #4
 80076f0:	1af2      	subs	r2, r6, r3
 80076f2:	d0b6      	beq.n	8007662 <_malloc_r+0x22>
 80076f4:	1b9b      	subs	r3, r3, r6
 80076f6:	50a3      	str	r3, [r4, r2]
 80076f8:	e7b3      	b.n	8007662 <_malloc_r+0x22>
 80076fa:	6862      	ldr	r2, [r4, #4]
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	bf0c      	ite	eq
 8007700:	6032      	streq	r2, [r6, #0]
 8007702:	605a      	strne	r2, [r3, #4]
 8007704:	e7ec      	b.n	80076e0 <_malloc_r+0xa0>
 8007706:	4623      	mov	r3, r4
 8007708:	6864      	ldr	r4, [r4, #4]
 800770a:	e7b2      	b.n	8007672 <_malloc_r+0x32>
 800770c:	4634      	mov	r4, r6
 800770e:	6876      	ldr	r6, [r6, #4]
 8007710:	e7b9      	b.n	8007686 <_malloc_r+0x46>
 8007712:	230c      	movs	r3, #12
 8007714:	603b      	str	r3, [r7, #0]
 8007716:	4638      	mov	r0, r7
 8007718:	f001 fcaa 	bl	8009070 <__malloc_unlock>
 800771c:	e7a1      	b.n	8007662 <_malloc_r+0x22>
 800771e:	6025      	str	r5, [r4, #0]
 8007720:	e7de      	b.n	80076e0 <_malloc_r+0xa0>
 8007722:	bf00      	nop
 8007724:	200111a4 	.word	0x200111a4

08007728 <__cvt>:
 8007728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800772c:	ec55 4b10 	vmov	r4, r5, d0
 8007730:	2d00      	cmp	r5, #0
 8007732:	460e      	mov	r6, r1
 8007734:	4619      	mov	r1, r3
 8007736:	462b      	mov	r3, r5
 8007738:	bfbb      	ittet	lt
 800773a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800773e:	461d      	movlt	r5, r3
 8007740:	2300      	movge	r3, #0
 8007742:	232d      	movlt	r3, #45	; 0x2d
 8007744:	700b      	strb	r3, [r1, #0]
 8007746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007748:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800774c:	4691      	mov	r9, r2
 800774e:	f023 0820 	bic.w	r8, r3, #32
 8007752:	bfbc      	itt	lt
 8007754:	4622      	movlt	r2, r4
 8007756:	4614      	movlt	r4, r2
 8007758:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800775c:	d005      	beq.n	800776a <__cvt+0x42>
 800775e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007762:	d100      	bne.n	8007766 <__cvt+0x3e>
 8007764:	3601      	adds	r6, #1
 8007766:	2102      	movs	r1, #2
 8007768:	e000      	b.n	800776c <__cvt+0x44>
 800776a:	2103      	movs	r1, #3
 800776c:	ab03      	add	r3, sp, #12
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	ab02      	add	r3, sp, #8
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	ec45 4b10 	vmov	d0, r4, r5
 8007778:	4653      	mov	r3, sl
 800777a:	4632      	mov	r2, r6
 800777c:	f000 fdac 	bl	80082d8 <_dtoa_r>
 8007780:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007784:	4607      	mov	r7, r0
 8007786:	d102      	bne.n	800778e <__cvt+0x66>
 8007788:	f019 0f01 	tst.w	r9, #1
 800778c:	d022      	beq.n	80077d4 <__cvt+0xac>
 800778e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007792:	eb07 0906 	add.w	r9, r7, r6
 8007796:	d110      	bne.n	80077ba <__cvt+0x92>
 8007798:	783b      	ldrb	r3, [r7, #0]
 800779a:	2b30      	cmp	r3, #48	; 0x30
 800779c:	d10a      	bne.n	80077b4 <__cvt+0x8c>
 800779e:	2200      	movs	r2, #0
 80077a0:	2300      	movs	r3, #0
 80077a2:	4620      	mov	r0, r4
 80077a4:	4629      	mov	r1, r5
 80077a6:	f7f9 f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80077aa:	b918      	cbnz	r0, 80077b4 <__cvt+0x8c>
 80077ac:	f1c6 0601 	rsb	r6, r6, #1
 80077b0:	f8ca 6000 	str.w	r6, [sl]
 80077b4:	f8da 3000 	ldr.w	r3, [sl]
 80077b8:	4499      	add	r9, r3
 80077ba:	2200      	movs	r2, #0
 80077bc:	2300      	movs	r3, #0
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	f7f9 f989 	bl	8000ad8 <__aeabi_dcmpeq>
 80077c6:	b108      	cbz	r0, 80077cc <__cvt+0xa4>
 80077c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80077cc:	2230      	movs	r2, #48	; 0x30
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	454b      	cmp	r3, r9
 80077d2:	d307      	bcc.n	80077e4 <__cvt+0xbc>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d8:	1bdb      	subs	r3, r3, r7
 80077da:	4638      	mov	r0, r7
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	b004      	add	sp, #16
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e4:	1c59      	adds	r1, r3, #1
 80077e6:	9103      	str	r1, [sp, #12]
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	e7f0      	b.n	80077ce <__cvt+0xa6>

080077ec <__exponent>:
 80077ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ee:	4603      	mov	r3, r0
 80077f0:	2900      	cmp	r1, #0
 80077f2:	bfb8      	it	lt
 80077f4:	4249      	neglt	r1, r1
 80077f6:	f803 2b02 	strb.w	r2, [r3], #2
 80077fa:	bfb4      	ite	lt
 80077fc:	222d      	movlt	r2, #45	; 0x2d
 80077fe:	222b      	movge	r2, #43	; 0x2b
 8007800:	2909      	cmp	r1, #9
 8007802:	7042      	strb	r2, [r0, #1]
 8007804:	dd2a      	ble.n	800785c <__exponent+0x70>
 8007806:	f10d 0407 	add.w	r4, sp, #7
 800780a:	46a4      	mov	ip, r4
 800780c:	270a      	movs	r7, #10
 800780e:	46a6      	mov	lr, r4
 8007810:	460a      	mov	r2, r1
 8007812:	fb91 f6f7 	sdiv	r6, r1, r7
 8007816:	fb07 1516 	mls	r5, r7, r6, r1
 800781a:	3530      	adds	r5, #48	; 0x30
 800781c:	2a63      	cmp	r2, #99	; 0x63
 800781e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007822:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007826:	4631      	mov	r1, r6
 8007828:	dcf1      	bgt.n	800780e <__exponent+0x22>
 800782a:	3130      	adds	r1, #48	; 0x30
 800782c:	f1ae 0502 	sub.w	r5, lr, #2
 8007830:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007834:	1c44      	adds	r4, r0, #1
 8007836:	4629      	mov	r1, r5
 8007838:	4561      	cmp	r1, ip
 800783a:	d30a      	bcc.n	8007852 <__exponent+0x66>
 800783c:	f10d 0209 	add.w	r2, sp, #9
 8007840:	eba2 020e 	sub.w	r2, r2, lr
 8007844:	4565      	cmp	r5, ip
 8007846:	bf88      	it	hi
 8007848:	2200      	movhi	r2, #0
 800784a:	4413      	add	r3, r2
 800784c:	1a18      	subs	r0, r3, r0
 800784e:	b003      	add	sp, #12
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007856:	f804 2f01 	strb.w	r2, [r4, #1]!
 800785a:	e7ed      	b.n	8007838 <__exponent+0x4c>
 800785c:	2330      	movs	r3, #48	; 0x30
 800785e:	3130      	adds	r1, #48	; 0x30
 8007860:	7083      	strb	r3, [r0, #2]
 8007862:	70c1      	strb	r1, [r0, #3]
 8007864:	1d03      	adds	r3, r0, #4
 8007866:	e7f1      	b.n	800784c <__exponent+0x60>

08007868 <_printf_float>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	ed2d 8b02 	vpush	{d8}
 8007870:	b08d      	sub	sp, #52	; 0x34
 8007872:	460c      	mov	r4, r1
 8007874:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007878:	4616      	mov	r6, r2
 800787a:	461f      	mov	r7, r3
 800787c:	4605      	mov	r5, r0
 800787e:	f001 fbdb 	bl	8009038 <_localeconv_r>
 8007882:	f8d0 a000 	ldr.w	sl, [r0]
 8007886:	4650      	mov	r0, sl
 8007888:	f7f8 fcaa 	bl	80001e0 <strlen>
 800788c:	2300      	movs	r3, #0
 800788e:	930a      	str	r3, [sp, #40]	; 0x28
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	f8d8 3000 	ldr.w	r3, [r8]
 8007898:	f894 b018 	ldrb.w	fp, [r4, #24]
 800789c:	3307      	adds	r3, #7
 800789e:	f023 0307 	bic.w	r3, r3, #7
 80078a2:	f103 0208 	add.w	r2, r3, #8
 80078a6:	f8c8 2000 	str.w	r2, [r8]
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078ba:	9307      	str	r3, [sp, #28]
 80078bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80078c0:	ee08 0a10 	vmov	s16, r0
 80078c4:	4b9f      	ldr	r3, [pc, #636]	; (8007b44 <_printf_float+0x2dc>)
 80078c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295
 80078ce:	f7f9 f935 	bl	8000b3c <__aeabi_dcmpun>
 80078d2:	bb88      	cbnz	r0, 8007938 <_printf_float+0xd0>
 80078d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078d8:	4b9a      	ldr	r3, [pc, #616]	; (8007b44 <_printf_float+0x2dc>)
 80078da:	f04f 32ff 	mov.w	r2, #4294967295
 80078de:	f7f9 f90f 	bl	8000b00 <__aeabi_dcmple>
 80078e2:	bb48      	cbnz	r0, 8007938 <_printf_float+0xd0>
 80078e4:	2200      	movs	r2, #0
 80078e6:	2300      	movs	r3, #0
 80078e8:	4640      	mov	r0, r8
 80078ea:	4649      	mov	r1, r9
 80078ec:	f7f9 f8fe 	bl	8000aec <__aeabi_dcmplt>
 80078f0:	b110      	cbz	r0, 80078f8 <_printf_float+0x90>
 80078f2:	232d      	movs	r3, #45	; 0x2d
 80078f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f8:	4b93      	ldr	r3, [pc, #588]	; (8007b48 <_printf_float+0x2e0>)
 80078fa:	4894      	ldr	r0, [pc, #592]	; (8007b4c <_printf_float+0x2e4>)
 80078fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007900:	bf94      	ite	ls
 8007902:	4698      	movls	r8, r3
 8007904:	4680      	movhi	r8, r0
 8007906:	2303      	movs	r3, #3
 8007908:	6123      	str	r3, [r4, #16]
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	f023 0204 	bic.w	r2, r3, #4
 8007910:	6022      	str	r2, [r4, #0]
 8007912:	f04f 0900 	mov.w	r9, #0
 8007916:	9700      	str	r7, [sp, #0]
 8007918:	4633      	mov	r3, r6
 800791a:	aa0b      	add	r2, sp, #44	; 0x2c
 800791c:	4621      	mov	r1, r4
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f9d8 	bl	8007cd4 <_printf_common>
 8007924:	3001      	adds	r0, #1
 8007926:	f040 8090 	bne.w	8007a4a <_printf_float+0x1e2>
 800792a:	f04f 30ff 	mov.w	r0, #4294967295
 800792e:	b00d      	add	sp, #52	; 0x34
 8007930:	ecbd 8b02 	vpop	{d8}
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f9 f8fc 	bl	8000b3c <__aeabi_dcmpun>
 8007944:	b140      	cbz	r0, 8007958 <_printf_float+0xf0>
 8007946:	464b      	mov	r3, r9
 8007948:	2b00      	cmp	r3, #0
 800794a:	bfbc      	itt	lt
 800794c:	232d      	movlt	r3, #45	; 0x2d
 800794e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007952:	487f      	ldr	r0, [pc, #508]	; (8007b50 <_printf_float+0x2e8>)
 8007954:	4b7f      	ldr	r3, [pc, #508]	; (8007b54 <_printf_float+0x2ec>)
 8007956:	e7d1      	b.n	80078fc <_printf_float+0x94>
 8007958:	6863      	ldr	r3, [r4, #4]
 800795a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800795e:	9206      	str	r2, [sp, #24]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	d13f      	bne.n	80079e4 <_printf_float+0x17c>
 8007964:	2306      	movs	r3, #6
 8007966:	6063      	str	r3, [r4, #4]
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	6861      	ldr	r1, [r4, #4]
 800796c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007970:	2300      	movs	r3, #0
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	ab0a      	add	r3, sp, #40	; 0x28
 8007976:	e9cd b301 	strd	fp, r3, [sp, #4]
 800797a:	ab09      	add	r3, sp, #36	; 0x24
 800797c:	ec49 8b10 	vmov	d0, r8, r9
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	6022      	str	r2, [r4, #0]
 8007984:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007988:	4628      	mov	r0, r5
 800798a:	f7ff fecd 	bl	8007728 <__cvt>
 800798e:	9b06      	ldr	r3, [sp, #24]
 8007990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007992:	2b47      	cmp	r3, #71	; 0x47
 8007994:	4680      	mov	r8, r0
 8007996:	d108      	bne.n	80079aa <_printf_float+0x142>
 8007998:	1cc8      	adds	r0, r1, #3
 800799a:	db02      	blt.n	80079a2 <_printf_float+0x13a>
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	4299      	cmp	r1, r3
 80079a0:	dd41      	ble.n	8007a26 <_printf_float+0x1be>
 80079a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80079a6:	fa5f fb8b 	uxtb.w	fp, fp
 80079aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079ae:	d820      	bhi.n	80079f2 <_printf_float+0x18a>
 80079b0:	3901      	subs	r1, #1
 80079b2:	465a      	mov	r2, fp
 80079b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079b8:	9109      	str	r1, [sp, #36]	; 0x24
 80079ba:	f7ff ff17 	bl	80077ec <__exponent>
 80079be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c0:	1813      	adds	r3, r2, r0
 80079c2:	2a01      	cmp	r2, #1
 80079c4:	4681      	mov	r9, r0
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	dc02      	bgt.n	80079d0 <_printf_float+0x168>
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	07d2      	lsls	r2, r2, #31
 80079ce:	d501      	bpl.n	80079d4 <_printf_float+0x16c>
 80079d0:	3301      	adds	r3, #1
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d09c      	beq.n	8007916 <_printf_float+0xae>
 80079dc:	232d      	movs	r3, #45	; 0x2d
 80079de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e2:	e798      	b.n	8007916 <_printf_float+0xae>
 80079e4:	9a06      	ldr	r2, [sp, #24]
 80079e6:	2a47      	cmp	r2, #71	; 0x47
 80079e8:	d1be      	bne.n	8007968 <_printf_float+0x100>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1bc      	bne.n	8007968 <_printf_float+0x100>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e7b9      	b.n	8007966 <_printf_float+0xfe>
 80079f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80079f6:	d118      	bne.n	8007a2a <_printf_float+0x1c2>
 80079f8:	2900      	cmp	r1, #0
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	dd0b      	ble.n	8007a16 <_printf_float+0x1ae>
 80079fe:	6121      	str	r1, [r4, #16]
 8007a00:	b913      	cbnz	r3, 8007a08 <_printf_float+0x1a0>
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	07d0      	lsls	r0, r2, #31
 8007a06:	d502      	bpl.n	8007a0e <_printf_float+0x1a6>
 8007a08:	3301      	adds	r3, #1
 8007a0a:	440b      	add	r3, r1
 8007a0c:	6123      	str	r3, [r4, #16]
 8007a0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a10:	f04f 0900 	mov.w	r9, #0
 8007a14:	e7de      	b.n	80079d4 <_printf_float+0x16c>
 8007a16:	b913      	cbnz	r3, 8007a1e <_printf_float+0x1b6>
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	07d2      	lsls	r2, r2, #31
 8007a1c:	d501      	bpl.n	8007a22 <_printf_float+0x1ba>
 8007a1e:	3302      	adds	r3, #2
 8007a20:	e7f4      	b.n	8007a0c <_printf_float+0x1a4>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e7f2      	b.n	8007a0c <_printf_float+0x1a4>
 8007a26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2c:	4299      	cmp	r1, r3
 8007a2e:	db05      	blt.n	8007a3c <_printf_float+0x1d4>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	6121      	str	r1, [r4, #16]
 8007a34:	07d8      	lsls	r0, r3, #31
 8007a36:	d5ea      	bpl.n	8007a0e <_printf_float+0x1a6>
 8007a38:	1c4b      	adds	r3, r1, #1
 8007a3a:	e7e7      	b.n	8007a0c <_printf_float+0x1a4>
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	bfd4      	ite	le
 8007a40:	f1c1 0202 	rsble	r2, r1, #2
 8007a44:	2201      	movgt	r2, #1
 8007a46:	4413      	add	r3, r2
 8007a48:	e7e0      	b.n	8007a0c <_printf_float+0x1a4>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	055a      	lsls	r2, r3, #21
 8007a4e:	d407      	bmi.n	8007a60 <_printf_float+0x1f8>
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	4642      	mov	r2, r8
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d12c      	bne.n	8007ab8 <_printf_float+0x250>
 8007a5e:	e764      	b.n	800792a <_printf_float+0xc2>
 8007a60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a64:	f240 80e0 	bls.w	8007c28 <_printf_float+0x3c0>
 8007a68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f7f9 f832 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d034      	beq.n	8007ae2 <_printf_float+0x27a>
 8007a78:	4a37      	ldr	r2, [pc, #220]	; (8007b58 <_printf_float+0x2f0>)
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f af51 	beq.w	800792a <_printf_float+0xc2>
 8007a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	db02      	blt.n	8007a96 <_printf_float+0x22e>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	07d8      	lsls	r0, r3, #31
 8007a94:	d510      	bpl.n	8007ab8 <_printf_float+0x250>
 8007a96:	ee18 3a10 	vmov	r3, s16
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f43f af41 	beq.w	800792a <_printf_float+0xc2>
 8007aa8:	f04f 0800 	mov.w	r8, #0
 8007aac:	f104 091a 	add.w	r9, r4, #26
 8007ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	4543      	cmp	r3, r8
 8007ab6:	dc09      	bgt.n	8007acc <_printf_float+0x264>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	079b      	lsls	r3, r3, #30
 8007abc:	f100 8105 	bmi.w	8007cca <_printf_float+0x462>
 8007ac0:	68e0      	ldr	r0, [r4, #12]
 8007ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac4:	4298      	cmp	r0, r3
 8007ac6:	bfb8      	it	lt
 8007ac8:	4618      	movlt	r0, r3
 8007aca:	e730      	b.n	800792e <_printf_float+0xc6>
 8007acc:	2301      	movs	r3, #1
 8007ace:	464a      	mov	r2, r9
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f43f af27 	beq.w	800792a <_printf_float+0xc2>
 8007adc:	f108 0801 	add.w	r8, r8, #1
 8007ae0:	e7e6      	b.n	8007ab0 <_printf_float+0x248>
 8007ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dc39      	bgt.n	8007b5c <_printf_float+0x2f4>
 8007ae8:	4a1b      	ldr	r2, [pc, #108]	; (8007b58 <_printf_float+0x2f0>)
 8007aea:	2301      	movs	r3, #1
 8007aec:	4631      	mov	r1, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	f43f af19 	beq.w	800792a <_printf_float+0xc2>
 8007af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007afc:	4313      	orrs	r3, r2
 8007afe:	d102      	bne.n	8007b06 <_printf_float+0x29e>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	07d9      	lsls	r1, r3, #31
 8007b04:	d5d8      	bpl.n	8007ab8 <_printf_float+0x250>
 8007b06:	ee18 3a10 	vmov	r3, s16
 8007b0a:	4652      	mov	r2, sl
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	f43f af09 	beq.w	800792a <_printf_float+0xc2>
 8007b18:	f04f 0900 	mov.w	r9, #0
 8007b1c:	f104 0a1a 	add.w	sl, r4, #26
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	425b      	negs	r3, r3
 8007b24:	454b      	cmp	r3, r9
 8007b26:	dc01      	bgt.n	8007b2c <_printf_float+0x2c4>
 8007b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2a:	e792      	b.n	8007a52 <_printf_float+0x1ea>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	4652      	mov	r2, sl
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	f43f aef7 	beq.w	800792a <_printf_float+0xc2>
 8007b3c:	f109 0901 	add.w	r9, r9, #1
 8007b40:	e7ee      	b.n	8007b20 <_printf_float+0x2b8>
 8007b42:	bf00      	nop
 8007b44:	7fefffff 	.word	0x7fefffff
 8007b48:	0800a09c 	.word	0x0800a09c
 8007b4c:	0800a0a0 	.word	0x0800a0a0
 8007b50:	0800a0a8 	.word	0x0800a0a8
 8007b54:	0800a0a4 	.word	0x0800a0a4
 8007b58:	0800a0ac 	.word	0x0800a0ac
 8007b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b60:	429a      	cmp	r2, r3
 8007b62:	bfa8      	it	ge
 8007b64:	461a      	movge	r2, r3
 8007b66:	2a00      	cmp	r2, #0
 8007b68:	4691      	mov	r9, r2
 8007b6a:	dc37      	bgt.n	8007bdc <_printf_float+0x374>
 8007b6c:	f04f 0b00 	mov.w	fp, #0
 8007b70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b74:	f104 021a 	add.w	r2, r4, #26
 8007b78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	eba3 0309 	sub.w	r3, r3, r9
 8007b80:	455b      	cmp	r3, fp
 8007b82:	dc33      	bgt.n	8007bec <_printf_float+0x384>
 8007b84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	db3b      	blt.n	8007c04 <_printf_float+0x39c>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	07da      	lsls	r2, r3, #31
 8007b90:	d438      	bmi.n	8007c04 <_printf_float+0x39c>
 8007b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b94:	9a05      	ldr	r2, [sp, #20]
 8007b96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b98:	1a9a      	subs	r2, r3, r2
 8007b9a:	eba3 0901 	sub.w	r9, r3, r1
 8007b9e:	4591      	cmp	r9, r2
 8007ba0:	bfa8      	it	ge
 8007ba2:	4691      	movge	r9, r2
 8007ba4:	f1b9 0f00 	cmp.w	r9, #0
 8007ba8:	dc35      	bgt.n	8007c16 <_printf_float+0x3ae>
 8007baa:	f04f 0800 	mov.w	r8, #0
 8007bae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bb2:	f104 0a1a 	add.w	sl, r4, #26
 8007bb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bba:	1a9b      	subs	r3, r3, r2
 8007bbc:	eba3 0309 	sub.w	r3, r3, r9
 8007bc0:	4543      	cmp	r3, r8
 8007bc2:	f77f af79 	ble.w	8007ab8 <_printf_float+0x250>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4652      	mov	r2, sl
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f aeaa 	beq.w	800792a <_printf_float+0xc2>
 8007bd6:	f108 0801 	add.w	r8, r8, #1
 8007bda:	e7ec      	b.n	8007bb6 <_printf_float+0x34e>
 8007bdc:	4613      	mov	r3, r2
 8007bde:	4631      	mov	r1, r6
 8007be0:	4642      	mov	r2, r8
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	d1c0      	bne.n	8007b6c <_printf_float+0x304>
 8007bea:	e69e      	b.n	800792a <_printf_float+0xc2>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	9205      	str	r2, [sp, #20]
 8007bf4:	47b8      	blx	r7
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f43f ae97 	beq.w	800792a <_printf_float+0xc2>
 8007bfc:	9a05      	ldr	r2, [sp, #20]
 8007bfe:	f10b 0b01 	add.w	fp, fp, #1
 8007c02:	e7b9      	b.n	8007b78 <_printf_float+0x310>
 8007c04:	ee18 3a10 	vmov	r3, s16
 8007c08:	4652      	mov	r2, sl
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	d1be      	bne.n	8007b92 <_printf_float+0x32a>
 8007c14:	e689      	b.n	800792a <_printf_float+0xc2>
 8007c16:	9a05      	ldr	r2, [sp, #20]
 8007c18:	464b      	mov	r3, r9
 8007c1a:	4442      	add	r2, r8
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b8      	blx	r7
 8007c22:	3001      	adds	r0, #1
 8007c24:	d1c1      	bne.n	8007baa <_printf_float+0x342>
 8007c26:	e680      	b.n	800792a <_printf_float+0xc2>
 8007c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2a:	2a01      	cmp	r2, #1
 8007c2c:	dc01      	bgt.n	8007c32 <_printf_float+0x3ca>
 8007c2e:	07db      	lsls	r3, r3, #31
 8007c30:	d538      	bpl.n	8007ca4 <_printf_float+0x43c>
 8007c32:	2301      	movs	r3, #1
 8007c34:	4642      	mov	r2, r8
 8007c36:	4631      	mov	r1, r6
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	f43f ae74 	beq.w	800792a <_printf_float+0xc2>
 8007c42:	ee18 3a10 	vmov	r3, s16
 8007c46:	4652      	mov	r2, sl
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f ae6b 	beq.w	800792a <_printf_float+0xc2>
 8007c54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f7f8 ff3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c60:	b9d8      	cbnz	r0, 8007c9a <_printf_float+0x432>
 8007c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c64:	f108 0201 	add.w	r2, r8, #1
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	d10e      	bne.n	8007c92 <_printf_float+0x42a>
 8007c74:	e659      	b.n	800792a <_printf_float+0xc2>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4652      	mov	r2, sl
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f ae52 	beq.w	800792a <_printf_float+0xc2>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	4543      	cmp	r3, r8
 8007c90:	dcf1      	bgt.n	8007c76 <_printf_float+0x40e>
 8007c92:	464b      	mov	r3, r9
 8007c94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c98:	e6dc      	b.n	8007a54 <_printf_float+0x1ec>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	f104 0a1a 	add.w	sl, r4, #26
 8007ca2:	e7f2      	b.n	8007c8a <_printf_float+0x422>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	e7df      	b.n	8007c6a <_printf_float+0x402>
 8007caa:	2301      	movs	r3, #1
 8007cac:	464a      	mov	r2, r9
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f43f ae38 	beq.w	800792a <_printf_float+0xc2>
 8007cba:	f108 0801 	add.w	r8, r8, #1
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cc2:	1a5b      	subs	r3, r3, r1
 8007cc4:	4543      	cmp	r3, r8
 8007cc6:	dcf0      	bgt.n	8007caa <_printf_float+0x442>
 8007cc8:	e6fa      	b.n	8007ac0 <_printf_float+0x258>
 8007cca:	f04f 0800 	mov.w	r8, #0
 8007cce:	f104 0919 	add.w	r9, r4, #25
 8007cd2:	e7f4      	b.n	8007cbe <_printf_float+0x456>

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	68e5      	ldr	r5, [r4, #12]
 8007d3e:	6832      	ldr	r2, [r6, #0]
 8007d40:	f003 0306 	and.w	r3, r3, #6
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	bf08      	it	eq
 8007d48:	1aad      	subeq	r5, r5, r2
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4691      	mov	r9, r2
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d8 	beq.w	8007f82 <_printf_i+0x1d2>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a3 	beq.w	8007f1e <_printf_i+0x16e>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f69 	.word	0x08007f69
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4b 	.word	0x08007f4b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f53 	.word	0x08007f53
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a3      	b.n	8007fa4 <_printf_i+0x1f4>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	f101 0304 	add.w	r3, r1, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	4276      	negs	r6, r6
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e86:	bf18      	it	ne
 8007e88:	b236      	sxthne	r6, r6
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	0601      	lsls	r1, r0, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681e      	ldr	r6, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0646      	lsls	r6, r0, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881e      	ldrh	r6, [r3, #0]
 8007ea2:	4854      	ldr	r0, [pc, #336]	; (8007ff4 <_printf_i+0x244>)
 8007ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2308      	moveq	r3, #8
 8007eaa:	230a      	movne	r3, #10
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6865      	ldr	r5, [r4, #4]
 8007eb4:	60a5      	str	r5, [r4, #8]
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90e      	cbnz	r6, 8007ec8 <_printf_i+0x118>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d04d      	beq.n	8007f64 <_printf_i+0x1b4>
 8007ec8:	4615      	mov	r5, r2
 8007eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ece:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed8:	4637      	mov	r7, r6
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460e      	mov	r6, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x11a>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x14c>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07de      	lsls	r6, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x14c>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	; 0x30
 8007ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007efc:	1b52      	subs	r2, r2, r5
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee2 	bl	8007cd4 <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14c      	bne.n	8007fae <_printf_i+0x1fe>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	4835      	ldr	r0, [pc, #212]	; (8007ff4 <_printf_i+0x244>)
 8007f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f24:	6829      	ldr	r1, [r5, #0]
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2c:	6029      	str	r1, [r5, #0]
 8007f2e:	061d      	lsls	r5, r3, #24
 8007f30:	d514      	bpl.n	8007f5c <_printf_i+0x1ac>
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	bf44      	itt	mi
 8007f36:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3a:	6023      	strmi	r3, [r4, #0]
 8007f3c:	b91e      	cbnz	r6, 8007f46 <_printf_i+0x196>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	2310      	movs	r3, #16
 8007f48:	e7b0      	b.n	8007eac <_printf_i+0xfc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5a:	e7e3      	b.n	8007f24 <_printf_i+0x174>
 8007f5c:	0659      	lsls	r1, r3, #25
 8007f5e:	bf48      	it	mi
 8007f60:	b2b6      	uxthmi	r6, r6
 8007f62:	e7e6      	b.n	8007f32 <_printf_i+0x182>
 8007f64:	4615      	mov	r5, r2
 8007f66:	e7bb      	b.n	8007ee0 <_printf_i+0x130>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	6826      	ldr	r6, [r4, #0]
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6028      	str	r0, [r5, #0]
 8007f72:	0635      	lsls	r5, r6, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1cc>
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1d2>
 8007f7c:	0670      	lsls	r0, r6, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1c8>
 8007f80:	8019      	strh	r1, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4615      	mov	r5, r2
 8007f88:	e7ba      	b.n	8007f00 <_printf_i+0x150>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7f8 f92a 	bl	80001f0 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1f2>
 8007f9e:	1b40      	subs	r0, r0, r5
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	e7a8      	b.n	8007f00 <_printf_i+0x150>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ab      	beq.n	8007f14 <_printf_i+0x164>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x23a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a4      	b.n	8007f18 <_printf_i+0x168>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09b      	beq.n	8007f14 <_printf_i+0x164>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x21e>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x212>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x22e>
 8007ff2:	bf00      	nop
 8007ff4:	0800a0ae 	.word	0x0800a0ae
 8007ff8:	0800a0bf 	.word	0x0800a0bf

08007ffc <cleanup_glue>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	460c      	mov	r4, r1
 8008000:	6809      	ldr	r1, [r1, #0]
 8008002:	4605      	mov	r5, r0
 8008004:	b109      	cbz	r1, 800800a <cleanup_glue+0xe>
 8008006:	f7ff fff9 	bl	8007ffc <cleanup_glue>
 800800a:	4621      	mov	r1, r4
 800800c:	4628      	mov	r0, r5
 800800e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008012:	f7ff baa9 	b.w	8007568 <_free_r>
	...

08008018 <_reclaim_reent>:
 8008018:	4b2c      	ldr	r3, [pc, #176]	; (80080cc <_reclaim_reent+0xb4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4283      	cmp	r3, r0
 800801e:	b570      	push	{r4, r5, r6, lr}
 8008020:	4604      	mov	r4, r0
 8008022:	d051      	beq.n	80080c8 <_reclaim_reent+0xb0>
 8008024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008026:	b143      	cbz	r3, 800803a <_reclaim_reent+0x22>
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d14a      	bne.n	80080c4 <_reclaim_reent+0xac>
 800802e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008030:	6819      	ldr	r1, [r3, #0]
 8008032:	b111      	cbz	r1, 800803a <_reclaim_reent+0x22>
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff fa97 	bl	8007568 <_free_r>
 800803a:	6961      	ldr	r1, [r4, #20]
 800803c:	b111      	cbz	r1, 8008044 <_reclaim_reent+0x2c>
 800803e:	4620      	mov	r0, r4
 8008040:	f7ff fa92 	bl	8007568 <_free_r>
 8008044:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008046:	b111      	cbz	r1, 800804e <_reclaim_reent+0x36>
 8008048:	4620      	mov	r0, r4
 800804a:	f7ff fa8d 	bl	8007568 <_free_r>
 800804e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008050:	b111      	cbz	r1, 8008058 <_reclaim_reent+0x40>
 8008052:	4620      	mov	r0, r4
 8008054:	f7ff fa88 	bl	8007568 <_free_r>
 8008058:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800805a:	b111      	cbz	r1, 8008062 <_reclaim_reent+0x4a>
 800805c:	4620      	mov	r0, r4
 800805e:	f7ff fa83 	bl	8007568 <_free_r>
 8008062:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008064:	b111      	cbz	r1, 800806c <_reclaim_reent+0x54>
 8008066:	4620      	mov	r0, r4
 8008068:	f7ff fa7e 	bl	8007568 <_free_r>
 800806c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800806e:	b111      	cbz	r1, 8008076 <_reclaim_reent+0x5e>
 8008070:	4620      	mov	r0, r4
 8008072:	f7ff fa79 	bl	8007568 <_free_r>
 8008076:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008078:	b111      	cbz	r1, 8008080 <_reclaim_reent+0x68>
 800807a:	4620      	mov	r0, r4
 800807c:	f7ff fa74 	bl	8007568 <_free_r>
 8008080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008082:	b111      	cbz	r1, 800808a <_reclaim_reent+0x72>
 8008084:	4620      	mov	r0, r4
 8008086:	f7ff fa6f 	bl	8007568 <_free_r>
 800808a:	69a3      	ldr	r3, [r4, #24]
 800808c:	b1e3      	cbz	r3, 80080c8 <_reclaim_reent+0xb0>
 800808e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008090:	4620      	mov	r0, r4
 8008092:	4798      	blx	r3
 8008094:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008096:	b1b9      	cbz	r1, 80080c8 <_reclaim_reent+0xb0>
 8008098:	4620      	mov	r0, r4
 800809a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800809e:	f7ff bfad 	b.w	8007ffc <cleanup_glue>
 80080a2:	5949      	ldr	r1, [r1, r5]
 80080a4:	b941      	cbnz	r1, 80080b8 <_reclaim_reent+0xa0>
 80080a6:	3504      	adds	r5, #4
 80080a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080aa:	2d80      	cmp	r5, #128	; 0x80
 80080ac:	68d9      	ldr	r1, [r3, #12]
 80080ae:	d1f8      	bne.n	80080a2 <_reclaim_reent+0x8a>
 80080b0:	4620      	mov	r0, r4
 80080b2:	f7ff fa59 	bl	8007568 <_free_r>
 80080b6:	e7ba      	b.n	800802e <_reclaim_reent+0x16>
 80080b8:	680e      	ldr	r6, [r1, #0]
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7ff fa54 	bl	8007568 <_free_r>
 80080c0:	4631      	mov	r1, r6
 80080c2:	e7ef      	b.n	80080a4 <_reclaim_reent+0x8c>
 80080c4:	2500      	movs	r5, #0
 80080c6:	e7ef      	b.n	80080a8 <_reclaim_reent+0x90>
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
 80080ca:	bf00      	nop
 80080cc:	20000024 	.word	0x20000024

080080d0 <_sbrk_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d06      	ldr	r5, [pc, #24]	; (80080ec <_sbrk_r+0x1c>)
 80080d4:	2300      	movs	r3, #0
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7f9 fffa 	bl	80020d4 <_sbrk>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_sbrk_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_sbrk_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	200111ac 	.word	0x200111ac

080080f0 <__sread>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	460c      	mov	r4, r1
 80080f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f8:	f001 fb5a 	bl	80097b0 <_read_r>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	bfab      	itete	ge
 8008100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008102:	89a3      	ldrhlt	r3, [r4, #12]
 8008104:	181b      	addge	r3, r3, r0
 8008106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800810a:	bfac      	ite	ge
 800810c:	6563      	strge	r3, [r4, #84]	; 0x54
 800810e:	81a3      	strhlt	r3, [r4, #12]
 8008110:	bd10      	pop	{r4, pc}

08008112 <__swrite>:
 8008112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008116:	461f      	mov	r7, r3
 8008118:	898b      	ldrh	r3, [r1, #12]
 800811a:	05db      	lsls	r3, r3, #23
 800811c:	4605      	mov	r5, r0
 800811e:	460c      	mov	r4, r1
 8008120:	4616      	mov	r6, r2
 8008122:	d505      	bpl.n	8008130 <__swrite+0x1e>
 8008124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008128:	2302      	movs	r3, #2
 800812a:	2200      	movs	r2, #0
 800812c:	f000 ff88 	bl	8009040 <_lseek_r>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	4632      	mov	r2, r6
 800813e:	463b      	mov	r3, r7
 8008140:	4628      	mov	r0, r5
 8008142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008146:	f000 b817 	b.w	8008178 <_write_r>

0800814a <__sseek>:
 800814a:	b510      	push	{r4, lr}
 800814c:	460c      	mov	r4, r1
 800814e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008152:	f000 ff75 	bl	8009040 <_lseek_r>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	bf15      	itete	ne
 800815c:	6560      	strne	r0, [r4, #84]	; 0x54
 800815e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008166:	81a3      	strheq	r3, [r4, #12]
 8008168:	bf18      	it	ne
 800816a:	81a3      	strhne	r3, [r4, #12]
 800816c:	bd10      	pop	{r4, pc}

0800816e <__sclose>:
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	f000 b813 	b.w	800819c <_close_r>
	...

08008178 <_write_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d07      	ldr	r5, [pc, #28]	; (8008198 <_write_r+0x20>)
 800817c:	4604      	mov	r4, r0
 800817e:	4608      	mov	r0, r1
 8008180:	4611      	mov	r1, r2
 8008182:	2200      	movs	r2, #0
 8008184:	602a      	str	r2, [r5, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	f7f9 ff53 	bl	8002032 <_write>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_write_r+0x1e>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	b103      	cbz	r3, 8008196 <_write_r+0x1e>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	200111ac 	.word	0x200111ac

0800819c <_close_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d06      	ldr	r5, [pc, #24]	; (80081b8 <_close_r+0x1c>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	f7f9 ff5f 	bl	800206a <_close>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_close_r+0x1a>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_close_r+0x1a>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	200111ac 	.word	0x200111ac

080081bc <quorem>:
 80081bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	6903      	ldr	r3, [r0, #16]
 80081c2:	690c      	ldr	r4, [r1, #16]
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	4607      	mov	r7, r0
 80081c8:	f2c0 8081 	blt.w	80082ce <quorem+0x112>
 80081cc:	3c01      	subs	r4, #1
 80081ce:	f101 0814 	add.w	r8, r1, #20
 80081d2:	f100 0514 	add.w	r5, r0, #20
 80081d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e4:	3301      	adds	r3, #1
 80081e6:	429a      	cmp	r2, r3
 80081e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80081f4:	d331      	bcc.n	800825a <quorem+0x9e>
 80081f6:	f04f 0e00 	mov.w	lr, #0
 80081fa:	4640      	mov	r0, r8
 80081fc:	46ac      	mov	ip, r5
 80081fe:	46f2      	mov	sl, lr
 8008200:	f850 2b04 	ldr.w	r2, [r0], #4
 8008204:	b293      	uxth	r3, r2
 8008206:	fb06 e303 	mla	r3, r6, r3, lr
 800820a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800820e:	b29b      	uxth	r3, r3
 8008210:	ebaa 0303 	sub.w	r3, sl, r3
 8008214:	f8dc a000 	ldr.w	sl, [ip]
 8008218:	0c12      	lsrs	r2, r2, #16
 800821a:	fa13 f38a 	uxtah	r3, r3, sl
 800821e:	fb06 e202 	mla	r2, r6, r2, lr
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	9b00      	ldr	r3, [sp, #0]
 8008226:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800822a:	b292      	uxth	r2, r2
 800822c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008234:	f8bd 3000 	ldrh.w	r3, [sp]
 8008238:	4581      	cmp	r9, r0
 800823a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800823e:	f84c 3b04 	str.w	r3, [ip], #4
 8008242:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008246:	d2db      	bcs.n	8008200 <quorem+0x44>
 8008248:	f855 300b 	ldr.w	r3, [r5, fp]
 800824c:	b92b      	cbnz	r3, 800825a <quorem+0x9e>
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	3b04      	subs	r3, #4
 8008252:	429d      	cmp	r5, r3
 8008254:	461a      	mov	r2, r3
 8008256:	d32e      	bcc.n	80082b6 <quorem+0xfa>
 8008258:	613c      	str	r4, [r7, #16]
 800825a:	4638      	mov	r0, r7
 800825c:	f001 f990 	bl	8009580 <__mcmp>
 8008260:	2800      	cmp	r0, #0
 8008262:	db24      	blt.n	80082ae <quorem+0xf2>
 8008264:	3601      	adds	r6, #1
 8008266:	4628      	mov	r0, r5
 8008268:	f04f 0c00 	mov.w	ip, #0
 800826c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008270:	f8d0 e000 	ldr.w	lr, [r0]
 8008274:	b293      	uxth	r3, r2
 8008276:	ebac 0303 	sub.w	r3, ip, r3
 800827a:	0c12      	lsrs	r2, r2, #16
 800827c:	fa13 f38e 	uxtah	r3, r3, lr
 8008280:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008288:	b29b      	uxth	r3, r3
 800828a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800828e:	45c1      	cmp	r9, r8
 8008290:	f840 3b04 	str.w	r3, [r0], #4
 8008294:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008298:	d2e8      	bcs.n	800826c <quorem+0xb0>
 800829a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800829e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082a2:	b922      	cbnz	r2, 80082ae <quorem+0xf2>
 80082a4:	3b04      	subs	r3, #4
 80082a6:	429d      	cmp	r5, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	d30a      	bcc.n	80082c2 <quorem+0x106>
 80082ac:	613c      	str	r4, [r7, #16]
 80082ae:	4630      	mov	r0, r6
 80082b0:	b003      	add	sp, #12
 80082b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	3b04      	subs	r3, #4
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	d1cc      	bne.n	8008258 <quorem+0x9c>
 80082be:	3c01      	subs	r4, #1
 80082c0:	e7c7      	b.n	8008252 <quorem+0x96>
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	3b04      	subs	r3, #4
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	d1f0      	bne.n	80082ac <quorem+0xf0>
 80082ca:	3c01      	subs	r4, #1
 80082cc:	e7eb      	b.n	80082a6 <quorem+0xea>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e7ee      	b.n	80082b0 <quorem+0xf4>
 80082d2:	0000      	movs	r0, r0
 80082d4:	0000      	movs	r0, r0
	...

080082d8 <_dtoa_r>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	ed2d 8b04 	vpush	{d8-d9}
 80082e0:	ec57 6b10 	vmov	r6, r7, d0
 80082e4:	b093      	sub	sp, #76	; 0x4c
 80082e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082ec:	9106      	str	r1, [sp, #24]
 80082ee:	ee10 aa10 	vmov	sl, s0
 80082f2:	4604      	mov	r4, r0
 80082f4:	9209      	str	r2, [sp, #36]	; 0x24
 80082f6:	930c      	str	r3, [sp, #48]	; 0x30
 80082f8:	46bb      	mov	fp, r7
 80082fa:	b975      	cbnz	r5, 800831a <_dtoa_r+0x42>
 80082fc:	2010      	movs	r0, #16
 80082fe:	f7ff f90d 	bl	800751c <malloc>
 8008302:	4602      	mov	r2, r0
 8008304:	6260      	str	r0, [r4, #36]	; 0x24
 8008306:	b920      	cbnz	r0, 8008312 <_dtoa_r+0x3a>
 8008308:	4ba7      	ldr	r3, [pc, #668]	; (80085a8 <_dtoa_r+0x2d0>)
 800830a:	21ea      	movs	r1, #234	; 0xea
 800830c:	48a7      	ldr	r0, [pc, #668]	; (80085ac <_dtoa_r+0x2d4>)
 800830e:	f001 fa61 	bl	80097d4 <__assert_func>
 8008312:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008316:	6005      	str	r5, [r0, #0]
 8008318:	60c5      	str	r5, [r0, #12]
 800831a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800831c:	6819      	ldr	r1, [r3, #0]
 800831e:	b151      	cbz	r1, 8008336 <_dtoa_r+0x5e>
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	604a      	str	r2, [r1, #4]
 8008324:	2301      	movs	r3, #1
 8008326:	4093      	lsls	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
 800832a:	4620      	mov	r0, r4
 800832c:	f000 fee6 	bl	80090fc <_Bfree>
 8008330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	1e3b      	subs	r3, r7, #0
 8008338:	bfaa      	itet	ge
 800833a:	2300      	movge	r3, #0
 800833c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008340:	f8c8 3000 	strge.w	r3, [r8]
 8008344:	4b9a      	ldr	r3, [pc, #616]	; (80085b0 <_dtoa_r+0x2d8>)
 8008346:	bfbc      	itt	lt
 8008348:	2201      	movlt	r2, #1
 800834a:	f8c8 2000 	strlt.w	r2, [r8]
 800834e:	ea33 030b 	bics.w	r3, r3, fp
 8008352:	d11b      	bne.n	800838c <_dtoa_r+0xb4>
 8008354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008356:	f242 730f 	movw	r3, #9999	; 0x270f
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008360:	4333      	orrs	r3, r6
 8008362:	f000 8592 	beq.w	8008e8a <_dtoa_r+0xbb2>
 8008366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008368:	b963      	cbnz	r3, 8008384 <_dtoa_r+0xac>
 800836a:	4b92      	ldr	r3, [pc, #584]	; (80085b4 <_dtoa_r+0x2dc>)
 800836c:	e022      	b.n	80083b4 <_dtoa_r+0xdc>
 800836e:	4b92      	ldr	r3, [pc, #584]	; (80085b8 <_dtoa_r+0x2e0>)
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	3308      	adds	r3, #8
 8008374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	9801      	ldr	r0, [sp, #4]
 800837a:	b013      	add	sp, #76	; 0x4c
 800837c:	ecbd 8b04 	vpop	{d8-d9}
 8008380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	4b8b      	ldr	r3, [pc, #556]	; (80085b4 <_dtoa_r+0x2dc>)
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	3303      	adds	r3, #3
 800838a:	e7f3      	b.n	8008374 <_dtoa_r+0x9c>
 800838c:	2200      	movs	r2, #0
 800838e:	2300      	movs	r3, #0
 8008390:	4650      	mov	r0, sl
 8008392:	4659      	mov	r1, fp
 8008394:	f7f8 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008398:	ec4b ab19 	vmov	d9, sl, fp
 800839c:	4680      	mov	r8, r0
 800839e:	b158      	cbz	r0, 80083b8 <_dtoa_r+0xe0>
 80083a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083a2:	2301      	movs	r3, #1
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 856b 	beq.w	8008e84 <_dtoa_r+0xbac>
 80083ae:	4883      	ldr	r0, [pc, #524]	; (80085bc <_dtoa_r+0x2e4>)
 80083b0:	6018      	str	r0, [r3, #0]
 80083b2:	1e43      	subs	r3, r0, #1
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	e7df      	b.n	8008378 <_dtoa_r+0xa0>
 80083b8:	ec4b ab10 	vmov	d0, sl, fp
 80083bc:	aa10      	add	r2, sp, #64	; 0x40
 80083be:	a911      	add	r1, sp, #68	; 0x44
 80083c0:	4620      	mov	r0, r4
 80083c2:	f001 f983 	bl	80096cc <__d2b>
 80083c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083ca:	ee08 0a10 	vmov	s16, r0
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	f000 8084 	beq.w	80084dc <_dtoa_r+0x204>
 80083d4:	ee19 3a90 	vmov	r3, s19
 80083d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083e0:	4656      	mov	r6, sl
 80083e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083ee:	4b74      	ldr	r3, [pc, #464]	; (80085c0 <_dtoa_r+0x2e8>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f7 ff4f 	bl	8000298 <__aeabi_dsub>
 80083fa:	a365      	add	r3, pc, #404	; (adr r3, 8008590 <_dtoa_r+0x2b8>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f8 f902 	bl	8000608 <__aeabi_dmul>
 8008404:	a364      	add	r3, pc, #400	; (adr r3, 8008598 <_dtoa_r+0x2c0>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	f7f7 ff47 	bl	800029c <__adddf3>
 800840e:	4606      	mov	r6, r0
 8008410:	4628      	mov	r0, r5
 8008412:	460f      	mov	r7, r1
 8008414:	f7f8 f88e 	bl	8000534 <__aeabi_i2d>
 8008418:	a361      	add	r3, pc, #388	; (adr r3, 80085a0 <_dtoa_r+0x2c8>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f7f8 f8f3 	bl	8000608 <__aeabi_dmul>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	4630      	mov	r0, r6
 8008428:	4639      	mov	r1, r7
 800842a:	f7f7 ff37 	bl	800029c <__adddf3>
 800842e:	4606      	mov	r6, r0
 8008430:	460f      	mov	r7, r1
 8008432:	f7f8 fb99 	bl	8000b68 <__aeabi_d2iz>
 8008436:	2200      	movs	r2, #0
 8008438:	9000      	str	r0, [sp, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 fb54 	bl	8000aec <__aeabi_dcmplt>
 8008444:	b150      	cbz	r0, 800845c <_dtoa_r+0x184>
 8008446:	9800      	ldr	r0, [sp, #0]
 8008448:	f7f8 f874 	bl	8000534 <__aeabi_i2d>
 800844c:	4632      	mov	r2, r6
 800844e:	463b      	mov	r3, r7
 8008450:	f7f8 fb42 	bl	8000ad8 <__aeabi_dcmpeq>
 8008454:	b910      	cbnz	r0, 800845c <_dtoa_r+0x184>
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	3b01      	subs	r3, #1
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	9b00      	ldr	r3, [sp, #0]
 800845e:	2b16      	cmp	r3, #22
 8008460:	d85a      	bhi.n	8008518 <_dtoa_r+0x240>
 8008462:	9a00      	ldr	r2, [sp, #0]
 8008464:	4b57      	ldr	r3, [pc, #348]	; (80085c4 <_dtoa_r+0x2ec>)
 8008466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	ec51 0b19 	vmov	r0, r1, d9
 8008472:	f7f8 fb3b 	bl	8000aec <__aeabi_dcmplt>
 8008476:	2800      	cmp	r0, #0
 8008478:	d050      	beq.n	800851c <_dtoa_r+0x244>
 800847a:	9b00      	ldr	r3, [sp, #0]
 800847c:	3b01      	subs	r3, #1
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2300      	movs	r3, #0
 8008482:	930b      	str	r3, [sp, #44]	; 0x2c
 8008484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008486:	1b5d      	subs	r5, r3, r5
 8008488:	1e6b      	subs	r3, r5, #1
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	bf45      	ittet	mi
 800848e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008492:	9304      	strmi	r3, [sp, #16]
 8008494:	2300      	movpl	r3, #0
 8008496:	2300      	movmi	r3, #0
 8008498:	bf4c      	ite	mi
 800849a:	9305      	strmi	r3, [sp, #20]
 800849c:	9304      	strpl	r3, [sp, #16]
 800849e:	9b00      	ldr	r3, [sp, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db3d      	blt.n	8008520 <_dtoa_r+0x248>
 80084a4:	9b05      	ldr	r3, [sp, #20]
 80084a6:	9a00      	ldr	r2, [sp, #0]
 80084a8:	920a      	str	r2, [sp, #40]	; 0x28
 80084aa:	4413      	add	r3, r2
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	2300      	movs	r3, #0
 80084b0:	9307      	str	r3, [sp, #28]
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	2b09      	cmp	r3, #9
 80084b6:	f200 8089 	bhi.w	80085cc <_dtoa_r+0x2f4>
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	bfc4      	itt	gt
 80084be:	3b04      	subgt	r3, #4
 80084c0:	9306      	strgt	r3, [sp, #24]
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	f1a3 0302 	sub.w	r3, r3, #2
 80084c8:	bfcc      	ite	gt
 80084ca:	2500      	movgt	r5, #0
 80084cc:	2501      	movle	r5, #1
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	f200 8087 	bhi.w	80085e2 <_dtoa_r+0x30a>
 80084d4:	e8df f003 	tbb	[pc, r3]
 80084d8:	59383a2d 	.word	0x59383a2d
 80084dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084e0:	441d      	add	r5, r3
 80084e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	bfc1      	itttt	gt
 80084ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80084f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084fa:	bfda      	itte	le
 80084fc:	f1c3 0320 	rsble	r3, r3, #32
 8008500:	fa06 f003 	lslle.w	r0, r6, r3
 8008504:	4318      	orrgt	r0, r3
 8008506:	f7f8 f805 	bl	8000514 <__aeabi_ui2d>
 800850a:	2301      	movs	r3, #1
 800850c:	4606      	mov	r6, r0
 800850e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008512:	3d01      	subs	r5, #1
 8008514:	930e      	str	r3, [sp, #56]	; 0x38
 8008516:	e76a      	b.n	80083ee <_dtoa_r+0x116>
 8008518:	2301      	movs	r3, #1
 800851a:	e7b2      	b.n	8008482 <_dtoa_r+0x1aa>
 800851c:	900b      	str	r0, [sp, #44]	; 0x2c
 800851e:	e7b1      	b.n	8008484 <_dtoa_r+0x1ac>
 8008520:	9b04      	ldr	r3, [sp, #16]
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	4253      	negs	r3, r2
 800852a:	9307      	str	r3, [sp, #28]
 800852c:	2300      	movs	r3, #0
 800852e:	930a      	str	r3, [sp, #40]	; 0x28
 8008530:	e7bf      	b.n	80084b2 <_dtoa_r+0x1da>
 8008532:	2300      	movs	r3, #0
 8008534:	9308      	str	r3, [sp, #32]
 8008536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008538:	2b00      	cmp	r3, #0
 800853a:	dc55      	bgt.n	80085e8 <_dtoa_r+0x310>
 800853c:	2301      	movs	r3, #1
 800853e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008542:	461a      	mov	r2, r3
 8008544:	9209      	str	r2, [sp, #36]	; 0x24
 8008546:	e00c      	b.n	8008562 <_dtoa_r+0x28a>
 8008548:	2301      	movs	r3, #1
 800854a:	e7f3      	b.n	8008534 <_dtoa_r+0x25c>
 800854c:	2300      	movs	r3, #0
 800854e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008550:	9308      	str	r3, [sp, #32]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	4413      	add	r3, r2
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	3301      	adds	r3, #1
 800855a:	2b01      	cmp	r3, #1
 800855c:	9303      	str	r3, [sp, #12]
 800855e:	bfb8      	it	lt
 8008560:	2301      	movlt	r3, #1
 8008562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008564:	2200      	movs	r2, #0
 8008566:	6042      	str	r2, [r0, #4]
 8008568:	2204      	movs	r2, #4
 800856a:	f102 0614 	add.w	r6, r2, #20
 800856e:	429e      	cmp	r6, r3
 8008570:	6841      	ldr	r1, [r0, #4]
 8008572:	d93d      	bls.n	80085f0 <_dtoa_r+0x318>
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fd81 	bl	800907c <_Balloc>
 800857a:	9001      	str	r0, [sp, #4]
 800857c:	2800      	cmp	r0, #0
 800857e:	d13b      	bne.n	80085f8 <_dtoa_r+0x320>
 8008580:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <_dtoa_r+0x2f0>)
 8008582:	4602      	mov	r2, r0
 8008584:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008588:	e6c0      	b.n	800830c <_dtoa_r+0x34>
 800858a:	2301      	movs	r3, #1
 800858c:	e7df      	b.n	800854e <_dtoa_r+0x276>
 800858e:	bf00      	nop
 8008590:	636f4361 	.word	0x636f4361
 8008594:	3fd287a7 	.word	0x3fd287a7
 8008598:	8b60c8b3 	.word	0x8b60c8b3
 800859c:	3fc68a28 	.word	0x3fc68a28
 80085a0:	509f79fb 	.word	0x509f79fb
 80085a4:	3fd34413 	.word	0x3fd34413
 80085a8:	0800a0dd 	.word	0x0800a0dd
 80085ac:	0800a0f4 	.word	0x0800a0f4
 80085b0:	7ff00000 	.word	0x7ff00000
 80085b4:	0800a0d9 	.word	0x0800a0d9
 80085b8:	0800a0d0 	.word	0x0800a0d0
 80085bc:	0800a0ad 	.word	0x0800a0ad
 80085c0:	3ff80000 	.word	0x3ff80000
 80085c4:	0800a1e8 	.word	0x0800a1e8
 80085c8:	0800a14f 	.word	0x0800a14f
 80085cc:	2501      	movs	r5, #1
 80085ce:	2300      	movs	r3, #0
 80085d0:	9306      	str	r3, [sp, #24]
 80085d2:	9508      	str	r5, [sp, #32]
 80085d4:	f04f 33ff 	mov.w	r3, #4294967295
 80085d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	2312      	movs	r3, #18
 80085e0:	e7b0      	b.n	8008544 <_dtoa_r+0x26c>
 80085e2:	2301      	movs	r3, #1
 80085e4:	9308      	str	r3, [sp, #32]
 80085e6:	e7f5      	b.n	80085d4 <_dtoa_r+0x2fc>
 80085e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ee:	e7b8      	b.n	8008562 <_dtoa_r+0x28a>
 80085f0:	3101      	adds	r1, #1
 80085f2:	6041      	str	r1, [r0, #4]
 80085f4:	0052      	lsls	r2, r2, #1
 80085f6:	e7b8      	b.n	800856a <_dtoa_r+0x292>
 80085f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085fa:	9a01      	ldr	r2, [sp, #4]
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	2b0e      	cmp	r3, #14
 8008602:	f200 809d 	bhi.w	8008740 <_dtoa_r+0x468>
 8008606:	2d00      	cmp	r5, #0
 8008608:	f000 809a 	beq.w	8008740 <_dtoa_r+0x468>
 800860c:	9b00      	ldr	r3, [sp, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	dd32      	ble.n	8008678 <_dtoa_r+0x3a0>
 8008612:	4ab7      	ldr	r2, [pc, #732]	; (80088f0 <_dtoa_r+0x618>)
 8008614:	f003 030f 	and.w	r3, r3, #15
 8008618:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800861c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	05d8      	lsls	r0, r3, #23
 8008624:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008628:	d516      	bpl.n	8008658 <_dtoa_r+0x380>
 800862a:	4bb2      	ldr	r3, [pc, #712]	; (80088f4 <_dtoa_r+0x61c>)
 800862c:	ec51 0b19 	vmov	r0, r1, d9
 8008630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008634:	f7f8 f912 	bl	800085c <__aeabi_ddiv>
 8008638:	f007 070f 	and.w	r7, r7, #15
 800863c:	4682      	mov	sl, r0
 800863e:	468b      	mov	fp, r1
 8008640:	2503      	movs	r5, #3
 8008642:	4eac      	ldr	r6, [pc, #688]	; (80088f4 <_dtoa_r+0x61c>)
 8008644:	b957      	cbnz	r7, 800865c <_dtoa_r+0x384>
 8008646:	4642      	mov	r2, r8
 8008648:	464b      	mov	r3, r9
 800864a:	4650      	mov	r0, sl
 800864c:	4659      	mov	r1, fp
 800864e:	f7f8 f905 	bl	800085c <__aeabi_ddiv>
 8008652:	4682      	mov	sl, r0
 8008654:	468b      	mov	fp, r1
 8008656:	e028      	b.n	80086aa <_dtoa_r+0x3d2>
 8008658:	2502      	movs	r5, #2
 800865a:	e7f2      	b.n	8008642 <_dtoa_r+0x36a>
 800865c:	07f9      	lsls	r1, r7, #31
 800865e:	d508      	bpl.n	8008672 <_dtoa_r+0x39a>
 8008660:	4640      	mov	r0, r8
 8008662:	4649      	mov	r1, r9
 8008664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008668:	f7f7 ffce 	bl	8000608 <__aeabi_dmul>
 800866c:	3501      	adds	r5, #1
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	107f      	asrs	r7, r7, #1
 8008674:	3608      	adds	r6, #8
 8008676:	e7e5      	b.n	8008644 <_dtoa_r+0x36c>
 8008678:	f000 809b 	beq.w	80087b2 <_dtoa_r+0x4da>
 800867c:	9b00      	ldr	r3, [sp, #0]
 800867e:	4f9d      	ldr	r7, [pc, #628]	; (80088f4 <_dtoa_r+0x61c>)
 8008680:	425e      	negs	r6, r3
 8008682:	4b9b      	ldr	r3, [pc, #620]	; (80088f0 <_dtoa_r+0x618>)
 8008684:	f006 020f 	and.w	r2, r6, #15
 8008688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	ec51 0b19 	vmov	r0, r1, d9
 8008694:	f7f7 ffb8 	bl	8000608 <__aeabi_dmul>
 8008698:	1136      	asrs	r6, r6, #4
 800869a:	4682      	mov	sl, r0
 800869c:	468b      	mov	fp, r1
 800869e:	2300      	movs	r3, #0
 80086a0:	2502      	movs	r5, #2
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	d17a      	bne.n	800879c <_dtoa_r+0x4c4>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1d3      	bne.n	8008652 <_dtoa_r+0x37a>
 80086aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8082 	beq.w	80087b6 <_dtoa_r+0x4de>
 80086b2:	4b91      	ldr	r3, [pc, #580]	; (80088f8 <_dtoa_r+0x620>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4650      	mov	r0, sl
 80086b8:	4659      	mov	r1, fp
 80086ba:	f7f8 fa17 	bl	8000aec <__aeabi_dcmplt>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d079      	beq.n	80087b6 <_dtoa_r+0x4de>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d076      	beq.n	80087b6 <_dtoa_r+0x4de>
 80086c8:	9b02      	ldr	r3, [sp, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dd36      	ble.n	800873c <_dtoa_r+0x464>
 80086ce:	9b00      	ldr	r3, [sp, #0]
 80086d0:	4650      	mov	r0, sl
 80086d2:	4659      	mov	r1, fp
 80086d4:	1e5f      	subs	r7, r3, #1
 80086d6:	2200      	movs	r2, #0
 80086d8:	4b88      	ldr	r3, [pc, #544]	; (80088fc <_dtoa_r+0x624>)
 80086da:	f7f7 ff95 	bl	8000608 <__aeabi_dmul>
 80086de:	9e02      	ldr	r6, [sp, #8]
 80086e0:	4682      	mov	sl, r0
 80086e2:	468b      	mov	fp, r1
 80086e4:	3501      	adds	r5, #1
 80086e6:	4628      	mov	r0, r5
 80086e8:	f7f7 ff24 	bl	8000534 <__aeabi_i2d>
 80086ec:	4652      	mov	r2, sl
 80086ee:	465b      	mov	r3, fp
 80086f0:	f7f7 ff8a 	bl	8000608 <__aeabi_dmul>
 80086f4:	4b82      	ldr	r3, [pc, #520]	; (8008900 <_dtoa_r+0x628>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	f7f7 fdd0 	bl	800029c <__adddf3>
 80086fc:	46d0      	mov	r8, sl
 80086fe:	46d9      	mov	r9, fp
 8008700:	4682      	mov	sl, r0
 8008702:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008706:	2e00      	cmp	r6, #0
 8008708:	d158      	bne.n	80087bc <_dtoa_r+0x4e4>
 800870a:	4b7e      	ldr	r3, [pc, #504]	; (8008904 <_dtoa_r+0x62c>)
 800870c:	2200      	movs	r2, #0
 800870e:	4640      	mov	r0, r8
 8008710:	4649      	mov	r1, r9
 8008712:	f7f7 fdc1 	bl	8000298 <__aeabi_dsub>
 8008716:	4652      	mov	r2, sl
 8008718:	465b      	mov	r3, fp
 800871a:	4680      	mov	r8, r0
 800871c:	4689      	mov	r9, r1
 800871e:	f7f8 fa03 	bl	8000b28 <__aeabi_dcmpgt>
 8008722:	2800      	cmp	r0, #0
 8008724:	f040 8295 	bne.w	8008c52 <_dtoa_r+0x97a>
 8008728:	4652      	mov	r2, sl
 800872a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800872e:	4640      	mov	r0, r8
 8008730:	4649      	mov	r1, r9
 8008732:	f7f8 f9db 	bl	8000aec <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f040 8289 	bne.w	8008c4e <_dtoa_r+0x976>
 800873c:	ec5b ab19 	vmov	sl, fp, d9
 8008740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008742:	2b00      	cmp	r3, #0
 8008744:	f2c0 8148 	blt.w	80089d8 <_dtoa_r+0x700>
 8008748:	9a00      	ldr	r2, [sp, #0]
 800874a:	2a0e      	cmp	r2, #14
 800874c:	f300 8144 	bgt.w	80089d8 <_dtoa_r+0x700>
 8008750:	4b67      	ldr	r3, [pc, #412]	; (80088f0 <_dtoa_r+0x618>)
 8008752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008756:	e9d3 8900 	ldrd	r8, r9, [r3]
 800875a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	f280 80d5 	bge.w	800890c <_dtoa_r+0x634>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f300 80d1 	bgt.w	800890c <_dtoa_r+0x634>
 800876a:	f040 826f 	bne.w	8008c4c <_dtoa_r+0x974>
 800876e:	4b65      	ldr	r3, [pc, #404]	; (8008904 <_dtoa_r+0x62c>)
 8008770:	2200      	movs	r2, #0
 8008772:	4640      	mov	r0, r8
 8008774:	4649      	mov	r1, r9
 8008776:	f7f7 ff47 	bl	8000608 <__aeabi_dmul>
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	f7f8 f9c9 	bl	8000b14 <__aeabi_dcmpge>
 8008782:	9e03      	ldr	r6, [sp, #12]
 8008784:	4637      	mov	r7, r6
 8008786:	2800      	cmp	r0, #0
 8008788:	f040 8245 	bne.w	8008c16 <_dtoa_r+0x93e>
 800878c:	9d01      	ldr	r5, [sp, #4]
 800878e:	2331      	movs	r3, #49	; 0x31
 8008790:	f805 3b01 	strb.w	r3, [r5], #1
 8008794:	9b00      	ldr	r3, [sp, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	e240      	b.n	8008c1e <_dtoa_r+0x946>
 800879c:	07f2      	lsls	r2, r6, #31
 800879e:	d505      	bpl.n	80087ac <_dtoa_r+0x4d4>
 80087a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a4:	f7f7 ff30 	bl	8000608 <__aeabi_dmul>
 80087a8:	3501      	adds	r5, #1
 80087aa:	2301      	movs	r3, #1
 80087ac:	1076      	asrs	r6, r6, #1
 80087ae:	3708      	adds	r7, #8
 80087b0:	e777      	b.n	80086a2 <_dtoa_r+0x3ca>
 80087b2:	2502      	movs	r5, #2
 80087b4:	e779      	b.n	80086aa <_dtoa_r+0x3d2>
 80087b6:	9f00      	ldr	r7, [sp, #0]
 80087b8:	9e03      	ldr	r6, [sp, #12]
 80087ba:	e794      	b.n	80086e6 <_dtoa_r+0x40e>
 80087bc:	9901      	ldr	r1, [sp, #4]
 80087be:	4b4c      	ldr	r3, [pc, #304]	; (80088f0 <_dtoa_r+0x618>)
 80087c0:	4431      	add	r1, r6
 80087c2:	910d      	str	r1, [sp, #52]	; 0x34
 80087c4:	9908      	ldr	r1, [sp, #32]
 80087c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087ce:	2900      	cmp	r1, #0
 80087d0:	d043      	beq.n	800885a <_dtoa_r+0x582>
 80087d2:	494d      	ldr	r1, [pc, #308]	; (8008908 <_dtoa_r+0x630>)
 80087d4:	2000      	movs	r0, #0
 80087d6:	f7f8 f841 	bl	800085c <__aeabi_ddiv>
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	f7f7 fd5b 	bl	8000298 <__aeabi_dsub>
 80087e2:	9d01      	ldr	r5, [sp, #4]
 80087e4:	4682      	mov	sl, r0
 80087e6:	468b      	mov	fp, r1
 80087e8:	4649      	mov	r1, r9
 80087ea:	4640      	mov	r0, r8
 80087ec:	f7f8 f9bc 	bl	8000b68 <__aeabi_d2iz>
 80087f0:	4606      	mov	r6, r0
 80087f2:	f7f7 fe9f 	bl	8000534 <__aeabi_i2d>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4640      	mov	r0, r8
 80087fc:	4649      	mov	r1, r9
 80087fe:	f7f7 fd4b 	bl	8000298 <__aeabi_dsub>
 8008802:	3630      	adds	r6, #48	; 0x30
 8008804:	f805 6b01 	strb.w	r6, [r5], #1
 8008808:	4652      	mov	r2, sl
 800880a:	465b      	mov	r3, fp
 800880c:	4680      	mov	r8, r0
 800880e:	4689      	mov	r9, r1
 8008810:	f7f8 f96c 	bl	8000aec <__aeabi_dcmplt>
 8008814:	2800      	cmp	r0, #0
 8008816:	d163      	bne.n	80088e0 <_dtoa_r+0x608>
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	4936      	ldr	r1, [pc, #216]	; (80088f8 <_dtoa_r+0x620>)
 800881e:	2000      	movs	r0, #0
 8008820:	f7f7 fd3a 	bl	8000298 <__aeabi_dsub>
 8008824:	4652      	mov	r2, sl
 8008826:	465b      	mov	r3, fp
 8008828:	f7f8 f960 	bl	8000aec <__aeabi_dcmplt>
 800882c:	2800      	cmp	r0, #0
 800882e:	f040 80b5 	bne.w	800899c <_dtoa_r+0x6c4>
 8008832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008834:	429d      	cmp	r5, r3
 8008836:	d081      	beq.n	800873c <_dtoa_r+0x464>
 8008838:	4b30      	ldr	r3, [pc, #192]	; (80088fc <_dtoa_r+0x624>)
 800883a:	2200      	movs	r2, #0
 800883c:	4650      	mov	r0, sl
 800883e:	4659      	mov	r1, fp
 8008840:	f7f7 fee2 	bl	8000608 <__aeabi_dmul>
 8008844:	4b2d      	ldr	r3, [pc, #180]	; (80088fc <_dtoa_r+0x624>)
 8008846:	4682      	mov	sl, r0
 8008848:	468b      	mov	fp, r1
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	2200      	movs	r2, #0
 8008850:	f7f7 feda 	bl	8000608 <__aeabi_dmul>
 8008854:	4680      	mov	r8, r0
 8008856:	4689      	mov	r9, r1
 8008858:	e7c6      	b.n	80087e8 <_dtoa_r+0x510>
 800885a:	4650      	mov	r0, sl
 800885c:	4659      	mov	r1, fp
 800885e:	f7f7 fed3 	bl	8000608 <__aeabi_dmul>
 8008862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008864:	9d01      	ldr	r5, [sp, #4]
 8008866:	930f      	str	r3, [sp, #60]	; 0x3c
 8008868:	4682      	mov	sl, r0
 800886a:	468b      	mov	fp, r1
 800886c:	4649      	mov	r1, r9
 800886e:	4640      	mov	r0, r8
 8008870:	f7f8 f97a 	bl	8000b68 <__aeabi_d2iz>
 8008874:	4606      	mov	r6, r0
 8008876:	f7f7 fe5d 	bl	8000534 <__aeabi_i2d>
 800887a:	3630      	adds	r6, #48	; 0x30
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4640      	mov	r0, r8
 8008882:	4649      	mov	r1, r9
 8008884:	f7f7 fd08 	bl	8000298 <__aeabi_dsub>
 8008888:	f805 6b01 	strb.w	r6, [r5], #1
 800888c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800888e:	429d      	cmp	r5, r3
 8008890:	4680      	mov	r8, r0
 8008892:	4689      	mov	r9, r1
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	d124      	bne.n	80088e4 <_dtoa_r+0x60c>
 800889a:	4b1b      	ldr	r3, [pc, #108]	; (8008908 <_dtoa_r+0x630>)
 800889c:	4650      	mov	r0, sl
 800889e:	4659      	mov	r1, fp
 80088a0:	f7f7 fcfc 	bl	800029c <__adddf3>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4640      	mov	r0, r8
 80088aa:	4649      	mov	r1, r9
 80088ac:	f7f8 f93c 	bl	8000b28 <__aeabi_dcmpgt>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d173      	bne.n	800899c <_dtoa_r+0x6c4>
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	4913      	ldr	r1, [pc, #76]	; (8008908 <_dtoa_r+0x630>)
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 fcec 	bl	8000298 <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7f8 f910 	bl	8000aec <__aeabi_dcmplt>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f43f af35 	beq.w	800873c <_dtoa_r+0x464>
 80088d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088d4:	1e6b      	subs	r3, r5, #1
 80088d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088dc:	2b30      	cmp	r3, #48	; 0x30
 80088de:	d0f8      	beq.n	80088d2 <_dtoa_r+0x5fa>
 80088e0:	9700      	str	r7, [sp, #0]
 80088e2:	e049      	b.n	8008978 <_dtoa_r+0x6a0>
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <_dtoa_r+0x624>)
 80088e6:	f7f7 fe8f 	bl	8000608 <__aeabi_dmul>
 80088ea:	4680      	mov	r8, r0
 80088ec:	4689      	mov	r9, r1
 80088ee:	e7bd      	b.n	800886c <_dtoa_r+0x594>
 80088f0:	0800a1e8 	.word	0x0800a1e8
 80088f4:	0800a1c0 	.word	0x0800a1c0
 80088f8:	3ff00000 	.word	0x3ff00000
 80088fc:	40240000 	.word	0x40240000
 8008900:	401c0000 	.word	0x401c0000
 8008904:	40140000 	.word	0x40140000
 8008908:	3fe00000 	.word	0x3fe00000
 800890c:	9d01      	ldr	r5, [sp, #4]
 800890e:	4656      	mov	r6, sl
 8008910:	465f      	mov	r7, fp
 8008912:	4642      	mov	r2, r8
 8008914:	464b      	mov	r3, r9
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 ff9f 	bl	800085c <__aeabi_ddiv>
 800891e:	f7f8 f923 	bl	8000b68 <__aeabi_d2iz>
 8008922:	4682      	mov	sl, r0
 8008924:	f7f7 fe06 	bl	8000534 <__aeabi_i2d>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fe6c 	bl	8000608 <__aeabi_dmul>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800893c:	f7f7 fcac 	bl	8000298 <__aeabi_dsub>
 8008940:	f805 6b01 	strb.w	r6, [r5], #1
 8008944:	9e01      	ldr	r6, [sp, #4]
 8008946:	9f03      	ldr	r7, [sp, #12]
 8008948:	1bae      	subs	r6, r5, r6
 800894a:	42b7      	cmp	r7, r6
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	d135      	bne.n	80089be <_dtoa_r+0x6e6>
 8008952:	f7f7 fca3 	bl	800029c <__adddf3>
 8008956:	4642      	mov	r2, r8
 8008958:	464b      	mov	r3, r9
 800895a:	4606      	mov	r6, r0
 800895c:	460f      	mov	r7, r1
 800895e:	f7f8 f8e3 	bl	8000b28 <__aeabi_dcmpgt>
 8008962:	b9d0      	cbnz	r0, 800899a <_dtoa_r+0x6c2>
 8008964:	4642      	mov	r2, r8
 8008966:	464b      	mov	r3, r9
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f8 f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008970:	b110      	cbz	r0, 8008978 <_dtoa_r+0x6a0>
 8008972:	f01a 0f01 	tst.w	sl, #1
 8008976:	d110      	bne.n	800899a <_dtoa_r+0x6c2>
 8008978:	4620      	mov	r0, r4
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	f000 fbbd 	bl	80090fc <_Bfree>
 8008982:	2300      	movs	r3, #0
 8008984:	9800      	ldr	r0, [sp, #0]
 8008986:	702b      	strb	r3, [r5, #0]
 8008988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800898a:	3001      	adds	r0, #1
 800898c:	6018      	str	r0, [r3, #0]
 800898e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008990:	2b00      	cmp	r3, #0
 8008992:	f43f acf1 	beq.w	8008378 <_dtoa_r+0xa0>
 8008996:	601d      	str	r5, [r3, #0]
 8008998:	e4ee      	b.n	8008378 <_dtoa_r+0xa0>
 800899a:	9f00      	ldr	r7, [sp, #0]
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a39      	cmp	r2, #57	; 0x39
 80089a6:	d106      	bne.n	80089b6 <_dtoa_r+0x6de>
 80089a8:	9a01      	ldr	r2, [sp, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d1f7      	bne.n	800899e <_dtoa_r+0x6c6>
 80089ae:	9901      	ldr	r1, [sp, #4]
 80089b0:	2230      	movs	r2, #48	; 0x30
 80089b2:	3701      	adds	r7, #1
 80089b4:	700a      	strb	r2, [r1, #0]
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	3201      	adds	r2, #1
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e790      	b.n	80088e0 <_dtoa_r+0x608>
 80089be:	4ba6      	ldr	r3, [pc, #664]	; (8008c58 <_dtoa_r+0x980>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	f7f7 fe21 	bl	8000608 <__aeabi_dmul>
 80089c6:	2200      	movs	r2, #0
 80089c8:	2300      	movs	r3, #0
 80089ca:	4606      	mov	r6, r0
 80089cc:	460f      	mov	r7, r1
 80089ce:	f7f8 f883 	bl	8000ad8 <__aeabi_dcmpeq>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d09d      	beq.n	8008912 <_dtoa_r+0x63a>
 80089d6:	e7cf      	b.n	8008978 <_dtoa_r+0x6a0>
 80089d8:	9a08      	ldr	r2, [sp, #32]
 80089da:	2a00      	cmp	r2, #0
 80089dc:	f000 80d7 	beq.w	8008b8e <_dtoa_r+0x8b6>
 80089e0:	9a06      	ldr	r2, [sp, #24]
 80089e2:	2a01      	cmp	r2, #1
 80089e4:	f300 80ba 	bgt.w	8008b5c <_dtoa_r+0x884>
 80089e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	f000 80b2 	beq.w	8008b54 <_dtoa_r+0x87c>
 80089f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089f4:	9e07      	ldr	r6, [sp, #28]
 80089f6:	9d04      	ldr	r5, [sp, #16]
 80089f8:	9a04      	ldr	r2, [sp, #16]
 80089fa:	441a      	add	r2, r3
 80089fc:	9204      	str	r2, [sp, #16]
 80089fe:	9a05      	ldr	r2, [sp, #20]
 8008a00:	2101      	movs	r1, #1
 8008a02:	441a      	add	r2, r3
 8008a04:	4620      	mov	r0, r4
 8008a06:	9205      	str	r2, [sp, #20]
 8008a08:	f000 fc30 	bl	800926c <__i2b>
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	dd0c      	ble.n	8008a2c <_dtoa_r+0x754>
 8008a12:	9b05      	ldr	r3, [sp, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dd09      	ble.n	8008a2c <_dtoa_r+0x754>
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	9a04      	ldr	r2, [sp, #16]
 8008a1c:	bfa8      	it	ge
 8008a1e:	462b      	movge	r3, r5
 8008a20:	1ad2      	subs	r2, r2, r3
 8008a22:	9204      	str	r2, [sp, #16]
 8008a24:	9a05      	ldr	r2, [sp, #20]
 8008a26:	1aed      	subs	r5, r5, r3
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	9b07      	ldr	r3, [sp, #28]
 8008a2e:	b31b      	cbz	r3, 8008a78 <_dtoa_r+0x7a0>
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80af 	beq.w	8008b96 <_dtoa_r+0x8be>
 8008a38:	2e00      	cmp	r6, #0
 8008a3a:	dd13      	ble.n	8008a64 <_dtoa_r+0x78c>
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	4632      	mov	r2, r6
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fcd3 	bl	80093ec <__pow5mult>
 8008a46:	ee18 2a10 	vmov	r2, s16
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fc22 	bl	8009298 <__multiply>
 8008a54:	ee18 1a10 	vmov	r1, s16
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fb4e 	bl	80090fc <_Bfree>
 8008a60:	ee08 8a10 	vmov	s16, r8
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	1b9a      	subs	r2, r3, r6
 8008a68:	d006      	beq.n	8008a78 <_dtoa_r+0x7a0>
 8008a6a:	ee18 1a10 	vmov	r1, s16
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 fcbc 	bl	80093ec <__pow5mult>
 8008a74:	ee08 0a10 	vmov	s16, r0
 8008a78:	2101      	movs	r1, #1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fbf6 	bl	800926c <__i2b>
 8008a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	4606      	mov	r6, r0
 8008a86:	f340 8088 	ble.w	8008b9a <_dtoa_r+0x8c2>
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 fcac 	bl	80093ec <__pow5mult>
 8008a94:	9b06      	ldr	r3, [sp, #24]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	4606      	mov	r6, r0
 8008a9a:	f340 8081 	ble.w	8008ba0 <_dtoa_r+0x8c8>
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	6933      	ldr	r3, [r6, #16]
 8008aa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aa8:	6918      	ldr	r0, [r3, #16]
 8008aaa:	f000 fb8f 	bl	80091cc <__hi0bits>
 8008aae:	f1c0 0020 	rsb	r0, r0, #32
 8008ab2:	9b05      	ldr	r3, [sp, #20]
 8008ab4:	4418      	add	r0, r3
 8008ab6:	f010 001f 	ands.w	r0, r0, #31
 8008aba:	f000 8092 	beq.w	8008be2 <_dtoa_r+0x90a>
 8008abe:	f1c0 0320 	rsb	r3, r0, #32
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	f340 808a 	ble.w	8008bdc <_dtoa_r+0x904>
 8008ac8:	f1c0 001c 	rsb	r0, r0, #28
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	4403      	add	r3, r0
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	4403      	add	r3, r0
 8008ad6:	4405      	add	r5, r0
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd07      	ble.n	8008af0 <_dtoa_r+0x818>
 8008ae0:	ee18 1a10 	vmov	r1, s16
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 fcda 	bl	80094a0 <__lshift>
 8008aec:	ee08 0a10 	vmov	s16, r0
 8008af0:	9b05      	ldr	r3, [sp, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dd05      	ble.n	8008b02 <_dtoa_r+0x82a>
 8008af6:	4631      	mov	r1, r6
 8008af8:	461a      	mov	r2, r3
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fcd0 	bl	80094a0 <__lshift>
 8008b00:	4606      	mov	r6, r0
 8008b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d06e      	beq.n	8008be6 <_dtoa_r+0x90e>
 8008b08:	ee18 0a10 	vmov	r0, s16
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	f000 fd37 	bl	8009580 <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	da67      	bge.n	8008be6 <_dtoa_r+0x90e>
 8008b16:	9b00      	ldr	r3, [sp, #0]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	ee18 1a10 	vmov	r1, s16
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	220a      	movs	r2, #10
 8008b22:	2300      	movs	r3, #0
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fb0b 	bl	8009140 <__multadd>
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	ee08 0a10 	vmov	s16, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 81b1 	beq.w	8008e98 <_dtoa_r+0xbc0>
 8008b36:	2300      	movs	r3, #0
 8008b38:	4639      	mov	r1, r7
 8008b3a:	220a      	movs	r2, #10
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 faff 	bl	8009140 <__multadd>
 8008b42:	9b02      	ldr	r3, [sp, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	4607      	mov	r7, r0
 8008b48:	f300 808e 	bgt.w	8008c68 <_dtoa_r+0x990>
 8008b4c:	9b06      	ldr	r3, [sp, #24]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	dc51      	bgt.n	8008bf6 <_dtoa_r+0x91e>
 8008b52:	e089      	b.n	8008c68 <_dtoa_r+0x990>
 8008b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b5a:	e74b      	b.n	80089f4 <_dtoa_r+0x71c>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	1e5e      	subs	r6, r3, #1
 8008b60:	9b07      	ldr	r3, [sp, #28]
 8008b62:	42b3      	cmp	r3, r6
 8008b64:	bfbf      	itttt	lt
 8008b66:	9b07      	ldrlt	r3, [sp, #28]
 8008b68:	9607      	strlt	r6, [sp, #28]
 8008b6a:	1af2      	sublt	r2, r6, r3
 8008b6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b6e:	bfb6      	itet	lt
 8008b70:	189b      	addlt	r3, r3, r2
 8008b72:	1b9e      	subge	r6, r3, r6
 8008b74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	bfb8      	it	lt
 8008b7a:	2600      	movlt	r6, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfb7      	itett	lt
 8008b80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b88:	1a9d      	sublt	r5, r3, r2
 8008b8a:	2300      	movlt	r3, #0
 8008b8c:	e734      	b.n	80089f8 <_dtoa_r+0x720>
 8008b8e:	9e07      	ldr	r6, [sp, #28]
 8008b90:	9d04      	ldr	r5, [sp, #16]
 8008b92:	9f08      	ldr	r7, [sp, #32]
 8008b94:	e73b      	b.n	8008a0e <_dtoa_r+0x736>
 8008b96:	9a07      	ldr	r2, [sp, #28]
 8008b98:	e767      	b.n	8008a6a <_dtoa_r+0x792>
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	dc18      	bgt.n	8008bd2 <_dtoa_r+0x8fa>
 8008ba0:	f1ba 0f00 	cmp.w	sl, #0
 8008ba4:	d115      	bne.n	8008bd2 <_dtoa_r+0x8fa>
 8008ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008baa:	b993      	cbnz	r3, 8008bd2 <_dtoa_r+0x8fa>
 8008bac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bb0:	0d1b      	lsrs	r3, r3, #20
 8008bb2:	051b      	lsls	r3, r3, #20
 8008bb4:	b183      	cbz	r3, 8008bd8 <_dtoa_r+0x900>
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	9b05      	ldr	r3, [sp, #20]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	f04f 0801 	mov.w	r8, #1
 8008bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f47f af6a 	bne.w	8008aa2 <_dtoa_r+0x7ca>
 8008bce:	2001      	movs	r0, #1
 8008bd0:	e76f      	b.n	8008ab2 <_dtoa_r+0x7da>
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	e7f6      	b.n	8008bc6 <_dtoa_r+0x8ee>
 8008bd8:	4698      	mov	r8, r3
 8008bda:	e7f4      	b.n	8008bc6 <_dtoa_r+0x8ee>
 8008bdc:	f43f af7d 	beq.w	8008ada <_dtoa_r+0x802>
 8008be0:	4618      	mov	r0, r3
 8008be2:	301c      	adds	r0, #28
 8008be4:	e772      	b.n	8008acc <_dtoa_r+0x7f4>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc37      	bgt.n	8008c5c <_dtoa_r+0x984>
 8008bec:	9b06      	ldr	r3, [sp, #24]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	dd34      	ble.n	8008c5c <_dtoa_r+0x984>
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	9302      	str	r3, [sp, #8]
 8008bf6:	9b02      	ldr	r3, [sp, #8]
 8008bf8:	b96b      	cbnz	r3, 8008c16 <_dtoa_r+0x93e>
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	2205      	movs	r2, #5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 fa9e 	bl	8009140 <__multadd>
 8008c04:	4601      	mov	r1, r0
 8008c06:	4606      	mov	r6, r0
 8008c08:	ee18 0a10 	vmov	r0, s16
 8008c0c:	f000 fcb8 	bl	8009580 <__mcmp>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f73f adbb 	bgt.w	800878c <_dtoa_r+0x4b4>
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	9d01      	ldr	r5, [sp, #4]
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	f04f 0800 	mov.w	r8, #0
 8008c22:	4631      	mov	r1, r6
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 fa69 	bl	80090fc <_Bfree>
 8008c2a:	2f00      	cmp	r7, #0
 8008c2c:	f43f aea4 	beq.w	8008978 <_dtoa_r+0x6a0>
 8008c30:	f1b8 0f00 	cmp.w	r8, #0
 8008c34:	d005      	beq.n	8008c42 <_dtoa_r+0x96a>
 8008c36:	45b8      	cmp	r8, r7
 8008c38:	d003      	beq.n	8008c42 <_dtoa_r+0x96a>
 8008c3a:	4641      	mov	r1, r8
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fa5d 	bl	80090fc <_Bfree>
 8008c42:	4639      	mov	r1, r7
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fa59 	bl	80090fc <_Bfree>
 8008c4a:	e695      	b.n	8008978 <_dtoa_r+0x6a0>
 8008c4c:	2600      	movs	r6, #0
 8008c4e:	4637      	mov	r7, r6
 8008c50:	e7e1      	b.n	8008c16 <_dtoa_r+0x93e>
 8008c52:	9700      	str	r7, [sp, #0]
 8008c54:	4637      	mov	r7, r6
 8008c56:	e599      	b.n	800878c <_dtoa_r+0x4b4>
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	9b08      	ldr	r3, [sp, #32]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 80ca 	beq.w	8008df8 <_dtoa_r+0xb20>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	dd05      	ble.n	8008c78 <_dtoa_r+0x9a0>
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	462a      	mov	r2, r5
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fc15 	bl	80094a0 <__lshift>
 8008c76:	4607      	mov	r7, r0
 8008c78:	f1b8 0f00 	cmp.w	r8, #0
 8008c7c:	d05b      	beq.n	8008d36 <_dtoa_r+0xa5e>
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 f9fb 	bl	800907c <_Balloc>
 8008c86:	4605      	mov	r5, r0
 8008c88:	b928      	cbnz	r0, 8008c96 <_dtoa_r+0x9be>
 8008c8a:	4b87      	ldr	r3, [pc, #540]	; (8008ea8 <_dtoa_r+0xbd0>)
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c92:	f7ff bb3b 	b.w	800830c <_dtoa_r+0x34>
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	3202      	adds	r2, #2
 8008c9a:	0092      	lsls	r2, r2, #2
 8008c9c:	f107 010c 	add.w	r1, r7, #12
 8008ca0:	300c      	adds	r0, #12
 8008ca2:	f7fe fc4b 	bl	800753c <memcpy>
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fbf8 	bl	80094a0 <__lshift>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	f103 0901 	add.w	r9, r3, #1
 8008cb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	9305      	str	r3, [sp, #20]
 8008cbe:	f00a 0301 	and.w	r3, sl, #1
 8008cc2:	46b8      	mov	r8, r7
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	4631      	mov	r1, r6
 8008cca:	ee18 0a10 	vmov	r0, s16
 8008cce:	f7ff fa75 	bl	80081bc <quorem>
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	9002      	str	r0, [sp, #8]
 8008cd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cda:	ee18 0a10 	vmov	r0, s16
 8008cde:	f000 fc4f 	bl	8009580 <__mcmp>
 8008ce2:	463a      	mov	r2, r7
 8008ce4:	9003      	str	r0, [sp, #12]
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 fc65 	bl	80095b8 <__mdiff>
 8008cee:	68c2      	ldr	r2, [r0, #12]
 8008cf0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	bb02      	cbnz	r2, 8008d3a <_dtoa_r+0xa62>
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	ee18 0a10 	vmov	r0, s16
 8008cfe:	f000 fc3f 	bl	8009580 <__mcmp>
 8008d02:	4602      	mov	r2, r0
 8008d04:	4629      	mov	r1, r5
 8008d06:	4620      	mov	r0, r4
 8008d08:	9207      	str	r2, [sp, #28]
 8008d0a:	f000 f9f7 	bl	80090fc <_Bfree>
 8008d0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d12:	ea43 0102 	orr.w	r1, r3, r2
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	464d      	mov	r5, r9
 8008d1c:	d10f      	bne.n	8008d3e <_dtoa_r+0xa66>
 8008d1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d22:	d02a      	beq.n	8008d7a <_dtoa_r+0xaa2>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd02      	ble.n	8008d30 <_dtoa_r+0xa58>
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d30:	f88b a000 	strb.w	sl, [fp]
 8008d34:	e775      	b.n	8008c22 <_dtoa_r+0x94a>
 8008d36:	4638      	mov	r0, r7
 8008d38:	e7ba      	b.n	8008cb0 <_dtoa_r+0x9d8>
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	e7e2      	b.n	8008d04 <_dtoa_r+0xa2c>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	db04      	blt.n	8008d4e <_dtoa_r+0xa76>
 8008d44:	9906      	ldr	r1, [sp, #24]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	9904      	ldr	r1, [sp, #16]
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	d122      	bne.n	8008d94 <_dtoa_r+0xabc>
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	ddee      	ble.n	8008d30 <_dtoa_r+0xa58>
 8008d52:	ee18 1a10 	vmov	r1, s16
 8008d56:	2201      	movs	r2, #1
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fba1 	bl	80094a0 <__lshift>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	ee08 0a10 	vmov	s16, r0
 8008d64:	f000 fc0c 	bl	8009580 <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	dc03      	bgt.n	8008d74 <_dtoa_r+0xa9c>
 8008d6c:	d1e0      	bne.n	8008d30 <_dtoa_r+0xa58>
 8008d6e:	f01a 0f01 	tst.w	sl, #1
 8008d72:	d0dd      	beq.n	8008d30 <_dtoa_r+0xa58>
 8008d74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d78:	d1d7      	bne.n	8008d2a <_dtoa_r+0xa52>
 8008d7a:	2339      	movs	r3, #57	; 0x39
 8008d7c:	f88b 3000 	strb.w	r3, [fp]
 8008d80:	462b      	mov	r3, r5
 8008d82:	461d      	mov	r5, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d8a:	2a39      	cmp	r2, #57	; 0x39
 8008d8c:	d071      	beq.n	8008e72 <_dtoa_r+0xb9a>
 8008d8e:	3201      	adds	r2, #1
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e746      	b.n	8008c22 <_dtoa_r+0x94a>
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	dd07      	ble.n	8008da8 <_dtoa_r+0xad0>
 8008d98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d9c:	d0ed      	beq.n	8008d7a <_dtoa_r+0xaa2>
 8008d9e:	f10a 0301 	add.w	r3, sl, #1
 8008da2:	f88b 3000 	strb.w	r3, [fp]
 8008da6:	e73c      	b.n	8008c22 <_dtoa_r+0x94a>
 8008da8:	9b05      	ldr	r3, [sp, #20]
 8008daa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dae:	4599      	cmp	r9, r3
 8008db0:	d047      	beq.n	8008e42 <_dtoa_r+0xb6a>
 8008db2:	ee18 1a10 	vmov	r1, s16
 8008db6:	2300      	movs	r3, #0
 8008db8:	220a      	movs	r2, #10
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f9c0 	bl	8009140 <__multadd>
 8008dc0:	45b8      	cmp	r8, r7
 8008dc2:	ee08 0a10 	vmov	s16, r0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	f04f 020a 	mov.w	r2, #10
 8008dce:	4641      	mov	r1, r8
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	d106      	bne.n	8008de2 <_dtoa_r+0xb0a>
 8008dd4:	f000 f9b4 	bl	8009140 <__multadd>
 8008dd8:	4680      	mov	r8, r0
 8008dda:	4607      	mov	r7, r0
 8008ddc:	f109 0901 	add.w	r9, r9, #1
 8008de0:	e772      	b.n	8008cc8 <_dtoa_r+0x9f0>
 8008de2:	f000 f9ad 	bl	8009140 <__multadd>
 8008de6:	4639      	mov	r1, r7
 8008de8:	4680      	mov	r8, r0
 8008dea:	2300      	movs	r3, #0
 8008dec:	220a      	movs	r2, #10
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 f9a6 	bl	8009140 <__multadd>
 8008df4:	4607      	mov	r7, r0
 8008df6:	e7f1      	b.n	8008ddc <_dtoa_r+0xb04>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	9302      	str	r3, [sp, #8]
 8008dfc:	9d01      	ldr	r5, [sp, #4]
 8008dfe:	ee18 0a10 	vmov	r0, s16
 8008e02:	4631      	mov	r1, r6
 8008e04:	f7ff f9da 	bl	80081bc <quorem>
 8008e08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e12:	1aea      	subs	r2, r5, r3
 8008e14:	9b02      	ldr	r3, [sp, #8]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	dd09      	ble.n	8008e2e <_dtoa_r+0xb56>
 8008e1a:	ee18 1a10 	vmov	r1, s16
 8008e1e:	2300      	movs	r3, #0
 8008e20:	220a      	movs	r2, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 f98c 	bl	8009140 <__multadd>
 8008e28:	ee08 0a10 	vmov	s16, r0
 8008e2c:	e7e7      	b.n	8008dfe <_dtoa_r+0xb26>
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bfc8      	it	gt
 8008e34:	461d      	movgt	r5, r3
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	bfd8      	it	le
 8008e3a:	2501      	movle	r5, #1
 8008e3c:	441d      	add	r5, r3
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	ee18 1a10 	vmov	r1, s16
 8008e46:	2201      	movs	r2, #1
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fb29 	bl	80094a0 <__lshift>
 8008e4e:	4631      	mov	r1, r6
 8008e50:	ee08 0a10 	vmov	s16, r0
 8008e54:	f000 fb94 	bl	8009580 <__mcmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dc91      	bgt.n	8008d80 <_dtoa_r+0xaa8>
 8008e5c:	d102      	bne.n	8008e64 <_dtoa_r+0xb8c>
 8008e5e:	f01a 0f01 	tst.w	sl, #1
 8008e62:	d18d      	bne.n	8008d80 <_dtoa_r+0xaa8>
 8008e64:	462b      	mov	r3, r5
 8008e66:	461d      	mov	r5, r3
 8008e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e6c:	2a30      	cmp	r2, #48	; 0x30
 8008e6e:	d0fa      	beq.n	8008e66 <_dtoa_r+0xb8e>
 8008e70:	e6d7      	b.n	8008c22 <_dtoa_r+0x94a>
 8008e72:	9a01      	ldr	r2, [sp, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d184      	bne.n	8008d82 <_dtoa_r+0xaaa>
 8008e78:	9b00      	ldr	r3, [sp, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	2331      	movs	r3, #49	; 0x31
 8008e80:	7013      	strb	r3, [r2, #0]
 8008e82:	e6ce      	b.n	8008c22 <_dtoa_r+0x94a>
 8008e84:	4b09      	ldr	r3, [pc, #36]	; (8008eac <_dtoa_r+0xbd4>)
 8008e86:	f7ff ba95 	b.w	80083b4 <_dtoa_r+0xdc>
 8008e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f47f aa6e 	bne.w	800836e <_dtoa_r+0x96>
 8008e92:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <_dtoa_r+0xbd8>)
 8008e94:	f7ff ba8e 	b.w	80083b4 <_dtoa_r+0xdc>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dcae      	bgt.n	8008dfc <_dtoa_r+0xb24>
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	f73f aea8 	bgt.w	8008bf6 <_dtoa_r+0x91e>
 8008ea6:	e7a9      	b.n	8008dfc <_dtoa_r+0xb24>
 8008ea8:	0800a14f 	.word	0x0800a14f
 8008eac:	0800a0ac 	.word	0x0800a0ac
 8008eb0:	0800a0d0 	.word	0x0800a0d0

08008eb4 <__sflush_r>:
 8008eb4:	898a      	ldrh	r2, [r1, #12]
 8008eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eba:	4605      	mov	r5, r0
 8008ebc:	0710      	lsls	r0, r2, #28
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	d458      	bmi.n	8008f74 <__sflush_r+0xc0>
 8008ec2:	684b      	ldr	r3, [r1, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dc05      	bgt.n	8008ed4 <__sflush_r+0x20>
 8008ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dc02      	bgt.n	8008ed4 <__sflush_r+0x20>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	d0f9      	beq.n	8008ece <__sflush_r+0x1a>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ee0:	682f      	ldr	r7, [r5, #0]
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	d032      	beq.n	8008f4c <__sflush_r+0x98>
 8008ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	075a      	lsls	r2, r3, #29
 8008eec:	d505      	bpl.n	8008efa <__sflush_r+0x46>
 8008eee:	6863      	ldr	r3, [r4, #4]
 8008ef0:	1ac0      	subs	r0, r0, r3
 8008ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ef4:	b10b      	cbz	r3, 8008efa <__sflush_r+0x46>
 8008ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ef8:	1ac0      	subs	r0, r0, r3
 8008efa:	2300      	movs	r3, #0
 8008efc:	4602      	mov	r2, r0
 8008efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f00:	6a21      	ldr	r1, [r4, #32]
 8008f02:	4628      	mov	r0, r5
 8008f04:	47b0      	blx	r6
 8008f06:	1c43      	adds	r3, r0, #1
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	d106      	bne.n	8008f1a <__sflush_r+0x66>
 8008f0c:	6829      	ldr	r1, [r5, #0]
 8008f0e:	291d      	cmp	r1, #29
 8008f10:	d82c      	bhi.n	8008f6c <__sflush_r+0xb8>
 8008f12:	4a2a      	ldr	r2, [pc, #168]	; (8008fbc <__sflush_r+0x108>)
 8008f14:	40ca      	lsrs	r2, r1
 8008f16:	07d6      	lsls	r6, r2, #31
 8008f18:	d528      	bpl.n	8008f6c <__sflush_r+0xb8>
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	6062      	str	r2, [r4, #4]
 8008f1e:	04d9      	lsls	r1, r3, #19
 8008f20:	6922      	ldr	r2, [r4, #16]
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	d504      	bpl.n	8008f30 <__sflush_r+0x7c>
 8008f26:	1c42      	adds	r2, r0, #1
 8008f28:	d101      	bne.n	8008f2e <__sflush_r+0x7a>
 8008f2a:	682b      	ldr	r3, [r5, #0]
 8008f2c:	b903      	cbnz	r3, 8008f30 <__sflush_r+0x7c>
 8008f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f32:	602f      	str	r7, [r5, #0]
 8008f34:	2900      	cmp	r1, #0
 8008f36:	d0ca      	beq.n	8008ece <__sflush_r+0x1a>
 8008f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f3c:	4299      	cmp	r1, r3
 8008f3e:	d002      	beq.n	8008f46 <__sflush_r+0x92>
 8008f40:	4628      	mov	r0, r5
 8008f42:	f7fe fb11 	bl	8007568 <_free_r>
 8008f46:	2000      	movs	r0, #0
 8008f48:	6360      	str	r0, [r4, #52]	; 0x34
 8008f4a:	e7c1      	b.n	8008ed0 <__sflush_r+0x1c>
 8008f4c:	6a21      	ldr	r1, [r4, #32]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b0      	blx	r6
 8008f54:	1c41      	adds	r1, r0, #1
 8008f56:	d1c7      	bne.n	8008ee8 <__sflush_r+0x34>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0c4      	beq.n	8008ee8 <__sflush_r+0x34>
 8008f5e:	2b1d      	cmp	r3, #29
 8008f60:	d001      	beq.n	8008f66 <__sflush_r+0xb2>
 8008f62:	2b16      	cmp	r3, #22
 8008f64:	d101      	bne.n	8008f6a <__sflush_r+0xb6>
 8008f66:	602f      	str	r7, [r5, #0]
 8008f68:	e7b1      	b.n	8008ece <__sflush_r+0x1a>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	e7ad      	b.n	8008ed0 <__sflush_r+0x1c>
 8008f74:	690f      	ldr	r7, [r1, #16]
 8008f76:	2f00      	cmp	r7, #0
 8008f78:	d0a9      	beq.n	8008ece <__sflush_r+0x1a>
 8008f7a:	0793      	lsls	r3, r2, #30
 8008f7c:	680e      	ldr	r6, [r1, #0]
 8008f7e:	bf08      	it	eq
 8008f80:	694b      	ldreq	r3, [r1, #20]
 8008f82:	600f      	str	r7, [r1, #0]
 8008f84:	bf18      	it	ne
 8008f86:	2300      	movne	r3, #0
 8008f88:	eba6 0807 	sub.w	r8, r6, r7
 8008f8c:	608b      	str	r3, [r1, #8]
 8008f8e:	f1b8 0f00 	cmp.w	r8, #0
 8008f92:	dd9c      	ble.n	8008ece <__sflush_r+0x1a>
 8008f94:	6a21      	ldr	r1, [r4, #32]
 8008f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f98:	4643      	mov	r3, r8
 8008f9a:	463a      	mov	r2, r7
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b0      	blx	r6
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	dc06      	bgt.n	8008fb2 <__sflush_r+0xfe>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb0:	e78e      	b.n	8008ed0 <__sflush_r+0x1c>
 8008fb2:	4407      	add	r7, r0
 8008fb4:	eba8 0800 	sub.w	r8, r8, r0
 8008fb8:	e7e9      	b.n	8008f8e <__sflush_r+0xda>
 8008fba:	bf00      	nop
 8008fbc:	20400001 	.word	0x20400001

08008fc0 <_fflush_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	690b      	ldr	r3, [r1, #16]
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	b913      	cbnz	r3, 8008fd0 <_fflush_r+0x10>
 8008fca:	2500      	movs	r5, #0
 8008fcc:	4628      	mov	r0, r5
 8008fce:	bd38      	pop	{r3, r4, r5, pc}
 8008fd0:	b118      	cbz	r0, 8008fda <_fflush_r+0x1a>
 8008fd2:	6983      	ldr	r3, [r0, #24]
 8008fd4:	b90b      	cbnz	r3, 8008fda <_fflush_r+0x1a>
 8008fd6:	f7fe f9db 	bl	8007390 <__sinit>
 8008fda:	4b14      	ldr	r3, [pc, #80]	; (800902c <_fflush_r+0x6c>)
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	d11b      	bne.n	8009018 <_fflush_r+0x58>
 8008fe0:	686c      	ldr	r4, [r5, #4]
 8008fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0ef      	beq.n	8008fca <_fflush_r+0xa>
 8008fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fec:	07d0      	lsls	r0, r2, #31
 8008fee:	d404      	bmi.n	8008ffa <_fflush_r+0x3a>
 8008ff0:	0599      	lsls	r1, r3, #22
 8008ff2:	d402      	bmi.n	8008ffa <_fflush_r+0x3a>
 8008ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ff6:	f7fe fa8e 	bl	8007516 <__retarget_lock_acquire_recursive>
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	f7ff ff59 	bl	8008eb4 <__sflush_r>
 8009002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009004:	07da      	lsls	r2, r3, #31
 8009006:	4605      	mov	r5, r0
 8009008:	d4e0      	bmi.n	8008fcc <_fflush_r+0xc>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	059b      	lsls	r3, r3, #22
 800900e:	d4dd      	bmi.n	8008fcc <_fflush_r+0xc>
 8009010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009012:	f7fe fa81 	bl	8007518 <__retarget_lock_release_recursive>
 8009016:	e7d9      	b.n	8008fcc <_fflush_r+0xc>
 8009018:	4b05      	ldr	r3, [pc, #20]	; (8009030 <_fflush_r+0x70>)
 800901a:	429c      	cmp	r4, r3
 800901c:	d101      	bne.n	8009022 <_fflush_r+0x62>
 800901e:	68ac      	ldr	r4, [r5, #8]
 8009020:	e7df      	b.n	8008fe2 <_fflush_r+0x22>
 8009022:	4b04      	ldr	r3, [pc, #16]	; (8009034 <_fflush_r+0x74>)
 8009024:	429c      	cmp	r4, r3
 8009026:	bf08      	it	eq
 8009028:	68ec      	ldreq	r4, [r5, #12]
 800902a:	e7da      	b.n	8008fe2 <_fflush_r+0x22>
 800902c:	0800a058 	.word	0x0800a058
 8009030:	0800a078 	.word	0x0800a078
 8009034:	0800a038 	.word	0x0800a038

08009038 <_localeconv_r>:
 8009038:	4800      	ldr	r0, [pc, #0]	; (800903c <_localeconv_r+0x4>)
 800903a:	4770      	bx	lr
 800903c:	20000178 	.word	0x20000178

08009040 <_lseek_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d07      	ldr	r5, [pc, #28]	; (8009060 <_lseek_r+0x20>)
 8009044:	4604      	mov	r4, r0
 8009046:	4608      	mov	r0, r1
 8009048:	4611      	mov	r1, r2
 800904a:	2200      	movs	r2, #0
 800904c:	602a      	str	r2, [r5, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	f7f9 f832 	bl	80020b8 <_lseek>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_lseek_r+0x1e>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_lseek_r+0x1e>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	200111ac 	.word	0x200111ac

08009064 <__malloc_lock>:
 8009064:	4801      	ldr	r0, [pc, #4]	; (800906c <__malloc_lock+0x8>)
 8009066:	f7fe ba56 	b.w	8007516 <__retarget_lock_acquire_recursive>
 800906a:	bf00      	nop
 800906c:	200111a0 	.word	0x200111a0

08009070 <__malloc_unlock>:
 8009070:	4801      	ldr	r0, [pc, #4]	; (8009078 <__malloc_unlock+0x8>)
 8009072:	f7fe ba51 	b.w	8007518 <__retarget_lock_release_recursive>
 8009076:	bf00      	nop
 8009078:	200111a0 	.word	0x200111a0

0800907c <_Balloc>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	b976      	cbnz	r6, 80090a4 <_Balloc+0x28>
 8009086:	2010      	movs	r0, #16
 8009088:	f7fe fa48 	bl	800751c <malloc>
 800908c:	4602      	mov	r2, r0
 800908e:	6260      	str	r0, [r4, #36]	; 0x24
 8009090:	b920      	cbnz	r0, 800909c <_Balloc+0x20>
 8009092:	4b18      	ldr	r3, [pc, #96]	; (80090f4 <_Balloc+0x78>)
 8009094:	4818      	ldr	r0, [pc, #96]	; (80090f8 <_Balloc+0x7c>)
 8009096:	2166      	movs	r1, #102	; 0x66
 8009098:	f000 fb9c 	bl	80097d4 <__assert_func>
 800909c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090a0:	6006      	str	r6, [r0, #0]
 80090a2:	60c6      	str	r6, [r0, #12]
 80090a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090a6:	68f3      	ldr	r3, [r6, #12]
 80090a8:	b183      	cbz	r3, 80090cc <_Balloc+0x50>
 80090aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090b2:	b9b8      	cbnz	r0, 80090e4 <_Balloc+0x68>
 80090b4:	2101      	movs	r1, #1
 80090b6:	fa01 f605 	lsl.w	r6, r1, r5
 80090ba:	1d72      	adds	r2, r6, #5
 80090bc:	0092      	lsls	r2, r2, #2
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 fb60 	bl	8009784 <_calloc_r>
 80090c4:	b160      	cbz	r0, 80090e0 <_Balloc+0x64>
 80090c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090ca:	e00e      	b.n	80090ea <_Balloc+0x6e>
 80090cc:	2221      	movs	r2, #33	; 0x21
 80090ce:	2104      	movs	r1, #4
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fb57 	bl	8009784 <_calloc_r>
 80090d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d8:	60f0      	str	r0, [r6, #12]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e4      	bne.n	80090aa <_Balloc+0x2e>
 80090e0:	2000      	movs	r0, #0
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	6802      	ldr	r2, [r0, #0]
 80090e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090ea:	2300      	movs	r3, #0
 80090ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090f0:	e7f7      	b.n	80090e2 <_Balloc+0x66>
 80090f2:	bf00      	nop
 80090f4:	0800a0dd 	.word	0x0800a0dd
 80090f8:	0800a160 	.word	0x0800a160

080090fc <_Bfree>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009100:	4605      	mov	r5, r0
 8009102:	460c      	mov	r4, r1
 8009104:	b976      	cbnz	r6, 8009124 <_Bfree+0x28>
 8009106:	2010      	movs	r0, #16
 8009108:	f7fe fa08 	bl	800751c <malloc>
 800910c:	4602      	mov	r2, r0
 800910e:	6268      	str	r0, [r5, #36]	; 0x24
 8009110:	b920      	cbnz	r0, 800911c <_Bfree+0x20>
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <_Bfree+0x3c>)
 8009114:	4809      	ldr	r0, [pc, #36]	; (800913c <_Bfree+0x40>)
 8009116:	218a      	movs	r1, #138	; 0x8a
 8009118:	f000 fb5c 	bl	80097d4 <__assert_func>
 800911c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009120:	6006      	str	r6, [r0, #0]
 8009122:	60c6      	str	r6, [r0, #12]
 8009124:	b13c      	cbz	r4, 8009136 <_Bfree+0x3a>
 8009126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009128:	6862      	ldr	r2, [r4, #4]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009130:	6021      	str	r1, [r4, #0]
 8009132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	0800a0dd 	.word	0x0800a0dd
 800913c:	0800a160 	.word	0x0800a160

08009140 <__multadd>:
 8009140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009144:	690d      	ldr	r5, [r1, #16]
 8009146:	4607      	mov	r7, r0
 8009148:	460c      	mov	r4, r1
 800914a:	461e      	mov	r6, r3
 800914c:	f101 0c14 	add.w	ip, r1, #20
 8009150:	2000      	movs	r0, #0
 8009152:	f8dc 3000 	ldr.w	r3, [ip]
 8009156:	b299      	uxth	r1, r3
 8009158:	fb02 6101 	mla	r1, r2, r1, r6
 800915c:	0c1e      	lsrs	r6, r3, #16
 800915e:	0c0b      	lsrs	r3, r1, #16
 8009160:	fb02 3306 	mla	r3, r2, r6, r3
 8009164:	b289      	uxth	r1, r1
 8009166:	3001      	adds	r0, #1
 8009168:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800916c:	4285      	cmp	r5, r0
 800916e:	f84c 1b04 	str.w	r1, [ip], #4
 8009172:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009176:	dcec      	bgt.n	8009152 <__multadd+0x12>
 8009178:	b30e      	cbz	r6, 80091be <__multadd+0x7e>
 800917a:	68a3      	ldr	r3, [r4, #8]
 800917c:	42ab      	cmp	r3, r5
 800917e:	dc19      	bgt.n	80091b4 <__multadd+0x74>
 8009180:	6861      	ldr	r1, [r4, #4]
 8009182:	4638      	mov	r0, r7
 8009184:	3101      	adds	r1, #1
 8009186:	f7ff ff79 	bl	800907c <_Balloc>
 800918a:	4680      	mov	r8, r0
 800918c:	b928      	cbnz	r0, 800919a <__multadd+0x5a>
 800918e:	4602      	mov	r2, r0
 8009190:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <__multadd+0x84>)
 8009192:	480d      	ldr	r0, [pc, #52]	; (80091c8 <__multadd+0x88>)
 8009194:	21b5      	movs	r1, #181	; 0xb5
 8009196:	f000 fb1d 	bl	80097d4 <__assert_func>
 800919a:	6922      	ldr	r2, [r4, #16]
 800919c:	3202      	adds	r2, #2
 800919e:	f104 010c 	add.w	r1, r4, #12
 80091a2:	0092      	lsls	r2, r2, #2
 80091a4:	300c      	adds	r0, #12
 80091a6:	f7fe f9c9 	bl	800753c <memcpy>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff ffa5 	bl	80090fc <_Bfree>
 80091b2:	4644      	mov	r4, r8
 80091b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091b8:	3501      	adds	r5, #1
 80091ba:	615e      	str	r6, [r3, #20]
 80091bc:	6125      	str	r5, [r4, #16]
 80091be:	4620      	mov	r0, r4
 80091c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c4:	0800a14f 	.word	0x0800a14f
 80091c8:	0800a160 	.word	0x0800a160

080091cc <__hi0bits>:
 80091cc:	0c03      	lsrs	r3, r0, #16
 80091ce:	041b      	lsls	r3, r3, #16
 80091d0:	b9d3      	cbnz	r3, 8009208 <__hi0bits+0x3c>
 80091d2:	0400      	lsls	r0, r0, #16
 80091d4:	2310      	movs	r3, #16
 80091d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091da:	bf04      	itt	eq
 80091dc:	0200      	lsleq	r0, r0, #8
 80091de:	3308      	addeq	r3, #8
 80091e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091e4:	bf04      	itt	eq
 80091e6:	0100      	lsleq	r0, r0, #4
 80091e8:	3304      	addeq	r3, #4
 80091ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091ee:	bf04      	itt	eq
 80091f0:	0080      	lsleq	r0, r0, #2
 80091f2:	3302      	addeq	r3, #2
 80091f4:	2800      	cmp	r0, #0
 80091f6:	db05      	blt.n	8009204 <__hi0bits+0x38>
 80091f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091fc:	f103 0301 	add.w	r3, r3, #1
 8009200:	bf08      	it	eq
 8009202:	2320      	moveq	r3, #32
 8009204:	4618      	mov	r0, r3
 8009206:	4770      	bx	lr
 8009208:	2300      	movs	r3, #0
 800920a:	e7e4      	b.n	80091d6 <__hi0bits+0xa>

0800920c <__lo0bits>:
 800920c:	6803      	ldr	r3, [r0, #0]
 800920e:	f013 0207 	ands.w	r2, r3, #7
 8009212:	4601      	mov	r1, r0
 8009214:	d00b      	beq.n	800922e <__lo0bits+0x22>
 8009216:	07da      	lsls	r2, r3, #31
 8009218:	d423      	bmi.n	8009262 <__lo0bits+0x56>
 800921a:	0798      	lsls	r0, r3, #30
 800921c:	bf49      	itett	mi
 800921e:	085b      	lsrmi	r3, r3, #1
 8009220:	089b      	lsrpl	r3, r3, #2
 8009222:	2001      	movmi	r0, #1
 8009224:	600b      	strmi	r3, [r1, #0]
 8009226:	bf5c      	itt	pl
 8009228:	600b      	strpl	r3, [r1, #0]
 800922a:	2002      	movpl	r0, #2
 800922c:	4770      	bx	lr
 800922e:	b298      	uxth	r0, r3
 8009230:	b9a8      	cbnz	r0, 800925e <__lo0bits+0x52>
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	2010      	movs	r0, #16
 8009236:	b2da      	uxtb	r2, r3
 8009238:	b90a      	cbnz	r2, 800923e <__lo0bits+0x32>
 800923a:	3008      	adds	r0, #8
 800923c:	0a1b      	lsrs	r3, r3, #8
 800923e:	071a      	lsls	r2, r3, #28
 8009240:	bf04      	itt	eq
 8009242:	091b      	lsreq	r3, r3, #4
 8009244:	3004      	addeq	r0, #4
 8009246:	079a      	lsls	r2, r3, #30
 8009248:	bf04      	itt	eq
 800924a:	089b      	lsreq	r3, r3, #2
 800924c:	3002      	addeq	r0, #2
 800924e:	07da      	lsls	r2, r3, #31
 8009250:	d403      	bmi.n	800925a <__lo0bits+0x4e>
 8009252:	085b      	lsrs	r3, r3, #1
 8009254:	f100 0001 	add.w	r0, r0, #1
 8009258:	d005      	beq.n	8009266 <__lo0bits+0x5a>
 800925a:	600b      	str	r3, [r1, #0]
 800925c:	4770      	bx	lr
 800925e:	4610      	mov	r0, r2
 8009260:	e7e9      	b.n	8009236 <__lo0bits+0x2a>
 8009262:	2000      	movs	r0, #0
 8009264:	4770      	bx	lr
 8009266:	2020      	movs	r0, #32
 8009268:	4770      	bx	lr
	...

0800926c <__i2b>:
 800926c:	b510      	push	{r4, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	2101      	movs	r1, #1
 8009272:	f7ff ff03 	bl	800907c <_Balloc>
 8009276:	4602      	mov	r2, r0
 8009278:	b928      	cbnz	r0, 8009286 <__i2b+0x1a>
 800927a:	4b05      	ldr	r3, [pc, #20]	; (8009290 <__i2b+0x24>)
 800927c:	4805      	ldr	r0, [pc, #20]	; (8009294 <__i2b+0x28>)
 800927e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009282:	f000 faa7 	bl	80097d4 <__assert_func>
 8009286:	2301      	movs	r3, #1
 8009288:	6144      	str	r4, [r0, #20]
 800928a:	6103      	str	r3, [r0, #16]
 800928c:	bd10      	pop	{r4, pc}
 800928e:	bf00      	nop
 8009290:	0800a14f 	.word	0x0800a14f
 8009294:	0800a160 	.word	0x0800a160

08009298 <__multiply>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	4691      	mov	r9, r2
 800929e:	690a      	ldr	r2, [r1, #16]
 80092a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	bfb8      	it	lt
 80092a8:	460b      	movlt	r3, r1
 80092aa:	460c      	mov	r4, r1
 80092ac:	bfbc      	itt	lt
 80092ae:	464c      	movlt	r4, r9
 80092b0:	4699      	movlt	r9, r3
 80092b2:	6927      	ldr	r7, [r4, #16]
 80092b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092b8:	68a3      	ldr	r3, [r4, #8]
 80092ba:	6861      	ldr	r1, [r4, #4]
 80092bc:	eb07 060a 	add.w	r6, r7, sl
 80092c0:	42b3      	cmp	r3, r6
 80092c2:	b085      	sub	sp, #20
 80092c4:	bfb8      	it	lt
 80092c6:	3101      	addlt	r1, #1
 80092c8:	f7ff fed8 	bl	800907c <_Balloc>
 80092cc:	b930      	cbnz	r0, 80092dc <__multiply+0x44>
 80092ce:	4602      	mov	r2, r0
 80092d0:	4b44      	ldr	r3, [pc, #272]	; (80093e4 <__multiply+0x14c>)
 80092d2:	4845      	ldr	r0, [pc, #276]	; (80093e8 <__multiply+0x150>)
 80092d4:	f240 115d 	movw	r1, #349	; 0x15d
 80092d8:	f000 fa7c 	bl	80097d4 <__assert_func>
 80092dc:	f100 0514 	add.w	r5, r0, #20
 80092e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092e4:	462b      	mov	r3, r5
 80092e6:	2200      	movs	r2, #0
 80092e8:	4543      	cmp	r3, r8
 80092ea:	d321      	bcc.n	8009330 <__multiply+0x98>
 80092ec:	f104 0314 	add.w	r3, r4, #20
 80092f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092f4:	f109 0314 	add.w	r3, r9, #20
 80092f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092fc:	9202      	str	r2, [sp, #8]
 80092fe:	1b3a      	subs	r2, r7, r4
 8009300:	3a15      	subs	r2, #21
 8009302:	f022 0203 	bic.w	r2, r2, #3
 8009306:	3204      	adds	r2, #4
 8009308:	f104 0115 	add.w	r1, r4, #21
 800930c:	428f      	cmp	r7, r1
 800930e:	bf38      	it	cc
 8009310:	2204      	movcc	r2, #4
 8009312:	9201      	str	r2, [sp, #4]
 8009314:	9a02      	ldr	r2, [sp, #8]
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	429a      	cmp	r2, r3
 800931a:	d80c      	bhi.n	8009336 <__multiply+0x9e>
 800931c:	2e00      	cmp	r6, #0
 800931e:	dd03      	ble.n	8009328 <__multiply+0x90>
 8009320:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009324:	2b00      	cmp	r3, #0
 8009326:	d05a      	beq.n	80093de <__multiply+0x146>
 8009328:	6106      	str	r6, [r0, #16]
 800932a:	b005      	add	sp, #20
 800932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009330:	f843 2b04 	str.w	r2, [r3], #4
 8009334:	e7d8      	b.n	80092e8 <__multiply+0x50>
 8009336:	f8b3 a000 	ldrh.w	sl, [r3]
 800933a:	f1ba 0f00 	cmp.w	sl, #0
 800933e:	d024      	beq.n	800938a <__multiply+0xf2>
 8009340:	f104 0e14 	add.w	lr, r4, #20
 8009344:	46a9      	mov	r9, r5
 8009346:	f04f 0c00 	mov.w	ip, #0
 800934a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800934e:	f8d9 1000 	ldr.w	r1, [r9]
 8009352:	fa1f fb82 	uxth.w	fp, r2
 8009356:	b289      	uxth	r1, r1
 8009358:	fb0a 110b 	mla	r1, sl, fp, r1
 800935c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009360:	f8d9 2000 	ldr.w	r2, [r9]
 8009364:	4461      	add	r1, ip
 8009366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800936a:	fb0a c20b 	mla	r2, sl, fp, ip
 800936e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009372:	b289      	uxth	r1, r1
 8009374:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009378:	4577      	cmp	r7, lr
 800937a:	f849 1b04 	str.w	r1, [r9], #4
 800937e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009382:	d8e2      	bhi.n	800934a <__multiply+0xb2>
 8009384:	9a01      	ldr	r2, [sp, #4]
 8009386:	f845 c002 	str.w	ip, [r5, r2]
 800938a:	9a03      	ldr	r2, [sp, #12]
 800938c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009390:	3304      	adds	r3, #4
 8009392:	f1b9 0f00 	cmp.w	r9, #0
 8009396:	d020      	beq.n	80093da <__multiply+0x142>
 8009398:	6829      	ldr	r1, [r5, #0]
 800939a:	f104 0c14 	add.w	ip, r4, #20
 800939e:	46ae      	mov	lr, r5
 80093a0:	f04f 0a00 	mov.w	sl, #0
 80093a4:	f8bc b000 	ldrh.w	fp, [ip]
 80093a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093ac:	fb09 220b 	mla	r2, r9, fp, r2
 80093b0:	4492      	add	sl, r2
 80093b2:	b289      	uxth	r1, r1
 80093b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093b8:	f84e 1b04 	str.w	r1, [lr], #4
 80093bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093c0:	f8be 1000 	ldrh.w	r1, [lr]
 80093c4:	0c12      	lsrs	r2, r2, #16
 80093c6:	fb09 1102 	mla	r1, r9, r2, r1
 80093ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093ce:	4567      	cmp	r7, ip
 80093d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093d4:	d8e6      	bhi.n	80093a4 <__multiply+0x10c>
 80093d6:	9a01      	ldr	r2, [sp, #4]
 80093d8:	50a9      	str	r1, [r5, r2]
 80093da:	3504      	adds	r5, #4
 80093dc:	e79a      	b.n	8009314 <__multiply+0x7c>
 80093de:	3e01      	subs	r6, #1
 80093e0:	e79c      	b.n	800931c <__multiply+0x84>
 80093e2:	bf00      	nop
 80093e4:	0800a14f 	.word	0x0800a14f
 80093e8:	0800a160 	.word	0x0800a160

080093ec <__pow5mult>:
 80093ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f0:	4615      	mov	r5, r2
 80093f2:	f012 0203 	ands.w	r2, r2, #3
 80093f6:	4606      	mov	r6, r0
 80093f8:	460f      	mov	r7, r1
 80093fa:	d007      	beq.n	800940c <__pow5mult+0x20>
 80093fc:	4c25      	ldr	r4, [pc, #148]	; (8009494 <__pow5mult+0xa8>)
 80093fe:	3a01      	subs	r2, #1
 8009400:	2300      	movs	r3, #0
 8009402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009406:	f7ff fe9b 	bl	8009140 <__multadd>
 800940a:	4607      	mov	r7, r0
 800940c:	10ad      	asrs	r5, r5, #2
 800940e:	d03d      	beq.n	800948c <__pow5mult+0xa0>
 8009410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009412:	b97c      	cbnz	r4, 8009434 <__pow5mult+0x48>
 8009414:	2010      	movs	r0, #16
 8009416:	f7fe f881 	bl	800751c <malloc>
 800941a:	4602      	mov	r2, r0
 800941c:	6270      	str	r0, [r6, #36]	; 0x24
 800941e:	b928      	cbnz	r0, 800942c <__pow5mult+0x40>
 8009420:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <__pow5mult+0xac>)
 8009422:	481e      	ldr	r0, [pc, #120]	; (800949c <__pow5mult+0xb0>)
 8009424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009428:	f000 f9d4 	bl	80097d4 <__assert_func>
 800942c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009430:	6004      	str	r4, [r0, #0]
 8009432:	60c4      	str	r4, [r0, #12]
 8009434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800943c:	b94c      	cbnz	r4, 8009452 <__pow5mult+0x66>
 800943e:	f240 2171 	movw	r1, #625	; 0x271
 8009442:	4630      	mov	r0, r6
 8009444:	f7ff ff12 	bl	800926c <__i2b>
 8009448:	2300      	movs	r3, #0
 800944a:	f8c8 0008 	str.w	r0, [r8, #8]
 800944e:	4604      	mov	r4, r0
 8009450:	6003      	str	r3, [r0, #0]
 8009452:	f04f 0900 	mov.w	r9, #0
 8009456:	07eb      	lsls	r3, r5, #31
 8009458:	d50a      	bpl.n	8009470 <__pow5mult+0x84>
 800945a:	4639      	mov	r1, r7
 800945c:	4622      	mov	r2, r4
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ff1a 	bl	8009298 <__multiply>
 8009464:	4639      	mov	r1, r7
 8009466:	4680      	mov	r8, r0
 8009468:	4630      	mov	r0, r6
 800946a:	f7ff fe47 	bl	80090fc <_Bfree>
 800946e:	4647      	mov	r7, r8
 8009470:	106d      	asrs	r5, r5, #1
 8009472:	d00b      	beq.n	800948c <__pow5mult+0xa0>
 8009474:	6820      	ldr	r0, [r4, #0]
 8009476:	b938      	cbnz	r0, 8009488 <__pow5mult+0x9c>
 8009478:	4622      	mov	r2, r4
 800947a:	4621      	mov	r1, r4
 800947c:	4630      	mov	r0, r6
 800947e:	f7ff ff0b 	bl	8009298 <__multiply>
 8009482:	6020      	str	r0, [r4, #0]
 8009484:	f8c0 9000 	str.w	r9, [r0]
 8009488:	4604      	mov	r4, r0
 800948a:	e7e4      	b.n	8009456 <__pow5mult+0x6a>
 800948c:	4638      	mov	r0, r7
 800948e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009492:	bf00      	nop
 8009494:	0800a2b0 	.word	0x0800a2b0
 8009498:	0800a0dd 	.word	0x0800a0dd
 800949c:	0800a160 	.word	0x0800a160

080094a0 <__lshift>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	460c      	mov	r4, r1
 80094a6:	6849      	ldr	r1, [r1, #4]
 80094a8:	6923      	ldr	r3, [r4, #16]
 80094aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	4607      	mov	r7, r0
 80094b2:	4691      	mov	r9, r2
 80094b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094b8:	f108 0601 	add.w	r6, r8, #1
 80094bc:	42b3      	cmp	r3, r6
 80094be:	db0b      	blt.n	80094d8 <__lshift+0x38>
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7ff fddb 	bl	800907c <_Balloc>
 80094c6:	4605      	mov	r5, r0
 80094c8:	b948      	cbnz	r0, 80094de <__lshift+0x3e>
 80094ca:	4602      	mov	r2, r0
 80094cc:	4b2a      	ldr	r3, [pc, #168]	; (8009578 <__lshift+0xd8>)
 80094ce:	482b      	ldr	r0, [pc, #172]	; (800957c <__lshift+0xdc>)
 80094d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094d4:	f000 f97e 	bl	80097d4 <__assert_func>
 80094d8:	3101      	adds	r1, #1
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	e7ee      	b.n	80094bc <__lshift+0x1c>
 80094de:	2300      	movs	r3, #0
 80094e0:	f100 0114 	add.w	r1, r0, #20
 80094e4:	f100 0210 	add.w	r2, r0, #16
 80094e8:	4618      	mov	r0, r3
 80094ea:	4553      	cmp	r3, sl
 80094ec:	db37      	blt.n	800955e <__lshift+0xbe>
 80094ee:	6920      	ldr	r0, [r4, #16]
 80094f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094f4:	f104 0314 	add.w	r3, r4, #20
 80094f8:	f019 091f 	ands.w	r9, r9, #31
 80094fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009500:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009504:	d02f      	beq.n	8009566 <__lshift+0xc6>
 8009506:	f1c9 0e20 	rsb	lr, r9, #32
 800950a:	468a      	mov	sl, r1
 800950c:	f04f 0c00 	mov.w	ip, #0
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	fa02 f209 	lsl.w	r2, r2, r9
 8009516:	ea42 020c 	orr.w	r2, r2, ip
 800951a:	f84a 2b04 	str.w	r2, [sl], #4
 800951e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009522:	4298      	cmp	r0, r3
 8009524:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009528:	d8f2      	bhi.n	8009510 <__lshift+0x70>
 800952a:	1b03      	subs	r3, r0, r4
 800952c:	3b15      	subs	r3, #21
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	3304      	adds	r3, #4
 8009534:	f104 0215 	add.w	r2, r4, #21
 8009538:	4290      	cmp	r0, r2
 800953a:	bf38      	it	cc
 800953c:	2304      	movcc	r3, #4
 800953e:	f841 c003 	str.w	ip, [r1, r3]
 8009542:	f1bc 0f00 	cmp.w	ip, #0
 8009546:	d001      	beq.n	800954c <__lshift+0xac>
 8009548:	f108 0602 	add.w	r6, r8, #2
 800954c:	3e01      	subs	r6, #1
 800954e:	4638      	mov	r0, r7
 8009550:	612e      	str	r6, [r5, #16]
 8009552:	4621      	mov	r1, r4
 8009554:	f7ff fdd2 	bl	80090fc <_Bfree>
 8009558:	4628      	mov	r0, r5
 800955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009562:	3301      	adds	r3, #1
 8009564:	e7c1      	b.n	80094ea <__lshift+0x4a>
 8009566:	3904      	subs	r1, #4
 8009568:	f853 2b04 	ldr.w	r2, [r3], #4
 800956c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009570:	4298      	cmp	r0, r3
 8009572:	d8f9      	bhi.n	8009568 <__lshift+0xc8>
 8009574:	e7ea      	b.n	800954c <__lshift+0xac>
 8009576:	bf00      	nop
 8009578:	0800a14f 	.word	0x0800a14f
 800957c:	0800a160 	.word	0x0800a160

08009580 <__mcmp>:
 8009580:	b530      	push	{r4, r5, lr}
 8009582:	6902      	ldr	r2, [r0, #16]
 8009584:	690c      	ldr	r4, [r1, #16]
 8009586:	1b12      	subs	r2, r2, r4
 8009588:	d10e      	bne.n	80095a8 <__mcmp+0x28>
 800958a:	f100 0314 	add.w	r3, r0, #20
 800958e:	3114      	adds	r1, #20
 8009590:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009594:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009598:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800959c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095a0:	42a5      	cmp	r5, r4
 80095a2:	d003      	beq.n	80095ac <__mcmp+0x2c>
 80095a4:	d305      	bcc.n	80095b2 <__mcmp+0x32>
 80095a6:	2201      	movs	r2, #1
 80095a8:	4610      	mov	r0, r2
 80095aa:	bd30      	pop	{r4, r5, pc}
 80095ac:	4283      	cmp	r3, r0
 80095ae:	d3f3      	bcc.n	8009598 <__mcmp+0x18>
 80095b0:	e7fa      	b.n	80095a8 <__mcmp+0x28>
 80095b2:	f04f 32ff 	mov.w	r2, #4294967295
 80095b6:	e7f7      	b.n	80095a8 <__mcmp+0x28>

080095b8 <__mdiff>:
 80095b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	460c      	mov	r4, r1
 80095be:	4606      	mov	r6, r0
 80095c0:	4611      	mov	r1, r2
 80095c2:	4620      	mov	r0, r4
 80095c4:	4690      	mov	r8, r2
 80095c6:	f7ff ffdb 	bl	8009580 <__mcmp>
 80095ca:	1e05      	subs	r5, r0, #0
 80095cc:	d110      	bne.n	80095f0 <__mdiff+0x38>
 80095ce:	4629      	mov	r1, r5
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7ff fd53 	bl	800907c <_Balloc>
 80095d6:	b930      	cbnz	r0, 80095e6 <__mdiff+0x2e>
 80095d8:	4b3a      	ldr	r3, [pc, #232]	; (80096c4 <__mdiff+0x10c>)
 80095da:	4602      	mov	r2, r0
 80095dc:	f240 2132 	movw	r1, #562	; 0x232
 80095e0:	4839      	ldr	r0, [pc, #228]	; (80096c8 <__mdiff+0x110>)
 80095e2:	f000 f8f7 	bl	80097d4 <__assert_func>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	bfa4      	itt	ge
 80095f2:	4643      	movge	r3, r8
 80095f4:	46a0      	movge	r8, r4
 80095f6:	4630      	mov	r0, r6
 80095f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095fc:	bfa6      	itte	ge
 80095fe:	461c      	movge	r4, r3
 8009600:	2500      	movge	r5, #0
 8009602:	2501      	movlt	r5, #1
 8009604:	f7ff fd3a 	bl	800907c <_Balloc>
 8009608:	b920      	cbnz	r0, 8009614 <__mdiff+0x5c>
 800960a:	4b2e      	ldr	r3, [pc, #184]	; (80096c4 <__mdiff+0x10c>)
 800960c:	4602      	mov	r2, r0
 800960e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009612:	e7e5      	b.n	80095e0 <__mdiff+0x28>
 8009614:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009618:	6926      	ldr	r6, [r4, #16]
 800961a:	60c5      	str	r5, [r0, #12]
 800961c:	f104 0914 	add.w	r9, r4, #20
 8009620:	f108 0514 	add.w	r5, r8, #20
 8009624:	f100 0e14 	add.w	lr, r0, #20
 8009628:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800962c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009630:	f108 0210 	add.w	r2, r8, #16
 8009634:	46f2      	mov	sl, lr
 8009636:	2100      	movs	r1, #0
 8009638:	f859 3b04 	ldr.w	r3, [r9], #4
 800963c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009640:	fa1f f883 	uxth.w	r8, r3
 8009644:	fa11 f18b 	uxtah	r1, r1, fp
 8009648:	0c1b      	lsrs	r3, r3, #16
 800964a:	eba1 0808 	sub.w	r8, r1, r8
 800964e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009652:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009656:	fa1f f888 	uxth.w	r8, r8
 800965a:	1419      	asrs	r1, r3, #16
 800965c:	454e      	cmp	r6, r9
 800965e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009662:	f84a 3b04 	str.w	r3, [sl], #4
 8009666:	d8e7      	bhi.n	8009638 <__mdiff+0x80>
 8009668:	1b33      	subs	r3, r6, r4
 800966a:	3b15      	subs	r3, #21
 800966c:	f023 0303 	bic.w	r3, r3, #3
 8009670:	3304      	adds	r3, #4
 8009672:	3415      	adds	r4, #21
 8009674:	42a6      	cmp	r6, r4
 8009676:	bf38      	it	cc
 8009678:	2304      	movcc	r3, #4
 800967a:	441d      	add	r5, r3
 800967c:	4473      	add	r3, lr
 800967e:	469e      	mov	lr, r3
 8009680:	462e      	mov	r6, r5
 8009682:	4566      	cmp	r6, ip
 8009684:	d30e      	bcc.n	80096a4 <__mdiff+0xec>
 8009686:	f10c 0203 	add.w	r2, ip, #3
 800968a:	1b52      	subs	r2, r2, r5
 800968c:	f022 0203 	bic.w	r2, r2, #3
 8009690:	3d03      	subs	r5, #3
 8009692:	45ac      	cmp	ip, r5
 8009694:	bf38      	it	cc
 8009696:	2200      	movcc	r2, #0
 8009698:	441a      	add	r2, r3
 800969a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800969e:	b17b      	cbz	r3, 80096c0 <__mdiff+0x108>
 80096a0:	6107      	str	r7, [r0, #16]
 80096a2:	e7a3      	b.n	80095ec <__mdiff+0x34>
 80096a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80096a8:	fa11 f288 	uxtah	r2, r1, r8
 80096ac:	1414      	asrs	r4, r2, #16
 80096ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096b2:	b292      	uxth	r2, r2
 80096b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096b8:	f84e 2b04 	str.w	r2, [lr], #4
 80096bc:	1421      	asrs	r1, r4, #16
 80096be:	e7e0      	b.n	8009682 <__mdiff+0xca>
 80096c0:	3f01      	subs	r7, #1
 80096c2:	e7ea      	b.n	800969a <__mdiff+0xe2>
 80096c4:	0800a14f 	.word	0x0800a14f
 80096c8:	0800a160 	.word	0x0800a160

080096cc <__d2b>:
 80096cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	4689      	mov	r9, r1
 80096d2:	2101      	movs	r1, #1
 80096d4:	ec57 6b10 	vmov	r6, r7, d0
 80096d8:	4690      	mov	r8, r2
 80096da:	f7ff fccf 	bl	800907c <_Balloc>
 80096de:	4604      	mov	r4, r0
 80096e0:	b930      	cbnz	r0, 80096f0 <__d2b+0x24>
 80096e2:	4602      	mov	r2, r0
 80096e4:	4b25      	ldr	r3, [pc, #148]	; (800977c <__d2b+0xb0>)
 80096e6:	4826      	ldr	r0, [pc, #152]	; (8009780 <__d2b+0xb4>)
 80096e8:	f240 310a 	movw	r1, #778	; 0x30a
 80096ec:	f000 f872 	bl	80097d4 <__assert_func>
 80096f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80096f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096f8:	bb35      	cbnz	r5, 8009748 <__d2b+0x7c>
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	d028      	beq.n	8009752 <__d2b+0x86>
 8009700:	4668      	mov	r0, sp
 8009702:	9600      	str	r6, [sp, #0]
 8009704:	f7ff fd82 	bl	800920c <__lo0bits>
 8009708:	9900      	ldr	r1, [sp, #0]
 800970a:	b300      	cbz	r0, 800974e <__d2b+0x82>
 800970c:	9a01      	ldr	r2, [sp, #4]
 800970e:	f1c0 0320 	rsb	r3, r0, #32
 8009712:	fa02 f303 	lsl.w	r3, r2, r3
 8009716:	430b      	orrs	r3, r1
 8009718:	40c2      	lsrs	r2, r0
 800971a:	6163      	str	r3, [r4, #20]
 800971c:	9201      	str	r2, [sp, #4]
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	61a3      	str	r3, [r4, #24]
 8009722:	2b00      	cmp	r3, #0
 8009724:	bf14      	ite	ne
 8009726:	2202      	movne	r2, #2
 8009728:	2201      	moveq	r2, #1
 800972a:	6122      	str	r2, [r4, #16]
 800972c:	b1d5      	cbz	r5, 8009764 <__d2b+0x98>
 800972e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009732:	4405      	add	r5, r0
 8009734:	f8c9 5000 	str.w	r5, [r9]
 8009738:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800973c:	f8c8 0000 	str.w	r0, [r8]
 8009740:	4620      	mov	r0, r4
 8009742:	b003      	add	sp, #12
 8009744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800974c:	e7d5      	b.n	80096fa <__d2b+0x2e>
 800974e:	6161      	str	r1, [r4, #20]
 8009750:	e7e5      	b.n	800971e <__d2b+0x52>
 8009752:	a801      	add	r0, sp, #4
 8009754:	f7ff fd5a 	bl	800920c <__lo0bits>
 8009758:	9b01      	ldr	r3, [sp, #4]
 800975a:	6163      	str	r3, [r4, #20]
 800975c:	2201      	movs	r2, #1
 800975e:	6122      	str	r2, [r4, #16]
 8009760:	3020      	adds	r0, #32
 8009762:	e7e3      	b.n	800972c <__d2b+0x60>
 8009764:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800976c:	f8c9 0000 	str.w	r0, [r9]
 8009770:	6918      	ldr	r0, [r3, #16]
 8009772:	f7ff fd2b 	bl	80091cc <__hi0bits>
 8009776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800977a:	e7df      	b.n	800973c <__d2b+0x70>
 800977c:	0800a14f 	.word	0x0800a14f
 8009780:	0800a160 	.word	0x0800a160

08009784 <_calloc_r>:
 8009784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009786:	fba1 2402 	umull	r2, r4, r1, r2
 800978a:	b94c      	cbnz	r4, 80097a0 <_calloc_r+0x1c>
 800978c:	4611      	mov	r1, r2
 800978e:	9201      	str	r2, [sp, #4]
 8009790:	f7fd ff56 	bl	8007640 <_malloc_r>
 8009794:	9a01      	ldr	r2, [sp, #4]
 8009796:	4605      	mov	r5, r0
 8009798:	b930      	cbnz	r0, 80097a8 <_calloc_r+0x24>
 800979a:	4628      	mov	r0, r5
 800979c:	b003      	add	sp, #12
 800979e:	bd30      	pop	{r4, r5, pc}
 80097a0:	220c      	movs	r2, #12
 80097a2:	6002      	str	r2, [r0, #0]
 80097a4:	2500      	movs	r5, #0
 80097a6:	e7f8      	b.n	800979a <_calloc_r+0x16>
 80097a8:	4621      	mov	r1, r4
 80097aa:	f7fd fed5 	bl	8007558 <memset>
 80097ae:	e7f4      	b.n	800979a <_calloc_r+0x16>

080097b0 <_read_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4d07      	ldr	r5, [pc, #28]	; (80097d0 <_read_r+0x20>)
 80097b4:	4604      	mov	r4, r0
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	2200      	movs	r2, #0
 80097bc:	602a      	str	r2, [r5, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f7f8 fc1a 	bl	8001ff8 <_read>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d102      	bne.n	80097ce <_read_r+0x1e>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b103      	cbz	r3, 80097ce <_read_r+0x1e>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	200111ac 	.word	0x200111ac

080097d4 <__assert_func>:
 80097d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097d6:	4614      	mov	r4, r2
 80097d8:	461a      	mov	r2, r3
 80097da:	4b09      	ldr	r3, [pc, #36]	; (8009800 <__assert_func+0x2c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4605      	mov	r5, r0
 80097e0:	68d8      	ldr	r0, [r3, #12]
 80097e2:	b14c      	cbz	r4, 80097f8 <__assert_func+0x24>
 80097e4:	4b07      	ldr	r3, [pc, #28]	; (8009804 <__assert_func+0x30>)
 80097e6:	9100      	str	r1, [sp, #0]
 80097e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097ec:	4906      	ldr	r1, [pc, #24]	; (8009808 <__assert_func+0x34>)
 80097ee:	462b      	mov	r3, r5
 80097f0:	f000 f80e 	bl	8009810 <fiprintf>
 80097f4:	f000 fa58 	bl	8009ca8 <abort>
 80097f8:	4b04      	ldr	r3, [pc, #16]	; (800980c <__assert_func+0x38>)
 80097fa:	461c      	mov	r4, r3
 80097fc:	e7f3      	b.n	80097e6 <__assert_func+0x12>
 80097fe:	bf00      	nop
 8009800:	20000024 	.word	0x20000024
 8009804:	0800a2bc 	.word	0x0800a2bc
 8009808:	0800a2c9 	.word	0x0800a2c9
 800980c:	0800a2f7 	.word	0x0800a2f7

08009810 <fiprintf>:
 8009810:	b40e      	push	{r1, r2, r3}
 8009812:	b503      	push	{r0, r1, lr}
 8009814:	4601      	mov	r1, r0
 8009816:	ab03      	add	r3, sp, #12
 8009818:	4805      	ldr	r0, [pc, #20]	; (8009830 <fiprintf+0x20>)
 800981a:	f853 2b04 	ldr.w	r2, [r3], #4
 800981e:	6800      	ldr	r0, [r0, #0]
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	f000 f843 	bl	80098ac <_vfiprintf_r>
 8009826:	b002      	add	sp, #8
 8009828:	f85d eb04 	ldr.w	lr, [sp], #4
 800982c:	b003      	add	sp, #12
 800982e:	4770      	bx	lr
 8009830:	20000024 	.word	0x20000024

08009834 <__ascii_mbtowc>:
 8009834:	b082      	sub	sp, #8
 8009836:	b901      	cbnz	r1, 800983a <__ascii_mbtowc+0x6>
 8009838:	a901      	add	r1, sp, #4
 800983a:	b142      	cbz	r2, 800984e <__ascii_mbtowc+0x1a>
 800983c:	b14b      	cbz	r3, 8009852 <__ascii_mbtowc+0x1e>
 800983e:	7813      	ldrb	r3, [r2, #0]
 8009840:	600b      	str	r3, [r1, #0]
 8009842:	7812      	ldrb	r2, [r2, #0]
 8009844:	1e10      	subs	r0, r2, #0
 8009846:	bf18      	it	ne
 8009848:	2001      	movne	r0, #1
 800984a:	b002      	add	sp, #8
 800984c:	4770      	bx	lr
 800984e:	4610      	mov	r0, r2
 8009850:	e7fb      	b.n	800984a <__ascii_mbtowc+0x16>
 8009852:	f06f 0001 	mvn.w	r0, #1
 8009856:	e7f8      	b.n	800984a <__ascii_mbtowc+0x16>

08009858 <__sfputc_r>:
 8009858:	6893      	ldr	r3, [r2, #8]
 800985a:	3b01      	subs	r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	b410      	push	{r4}
 8009860:	6093      	str	r3, [r2, #8]
 8009862:	da08      	bge.n	8009876 <__sfputc_r+0x1e>
 8009864:	6994      	ldr	r4, [r2, #24]
 8009866:	42a3      	cmp	r3, r4
 8009868:	db01      	blt.n	800986e <__sfputc_r+0x16>
 800986a:	290a      	cmp	r1, #10
 800986c:	d103      	bne.n	8009876 <__sfputc_r+0x1e>
 800986e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009872:	f000 b94b 	b.w	8009b0c <__swbuf_r>
 8009876:	6813      	ldr	r3, [r2, #0]
 8009878:	1c58      	adds	r0, r3, #1
 800987a:	6010      	str	r0, [r2, #0]
 800987c:	7019      	strb	r1, [r3, #0]
 800987e:	4608      	mov	r0, r1
 8009880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009884:	4770      	bx	lr

08009886 <__sfputs_r>:
 8009886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009888:	4606      	mov	r6, r0
 800988a:	460f      	mov	r7, r1
 800988c:	4614      	mov	r4, r2
 800988e:	18d5      	adds	r5, r2, r3
 8009890:	42ac      	cmp	r4, r5
 8009892:	d101      	bne.n	8009898 <__sfputs_r+0x12>
 8009894:	2000      	movs	r0, #0
 8009896:	e007      	b.n	80098a8 <__sfputs_r+0x22>
 8009898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989c:	463a      	mov	r2, r7
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ffda 	bl	8009858 <__sfputc_r>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	d1f3      	bne.n	8009890 <__sfputs_r+0xa>
 80098a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098ac <_vfiprintf_r>:
 80098ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b0:	460d      	mov	r5, r1
 80098b2:	b09d      	sub	sp, #116	; 0x74
 80098b4:	4614      	mov	r4, r2
 80098b6:	4698      	mov	r8, r3
 80098b8:	4606      	mov	r6, r0
 80098ba:	b118      	cbz	r0, 80098c4 <_vfiprintf_r+0x18>
 80098bc:	6983      	ldr	r3, [r0, #24]
 80098be:	b90b      	cbnz	r3, 80098c4 <_vfiprintf_r+0x18>
 80098c0:	f7fd fd66 	bl	8007390 <__sinit>
 80098c4:	4b89      	ldr	r3, [pc, #548]	; (8009aec <_vfiprintf_r+0x240>)
 80098c6:	429d      	cmp	r5, r3
 80098c8:	d11b      	bne.n	8009902 <_vfiprintf_r+0x56>
 80098ca:	6875      	ldr	r5, [r6, #4]
 80098cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ce:	07d9      	lsls	r1, r3, #31
 80098d0:	d405      	bmi.n	80098de <_vfiprintf_r+0x32>
 80098d2:	89ab      	ldrh	r3, [r5, #12]
 80098d4:	059a      	lsls	r2, r3, #22
 80098d6:	d402      	bmi.n	80098de <_vfiprintf_r+0x32>
 80098d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098da:	f7fd fe1c 	bl	8007516 <__retarget_lock_acquire_recursive>
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	071b      	lsls	r3, r3, #28
 80098e2:	d501      	bpl.n	80098e8 <_vfiprintf_r+0x3c>
 80098e4:	692b      	ldr	r3, [r5, #16]
 80098e6:	b9eb      	cbnz	r3, 8009924 <_vfiprintf_r+0x78>
 80098e8:	4629      	mov	r1, r5
 80098ea:	4630      	mov	r0, r6
 80098ec:	f000 f96e 	bl	8009bcc <__swsetup_r>
 80098f0:	b1c0      	cbz	r0, 8009924 <_vfiprintf_r+0x78>
 80098f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098f4:	07dc      	lsls	r4, r3, #31
 80098f6:	d50e      	bpl.n	8009916 <_vfiprintf_r+0x6a>
 80098f8:	f04f 30ff 	mov.w	r0, #4294967295
 80098fc:	b01d      	add	sp, #116	; 0x74
 80098fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009902:	4b7b      	ldr	r3, [pc, #492]	; (8009af0 <_vfiprintf_r+0x244>)
 8009904:	429d      	cmp	r5, r3
 8009906:	d101      	bne.n	800990c <_vfiprintf_r+0x60>
 8009908:	68b5      	ldr	r5, [r6, #8]
 800990a:	e7df      	b.n	80098cc <_vfiprintf_r+0x20>
 800990c:	4b79      	ldr	r3, [pc, #484]	; (8009af4 <_vfiprintf_r+0x248>)
 800990e:	429d      	cmp	r5, r3
 8009910:	bf08      	it	eq
 8009912:	68f5      	ldreq	r5, [r6, #12]
 8009914:	e7da      	b.n	80098cc <_vfiprintf_r+0x20>
 8009916:	89ab      	ldrh	r3, [r5, #12]
 8009918:	0598      	lsls	r0, r3, #22
 800991a:	d4ed      	bmi.n	80098f8 <_vfiprintf_r+0x4c>
 800991c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800991e:	f7fd fdfb 	bl	8007518 <__retarget_lock_release_recursive>
 8009922:	e7e9      	b.n	80098f8 <_vfiprintf_r+0x4c>
 8009924:	2300      	movs	r3, #0
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	2320      	movs	r3, #32
 800992a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800992e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009932:	2330      	movs	r3, #48	; 0x30
 8009934:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009af8 <_vfiprintf_r+0x24c>
 8009938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800993c:	f04f 0901 	mov.w	r9, #1
 8009940:	4623      	mov	r3, r4
 8009942:	469a      	mov	sl, r3
 8009944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009948:	b10a      	cbz	r2, 800994e <_vfiprintf_r+0xa2>
 800994a:	2a25      	cmp	r2, #37	; 0x25
 800994c:	d1f9      	bne.n	8009942 <_vfiprintf_r+0x96>
 800994e:	ebba 0b04 	subs.w	fp, sl, r4
 8009952:	d00b      	beq.n	800996c <_vfiprintf_r+0xc0>
 8009954:	465b      	mov	r3, fp
 8009956:	4622      	mov	r2, r4
 8009958:	4629      	mov	r1, r5
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ff93 	bl	8009886 <__sfputs_r>
 8009960:	3001      	adds	r0, #1
 8009962:	f000 80aa 	beq.w	8009aba <_vfiprintf_r+0x20e>
 8009966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009968:	445a      	add	r2, fp
 800996a:	9209      	str	r2, [sp, #36]	; 0x24
 800996c:	f89a 3000 	ldrb.w	r3, [sl]
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 80a2 	beq.w	8009aba <_vfiprintf_r+0x20e>
 8009976:	2300      	movs	r3, #0
 8009978:	f04f 32ff 	mov.w	r2, #4294967295
 800997c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009980:	f10a 0a01 	add.w	sl, sl, #1
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	9307      	str	r3, [sp, #28]
 8009988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800998c:	931a      	str	r3, [sp, #104]	; 0x68
 800998e:	4654      	mov	r4, sl
 8009990:	2205      	movs	r2, #5
 8009992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009996:	4858      	ldr	r0, [pc, #352]	; (8009af8 <_vfiprintf_r+0x24c>)
 8009998:	f7f6 fc2a 	bl	80001f0 <memchr>
 800999c:	9a04      	ldr	r2, [sp, #16]
 800999e:	b9d8      	cbnz	r0, 80099d8 <_vfiprintf_r+0x12c>
 80099a0:	06d1      	lsls	r1, r2, #27
 80099a2:	bf44      	itt	mi
 80099a4:	2320      	movmi	r3, #32
 80099a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099aa:	0713      	lsls	r3, r2, #28
 80099ac:	bf44      	itt	mi
 80099ae:	232b      	movmi	r3, #43	; 0x2b
 80099b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b4:	f89a 3000 	ldrb.w	r3, [sl]
 80099b8:	2b2a      	cmp	r3, #42	; 0x2a
 80099ba:	d015      	beq.n	80099e8 <_vfiprintf_r+0x13c>
 80099bc:	9a07      	ldr	r2, [sp, #28]
 80099be:	4654      	mov	r4, sl
 80099c0:	2000      	movs	r0, #0
 80099c2:	f04f 0c0a 	mov.w	ip, #10
 80099c6:	4621      	mov	r1, r4
 80099c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099cc:	3b30      	subs	r3, #48	; 0x30
 80099ce:	2b09      	cmp	r3, #9
 80099d0:	d94e      	bls.n	8009a70 <_vfiprintf_r+0x1c4>
 80099d2:	b1b0      	cbz	r0, 8009a02 <_vfiprintf_r+0x156>
 80099d4:	9207      	str	r2, [sp, #28]
 80099d6:	e014      	b.n	8009a02 <_vfiprintf_r+0x156>
 80099d8:	eba0 0308 	sub.w	r3, r0, r8
 80099dc:	fa09 f303 	lsl.w	r3, r9, r3
 80099e0:	4313      	orrs	r3, r2
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	46a2      	mov	sl, r4
 80099e6:	e7d2      	b.n	800998e <_vfiprintf_r+0xe2>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	1d19      	adds	r1, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9103      	str	r1, [sp, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfbb      	ittet	lt
 80099f4:	425b      	neglt	r3, r3
 80099f6:	f042 0202 	orrlt.w	r2, r2, #2
 80099fa:	9307      	strge	r3, [sp, #28]
 80099fc:	9307      	strlt	r3, [sp, #28]
 80099fe:	bfb8      	it	lt
 8009a00:	9204      	strlt	r2, [sp, #16]
 8009a02:	7823      	ldrb	r3, [r4, #0]
 8009a04:	2b2e      	cmp	r3, #46	; 0x2e
 8009a06:	d10c      	bne.n	8009a22 <_vfiprintf_r+0x176>
 8009a08:	7863      	ldrb	r3, [r4, #1]
 8009a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0c:	d135      	bne.n	8009a7a <_vfiprintf_r+0x1ce>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	1d1a      	adds	r2, r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	9203      	str	r2, [sp, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfb8      	it	lt
 8009a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a1e:	3402      	adds	r4, #2
 8009a20:	9305      	str	r3, [sp, #20]
 8009a22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b08 <_vfiprintf_r+0x25c>
 8009a26:	7821      	ldrb	r1, [r4, #0]
 8009a28:	2203      	movs	r2, #3
 8009a2a:	4650      	mov	r0, sl
 8009a2c:	f7f6 fbe0 	bl	80001f0 <memchr>
 8009a30:	b140      	cbz	r0, 8009a44 <_vfiprintf_r+0x198>
 8009a32:	2340      	movs	r3, #64	; 0x40
 8009a34:	eba0 000a 	sub.w	r0, r0, sl
 8009a38:	fa03 f000 	lsl.w	r0, r3, r0
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	4303      	orrs	r3, r0
 8009a40:	3401      	adds	r4, #1
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a48:	482c      	ldr	r0, [pc, #176]	; (8009afc <_vfiprintf_r+0x250>)
 8009a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a4e:	2206      	movs	r2, #6
 8009a50:	f7f6 fbce 	bl	80001f0 <memchr>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d03f      	beq.n	8009ad8 <_vfiprintf_r+0x22c>
 8009a58:	4b29      	ldr	r3, [pc, #164]	; (8009b00 <_vfiprintf_r+0x254>)
 8009a5a:	bb1b      	cbnz	r3, 8009aa4 <_vfiprintf_r+0x1f8>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	3307      	adds	r3, #7
 8009a60:	f023 0307 	bic.w	r3, r3, #7
 8009a64:	3308      	adds	r3, #8
 8009a66:	9303      	str	r3, [sp, #12]
 8009a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6a:	443b      	add	r3, r7
 8009a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6e:	e767      	b.n	8009940 <_vfiprintf_r+0x94>
 8009a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a74:	460c      	mov	r4, r1
 8009a76:	2001      	movs	r0, #1
 8009a78:	e7a5      	b.n	80099c6 <_vfiprintf_r+0x11a>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	3401      	adds	r4, #1
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	4619      	mov	r1, r3
 8009a82:	f04f 0c0a 	mov.w	ip, #10
 8009a86:	4620      	mov	r0, r4
 8009a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a8c:	3a30      	subs	r2, #48	; 0x30
 8009a8e:	2a09      	cmp	r2, #9
 8009a90:	d903      	bls.n	8009a9a <_vfiprintf_r+0x1ee>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d0c5      	beq.n	8009a22 <_vfiprintf_r+0x176>
 8009a96:	9105      	str	r1, [sp, #20]
 8009a98:	e7c3      	b.n	8009a22 <_vfiprintf_r+0x176>
 8009a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e7f0      	b.n	8009a86 <_vfiprintf_r+0x1da>
 8009aa4:	ab03      	add	r3, sp, #12
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4b16      	ldr	r3, [pc, #88]	; (8009b04 <_vfiprintf_r+0x258>)
 8009aac:	a904      	add	r1, sp, #16
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7fd feda 	bl	8007868 <_printf_float>
 8009ab4:	4607      	mov	r7, r0
 8009ab6:	1c78      	adds	r0, r7, #1
 8009ab8:	d1d6      	bne.n	8009a68 <_vfiprintf_r+0x1bc>
 8009aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009abc:	07d9      	lsls	r1, r3, #31
 8009abe:	d405      	bmi.n	8009acc <_vfiprintf_r+0x220>
 8009ac0:	89ab      	ldrh	r3, [r5, #12]
 8009ac2:	059a      	lsls	r2, r3, #22
 8009ac4:	d402      	bmi.n	8009acc <_vfiprintf_r+0x220>
 8009ac6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ac8:	f7fd fd26 	bl	8007518 <__retarget_lock_release_recursive>
 8009acc:	89ab      	ldrh	r3, [r5, #12]
 8009ace:	065b      	lsls	r3, r3, #25
 8009ad0:	f53f af12 	bmi.w	80098f8 <_vfiprintf_r+0x4c>
 8009ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ad6:	e711      	b.n	80098fc <_vfiprintf_r+0x50>
 8009ad8:	ab03      	add	r3, sp, #12
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	462a      	mov	r2, r5
 8009ade:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <_vfiprintf_r+0x258>)
 8009ae0:	a904      	add	r1, sp, #16
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7fe f964 	bl	8007db0 <_printf_i>
 8009ae8:	e7e4      	b.n	8009ab4 <_vfiprintf_r+0x208>
 8009aea:	bf00      	nop
 8009aec:	0800a058 	.word	0x0800a058
 8009af0:	0800a078 	.word	0x0800a078
 8009af4:	0800a038 	.word	0x0800a038
 8009af8:	0800a302 	.word	0x0800a302
 8009afc:	0800a30c 	.word	0x0800a30c
 8009b00:	08007869 	.word	0x08007869
 8009b04:	08009887 	.word	0x08009887
 8009b08:	0800a308 	.word	0x0800a308

08009b0c <__swbuf_r>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	460e      	mov	r6, r1
 8009b10:	4614      	mov	r4, r2
 8009b12:	4605      	mov	r5, r0
 8009b14:	b118      	cbz	r0, 8009b1e <__swbuf_r+0x12>
 8009b16:	6983      	ldr	r3, [r0, #24]
 8009b18:	b90b      	cbnz	r3, 8009b1e <__swbuf_r+0x12>
 8009b1a:	f7fd fc39 	bl	8007390 <__sinit>
 8009b1e:	4b21      	ldr	r3, [pc, #132]	; (8009ba4 <__swbuf_r+0x98>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	d12b      	bne.n	8009b7c <__swbuf_r+0x70>
 8009b24:	686c      	ldr	r4, [r5, #4]
 8009b26:	69a3      	ldr	r3, [r4, #24]
 8009b28:	60a3      	str	r3, [r4, #8]
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	071a      	lsls	r2, r3, #28
 8009b2e:	d52f      	bpl.n	8009b90 <__swbuf_r+0x84>
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	b36b      	cbz	r3, 8009b90 <__swbuf_r+0x84>
 8009b34:	6923      	ldr	r3, [r4, #16]
 8009b36:	6820      	ldr	r0, [r4, #0]
 8009b38:	1ac0      	subs	r0, r0, r3
 8009b3a:	6963      	ldr	r3, [r4, #20]
 8009b3c:	b2f6      	uxtb	r6, r6
 8009b3e:	4283      	cmp	r3, r0
 8009b40:	4637      	mov	r7, r6
 8009b42:	dc04      	bgt.n	8009b4e <__swbuf_r+0x42>
 8009b44:	4621      	mov	r1, r4
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7ff fa3a 	bl	8008fc0 <_fflush_r>
 8009b4c:	bb30      	cbnz	r0, 8009b9c <__swbuf_r+0x90>
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	60a3      	str	r3, [r4, #8]
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	6022      	str	r2, [r4, #0]
 8009b5a:	701e      	strb	r6, [r3, #0]
 8009b5c:	6963      	ldr	r3, [r4, #20]
 8009b5e:	3001      	adds	r0, #1
 8009b60:	4283      	cmp	r3, r0
 8009b62:	d004      	beq.n	8009b6e <__swbuf_r+0x62>
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	07db      	lsls	r3, r3, #31
 8009b68:	d506      	bpl.n	8009b78 <__swbuf_r+0x6c>
 8009b6a:	2e0a      	cmp	r6, #10
 8009b6c:	d104      	bne.n	8009b78 <__swbuf_r+0x6c>
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4628      	mov	r0, r5
 8009b72:	f7ff fa25 	bl	8008fc0 <_fflush_r>
 8009b76:	b988      	cbnz	r0, 8009b9c <__swbuf_r+0x90>
 8009b78:	4638      	mov	r0, r7
 8009b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <__swbuf_r+0x9c>)
 8009b7e:	429c      	cmp	r4, r3
 8009b80:	d101      	bne.n	8009b86 <__swbuf_r+0x7a>
 8009b82:	68ac      	ldr	r4, [r5, #8]
 8009b84:	e7cf      	b.n	8009b26 <__swbuf_r+0x1a>
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <__swbuf_r+0xa0>)
 8009b88:	429c      	cmp	r4, r3
 8009b8a:	bf08      	it	eq
 8009b8c:	68ec      	ldreq	r4, [r5, #12]
 8009b8e:	e7ca      	b.n	8009b26 <__swbuf_r+0x1a>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 f81a 	bl	8009bcc <__swsetup_r>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d0cb      	beq.n	8009b34 <__swbuf_r+0x28>
 8009b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8009ba0:	e7ea      	b.n	8009b78 <__swbuf_r+0x6c>
 8009ba2:	bf00      	nop
 8009ba4:	0800a058 	.word	0x0800a058
 8009ba8:	0800a078 	.word	0x0800a078
 8009bac:	0800a038 	.word	0x0800a038

08009bb0 <__ascii_wctomb>:
 8009bb0:	b149      	cbz	r1, 8009bc6 <__ascii_wctomb+0x16>
 8009bb2:	2aff      	cmp	r2, #255	; 0xff
 8009bb4:	bf85      	ittet	hi
 8009bb6:	238a      	movhi	r3, #138	; 0x8a
 8009bb8:	6003      	strhi	r3, [r0, #0]
 8009bba:	700a      	strbls	r2, [r1, #0]
 8009bbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bc0:	bf98      	it	ls
 8009bc2:	2001      	movls	r0, #1
 8009bc4:	4770      	bx	lr
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	4770      	bx	lr
	...

08009bcc <__swsetup_r>:
 8009bcc:	4b32      	ldr	r3, [pc, #200]	; (8009c98 <__swsetup_r+0xcc>)
 8009bce:	b570      	push	{r4, r5, r6, lr}
 8009bd0:	681d      	ldr	r5, [r3, #0]
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	b125      	cbz	r5, 8009be2 <__swsetup_r+0x16>
 8009bd8:	69ab      	ldr	r3, [r5, #24]
 8009bda:	b913      	cbnz	r3, 8009be2 <__swsetup_r+0x16>
 8009bdc:	4628      	mov	r0, r5
 8009bde:	f7fd fbd7 	bl	8007390 <__sinit>
 8009be2:	4b2e      	ldr	r3, [pc, #184]	; (8009c9c <__swsetup_r+0xd0>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	d10f      	bne.n	8009c08 <__swsetup_r+0x3c>
 8009be8:	686c      	ldr	r4, [r5, #4]
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bf0:	0719      	lsls	r1, r3, #28
 8009bf2:	d42c      	bmi.n	8009c4e <__swsetup_r+0x82>
 8009bf4:	06dd      	lsls	r5, r3, #27
 8009bf6:	d411      	bmi.n	8009c1c <__swsetup_r+0x50>
 8009bf8:	2309      	movs	r3, #9
 8009bfa:	6033      	str	r3, [r6, #0]
 8009bfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	f04f 30ff 	mov.w	r0, #4294967295
 8009c06:	e03e      	b.n	8009c86 <__swsetup_r+0xba>
 8009c08:	4b25      	ldr	r3, [pc, #148]	; (8009ca0 <__swsetup_r+0xd4>)
 8009c0a:	429c      	cmp	r4, r3
 8009c0c:	d101      	bne.n	8009c12 <__swsetup_r+0x46>
 8009c0e:	68ac      	ldr	r4, [r5, #8]
 8009c10:	e7eb      	b.n	8009bea <__swsetup_r+0x1e>
 8009c12:	4b24      	ldr	r3, [pc, #144]	; (8009ca4 <__swsetup_r+0xd8>)
 8009c14:	429c      	cmp	r4, r3
 8009c16:	bf08      	it	eq
 8009c18:	68ec      	ldreq	r4, [r5, #12]
 8009c1a:	e7e6      	b.n	8009bea <__swsetup_r+0x1e>
 8009c1c:	0758      	lsls	r0, r3, #29
 8009c1e:	d512      	bpl.n	8009c46 <__swsetup_r+0x7a>
 8009c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c22:	b141      	cbz	r1, 8009c36 <__swsetup_r+0x6a>
 8009c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c28:	4299      	cmp	r1, r3
 8009c2a:	d002      	beq.n	8009c32 <__swsetup_r+0x66>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7fd fc9b 	bl	8007568 <_free_r>
 8009c32:	2300      	movs	r3, #0
 8009c34:	6363      	str	r3, [r4, #52]	; 0x34
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	6063      	str	r3, [r4, #4]
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	f043 0308 	orr.w	r3, r3, #8
 8009c4c:	81a3      	strh	r3, [r4, #12]
 8009c4e:	6923      	ldr	r3, [r4, #16]
 8009c50:	b94b      	cbnz	r3, 8009c66 <__swsetup_r+0x9a>
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c5c:	d003      	beq.n	8009c66 <__swsetup_r+0x9a>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4630      	mov	r0, r6
 8009c62:	f000 f84d 	bl	8009d00 <__smakebuf_r>
 8009c66:	89a0      	ldrh	r0, [r4, #12]
 8009c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c6c:	f010 0301 	ands.w	r3, r0, #1
 8009c70:	d00a      	beq.n	8009c88 <__swsetup_r+0xbc>
 8009c72:	2300      	movs	r3, #0
 8009c74:	60a3      	str	r3, [r4, #8]
 8009c76:	6963      	ldr	r3, [r4, #20]
 8009c78:	425b      	negs	r3, r3
 8009c7a:	61a3      	str	r3, [r4, #24]
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	b943      	cbnz	r3, 8009c92 <__swsetup_r+0xc6>
 8009c80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c84:	d1ba      	bne.n	8009bfc <__swsetup_r+0x30>
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
 8009c88:	0781      	lsls	r1, r0, #30
 8009c8a:	bf58      	it	pl
 8009c8c:	6963      	ldrpl	r3, [r4, #20]
 8009c8e:	60a3      	str	r3, [r4, #8]
 8009c90:	e7f4      	b.n	8009c7c <__swsetup_r+0xb0>
 8009c92:	2000      	movs	r0, #0
 8009c94:	e7f7      	b.n	8009c86 <__swsetup_r+0xba>
 8009c96:	bf00      	nop
 8009c98:	20000024 	.word	0x20000024
 8009c9c:	0800a058 	.word	0x0800a058
 8009ca0:	0800a078 	.word	0x0800a078
 8009ca4:	0800a038 	.word	0x0800a038

08009ca8 <abort>:
 8009ca8:	b508      	push	{r3, lr}
 8009caa:	2006      	movs	r0, #6
 8009cac:	f000 f890 	bl	8009dd0 <raise>
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	f7f8 f997 	bl	8001fe4 <_exit>

08009cb6 <__swhatbuf_r>:
 8009cb6:	b570      	push	{r4, r5, r6, lr}
 8009cb8:	460e      	mov	r6, r1
 8009cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	b096      	sub	sp, #88	; 0x58
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	461d      	mov	r5, r3
 8009cc6:	da08      	bge.n	8009cda <__swhatbuf_r+0x24>
 8009cc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	602a      	str	r2, [r5, #0]
 8009cd0:	061a      	lsls	r2, r3, #24
 8009cd2:	d410      	bmi.n	8009cf6 <__swhatbuf_r+0x40>
 8009cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd8:	e00e      	b.n	8009cf8 <__swhatbuf_r+0x42>
 8009cda:	466a      	mov	r2, sp
 8009cdc:	f000 f894 	bl	8009e08 <_fstat_r>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	dbf1      	blt.n	8009cc8 <__swhatbuf_r+0x12>
 8009ce4:	9a01      	ldr	r2, [sp, #4]
 8009ce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cee:	425a      	negs	r2, r3
 8009cf0:	415a      	adcs	r2, r3
 8009cf2:	602a      	str	r2, [r5, #0]
 8009cf4:	e7ee      	b.n	8009cd4 <__swhatbuf_r+0x1e>
 8009cf6:	2340      	movs	r3, #64	; 0x40
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	6023      	str	r3, [r4, #0]
 8009cfc:	b016      	add	sp, #88	; 0x58
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}

08009d00 <__smakebuf_r>:
 8009d00:	898b      	ldrh	r3, [r1, #12]
 8009d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d04:	079d      	lsls	r5, r3, #30
 8009d06:	4606      	mov	r6, r0
 8009d08:	460c      	mov	r4, r1
 8009d0a:	d507      	bpl.n	8009d1c <__smakebuf_r+0x1c>
 8009d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	6123      	str	r3, [r4, #16]
 8009d14:	2301      	movs	r3, #1
 8009d16:	6163      	str	r3, [r4, #20]
 8009d18:	b002      	add	sp, #8
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	ab01      	add	r3, sp, #4
 8009d1e:	466a      	mov	r2, sp
 8009d20:	f7ff ffc9 	bl	8009cb6 <__swhatbuf_r>
 8009d24:	9900      	ldr	r1, [sp, #0]
 8009d26:	4605      	mov	r5, r0
 8009d28:	4630      	mov	r0, r6
 8009d2a:	f7fd fc89 	bl	8007640 <_malloc_r>
 8009d2e:	b948      	cbnz	r0, 8009d44 <__smakebuf_r+0x44>
 8009d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d34:	059a      	lsls	r2, r3, #22
 8009d36:	d4ef      	bmi.n	8009d18 <__smakebuf_r+0x18>
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	f043 0302 	orr.w	r3, r3, #2
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	e7e3      	b.n	8009d0c <__smakebuf_r+0xc>
 8009d44:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <__smakebuf_r+0x7c>)
 8009d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	6020      	str	r0, [r4, #0]
 8009d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d50:	81a3      	strh	r3, [r4, #12]
 8009d52:	9b00      	ldr	r3, [sp, #0]
 8009d54:	6163      	str	r3, [r4, #20]
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	6120      	str	r0, [r4, #16]
 8009d5a:	b15b      	cbz	r3, 8009d74 <__smakebuf_r+0x74>
 8009d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d60:	4630      	mov	r0, r6
 8009d62:	f000 f863 	bl	8009e2c <_isatty_r>
 8009d66:	b128      	cbz	r0, 8009d74 <__smakebuf_r+0x74>
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	f043 0301 	orr.w	r3, r3, #1
 8009d72:	81a3      	strh	r3, [r4, #12]
 8009d74:	89a0      	ldrh	r0, [r4, #12]
 8009d76:	4305      	orrs	r5, r0
 8009d78:	81a5      	strh	r5, [r4, #12]
 8009d7a:	e7cd      	b.n	8009d18 <__smakebuf_r+0x18>
 8009d7c:	08007329 	.word	0x08007329

08009d80 <_raise_r>:
 8009d80:	291f      	cmp	r1, #31
 8009d82:	b538      	push	{r3, r4, r5, lr}
 8009d84:	4604      	mov	r4, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	d904      	bls.n	8009d94 <_raise_r+0x14>
 8009d8a:	2316      	movs	r3, #22
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d96:	b112      	cbz	r2, 8009d9e <_raise_r+0x1e>
 8009d98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d9c:	b94b      	cbnz	r3, 8009db2 <_raise_r+0x32>
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 f830 	bl	8009e04 <_getpid_r>
 8009da4:	462a      	mov	r2, r5
 8009da6:	4601      	mov	r1, r0
 8009da8:	4620      	mov	r0, r4
 8009daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dae:	f000 b817 	b.w	8009de0 <_kill_r>
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d00a      	beq.n	8009dcc <_raise_r+0x4c>
 8009db6:	1c59      	adds	r1, r3, #1
 8009db8:	d103      	bne.n	8009dc2 <_raise_r+0x42>
 8009dba:	2316      	movs	r3, #22
 8009dbc:	6003      	str	r3, [r0, #0]
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	e7e7      	b.n	8009d92 <_raise_r+0x12>
 8009dc2:	2400      	movs	r4, #0
 8009dc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dc8:	4628      	mov	r0, r5
 8009dca:	4798      	blx	r3
 8009dcc:	2000      	movs	r0, #0
 8009dce:	e7e0      	b.n	8009d92 <_raise_r+0x12>

08009dd0 <raise>:
 8009dd0:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <raise+0xc>)
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	6818      	ldr	r0, [r3, #0]
 8009dd6:	f7ff bfd3 	b.w	8009d80 <_raise_r>
 8009dda:	bf00      	nop
 8009ddc:	20000024 	.word	0x20000024

08009de0 <_kill_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d07      	ldr	r5, [pc, #28]	; (8009e00 <_kill_r+0x20>)
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	4611      	mov	r1, r2
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	f7f8 f8e9 	bl	8001fc4 <_kill>
 8009df2:	1c43      	adds	r3, r0, #1
 8009df4:	d102      	bne.n	8009dfc <_kill_r+0x1c>
 8009df6:	682b      	ldr	r3, [r5, #0]
 8009df8:	b103      	cbz	r3, 8009dfc <_kill_r+0x1c>
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	bd38      	pop	{r3, r4, r5, pc}
 8009dfe:	bf00      	nop
 8009e00:	200111ac 	.word	0x200111ac

08009e04 <_getpid_r>:
 8009e04:	f7f8 b8d6 	b.w	8001fb4 <_getpid>

08009e08 <_fstat_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	; (8009e28 <_fstat_r+0x20>)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4608      	mov	r0, r1
 8009e12:	4611      	mov	r1, r2
 8009e14:	602b      	str	r3, [r5, #0]
 8009e16:	f7f8 f934 	bl	8002082 <_fstat>
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	d102      	bne.n	8009e24 <_fstat_r+0x1c>
 8009e1e:	682b      	ldr	r3, [r5, #0]
 8009e20:	b103      	cbz	r3, 8009e24 <_fstat_r+0x1c>
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	bd38      	pop	{r3, r4, r5, pc}
 8009e26:	bf00      	nop
 8009e28:	200111ac 	.word	0x200111ac

08009e2c <_isatty_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d06      	ldr	r5, [pc, #24]	; (8009e48 <_isatty_r+0x1c>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7f8 f933 	bl	80020a2 <_isatty>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_isatty_r+0x1a>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_isatty_r+0x1a>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	200111ac 	.word	0x200111ac

08009e4c <_init>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr

08009e58 <_fini>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr
