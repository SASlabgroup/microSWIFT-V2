
microSWIFT_U5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a72c  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800a960  0800a960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aafc  0800aafc  0001aafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab04  0800ab04  0001ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ab08  0800ab08  0001ab08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800ab0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000a1384  20000010  0800ab1c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200a1394  0800ab1c  00021394  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dd89  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006741  00000000  00000000  0004ddcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002008  00000000  00000000  00054510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c68  00000000  00000000  00056518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a83b  00000000  00000000  00058180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d20c  00000000  00000000  000929bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169a28  00000000  00000000  000bfbc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002295ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f88  00000000  00000000  00229640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000010 	.word	0x20000010
 8000250:	00000000 	.word	0x00000000
 8000254:	0800a948 	.word	0x0800a948

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000014 	.word	0x20000014
 8000270:	0800a948 	.word	0x0800a948

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f89f 	bl	8000408 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	200a0d84 	.word	0x200a0d84
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	01e847ff 	.word	0x01e847ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a31      	ldr	r2, [pc, #196]	; (80003b8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4828      	ldr	r0, [pc, #160]	; (80003bc <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a29      	ldr	r2, [pc, #164]	; (80003c0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c22      	ldr	r4, [pc, #136]	; (80003c4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c1b      	ldr	r4, [pc, #108]	; (80003c4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b949      	cbnz	r1, 80003a2 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800038e:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000390:	f00a f950 	bl	800a634 <tx_low_power_enter>
    POP     {r0-r3}
 8000394:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000396:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000398:	f00a f974 	bl	800a684 <tx_low_power_exit>
    POP     {r0-r3}
 800039c:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a0:	e7f1      	b.n	8000386 <__tx_ts_wait>

080003a2 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a2:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003a6:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003aa:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 80003ae:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003b0:	e7d0      	b.n	8000354 <__tx_ts_restore>
 80003b2:	bf00      	nop

080003b4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b4:	4770      	bx	lr
 80003b6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003b8:	200a0e20 	.word	0x200a0e20
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003bc:	200a0d88 	.word	0x200a0d88
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c0:	200a0d8c 	.word	0x200a0d8c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c4:	200a138c 	.word	0x200a138c

080003c8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003c8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ca:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003ce:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003d6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003d8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003dc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003de:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003e6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003e8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ea:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003ec:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003ee:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fa:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003fc:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000402:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000404:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000406:	4770      	bx	lr

08000408 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000408:	4922      	ldr	r1, [pc, #136]	; (8000494 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040a:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 800040c:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000410:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000414:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000416:	b13a      	cbz	r2, 8000428 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000418:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800041c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800041e:	b91a      	cbnz	r2, 8000428 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000422:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000426:	6018      	str	r0, [r3, #0]

08000428 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000428:	491d      	ldr	r1, [pc, #116]	; (80004a0 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800042c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800042e:	b122      	cbz	r2, 800043a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000432:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000436:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000438:	e008      	b.n	800044c <__tx_timer_done>

0800043a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000440:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000442:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000444:	d101      	bne.n	800044a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000446:	4b19      	ldr	r3, [pc, #100]	; (80004ac <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000448:	6818      	ldr	r0, [r3, #0]

0800044a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044a:	6008      	str	r0, [r1, #0]

0800044c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800044e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000450:	b912      	cbnz	r2, 8000458 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000452:	4914      	ldr	r1, [pc, #80]	; (80004a4 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000454:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000456:	b1c8      	cbz	r0, 800048c <__tx_timer_nothing_expired>

08000458 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000458:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045a:	4912      	ldr	r1, [pc, #72]	; (80004a4 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800045e:	b108      	cbz	r0, 8000464 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000460:	f009 fb88 	bl	8009b74 <_tx_timer_expiration_process>

08000464 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000466:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000468:	b172      	cbz	r2, 8000488 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046a:	f009 faf5 	bl	8009a58 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800046e:	4810      	ldr	r0, [pc, #64]	; (80004b0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000470:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000472:	b949      	cbnz	r1, 8000488 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000474:	480f      	ldr	r0, [pc, #60]	; (80004b4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000476:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000478:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800047e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000482:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000484:	d000      	beq.n	8000488 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000486:	6002      	str	r2, [r0, #0]

08000488 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000488:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800048c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800048c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000490:	4770      	bx	lr
 8000492:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000494:	200a0e2c 	.word	0x200a0e2c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000498:	200a138c 	.word	0x200a138c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800049c:	200a0e30 	.word	0x200a0e30
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a0:	200a0ebc 	.word	0x200a0ebc
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a4:	200a0ec0 	.word	0x200a0ec0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004a8:	200a0eb8 	.word	0x200a0eb8
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ac:	200a0eb4 	.word	0x200a0eb4
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b0:	200a0e20 	.word	0x200a0e20
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b4:	200a0d88 	.word	0x200a0d88
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b8:	200a0d8c 	.word	0x200a0d8c
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004bc:	e000ed04 	.word	0xe000ed04

080004c0 <__aeabi_uldivmod>:
 80004c0:	b953      	cbnz	r3, 80004d8 <__aeabi_uldivmod+0x18>
 80004c2:	b94a      	cbnz	r2, 80004d8 <__aeabi_uldivmod+0x18>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	bf08      	it	eq
 80004c8:	2800      	cmpeq	r0, #0
 80004ca:	bf1c      	itt	ne
 80004cc:	f04f 31ff 	movne.w	r1, #4294967295
 80004d0:	f04f 30ff 	movne.w	r0, #4294967295
 80004d4:	f000 b982 	b.w	80007dc <__aeabi_idiv0>
 80004d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e0:	f000 f806 	bl	80004f0 <__udivmoddi4>
 80004e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ec:	b004      	add	sp, #16
 80004ee:	4770      	bx	lr

080004f0 <__udivmoddi4>:
 80004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004f6:	4604      	mov	r4, r0
 80004f8:	460f      	mov	r7, r1
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d148      	bne.n	8000590 <__udivmoddi4+0xa0>
 80004fe:	428a      	cmp	r2, r1
 8000500:	4694      	mov	ip, r2
 8000502:	d961      	bls.n	80005c8 <__udivmoddi4+0xd8>
 8000504:	fab2 f382 	clz	r3, r2
 8000508:	b143      	cbz	r3, 800051c <__udivmoddi4+0x2c>
 800050a:	f1c3 0120 	rsb	r1, r3, #32
 800050e:	409f      	lsls	r7, r3
 8000510:	fa02 fc03 	lsl.w	ip, r2, r3
 8000514:	409c      	lsls	r4, r3
 8000516:	fa20 f101 	lsr.w	r1, r0, r1
 800051a:	430f      	orrs	r7, r1
 800051c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	0c22      	lsrs	r2, r4, #16
 8000526:	fbb7 f6f1 	udiv	r6, r7, r1
 800052a:	fb01 7716 	mls	r7, r1, r6, r7
 800052e:	fb06 f00e 	mul.w	r0, r6, lr
 8000532:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000536:	4290      	cmp	r0, r2
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x5c>
 800053a:	eb1c 0202 	adds.w	r2, ip, r2
 800053e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000542:	d202      	bcs.n	800054a <__udivmoddi4+0x5a>
 8000544:	4290      	cmp	r0, r2
 8000546:	f200 8137 	bhi.w	80007b8 <__udivmoddi4+0x2c8>
 800054a:	463e      	mov	r6, r7
 800054c:	1a12      	subs	r2, r2, r0
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb2 f0f1 	udiv	r0, r2, r1
 8000554:	fb01 2210 	mls	r2, r1, r0, r2
 8000558:	fb00 fe0e 	mul.w	lr, r0, lr
 800055c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000560:	45a6      	cmp	lr, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x86>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f100 32ff 	add.w	r2, r0, #4294967295
 800056c:	d202      	bcs.n	8000574 <__udivmoddi4+0x84>
 800056e:	45a6      	cmp	lr, r4
 8000570:	f200 811c 	bhi.w	80007ac <__udivmoddi4+0x2bc>
 8000574:	4610      	mov	r0, r2
 8000576:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800057a:	eba4 040e 	sub.w	r4, r4, lr
 800057e:	2600      	movs	r6, #0
 8000580:	b11d      	cbz	r5, 800058a <__udivmoddi4+0x9a>
 8000582:	40dc      	lsrs	r4, r3
 8000584:	2300      	movs	r3, #0
 8000586:	e9c5 4300 	strd	r4, r3, [r5]
 800058a:	4631      	mov	r1, r6
 800058c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000590:	428b      	cmp	r3, r1
 8000592:	d909      	bls.n	80005a8 <__udivmoddi4+0xb8>
 8000594:	2d00      	cmp	r5, #0
 8000596:	f000 80fd 	beq.w	8000794 <__udivmoddi4+0x2a4>
 800059a:	2600      	movs	r6, #0
 800059c:	e9c5 0100 	strd	r0, r1, [r5]
 80005a0:	4630      	mov	r0, r6
 80005a2:	4631      	mov	r1, r6
 80005a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a8:	fab3 f683 	clz	r6, r3
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d14b      	bne.n	8000648 <__udivmoddi4+0x158>
 80005b0:	428b      	cmp	r3, r1
 80005b2:	f0c0 80f2 	bcc.w	800079a <__udivmoddi4+0x2aa>
 80005b6:	4282      	cmp	r2, r0
 80005b8:	f240 80ef 	bls.w	800079a <__udivmoddi4+0x2aa>
 80005bc:	4630      	mov	r0, r6
 80005be:	2d00      	cmp	r5, #0
 80005c0:	d0e3      	beq.n	800058a <__udivmoddi4+0x9a>
 80005c2:	e9c5 4700 	strd	r4, r7, [r5]
 80005c6:	e7e0      	b.n	800058a <__udivmoddi4+0x9a>
 80005c8:	b902      	cbnz	r2, 80005cc <__udivmoddi4+0xdc>
 80005ca:	deff      	udf	#255	; 0xff
 80005cc:	fab2 f382 	clz	r3, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	f040 809d 	bne.w	8000710 <__udivmoddi4+0x220>
 80005d6:	1a89      	subs	r1, r1, r2
 80005d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005dc:	b297      	uxth	r7, r2
 80005de:	2601      	movs	r6, #1
 80005e0:	0c20      	lsrs	r0, r4, #16
 80005e2:	fbb1 f2fe 	udiv	r2, r1, lr
 80005e6:	fb0e 1112 	mls	r1, lr, r2, r1
 80005ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ee:	fb07 f002 	mul.w	r0, r7, r2
 80005f2:	4288      	cmp	r0, r1
 80005f4:	d90f      	bls.n	8000616 <__udivmoddi4+0x126>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f102 38ff 	add.w	r8, r2, #4294967295
 80005fe:	bf2c      	ite	cs
 8000600:	f04f 0901 	movcs.w	r9, #1
 8000604:	f04f 0900 	movcc.w	r9, #0
 8000608:	4288      	cmp	r0, r1
 800060a:	d903      	bls.n	8000614 <__udivmoddi4+0x124>
 800060c:	f1b9 0f00 	cmp.w	r9, #0
 8000610:	f000 80cf 	beq.w	80007b2 <__udivmoddi4+0x2c2>
 8000614:	4642      	mov	r2, r8
 8000616:	1a09      	subs	r1, r1, r0
 8000618:	b2a4      	uxth	r4, r4
 800061a:	fbb1 f0fe 	udiv	r0, r1, lr
 800061e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000622:	fb00 f707 	mul.w	r7, r0, r7
 8000626:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800062a:	42a7      	cmp	r7, r4
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x150>
 800062e:	eb1c 0404 	adds.w	r4, ip, r4
 8000632:	f100 31ff 	add.w	r1, r0, #4294967295
 8000636:	d202      	bcs.n	800063e <__udivmoddi4+0x14e>
 8000638:	42a7      	cmp	r7, r4
 800063a:	f200 80b4 	bhi.w	80007a6 <__udivmoddi4+0x2b6>
 800063e:	4608      	mov	r0, r1
 8000640:	1be4      	subs	r4, r4, r7
 8000642:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000646:	e79b      	b.n	8000580 <__udivmoddi4+0x90>
 8000648:	f1c6 0720 	rsb	r7, r6, #32
 800064c:	40b3      	lsls	r3, r6
 800064e:	fa01 f406 	lsl.w	r4, r1, r6
 8000652:	fa22 fc07 	lsr.w	ip, r2, r7
 8000656:	40f9      	lsrs	r1, r7
 8000658:	40b2      	lsls	r2, r6
 800065a:	ea4c 0c03 	orr.w	ip, ip, r3
 800065e:	fa20 f307 	lsr.w	r3, r0, r7
 8000662:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000666:	431c      	orrs	r4, r3
 8000668:	fa1f fe8c 	uxth.w	lr, ip
 800066c:	fa00 f306 	lsl.w	r3, r0, r6
 8000670:	0c20      	lsrs	r0, r4, #16
 8000672:	fbb1 f8f9 	udiv	r8, r1, r9
 8000676:	fb09 1118 	mls	r1, r9, r8, r1
 800067a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800067e:	fb08 f00e 	mul.w	r0, r8, lr
 8000682:	4288      	cmp	r0, r1
 8000684:	d90f      	bls.n	80006a6 <__udivmoddi4+0x1b6>
 8000686:	eb1c 0101 	adds.w	r1, ip, r1
 800068a:	f108 3aff 	add.w	sl, r8, #4294967295
 800068e:	bf2c      	ite	cs
 8000690:	f04f 0b01 	movcs.w	fp, #1
 8000694:	f04f 0b00 	movcc.w	fp, #0
 8000698:	4288      	cmp	r0, r1
 800069a:	d903      	bls.n	80006a4 <__udivmoddi4+0x1b4>
 800069c:	f1bb 0f00 	cmp.w	fp, #0
 80006a0:	f000 808d 	beq.w	80007be <__udivmoddi4+0x2ce>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	1a09      	subs	r1, r1, r0
 80006a8:	b2a4      	uxth	r4, r4
 80006aa:	fbb1 f0f9 	udiv	r0, r1, r9
 80006ae:	fb09 1110 	mls	r1, r9, r0, r1
 80006b2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006b6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ba:	458e      	cmp	lr, r1
 80006bc:	d907      	bls.n	80006ce <__udivmoddi4+0x1de>
 80006be:	eb1c 0101 	adds.w	r1, ip, r1
 80006c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80006c6:	d201      	bcs.n	80006cc <__udivmoddi4+0x1dc>
 80006c8:	458e      	cmp	lr, r1
 80006ca:	d87f      	bhi.n	80007cc <__udivmoddi4+0x2dc>
 80006cc:	4620      	mov	r0, r4
 80006ce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006d2:	eba1 010e 	sub.w	r1, r1, lr
 80006d6:	fba0 9802 	umull	r9, r8, r0, r2
 80006da:	4541      	cmp	r1, r8
 80006dc:	464c      	mov	r4, r9
 80006de:	46c6      	mov	lr, r8
 80006e0:	d302      	bcc.n	80006e8 <__udivmoddi4+0x1f8>
 80006e2:	d106      	bne.n	80006f2 <__udivmoddi4+0x202>
 80006e4:	454b      	cmp	r3, r9
 80006e6:	d204      	bcs.n	80006f2 <__udivmoddi4+0x202>
 80006e8:	3801      	subs	r0, #1
 80006ea:	ebb9 0402 	subs.w	r4, r9, r2
 80006ee:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d070      	beq.n	80007d8 <__udivmoddi4+0x2e8>
 80006f6:	1b1a      	subs	r2, r3, r4
 80006f8:	eb61 010e 	sbc.w	r1, r1, lr
 80006fc:	fa22 f306 	lsr.w	r3, r2, r6
 8000700:	fa01 f707 	lsl.w	r7, r1, r7
 8000704:	40f1      	lsrs	r1, r6
 8000706:	2600      	movs	r6, #0
 8000708:	431f      	orrs	r7, r3
 800070a:	e9c5 7100 	strd	r7, r1, [r5]
 800070e:	e73c      	b.n	800058a <__udivmoddi4+0x9a>
 8000710:	fa02 fc03 	lsl.w	ip, r2, r3
 8000714:	f1c3 0020 	rsb	r0, r3, #32
 8000718:	fa01 f203 	lsl.w	r2, r1, r3
 800071c:	fa21 f600 	lsr.w	r6, r1, r0
 8000720:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000724:	fa24 f100 	lsr.w	r1, r4, r0
 8000728:	fa1f f78c 	uxth.w	r7, ip
 800072c:	409c      	lsls	r4, r3
 800072e:	4311      	orrs	r1, r2
 8000730:	fbb6 f0fe 	udiv	r0, r6, lr
 8000734:	0c0a      	lsrs	r2, r1, #16
 8000736:	fb0e 6610 	mls	r6, lr, r0, r6
 800073a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800073e:	fb00 f607 	mul.w	r6, r0, r7
 8000742:	4296      	cmp	r6, r2
 8000744:	d90e      	bls.n	8000764 <__udivmoddi4+0x274>
 8000746:	eb1c 0202 	adds.w	r2, ip, r2
 800074a:	f100 38ff 	add.w	r8, r0, #4294967295
 800074e:	bf2c      	ite	cs
 8000750:	f04f 0901 	movcs.w	r9, #1
 8000754:	f04f 0900 	movcc.w	r9, #0
 8000758:	4296      	cmp	r6, r2
 800075a:	d902      	bls.n	8000762 <__udivmoddi4+0x272>
 800075c:	f1b9 0f00 	cmp.w	r9, #0
 8000760:	d031      	beq.n	80007c6 <__udivmoddi4+0x2d6>
 8000762:	4640      	mov	r0, r8
 8000764:	1b92      	subs	r2, r2, r6
 8000766:	b289      	uxth	r1, r1
 8000768:	fbb2 f6fe 	udiv	r6, r2, lr
 800076c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000770:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000774:	fb06 f207 	mul.w	r2, r6, r7
 8000778:	428a      	cmp	r2, r1
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x29c>
 800077c:	eb1c 0101 	adds.w	r1, ip, r1
 8000780:	f106 38ff 	add.w	r8, r6, #4294967295
 8000784:	d201      	bcs.n	800078a <__udivmoddi4+0x29a>
 8000786:	428a      	cmp	r2, r1
 8000788:	d823      	bhi.n	80007d2 <__udivmoddi4+0x2e2>
 800078a:	4646      	mov	r6, r8
 800078c:	1a89      	subs	r1, r1, r2
 800078e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000792:	e725      	b.n	80005e0 <__udivmoddi4+0xf0>
 8000794:	462e      	mov	r6, r5
 8000796:	4628      	mov	r0, r5
 8000798:	e6f7      	b.n	800058a <__udivmoddi4+0x9a>
 800079a:	1a84      	subs	r4, r0, r2
 800079c:	eb61 0303 	sbc.w	r3, r1, r3
 80007a0:	2001      	movs	r0, #1
 80007a2:	461f      	mov	r7, r3
 80007a4:	e70b      	b.n	80005be <__udivmoddi4+0xce>
 80007a6:	4464      	add	r4, ip
 80007a8:	3802      	subs	r0, #2
 80007aa:	e749      	b.n	8000640 <__udivmoddi4+0x150>
 80007ac:	4464      	add	r4, ip
 80007ae:	3802      	subs	r0, #2
 80007b0:	e6e1      	b.n	8000576 <__udivmoddi4+0x86>
 80007b2:	3a02      	subs	r2, #2
 80007b4:	4461      	add	r1, ip
 80007b6:	e72e      	b.n	8000616 <__udivmoddi4+0x126>
 80007b8:	3e02      	subs	r6, #2
 80007ba:	4462      	add	r2, ip
 80007bc:	e6c6      	b.n	800054c <__udivmoddi4+0x5c>
 80007be:	f1a8 0802 	sub.w	r8, r8, #2
 80007c2:	4461      	add	r1, ip
 80007c4:	e76f      	b.n	80006a6 <__udivmoddi4+0x1b6>
 80007c6:	3802      	subs	r0, #2
 80007c8:	4462      	add	r2, ip
 80007ca:	e7cb      	b.n	8000764 <__udivmoddi4+0x274>
 80007cc:	3802      	subs	r0, #2
 80007ce:	4461      	add	r1, ip
 80007d0:	e77d      	b.n	80006ce <__udivmoddi4+0x1de>
 80007d2:	3e02      	subs	r6, #2
 80007d4:	4461      	add	r1, ip
 80007d6:	e7d9      	b.n	800078c <__udivmoddi4+0x29c>
 80007d8:	462e      	mov	r6, r5
 80007da:	e6d6      	b.n	800058a <__udivmoddi4+0x9a>

080007dc <__aeabi_idiv0>:
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	; 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80007f4:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <tx_application_define+0x44>)
 80007f6:	490c      	ldr	r1, [pc, #48]	; (8000828 <tx_application_define+0x48>)
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <tx_application_define+0x4c>)
 80007fa:	f009 fc65 	bl	800a0c8 <_txe_byte_pool_create>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10a      	bne.n	800081a <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <tx_application_define+0x4c>)
 8000806:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000808:	68b8      	ldr	r0, [r7, #8]
 800080a:	f000 f811 	bl	8000830 <App_ThreadX_Init>
 800080e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      // Something went wrong along the way, reset and try again
    	HAL_NVIC_SystemReset();
 8000816:	f001 fef8 	bl	800260a <HAL_NVIC_SystemReset>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000002c 	.word	0x2000002c
 8000828:	0800a960 	.word	0x0800a960
 800082c:	200a002c 	.word	0x200a002c

08000830 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af08      	add	r7, sp, #32
 8000836:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  CHAR *pointer = TX_NULL;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]

  //
  // Allocate stack for the startup thread
  ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_SMALL_STACK_SIZE, TX_NO_WAIT);
 8000844:	f107 010c 	add.w	r1, r7, #12
 8000848:	2300      	movs	r3, #0
 800084a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084e:	6938      	ldr	r0, [r7, #16]
 8000850:	f009 fbc6 	bl	8009fe0 <_txe_byte_allocate>
 8000854:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <App_ThreadX_Init+0x30>
	  return ret;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	e1f4      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // Create the startup thread. HIGHEST priority level and no preemption possible
  ret = tx_thread_create(&startup_thread, "startup thread", startup_thread_entry, 0, pointer,
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	22b0      	movs	r2, #176	; 0xb0
 8000864:	9206      	str	r2, [sp, #24]
 8000866:	2201      	movs	r2, #1
 8000868:	9205      	str	r2, [sp, #20]
 800086a:	2200      	movs	r2, #0
 800086c:	9204      	str	r2, [sp, #16]
 800086e:	2200      	movs	r2, #0
 8000870:	9203      	str	r2, [sp, #12]
 8000872:	2200      	movs	r2, #0
 8000874:	9202      	str	r2, [sp, #8]
 8000876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087a:	9201      	str	r2, [sp, #4]
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	4a99      	ldr	r2, [pc, #612]	; (8000ae8 <App_ThreadX_Init+0x2b8>)
 8000882:	499a      	ldr	r1, [pc, #616]	; (8000aec <App_ThreadX_Init+0x2bc>)
 8000884:	489a      	ldr	r0, [pc, #616]	; (8000af0 <App_ThreadX_Init+0x2c0>)
 8000886:	f009 fde3 	bl	800a450 <_txe_thread_create>
 800088a:	6178      	str	r0, [r7, #20]
		  THREAD_SMALL_STACK_SIZE, HIGHEST, HIGHEST, TX_NO_TIME_SLICE, TX_AUTO_START);
  if (ret != TX_SUCCESS){
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <App_ThreadX_Init+0x66>
	  return ret;
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	e1d9      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }

  //
  // Allocate stack for the gnss thread
  ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_LARGE_STACK_SIZE, TX_NO_WAIT);
 8000896:	f107 010c 	add.w	r1, r7, #12
 800089a:	2300      	movs	r3, #0
 800089c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a0:	6938      	ldr	r0, [r7, #16]
 80008a2:	f009 fb9d 	bl	8009fe0 <_txe_byte_allocate>
 80008a6:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <App_ThreadX_Init+0x82>
	  return ret;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	e1cb      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // Create the gnss thread. VERY_HIGH priority, no preemption-threshold
  ret = tx_thread_create(&gnss_thread, "gnss thread", gnss_thread_entry, 0, pointer,
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	22b0      	movs	r2, #176	; 0xb0
 80008b6:	9206      	str	r2, [sp, #24]
 80008b8:	2201      	movs	r2, #1
 80008ba:	9205      	str	r2, [sp, #20]
 80008bc:	2200      	movs	r2, #0
 80008be:	9204      	str	r2, [sp, #16]
 80008c0:	2201      	movs	r2, #1
 80008c2:	9203      	str	r2, [sp, #12]
 80008c4:	2201      	movs	r2, #1
 80008c6:	9202      	str	r2, [sp, #8]
 80008c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2300      	movs	r3, #0
 80008d2:	4a88      	ldr	r2, [pc, #544]	; (8000af4 <App_ThreadX_Init+0x2c4>)
 80008d4:	4988      	ldr	r1, [pc, #544]	; (8000af8 <App_ThreadX_Init+0x2c8>)
 80008d6:	4889      	ldr	r0, [pc, #548]	; (8000afc <App_ThreadX_Init+0x2cc>)
 80008d8:	f009 fdba 	bl	800a450 <_txe_thread_create>
 80008dc:	6178      	str	r0, [r7, #20]
		  THREAD_LARGE_STACK_SIZE, VERY_HIGH, VERY_HIGH, TX_NO_TIME_SLICE, TX_AUTO_START);
  if (ret != TX_SUCCESS){
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <App_ThreadX_Init+0xb8>
	  return ret;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	e1b0      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }

  //
  // Allocate stack for the imu thread
  ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_LARGE_STACK_SIZE, TX_NO_WAIT);
 80008e8:	f107 010c 	add.w	r1, r7, #12
 80008ec:	2300      	movs	r3, #0
 80008ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f2:	6938      	ldr	r0, [r7, #16]
 80008f4:	f009 fb74 	bl	8009fe0 <_txe_byte_allocate>
 80008f8:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <App_ThreadX_Init+0xd4>
	  return ret;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	e1a2      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // Create the imu thread. VERY_HIGH priority, no preemption-threshold
  ret = tx_thread_create(&imu_thread, "imu thread", imu_thread_entry, 0, pointer,
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	22b0      	movs	r2, #176	; 0xb0
 8000908:	9206      	str	r2, [sp, #24]
 800090a:	2201      	movs	r2, #1
 800090c:	9205      	str	r2, [sp, #20]
 800090e:	2200      	movs	r2, #0
 8000910:	9204      	str	r2, [sp, #16]
 8000912:	2202      	movs	r2, #2
 8000914:	9203      	str	r2, [sp, #12]
 8000916:	2202      	movs	r2, #2
 8000918:	9202      	str	r2, [sp, #8]
 800091a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800091e:	9201      	str	r2, [sp, #4]
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2300      	movs	r3, #0
 8000924:	4a76      	ldr	r2, [pc, #472]	; (8000b00 <App_ThreadX_Init+0x2d0>)
 8000926:	4977      	ldr	r1, [pc, #476]	; (8000b04 <App_ThreadX_Init+0x2d4>)
 8000928:	4877      	ldr	r0, [pc, #476]	; (8000b08 <App_ThreadX_Init+0x2d8>)
 800092a:	f009 fd91 	bl	800a450 <_txe_thread_create>
 800092e:	6178      	str	r0, [r7, #20]
		  THREAD_LARGE_STACK_SIZE, HIGH, HIGH, TX_NO_TIME_SLICE, TX_AUTO_START);
  if (ret != TX_SUCCESS){
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <App_ThreadX_Init+0x10a>
	  return ret;
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	e187      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }

  //
  // Allocate stack for the CT thread
  ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_SMALL_STACK_SIZE, TX_NO_WAIT);
 800093a:	f107 010c 	add.w	r1, r7, #12
 800093e:	2300      	movs	r3, #0
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	6938      	ldr	r0, [r7, #16]
 8000946:	f009 fb4b 	bl	8009fe0 <_txe_byte_allocate>
 800094a:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <App_ThreadX_Init+0x126>
	  return ret;
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	e179      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // Create the CT thread. VERY_HIGH priority, no preemption-threshold
  ret = tx_thread_create(&ct_thread, "ct thread", ct_thread_entry, 0, pointer,
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	22b0      	movs	r2, #176	; 0xb0
 800095a:	9206      	str	r2, [sp, #24]
 800095c:	2201      	movs	r2, #1
 800095e:	9205      	str	r2, [sp, #20]
 8000960:	2200      	movs	r2, #0
 8000962:	9204      	str	r2, [sp, #16]
 8000964:	2201      	movs	r2, #1
 8000966:	9203      	str	r2, [sp, #12]
 8000968:	2201      	movs	r2, #1
 800096a:	9202      	str	r2, [sp, #8]
 800096c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000970:	9201      	str	r2, [sp, #4]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	4a65      	ldr	r2, [pc, #404]	; (8000b0c <App_ThreadX_Init+0x2dc>)
 8000978:	4965      	ldr	r1, [pc, #404]	; (8000b10 <App_ThreadX_Init+0x2e0>)
 800097a:	4866      	ldr	r0, [pc, #408]	; (8000b14 <App_ThreadX_Init+0x2e4>)
 800097c:	f009 fd68 	bl	800a450 <_txe_thread_create>
 8000980:	6178      	str	r0, [r7, #20]
		  THREAD_SMALL_STACK_SIZE, VERY_HIGH, VERY_HIGH, TX_NO_TIME_SLICE, TX_AUTO_START);
  if (ret != TX_SUCCESS){
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <App_ThreadX_Init+0x15c>
	  return ret;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	e15e      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }

  //
  // Allocate stack for the waves thread
  ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_LARGE_STACK_SIZE, TX_NO_WAIT);
 800098c:	f107 010c 	add.w	r1, r7, #12
 8000990:	2300      	movs	r3, #0
 8000992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000996:	6938      	ldr	r0, [r7, #16]
 8000998:	f009 fb22 	bl	8009fe0 <_txe_byte_allocate>
 800099c:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <App_ThreadX_Init+0x178>
	  return ret;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	e150      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // Create the waves thread. MID priority, no preemption-threshold
  ret = tx_thread_create(&waves_thread, "waves thread", waves_thread_entry, 0, pointer,
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	22b0      	movs	r2, #176	; 0xb0
 80009ac:	9206      	str	r2, [sp, #24]
 80009ae:	2201      	movs	r2, #1
 80009b0:	9205      	str	r2, [sp, #20]
 80009b2:	2200      	movs	r2, #0
 80009b4:	9204      	str	r2, [sp, #16]
 80009b6:	2203      	movs	r2, #3
 80009b8:	9203      	str	r2, [sp, #12]
 80009ba:	2203      	movs	r2, #3
 80009bc:	9202      	str	r2, [sp, #8]
 80009be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c2:	9201      	str	r2, [sp, #4]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2300      	movs	r3, #0
 80009c8:	4a53      	ldr	r2, [pc, #332]	; (8000b18 <App_ThreadX_Init+0x2e8>)
 80009ca:	4954      	ldr	r1, [pc, #336]	; (8000b1c <App_ThreadX_Init+0x2ec>)
 80009cc:	4854      	ldr	r0, [pc, #336]	; (8000b20 <App_ThreadX_Init+0x2f0>)
 80009ce:	f009 fd3f 	bl	800a450 <_txe_thread_create>
 80009d2:	6178      	str	r0, [r7, #20]
		  THREAD_LARGE_STACK_SIZE, MID, MID, TX_NO_TIME_SLICE, TX_AUTO_START);
  if (ret != TX_SUCCESS){
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <App_ThreadX_Init+0x1ae>
	  return ret;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	e135      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }

  //
  // Allocate stack for the Iridium thread
  ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_SMALL_STACK_SIZE, TX_NO_WAIT);
 80009de:	f107 010c 	add.w	r1, r7, #12
 80009e2:	2300      	movs	r3, #0
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	6938      	ldr	r0, [r7, #16]
 80009ea:	f009 faf9 	bl	8009fe0 <_txe_byte_allocate>
 80009ee:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <App_ThreadX_Init+0x1ca>
	  return ret;
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	e127      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // Create the Iridium thread. VERY_HIGH priority, no preemption-threshold
  ret = tx_thread_create(&iridium_thread, "iridium thread", iridium_thread_entry, 0, pointer,
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	22b0      	movs	r2, #176	; 0xb0
 80009fe:	9206      	str	r2, [sp, #24]
 8000a00:	2201      	movs	r2, #1
 8000a02:	9205      	str	r2, [sp, #20]
 8000a04:	2200      	movs	r2, #0
 8000a06:	9204      	str	r2, [sp, #16]
 8000a08:	2203      	movs	r2, #3
 8000a0a:	9203      	str	r2, [sp, #12]
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	9202      	str	r2, [sp, #8]
 8000a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a14:	9201      	str	r2, [sp, #4]
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	4a42      	ldr	r2, [pc, #264]	; (8000b24 <App_ThreadX_Init+0x2f4>)
 8000a1c:	4942      	ldr	r1, [pc, #264]	; (8000b28 <App_ThreadX_Init+0x2f8>)
 8000a1e:	4843      	ldr	r0, [pc, #268]	; (8000b2c <App_ThreadX_Init+0x2fc>)
 8000a20:	f009 fd16 	bl	800a450 <_txe_thread_create>
 8000a24:	6178      	str	r0, [r7, #20]
		  THREAD_SMALL_STACK_SIZE, MID, MID, TX_NO_TIME_SLICE, TX_AUTO_START);
  if (ret != TX_SUCCESS){
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <App_ThreadX_Init+0x200>
	  return ret;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	e10c      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }

  //
  // Allocate stack for the teardown thread
  ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_SMALL_STACK_SIZE, TX_NO_WAIT);
 8000a30:	f107 010c 	add.w	r1, r7, #12
 8000a34:	2300      	movs	r3, #0
 8000a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3a:	6938      	ldr	r0, [r7, #16]
 8000a3c:	f009 fad0 	bl	8009fe0 <_txe_byte_allocate>
 8000a40:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <App_ThreadX_Init+0x21c>
	  return ret;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	e0fe      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // Create the teardown thread. HIGHEST priority, no preemption-threshold
  ret = tx_thread_create(&teardown_thread, "teardown thread", teardown_thread_entry, 0, pointer,
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	22b0      	movs	r2, #176	; 0xb0
 8000a50:	9206      	str	r2, [sp, #24]
 8000a52:	2201      	movs	r2, #1
 8000a54:	9205      	str	r2, [sp, #20]
 8000a56:	2200      	movs	r2, #0
 8000a58:	9204      	str	r2, [sp, #16]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	9203      	str	r2, [sp, #12]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	9202      	str	r2, [sp, #8]
 8000a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a66:	9201      	str	r2, [sp, #4]
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <App_ThreadX_Init+0x300>)
 8000a6e:	4931      	ldr	r1, [pc, #196]	; (8000b34 <App_ThreadX_Init+0x304>)
 8000a70:	4831      	ldr	r0, [pc, #196]	; (8000b38 <App_ThreadX_Init+0x308>)
 8000a72:	f009 fced 	bl	800a450 <_txe_thread_create>
 8000a76:	6178      	str	r0, [r7, #20]
		  THREAD_SMALL_STACK_SIZE, HIGHEST, HIGHEST, TX_NO_TIME_SLICE, TX_AUTO_START);
  if (ret != TX_SUCCESS){
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <App_ThreadX_Init+0x252>
	  return ret;
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	e0e3      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }

  //
  // Create the event flags we'll use for triggering threads
  ret = tx_event_flags_create(&thread_flags, "thread_flags");
 8000a82:	2224      	movs	r2, #36	; 0x24
 8000a84:	492d      	ldr	r1, [pc, #180]	; (8000b3c <App_ThreadX_Init+0x30c>)
 8000a86:	482e      	ldr	r0, [pc, #184]	; (8000b40 <App_ThreadX_Init+0x310>)
 8000a88:	f009 fbfa 	bl	800a280 <_txe_event_flags_create>
 8000a8c:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS) {
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <App_ThreadX_Init+0x268>
	  return ret;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	e0d8      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }

  //
  // Allocate bytes for the sensor derived arrays
  ret = tx_byte_allocate(byte_pool, (VOID**) &uGNSSArray, SENSOR_DATA_ARRAY_SIZE, TX_NO_WAIT);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f246 12c0 	movw	r2, #25024	; 0x61c0
 8000a9e:	4929      	ldr	r1, [pc, #164]	; (8000b44 <App_ThreadX_Init+0x314>)
 8000aa0:	6938      	ldr	r0, [r7, #16]
 8000aa2:	f009 fa9d 	bl	8009fe0 <_txe_byte_allocate>
 8000aa6:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <App_ThreadX_Init+0x282>
	  return ret;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	e0cb      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  ret = tx_byte_allocate(byte_pool, (VOID**) &vGNSSArray, SENSOR_DATA_ARRAY_SIZE, TX_NO_WAIT);
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f246 12c0 	movw	r2, #25024	; 0x61c0
 8000ab8:	4923      	ldr	r1, [pc, #140]	; (8000b48 <App_ThreadX_Init+0x318>)
 8000aba:	6938      	ldr	r0, [r7, #16]
 8000abc:	f009 fa90 	bl	8009fe0 <_txe_byte_allocate>
 8000ac0:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <App_ThreadX_Init+0x29c>
	  return ret;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	e0be      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  ret = tx_byte_allocate(byte_pool, (VOID**) &vGNSSArray, SENSOR_DATA_ARRAY_SIZE, TX_NO_WAIT);
 8000acc:	2300      	movs	r3, #0
 8000ace:	f246 12c0 	movw	r2, #25024	; 0x61c0
 8000ad2:	491d      	ldr	r1, [pc, #116]	; (8000b48 <App_ThreadX_Init+0x318>)
 8000ad4:	6938      	ldr	r0, [r7, #16]
 8000ad6:	f009 fa83 	bl	8009fe0 <_txe_byte_allocate>
 8000ada:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d034      	beq.n	8000b4c <App_ThreadX_Init+0x31c>
	  return ret;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	e0b1      	b.n	8000c4a <App_ThreadX_Init+0x41a>
 8000ae6:	bf00      	nop
 8000ae8:	08000ccd 	.word	0x08000ccd
 8000aec:	0800a974 	.word	0x0800a974
 8000af0:	200a0060 	.word	0x200a0060
 8000af4:	08000ce1 	.word	0x08000ce1
 8000af8:	0800a984 	.word	0x0800a984
 8000afc:	200a0110 	.word	0x200a0110
 8000b00:	08000cf5 	.word	0x08000cf5
 8000b04:	0800a990 	.word	0x0800a990
 8000b08:	200a01c0 	.word	0x200a01c0
 8000b0c:	08000d09 	.word	0x08000d09
 8000b10:	0800a99c 	.word	0x0800a99c
 8000b14:	200a0270 	.word	0x200a0270
 8000b18:	08000d1d 	.word	0x08000d1d
 8000b1c:	0800a9a8 	.word	0x0800a9a8
 8000b20:	200a0320 	.word	0x200a0320
 8000b24:	08000d31 	.word	0x08000d31
 8000b28:	0800a9b8 	.word	0x0800a9b8
 8000b2c:	200a03d0 	.word	0x200a03d0
 8000b30:	08000d45 	.word	0x08000d45
 8000b34:	0800a9c8 	.word	0x0800a9c8
 8000b38:	200a0480 	.word	0x200a0480
 8000b3c:	0800a9d8 	.word	0x0800a9d8
 8000b40:	200a0530 	.word	0x200a0530
 8000b44:	200a0554 	.word	0x200a0554
 8000b48:	200a0558 	.word	0x200a0558
  }
  ret = tx_byte_allocate(byte_pool, (VOID**) &uIMUArray, SENSOR_DATA_ARRAY_SIZE, TX_NO_WAIT);
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f246 12c0 	movw	r2, #25024	; 0x61c0
 8000b52:	4940      	ldr	r1, [pc, #256]	; (8000c54 <App_ThreadX_Init+0x424>)
 8000b54:	6938      	ldr	r0, [r7, #16]
 8000b56:	f009 fa43 	bl	8009fe0 <_txe_byte_allocate>
 8000b5a:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <App_ThreadX_Init+0x336>
	  return ret;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	e071      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  ret = tx_byte_allocate(byte_pool, (VOID**) &vIMUArray, SENSOR_DATA_ARRAY_SIZE, TX_NO_WAIT);
 8000b66:	2300      	movs	r3, #0
 8000b68:	f246 12c0 	movw	r2, #25024	; 0x61c0
 8000b6c:	493a      	ldr	r1, [pc, #232]	; (8000c58 <App_ThreadX_Init+0x428>)
 8000b6e:	6938      	ldr	r0, [r7, #16]
 8000b70:	f009 fa36 	bl	8009fe0 <_txe_byte_allocate>
 8000b74:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <App_ThreadX_Init+0x350>
	  return ret;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	e064      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  ret = tx_byte_allocate(byte_pool, (VOID**) &zIMUArray, SENSOR_DATA_ARRAY_SIZE, TX_NO_WAIT);
 8000b80:	2300      	movs	r3, #0
 8000b82:	f246 12c0 	movw	r2, #25024	; 0x61c0
 8000b86:	4935      	ldr	r1, [pc, #212]	; (8000c5c <App_ThreadX_Init+0x42c>)
 8000b88:	6938      	ldr	r0, [r7, #16]
 8000b8a:	f009 fa29 	bl	8009fe0 <_txe_byte_allocate>
 8000b8e:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <App_ThreadX_Init+0x36a>
	  return ret;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	e057      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // Allocate bytes for the GPSWaves processing arrays
  ret = tx_byte_allocate(byte_pool, (VOID**) &uWavesArray, WAVES_ARRAY_SIZE, TX_NO_WAIT);
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	4a30      	ldr	r2, [pc, #192]	; (8000c60 <App_ThreadX_Init+0x430>)
 8000b9e:	4931      	ldr	r1, [pc, #196]	; (8000c64 <App_ThreadX_Init+0x434>)
 8000ba0:	6938      	ldr	r0, [r7, #16]
 8000ba2:	f009 fa1d 	bl	8009fe0 <_txe_byte_allocate>
 8000ba6:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <App_ThreadX_Init+0x382>
	  return ret;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	e04b      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  ret = tx_byte_allocate(byte_pool, (VOID**) &vWavesArray, WAVES_ARRAY_SIZE, TX_NO_WAIT);
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <App_ThreadX_Init+0x430>)
 8000bb6:	492c      	ldr	r1, [pc, #176]	; (8000c68 <App_ThreadX_Init+0x438>)
 8000bb8:	6938      	ldr	r0, [r7, #16]
 8000bba:	f009 fa11 	bl	8009fe0 <_txe_byte_allocate>
 8000bbe:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <App_ThreadX_Init+0x39a>
	  return ret;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	e03f      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  ret = tx_byte_allocate(byte_pool, (VOID**) &zWavesArray, WAVES_ARRAY_SIZE, TX_NO_WAIT);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <App_ThreadX_Init+0x430>)
 8000bce:	4927      	ldr	r1, [pc, #156]	; (8000c6c <App_ThreadX_Init+0x43c>)
 8000bd0:	6938      	ldr	r0, [r7, #16]
 8000bd2:	f009 fa05 	bl	8009fe0 <_txe_byte_allocate>
 8000bd6:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <App_ThreadX_Init+0x3b2>
	  return ret;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	e033      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  ret = tx_byte_allocate(byte_pool, (VOID**) &wavesTempCopyArray, WAVES_ARRAY_SIZE, TX_NO_WAIT);
 8000be2:	2300      	movs	r3, #0
 8000be4:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <App_ThreadX_Init+0x430>)
 8000be6:	4922      	ldr	r1, [pc, #136]	; (8000c70 <App_ThreadX_Init+0x440>)
 8000be8:	6938      	ldr	r0, [r7, #16]
 8000bea:	f009 f9f9 	bl	8009fe0 <_txe_byte_allocate>
 8000bee:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <App_ThreadX_Init+0x3ca>
	  return ret;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	e027      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // The UBX message array
  ret = tx_byte_allocate(byte_pool, (VOID**) &ubx_nav_pvt_message_buf, UBX_MESSAGE_BUF_SIZE, TX_NO_WAIT);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c00:	491c      	ldr	r1, [pc, #112]	; (8000c74 <App_ThreadX_Init+0x444>)
 8000c02:	6938      	ldr	r0, [r7, #16]
 8000c04:	f009 f9ec 	bl	8009fe0 <_txe_byte_allocate>
 8000c08:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <App_ThreadX_Init+0x3e4>
	  return ret;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	e01a      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // The CT data array
  ret = tx_byte_allocate(byte_pool, (VOID**) &ct_data, CT_DATA_ARRAY_SIZE, TX_NO_WAIT);
 8000c14:	2300      	movs	r3, #0
 8000c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1a:	4917      	ldr	r1, [pc, #92]	; (8000c78 <App_ThreadX_Init+0x448>)
 8000c1c:	6938      	ldr	r0, [r7, #16]
 8000c1e:	f009 f9df 	bl	8009fe0 <_txe_byte_allocate>
 8000c22:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <App_ThreadX_Init+0x3fe>
	  return ret;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	e00d      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  }
  // The Iridium message array
  ret = tx_byte_allocate(byte_pool, (VOID**) &iridium_message, IRIDIUM_MESSAGE_SIZE, TX_NO_WAIT);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000c34:	4911      	ldr	r1, [pc, #68]	; (8000c7c <App_ThreadX_Init+0x44c>)
 8000c36:	6938      	ldr	r0, [r7, #16]
 8000c38:	f009 f9d2 	bl	8009fe0 <_txe_byte_allocate>
 8000c3c:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS){
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <App_ThreadX_Init+0x418>
	  return ret;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	e000      	b.n	8000c4a <App_ThreadX_Init+0x41a>
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000c48:	697b      	ldr	r3, [r7, #20]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200a0560 	.word	0x200a0560
 8000c58:	200a0564 	.word	0x200a0564
 8000c5c:	200a0568 	.word	0x200a0568
 8000c60:	000187a0 	.word	0x000187a0
 8000c64:	200a056c 	.word	0x200a056c
 8000c68:	200a0570 	.word	0x200a0570
 8000c6c:	200a0574 	.word	0x200a0574
 8000c70:	200a0578 	.word	0x200a0578
 8000c74:	200a057c 	.word	0x200a057c
 8000c78:	200a0580 	.word	0x200a0580
 8000c7c:	200a0584 	.word	0x200a0584

08000c80 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000c84:	f008 faee 	bl	8009264 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
  return 0;
 8000cc0:	2300      	movs	r3, #0
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <startup_thread_entry>:
  *         This thread will start all peripherals and do a systems check to
  *         make sure we're good to start the processing cycle
  * @param  ULONG thread_input - unused
  * @retval void
  */
void startup_thread_entry(ULONG thread_input){
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <gnss_thread_entry>:
  *         Thread that governs the GNSS message processing and building of
  *         uGNSSArray, vGNSSArray, zGNSSArray arrays.
  * @param  ULONG thread_input - unused
  * @retval void
  */
void gnss_thread_entry(ULONG thread_input){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <imu_thread_entry>:
  *         Thread that governs the IMU velocity processing and building of
  *         uIMUArray, vIMUArray, zIMUArray arrays.
  * @param  ULONG thread_input - unused
  * @retval void
  */
void imu_thread_entry(ULONG thread_input){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <ct_thread_entry>:
  *         This thread will handle the CT sensor, capture readings, and store
  *         in ct_data.
  * @param  ULONG thread_input - unused
  * @retval void
  */
void ct_thread_entry(ULONG thread_input){
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <waves_thread_entry>:
  *         vWavesArray, zWavesArray, and wavesTempCopyArray are allocated for
  *         this thread to use.
  * @param  ULONG thread_input - unused
  * @retval void
  */
void waves_thread_entry(ULONG thread_input){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <iridium_thread_entry>:
  *         This thread will handle message sending via Iridium modem. The
  *         buffer iridium_message is provided for message storage.
  * @param  ULONG thread_input - unused
  * @retval void
  */
void iridium_thread_entry(ULONG thread_input){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <teardown_thread_entry>:
  *         the done flags are set, indicating we are ready to shutdown until
  *         the next window.
  * @param  ULONG thread_input - unused
  * @retval void
  */
void teardown_thread_entry(ULONG thread_input){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	6078      	str	r0, [r7, #4]
	// TODO: Figure out the right flag combinations to start this thread
	// 	For now, we'll just assume the right combo is that everything is done
	UINT status;
	ULONG retreived_flags;
	ULONG done_flags_to_check = GNSS_DONE &
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
								IMU_DONE &
								CT_DONE &
								MODEM_DONE;
	ULONG error_flags_to_check = GPS_ERROR &
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
								 CT_ERROR &
								 MODEM_ERROR &
								 MEMORY_ALLOC_ERROR;

	while(1) {
		retreived_flags = 0x0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
		// Start by checking if we get an error flag. The last argument of "1"
		// means we will check this every tick
		status = tx_event_flags_get(&thread_flags,
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	9200      	str	r2, [sp, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	6939      	ldr	r1, [r7, #16]
 8000d64:	4837      	ldr	r0, [pc, #220]	; (8000e44 <teardown_thread_entry+0x100>)
 8000d66:	f009 fb1d 	bl	800a3a4 <_txe_event_flags_get>
 8000d6a:	60f8      	str	r0, [r7, #12]
				error_flags_to_check,
				TX_OR, &retreived_flags, 1);
		// Clear out all bit positions except for the error bits
		retreived_flags &= 0x1F000;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
 8000d72:	60bb      	str	r3, [r7, #8]
		if ((status == TX_SUCCESS) && (retreived_flags & error_flags_to_check)) {
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d106      	bne.n	8000d88 <teardown_thread_entry+0x44>
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <teardown_thread_entry+0x44>
			// We received an error flag, restart and try again
			HAL_NVIC_SystemReset();
 8000d84:	f001 fc41 	bl	800260a <HAL_NVIC_SystemReset>
		}
		// Clear out all bit positions except for the done bits
		retreived_flags &= 0xF0;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d8e:	60bb      	str	r3, [r7, #8]
		// Now we'll check the done flags
		status = tx_event_flags_get(&thread_flags,
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	2201      	movs	r2, #1
 8000d96:	9200      	str	r2, [sp, #0]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	6979      	ldr	r1, [r7, #20]
 8000d9c:	4829      	ldr	r0, [pc, #164]	; (8000e44 <teardown_thread_entry+0x100>)
 8000d9e:	f009 fb01 	bl	800a3a4 <_txe_event_flags_get>
 8000da2:	60f8      	str	r0, [r7, #12]
						done_flags_to_check,
						TX_AND, &retreived_flags, 1);
		if ((status == TX_SUCCESS) && ~(retreived_flags ^ done_flags_to_check)) {
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1d4      	bne.n	8000d54 <teardown_thread_entry+0x10>
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	4053      	eors	r3, r2
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d100      	bne.n	8000db8 <teardown_thread_entry+0x74>
		retreived_flags = 0x0;
 8000db6:	e7cd      	b.n	8000d54 <teardown_thread_entry+0x10>
			// We received all the done bits, break out of the loop so we can
			// shut everything down
			break;
 8000db8:	bf00      	nop
		}
	}
	// If we made it here, we received all the done bits and we're good to
	// dealloc memory and shutdown. We're not going to check the return value
	// because we're going to standby mode regardless, and all RAM will be lost.
	tx_byte_release(&startup_thread);
 8000dba:	4823      	ldr	r0, [pc, #140]	; (8000e48 <teardown_thread_entry+0x104>)
 8000dbc:	f009 fa24 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&gnss_thread);
 8000dc0:	4822      	ldr	r0, [pc, #136]	; (8000e4c <teardown_thread_entry+0x108>)
 8000dc2:	f009 fa21 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&imu_thread);
 8000dc6:	4822      	ldr	r0, [pc, #136]	; (8000e50 <teardown_thread_entry+0x10c>)
 8000dc8:	f009 fa1e 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&ct_thread);
 8000dcc:	4821      	ldr	r0, [pc, #132]	; (8000e54 <teardown_thread_entry+0x110>)
 8000dce:	f009 fa1b 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&waves_thread);
 8000dd2:	4821      	ldr	r0, [pc, #132]	; (8000e58 <teardown_thread_entry+0x114>)
 8000dd4:	f009 fa18 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&iridium_thread);
 8000dd8:	4820      	ldr	r0, [pc, #128]	; (8000e5c <teardown_thread_entry+0x118>)
 8000dda:	f009 fa15 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&teardown_thread);
 8000dde:	4820      	ldr	r0, [pc, #128]	; (8000e60 <teardown_thread_entry+0x11c>)
 8000de0:	f009 fa12 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&thread_flags);
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <teardown_thread_entry+0x100>)
 8000de6:	f009 fa0f 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&uGNSSArray);
 8000dea:	481e      	ldr	r0, [pc, #120]	; (8000e64 <teardown_thread_entry+0x120>)
 8000dec:	f009 fa0c 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&vGNSSArray);
 8000df0:	481d      	ldr	r0, [pc, #116]	; (8000e68 <teardown_thread_entry+0x124>)
 8000df2:	f009 fa09 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&zGNSSArray);
 8000df6:	481d      	ldr	r0, [pc, #116]	; (8000e6c <teardown_thread_entry+0x128>)
 8000df8:	f009 fa06 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&uIMUArray);
 8000dfc:	481c      	ldr	r0, [pc, #112]	; (8000e70 <teardown_thread_entry+0x12c>)
 8000dfe:	f009 fa03 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&vIMUArray);
 8000e02:	481c      	ldr	r0, [pc, #112]	; (8000e74 <teardown_thread_entry+0x130>)
 8000e04:	f009 fa00 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&zIMUArray);
 8000e08:	481b      	ldr	r0, [pc, #108]	; (8000e78 <teardown_thread_entry+0x134>)
 8000e0a:	f009 f9fd 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&uWavesArray);
 8000e0e:	481b      	ldr	r0, [pc, #108]	; (8000e7c <teardown_thread_entry+0x138>)
 8000e10:	f009 f9fa 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&vWavesArray);
 8000e14:	481a      	ldr	r0, [pc, #104]	; (8000e80 <teardown_thread_entry+0x13c>)
 8000e16:	f009 f9f7 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&zWavesArray);
 8000e1a:	481a      	ldr	r0, [pc, #104]	; (8000e84 <teardown_thread_entry+0x140>)
 8000e1c:	f009 f9f4 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&wavesTempCopyArray);
 8000e20:	4819      	ldr	r0, [pc, #100]	; (8000e88 <teardown_thread_entry+0x144>)
 8000e22:	f009 f9f1 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&ubx_nav_pvt_message_buf);
 8000e26:	4819      	ldr	r0, [pc, #100]	; (8000e8c <teardown_thread_entry+0x148>)
 8000e28:	f009 f9ee 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&ct_data);
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <teardown_thread_entry+0x14c>)
 8000e2e:	f009 f9eb 	bl	800a208 <_txe_byte_release>
	tx_byte_release(&iridium_message);
 8000e32:	4818      	ldr	r0, [pc, #96]	; (8000e94 <teardown_thread_entry+0x150>)
 8000e34:	f009 f9e8 	bl	800a208 <_txe_byte_release>

	// TODO: figure out how to go into standby mode
	// This is just a placeholder for development/debugging purposes
	HAL_NVIC_SystemReset();
 8000e38:	f001 fbe7 	bl	800260a <HAL_NVIC_SystemReset>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200a0530 	.word	0x200a0530
 8000e48:	200a0060 	.word	0x200a0060
 8000e4c:	200a0110 	.word	0x200a0110
 8000e50:	200a01c0 	.word	0x200a01c0
 8000e54:	200a0270 	.word	0x200a0270
 8000e58:	200a0320 	.word	0x200a0320
 8000e5c:	200a03d0 	.word	0x200a03d0
 8000e60:	200a0480 	.word	0x200a0480
 8000e64:	200a0554 	.word	0x200a0554
 8000e68:	200a0558 	.word	0x200a0558
 8000e6c:	200a055c 	.word	0x200a055c
 8000e70:	200a0560 	.word	0x200a0560
 8000e74:	200a0564 	.word	0x200a0564
 8000e78:	200a0568 	.word	0x200a0568
 8000e7c:	200a056c 	.word	0x200a056c
 8000e80:	200a0570 	.word	0x200a0570
 8000e84:	200a0574 	.word	0x200a0574
 8000e88:	200a0578 	.word	0x200a0578
 8000e8c:	200a057c 	.word	0x200a057c
 8000e90:	200a0580 	.word	0x200a0580
 8000e94:	200a0584 	.word	0x200a0584

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fe76 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f815 	bl	8000ece <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ea4:	f000 f87c 	bl	8000fa0 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fa40 	bl	800132c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eac:	f000 f888 	bl	8000fc0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000eb0:	f000 f92c 	bl	800110c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eb4:	f000 fa0e 	bl	80012d4 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8000eb8:	f000 f8da 	bl	8001070 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000ebc:	f000 f972 	bl	80011a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ec0:	f000 f9bc 	bl	800123c <MX_USART3_UART_Init>
  MX_ICACHE_Init();
 8000ec4:	f000 f8c0 	bl	8001048 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000ec8:	f7ff feda 	bl	8000c80 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <main+0x34>

08000ece <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b09e      	sub	sp, #120	; 0x78
 8000ed2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	2260      	movs	r2, #96	; 0x60
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f009 fd2b 	bl	800a938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ef2:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000ef6:	f001 fef5 	bl	8002ce4 <HAL_PWREx_ControlVoltageScaling>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000f00:	f000 faf8 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000f04:	233a      	movs	r3, #58	; 0x3a
 8000f06:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f14:	2310      	movs	r3, #16
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f22:	2310      	movs	r3, #16
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f30:	2302      	movs	r3, #2
 8000f32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f34:	2301      	movs	r3, #1
 8000f36:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000f40:	2350      	movs	r3, #80	; 0x50
 8000f42:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 ffc3 	bl	8002ee8 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f68:	f000 fac4 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	231f      	movs	r3, #31
 8000f6e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2303      	movs	r3, #3
 8000f72:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	2104      	movs	r1, #4
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 fe83 	bl	8003c94 <HAL_RCC_ClockConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f94:	f000 faae 	bl	80014f4 <Error_Handler>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3778      	adds	r7, #120	; 0x78
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000fa4:	f001 ff80 	bl	8002ea8 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fa8:	f001 ff8e 	bl	8002ec8 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000fac:	2002      	movs	r0, #2
 8000fae:	f001 ff1b 	bl	8002de8 <HAL_PWREx_ConfigSupply>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000fb8:	f000 fa9c 	bl	80014f4 <Error_Handler>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_ADC1_Init+0x80>)
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <MX_ADC1_Init+0x84>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_ADC1_Init+0x80>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_ADC1_Init+0x80>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_ADC1_Init+0x80>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_ADC1_Init+0x80>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_ADC1_Init+0x80>)
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_ADC1_Init+0x80>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_ADC1_Init+0x80>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_ADC1_Init+0x80>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_ADC1_Init+0x80>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_ADC1_Init+0x80>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_ADC1_Init+0x80>)
 800100e:	2200      	movs	r2, #0
 8001010:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_ADC1_Init+0x80>)
 8001014:	2200      	movs	r2, #0
 8001016:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_ADC1_Init+0x80>)
 800101a:	2200      	movs	r2, #0
 800101c:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_ADC1_Init+0x80>)
 8001020:	2200      	movs	r2, #0
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_ADC1_Init+0x80>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_ADC1_Init+0x80>)
 800102e:	f000 fefb 	bl	8001e28 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001038:	f000 fa5c 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200a0588 	.word	0x200a0588
 8001044:	42028000 	.word	0x42028000

08001048 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800104c:	2000      	movs	r0, #0
 800104e:	f001 fcd1 	bl	80029f4 <HAL_ICACHE_ConfigAssociativityMode>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001058:	f000 fa4c 	bl	80014f4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800105c:	f001 fcea 	bl	8002a34 <HAL_ICACHE_Enable>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001066:	f000 fa45 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_RTC_Init+0x94>)
 800108a:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <MX_RTC_Init+0x98>)
 800108c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_RTC_Init+0x94>)
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_RTC_Init+0x94>)
 8001096:	227f      	movs	r2, #127	; 0x7f
 8001098:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_RTC_Init+0x94>)
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_RTC_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_RTC_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_RTC_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_RTC_Init+0x94>)
 80010b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_RTC_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_RTC_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <MX_RTC_Init+0x94>)
 80010c8:	f005 fe3c 	bl	8006d44 <HAL_RTC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80010d2:	f000 fa0f 	bl	80014f4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_RTC_Init+0x94>)
 80010ec:	f005 ff3c 	bl	8006f68 <HAL_RTCEx_PrivilegeModeSet>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80010f6:	f000 f9fd 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200a0614 	.word	0x200a0614
 8001108:	46007800 	.word	0x46007800

0800110c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001112:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <MX_USART1_UART_Init+0x94>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_USART1_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_USART1_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_USART1_UART_Init+0x90>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001156:	f006 fb1f 	bl	8007798 <HAL_UART_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001160:	f000 f9c8 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_USART1_UART_Init+0x90>)
 8001168:	f006 fef6 	bl	8007f58 <HAL_UARTEx_SetTxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001172:	f000 f9bf 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4808      	ldr	r0, [pc, #32]	; (800119c <MX_USART1_UART_Init+0x90>)
 800117a:	f006 ff2b 	bl	8007fd4 <HAL_UARTEx_SetRxFifoThreshold>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001184:	f000 f9b6 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_USART1_UART_Init+0x90>)
 800118a:	f006 feac 	bl	8007ee6 <HAL_UARTEx_DisableFifoMode>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001194:	f000 f9ae 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200a0644 	.word	0x200a0644
 80011a0:	40013800 	.word	0x40013800

080011a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <MX_USART2_UART_Init+0x94>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011b0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80011b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ec:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_USART2_UART_Init+0x90>)
 80011ee:	f006 fad3 	bl	8007798 <HAL_UART_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011f8:	f000 f97c 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_USART2_UART_Init+0x90>)
 8001200:	f006 feaa 	bl	8007f58 <HAL_UARTEx_SetTxFifoThreshold>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800120a:	f000 f973 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x90>)
 8001212:	f006 fedf 	bl	8007fd4 <HAL_UARTEx_SetRxFifoThreshold>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800121c:	f000 f96a 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_USART2_UART_Init+0x90>)
 8001222:	f006 fe60 	bl	8007ee6 <HAL_UARTEx_DisableFifoMode>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800122c:	f000 f962 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200a06d4 	.word	0x200a06d4
 8001238:	40004400 	.word	0x40004400

0800123c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <MX_USART3_UART_Init+0x94>)
 8001244:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001248:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800124c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_USART3_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_USART3_UART_Init+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USART3_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001286:	f006 fa87 	bl	8007798 <HAL_UART_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001290:	f000 f930 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_USART3_UART_Init+0x90>)
 8001298:	f006 fe5e 	bl	8007f58 <HAL_UARTEx_SetTxFifoThreshold>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012a2:	f000 f927 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4808      	ldr	r0, [pc, #32]	; (80012cc <MX_USART3_UART_Init+0x90>)
 80012aa:	f006 fe93 	bl	8007fd4 <HAL_UARTEx_SetRxFifoThreshold>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012b4:	f000 f91e 	bl	80014f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_USART3_UART_Init+0x90>)
 80012ba:	f006 fe14 	bl	8007ee6 <HAL_UARTEx_DisableFifoMode>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012c4:	f000 f916 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200a0764 	.word	0x200a0764
 80012d0:	40004800 	.word	0x40004800

080012d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012e0:	2206      	movs	r2, #6
 80012e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012e6:	2202      	movs	r2, #2
 80012e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001310:	f001 fba0 	bl	8002a54 <HAL_PCD_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 800131a:	f000 f8eb 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200a07f4 	.word	0x200a07f4
 8001328:	42040000 	.word	0x42040000

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001348:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <MX_GPIO_Init+0x18c>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001366:	4a54      	ldr	r2, [pc, #336]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001370:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001384:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800139c:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <MX_GPIO_Init+0x18c>)
 800139e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a2:	4a45      	ldr	r2, [pc, #276]	; (80014b8 <MX_GPIO_Init+0x18c>)
 80013a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013ac:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <MX_GPIO_Init+0x18c>)
 80013ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2104      	movs	r1, #4
 80013be:	483f      	ldr	r0, [pc, #252]	; (80014bc <MX_GPIO_Init+0x190>)
 80013c0:	f001 fb00 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	483d      	ldr	r0, [pc, #244]	; (80014c0 <MX_GPIO_Init+0x194>)
 80013ca:	f001 fafb 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	21a0      	movs	r1, #160	; 0xa0
 80013d2:	483c      	ldr	r0, [pc, #240]	; (80014c4 <MX_GPIO_Init+0x198>)
 80013d4:	f001 faf6 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80013d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <MX_GPIO_Init+0x19c>)
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4834      	ldr	r0, [pc, #208]	; (80014c0 <MX_GPIO_Init+0x194>)
 80013ee:	f001 f911 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80013f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	482f      	ldr	r0, [pc, #188]	; (80014c4 <MX_GPIO_Init+0x198>)
 8001408:	f001 f904 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD1_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD1_CC2_Pin;
 800140c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD1_CC2_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4828      	ldr	r0, [pc, #160]	; (80014c4 <MX_GPIO_Init+0x198>)
 8001422:	f001 f8f7 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001426:	2304      	movs	r3, #4
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	481f      	ldr	r0, [pc, #124]	; (80014bc <MX_GPIO_Init+0x190>)
 800143e:	f001 f8e9 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144e:	2302      	movs	r3, #2
 8001450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4819      	ldr	r0, [pc, #100]	; (80014c0 <MX_GPIO_Init+0x194>)
 800145a:	f001 f8db 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD1_CC1_Pin */
  GPIO_InitStruct.Pin = UCPD1_CC1_Pin;
 800145e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001464:	2303      	movs	r3, #3
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD1_CC1_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4816      	ldr	r0, [pc, #88]	; (80014cc <MX_GPIO_Init+0x1a0>)
 8001474:	f001 f8ce 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001478:	2320      	movs	r3, #32
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_GPIO_Init+0x198>)
 8001490:	f001 f8c0 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149c:	2301      	movs	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2302      	movs	r3, #2
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_GPIO_Init+0x198>)
 80014ac:	f001 f8b2 	bl	8002614 <HAL_GPIO_Init>

}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	46020c00 	.word	0x46020c00
 80014bc:	42021800 	.word	0x42021800
 80014c0:	42020800 	.word	0x42020800
 80014c4:	42020400 	.word	0x42020400
 80014c8:	10210000 	.word	0x10210000
 80014cc:	42020000 	.word	0x42020000

080014d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014e2:	f000 fb81 	bl	8001be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40014400 	.word	0x40014400

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_MspInit+0x34>)
 8001508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150c:	4a09      	ldr	r2, [pc, #36]	; (8001534 <HAL_MspInit+0x34>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_MspInit+0x34>)
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001524:	2004      	movs	r0, #4
 8001526:	f001 f83d 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	46020c00 	.word	0x46020c00

08001538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0bc      	sub	sp, #240	; 0xf0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	22c8      	movs	r2, #200	; 0xc8
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f009 f9ed 	bl	800a938 <memset>
  if(hadc->Instance==ADC1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <HAL_ADC_MspInit+0xbc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d140      	bne.n	80015ea <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001568:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4618      	mov	r0, r3
 8001582:	f002 ff95 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 800158c:	f7ff ffb2 	bl	80014f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_ADC_MspInit+0xc0>)
 8001592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_ADC_MspInit+0xc0>)
 8001598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_ADC_MspInit+0xc0>)
 80015a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_ADC_MspInit+0xc0>)
 80015b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_ADC_MspInit+0xc0>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_ADC_MspInit+0xc0>)
 80015c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80015cc:	2304      	movs	r3, #4
 80015ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_ADC_MspInit+0xc4>)
 80015e6:	f001 f815 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	37f0      	adds	r7, #240	; 0xf0
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	42028000 	.word	0x42028000
 80015f8:	46020c00 	.word	0x46020c00
 80015fc:	42020800 	.word	0x42020800

08001600 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0b6      	sub	sp, #216	; 0xd8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	22c8      	movs	r2, #200	; 0xc8
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f009 f991 	bl	800a938 <memset>
  if(hrtc->Instance==RTC)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_RTC_MspInit+0x80>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d12a      	bne.n	8001676 <HAL_RTC_MspInit+0x76>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001620:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4618      	mov	r0, r3
 800163a:	f002 ff39 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001644:	f7ff ff56 	bl	80014f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_RTC_MspInit+0x84>)
 800164a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800164e:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_RTC_MspInit+0x84>)
 8001650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001654:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RTC_MspInit+0x84>)
 800165a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_RTC_MspInit+0x84>)
 8001660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001664:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RTC_MspInit+0x84>)
 800166a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	37d8      	adds	r7, #216	; 0xd8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	46007800 	.word	0x46007800
 8001684:	46020c00 	.word	0x46020c00

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0c0      	sub	sp, #256	; 0x100
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	22c8      	movs	r2, #200	; 0xc8
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f009 f945 	bl	800a938 <memset>
  if(huart->Instance==USART1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a72      	ldr	r2, [pc, #456]	; (800187c <HAL_UART_MspInit+0x1f4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d146      	bne.n	8001746 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016b8:	f04f 0201 	mov.w	r2, #1
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016c4:	2300      	movs	r3, #0
 80016c6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 feef 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80016d8:	f7ff ff0c 	bl	80014f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 80016de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016e2:	4a67      	ldr	r2, [pc, #412]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80016ec:	4b64      	ldr	r3, [pc, #400]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 80016ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b61      	ldr	r3, [pc, #388]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 80016fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001700:	4a5f      	ldr	r2, [pc, #380]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001718:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800171c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001732:	2307      	movs	r3, #7
 8001734:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800173c:	4619      	mov	r1, r3
 800173e:	4851      	ldr	r0, [pc, #324]	; (8001884 <HAL_UART_MspInit+0x1fc>)
 8001740:	f000 ff68 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001744:	e094      	b.n	8001870 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <HAL_UART_MspInit+0x200>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d145      	bne.n	80017dc <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001750:	f04f 0202 	mov.w	r2, #2
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fea3 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001770:	f7ff fec0 	bl	80014f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 8001776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800177a:	4a41      	ldr	r2, [pc, #260]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001784:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 8001786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 8001794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001798:	4a39      	ldr	r2, [pc, #228]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 80017a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b0:	230c      	movs	r3, #12
 80017b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c8:	2307      	movs	r3, #7
 80017ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017d2:	4619      	mov	r1, r3
 80017d4:	482b      	ldr	r0, [pc, #172]	; (8001884 <HAL_UART_MspInit+0x1fc>)
 80017d6:	f000 ff1d 	bl	8002614 <HAL_GPIO_Init>
}
 80017da:	e049      	b.n	8001870 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2a      	ldr	r2, [pc, #168]	; (800188c <HAL_UART_MspInit+0x204>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d144      	bne.n	8001870 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017e6:	f04f 0204 	mov.w	r2, #4
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f6:	f107 0320 	add.w	r3, r7, #32
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fe58 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001806:	f7ff fe75 	bl	80014f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 800180c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 800181c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 800182a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_UART_MspInit+0x1f8>)
 800183a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001846:	23a0      	movs	r3, #160	; 0xa0
 8001848:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800185e:	2307      	movs	r3, #7
 8001860:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <HAL_UART_MspInit+0x1fc>)
 800186c:	f000 fed2 	bl	8002614 <HAL_GPIO_Init>
}
 8001870:	bf00      	nop
 8001872:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40013800 	.word	0x40013800
 8001880:	46020c00 	.word	0x46020c00
 8001884:	42020000 	.word	0x42020000
 8001888:	40004400 	.word	0x40004400
 800188c:	40004800 	.word	0x40004800

08001890 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b0be      	sub	sp, #248	; 0xf8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	22c8      	movs	r2, #200	; 0xc8
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f009 f841 	bl	800a938 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_PCD_MspInit+0x10c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d169      	bne.n	8001994 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80018c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d2:	f107 0318 	add.w	r3, r7, #24
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fdea 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80018e2:	f7ff fe07 	bl	80014f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 80018e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ec:	4a2c      	ldr	r2, [pc, #176]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 80018f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001904:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001908:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800191e:	230a      	movs	r3, #10
 8001920:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001928:	4619      	mov	r1, r3
 800192a:	481e      	ldr	r0, [pc, #120]	; (80019a4 <HAL_PCD_MspInit+0x114>)
 800192c:	f000 fe72 	bl	8002614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001936:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d119      	bne.n	8001990 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 800195e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800197a:	f001 fa85 	bl	8002e88 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_PCD_MspInit+0x110>)
 8001986:	f023 0304 	bic.w	r3, r3, #4
 800198a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800198e:	e001      	b.n	8001994 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001990:	f001 fa7a 	bl	8002e88 <HAL_PWREx_EnableVddUSB>
}
 8001994:	bf00      	nop
 8001996:	37f8      	adds	r7, #248	; 0xf8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	42040000 	.word	0x42040000
 80019a0:	46020c00 	.word	0x46020c00
 80019a4:	42020000 	.word	0x42020000

080019a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08e      	sub	sp, #56	; 0x38
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80019b8:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_InitTick+0xcc>)
 80019ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019be:	4a2d      	ldr	r2, [pc, #180]	; (8001a74 <HAL_InitTick+0xcc>)
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_InitTick+0xcc>)
 80019ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d6:	f107 0210 	add.w	r2, r7, #16
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fca7 	bl	8004334 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019e6:	f002 fc7d 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 80019ea:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_InitTick+0xd0>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0c9b      	lsrs	r3, r3, #18
 80019f6:	3b01      	subs	r3, #1
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_InitTick+0xd4>)
 80019fc:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <HAL_InitTick+0xd8>)
 80019fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_InitTick+0xd4>)
 8001a02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a06:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001a08:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <HAL_InitTick+0xd4>)
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_InitTick+0xd4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_InitTick+0xd4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim16);
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <HAL_InitTick+0xd4>)
 8001a1c:	f005 fad2 	bl	8006fc4 <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001a26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001a2e:	4813      	ldr	r0, [pc, #76]	; (8001a7c <HAL_InitTick+0xd4>)
 8001a30:	f005 fb2a 	bl	8007088 <HAL_TIM_Base_Start_IT>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001a3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10e      	bne.n	8001a60 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d808      	bhi.n	8001a5a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM16 global Interrupt */
        HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	2046      	movs	r0, #70	; 0x46
 8001a4e:	f000 fdb4 	bl	80025ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_InitTick+0xdc>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e002      	b.n	8001a60 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001a60:	2046      	movs	r0, #70	; 0x46
 8001a62:	f000 fdc4 	bl	80025ee <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3738      	adds	r7, #56	; 0x38
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	46020c00 	.word	0x46020c00
 8001a78:	431bde83 	.word	0x431bde83
 8001a7c:	200a0d00 	.word	0x200a0d00
 8001a80:	40014400 	.word	0x40014400
 8001a84:	20000004 	.word	0x20000004

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM16_IRQHandler+0x10>)
 8001aba:	f005 fb85 	bl	80071c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200a0d00 	.word	0x200a0d00

08001ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <SystemInit+0x68>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <SystemInit+0x68>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <SystemInit+0x6c>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <SystemInit+0x6c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <SystemInit+0x6c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <SystemInit+0x6c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <SystemInit+0x6c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <SystemInit+0x6c>)
 8001afa:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001afe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b02:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <SystemInit+0x6c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <SystemInit+0x6c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <SystemInit+0x6c>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <SystemInit+0x6c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SystemInit+0x68>)
 8001b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b22:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00
 8001b34:	46020c00 	.word	0x46020c00

08001b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b3e:	e003      	b.n	8001b48 <LoopCopyDataInit>

08001b40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b46:	3104      	adds	r1, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b50:	d3f6      	bcc.n	8001b40 <CopyDataInit>
	ldr	r2, =_sbss
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b54:	e002      	b.n	8001b5c <LoopFillZerobss>

08001b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b58:	f842 3b04 	str.w	r3, [r2], #4

08001b5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <LoopForever+0x16>)
	cmp	r2, r3
 8001b5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b60:	d3f9      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b62:	f7ff ffb1 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f008 fec3 	bl	800a8f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b6a:	f7ff f995 	bl	8000e98 <main>

08001b6e <LoopForever>:

LoopForever:
    b LoopForever
 8001b6e:	e7fe      	b.n	8001b6e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b70:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001b74:	0800ab0c 	.word	0x0800ab0c
	ldr	r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b7c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001b80:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001b84:	200a1394 	.word	0x200a1394

08001b88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC1_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_Init+0x4c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_Init+0x4c>)
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 fd01 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ba2:	f002 fa69 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_Init+0x50>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	490b      	ldr	r1, [pc, #44]	; (8001be0 <HAL_Init+0x54>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_Init+0x58>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bbc:	2007      	movs	r0, #7
 8001bbe:	f7ff fef3 	bl	80019a8 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e002      	b.n	8001bd2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fc98 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	46020c00 	.word	0x46020c00
 8001be0:	0800a9fc 	.word	0x0800a9fc
 8001be4:	20000000 	.word	0x20000000

08001be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	200a0d4c 	.word	0x200a0d4c

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200a0d4c 	.word	0x200a0d4c

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008

08001c70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ca8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	d002      	beq.n	8001cc8 <LL_ADC_SetGainCompensation+0x32>
 8001cc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cc6:	e000      	b.n	8001cca <LL_ADC_SetGainCompensation+0x34>
 8001cc8:	2200      	movs	r2, #0
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2107      	movs	r1, #7
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6093      	str	r3, [r2, #8]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d52:	d101      	bne.n	8001d58 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da2:	d101      	bne.n	8001da8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <LL_ADC_IsEnabled+0x18>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <LL_ADC_IsEnabled+0x1a>
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d101      	bne.n	8001df4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d101      	bne.n	8001e1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e2e3      	b.n	8002410 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a92      	ldr	r2, [pc, #584]	; (80020a0 <HAL_ADC_Init+0x278>)
 8001e56:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fb69 	bl	8001538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff60 	bl	8001d3e <LL_ADC_IsDeepPowerDownEnabled>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff46 	bl	8001d1a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff7b 	bl	8001d8e <LL_ADC_IsInternalRegulatorEnabled>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff5f 	bl	8001d66 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <HAL_ADC_Init+0x27c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_ADC_Init+0x280>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff5d 	bl	8001d8e <LL_ADC_IsInternalRegulatorEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ede:	f043 0210 	orr.w	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff6d 	bl	8001ddc <LL_ADC_REG_IsConversionOngoing>
 8001f02:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 8274 	bne.w	80023fa <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 8270 	bne.w	80023fa <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f1e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f22:	f043 0202 	orr.w	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff41 	bl	8001db6 <LL_ADC_IsEnabled>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d14e      	bne.n	8001fd8 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_ADC_Init+0x278>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d028      	beq.n	8001f96 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_ADC_Init+0x284>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d109      	bne.n	8001f62 <HAL_ADC_Init+0x13a>
 8001f4e:	4857      	ldr	r0, [pc, #348]	; (80020ac <HAL_ADC_Init+0x284>)
 8001f50:	f7ff ff31 	bl	8001db6 <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e008      	b.n	8001f74 <HAL_ADC_Init+0x14c>
 8001f62:	484f      	ldr	r0, [pc, #316]	; (80020a0 <HAL_ADC_Init+0x278>)
 8001f64:	f7ff ff27 	bl	8001db6 <LL_ADC_IsEnabled>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d02f      	beq.n	8001fd8 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_ADC_Init+0x284>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_Init+0x15e>
 8001f82:	4a4b      	ldr	r2, [pc, #300]	; (80020b0 <HAL_ADC_Init+0x288>)
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_Init+0x160>
 8001f86:	4a4b      	ldr	r2, [pc, #300]	; (80020b4 <HAL_ADC_Init+0x28c>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4610      	mov	r0, r2
 8001f90:	f7ff fe6e 	bl	8001c70 <LL_ADC_SetCommonClock>
 8001f94:	e020      	b.n	8001fd8 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f023 010c 	bic.w	r1, r3, #12
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d005      	beq.n	8001fb8 <HAL_ADC_Init+0x190>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_Init+0x192>
 8001fb8:	230c      	movs	r3, #12
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001fc2:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <HAL_ADC_Init+0x28c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fd2:	4938      	ldr	r1, [pc, #224]	; (80020b4 <HAL_ADC_Init+0x28c>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <HAL_ADC_Init+0x278>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d010      	beq.n	8002004 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001fee:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001ff4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ffc:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001ffe:	4313      	orrs	r3, r2
 8002000:	623b      	str	r3, [r7, #32]
 8002002:	e030      	b.n	8002066 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f1b      	ldrb	r3, [r3, #28]
 8002008:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002010:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002012:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002018:	2a00      	cmp	r2, #0
 800201a:	d002      	beq.n	8002022 <HAL_ADC_Init+0x1fa>
 800201c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002020:	e000      	b.n	8002024 <HAL_ADC_Init+0x1fc>
 8002022:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002024:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800202a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	da04      	bge.n	800203e <HAL_ADC_Init+0x216>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800203c:	e001      	b.n	8002042 <HAL_ADC_Init+0x21a>
 800203e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8002042:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4918      	ldr	r1, [pc, #96]	; (80020ac <HAL_ADC_Init+0x284>)
 800204a:	428b      	cmp	r3, r1
 800204c:	d103      	bne.n	8002056 <HAL_ADC_Init+0x22e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002054:	e003      	b.n	800205e <HAL_ADC_Init+0x236>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800205c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800205e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	4313      	orrs	r3, r2
 8002064:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800206c:	2b01      	cmp	r3, #1
 800206e:	d12f      	bne.n	80020d0 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <HAL_ADC_Init+0x278>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	3b01      	subs	r3, #1
 8002080:	045b      	lsls	r3, r3, #17
 8002082:	6a3a      	ldr	r2, [r7, #32]
 8002084:	4313      	orrs	r3, r2
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	e022      	b.n	80020d0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d111      	bne.n	80020b8 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	e018      	b.n	80020d0 <HAL_ADC_Init+0x2a8>
 800209e:	bf00      	nop
 80020a0:	46021000 	.word	0x46021000
 80020a4:	20000000 	.word	0x20000000
 80020a8:	053e2d63 	.word	0x053e2d63
 80020ac:	42028000 	.word	0x42028000
 80020b0:	42028308 	.word	0x42028308
 80020b4:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a93      	ldr	r2, [pc, #588]	; (8002324 <HAL_ADC_Init+0x4fc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d018      	beq.n	800210c <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	4313      	orrs	r3, r2
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4b8a      	ldr	r3, [pc, #552]	; (8002328 <HAL_ADC_Init+0x500>)
 80020fe:	4013      	ands	r3, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	6a39      	ldr	r1, [r7, #32]
 8002106:	430b      	orrs	r3, r1
 8002108:	60d3      	str	r3, [r2, #12]
 800210a:	e033      	b.n	8002174 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	4313      	orrs	r3, r2
 8002122:	6a3a      	ldr	r2, [r7, #32]
 8002124:	4313      	orrs	r3, r2
 8002126:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8002132:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	6a39      	ldr	r1, [r7, #32]
 800213c:	430b      	orrs	r3, r1
 800213e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1a      	ldr	r2, [r3, #32]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6a      	ldr	r2, [pc, #424]	; (8002324 <HAL_ADC_Init+0x4fc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f000 8093 	beq.w	80022a6 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe29 	bl	8001ddc <LL_ADC_REG_IsConversionOngoing>
 800218a:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fe36 	bl	8001e02 <LL_ADC_INJ_IsConversionOngoing>
 8002196:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d161      	bne.n	8002262 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d15e      	bne.n	8002262 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7f1b      	ldrb	r3, [r3, #28]
 80021a8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	495f      	ldr	r1, [pc, #380]	; (800232c <HAL_ADC_Init+0x504>)
 80021b0:	428b      	cmp	r3, r1
 80021b2:	d102      	bne.n	80021ba <HAL_ADC_Init+0x392>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	e002      	b.n	80021c0 <HAL_ADC_Init+0x398>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021c0:	4313      	orrs	r3, r2
 80021c2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6a39      	ldr	r1, [r7, #32]
 80021d8:	430b      	orrs	r3, r1
 80021da:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f7ff fd51 	bl	8001c96 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d11e      	bne.n	800223c <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_ADC_Init+0x508>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002212:	0411      	lsls	r1, r2, #16
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800221e:	4311      	orrs	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800222a:	0892      	lsrs	r2, r2, #2
 800222c:	430a      	orrs	r2, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	e007      	b.n	800224c <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10c      	bne.n	8002284 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f023 010f 	bic.w	r1, r3, #15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
 8002282:	e007      	b.n	8002294 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 020f 	bic.w	r2, r2, #15
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002298:	f023 0303 	bic.w	r3, r3, #3
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022a4:	e0b2      	b.n	800240c <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80022ae:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 80022b4:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 80022ba:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d103      	bne.n	80022d4 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_ADC_Init+0x50c>)
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	69f9      	ldr	r1, [r7, #28]
 80022e4:	430b      	orrs	r3, r1
 80022e6:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	461a      	mov	r2, r3
 80022f2:	2100      	movs	r1, #0
 80022f4:	f7ff fcf2 	bl	8001cdc <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	461a      	mov	r2, r3
 8002302:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002306:	f7ff fce9 	bl	8001cdc <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d112      	bne.n	8002338 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f062 020f 	orn	r2, r2, #15
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
 8002322:	e044      	b.n	80023ae <HAL_ADC_Init+0x586>
 8002324:	46021000 	.word	0x46021000
 8002328:	fff0c013 	.word	0xfff0c013
 800232c:	42028000 	.word	0x42028000
 8002330:	fc00f81e 	.word	0xfc00f81e
 8002334:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002340:	d135      	bne.n	80023ae <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	e00d      	b.n	8002364 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	2b0f      	cmp	r3, #15
 800235c:	d006      	beq.n	800236c <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	3301      	adds	r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b07      	cmp	r3, #7
 8002368:	d9ee      	bls.n	8002348 <HAL_ADC_Init+0x520>
 800236a:	e000      	b.n	800236e <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 800236c:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f062 020f 	orn	r2, r2, #15
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
 8002384:	e013      	b.n	80023ae <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f003 031c 	and.w	r3, r3, #28
 8002398:	f06f 020f 	mvn.w	r2, #15
 800239c:	fa02 f103 	lsl.w	r1, r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_ADC_Init+0x5f0>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d10b      	bne.n	80023d6 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c8:	f023 0303 	bic.w	r3, r3, #3
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023d4:	e01a      	b.n	800240c <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023da:	f023 0312 	bic.w	r3, r3, #18
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023f8:	e008      	b.n	800240c <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023fe:	f043 0210 	orr.w	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 800240c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002410:	4618      	mov	r0, r3
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	833ffff3 	.word	0x833ffff3

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4907      	ldr	r1, [pc, #28]	; (80024b8 <__NVIC_EnableIRQ+0x38>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	; (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
         );
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800257c:	f3bf 8f4f 	dsb	sy
}
 8002580:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <__NVIC_SystemReset+0x24>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800258a:	4904      	ldr	r1, [pc, #16]	; (800259c <__NVIC_SystemReset+0x24>)
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__NVIC_SystemReset+0x28>)
 800258e:	4313      	orrs	r3, r2
 8002590:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002592:	f3bf 8f4f 	dsb	sy
}
 8002596:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <__NVIC_SystemReset+0x20>
 800259c:	e000ed00 	.word	0xe000ed00
 80025a0:	05fa0004 	.word	0x05fa0004

080025a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff35 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025c8:	f7ff ff4c 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7ff ff9c 	bl	8002510 <NVIC_EncodePriority>
 80025d8:	4602      	mov	r2, r0
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff6b 	bl	80024bc <__NVIC_SetPriority>
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff3f 	bl	8002480 <__NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800260e:	f7ff ffb3 	bl	8002578 <__NVIC_SystemReset>
	...

08002614 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002626:	e1ba      	b.n	800299e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 81aa 	beq.w	8002998 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a55      	ldr	r2, [pc, #340]	; (800279c <HAL_GPIO_Init+0x188>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d15d      	bne.n	8002708 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002652:	2201      	movs	r2, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	4013      	ands	r3, r2
 8002660:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0201 	and.w	r2, r3, #1
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	4313      	orrs	r3, r2
 8002674:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800267c:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_GPIO_Init+0x18c>)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002684:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002686:	4a46      	ldr	r2, [pc, #280]	; (80027a0 <HAL_GPIO_Init+0x18c>)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	3208      	adds	r2, #8
 800269a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220b      	movs	r2, #11
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	08da      	lsrs	r2, r3, #3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	3208      	adds	r2, #8
 80026d2:	69f9      	ldr	r1, [r7, #28]
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2202      	movs	r2, #2
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e067      	b.n	80027d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x104>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b12      	cmp	r3, #18
 8002716:	d145      	bne.n	80027a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	4013      	ands	r3, r2
 800273a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f003 020f 	and.w	r2, r3, #15
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	4313      	orrs	r3, r2
 8002754:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69f9      	ldr	r1, [r7, #28]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	4013      	ands	r3, r2
 800277a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	4313      	orrs	r3, r2
 8002790:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e01e      	b.n	80027d8 <HAL_GPIO_Init+0x1c4>
 800279a:	bf00      	nop
 800279c:	46020000 	.word	0x46020000
 80027a0:	0800aa54 	.word	0x0800aa54
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d00b      	beq.n	80027f8 <HAL_GPIO_Init+0x1e4>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d007      	beq.n	80027f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ec:	2b11      	cmp	r3, #17
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b12      	cmp	r3, #18
 80027f6:	d130      	bne.n	800285a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	4013      	ands	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	4313      	orrs	r3, r2
 8002820:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800282e:	2201      	movs	r2, #1
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	4013      	ands	r3, r2
 800283c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 0201 	and.w	r2, r3, #1
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	4313      	orrs	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d017      	beq.n	8002892 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	4013      	ands	r3, r2
 8002878:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	4313      	orrs	r3, r2
 800288a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d07c      	beq.n	8002998 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800289e:	4a47      	ldr	r2, [pc, #284]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3318      	adds	r3, #24
 80028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	220f      	movs	r2, #15
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	4013      	ands	r3, r2
 80028c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0a9a      	lsrs	r2, r3, #10
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_GPIO_Init+0x3ac>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	f002 0203 	and.w	r2, r2, #3
 80028d0:	00d2      	lsls	r2, r2, #3
 80028d2:	4093      	lsls	r3, r2
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80028da:	4938      	ldr	r1, [pc, #224]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3318      	adds	r3, #24
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800290c:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002912:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	4013      	ands	r3, r2
 8002920:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002942:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	4013      	ands	r3, r2
 800294c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002962:	4a16      	ldr	r2, [pc, #88]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 800296c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002970:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	43db      	mvns	r3, r3
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	4013      	ands	r3, r2
 800297a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002990:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <HAL_GPIO_Init+0x3a8>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3301      	adds	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f47f ae3d 	bne.w	8002628 <HAL_GPIO_Init+0x14>
  }
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	3724      	adds	r7, #36	; 0x24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	46022000 	.word	0x46022000
 80029c0:	002f7f7f 	.word	0x002f7f7f

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e007      	b.n	8002a22 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0204 	bic.w	r2, r3, #4
 8002a1a:	4905      	ldr	r1, [pc, #20]	; (8002a30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40030400 	.word	0x40030400

08002a34 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_ICACHE_Enable+0x1c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <HAL_ICACHE_Enable+0x1c>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40030400 	.word	0x40030400

08002a54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a56:	b08f      	sub	sp, #60	; 0x3c
 8002a58:	af0a      	add	r7, sp, #40	; 0x28
 8002a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e116      	b.n	8002c94 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7fe ff05 	bl	8001890 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f005 fb4d 	bl	8008144 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	687e      	ldr	r6, [r7, #4]
 8002ab2:	466d      	mov	r5, sp
 8002ab4:	f106 0410 	add.w	r4, r6, #16
 8002ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ac4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ac8:	1d33      	adds	r3, r6, #4
 8002aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002acc:	6838      	ldr	r0, [r7, #0]
 8002ace:	f005 fb0d 	bl	80080ec <USB_CoreInit>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d7      	b.n	8002c94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f005 fb3b 	bl	8008166 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e04a      	b.n	8002b8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	333d      	adds	r3, #61	; 0x3d
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	333c      	adds	r3, #60	; 0x3c
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	b298      	uxth	r0, r3
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3344      	adds	r3, #68	; 0x44
 8002b32:	4602      	mov	r2, r0
 8002b34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3340      	adds	r3, #64	; 0x40
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3348      	adds	r3, #72	; 0x48
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	334c      	adds	r3, #76	; 0x4c
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3354      	adds	r3, #84	; 0x54
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3af      	bcc.n	8002af6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e044      	b.n	8002c26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	3301      	adds	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3b5      	bcc.n	8002b9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	687e      	ldr	r6, [r7, #4]
 8002c38:	466d      	mov	r5, sp
 8002c3a:	f106 0410 	add.w	r4, r6, #16
 8002c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c4e:	1d33      	adds	r3, r6, #4
 8002c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	f005 fad4 	bl	8008200 <USB_DevInit>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e014      	b.n	8002c94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f80a 	bl	8002c9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f005 fc82 	bl	8008596 <USB_DevDisconnect>

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cce:	f043 0303 	orr.w	r3, r3, #3
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d101      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e057      	b.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d90a      	bls.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1c:	60d3      	str	r3, [r2, #12]
 8002d1e:	e007      	b.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d28:	4925      	ldr	r1, [pc, #148]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002d30:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	2232      	movs	r2, #50	; 0x32
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002d4e:	e002      	b.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0x84>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f3      	bne.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01b      	beq.n	8002da6 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	2232      	movs	r2, #50	; 0x32
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	099b      	lsrs	r3, r3, #6
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002d8c:	e002      	b.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f3      	bne.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e000      	b.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	46020800 	.word	0x46020800
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	10624dd3 	.word	0x10624dd3

08002dcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	46020800 	.word	0x46020800

08002de8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_PWREx_ConfigSupply+0x94>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_PWREx_ConfigSupply+0x98>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2232      	movs	r2, #50	; 0x32
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_PWREx_ConfigSupply+0x98>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d113      	bne.n	8002e3c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_PWREx_ConfigSupply+0x9c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a1a      	ldr	r2, [pc, #104]	; (8002e84 <HAL_PWREx_ConfigSupply+0x9c>)
 8002e1a:	f023 0302 	bic.w	r3, r3, #2
 8002e1e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e20:	e002      	b.n	8002e28 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_PWREx_ConfigSupply+0x9c>)
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d116      	bne.n	8002e62 <HAL_PWREx_ConfigSupply+0x7a>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f3      	bne.n	8002e22 <HAL_PWREx_ConfigSupply+0x3a>
 8002e3a:	e012      	b.n	8002e62 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_PWREx_ConfigSupply+0x9c>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <HAL_PWREx_ConfigSupply+0x9c>)
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e48:	e002      	b.n	8002e50 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_PWREx_ConfigSupply+0x9c>)
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <HAL_PWREx_ConfigSupply+0x7a>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f3      	bne.n	8002e4a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	10624dd3 	.word	0x10624dd3
 8002e84:	46020800 	.word	0x46020800

08002e88 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6113      	str	r3, [r2, #16]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	46020800 	.word	0x46020800

08002ea8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002eb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002eb6:	6113      	str	r3, [r2, #16]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	46020800 	.word	0x46020800

08002ec8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	46020800 	.word	0x46020800

08002ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f000 bec3 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f02:	4b9c      	ldr	r3, [pc, #624]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0c:	4b99      	ldr	r3, [pc, #612]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8172 	beq.w	8003208 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_RCC_OscConfig+0x52>
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	f040 80e4 	bne.w	80030fa <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 80e0 	bne.w	80030fa <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f3a:	4b8e      	ldr	r3, [pc, #568]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_RCC_OscConfig+0x6c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f000 be9a 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f58:	4b86      	ldr	r3, [pc, #536]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <HAL_RCC_OscConfig+0x86>
 8002f64:	4b83      	ldr	r3, [pc, #524]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002f6c:	e005      	b.n	8002f7a <HAL_RCC_OscConfig+0x92>
 8002f6e:	4b81      	ldr	r3, [pc, #516]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d255      	bcs.n	800302a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fa0b 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f000 be77 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002f9a:	4b76      	ldr	r3, [pc, #472]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4a75      	ldr	r2, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fa4:	6093      	str	r3, [r2, #8]
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	4970      	ldr	r1, [pc, #448]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002fc0:	d309      	bcc.n	8002fd6 <HAL_RCC_OscConfig+0xee>
 8002fc2:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f023 021f 	bic.w	r2, r3, #31
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4969      	ldr	r1, [pc, #420]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60cb      	str	r3, [r1, #12]
 8002fd4:	e07e      	b.n	80030d4 <HAL_RCC_OscConfig+0x1ec>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da0a      	bge.n	8002ff4 <HAL_RCC_OscConfig+0x10c>
 8002fde:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	015b      	lsls	r3, r3, #5
 8002fec:	4961      	ldr	r1, [pc, #388]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60cb      	str	r3, [r1, #12]
 8002ff2:	e06f      	b.n	80030d4 <HAL_RCC_OscConfig+0x1ec>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d30a      	bcc.n	8003014 <HAL_RCC_OscConfig+0x12c>
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	029b      	lsls	r3, r3, #10
 800300c:	4959      	ldr	r1, [pc, #356]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60cb      	str	r3, [r1, #12]
 8003012:	e05f      	b.n	80030d4 <HAL_RCC_OscConfig+0x1ec>
 8003014:	4b57      	ldr	r3, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	03db      	lsls	r3, r3, #15
 8003022:	4954      	ldr	r1, [pc, #336]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003024:	4313      	orrs	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
 8003028:	e054      	b.n	80030d4 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800302a:	4b52      	ldr	r3, [pc, #328]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4a51      	ldr	r2, [pc, #324]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003034:	6093      	str	r3, [r2, #8]
 8003036:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	494c      	ldr	r1, [pc, #304]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003050:	d309      	bcc.n	8003066 <HAL_RCC_OscConfig+0x17e>
 8003052:	4b48      	ldr	r3, [pc, #288]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f023 021f 	bic.w	r2, r3, #31
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4945      	ldr	r1, [pc, #276]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
 8003064:	e028      	b.n	80030b8 <HAL_RCC_OscConfig+0x1d0>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	da0a      	bge.n	8003084 <HAL_RCC_OscConfig+0x19c>
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	493d      	ldr	r1, [pc, #244]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 800307e:	4313      	orrs	r3, r2
 8003080:	60cb      	str	r3, [r1, #12]
 8003082:	e019      	b.n	80030b8 <HAL_RCC_OscConfig+0x1d0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d30a      	bcc.n	80030a4 <HAL_RCC_OscConfig+0x1bc>
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	4935      	ldr	r1, [pc, #212]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	60cb      	str	r3, [r1, #12]
 80030a2:	e009      	b.n	80030b8 <HAL_RCC_OscConfig+0x1d0>
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	03db      	lsls	r3, r3, #15
 80030b2:	4930      	ldr	r1, [pc, #192]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 f96e 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f000 bdda 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80030d4:	f001 f8d8 	bl	8004288 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030d8:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x290>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe fc63 	bl	80019a8 <HAL_InitTick>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80030e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 808a 	beq.w	8003206 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 80030f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f6:	f000 bdc7 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d066      	beq.n	80031d0 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800310e:	f7fe fd7f 	bl	8001c10 <HAL_GetTick>
 8003112:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003114:	e009      	b.n	800312a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003116:	f7fe fd7b 	bl	8001c10 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d902      	bls.n	800312a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	f000 bdaf 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ef      	beq.n	8003116 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 800313c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003140:	6093      	str	r3, [r2, #8]
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	4909      	ldr	r1, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800315c:	d30e      	bcc.n	800317c <HAL_RCC_OscConfig+0x294>
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 021f 	bic.w	r2, r3, #31
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4902      	ldr	r1, [pc, #8]	; (8003174 <HAL_RCC_OscConfig+0x28c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	60cb      	str	r3, [r1, #12]
 8003170:	e04a      	b.n	8003208 <HAL_RCC_OscConfig+0x320>
 8003172:	bf00      	nop
 8003174:	46020c00 	.word	0x46020c00
 8003178:	20000004 	.word	0x20000004
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	da0a      	bge.n	800319a <HAL_RCC_OscConfig+0x2b2>
 8003184:	4b9b      	ldr	r3, [pc, #620]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	015b      	lsls	r3, r3, #5
 8003192:	4998      	ldr	r1, [pc, #608]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	60cb      	str	r3, [r1, #12]
 8003198:	e036      	b.n	8003208 <HAL_RCC_OscConfig+0x320>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d30a      	bcc.n	80031ba <HAL_RCC_OscConfig+0x2d2>
 80031a4:	4b93      	ldr	r3, [pc, #588]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	029b      	lsls	r3, r3, #10
 80031b2:	4990      	ldr	r1, [pc, #576]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60cb      	str	r3, [r1, #12]
 80031b8:	e026      	b.n	8003208 <HAL_RCC_OscConfig+0x320>
 80031ba:	4b8e      	ldr	r3, [pc, #568]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	03db      	lsls	r3, r3, #15
 80031c8:	498a      	ldr	r1, [pc, #552]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60cb      	str	r3, [r1, #12]
 80031ce:	e01b      	b.n	8003208 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80031d0:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a87      	ldr	r2, [pc, #540]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80031dc:	f7fe fd18 	bl	8001c10 <HAL_GetTick>
 80031e0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80031e2:	e009      	b.n	80031f8 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e4:	f7fe fd14 	bl	8001c10 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d902      	bls.n	80031f8 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	f000 bd48 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ef      	bne.n	80031e4 <HAL_RCC_OscConfig+0x2fc>
 8003204:	e000      	b.n	8003208 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003206:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8094 	beq.w	800333e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	2b08      	cmp	r3, #8
 800321a:	d005      	beq.n	8003228 <HAL_RCC_OscConfig+0x340>
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d110      	bne.n	8003244 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	2b03      	cmp	r3, #3
 8003226:	d10d      	bne.n	8003244 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	4b72      	ldr	r3, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8083 	beq.w	800333c <HAL_RCC_OscConfig+0x454>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d17e      	bne.n	800333c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f000 bd22 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0x374>
 800324e:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a68      	ldr	r2, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e041      	b.n	80032e0 <HAL_RCC_OscConfig+0x3f8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003264:	d112      	bne.n	800328c <HAL_RCC_OscConfig+0x3a4>
 8003266:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a62      	ldr	r2, [pc, #392]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 800326c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b60      	ldr	r3, [pc, #384]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003278:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e029      	b.n	80032e0 <HAL_RCC_OscConfig+0x3f8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003294:	d112      	bne.n	80032bc <HAL_RCC_OscConfig+0x3d4>
 8003296:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a56      	ldr	r2, [pc, #344]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b54      	ldr	r3, [pc, #336]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a53      	ldr	r2, [pc, #332]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b51      	ldr	r3, [pc, #324]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a50      	ldr	r2, [pc, #320]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e011      	b.n	80032e0 <HAL_RCC_OscConfig+0x3f8>
 80032bc:	4b4d      	ldr	r3, [pc, #308]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4c      	ldr	r2, [pc, #304]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a49      	ldr	r2, [pc, #292]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a46      	ldr	r2, [pc, #280]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80032da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d014      	beq.n	8003312 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 80032e8:	f7fe fc92 	bl	8001c10 <HAL_GetTick>
 80032ec:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ee:	e009      	b.n	8003304 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fe fc8e 	bl	8001c10 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d902      	bls.n	8003304 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	f000 bcc2 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003304:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ef      	beq.n	80032f0 <HAL_RCC_OscConfig+0x408>
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003312:	f7fe fc7d 	bl	8001c10 <HAL_GetTick>
 8003316:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003318:	e009      	b.n	800332e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331a:	f7fe fc79 	bl	8001c10 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	; 0x64
 8003326:	d902      	bls.n	800332e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	f000 bcad 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1ef      	bne.n	800331a <HAL_RCC_OscConfig+0x432>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d066      	beq.n	8003418 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2b04      	cmp	r3, #4
 800334e:	d005      	beq.n	800335c <HAL_RCC_OscConfig+0x474>
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d11a      	bne.n	800338c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	2b02      	cmp	r3, #2
 800335a:	d117      	bne.n	800338c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <HAL_RCC_OscConfig+0x48e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f000 bc89 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	491b      	ldr	r1, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003386:	4313      	orrs	r3, r2
 8003388:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338a:	e045      	b.n	8003418 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d024      	beq.n	80033de <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80033a0:	f7fe fc36 	bl	8001c10 <HAL_GetTick>
 80033a4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a6:	e009      	b.n	80033bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a8:	f7fe fc32 	bl	8001c10 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d902      	bls.n	80033bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f000 bc66 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	4907      	ldr	r1, [pc, #28]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	610b      	str	r3, [r1, #16]
 80033dc:	e01c      	b.n	8003418 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <HAL_RCC_OscConfig+0x50c>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80033ea:	f7fe fc11 	bl	8001c10 <HAL_GetTick>
 80033ee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f0:	e00c      	b.n	800340c <HAL_RCC_OscConfig+0x524>
 80033f2:	bf00      	nop
 80033f4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fe fc0a 	bl	8001c10 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d902      	bls.n	800340c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	f000 bc3e 	b.w	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800340c:	4baf      	ldr	r3, [pc, #700]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ef      	bne.n	80033f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80c7 	beq.w	80035b4 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342c:	4ba7      	ldr	r3, [pc, #668]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800342e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d111      	bne.n	800345e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	4ba4      	ldr	r3, [pc, #656]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800343c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003440:	4aa2      	ldr	r2, [pc, #648]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800344a:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800344c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800345e:	4b9c      	ldr	r3, [pc, #624]	; (80036d0 <HAL_RCC_OscConfig+0x7e8>)
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800346a:	4b99      	ldr	r3, [pc, #612]	; (80036d0 <HAL_RCC_OscConfig+0x7e8>)
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	4a98      	ldr	r2, [pc, #608]	; (80036d0 <HAL_RCC_OscConfig+0x7e8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fe fbcb 	bl	8001c10 <HAL_GetTick>
 800347a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fe fbc7 	bl	8001c10 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e3fb      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003490:	4b8f      	ldr	r3, [pc, #572]	; (80036d0 <HAL_RCC_OscConfig+0x7e8>)
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05f      	beq.n	8003564 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80034a4:	4b89      	ldr	r3, [pc, #548]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80034a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034aa:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699a      	ldr	r2, [r3, #24]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d037      	beq.n	800352a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d006      	beq.n	80034d2 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e3da      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80034dc:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80034de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e2:	4a7a      	ldr	r2, [pc, #488]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80034e4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80034e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80034ec:	f7fe fb90 	bl	8001c10 <HAL_GetTick>
 80034f0:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fe fb8c 	bl	8001c10 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e3c0      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003506:	4b71      	ldr	r3, [pc, #452]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800350c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ef      	bne.n	80034f4 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003514:	4b6d      	ldr	r3, [pc, #436]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800351a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	496a      	ldr	r1, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800352a:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800352c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003530:	4a66      	ldr	r2, [pc, #408]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003536:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800353a:	f7fe fb69 	bl	8001c10 <HAL_GetTick>
 800353e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe fb65 	bl	8001c10 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e399      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003554:	4b5d      	ldr	r3, [pc, #372]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800355a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ef      	beq.n	8003542 <HAL_RCC_OscConfig+0x65a>
 8003562:	e01b      	b.n	800359c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800356a:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800356c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003570:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003574:	f7fe fb4c 	bl	8001c10 <HAL_GetTick>
 8003578:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357c:	f7fe fb48 	bl	8001c10 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e37c      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800358e:	4b4f      	ldr	r3, [pc, #316]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ef      	bne.n	800357c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800359c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a4:	4b49      	ldr	r3, [pc, #292]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035aa:	4a48      	ldr	r2, [pc, #288]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8112 	beq.w	80037e6 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c8:	4b40      	ldr	r3, [pc, #256]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80035ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d111      	bne.n	80035fa <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035dc:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80035e6:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 80035e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035fa:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <HAL_RCC_OscConfig+0x7e8>)
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003606:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <HAL_RCC_OscConfig+0x7e8>)
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <HAL_RCC_OscConfig+0x7e8>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fe fafd 	bl	8001c10 <HAL_GetTick>
 8003616:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fe faf9 	bl	8001c10 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e32d      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800362c:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <HAL_RCC_OscConfig+0x7e8>)
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01f      	beq.n	8003684 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d010      	beq.n	8003672 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003656:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003660:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003666:	4a19      	ldr	r2, [pc, #100]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003670:	e018      	b.n	80036a4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003682:	e00f      	b.n	80036a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800368a:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 8003696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <HAL_RCC_OscConfig+0x7e4>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d058      	beq.n	800375e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80036ac:	f7fe fab0 	bl	8001c10 <HAL_GetTick>
 80036b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b2:	e00f      	b.n	80036d4 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe faac 	bl	8001c10 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d906      	bls.n	80036d4 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e2de      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
 80036ca:	bf00      	nop
 80036cc:	46020c00 	.word	0x46020c00
 80036d0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d4:	4b9c      	ldr	r3, [pc, #624]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80036d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0e8      	beq.n	80036b4 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01b      	beq.n	8003726 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036ee:	4b96      	ldr	r3, [pc, #600]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80036f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036f4:	4a94      	ldr	r2, [pc, #592]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80036f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe fa86 	bl	8001c10 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e2b8      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003716:	4b8c      	ldr	r3, [pc, #560]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800371c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ed      	beq.n	8003700 <HAL_RCC_OscConfig+0x818>
 8003724:	e053      	b.n	80037ce <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003726:	4b88      	ldr	r3, [pc, #544]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800372c:	4a86      	ldr	r2, [pc, #536]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 800372e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003732:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fe fa6a 	bl	8001c10 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e29c      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800374e:	4b7e      	ldr	r3, [pc, #504]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ed      	bne.n	8003738 <HAL_RCC_OscConfig+0x850>
 800375c:	e037      	b.n	80037ce <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800375e:	f7fe fa57 	bl	8001c10 <HAL_GetTick>
 8003762:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fa53 	bl	8001c10 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e285      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800377c:	4b72      	ldr	r3, [pc, #456]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 800377e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ed      	bne.n	8003766 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800378a:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 800378c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01a      	beq.n	80037ce <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003798:	4b6b      	ldr	r3, [pc, #428]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 800379a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800379e:	4a6a      	ldr	r2, [pc, #424]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80037a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe fa31 	bl	8001c10 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e263      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037c0:	4b61      	ldr	r3, [pc, #388]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80037c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ed      	bne.n	80037aa <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037dc:	4a5a      	ldr	r2, [pc, #360]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d036      	beq.n	8003860 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d019      	beq.n	800382e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80037fa:	4b53      	ldr	r3, [pc, #332]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a52      	ldr	r2, [pc, #328]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003804:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003806:	f7fe fa03 	bl	8001c10 <HAL_GetTick>
 800380a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800380e:	f7fe f9ff 	bl	8001c10 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e233      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003820:	4b49      	ldr	r3, [pc, #292]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x926>
 800382c:	e018      	b.n	8003860 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800382e:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a45      	ldr	r2, [pc, #276]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003838:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800383a:	f7fe f9e9 	bl	8001c10 <HAL_GetTick>
 800383e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003842:	f7fe f9e5 	bl	8001c10 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e219      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003854:	4b3c      	ldr	r3, [pc, #240]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d036      	beq.n	80038da <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b00      	cmp	r3, #0
 8003872:	d019      	beq.n	80038a8 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a33      	ldr	r2, [pc, #204]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 800387a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800387e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003880:	f7fe f9c6 	bl	8001c10 <HAL_GetTick>
 8003884:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003888:	f7fe f9c2 	bl	8001c10 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e1f6      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800389a:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x9a0>
 80038a6:	e018      	b.n	80038da <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a26      	ldr	r2, [pc, #152]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80038ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80038b4:	f7fe f9ac 	bl	8001c10 <HAL_GetTick>
 80038b8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80038bc:	f7fe f9a8 	bl	8001c10 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e1dc      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d07f      	beq.n	80039e6 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d062      	beq.n	80039b4 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80038f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038f8:	6093      	str	r3, [r2, #8]
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	4910      	ldr	r1, [pc, #64]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003914:	d309      	bcc.n	800392a <HAL_RCC_OscConfig+0xa42>
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 021f 	bic.w	r2, r3, #31
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4909      	ldr	r1, [pc, #36]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003924:	4313      	orrs	r3, r2
 8003926:	60cb      	str	r3, [r1, #12]
 8003928:	e02a      	b.n	8003980 <HAL_RCC_OscConfig+0xa98>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	da0c      	bge.n	800394c <HAL_RCC_OscConfig+0xa64>
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	015b      	lsls	r3, r3, #5
 8003940:	4901      	ldr	r1, [pc, #4]	; (8003948 <HAL_RCC_OscConfig+0xa60>)
 8003942:	4313      	orrs	r3, r2
 8003944:	60cb      	str	r3, [r1, #12]
 8003946:	e01b      	b.n	8003980 <HAL_RCC_OscConfig+0xa98>
 8003948:	46020c00 	.word	0x46020c00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d30a      	bcc.n	800396c <HAL_RCC_OscConfig+0xa84>
 8003956:	4ba5      	ldr	r3, [pc, #660]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	029b      	lsls	r3, r3, #10
 8003964:	49a1      	ldr	r1, [pc, #644]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003966:	4313      	orrs	r3, r2
 8003968:	60cb      	str	r3, [r1, #12]
 800396a:	e009      	b.n	8003980 <HAL_RCC_OscConfig+0xa98>
 800396c:	4b9f      	ldr	r3, [pc, #636]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	03db      	lsls	r3, r3, #15
 800397a:	499c      	ldr	r1, [pc, #624]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 800397c:	4313      	orrs	r3, r2
 800397e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003980:	4b9a      	ldr	r3, [pc, #616]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a99      	ldr	r2, [pc, #612]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003986:	f043 0310 	orr.w	r3, r3, #16
 800398a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800398c:	f7fe f940 	bl	8001c10 <HAL_GetTick>
 8003990:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003994:	f7fe f93c 	bl	8001c10 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e170      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80039a6:	4b91      	ldr	r3, [pc, #580]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0xaac>
 80039b2:	e018      	b.n	80039e6 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80039b4:	4b8d      	ldr	r3, [pc, #564]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a8c      	ldr	r2, [pc, #560]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 80039ba:	f023 0310 	bic.w	r3, r3, #16
 80039be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80039c0:	f7fe f926 	bl	8001c10 <HAL_GetTick>
 80039c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80039c8:	f7fe f922 	bl	8001c10 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e156      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80039da:	4b84      	ldr	r3, [pc, #528]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 814b 	beq.w	8003c86 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f6:	4b7d      	ldr	r3, [pc, #500]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	f000 80fa 	beq.w	8003bf8 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	f040 80cc 	bne.w	8003ba6 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b77      	ldr	r3, [pc, #476]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a76      	ldr	r2, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a1a:	f7fe f8f9 	bl	8001c10 <HAL_GetTick>
 8003a1e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fe f8f5 	bl	8001c10 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e129      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a34:	4b6d      	ldr	r3, [pc, #436]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a40:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d111      	bne.n	8003a72 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a54:	4a65      	ldr	r2, [pc, #404]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003a72:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_RCC_OscConfig+0xd08>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a7e:	d102      	bne.n	8003a86 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003a86:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <HAL_RCC_OscConfig+0xd08>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4a59      	ldr	r2, [pc, #356]	; (8003bf0 <HAL_RCC_OscConfig+0xd08>)
 8003a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a90:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003a92:	4b56      	ldr	r3, [pc, #344]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	0212      	lsls	r2, r2, #8
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	494e      	ldr	r1, [pc, #312]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abc:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <HAL_RCC_OscConfig+0xd0c>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ace:	3a01      	subs	r2, #1
 8003ad0:	0252      	lsls	r2, r2, #9
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	4311      	orrs	r1, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ada:	3a01      	subs	r2, #1
 8003adc:	0412      	lsls	r2, r2, #16
 8003ade:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	0612      	lsls	r2, r2, #24
 8003aec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003af0:	430a      	orrs	r2, r1
 8003af2:	493e      	ldr	r1, [pc, #248]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003af8:	4b3c      	ldr	r3, [pc, #240]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	4a3b      	ldr	r2, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003afe:	f023 0310 	bic.w	r3, r3, #16
 8003b02:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b14:	00d2      	lsls	r2, r2, #3
 8003b16:	4935      	ldr	r1, [pc, #212]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003b1c:	4b33      	ldr	r3, [pc, #204]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	4a32      	ldr	r2, [pc, #200]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b22:	f043 0310 	orr.w	r3, r3, #16
 8003b26:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003b28:	4b30      	ldr	r3, [pc, #192]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	f023 020c 	bic.w	r2, r3, #12
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	492d      	ldr	r1, [pc, #180]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d105      	bne.n	8003b4e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003b42:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_OscConfig+0xd08>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0xd08>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003b4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b25      	ldr	r3, [pc, #148]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5c:	4a23      	ldr	r2, [pc, #140]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	4a20      	ldr	r2, [pc, #128]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b70:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b7e:	f7fe f847 	bl	8001c10 <HAL_GetTick>
 8003b82:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fe f843 	bl	8001c10 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e077      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0xc9e>
 8003ba4:	e06f      	b.n	8003c86 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a10      	ldr	r2, [pc, #64]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bb2:	f7fe f82d 	bl	8001c10 <HAL_GetTick>
 8003bb6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fe f829 	bl	8001c10 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e05d      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	4a03      	ldr	r2, [pc, #12]	; (8003bec <HAL_RCC_OscConfig+0xd04>)
 8003bde:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	6293      	str	r3, [r2, #40]	; 0x28
 8003be8:	e04d      	b.n	8003c86 <HAL_RCC_OscConfig+0xd9e>
 8003bea:	bf00      	nop
 8003bec:	46020c00 	.word	0x46020c00
 8003bf0:	46020800 	.word	0x46020800
 8003bf4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0xda8>)
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0xda8>)
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d03a      	beq.n	8003c82 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0203 	and.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d133      	bne.n	8003c82 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d12a      	bne.n	8003c82 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	0b1b      	lsrs	r3, r3, #12
 8003c30:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d122      	bne.n	8003c82 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d11a      	bne.n	8003c82 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	0a5b      	lsrs	r3, r3, #9
 8003c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c58:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d111      	bne.n	8003c82 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d108      	bne.n	8003c82 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	0e1b      	lsrs	r3, r3, #24
 8003c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3738      	adds	r7, #56	; 0x38
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	46020c00 	.word	0x46020c00

08003c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e1d9      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b9b      	ldr	r3, [pc, #620]	; (8003f18 <HAL_RCC_ClockConfig+0x284>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d910      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b98      	ldr	r3, [pc, #608]	; (8003f18 <HAL_RCC_ClockConfig+0x284>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 020f 	bic.w	r2, r3, #15
 8003cbe:	4996      	ldr	r1, [pc, #600]	; (8003f18 <HAL_RCC_ClockConfig+0x284>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b94      	ldr	r3, [pc, #592]	; (8003f18 <HAL_RCC_ClockConfig+0x284>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e1c1      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d010      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	4b8c      	ldr	r3, [pc, #560]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d908      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003cf4:	4b89      	ldr	r3, [pc, #548]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	4986      	ldr	r1, [pc, #536]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d012      	beq.n	8003d38 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d909      	bls.n	8003d38 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003d24:	4b7d      	ldr	r3, [pc, #500]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	497a      	ldr	r1, [pc, #488]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	4b74      	ldr	r3, [pc, #464]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d908      	bls.n	8003d66 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003d54:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	496e      	ldr	r1, [pc, #440]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	4b69      	ldr	r3, [pc, #420]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d908      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003d82:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 020f 	bic.w	r2, r3, #15
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4963      	ldr	r1, [pc, #396]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80d2 	beq.w	8003f46 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d143      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dae:	4b5b      	ldr	r3, [pc, #364]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d110      	bne.n	8003dde <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	4b57      	ldr	r3, [pc, #348]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc2:	4a56      	ldr	r2, [pc, #344]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003dc4:	f043 0304 	orr.w	r3, r3, #4
 8003dc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003dcc:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003dde:	f7fd ff17 	bl	8001c10 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003de4:	4b4e      	ldr	r3, [pc, #312]	; (8003f20 <HAL_RCC_ClockConfig+0x28c>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00f      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003df2:	f7fd ff0d 	bl	8001c10 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e12b      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003e04:	4b46      	ldr	r3, [pc, #280]	; (8003f20 <HAL_RCC_ClockConfig+0x28c>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1c:	4a3f      	ldr	r2, [pc, #252]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003e1e:	f023 0304 	bic.w	r3, r3, #4
 8003e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003e26:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d121      	bne.n	8003e76 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e112      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3e:	4b37      	ldr	r3, [pc, #220]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d115      	bne.n	8003e76 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e106      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003e56:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0fa      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e66:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0f2      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003e76:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f023 0203 	bic.w	r2, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4926      	ldr	r1, [pc, #152]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003e88:	f7fd fec2 	bl	8001c10 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d112      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e98:	f7fd feba 	bl	8001c10 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0d6      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x204>
 8003eba:	e044      	b.n	8003f46 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d112      	bne.n	8003eea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec6:	f7fd fea3 	bl	8001c10 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0bf      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d1ee      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0x232>
 8003ee8:	e02d      	b.n	8003f46 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d123      	bne.n	8003f3a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef4:	f7fd fe8c 	bl	8001c10 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e0a8      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <HAL_RCC_ClockConfig+0x288>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x260>
 8003f16:	e016      	b.n	8003f46 <HAL_RCC_ClockConfig+0x2b2>
 8003f18:	40022000 	.word	0x40022000
 8003f1c:	46020c00 	.word	0x46020c00
 8003f20:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fd fe74 	bl	8001c10 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e090      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3a:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d1ee      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d010      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d208      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003f62:	4b40      	ldr	r3, [pc, #256]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 020f 	bic.w	r2, r3, #15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	493d      	ldr	r1, [pc, #244]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b3c      	ldr	r3, [pc, #240]	; (8004068 <HAL_RCC_ClockConfig+0x3d4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d210      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b39      	ldr	r3, [pc, #228]	; (8004068 <HAL_RCC_ClockConfig+0x3d4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 020f 	bic.w	r2, r3, #15
 8003f8a:	4937      	ldr	r1, [pc, #220]	; (8004068 <HAL_RCC_ClockConfig+0x3d4>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b35      	ldr	r3, [pc, #212]	; (8004068 <HAL_RCC_ClockConfig+0x3d4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e05b      	b.n	800405c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d208      	bcs.n	8003fd2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4925      	ldr	r1, [pc, #148]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d012      	beq.n	8004004 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d209      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	4919      	ldr	r1, [pc, #100]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8004000:	4313      	orrs	r3, r2
 8004002:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d010      	beq.n	8004032 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800401c:	429a      	cmp	r2, r3
 800401e:	d208      	bcs.n	8004032 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004020:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	490d      	ldr	r1, [pc, #52]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004032:	f000 f821 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8004036:	4602      	mov	r2, r0
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_RCC_ClockConfig+0x3d0>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	490a      	ldr	r1, [pc, #40]	; (800406c <HAL_RCC_ClockConfig+0x3d8>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x3dc>)
 800404a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCC_ClockConfig+0x3e0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fca9 	bl	80019a8 <HAL_InitTick>
 8004056:	4603      	mov	r3, r0
 8004058:	73fb      	strb	r3, [r7, #15]

  return status;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	46020c00 	.word	0x46020c00
 8004068:	40022000 	.word	0x40022000
 800406c:	0800a9fc 	.word	0x0800a9fc
 8004070:	20000000 	.word	0x20000000
 8004074:	20000004 	.word	0x20000004

08004078 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	b08b      	sub	sp, #44	; 0x2c
 800407c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004086:	4b7b      	ldr	r3, [pc, #492]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004090:	4b78      	ldr	r3, [pc, #480]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x34>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d121      	bne.n	80040ea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d11e      	bne.n	80040ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80040ac:	4b71      	ldr	r3, [pc, #452]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80040b8:	4b6e      	ldr	r3, [pc, #440]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80040ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040be:	0b1b      	lsrs	r3, r3, #12
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
 80040c6:	e005      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80040c8:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	0f1b      	lsrs	r3, r3, #28
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040d4:	4a68      	ldr	r2, [pc, #416]	; (8004278 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d110      	bne.n	8004106 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040e8:	e00d      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ea:	4b62      	ldr	r3, [pc, #392]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d102      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040f6:	4b61      	ldr	r3, [pc, #388]	; (800427c <HAL_RCC_GetSysClockFreq+0x204>)
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	e004      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d101      	bne.n	8004106 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004102:	4b5e      	ldr	r3, [pc, #376]	; (800427c <HAL_RCC_GetSysClockFreq+0x204>)
 8004104:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b0c      	cmp	r3, #12
 800410a:	f040 80ac 	bne.w	8004266 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800410e:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004118:	4b56      	ldr	r3, [pc, #344]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004126:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004132:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	08db      	lsrs	r3, r3, #3
 8004138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8086 	beq.w	8004262 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d003      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0xec>
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d022      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x130>
 8004162:	e043      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004280 <HAL_RCC_GetSysClockFreq+0x208>
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004186:	ed97 6a01 	vldr	s12, [r7, #4]
 800418a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004284 <HAL_RCC_GetSysClockFreq+0x20c>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80041a6:	e046      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004280 <HAL_RCC_GetSysClockFreq+0x208>
 80041b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ba:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80041ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80041ce:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004284 <HAL_RCC_GetSysClockFreq+0x20c>
 80041d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80041da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041de:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80041ea:	e024      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004214:	ed97 6a01 	vldr	s12, [r7, #4]
 8004218:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004284 <HAL_RCC_GetSysClockFreq+0x20c>
 800421c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004220:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004228:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800422c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004230:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004234:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	0e1b      	lsrs	r3, r3, #24
 800423c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004240:	3301      	adds	r3, #1
 8004242:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800424e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425a:	ee17 3a90 	vmov	r3, s15
 800425e:	623b      	str	r3, [r7, #32]
 8004260:	e001      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8004266:	6a3b      	ldr	r3, [r7, #32]
}
 8004268:	4618      	mov	r0, r3
 800426a:	372c      	adds	r7, #44	; 0x2c
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	46020c00 	.word	0x46020c00
 8004278:	0800aa14 	.word	0x0800aa14
 800427c:	00f42400 	.word	0x00f42400
 8004280:	4b742400 	.word	0x4b742400
 8004284:	46000000 	.word	0x46000000

08004288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800428c:	f7ff fef4 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x28>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	4906      	ldr	r1, [pc, #24]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800429c:	5ccb      	ldrb	r3, [r1, r3]
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80042a4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80042a8:	681b      	ldr	r3, [r3, #0]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	46020c00 	.word	0x46020c00
 80042b4:	0800a9fc 	.word	0x0800a9fc
 80042b8:	20000000 	.word	0x20000000

080042bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80042c0:	f7ff ffe2 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4903      	ldr	r1, [pc, #12]	; (80042e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	46020c00 	.word	0x46020c00
 80042e0:	0800aa0c 	.word	0x0800aa0c

080042e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80042e8:	f7ff ffce 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4903      	ldr	r1, [pc, #12]	; (8004308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	46020c00 	.word	0x46020c00
 8004308:	0800aa0c 	.word	0x0800aa0c

0800430c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004310:	f7ff ffba 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCC_GetPCLK3Freq+0x20>)
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	; (8004330 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	46020c00 	.word	0x46020c00
 8004330:	0800aa0c 	.word	0x0800aa0c

08004334 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	221f      	movs	r2, #31
 8004342:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <HAL_RCC_GetClockConfig+0x68>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8004350:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_GetClockConfig+0x68>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f003 020f 	and.w	r2, r3, #15
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RCC_GetClockConfig+0x68>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_RCC_GetClockConfig+0x68>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_GetClockConfig+0x68>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_RCC_GetClockConfig+0x6c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 020f 	and.w	r2, r3, #15
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	46020c00 	.word	0x46020c00
 80043a0:	40022000 	.word	0x40022000

080043a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043ba:	f7fe fd07 	bl	8002dcc <HAL_PWREx_GetVoltageRange>
 80043be:	6178      	str	r0, [r7, #20]
 80043c0:	e019      	b.n	80043f6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80043c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c8:	4a37      	ldr	r2, [pc, #220]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80043ca:	f043 0304 	orr.w	r3, r3, #4
 80043ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80043d2:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043e0:	f7fe fcf4 	bl	8002dcc <HAL_PWREx_GetVoltageRange>
 80043e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043e6:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80043e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ec:	4a2e      	ldr	r2, [pc, #184]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043fc:	d003      	beq.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004404:	d109      	bne.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440c:	d202      	bcs.n	8004414 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800440e:	2301      	movs	r3, #1
 8004410:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004412:	e033      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004418:	e030      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004420:	d208      	bcs.n	8004434 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004428:	d102      	bne.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800442a:	2303      	movs	r3, #3
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	e025      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e035      	b.n	80044a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443a:	d90f      	bls.n	800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004448:	d902      	bls.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	e015      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004450:	2301      	movs	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e012      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004456:	2300      	movs	r3, #0
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	e00f      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004462:	d109      	bne.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446a:	d102      	bne.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800446c:	2301      	movs	r3, #1
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e004      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004472:	2302      	movs	r3, #2
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e001      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004478:	2301      	movs	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 020f 	bic.w	r2, r3, #15
 8004484:	4909      	ldr	r1, [pc, #36]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	46020c00 	.word	0x46020c00
 80044ac:	40022000 	.word	0x40022000

080044b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80044b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b4:	b0ba      	sub	sp, #232	; 0xe8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044bc:	2300      	movs	r3, #0
 80044be:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f002 0401 	and.w	r4, r2, #1
 80044d4:	2500      	movs	r5, #0
 80044d6:	ea54 0305 	orrs.w	r3, r4, r5
 80044da:	d00b      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80044dc:	4bcb      	ldr	r3, [pc, #812]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044e2:	f023 0103 	bic.w	r1, r3, #3
 80044e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ec:	4ac7      	ldr	r2, [pc, #796]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ee:	430b      	orrs	r3, r1
 80044f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f002 0802 	and.w	r8, r2, #2
 8004500:	f04f 0900 	mov.w	r9, #0
 8004504:	ea58 0309 	orrs.w	r3, r8, r9
 8004508:	d00b      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800450a:	4bc0      	ldr	r3, [pc, #768]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800450c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004510:	f023 010c 	bic.w	r1, r3, #12
 8004514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	4abc      	ldr	r2, [pc, #752]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800451c:	430b      	orrs	r3, r1
 800451e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f002 0a04 	and.w	sl, r2, #4
 800452e:	f04f 0b00 	mov.w	fp, #0
 8004532:	ea5a 030b 	orrs.w	r3, sl, fp
 8004536:	d00b      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004538:	4bb4      	ldr	r3, [pc, #720]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800453a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800453e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	4ab0      	ldr	r2, [pc, #704]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800454a:	430b      	orrs	r3, r1
 800454c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004550:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f002 0308 	and.w	r3, r2, #8
 800455c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004566:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800456a:	460b      	mov	r3, r1
 800456c:	4313      	orrs	r3, r2
 800456e:	d00b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004570:	4ba6      	ldr	r3, [pc, #664]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004576:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800457a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	4aa2      	ldr	r2, [pc, #648]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004582:	430b      	orrs	r3, r1
 8004584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f002 0310 	and.w	r3, r2, #16
 8004594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800459e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d00b      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80045a8:	4b98      	ldr	r3, [pc, #608]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b8:	4a94      	ldr	r2, [pc, #592]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f002 0320 	and.w	r3, r2, #32
 80045cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045da:	460b      	mov	r3, r1
 80045dc:	4313      	orrs	r3, r2
 80045de:	d00b      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80045e0:	4b8a      	ldr	r3, [pc, #552]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045e6:	f023 0107 	bic.w	r1, r3, #7
 80045ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f0:	4a86      	ldr	r2, [pc, #536]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045f2:	430b      	orrs	r3, r1
 80045f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800460e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d00b      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004618:	4b7c      	ldr	r3, [pc, #496]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800461a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800461e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004628:	4a78      	ldr	r2, [pc, #480]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462a:	430b      	orrs	r3, r1
 800462c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800463c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004646:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d00b      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004650:	4b6e      	ldr	r3, [pc, #440]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800465a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004660:	4a6a      	ldr	r2, [pc, #424]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004662:	430b      	orrs	r3, r1
 8004664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800467e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	d00b      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004688:	4b60      	ldr	r3, [pc, #384]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800468a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a5c      	ldr	r2, [pc, #368]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800469a:	430b      	orrs	r3, r1
 800469c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80046ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d00b      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80046c0:	4b52      	ldr	r3, [pc, #328]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80046ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d0:	4a4e      	ldr	r2, [pc, #312]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d2:	430b      	orrs	r3, r1
 80046d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80046e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80046f2:	460b      	mov	r3, r1
 80046f4:	4313      	orrs	r3, r2
 80046f6:	d00b      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80046f8:	4b44      	ldr	r3, [pc, #272]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046fe:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004708:	4a40      	ldr	r2, [pc, #256]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800470a:	430b      	orrs	r3, r1
 800470c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800471c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004726:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d00b      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004730:	4b36      	ldr	r3, [pc, #216]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004736:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800473a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800473e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004740:	4a32      	ldr	r2, [pc, #200]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004742:	430b      	orrs	r3, r1
 8004744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004748:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004758:	2300      	movs	r3, #0
 800475a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800475e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d00c      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004768:	4b28      	ldr	r3, [pc, #160]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800476a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800476e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477a:	4a24      	ldr	r2, [pc, #144]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800477c:	430b      	orrs	r3, r1
 800477e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800478e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004790:	2300      	movs	r3, #0
 8004792:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004794:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004798:	460b      	mov	r3, r1
 800479a:	4313      	orrs	r3, r2
 800479c:	d04f      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800479e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	2b80      	cmp	r3, #128	; 0x80
 80047a8:	d02d      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80047aa:	2b80      	cmp	r3, #128	; 0x80
 80047ac:	d827      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047ae:	2b60      	cmp	r3, #96	; 0x60
 80047b0:	d02e      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80047b2:	2b60      	cmp	r3, #96	; 0x60
 80047b4:	d823      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d006      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d81f      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d011      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80047c6:	e01a      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047c8:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	4a0f      	ldr	r2, [pc, #60]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80047d4:	e01d      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047da:	3308      	adds	r3, #8
 80047dc:	4618      	mov	r0, r3
 80047de:	f002 f981 	bl	8006ae4 <RCCEx_PLL2_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80047e8:	e013      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ee:	332c      	adds	r3, #44	; 0x2c
 80047f0:	4618      	mov	r0, r3
 80047f2:	f002 fa0f 	bl	8006c14 <RCCEx_PLL3_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80047fc:	e009      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004804:	e005      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004806:	bf00      	nop
 8004808:	e003      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800480a:	bf00      	nop
 800480c:	46020c00 	.word	0x46020c00
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10d      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800481a:	4bb6      	ldr	r3, [pc, #728]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800481c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004820:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482c:	4ab1      	ldr	r2, [pc, #708]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800482e:	430b      	orrs	r3, r1
 8004830:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004834:	e003      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004836:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800483a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800483e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800484a:	673b      	str	r3, [r7, #112]	; 0x70
 800484c:	2300      	movs	r3, #0
 800484e:	677b      	str	r3, [r7, #116]	; 0x74
 8004850:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d053      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800485a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004866:	d033      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d82c      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800486e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004872:	d02f      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004878:	d826      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800487a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487e:	d008      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004884:	d820      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800488a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488e:	d011      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004890:	e01a      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004892:	4b98      	ldr	r3, [pc, #608]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	4a97      	ldr	r2, [pc, #604]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800489e:	e01a      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048a4:	3308      	adds	r3, #8
 80048a6:	4618      	mov	r0, r3
 80048a8:	f002 f91c 	bl	8006ae4 <RCCEx_PLL2_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80048b2:	e010      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048b8:	332c      	adds	r3, #44	; 0x2c
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 f9aa 	bl	8006c14 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80048c6:	e006      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80048ce:	e002      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80048d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10d      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80048e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048e4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80048e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f0:	4a80      	ldr	r2, [pc, #512]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80048f2:	430b      	orrs	r3, r1
 80048f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80048f8:	e003      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80048fe:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800490e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004910:	2300      	movs	r3, #0
 8004912:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004914:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004918:	460b      	mov	r3, r1
 800491a:	4313      	orrs	r3, r2
 800491c:	d046      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800491e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004926:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800492a:	d028      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800492c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004930:	d821      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004936:	d022      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800493c:	d81b      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800493e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004942:	d01c      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004948:	d815      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004954:	d80f      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d011      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	d00e      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004960:	e009      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004966:	3308      	adds	r3, #8
 8004968:	4618      	mov	r0, r3
 800496a:	f002 f8bb 	bl	8006ae4 <RCCEx_PLL2_Config>
 800496e:	4603      	mov	r3, r0
 8004970:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004974:	e004      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800497c:	e000      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800497e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004980:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004988:	4b5a      	ldr	r3, [pc, #360]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800498a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800498e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800499a:	4a56      	ldr	r2, [pc, #344]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800499c:	430b      	orrs	r3, r1
 800499e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049a2:	e003      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80049a8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80049ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80049b8:	663b      	str	r3, [r7, #96]	; 0x60
 80049ba:	2300      	movs	r3, #0
 80049bc:	667b      	str	r3, [r7, #100]	; 0x64
 80049be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d03f      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80049c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d81e      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a1b 	.word	0x08004a1b
 80049e0:	080049f1 	.word	0x080049f1
 80049e4:	080049ff 	.word	0x080049ff
 80049e8:	08004a1b 	.word	0x08004a1b
 80049ec:	08004a1b 	.word	0x08004a1b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049f0:	4b40      	ldr	r3, [pc, #256]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	4a3f      	ldr	r2, [pc, #252]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80049f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fa:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80049fc:	e00e      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a02:	332c      	adds	r3, #44	; 0x2c
 8004a04:	4618      	mov	r0, r3
 8004a06:	f002 f905 	bl	8006c14 <RCCEx_PLL3_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004a10:	e004      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004a18:	e000      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004a1a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004a1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004a24:	4b33      	ldr	r3, [pc, #204]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004a26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a2a:	f023 0107 	bic.w	r1, r3, #7
 8004a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a3e:	e003      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a44:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004a54:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a56:	2300      	movs	r3, #0
 8004a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a5a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4313      	orrs	r3, r2
 8004a62:	d04d      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a70:	d028      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a76:	d821      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004a78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a7c:	d024      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004a7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a82:	d81b      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a88:	d00e      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8e:	d815      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d110      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a9a:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004aa6:	e012      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aac:	332c      	adds	r3, #44	; 0x2c
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f002 f8b0 	bl	8006c14 <RCCEx_PLL3_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004aba:	e008      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004ac4:	bf00      	nop
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004acc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004ace:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d110      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004adc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	4a02      	ldr	r2, [pc, #8]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004aea:	430b      	orrs	r3, r1
 8004aec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004af0:	e006      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004af2:	bf00      	nop
 8004af4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004afc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b0e:	2300      	movs	r3, #0
 8004b10:	657b      	str	r3, [r7, #84]	; 0x54
 8004b12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f000 80b5 	beq.w	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b24:	4b9d      	ldr	r3, [pc, #628]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d113      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	4b9a      	ldr	r3, [pc, #616]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b38:	4a98      	ldr	r2, [pc, #608]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004b42:	4b96      	ldr	r3, [pc, #600]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004b5a:	4b91      	ldr	r3, [pc, #580]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	4a90      	ldr	r2, [pc, #576]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b66:	f7fd f853 	bl	8001c10 <HAL_GetTick>
 8004b6a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b70:	f7fd f84e 	bl	8001c10 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d903      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004b86:	e005      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b88:	4b85      	ldr	r3, [pc, #532]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ed      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004b94:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d165      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b9c:	4b7f      	ldr	r3, [pc, #508]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d023      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8004bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bc2:	4b76      	ldr	r3, [pc, #472]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bd0:	4b72      	ldr	r3, [pc, #456]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bd6:	4a71      	ldr	r2, [pc, #452]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004be0:	4b6e      	ldr	r3, [pc, #440]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004be6:	4a6d      	ldr	r2, [pc, #436]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf0:	4a6a      	ldr	r2, [pc, #424]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d019      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd f803 	bl	8001c10 <HAL_GetTick>
 8004c0a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0e:	e00d      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fc fffe 	bl	8001c10 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d903      	bls.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8004c2a:	e006      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2c:	4b5b      	ldr	r3, [pc, #364]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ea      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8004c3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004c42:	4b56      	ldr	r3, [pc, #344]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c54:	4a51      	ldr	r2, [pc, #324]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004c5c:	e008      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c62:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8004c66:	e003      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c68:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c6c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c70:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d107      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c78:	4b48      	ldr	r3, [pc, #288]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7e:	4a47      	ldr	r2, [pc, #284]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c96:	2300      	movs	r3, #0
 8004c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	d042      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004cb0:	d022      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004cb2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004cb6:	d81b      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cbc:	d011      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8004cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc2:	d815      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d019      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ccc:	d110      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 ff05 	bl	8006ae4 <RCCEx_PLL2_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ce0:	e00d      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce2:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cec:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004cee:	e006      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004cf6:	e002      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004cf8:	bf00      	nop
 8004cfa:	e000      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004cfc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004cfe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004d06:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d0c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d18:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d20:	e003      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d22:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d26:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004d36:	643b      	str	r3, [r7, #64]	; 0x40
 8004d38:	2300      	movs	r3, #0
 8004d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d40:	460b      	mov	r3, r1
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d032      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d52:	d00b      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d58:	d804      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	d007      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e002      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004d74:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d76:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d112      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d90:	4a02      	ldr	r2, [pc, #8]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d92:	430b      	orrs	r3, r1
 8004d94:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d98:	e008      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004d9a:	bf00      	nop
 8004d9c:	46020c00 	.word	0x46020c00
 8004da0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004da8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dba:	2300      	movs	r3, #0
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dbe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d00c      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004dc8:	4b98      	ldr	r3, [pc, #608]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004dca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004dce:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dda:	4a94      	ldr	r2, [pc, #592]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30
 8004df0:	2300      	movs	r3, #0
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
 8004df4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d019      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e0a:	d105      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e0c:	4b87      	ldr	r3, [pc, #540]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	4a86      	ldr	r2, [pc, #536]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e16:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004e18:	4b84      	ldr	r3, [pc, #528]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004e1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e1e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e2a:	4a80      	ldr	r2, [pc, #512]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e40:	2300      	movs	r3, #0
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e44:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	d00c      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004e4e:	4b77      	ldr	r3, [pc, #476]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e60:	4972      	ldr	r1, [pc, #456]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	2300      	movs	r3, #0
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	d00c      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004e84:	4b69      	ldr	r3, [pc, #420]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e92:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e96:	4965      	ldr	r1, [pc, #404]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004eba:	4b5c      	ldr	r3, [pc, #368]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ec0:	f023 0218 	bic.w	r2, r3, #24
 8004ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ec8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ecc:	4957      	ldr	r1, [pc, #348]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d032      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004efc:	d105      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efe:	4b4b      	ldr	r3, [pc, #300]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	4a4a      	ldr	r2, [pc, #296]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f08:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f16:	d108      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 fde0 	bl	8006ae4 <RCCEx_PLL2_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8004f2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10d      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004f32:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004f34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f44:	4939      	ldr	r1, [pc, #228]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004f4c:	e003      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f52:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	d03a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f7e:	d00e      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8004f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f84:	d815      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d017      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004f8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f8e:	d110      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f90:	4b26      	ldr	r3, [pc, #152]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	4a25      	ldr	r2, [pc, #148]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f9a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004f9c:	e00e      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fd9d 	bl	8006ae4 <RCCEx_PLL2_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004fb0:	e004      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8004fba:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004fbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004fc4:	4b19      	ldr	r3, [pc, #100]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd6:	4915      	ldr	r1, [pc, #84]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004fde:	e003      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fe4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004fe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ffe:	460b      	mov	r3, r1
 8005000:	4313      	orrs	r3, r2
 8005002:	d00c      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800500a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800500e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005016:	4905      	ldr	r1, [pc, #20]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800501e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005022:	4618      	mov	r0, r3
 8005024:	37e8      	adds	r7, #232	; 0xe8
 8005026:	46bd      	mov	sp, r7
 8005028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502c:	46020c00 	.word	0x46020c00

08005030 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005030:	b480      	push	{r7}
 8005032:	b089      	sub	sp, #36	; 0x24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005038:	4bac      	ldr	r3, [pc, #688]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005040:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005042:	4baa      	ldr	r3, [pc, #680]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800504c:	4ba7      	ldr	r3, [pc, #668]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	3301      	adds	r3, #1
 8005058:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800505a:	4ba4      	ldr	r3, [pc, #656]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005064:	4ba1      	ldr	r3, [pc, #644]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	08db      	lsrs	r3, r3, #3
 800506a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	ee07 3a90 	vmov	s15, r3
 8005078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8123 	beq.w	80052ce <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d062      	beq.n	8005154 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b03      	cmp	r3, #3
 8005092:	f200 8081 	bhi.w	8005198 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d024      	beq.n	80050e6 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d17a      	bne.n	8005198 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ac:	eddf 6a90 	vldr	s13, [pc, #576]	; 80052f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80050b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b4:	4b8d      	ldr	r3, [pc, #564]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80050c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80050c8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80052f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80050cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80050d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050e4:	e08f      	b.n	8005206 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80050e6:	4b81      	ldr	r3, [pc, #516]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 80050f2:	4b7e      	ldr	r3, [pc, #504]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0f1b      	lsrs	r3, r3, #28
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	e006      	b.n	800510c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80050fe:	4b7b      	ldr	r3, [pc, #492]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	0f1b      	lsrs	r3, r3, #28
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	4a7a      	ldr	r2, [pc, #488]	; (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a02 	vldr	s12, [r7, #8]
 8005136:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80052f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005152:	e058      	b.n	8005206 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80052f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005176:	ed97 6a02 	vldr	s12, [r7, #8]
 800517a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80052f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005196:	e036      	b.n	8005206 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005198:	4b54      	ldr	r3, [pc, #336]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80051a4:	4b51      	ldr	r3, [pc, #324]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	0f1b      	lsrs	r3, r3, #28
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	e006      	b.n	80051be <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80051b0:	4b4e      	ldr	r3, [pc, #312]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80051b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	0f1b      	lsrs	r3, r3, #28
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	4a4e      	ldr	r2, [pc, #312]	; (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80051c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	ee07 3a90 	vmov	s15, r3
 80051e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80051e8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80052f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80051ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80051fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005200:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005204:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005206:	4b39      	ldr	r3, [pc, #228]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d017      	beq.n	8005242 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005212:	4b36      	ldr	r3, [pc, #216]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	0a5b      	lsrs	r3, r3, #9
 8005218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005228:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800522c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005238:	ee17 2a90 	vmov	r2, s15
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e002      	b.n	8005248 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d017      	beq.n	8005284 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800526a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800526e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527a:	ee17 2a90 	vmov	r2, s15
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	e002      	b.n	800528a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d017      	beq.n	80052c6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	0e1b      	lsrs	r3, r3, #24
 800529c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80052a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ac:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052bc:	ee17 2a90 	vmov	r2, s15
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80052c4:	e00c      	b.n	80052e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	e008      	b.n	80052e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	bf00      	nop
 80052e2:	3724      	adds	r7, #36	; 0x24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	46020c00 	.word	0x46020c00
 80052f0:	4b742400 	.word	0x4b742400
 80052f4:	46000000 	.word	0x46000000
 80052f8:	0800aa14 	.word	0x0800aa14

080052fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005304:	4bac      	ldr	r3, [pc, #688]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800530e:	4baa      	ldr	r3, [pc, #680]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005318:	4ba7      	ldr	r3, [pc, #668]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3301      	adds	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005326:	4ba4      	ldr	r3, [pc, #656]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005330:	4ba1      	ldr	r3, [pc, #644]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	08db      	lsrs	r3, r3, #3
 8005336:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005348:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8123 	beq.w	800559a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d062      	beq.n	8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b03      	cmp	r3, #3
 800535e:	f200 8081 	bhi.w	8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d024      	beq.n	80053b2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d17a      	bne.n	8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005378:	eddf 6a90 	vldr	s13, [pc, #576]	; 80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800537c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005380:	4b8d      	ldr	r3, [pc, #564]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005390:	ed97 6a02 	vldr	s12, [r7, #8]
 8005394:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005398:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800539c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80053a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80053a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053b0:	e08f      	b.n	80054d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80053b2:	4b81      	ldr	r3, [pc, #516]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80053be:	4b7e      	ldr	r3, [pc, #504]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	0f1b      	lsrs	r3, r3, #28
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	e006      	b.n	80053d8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80053ca:	4b7b      	ldr	r3, [pc, #492]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80053cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	0f1b      	lsrs	r3, r3, #28
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	4a7a      	ldr	r2, [pc, #488]	; (80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80053da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005402:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005412:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800541e:	e058      	b.n	80054d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800542e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005432:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005442:	ed97 6a02 	vldr	s12, [r7, #8]
 8005446:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800544a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800544e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005456:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800545a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005462:	e036      	b.n	80054d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005464:	4b54      	ldr	r3, [pc, #336]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005470:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	0f1b      	lsrs	r3, r3, #28
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	e006      	b.n	800548a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800547c:	4b4e      	ldr	r3, [pc, #312]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800547e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	0f1b      	lsrs	r3, r3, #28
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	4a4e      	ldr	r2, [pc, #312]	; (80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800548c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80054b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80054c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054d0:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80054d2:	4b39      	ldr	r3, [pc, #228]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d017      	beq.n	800550e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054de:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	0a5b      	lsrs	r3, r3, #9
 80054e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80054f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005504:	ee17 2a90 	vmov	r2, s15
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e002      	b.n	8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005514:	4b28      	ldr	r3, [pc, #160]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d017      	beq.n	8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005520:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005536:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800553a:	edd7 6a07 	vldr	s13, [r7, #28]
 800553e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005546:	ee17 2a90 	vmov	r2, s15
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	e002      	b.n	8005556 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005556:	4b18      	ldr	r3, [pc, #96]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d017      	beq.n	8005592 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	0e1b      	lsrs	r3, r3, #24
 8005568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556c:	ee07 3a90 	vmov	s15, r3
 8005570:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005578:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800557c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005588:	ee17 2a90 	vmov	r2, s15
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005590:	e00c      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	609a      	str	r2, [r3, #8]
}
 8005598:	e008      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	3724      	adds	r7, #36	; 0x24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	46020c00 	.word	0x46020c00
 80055bc:	4b742400 	.word	0x4b742400
 80055c0:	46000000 	.word	0x46000000
 80055c4:	0800aa14 	.word	0x0800aa14

080055c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80055d0:	4bac      	ldr	r3, [pc, #688]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80055da:	4baa      	ldr	r3, [pc, #680]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80055e4:	4ba7      	ldr	r3, [pc, #668]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	3301      	adds	r3, #1
 80055f0:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80055f2:	4ba4      	ldr	r3, [pc, #656]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80055fc:	4ba1      	ldr	r3, [pc, #644]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80055fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005600:	08db      	lsrs	r3, r3, #3
 8005602:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005614:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8123 	beq.w	8005866 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d062      	beq.n	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b03      	cmp	r3, #3
 800562a:	f200 8081 	bhi.w	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d024      	beq.n	800567e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d17a      	bne.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005644:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564c:	4b8d      	ldr	r3, [pc, #564]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800565c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005660:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005664:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005668:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800566c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005670:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005678:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800567c:	e08f      	b.n	800579e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800567e:	4b81      	ldr	r3, [pc, #516]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800568a:	4b7e      	ldr	r3, [pc, #504]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	0f1b      	lsrs	r3, r3, #28
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	e006      	b.n	80056a4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8005696:	4b7b      	ldr	r3, [pc, #492]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005698:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	0f1b      	lsrs	r3, r3, #28
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	4a7a      	ldr	r2, [pc, #488]	; (8005890 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80056a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ce:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80056d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ea:	e058      	b.n	800579e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b61      	ldr	r3, [pc, #388]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800570e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005712:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800571e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800572e:	e036      	b.n	800579e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005730:	4b54      	ldr	r3, [pc, #336]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800573c:	4b51      	ldr	r3, [pc, #324]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	0f1b      	lsrs	r3, r3, #28
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	e006      	b.n	8005756 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005748:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800574a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	0f1b      	lsrs	r3, r3, #28
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	4a4e      	ldr	r2, [pc, #312]	; (8005890 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	ee07 3a90 	vmov	s15, r3
 8005778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005780:	eddf 5a42 	vldr	s11, [pc, #264]	; 800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005790:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005798:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800579c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800579e:	4b39      	ldr	r3, [pc, #228]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057aa:	4b36      	ldr	r3, [pc, #216]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	0a5b      	lsrs	r3, r3, #9
 80057b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80057bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057c0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d0:	ee17 2a90 	vmov	r2, s15
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e002      	b.n	80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80057e0:	4b28      	ldr	r3, [pc, #160]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d017      	beq.n	800581c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80057ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80057fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005802:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005806:	edd7 6a07 	vldr	s13, [r7, #28]
 800580a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005812:	ee17 2a90 	vmov	r2, s15
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	605a      	str	r2, [r3, #4]
 800581a:	e002      	b.n	8005822 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005822:	4b18      	ldr	r3, [pc, #96]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d017      	beq.n	800585e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	0e1b      	lsrs	r3, r3, #24
 8005834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005844:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005848:	edd7 6a07 	vldr	s13, [r7, #28]
 800584c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005854:	ee17 2a90 	vmov	r2, s15
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800585c:	e00c      	b.n	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	e008      	b.n	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	bf00      	nop
 800587a:	3724      	adds	r7, #36	; 0x24
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	46020c00 	.word	0x46020c00
 8005888:	4b742400 	.word	0x4b742400
 800588c:	46000000 	.word	0x46000000
 8005890:	0800aa14 	.word	0x0800aa14

08005894 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08e      	sub	sp, #56	; 0x38
 8005898:	af00      	add	r7, sp, #0
 800589a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800589e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80058a6:	430b      	orrs	r3, r1
 80058a8:	d145      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80058aa:	4ba7      	ldr	r3, [pc, #668]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80058b6:	4ba4      	ldr	r3, [pc, #656]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d108      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ca:	d104      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80058cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
 80058d2:	f001 b8fc 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80058d6:	4b9c      	ldr	r3, [pc, #624]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058e4:	d114      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ec:	d110      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058ee:	4b96      	ldr	r3, [pc, #600]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058fc:	d103      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80058fe:	23fa      	movs	r3, #250	; 0xfa
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005902:	f001 b8e4 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005906:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800590c:	f001 b8df 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005910:	4b8d      	ldr	r3, [pc, #564]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800591c:	d107      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005924:	d103      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005926:	4b89      	ldr	r3, [pc, #548]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	f001 b8d0 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
 8005932:	f001 b8cc 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800593e:	430b      	orrs	r3, r1
 8005940:	d151      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005942:	4b81      	ldr	r3, [pc, #516]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005944:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005948:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800594c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	2b80      	cmp	r3, #128	; 0x80
 8005952:	d035      	beq.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d841      	bhi.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b60      	cmp	r3, #96	; 0x60
 800595e:	d02a      	beq.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	2b60      	cmp	r3, #96	; 0x60
 8005964:	d83b      	bhi.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d009      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d835      	bhi.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00c      	beq.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2b20      	cmp	r3, #32
 800597c:	d012      	beq.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800597e:	e02e      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fb53 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800598e:	f001 b89e 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005992:	f107 0318 	add.w	r3, r7, #24
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fcb0 	bl	80052fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059a0:	f001 b895 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a4:	f107 030c 	add.w	r3, r7, #12
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fe0d 	bl	80055c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059b2:	f001 b88c 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80059b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80059ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059bc:	f001 b887 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059c0:	4b61      	ldr	r3, [pc, #388]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059cc:	d103      	bne.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80059ce:	4b60      	ldr	r3, [pc, #384]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059d2:	f001 b87c 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059da:	f001 b878 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059e2:	f001 b874 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80059e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ea:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80059ee:	430b      	orrs	r3, r1
 80059f0:	d158      	bne.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80059f2:	4b55      	ldr	r3, [pc, #340]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a04:	d03b      	beq.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0c:	d846      	bhi.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a14:	d02e      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1c:	d83e      	bhi.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a24:	d00b      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2c:	d836      	bhi.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00d      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3a:	d012      	beq.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005a3c:	e02e      	b.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff faf4 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a4c:	f001 b83f 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a50:	f107 0318 	add.w	r3, r7, #24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fc51 	bl	80052fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a5e:	f001 b836 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a62:	f107 030c 	add.w	r3, r7, #12
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fdae 	bl	80055c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a70:	f001 b82d 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005a74:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a7a:	f001 b828 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a7e:	4b32      	ldr	r3, [pc, #200]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8a:	d103      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005a8c:	4b30      	ldr	r3, [pc, #192]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a90:	f001 b81d 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a98:	f001 b819 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aa0:	f001 b815 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa8:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005aac:	430b      	orrs	r3, r1
 8005aae:	d126      	bne.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005ab0:	4b25      	ldr	r3, [pc, #148]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ab2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aba:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005abc:	4b22      	ldr	r3, [pc, #136]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac8:	d106      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d103      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad4:	f000 bffb 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aec:	d103      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8005aee:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
 8005af2:	f000 bfec 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
 8005afa:	f000 bfe8 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b02:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005b06:	430b      	orrs	r3, r1
 8005b08:	d164      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b10:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005b14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b1c:	d03d      	beq.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b24:	d852      	bhi.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2c:	d014      	beq.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b34:	d84a      	bhi.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01f      	beq.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b42:	d012      	beq.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005b44:	e042      	b.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005b46:	bf00      	nop
 8005b48:	46020c00 	.word	0x46020c00
 8005b4c:	0007a120 	.word	0x0007a120
 8005b50:	00f42400 	.word	0x00f42400
 8005b54:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff fa67 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b66:	f000 bfb2 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6a:	f107 0318 	add.w	r3, r7, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fbc4 	bl	80052fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b78:	f000 bfa9 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005b7c:	4bab      	ldr	r3, [pc, #684]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b88:	d103      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005b8a:	4ba9      	ldr	r3, [pc, #676]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b8e:	f000 bf9e 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b96:	f000 bf9a 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b9a:	4ba4      	ldr	r3, [pc, #656]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005ba6:	4ba1      	ldr	r3, [pc, #644]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	0e1b      	lsrs	r3, r3, #24
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	e006      	b.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005bb2:	4b9e      	ldr	r3, [pc, #632]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	0e1b      	lsrs	r3, r3, #24
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	4a9c      	ldr	r2, [pc, #624]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bc8:	f000 bf81 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bd0:	f000 bf7d 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	d175      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005be0:	4b92      	ldr	r3, [pc, #584]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005be2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d15b      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005bf2:	4b8e      	ldr	r3, [pc, #568]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bf8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005bfc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c04:	d034      	beq.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c0c:	d849      	bhi.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c14:	d00b      	beq.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c1c:	d841      	bhi.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c2a:	d009      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005c2c:	e039      	b.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f9fc 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005c3c:	f000 bf47 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c40:	f107 0318 	add.w	r3, r7, #24
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff fb59 	bl	80052fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005c4e:	f000 bf3e 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005c52:	4b76      	ldr	r3, [pc, #472]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5e:	d103      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8005c60:	4b73      	ldr	r3, [pc, #460]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005c64:	f000 bf33 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005c6c:	f000 bf2f 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c70:	4b6e      	ldr	r3, [pc, #440]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8005c7c:	4b6b      	ldr	r3, [pc, #428]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	0e1b      	lsrs	r3, r3, #24
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	e006      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8005c88:	4b68      	ldr	r3, [pc, #416]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	0e1b      	lsrs	r3, r3, #24
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	4a67      	ldr	r2, [pc, #412]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005c9e:	f000 bf16 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005ca6:	f000 bf12 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb0:	d108      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff f9ba 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc0:	f000 bf05 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc8:	f000 bf01 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd0:	1e51      	subs	r1, r2, #1
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	d136      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005cd6:	4b55      	ldr	r3, [pc, #340]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005ce8:	f7fe fafc 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8005cec:	6378      	str	r0, [r7, #52]	; 0x34
 8005cee:	f000 beee 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d104      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005cf8:	f7fe f9be 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8005cfc:	6378      	str	r0, [r7, #52]	; 0x34
 8005cfe:	f000 bee6 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005d02:	4b4a      	ldr	r3, [pc, #296]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0e:	d106      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d103      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8005d16:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1a:	f000 bed8 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005d1e:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d107      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d104      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8005d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34
 8005d38:	f000 bec9 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d40:	f000 bec5 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d48:	1e91      	subs	r1, r2, #2
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	d136      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005d4e:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d54:	f003 030c 	and.w	r3, r3, #12
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d60:	f7fe faac 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8005d64:	6378      	str	r0, [r7, #52]	; 0x34
 8005d66:	f000 beb2 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d104      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d70:	f7fe f982 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8005d74:	6378      	str	r0, [r7, #52]	; 0x34
 8005d76:	f000 beaa 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d86:	d106      	bne.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d103      	bne.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8005d8e:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
 8005d92:	f000 be9c 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005d96:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d107      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	d104      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
 8005db0:	f000 be8d 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
 8005db8:	f000 be89 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dc0:	1f11      	subs	r1, r2, #4
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	d13e      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005dc6:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dd0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f7fe fa70 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8005ddc:	6378      	str	r0, [r7, #52]	; 0x34
 8005dde:	f000 be76 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	2b10      	cmp	r3, #16
 8005de6:	d104      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005de8:	f7fe f946 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8005dec:	6378      	str	r0, [r7, #52]	; 0x34
 8005dee:	f000 be6e 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dfe:	d106      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d103      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005e08:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0a:	f000 be60 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d10f      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	2b30      	cmp	r3, #48	; 0x30
 8005e20:	d10c      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8005e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
 8005e28:	f000 be51 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005e2c:	46020c00 	.word	0x46020c00
 8005e30:	02dc6c00 	.word	0x02dc6c00
 8005e34:	0800aa14 	.word	0x0800aa14
 8005e38:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e40:	f000 be45 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e48:	f1a2 0108 	sub.w	r1, r2, #8
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	d136      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005e50:	4b9f      	ldr	r3, [pc, #636]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e5a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e62:	f7fe fa2b 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8005e66:	6378      	str	r0, [r7, #52]	; 0x34
 8005e68:	f000 be31 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d104      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e72:	f7fe f901 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8005e76:	6378      	str	r0, [r7, #52]	; 0x34
 8005e78:	f000 be29 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005e7c:	4b94      	ldr	r3, [pc, #592]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e88:	d106      	bne.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2b80      	cmp	r3, #128	; 0x80
 8005e8e:	d103      	bne.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8005e90:	4b90      	ldr	r3, [pc, #576]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
 8005e94:	f000 be1b 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005e98:	4b8d      	ldr	r3, [pc, #564]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2bc0      	cmp	r3, #192	; 0xc0
 8005eaa:	d104      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8005eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb2:	f000 be0c 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eba:	f000 be08 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec2:	f1a2 0110 	sub.w	r1, r2, #16
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	d139      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005eca:	4b81      	ldr	r3, [pc, #516]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005edc:	f7fe f9ee 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8005ee0:	6378      	str	r0, [r7, #52]	; 0x34
 8005ee2:	f000 bdf4 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eec:	d104      	bne.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005eee:	f7fe f8c3 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8005ef2:	6378      	str	r0, [r7, #52]	; 0x34
 8005ef4:	f000 bdeb 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005ef8:	4b75      	ldr	r3, [pc, #468]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f04:	d107      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0c:	d103      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8005f0e:	4b71      	ldr	r3, [pc, #452]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
 8005f12:	f000 bddc 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005f16:	4b6e      	ldr	r3, [pc, #440]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d108      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f2a:	d104      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8005f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
 8005f32:	f000 bdcc 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3a:	f000 bdc8 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f42:	f1a2 0120 	sub.w	r1, r2, #32
 8005f46:	430b      	orrs	r3, r1
 8005f48:	d158      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005f4a:	4b61      	ldr	r3, [pc, #388]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005f5c:	f7fe f9d6 	bl	800430c <HAL_RCC_GetPCLK3Freq>
 8005f60:	6378      	str	r0, [r7, #52]	; 0x34
 8005f62:	f000 bdb4 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d104      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005f6c:	f7fe f884 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8005f70:	6378      	str	r0, [r7, #52]	; 0x34
 8005f72:	f000 bdac 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005f76:	4b56      	ldr	r3, [pc, #344]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f82:	d106      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d103      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8005f8a:	4b52      	ldr	r3, [pc, #328]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f8e:	f000 bd9e 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005f92:	4b4f      	ldr	r3, [pc, #316]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d104      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8005fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
 8005fac:	f000 bd8f 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005fb0:	4b47      	ldr	r3, [pc, #284]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d11b      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d118      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005fc2:	4b43      	ldr	r3, [pc, #268]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005fce:	4b40      	ldr	r3, [pc, #256]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	0e1b      	lsrs	r3, r3, #24
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005fda:	4b3d      	ldr	r3, [pc, #244]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	0e1b      	lsrs	r3, r3, #24
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	4a3b      	ldr	r2, [pc, #236]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff0:	f000 bd6d 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff8:	f000 bd69 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006000:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006004:	430b      	orrs	r3, r1
 8006006:	d169      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006008:	4b31      	ldr	r3, [pc, #196]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800600a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800600e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006012:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601a:	d104      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800601c:	f7fe f82c 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8006020:	6378      	str	r0, [r7, #52]	; 0x34
 8006022:	f000 bd54 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602c:	d108      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602e:	f107 0318 	add.w	r3, r7, #24
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff f962 	bl	80052fc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
 800603c:	f000 bd47 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006046:	f7fe f91f 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 800604a:	6378      	str	r0, [r7, #52]	; 0x34
 800604c:	f000 bd3f 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006056:	d118      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006058:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006064:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	0f1b      	lsrs	r3, r3, #28
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	e006      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006070:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	0f1b      	lsrs	r3, r3, #28
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
 8006086:	f000 bd22 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006096:	d107      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800609e:	d103      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 80060a0:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34
 80060a4:	f000 bd13 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80060a8:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b4:	d107      	bne.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060bc:	d103      	bne.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
 80060c2:	f000 bd04 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ca:	f000 bd00 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80060ce:	bf00      	nop
 80060d0:	46020c00 	.word	0x46020c00
 80060d4:	00f42400 	.word	0x00f42400
 80060d8:	0800aa14 	.word	0x0800aa14
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80060dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80060e4:	430b      	orrs	r3, r1
 80060e6:	d14e      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80060e8:	4ba8      	ldr	r3, [pc, #672]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d841      	bhi.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006139 	.word	0x08006139
 8006104:	08006115 	.word	0x08006115
 8006108:	08006127 	.word	0x08006127
 800610c:	08006143 	.word	0x08006143
 8006110:	0800614d 	.word	0x0800614d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe ff89 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006122:	f000 bcd4 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006126:	f107 030c 	add.w	r3, r7, #12
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fa4c 	bl	80055c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006134:	f000 bccb 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006138:	f7fe f8a6 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 800613c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800613e:	f000 bcc6 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006142:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006148:	f000 bcc1 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800614c:	4b8f      	ldr	r3, [pc, #572]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006158:	4b8c      	ldr	r3, [pc, #560]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	0e1b      	lsrs	r3, r3, #24
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	e006      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006164:	4b89      	ldr	r3, [pc, #548]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	0e1b      	lsrs	r3, r3, #24
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	4a87      	ldr	r2, [pc, #540]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800617a:	f000 bca8 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006182:	f000 bca4 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800618a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800618e:	430b      	orrs	r3, r1
 8006190:	d15d      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006192:	4b7e      	ldr	r3, [pc, #504]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006198:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800619c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061a4:	d036      	beq.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061ac:	d84b      	bhi.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061b4:	d029      	beq.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061bc:	d843      	bhi.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061c4:	d013      	beq.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061cc:	d83b      	bhi.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d015      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061da:	d134      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe ff25 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ea:	f000 bc70 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ee:	f107 030c 	add.w	r3, r7, #12
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff f9e8 	bl	80055c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061fc:	f000 bc67 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006200:	f7fe f842 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 8006204:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006206:	f000 bc62 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800620a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800620e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006210:	f000 bc5d 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006214:	4b5d      	ldr	r3, [pc, #372]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006220:	4b5a      	ldr	r3, [pc, #360]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	0e1b      	lsrs	r3, r3, #24
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	e006      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800622c:	4b57      	ldr	r3, [pc, #348]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800622e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	0e1b      	lsrs	r3, r3, #24
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	4a55      	ldr	r2, [pc, #340]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800623c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006242:	f000 bc44 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800624a:	f000 bc40 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800624e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006252:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006256:	430b      	orrs	r3, r1
 8006258:	d14a      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800625a:	4b4c      	ldr	r3, [pc, #304]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800625c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006264:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800626c:	f7fe f826 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8006270:	6378      	str	r0, [r7, #52]	; 0x34
 8006272:	f000 bc2c 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627c:	d104      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800627e:	f7fd fefb 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8006282:	6378      	str	r0, [r7, #52]	; 0x34
 8006284:	f000 bc23 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006288:	4b40      	ldr	r3, [pc, #256]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006294:	d107      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629c:	d103      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800629e:	4b3d      	ldr	r3, [pc, #244]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
 80062a2:	f000 bc14 	b.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80062a6:	4b39      	ldr	r3, [pc, #228]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d11b      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062b8:	d117      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062ba:	4b34      	ldr	r3, [pc, #208]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80062c6:	4b31      	ldr	r3, [pc, #196]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	0e1b      	lsrs	r3, r3, #24
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	e006      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80062d2:	4b2e      	ldr	r3, [pc, #184]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80062d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	0e1b      	lsrs	r3, r3, #24
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	4a2b      	ldr	r2, [pc, #172]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80062e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e6:	637b      	str	r3, [r7, #52]	; 0x34
 80062e8:	e3f1      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
 80062ee:	e3ee      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80062f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80062f8:	430b      	orrs	r3, r1
 80062fa:	d14d      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80062fc:	4b23      	ldr	r3, [pc, #140]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80062fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006302:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006306:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fd ffd5 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8006312:	6378      	str	r0, [r7, #52]	; 0x34
 8006314:	e3db      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d103      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800631e:	f7fd feab 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8006322:	6378      	str	r0, [r7, #52]	; 0x34
 8006324:	e3d3      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006326:	4b19      	ldr	r3, [pc, #100]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006332:	d106      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633a:	d102      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800633c:	4b15      	ldr	r3, [pc, #84]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
 8006340:	e3c5      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	d11b      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006354:	d117      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006356:	4b0d      	ldr	r3, [pc, #52]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006362:	4b0a      	ldr	r3, [pc, #40]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	0e1b      	lsrs	r3, r3, #24
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	e006      	b.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800636e:	4b07      	ldr	r3, [pc, #28]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006374:	041b      	lsls	r3, r3, #16
 8006376:	0e1b      	lsrs	r3, r3, #24
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	4a04      	ldr	r2, [pc, #16]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800637e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006382:	637b      	str	r3, [r7, #52]	; 0x34
 8006384:	e3a3      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	; 0x34
 800638a:	e3a0      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800638c:	46020c00 	.word	0x46020c00
 8006390:	0800aa14 	.word	0x0800aa14
 8006394:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80063a0:	430b      	orrs	r3, r1
 80063a2:	d148      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80063a4:	4b9d      	ldr	r3, [pc, #628]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80063a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	2bc0      	cmp	r3, #192	; 0xc0
 80063b4:	d024      	beq.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2bc0      	cmp	r3, #192	; 0xc0
 80063ba:	d839      	bhi.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	2b80      	cmp	r3, #128	; 0x80
 80063c0:	d00d      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d833      	bhi.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d011      	beq.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80063d4:	e02c      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80063d6:	f7fd ff99 	bl	800430c <HAL_RCC_GetPCLK3Freq>
 80063da:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063dc:	e377      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063de:	4b8f      	ldr	r3, [pc, #572]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ea:	d102      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80063ec:	4b8c      	ldr	r3, [pc, #560]	; (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80063ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063f0:	e36d      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063f6:	e36a      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80063f8:	f7fd fe3e 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 80063fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063fe:	e366      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006400:	4b86      	ldr	r3, [pc, #536]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800640c:	4b83      	ldr	r3, [pc, #524]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	0f1b      	lsrs	r3, r3, #28
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	e006      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006418:	4b80      	ldr	r3, [pc, #512]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800641a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	0f1b      	lsrs	r3, r3, #28
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	4a7f      	ldr	r2, [pc, #508]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800642e:	e34e      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006434:	e34b      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800643e:	430b      	orrs	r3, r1
 8006440:	d147      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006442:	4b76      	ldr	r3, [pc, #472]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800644c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006454:	f7fd ff32 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8006458:	6378      	str	r0, [r7, #52]	; 0x34
 800645a:	e338      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006462:	d103      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006464:	f7fd fe08 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8006468:	6378      	str	r0, [r7, #52]	; 0x34
 800646a:	e330      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800646c:	4b6b      	ldr	r3, [pc, #428]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006478:	d106      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006480:	d102      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8006482:	4b67      	ldr	r3, [pc, #412]	; (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
 8006486:	e322      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006488:	4b64      	ldr	r3, [pc, #400]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b20      	cmp	r3, #32
 8006492:	d11b      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800649a:	d117      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800649c:	4b5f      	ldr	r3, [pc, #380]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80064a8:	4b5c      	ldr	r3, [pc, #368]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	0e1b      	lsrs	r3, r3, #24
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	e006      	b.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80064b4:	4b59      	ldr	r3, [pc, #356]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80064b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	0e1b      	lsrs	r3, r3, #24
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	4a58      	ldr	r2, [pc, #352]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80064c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ca:	e300      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
 80064d0:	e2fd      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80064d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80064da:	430b      	orrs	r3, r1
 80064dc:	d15b      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80064de:	4b4f      	ldr	r3, [pc, #316]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80064e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d117      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064f0:	4b4a      	ldr	r3, [pc, #296]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80064fc:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	0e1b      	lsrs	r3, r3, #24
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	e006      	b.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8006508:	4b44      	ldr	r3, [pc, #272]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800650a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800650e:	041b      	lsls	r3, r3, #16
 8006510:	0e1b      	lsrs	r3, r3, #24
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	4a43      	ldr	r2, [pc, #268]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	e2d6      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006520:	4b3e      	ldr	r3, [pc, #248]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800652a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800652e:	d112      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006536:	d10e      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006538:	4b38      	ldr	r3, [pc, #224]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800653a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800653e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006546:	d102      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8006548:	23fa      	movs	r3, #250	; 0xfa
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800654c:	e2bf      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800654e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006554:	e2bb      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006556:	4b31      	ldr	r3, [pc, #196]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006562:	d106      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656a:	d102      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800656c:	4b2c      	ldr	r3, [pc, #176]	; (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800656e:	637b      	str	r3, [r7, #52]	; 0x34
 8006570:	e2ad      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006572:	4b2a      	ldr	r3, [pc, #168]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b02      	cmp	r3, #2
 800657e:	d107      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006586:	d103      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8006588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
 800658e:	e29e      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	637b      	str	r3, [r7, #52]	; 0x34
 8006594:	e29b      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800659a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800659e:	430b      	orrs	r3, r1
 80065a0:	d162      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80065a2:	4b1e      	ldr	r3, [pc, #120]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d117      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80065c0:	4b16      	ldr	r3, [pc, #88]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	0e1b      	lsrs	r3, r3, #24
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	e006      	b.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80065cc:	4b13      	ldr	r3, [pc, #76]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	4a12      	ldr	r2, [pc, #72]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80065dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
 80065e2:	e274      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80065e4:	4b0d      	ldr	r3, [pc, #52]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f2:	d119      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fa:	d115      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80065fc:	4b07      	ldr	r3, [pc, #28]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800660a:	d102      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800660c:	23fa      	movs	r3, #250	; 0xfa
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006610:	e25d      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006612:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006618:	e259      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800661a:	bf00      	nop
 800661c:	46020c00 	.word	0x46020c00
 8006620:	00f42400 	.word	0x00f42400
 8006624:	0800aa14 	.word	0x0800aa14
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006628:	4b9d      	ldr	r3, [pc, #628]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006634:	d106      	bne.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663c:	d102      	bne.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800663e:	4b99      	ldr	r3, [pc, #612]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006640:	637b      	str	r3, [r7, #52]	; 0x34
 8006642:	e244      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006644:	4b96      	ldr	r3, [pc, #600]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b02      	cmp	r3, #2
 8006650:	d107      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006658:	d103      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800665a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
 8006660:	e235      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
 8006666:	e232      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800666c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006670:	430b      	orrs	r3, r1
 8006672:	d147      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006674:	4b8a      	ldr	r3, [pc, #552]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800667a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800667e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	2b00      	cmp	r3, #0
 8006684:	d103      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006686:	f7fd fe19 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 800668a:	6378      	str	r0, [r7, #52]	; 0x34
 800668c:	e21f      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800668e:	4b84      	ldr	r3, [pc, #528]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800669c:	d112      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066a4:	d10e      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066a6:	4b7e      	ldr	r3, [pc, #504]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80066a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b4:	d102      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80066b6:	23fa      	movs	r3, #250	; 0xfa
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066ba:	e208      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80066bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066c2:	e204      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80066c4:	4b76      	ldr	r3, [pc, #472]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d0:	d106      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066d8:	d102      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80066da:	4b72      	ldr	r3, [pc, #456]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
 80066de:	e1f6      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80066e0:	4b6f      	ldr	r3, [pc, #444]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80066e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d107      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066f4:	d103      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80066f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
 80066fc:	e1e7      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
 8006702:	e1e4      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006708:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800670c:	430b      	orrs	r3, r1
 800670e:	d12d      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006710:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006716:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800671a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800671c:	4b60      	ldr	r3, [pc, #384]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006728:	d105      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	2b00      	cmp	r3, #0
 800672e:	d102      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8006730:	4b5c      	ldr	r3, [pc, #368]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006732:	637b      	str	r3, [r7, #52]	; 0x34
 8006734:	e1cb      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800673c:	d107      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800673e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fc74 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	637b      	str	r3, [r7, #52]	; 0x34
 800674c:	e1bf      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006754:	d107      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006756:	f107 0318 	add.w	r3, r7, #24
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fdce 	bl	80052fc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
 8006764:	e1b3      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
 800676a:	e1b0      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800676c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006770:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006774:	430b      	orrs	r3, r1
 8006776:	d14d      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006778:	4b49      	ldr	r3, [pc, #292]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800677a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800677e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006782:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800678a:	d028      	beq.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006792:	d83c      	bhi.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679a:	d013      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067a2:	d834      	bhi.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b0:	d004      	beq.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80067b2:	e02c      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7fd fd96 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 80067b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80067ba:	e188      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80067bc:	f7fd fc5c 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 80067c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80067c2:	e184      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c4:	4b36      	ldr	r3, [pc, #216]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d0:	d102      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80067d2:	4b34      	ldr	r3, [pc, #208]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067d6:	e17a      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067dc:	e177      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067de:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80067ea:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	0e1b      	lsrs	r3, r3, #24
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80067f6:	4b2a      	ldr	r3, [pc, #168]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80067f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067fc:	041b      	lsls	r3, r3, #16
 80067fe:	0e1b      	lsrs	r3, r3, #24
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	4a28      	ldr	r2, [pc, #160]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8006806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800680c:	e15f      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006812:	e15c      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006818:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800681c:	430b      	orrs	r3, r1
 800681e:	d154      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006820:	4b1f      	ldr	r3, [pc, #124]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006832:	d028      	beq.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800683a:	d843      	bhi.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006842:	d013      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800684a:	d83b      	bhi.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006858:	d004      	beq.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800685a:	e033      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800685c:	f7fd fd2e 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8006860:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006862:	e134      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006864:	f7fd fc08 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8006868:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800686a:	e130      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800686c:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006878:	d102      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800687e:	e126      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006884:	e123      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8006892:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	0e1b      	lsrs	r3, r3, #24
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	e00d      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800689e:	bf00      	nop
 80068a0:	46020c00 	.word	0x46020c00
 80068a4:	00f42400 	.word	0x00f42400
 80068a8:	0800aa14 	.word	0x0800aa14
 80068ac:	4b8a      	ldr	r3, [pc, #552]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80068ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	0e1b      	lsrs	r3, r3, #24
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	4a88      	ldr	r2, [pc, #544]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80068bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c2:	e104      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c8:	e101      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80068ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ce:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80068d2:	430b      	orrs	r3, r1
 80068d4:	d16e      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80068d6:	4b80      	ldr	r3, [pc, #512]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80068d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068dc:	f003 0318 	and.w	r3, r3, #24
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2b18      	cmp	r3, #24
 80068e6:	d862      	bhi.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006955 	.word	0x08006955
 80068f4:	080069af 	.word	0x080069af
 80068f8:	080069af 	.word	0x080069af
 80068fc:	080069af 	.word	0x080069af
 8006900:	080069af 	.word	0x080069af
 8006904:	080069af 	.word	0x080069af
 8006908:	080069af 	.word	0x080069af
 800690c:	080069af 	.word	0x080069af
 8006910:	0800695d 	.word	0x0800695d
 8006914:	080069af 	.word	0x080069af
 8006918:	080069af 	.word	0x080069af
 800691c:	080069af 	.word	0x080069af
 8006920:	080069af 	.word	0x080069af
 8006924:	080069af 	.word	0x080069af
 8006928:	080069af 	.word	0x080069af
 800692c:	080069af 	.word	0x080069af
 8006930:	08006965 	.word	0x08006965
 8006934:	080069af 	.word	0x080069af
 8006938:	080069af 	.word	0x080069af
 800693c:	080069af 	.word	0x080069af
 8006940:	080069af 	.word	0x080069af
 8006944:	080069af 	.word	0x080069af
 8006948:	080069af 	.word	0x080069af
 800694c:	080069af 	.word	0x080069af
 8006950:	0800697f 	.word	0x0800697f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006954:	f7fd fcda 	bl	800430c <HAL_RCC_GetPCLK3Freq>
 8006958:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800695a:	e0b8      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800695c:	f7fd fb8c 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8006960:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006962:	e0b4      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006964:	4b5c      	ldr	r3, [pc, #368]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	d102      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8006972:	4b5b      	ldr	r3, [pc, #364]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006976:	e0aa      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800697c:	e0a7      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800697e:	4b56      	ldr	r3, [pc, #344]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800698a:	4b53      	ldr	r3, [pc, #332]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	0e1b      	lsrs	r3, r3, #24
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	e006      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8006996:	4b50      	ldr	r3, [pc, #320]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800699c:	041b      	lsls	r3, r3, #16
 800699e:	0e1b      	lsrs	r3, r3, #24
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	4a4d      	ldr	r2, [pc, #308]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80069a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ac:	e08f      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069b2:	e08c      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80069b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b8:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80069bc:	430b      	orrs	r3, r1
 80069be:	d14c      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80069c0:	4b45      	ldr	r3, [pc, #276]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80069c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069d2:	d013      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069da:	d83b      	bhi.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e2:	d013      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069ea:	d833      	bhi.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d014      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f8:	d014      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80069fa:	e02b      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069fc:	f107 0318 	add.w	r3, r7, #24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fc7b 	bl	80052fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a0a:	e060      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe fb0d 	bl	8005030 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a1a:	e058      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006a1c:	f7fd fb2c 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8006a20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006a22:	e054      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a24:	4b2c      	ldr	r3, [pc, #176]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8006a30:	4b29      	ldr	r3, [pc, #164]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	0e1b      	lsrs	r3, r3, #24
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	e006      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8006a3c:	4b26      	ldr	r3, [pc, #152]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006a3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a42:	041b      	lsls	r3, r3, #16
 8006a44:	0e1b      	lsrs	r3, r3, #24
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	4a24      	ldr	r2, [pc, #144]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a52:	e03c      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a58:	e039      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a5e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8006a62:	430b      	orrs	r3, r1
 8006a64:	d131      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006a66:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a70:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006a72:	4b19      	ldr	r3, [pc, #100]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8006a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8c:	e01f      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a9c:	d112      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab4:	d102      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8006ab6:	23fa      	movs	r3, #250	; 0xfa
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006aba:	e008      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006abc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ac2:	e004      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac8:	e001      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3738      	adds	r7, #56	; 0x38
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	46020c00 	.word	0x46020c00
 8006adc:	0800aa14 	.word	0x0800aa14
 8006ae0:	00f42400 	.word	0x00f42400

08006ae4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006aec:	4b47      	ldr	r3, [pc, #284]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a46      	ldr	r2, [pc, #280]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006af6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006af8:	f7fb f88a 	bl	8001c10 <HAL_GetTick>
 8006afc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006afe:	e008      	b.n	8006b12 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b00:	f7fb f886 	bl	8001c10 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e077      	b.n	8006c02 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b12:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1f0      	bne.n	8006b00 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b26:	f023 0303 	bic.w	r3, r3, #3
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6811      	ldr	r1, [r2, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6852      	ldr	r2, [r2, #4]
 8006b32:	3a01      	subs	r2, #1
 8006b34:	0212      	lsls	r2, r2, #8
 8006b36:	430a      	orrs	r2, r1
 8006b38:	4934      	ldr	r1, [pc, #208]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006b3e:	4b33      	ldr	r3, [pc, #204]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b42:	4b33      	ldr	r3, [pc, #204]	; (8006c10 <RCCEx_PLL2_Config+0x12c>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6892      	ldr	r2, [r2, #8]
 8006b4a:	3a01      	subs	r2, #1
 8006b4c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	68d2      	ldr	r2, [r2, #12]
 8006b54:	3a01      	subs	r2, #1
 8006b56:	0252      	lsls	r2, r2, #9
 8006b58:	b292      	uxth	r2, r2
 8006b5a:	4311      	orrs	r1, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6912      	ldr	r2, [r2, #16]
 8006b60:	3a01      	subs	r2, #1
 8006b62:	0412      	lsls	r2, r2, #16
 8006b64:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006b68:	4311      	orrs	r1, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6952      	ldr	r2, [r2, #20]
 8006b6e:	3a01      	subs	r2, #1
 8006b70:	0612      	lsls	r2, r2, #24
 8006b72:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006b76:	430a      	orrs	r2, r1
 8006b78:	4924      	ldr	r1, [pc, #144]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006b7e:	4b23      	ldr	r3, [pc, #140]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	f023 020c 	bic.w	r2, r3, #12
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	4920      	ldr	r1, [pc, #128]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006b90:	4b1e      	ldr	r3, [pc, #120]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	491c      	ldr	r1, [pc, #112]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006b9e:	4b1b      	ldr	r3, [pc, #108]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	4a1a      	ldr	r2, [pc, #104]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006ba4:	f023 0310 	bic.w	r3, r3, #16
 8006ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006baa:	4b18      	ldr	r3, [pc, #96]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	69d2      	ldr	r2, [r2, #28]
 8006bba:	00d2      	lsls	r2, r2, #3
 8006bbc:	4913      	ldr	r1, [pc, #76]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006bc8:	f043 0310 	orr.w	r3, r3, #16
 8006bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006bce:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a0e      	ldr	r2, [pc, #56]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bd8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bda:	f7fb f819 	bl	8001c10 <HAL_GetTick>
 8006bde:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006be0:	e008      	b.n	8006bf4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006be2:	f7fb f815 	bl	8001c10 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e006      	b.n	8006c02 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <RCCEx_PLL2_Config+0x128>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0f0      	beq.n	8006be2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0

}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	46020c00 	.word	0x46020c00
 8006c10:	80800000 	.word	0x80800000

08006c14 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006c1c:	4b47      	ldr	r3, [pc, #284]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a46      	ldr	r2, [pc, #280]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c28:	f7fa fff2 	bl	8001c10 <HAL_GetTick>
 8006c2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c2e:	e008      	b.n	8006c42 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c30:	f7fa ffee 	bl	8001c10 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e077      	b.n	8006d32 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c42:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006c4e:	4b3b      	ldr	r3, [pc, #236]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6811      	ldr	r1, [r2, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6852      	ldr	r2, [r2, #4]
 8006c62:	3a01      	subs	r2, #1
 8006c64:	0212      	lsls	r2, r2, #8
 8006c66:	430a      	orrs	r2, r1
 8006c68:	4934      	ldr	r1, [pc, #208]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	630b      	str	r3, [r1, #48]	; 0x30
 8006c6e:	4b33      	ldr	r3, [pc, #204]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c72:	4b33      	ldr	r3, [pc, #204]	; (8006d40 <RCCEx_PLL3_Config+0x12c>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6892      	ldr	r2, [r2, #8]
 8006c7a:	3a01      	subs	r2, #1
 8006c7c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68d2      	ldr	r2, [r2, #12]
 8006c84:	3a01      	subs	r2, #1
 8006c86:	0252      	lsls	r2, r2, #9
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	4311      	orrs	r1, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6912      	ldr	r2, [r2, #16]
 8006c90:	3a01      	subs	r2, #1
 8006c92:	0412      	lsls	r2, r2, #16
 8006c94:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006c98:	4311      	orrs	r1, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6952      	ldr	r2, [r2, #20]
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	0612      	lsls	r2, r2, #24
 8006ca2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	4924      	ldr	r1, [pc, #144]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006cae:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	f023 020c 	bic.w	r2, r3, #12
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	4920      	ldr	r1, [pc, #128]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006cc0:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	491c      	ldr	r1, [pc, #112]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006cce:	4b1b      	ldr	r3, [pc, #108]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	4a1a      	ldr	r2, [pc, #104]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cd4:	f023 0310 	bic.w	r3, r3, #16
 8006cd8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006cda:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ce2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	69d2      	ldr	r2, [r2, #28]
 8006cea:	00d2      	lsls	r2, r2, #3
 8006cec:	4913      	ldr	r1, [pc, #76]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006cf2:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	4a11      	ldr	r2, [pc, #68]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006cf8:	f043 0310 	orr.w	r3, r3, #16
 8006cfc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006cfe:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a0e      	ldr	r2, [pc, #56]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d08:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d0a:	f7fa ff81 	bl	8001c10 <HAL_GetTick>
 8006d0e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d10:	e008      	b.n	8006d24 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d12:	f7fa ff7d 	bl	8001c10 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e006      	b.n	8006d32 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <RCCEx_PLL3_Config+0x128>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	46020c00 	.word	0x46020c00
 8006d40:	80800000 	.word	0x80800000

08006d44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d068      	beq.n	8006e28 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fa fc48 	bl	8001600 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d78:	4b2e      	ldr	r3, [pc, #184]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006d7a:	22ca      	movs	r2, #202	; 0xca
 8006d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d7e:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006d80:	2253      	movs	r2, #83	; 0x53
 8006d82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f87d 	bl	8006e84 <RTC_EnterInitMode>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d13f      	bne.n	8006e14 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006d94:	4b27      	ldr	r3, [pc, #156]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	4a26      	ldr	r2, [pc, #152]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006d9a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006da4:	4b23      	ldr	r3, [pc, #140]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6859      	ldr	r1, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	4319      	orrs	r1, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	430b      	orrs	r3, r1
 8006db8:	491e      	ldr	r1, [pc, #120]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	041b      	lsls	r3, r3, #16
 8006dc8:	491a      	ldr	r1, [pc, #104]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006dce:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	430b      	orrs	r3, r1
 8006de0:	4914      	ldr	r1, [pc, #80]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f880 	bl	8006eec <RTC_ExitInitMode>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10e      	bne.n	8006e14 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006df6:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a19      	ldr	r1, [r3, #32]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	4319      	orrs	r1, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	4909      	ldr	r1, [pc, #36]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e14:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <HAL_RTC_Init+0xf0>)
 8006e16:	22ff      	movs	r2, #255	; 0xff
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	46007800 	.word	0x46007800

08006e38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006e40:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <HAL_RTC_WaitForSynchro+0x48>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a0e      	ldr	r2, [pc, #56]	; (8006e80 <HAL_RTC_WaitForSynchro+0x48>)
 8006e46:	f023 0320 	bic.w	r3, r3, #32
 8006e4a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006e4c:	f7fa fee0 	bl	8001c10 <HAL_GetTick>
 8006e50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e52:	e009      	b.n	8006e68 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e54:	f7fa fedc 	bl	8001c10 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e62:	d901      	bls.n	8006e68 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e006      	b.n	8006e76 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_RTC_WaitForSynchro+0x48>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0ef      	beq.n	8006e54 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	46007800 	.word	0x46007800

08006e84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006e90:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <RTC_EnterInitMode+0x64>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d120      	bne.n	8006ede <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <RTC_EnterInitMode+0x64>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	4a11      	ldr	r2, [pc, #68]	; (8006ee8 <RTC_EnterInitMode+0x64>)
 8006ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006ea8:	f7fa feb2 	bl	8001c10 <HAL_GetTick>
 8006eac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006eae:	e00d      	b.n	8006ecc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006eb0:	f7fa feae 	bl	8001c10 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ebe:	d905      	bls.n	8006ecc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <RTC_EnterInitMode+0x64>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <RTC_EnterInitMode+0x5a>
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d1e8      	bne.n	8006eb0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	46007800 	.word	0x46007800

08006eec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <RTC_ExitInitMode+0x78>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4a19      	ldr	r2, [pc, #100]	; (8006f64 <RTC_ExitInitMode+0x78>)
 8006efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f02:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006f04:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <RTC_ExitInitMode+0x78>)
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10c      	bne.n	8006f2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ff91 	bl	8006e38 <HAL_RTC_WaitForSynchro>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01e      	beq.n	8006f5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2203      	movs	r2, #3
 8006f20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e017      	b.n	8006f5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	; (8006f64 <RTC_ExitInitMode+0x78>)
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	4a0d      	ldr	r2, [pc, #52]	; (8006f64 <RTC_ExitInitMode+0x78>)
 8006f30:	f023 0320 	bic.w	r3, r3, #32
 8006f34:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff ff7e 	bl	8006e38 <HAL_RTC_WaitForSynchro>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2203      	movs	r2, #3
 8006f46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f4e:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <RTC_ExitInitMode+0x78>)
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	4a04      	ldr	r2, [pc, #16]	; (8006f64 <RTC_ExitInitMode+0x78>)
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	6193      	str	r3, [r2, #24]
  }
  return status;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	46007800 	.word	0x46007800

08006f68 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4910      	ldr	r1, [pc, #64]	; (8006fbc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	490c      	ldr	r1, [pc, #48]	; (8006fc0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	6919      	ldr	r1, [r3, #16]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	041b      	lsls	r3, r3, #16
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	4905      	ldr	r1, [pc, #20]	; (8006fc0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	46007800 	.word	0x46007800
 8006fc0:	46007c00 	.word	0x46007c00

08006fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e049      	b.n	800706a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f841 	bl	8007072 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f000 fa88 	bl	8007518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
	...

08007088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	d001      	beq.n	80070a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e072      	b.n	8007186 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a35      	ldr	r2, [pc, #212]	; (8007194 <HAL_TIM_Base_Start_IT+0x10c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d040      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a34      	ldr	r2, [pc, #208]	; (8007198 <HAL_TIM_Base_Start_IT+0x110>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d03b      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d4:	d036      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070de:	d031      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2d      	ldr	r2, [pc, #180]	; (800719c <HAL_TIM_Base_Start_IT+0x114>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d02c      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2c      	ldr	r2, [pc, #176]	; (80071a0 <HAL_TIM_Base_Start_IT+0x118>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d027      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2a      	ldr	r2, [pc, #168]	; (80071a4 <HAL_TIM_Base_Start_IT+0x11c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d022      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a29      	ldr	r2, [pc, #164]	; (80071a8 <HAL_TIM_Base_Start_IT+0x120>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d01d      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a27      	ldr	r2, [pc, #156]	; (80071ac <HAL_TIM_Base_Start_IT+0x124>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d018      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a26      	ldr	r2, [pc, #152]	; (80071b0 <HAL_TIM_Base_Start_IT+0x128>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d013      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a24      	ldr	r2, [pc, #144]	; (80071b4 <HAL_TIM_Base_Start_IT+0x12c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00e      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a23      	ldr	r2, [pc, #140]	; (80071b8 <HAL_TIM_Base_Start_IT+0x130>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d009      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a21      	ldr	r2, [pc, #132]	; (80071bc <HAL_TIM_Base_Start_IT+0x134>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d004      	beq.n	8007144 <HAL_TIM_Base_Start_IT+0xbc>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a20      	ldr	r2, [pc, #128]	; (80071c0 <HAL_TIM_Base_Start_IT+0x138>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d115      	bne.n	8007170 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	4b1e      	ldr	r3, [pc, #120]	; (80071c4 <HAL_TIM_Base_Start_IT+0x13c>)
 800714c:	4013      	ands	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b06      	cmp	r3, #6
 8007154:	d015      	beq.n	8007182 <HAL_TIM_Base_Start_IT+0xfa>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715c:	d011      	beq.n	8007182 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0201 	orr.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716e:	e008      	b.n	8007182 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e000      	b.n	8007184 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40012c00 	.word	0x40012c00
 8007198:	50012c00 	.word	0x50012c00
 800719c:	40000400 	.word	0x40000400
 80071a0:	50000400 	.word	0x50000400
 80071a4:	40000800 	.word	0x40000800
 80071a8:	50000800 	.word	0x50000800
 80071ac:	40000c00 	.word	0x40000c00
 80071b0:	50000c00 	.word	0x50000c00
 80071b4:	40013400 	.word	0x40013400
 80071b8:	50013400 	.word	0x50013400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	50014000 	.word	0x50014000
 80071c4:	00010007 	.word	0x00010007

080071c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d122      	bne.n	8007224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d11b      	bne.n	8007224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0202 	mvn.w	r2, #2
 80071f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f965 	bl	80074da <HAL_TIM_IC_CaptureCallback>
 8007210:	e005      	b.n	800721e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f957 	bl	80074c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f968 	bl	80074ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b04      	cmp	r3, #4
 8007230:	d122      	bne.n	8007278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b04      	cmp	r3, #4
 800723e:	d11b      	bne.n	8007278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0204 	mvn.w	r2, #4
 8007248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f93b 	bl	80074da <HAL_TIM_IC_CaptureCallback>
 8007264:	e005      	b.n	8007272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f92d 	bl	80074c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f93e 	bl	80074ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b08      	cmp	r3, #8
 8007284:	d122      	bne.n	80072cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b08      	cmp	r3, #8
 8007292:	d11b      	bne.n	80072cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0208 	mvn.w	r2, #8
 800729c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2204      	movs	r2, #4
 80072a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f911 	bl	80074da <HAL_TIM_IC_CaptureCallback>
 80072b8:	e005      	b.n	80072c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f903 	bl	80074c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f914 	bl	80074ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	d122      	bne.n	8007320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b10      	cmp	r3, #16
 80072e6:	d11b      	bne.n	8007320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0210 	mvn.w	r2, #16
 80072f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2208      	movs	r2, #8
 80072f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f8e7 	bl	80074da <HAL_TIM_IC_CaptureCallback>
 800730c:	e005      	b.n	800731a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f8d9 	bl	80074c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8ea 	bl	80074ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b01      	cmp	r3, #1
 800732c:	d10e      	bne.n	800734c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d107      	bne.n	800734c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0201 	mvn.w	r2, #1
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fa f8c2 	bl	80014d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007356:	2b80      	cmp	r3, #128	; 0x80
 8007358:	d10e      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d107      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9d4 	bl	8007720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007386:	d10e      	bne.n	80073a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007392:	2b80      	cmp	r3, #128	; 0x80
 8007394:	d107      	bne.n	80073a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800739e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f9c7 	bl	8007734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	d10e      	bne.n	80073d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d107      	bne.n	80073d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f898 	bl	8007502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d10e      	bne.n	80073fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f003 0320 	and.w	r3, r3, #32
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d107      	bne.n	80073fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f06f 0220 	mvn.w	r2, #32
 80073f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f987 	bl	800770c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800740c:	d10f      	bne.n	800742e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741c:	d107      	bne.n	800742e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f98d 	bl	8007748 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800743c:	d10f      	bne.n	800745e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800744c:	d107      	bne.n	800745e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f97f 	bl	800775c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800746c:	d10f      	bne.n	800748e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800747c:	d107      	bne.n	800748e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f971 	bl	8007770 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800749c:	d10f      	bne.n	80074be <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074ac:	d107      	bne.n	80074be <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80074b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f963 	bl	8007784 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a68      	ldr	r2, [pc, #416]	; (80076cc <TIM_Base_SetConfig+0x1b4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d02b      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a67      	ldr	r2, [pc, #412]	; (80076d0 <TIM_Base_SetConfig+0x1b8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d027      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753e:	d023      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007546:	d01f      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a62      	ldr	r2, [pc, #392]	; (80076d4 <TIM_Base_SetConfig+0x1bc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d01b      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a61      	ldr	r2, [pc, #388]	; (80076d8 <TIM_Base_SetConfig+0x1c0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d017      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a60      	ldr	r2, [pc, #384]	; (80076dc <TIM_Base_SetConfig+0x1c4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a5f      	ldr	r2, [pc, #380]	; (80076e0 <TIM_Base_SetConfig+0x1c8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00f      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a5e      	ldr	r2, [pc, #376]	; (80076e4 <TIM_Base_SetConfig+0x1cc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00b      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a5d      	ldr	r2, [pc, #372]	; (80076e8 <TIM_Base_SetConfig+0x1d0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d007      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a5c      	ldr	r2, [pc, #368]	; (80076ec <TIM_Base_SetConfig+0x1d4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_Base_SetConfig+0x70>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a5b      	ldr	r2, [pc, #364]	; (80076f0 <TIM_Base_SetConfig+0x1d8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d108      	bne.n	800759a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a4b      	ldr	r2, [pc, #300]	; (80076cc <TIM_Base_SetConfig+0x1b4>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d043      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a4a      	ldr	r2, [pc, #296]	; (80076d0 <TIM_Base_SetConfig+0x1b8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d03f      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b0:	d03b      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075b8:	d037      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a45      	ldr	r2, [pc, #276]	; (80076d4 <TIM_Base_SetConfig+0x1bc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d033      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a44      	ldr	r2, [pc, #272]	; (80076d8 <TIM_Base_SetConfig+0x1c0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d02f      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a43      	ldr	r2, [pc, #268]	; (80076dc <TIM_Base_SetConfig+0x1c4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d02b      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a42      	ldr	r2, [pc, #264]	; (80076e0 <TIM_Base_SetConfig+0x1c8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d027      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a41      	ldr	r2, [pc, #260]	; (80076e4 <TIM_Base_SetConfig+0x1cc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d023      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a40      	ldr	r2, [pc, #256]	; (80076e8 <TIM_Base_SetConfig+0x1d0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01f      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a3f      	ldr	r2, [pc, #252]	; (80076ec <TIM_Base_SetConfig+0x1d4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d01b      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a3e      	ldr	r2, [pc, #248]	; (80076f0 <TIM_Base_SetConfig+0x1d8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d017      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a3d      	ldr	r2, [pc, #244]	; (80076f4 <TIM_Base_SetConfig+0x1dc>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a3c      	ldr	r2, [pc, #240]	; (80076f8 <TIM_Base_SetConfig+0x1e0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00f      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a3b      	ldr	r2, [pc, #236]	; (80076fc <TIM_Base_SetConfig+0x1e4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00b      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a3a      	ldr	r2, [pc, #232]	; (8007700 <TIM_Base_SetConfig+0x1e8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d007      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a39      	ldr	r2, [pc, #228]	; (8007704 <TIM_Base_SetConfig+0x1ec>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d003      	beq.n	800762a <TIM_Base_SetConfig+0x112>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a38      	ldr	r2, [pc, #224]	; (8007708 <TIM_Base_SetConfig+0x1f0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d108      	bne.n	800763c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a1a      	ldr	r2, [pc, #104]	; (80076cc <TIM_Base_SetConfig+0x1b4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d023      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <TIM_Base_SetConfig+0x1b8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d01f      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1e      	ldr	r2, [pc, #120]	; (80076ec <TIM_Base_SetConfig+0x1d4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d01b      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a1d      	ldr	r2, [pc, #116]	; (80076f0 <TIM_Base_SetConfig+0x1d8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d017      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a1c      	ldr	r2, [pc, #112]	; (80076f4 <TIM_Base_SetConfig+0x1dc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d013      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <TIM_Base_SetConfig+0x1e0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00f      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a1a      	ldr	r2, [pc, #104]	; (80076fc <TIM_Base_SetConfig+0x1e4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00b      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a19      	ldr	r2, [pc, #100]	; (8007700 <TIM_Base_SetConfig+0x1e8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d007      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a18      	ldr	r2, [pc, #96]	; (8007704 <TIM_Base_SetConfig+0x1ec>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_Base_SetConfig+0x198>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a17      	ldr	r2, [pc, #92]	; (8007708 <TIM_Base_SetConfig+0x1f0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d103      	bne.n	80076b8 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	615a      	str	r2, [r3, #20]
}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	50012c00 	.word	0x50012c00
 80076d4:	40000400 	.word	0x40000400
 80076d8:	50000400 	.word	0x50000400
 80076dc:	40000800 	.word	0x40000800
 80076e0:	50000800 	.word	0x50000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	50000c00 	.word	0x50000c00
 80076ec:	40013400 	.word	0x40013400
 80076f0:	50013400 	.word	0x50013400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	50014000 	.word	0x50014000
 80076fc:	40014400 	.word	0x40014400
 8007700:	50014400 	.word	0x50014400
 8007704:	40014800 	.word	0x40014800
 8007708:	50014800 	.word	0x50014800

0800770c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e042      	b.n	8007830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d106      	bne.n	80077c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7f9 ff63 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2224      	movs	r2, #36	; 0x24
 80077c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0201 	bic.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f82c 	bl	8007838 <UART_SetConfig>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e022      	b.n	8007830 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9c2 	bl	8007b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa49 	bl	8007cc0 <UART_CheckIdleState>
 800782e:	4603      	mov	r3, r0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800783c:	b094      	sub	sp, #80	; 0x50
 800783e:	af00      	add	r7, sp, #0
 8007840:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b7e      	ldr	r3, [pc, #504]	; (8007a48 <UART_SetConfig+0x210>)
 800784e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	431a      	orrs	r2, r3
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	431a      	orrs	r2, r3
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	4313      	orrs	r3, r2
 8007866:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4977      	ldr	r1, [pc, #476]	; (8007a4c <UART_SetConfig+0x214>)
 8007870:	4019      	ands	r1, r3
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007878:	430b      	orrs	r3, r1
 800787a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	68d9      	ldr	r1, [r3, #12]
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	ea40 0301 	orr.w	r3, r0, r1
 8007892:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b6a      	ldr	r3, [pc, #424]	; (8007a48 <UART_SetConfig+0x210>)
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d009      	beq.n	80078b8 <UART_SetConfig+0x80>
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	4b69      	ldr	r3, [pc, #420]	; (8007a50 <UART_SetConfig+0x218>)
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d004      	beq.n	80078b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b0:	6a1a      	ldr	r2, [r3, #32]
 80078b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b4:	4313      	orrs	r3, r2
 80078b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80078c2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078cc:	430b      	orrs	r3, r1
 80078ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	f023 000f 	bic.w	r0, r3, #15
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	ea40 0301 	orr.w	r3, r0, r1
 80078e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	4b59      	ldr	r3, [pc, #356]	; (8007a54 <UART_SetConfig+0x21c>)
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d102      	bne.n	80078f8 <UART_SetConfig+0xc0>
 80078f2:	2301      	movs	r3, #1
 80078f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078f6:	e029      	b.n	800794c <UART_SetConfig+0x114>
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	4b56      	ldr	r3, [pc, #344]	; (8007a58 <UART_SetConfig+0x220>)
 80078fe:	429a      	cmp	r2, r3
 8007900:	d102      	bne.n	8007908 <UART_SetConfig+0xd0>
 8007902:	2302      	movs	r3, #2
 8007904:	64bb      	str	r3, [r7, #72]	; 0x48
 8007906:	e021      	b.n	800794c <UART_SetConfig+0x114>
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	4b53      	ldr	r3, [pc, #332]	; (8007a5c <UART_SetConfig+0x224>)
 800790e:	429a      	cmp	r2, r3
 8007910:	d102      	bne.n	8007918 <UART_SetConfig+0xe0>
 8007912:	2304      	movs	r3, #4
 8007914:	64bb      	str	r3, [r7, #72]	; 0x48
 8007916:	e019      	b.n	800794c <UART_SetConfig+0x114>
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	4b50      	ldr	r3, [pc, #320]	; (8007a60 <UART_SetConfig+0x228>)
 800791e:	429a      	cmp	r2, r3
 8007920:	d102      	bne.n	8007928 <UART_SetConfig+0xf0>
 8007922:	2308      	movs	r3, #8
 8007924:	64bb      	str	r3, [r7, #72]	; 0x48
 8007926:	e011      	b.n	800794c <UART_SetConfig+0x114>
 8007928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	4b4d      	ldr	r3, [pc, #308]	; (8007a64 <UART_SetConfig+0x22c>)
 800792e:	429a      	cmp	r2, r3
 8007930:	d102      	bne.n	8007938 <UART_SetConfig+0x100>
 8007932:	2310      	movs	r3, #16
 8007934:	64bb      	str	r3, [r7, #72]	; 0x48
 8007936:	e009      	b.n	800794c <UART_SetConfig+0x114>
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	4b42      	ldr	r3, [pc, #264]	; (8007a48 <UART_SetConfig+0x210>)
 800793e:	429a      	cmp	r2, r3
 8007940:	d102      	bne.n	8007948 <UART_SetConfig+0x110>
 8007942:	2320      	movs	r3, #32
 8007944:	64bb      	str	r3, [r7, #72]	; 0x48
 8007946:	e001      	b.n	800794c <UART_SetConfig+0x114>
 8007948:	2300      	movs	r3, #0
 800794a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	4b3d      	ldr	r3, [pc, #244]	; (8007a48 <UART_SetConfig+0x210>)
 8007952:	429a      	cmp	r2, r3
 8007954:	d005      	beq.n	8007962 <UART_SetConfig+0x12a>
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	4b3d      	ldr	r3, [pc, #244]	; (8007a50 <UART_SetConfig+0x218>)
 800795c:	429a      	cmp	r2, r3
 800795e:	f040 8085 	bne.w	8007a6c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007964:	2200      	movs	r2, #0
 8007966:	623b      	str	r3, [r7, #32]
 8007968:	627a      	str	r2, [r7, #36]	; 0x24
 800796a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800796e:	f7fd ff91 	bl	8005894 <HAL_RCCEx_GetPeriphCLKFreq>
 8007972:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 80e8 	beq.w	8007b4c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	4a39      	ldr	r2, [pc, #228]	; (8007a68 <UART_SetConfig+0x230>)
 8007982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007986:	461a      	mov	r2, r3
 8007988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800798a:	fbb3 f3f2 	udiv	r3, r3, r2
 800798e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	4413      	add	r3, r2
 800799a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800799c:	429a      	cmp	r2, r3
 800799e:	d305      	bcc.n	80079ac <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d903      	bls.n	80079b4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80079b2:	e048      	b.n	8007a46 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079b6:	2200      	movs	r2, #0
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	61fa      	str	r2, [r7, #28]
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	4a29      	ldr	r2, [pc, #164]	; (8007a68 <UART_SetConfig+0x230>)
 80079c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2200      	movs	r2, #0
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	617a      	str	r2, [r7, #20]
 80079ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80079d6:	f7f8 fd73 	bl	80004c0 <__aeabi_uldivmod>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4610      	mov	r0, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	020b      	lsls	r3, r1, #8
 80079ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079f0:	0202      	lsls	r2, r0, #8
 80079f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f4:	6849      	ldr	r1, [r1, #4]
 80079f6:	0849      	lsrs	r1, r1, #1
 80079f8:	2000      	movs	r0, #0
 80079fa:	460c      	mov	r4, r1
 80079fc:	4605      	mov	r5, r0
 80079fe:	eb12 0804 	adds.w	r8, r2, r4
 8007a02:	eb43 0905 	adc.w	r9, r3, r5
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	60bb      	str	r3, [r7, #8]
 8007a0e:	60fa      	str	r2, [r7, #12]
 8007a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f8 fd52 	bl	80004c0 <__aeabi_uldivmod>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4613      	mov	r3, r2
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a2a:	d308      	bcc.n	8007a3e <UART_SetConfig+0x206>
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a32:	d204      	bcs.n	8007a3e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a3a:	60da      	str	r2, [r3, #12]
 8007a3c:	e003      	b.n	8007a46 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007a44:	e082      	b.n	8007b4c <UART_SetConfig+0x314>
 8007a46:	e081      	b.n	8007b4c <UART_SetConfig+0x314>
 8007a48:	46002400 	.word	0x46002400
 8007a4c:	cfff69f3 	.word	0xcfff69f3
 8007a50:	56002400 	.word	0x56002400
 8007a54:	40013800 	.word	0x40013800
 8007a58:	40004400 	.word	0x40004400
 8007a5c:	40004800 	.word	0x40004800
 8007a60:	40004c00 	.word	0x40004c00
 8007a64:	40005000 	.word	0x40005000
 8007a68:	0800aad4 	.word	0x0800aad4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a74:	d13c      	bne.n	8007af0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a78:	2200      	movs	r2, #0
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	607a      	str	r2, [r7, #4]
 8007a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a82:	f7fd ff07 	bl	8005894 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a86:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d05e      	beq.n	8007b4c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	4a39      	ldr	r2, [pc, #228]	; (8007b78 <UART_SetConfig+0x340>)
 8007a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa0:	005a      	lsls	r2, r3, #1
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	085b      	lsrs	r3, r3, #1
 8007aa8:	441a      	add	r2, r3
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab6:	2b0f      	cmp	r3, #15
 8007ab8:	d916      	bls.n	8007ae8 <UART_SetConfig+0x2b0>
 8007aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac0:	d212      	bcs.n	8007ae8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f023 030f 	bic.w	r3, r3, #15
 8007aca:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ace:	085b      	lsrs	r3, r3, #1
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007ada:	4313      	orrs	r3, r2
 8007adc:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007ae4:	60da      	str	r2, [r3, #12]
 8007ae6:	e031      	b.n	8007b4c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007aee:	e02d      	b.n	8007b4c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af2:	2200      	movs	r2, #0
 8007af4:	469a      	mov	sl, r3
 8007af6:	4693      	mov	fp, r2
 8007af8:	4650      	mov	r0, sl
 8007afa:	4659      	mov	r1, fp
 8007afc:	f7fd feca 	bl	8005894 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b00:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d021      	beq.n	8007b4c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	4a1a      	ldr	r2, [pc, #104]	; (8007b78 <UART_SetConfig+0x340>)
 8007b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	085b      	lsrs	r3, r3, #1
 8007b20:	441a      	add	r2, r3
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2e:	2b0f      	cmp	r3, #15
 8007b30:	d909      	bls.n	8007b46 <UART_SetConfig+0x30e>
 8007b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b38:	d205      	bcs.n	8007b46 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	e002      	b.n	8007b4c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	2201      	movs	r2, #1
 8007b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	2200      	movs	r2, #0
 8007b60:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	2200      	movs	r2, #0
 8007b66:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3750      	adds	r7, #80	; 0x50
 8007b70:	46bd      	mov	sp, r7
 8007b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b76:	bf00      	nop
 8007b78:	0800aad4 	.word	0x0800aad4

08007b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	f003 0308 	and.w	r3, r3, #8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	f003 0310 	and.w	r3, r3, #16
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7a:	d10a      	bne.n	8007c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cd0:	f7f9 ff9e 	bl	8001c10 <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d10e      	bne.n	8007d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f82f 	bl	8007d56 <UART_WaitOnFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e025      	b.n	8007d4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d10e      	bne.n	8007d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f819 	bl	8007d56 <UART_WaitOnFlagUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e00f      	b.n	8007d4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b09c      	sub	sp, #112	; 0x70
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	4613      	mov	r3, r2
 8007d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d66:	e0a9      	b.n	8007ebc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6e:	f000 80a5 	beq.w	8007ebc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d72:	f7f9 ff4d 	bl	8001c10 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d302      	bcc.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d140      	bne.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007dac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e6      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dda:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e5      	bne.n	8007dba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e069      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d051      	beq.n	8007ebc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e26:	d149      	bne.n	8007ebc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e50:	637b      	str	r3, [r7, #52]	; 0x34
 8007e52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e6      	bne.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	613b      	str	r3, [r7, #16]
   return(result);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f023 0301 	bic.w	r3, r3, #1
 8007e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3308      	adds	r3, #8
 8007e82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e84:	623a      	str	r2, [r7, #32]
 8007e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	69f9      	ldr	r1, [r7, #28]
 8007e8a:	6a3a      	ldr	r2, [r7, #32]
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e5      	bne.n	8007e64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e010      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69da      	ldr	r2, [r3, #28]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	bf0c      	ite	eq
 8007ecc:	2301      	moveq	r3, #1
 8007ece:	2300      	movne	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	f43f af46 	beq.w	8007d68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3770      	adds	r7, #112	; 0x70
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_UARTEx_DisableFifoMode+0x16>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e027      	b.n	8007f4c <HAL_UARTEx_DisableFifoMode+0x66>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	; 0x24
 8007f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0201 	bic.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e02d      	b.n	8007fcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2224      	movs	r2, #36	; 0x24
 8007f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f84f 	bl	8008050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d101      	bne.n	8007fec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e02d      	b.n	8008048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2224      	movs	r2, #36	; 0x24
 8007ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0201 	bic.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f811 	bl	8008050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800805c:	2b00      	cmp	r3, #0
 800805e:	d108      	bne.n	8008072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008070:	e031      	b.n	80080d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008072:	2308      	movs	r3, #8
 8008074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008076:	2308      	movs	r3, #8
 8008078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	0e5b      	lsrs	r3, r3, #25
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	0f5b      	lsrs	r3, r3, #29
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	7b3a      	ldrb	r2, [r7, #12]
 800809e:	4911      	ldr	r1, [pc, #68]	; (80080e4 <UARTEx_SetNbDataToProcess+0x94>)
 80080a0:	5c8a      	ldrb	r2, [r1, r2]
 80080a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080a6:	7b3a      	ldrb	r2, [r7, #12]
 80080a8:	490f      	ldr	r1, [pc, #60]	; (80080e8 <UARTEx_SetNbDataToProcess+0x98>)
 80080aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	7b7a      	ldrb	r2, [r7, #13]
 80080bc:	4909      	ldr	r1, [pc, #36]	; (80080e4 <UARTEx_SetNbDataToProcess+0x94>)
 80080be:	5c8a      	ldrb	r2, [r1, r2]
 80080c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080c4:	7b7a      	ldrb	r2, [r7, #13]
 80080c6:	4908      	ldr	r1, [pc, #32]	; (80080e8 <UARTEx_SetNbDataToProcess+0x98>)
 80080c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080d6:	bf00      	nop
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	0800aaec 	.word	0x0800aaec
 80080e8:	0800aaf4 	.word	0x0800aaf4

080080ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080ec:	b084      	sub	sp, #16
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	f107 001c 	add.w	r0, r7, #28
 80080fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa72 	bl	80085f4 <USB_CoreReset>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	; 0x38
 8008126:	e005      	b.n	8008134 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8008134:	7bfb      	ldrb	r3, [r7, #15]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008140:	b004      	add	sp, #16
 8008142:	4770      	bx	lr

08008144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f023 0201 	bic.w	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d115      	bne.n	80081b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008194:	2001      	movs	r0, #1
 8008196:	f7f9 fd47 	bl	8001c28 <HAL_Delay>
      ms++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fa19 	bl	80085d8 <USB_GetMode>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d01e      	beq.n	80081ea <USB_SetCurrentMode+0x84>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b31      	cmp	r3, #49	; 0x31
 80081b0:	d9f0      	bls.n	8008194 <USB_SetCurrentMode+0x2e>
 80081b2:	e01a      	b.n	80081ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d115      	bne.n	80081e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081c6:	2001      	movs	r0, #1
 80081c8:	f7f9 fd2e 	bl	8001c28 <HAL_Delay>
      ms++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa00 	bl	80085d8 <USB_GetMode>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <USB_SetCurrentMode+0x84>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b31      	cmp	r3, #49	; 0x31
 80081e2:	d9f0      	bls.n	80081c6 <USB_SetCurrentMode+0x60>
 80081e4:	e001      	b.n	80081ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e005      	b.n	80081f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b32      	cmp	r3, #50	; 0x32
 80081ee:	d101      	bne.n	80081f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008200:	b084      	sub	sp, #16
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800820e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	e009      	b.n	8008234 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3340      	adds	r3, #64	; 0x40
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	2200      	movs	r2, #0
 800822c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3301      	adds	r3, #1
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2b0e      	cmp	r3, #14
 8008238:	d9f2      	bls.n	8008220 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800823a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d11c      	bne.n	800827a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800824e:	f043 0302 	orr.w	r3, r3, #2
 8008252:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	e005      	b.n	8008286 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800828c:	461a      	mov	r2, r3
 800828e:	2300      	movs	r3, #0
 8008290:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008298:	4619      	mov	r1, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a0:	461a      	mov	r2, r3
 80082a2:	680b      	ldr	r3, [r1, #0]
 80082a4:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80082a6:	2103      	movs	r1, #3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f95b 	bl	8008564 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082ae:	2110      	movs	r1, #16
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f8f3 	bl	800849c <USB_FlushTxFifo>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f91f 	bl	8008504 <USB_FlushRxFifo>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d6:	461a      	mov	r2, r3
 80082d8:	2300      	movs	r3, #0
 80082da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e2:	461a      	mov	r2, r3
 80082e4:	2300      	movs	r3, #0
 80082e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ee:	461a      	mov	r2, r3
 80082f0:	2300      	movs	r3, #0
 80082f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	613b      	str	r3, [r7, #16]
 80082f8:	e043      	b.n	8008382 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800830c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008310:	d118      	bne.n	8008344 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	461a      	mov	r2, r3
 8008326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	e013      	b.n	8008356 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833a:	461a      	mov	r2, r3
 800833c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	e008      	b.n	8008356 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008350:	461a      	mov	r2, r3
 8008352:	2300      	movs	r3, #0
 8008354:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008362:	461a      	mov	r2, r3
 8008364:	2300      	movs	r3, #0
 8008366:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	461a      	mov	r2, r3
 8008376:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800837a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	3301      	adds	r3, #1
 8008380:	613b      	str	r3, [r7, #16]
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	429a      	cmp	r2, r3
 8008388:	d3b7      	bcc.n	80082fa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	e043      	b.n	8008418 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083a6:	d118      	bne.n	80083da <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10a      	bne.n	80083c4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ba:	461a      	mov	r2, r3
 80083bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	e013      	b.n	80083ec <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d0:	461a      	mov	r2, r3
 80083d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	e008      	b.n	80083ec <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	461a      	mov	r2, r3
 80083e8:	2300      	movs	r3, #0
 80083ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	461a      	mov	r2, r3
 80083fa:	2300      	movs	r3, #0
 80083fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4413      	add	r3, r2
 8008406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840a:	461a      	mov	r2, r3
 800840c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008410:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	3301      	adds	r3, #1
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	429a      	cmp	r2, r3
 800841e:	d3b7      	bcc.n	8008390 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800842e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008432:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008440:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f043 0210 	orr.w	r2, r3, #16
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	4b0f      	ldr	r3, [pc, #60]	; (8008498 <USB_DevInit+0x298>)
 800845a:	4313      	orrs	r3, r2
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f043 0208 	orr.w	r2, r3, #8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d107      	bne.n	8008488 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008480:	f043 0304 	orr.w	r3, r3, #4
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008494:	b004      	add	sp, #16
 8008496:	4770      	bx	lr
 8008498:	803c3800 	.word	0x803c3800

0800849c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3301      	adds	r3, #1
 80084ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4a13      	ldr	r2, [pc, #76]	; (8008500 <USB_FlushTxFifo+0x64>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d901      	bls.n	80084bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e01b      	b.n	80084f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	daf2      	bge.n	80084aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	019b      	lsls	r3, r3, #6
 80084cc:	f043 0220 	orr.w	r2, r3, #32
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4a08      	ldr	r2, [pc, #32]	; (8008500 <USB_FlushTxFifo+0x64>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d901      	bls.n	80084e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e006      	b.n	80084f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d0f0      	beq.n	80084d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	00030d40 	.word	0x00030d40

08008504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3301      	adds	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4a11      	ldr	r2, [pc, #68]	; (8008560 <USB_FlushRxFifo+0x5c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d901      	bls.n	8008522 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e018      	b.n	8008554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	daf2      	bge.n	8008510 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2210      	movs	r2, #16
 8008532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4a08      	ldr	r2, [pc, #32]	; (8008560 <USB_FlushRxFifo+0x5c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d901      	bls.n	8008546 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e006      	b.n	8008554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f003 0310 	and.w	r3, r3, #16
 800854e:	2b10      	cmp	r3, #16
 8008550:	d0f0      	beq.n	8008534 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	00030d40 	.word	0x00030d40

08008564 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	68f9      	ldr	r1, [r7, #12]
 8008580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008584:	4313      	orrs	r3, r2
 8008586:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085b0:	f023 0303 	bic.w	r3, r3, #3
 80085b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c4:	f043 0302 	orr.w	r3, r3, #2
 80085c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	f003 0301 	and.w	r3, r3, #1
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a13      	ldr	r2, [pc, #76]	; (8008658 <USB_CoreReset+0x64>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d901      	bls.n	8008612 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e01b      	b.n	800864a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	daf2      	bge.n	8008600 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	f043 0201 	orr.w	r2, r3, #1
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3301      	adds	r3, #1
 800862e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a09      	ldr	r2, [pc, #36]	; (8008658 <USB_CoreReset+0x64>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d901      	bls.n	800863c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e006      	b.n	800864a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b01      	cmp	r3, #1
 8008646:	d0f0      	beq.n	800862a <USB_CoreReset+0x36>

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	00030d40 	.word	0x00030d40

0800865c <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b096      	sub	sp, #88	; 0x58
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3303      	adds	r3, #3
 800866e:	f023 0303 	bic.w	r3, r3, #3
 8008672:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008674:	f3ef 8310 	mrs	r3, PRIMASK
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800867c:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800867e:	b672      	cpsid	i
#endif
    return(int_posture);
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8008682:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008684:	4b55      	ldr	r3, [pc, #340]	; (80087dc <_tx_byte_allocate+0x180>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008692:	621a      	str	r2, [r3, #32]
 8008694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	f383 8810 	msr	PRIMASK, r3
}
 800869e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80086a0:	6879      	ldr	r1, [r7, #4]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 f9b2 	bl	8008a0c <_tx_byte_pool_search>
 80086a8:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80086aa:	f3ef 8310 	mrs	r3, PRIMASK
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80086b4:	b672      	cpsid	i
    return(int_posture);
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80086b8:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80086ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80086c0:	2301      	movs	r3, #1
 80086c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086c4:	e006      	b.n	80086d4 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d101      	bne.n	80086d4 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80086d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0d9      	beq.n	800868e <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086de:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80086e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d008      	beq.n	80086f8 <_tx_byte_allocate+0x9c>
 80086e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	f383 8810 	msr	PRIMASK, r3
}
 80086f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80086f2:	2300      	movs	r3, #0
 80086f4:	653b      	str	r3, [r7, #80]	; 0x50
 80086f6:	e06c      	b.n	80087d2 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d061      	beq.n	80087c2 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80086fe:	4b38      	ldr	r3, [pc, #224]	; (80087e0 <_tx_byte_allocate+0x184>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8008706:	2310      	movs	r3, #16
 8008708:	653b      	str	r3, [r7, #80]	; 0x50
 800870a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800870c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	f383 8810 	msr	PRIMASK, r3
}
 8008714:	e05d      	b.n	80087d2 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8008716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008718:	4a32      	ldr	r2, [pc, #200]	; (80087e4 <_tx_byte_allocate+0x188>)
 800871a:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800871c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8008722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8008728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800872e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008730:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008738:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008740:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800874c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008756:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8008758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800875a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800875c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800875e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008762:	675a      	str	r2, [r3, #116]	; 0x74
 8008764:	e011      	b.n	800878a <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800876c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800876e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008770:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800877a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800877c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008782:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008788:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800878a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878c:	2209      	movs	r2, #9
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008792:	2201      	movs	r2, #1
 8008794:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800879c:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <_tx_byte_allocate+0x184>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	4a0f      	ldr	r2, [pc, #60]	; (80087e0 <_tx_byte_allocate+0x184>)
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	f383 8810 	msr	PRIMASK, r3
}
 80087b0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80087b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80087b4:	f001 f838 	bl	8009828 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80087b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087be:	653b      	str	r3, [r7, #80]	; 0x50
 80087c0:	e007      	b.n	80087d2 <_tx_byte_allocate+0x176>
 80087c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f383 8810 	msr	PRIMASK, r3
}
 80087cc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80087ce:	2310      	movs	r3, #16
 80087d0:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80087d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3758      	adds	r7, #88	; 0x58
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	200a0d88 	.word	0x200a0d88
 80087e0:	200a0e20 	.word	0x200a0e20
 80087e4:	080087e9 	.word	0x080087e9

080087e8 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08e      	sub	sp, #56	; 0x38
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087f2:	f3ef 8310 	mrs	r3, PRIMASK
 80087f6:	623b      	str	r3, [r7, #32]
    return(posture);
 80087f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80087fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80087fc:	b672      	cpsid	i
    return(int_posture);
 80087fe:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8008800:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008806:	4a33      	ldr	r2, [pc, #204]	; (80088d4 <_tx_byte_pool_cleanup+0xec>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d158      	bne.n	80088be <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d152      	bne.n	80088be <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	2b00      	cmp	r3, #0
 8008822:	d04c      	beq.n	80088be <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a2b      	ldr	r2, [pc, #172]	; (80088d8 <_tx_byte_pool_cleanup+0xf0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d147      	bne.n	80088be <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d043      	beq.n	80088be <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	1e5a      	subs	r2, r3, #1
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	2200      	movs	r2, #0
 8008856:	625a      	str	r2, [r3, #36]	; 0x24
 8008858:	e013      	b.n	8008882 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008870:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	429a      	cmp	r2, r3
 800887a:	d102      	bne.n	8008882 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008880:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008886:	2b09      	cmp	r3, #9
 8008888:	d119      	bne.n	80088be <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2210      	movs	r2, #16
 800888e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <_tx_byte_pool_cleanup+0xf4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3301      	adds	r3, #1
 8008898:	4a10      	ldr	r2, [pc, #64]	; (80088dc <_tx_byte_pool_cleanup+0xf4>)
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f383 8810 	msr	PRIMASK, r3
}
 80088a6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 febd 	bl	8009628 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80088ae:	f3ef 8310 	mrs	r3, PRIMASK
 80088b2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80088b4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80088b6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80088b8:	b672      	cpsid	i
    return(int_posture);
 80088ba:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
 80088be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f383 8810 	msr	PRIMASK, r3
}
 80088c8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80088ca:	bf00      	nop
 80088cc:	3738      	adds	r7, #56	; 0x38
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	080087e9 	.word	0x080087e9
 80088d8:	42595445 	.word	0x42595445
 80088dc:	200a0e20 	.word	0x200a0e20

080088e0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08e      	sub	sp, #56	; 0x38
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80088ee:	2234      	movs	r2, #52	; 0x34
 80088f0:	2100      	movs	r1, #0
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f002 f820 	bl	800a938 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	f1a3 0208 	sub.w	r2, r3, #8
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2202      	movs	r2, #2
 800892c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	4413      	add	r3, r2
 8008938:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800893a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893c:	3b04      	subs	r3, #4
 800893e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800894c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	3b04      	subs	r3, #4
 8008952:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008956:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800896a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	3304      	adds	r3, #4
 8008974:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	4a1f      	ldr	r2, [pc, #124]	; (80089fc <_tx_byte_pool_create+0x11c>)
 800897e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008986:	f3ef 8310 	mrs	r3, PRIMASK
 800898a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800898c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800898e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008990:	b672      	cpsid	i
    return(int_posture);
 8008992:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008994:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4a19      	ldr	r2, [pc, #100]	; (8008a00 <_tx_byte_pool_create+0x120>)
 800899a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800899c:	4b19      	ldr	r3, [pc, #100]	; (8008a04 <_tx_byte_pool_create+0x124>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80089a4:	4a18      	ldr	r2, [pc, #96]	; (8008a08 <_tx_byte_pool_create+0x128>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30
 80089b6:	e011      	b.n	80089dc <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80089b8:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <_tx_byte_pool_create+0x128>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c2:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a3a      	ldr	r2, [r7, #32]
 80089da:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80089dc:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <_tx_byte_pool_create+0x124>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <_tx_byte_pool_create+0x124>)
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f383 8810 	msr	PRIMASK, r3
}
 80089f0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3738      	adds	r7, #56	; 0x38
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	ffffeeee 	.word	0xffffeeee
 8008a00:	42595445 	.word	0x42595445
 8008a04:	200a0d7c 	.word	0x200a0d7c
 8008a08:	200a0d78 	.word	0x200a0d78

08008a0c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b097      	sub	sp, #92	; 0x5c
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8008a22:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a24:	b672      	cpsid	i
    return(int_posture);
 8008a26:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8008a28:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	3b02      	subs	r3, #2
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	4413      	add	r3, r2
 8008a38:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d308      	bcc.n	8008a54 <_tx_byte_pool_search+0x48>
 8008a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	f383 8810 	msr	PRIMASK, r3
}
 8008a4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	653b      	str	r3, [r7, #80]	; 0x50
 8008a52:	e0dd      	b.n	8008c10 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008a54:	4b72      	ldr	r3, [pc, #456]	; (8008c20 <_tx_byte_pool_search+0x214>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a5e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8008a6e:	2300      	movs	r3, #0
 8008a70:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a74:	3304      	adds	r3, #4
 8008a76:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a68      	ldr	r2, [pc, #416]	; (8008c24 <_tx_byte_pool_search+0x218>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d143      	bne.n	8008b0e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8008a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d104      	bne.n	8008a96 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a90:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8008a92:	2301      	movs	r3, #1
 8008a94:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a98:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aaa:	3b08      	subs	r3, #8
 8008aac:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8008aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d257      	bcs.n	8008b66 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	3304      	adds	r3, #4
 8008abe:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a56      	ldr	r2, [pc, #344]	; (8008c24 <_tx_byte_pool_search+0x218>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d113      	bne.n	8008af6 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	1e5a      	subs	r2, r3, #1
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d114      	bne.n	8008b18 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008af2:	615a      	str	r2, [r3, #20]
 8008af4:	e010      	b.n	8008b18 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8008b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8008b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b0c:	e004      	b.n	8008b18 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b10:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8008b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8008b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b20:	3b01      	subs	r3, #1
 8008b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b26:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	f383 8810 	msr	PRIMASK, r3
}
 8008b2e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b30:	f3ef 8310 	mrs	r3, PRIMASK
 8008b34:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008b36:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008b38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b3a:	b672      	cpsid	i
    return(int_posture);
 8008b3c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8008b3e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d009      	beq.n	8008b5e <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	3301      	adds	r3, #1
 8008b56:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b5c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8008b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d186      	bne.n	8008a72 <_tx_byte_pool_search+0x66>
 8008b64:	e000      	b.n	8008b68 <_tx_byte_pool_search+0x15c>
                    break;
 8008b66:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8008b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d048      	beq.n	8008c00 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8008b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	2b13      	cmp	r3, #19
 8008b76:	d91e      	bls.n	8008bb6 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b7e:	4413      	add	r3, r2
 8008b80:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b88:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	3304      	adds	r3, #4
 8008b96:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	4a21      	ldr	r2, [pc, #132]	; (8008c24 <_tx_byte_pool_search+0x218>)
 8008ba0:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8008bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb0:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb8:	3304      	adds	r3, #4
 8008bba:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	f1a3 0208 	sub.w	r2, r3, #8
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d105      	bne.n	8008bec <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be2:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	615a      	str	r2, [r3, #20]
 8008bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f383 8810 	msr	PRIMASK, r3
}
 8008bf6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8008bfe:	e007      	b.n	8008c10 <_tx_byte_pool_search+0x204>
 8008c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c02:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f383 8810 	msr	PRIMASK, r3
}
 8008c0a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8008c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	375c      	adds	r7, #92	; 0x5c
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	200a0d88 	.word	0x200a0d88
 8008c24:	ffffeeee 	.word	0xffffeeee

08008c28 <_tx_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_release(VOID *memory_ptr)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b09e      	sub	sp, #120	; 0x78
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
UCHAR               **block_link_ptr;
UCHAR               **suspend_info_ptr;


    /* Default to successful status.  */
    status =  TX_SUCCESS;
 8008c30:	2300      	movs	r3, #0
 8008c32:	673b      	str	r3, [r7, #112]	; 0x70

    /* Set the pool pointer to NULL.  */
    pool_ptr =  TX_NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c38:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8008c40:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c42:	b672      	cpsid	i
    return(int_posture);
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Lockout interrupts.  */
    TX_DISABLE
 8008c46:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if the memory pointer is valid.  */
    work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (work_ptr != TX_NULL)
 8008c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d027      	beq.n	8008ca2 <_tx_byte_release+0x7a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8008c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c54:	3b08      	subs	r3, #8
 8008c56:	66bb      	str	r3, [r7, #104]	; 0x68

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8008c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	667b      	str	r3, [r7, #100]	; 0x64
        free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8008c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c60:	663b      	str	r3, [r7, #96]	; 0x60
        if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
 8008c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a7e      	ldr	r2, [pc, #504]	; (8008e60 <_tx_byte_release+0x238>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d017      	beq.n	8008c9c <_tx_byte_release+0x74>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8008c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c6e:	3304      	adds	r3, #4
 8008c70:	667b      	str	r3, [r7, #100]	; 0x64
            byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 8008c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c74:	65fb      	str	r3, [r7, #92]	; 0x5c
            pool_ptr =  *byte_pool_ptr;
 8008c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* See if we have a valid pool pointer.  */
            if (pool_ptr == TX_NULL)
 8008c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <_tx_byte_release+0x60>
            {

                /* Return pointer error.  */
                status =  TX_PTR_ERROR;
 8008c82:	2303      	movs	r3, #3
 8008c84:	673b      	str	r3, [r7, #112]	; 0x70
 8008c86:	e00e      	b.n	8008ca6 <_tx_byte_release+0x7e>
            }
            else
            {

                /* See if we have a valid pool.  */
                if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8008c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a75      	ldr	r2, [pc, #468]	; (8008e64 <_tx_byte_release+0x23c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d009      	beq.n	8008ca6 <_tx_byte_release+0x7e>
                {

                    /* Return pointer error.  */
                    status =  TX_PTR_ERROR;
 8008c92:	2303      	movs	r3, #3
 8008c94:	673b      	str	r3, [r7, #112]	; 0x70

                    /* Reset the pool pointer is NULL.  */
                    pool_ptr =  TX_NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c9a:	e004      	b.n	8008ca6 <_tx_byte_release+0x7e>
        }
        else
        {

            /* Return pointer error.  */
            status =  TX_PTR_ERROR;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	673b      	str	r3, [r7, #112]	; 0x70
 8008ca0:	e001      	b.n	8008ca6 <_tx_byte_release+0x7e>
    }
    else
    {

        /* Return pointer error.  */
        status =  TX_PTR_ERROR;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Determine if the pointer is valid.  */
    if (pool_ptr == TX_NULL)
 8008ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <_tx_byte_release+0x90>
 8008cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	f383 8810 	msr	PRIMASK, r3
}
 8008cb6:	e0cd      	b.n	8008e54 <_tx_byte_release+0x22c>
    {

        /* At this point, we know that the pointer is valid.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008cb8:	4b6b      	ldr	r3, [pc, #428]	; (8008e68 <_tx_byte_release+0x240>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cc2:	621a      	str	r2, [r3, #32]

        /* Log this kernel call.  */
        TX_EL_BYTE_RELEASE_INSERT

        /* Release the memory.  */
        temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8008cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	667b      	str	r3, [r7, #100]	; 0x64
        free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8008cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ccc:	663b      	str	r3, [r7, #96]	; 0x60
        *free_ptr =  TX_BYTE_BLOCK_FREE;
 8008cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd0:	4a63      	ldr	r2, [pc, #396]	; (8008e60 <_tx_byte_release+0x238>)
 8008cd2:	601a      	str	r2, [r3, #0]

        /* Update the number of available bytes in the pool.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cd6:	657b      	str	r3, [r7, #84]	; 0x54
        next_block_ptr =  *block_link_ptr;
 8008cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	653b      	str	r3, [r7, #80]	; 0x50
        pool_ptr -> tx_byte_pool_available =
            pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8008cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ce4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ce6:	1a8a      	subs	r2, r1, r2
 8008ce8:	441a      	add	r2, r3
        pool_ptr -> tx_byte_pool_available =
 8008cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cec:	609a      	str	r2, [r3, #8]

        /* Determine if the free block is prior to current search pointer.  */
        if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8008cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d202      	bcs.n	8008cfe <_tx_byte_release+0xd6>
        {

            /* Yes, update the search pointer to the released block.  */
            pool_ptr -> tx_byte_pool_search =  work_ptr;
 8008cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008cfc:	615a      	str	r2, [r3, #20]
        }

        /* Determine if there are threads suspended on this byte pool.  */
        if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8008cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 80a0 	beq.w	8008e48 <_tx_byte_release+0x220>
        {

            /* Now examine the suspension list to find threads waiting for
               memory.  Maybe it is now available!  */
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8008d08:	e08e      	b.n	8008e28 <_tx_byte_release+0x200>
            {

                /* Pickup the first suspended thread pointer.  */
                susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 8008d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the size of the memory the thread is requesting.  */
                memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 8008d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d18:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	f383 8810 	msr	PRIMASK, r3
}
 8008d20:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* See if the request can be satisfied.  */
                work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8008d22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d26:	f7ff fe71 	bl	8008a0c <_tx_byte_pool_search>
 8008d2a:	66b8      	str	r0, [r7, #104]	; 0x68
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d30:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d36:	b672      	cpsid	i
    return(int_posture);
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24

                /* Optional processing extension.  */
                TX_BYTE_RELEASE_EXTENSION

                /* Disable interrupts.  */
                TX_DISABLE
 8008d3a:	677b      	str	r3, [r7, #116]	; 0x74

                /* Indicate that this thread is the current owner.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d40:	621a      	str	r2, [r3, #32]

                /* If there is not enough memory, break this loop!  */
                if (work_ptr == TX_NULL)
 8008d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d075      	beq.n	8008e34 <_tx_byte_release+0x20c>
                  /* Break out of the loop.  */
                    break;
                }

                /* Check to make sure the thread is still suspended.  */
                if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 8008d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d147      	bne.n	8008de2 <_tx_byte_release+0x1ba>
                {

                    /* Also, makes sure the memory size is the same.  */
                    if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 8008d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d142      	bne.n	8008de2 <_tx_byte_release+0x1ba>
                    {

                        /* Remove the suspended thread from the list.  */

                        /* Decrement the number of threads suspended.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8008d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	1e5a      	subs	r2, r3, #1
 8008d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d64:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	647b      	str	r3, [r7, #68]	; 0x44

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d103      	bne.n	8008d7a <_tx_byte_release+0x152>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d74:	2200      	movs	r2, #0
 8008d76:	625a      	str	r2, [r3, #36]	; 0x24
 8008d78:	e00e      	b.n	8008d98 <_tx_byte_release+0x170>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the list head pointer.  */
                            next_thread =                                susp_thread_ptr -> tx_thread_suspended_next;
 8008d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7e:	643b      	str	r3, [r7, #64]	; 0x40
                            pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 8008d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d84:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Update the links of the adjacent threads.  */
                            previous_thread =                              susp_thread_ptr -> tx_thread_suspended_previous;
 8008d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d90:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8008d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d96:	671a      	str	r2, [r3, #112]	; 0x70
                        }

                        /* Prepare for resumption of the thread.  */

                        /* Clear cleanup routine to avoid timeout.  */
                        susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Return this block pointer to the suspended thread waiting for
                           a block.  */
                        suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_ptr -> tx_thread_additional_suspend_info);
 8008d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da2:	63bb      	str	r3, [r7, #56]	; 0x38
                        *suspend_info_ptr =  work_ptr;
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008da8:	601a      	str	r2, [r3, #0]

                        /* Clear the memory pointer to indicate that it was given to the suspended thread.  */
                        work_ptr =  TX_NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Put return status into the thread control block.  */
                        susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* Restore interrupts.  */
                        TX_RESTORE
#else
                        /* Temporarily disable preemption.  */
                        _tx_thread_preempt_disable++;
 8008db6:	4b2d      	ldr	r3, [pc, #180]	; (8008e6c <_tx_byte_release+0x244>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	4a2b      	ldr	r2, [pc, #172]	; (8008e6c <_tx_byte_release+0x244>)
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f383 8810 	msr	PRIMASK, r3
}
 8008dca:	bf00      	nop

                        /* Restore interrupts.  */
                        TX_RESTORE

                        /* Resume thread.  */
                        _tx_thread_system_resume(susp_thread_ptr);
 8008dcc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008dce:	f000 fc2b 	bl	8009628 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd6:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008dd8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008dda:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ddc:	b672      	cpsid	i
    return(int_posture);
 8008dde:	69bb      	ldr	r3, [r7, #24]
#endif

                        /* Lockout interrupts.  */
                        TX_DISABLE
 8008de0:	677b      	str	r3, [r7, #116]	; 0x74
                    }
                }

                /* Determine if the memory was given to the suspended thread.  */
                if (work_ptr != TX_NULL)
 8008de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01f      	beq.n	8008e28 <_tx_byte_release+0x200>

                    /* No, it wasn't given to the suspended thread.  */

                    /* Put the memory back on the available list since this thread is no longer
                       suspended.  */
                    work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dea:	3b08      	subs	r3, #8
 8008dec:	66bb      	str	r3, [r7, #104]	; 0x68
                    temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8008dee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008df0:	3304      	adds	r3, #4
 8008df2:	667b      	str	r3, [r7, #100]	; 0x64
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8008df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008df6:	663b      	str	r3, [r7, #96]	; 0x60
                    *free_ptr =  TX_BYTE_BLOCK_FREE;
 8008df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dfa:	4a19      	ldr	r2, [pc, #100]	; (8008e60 <_tx_byte_release+0x238>)
 8008dfc:	601a      	str	r2, [r3, #0]

                    /* Update the number of available bytes in the pool.  */
                    block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e00:	657b      	str	r3, [r7, #84]	; 0x54
                    next_block_ptr =  *block_link_ptr;
 8008e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	653b      	str	r3, [r7, #80]	; 0x50
                    pool_ptr -> tx_byte_pool_available =
                        pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8008e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e10:	1a8a      	subs	r2, r1, r2
 8008e12:	441a      	add	r2, r3
                    pool_ptr -> tx_byte_pool_available =
 8008e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e16:	609a      	str	r2, [r3, #8]

                    /* Determine if the current pointer is before the search pointer.  */
                    if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8008e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d202      	bcs.n	8008e28 <_tx_byte_release+0x200>
                    {

                        /* Yes, update the search pointer.  */
                        pool_ptr -> tx_byte_pool_search =  work_ptr;
 8008e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e26:	615a      	str	r2, [r3, #20]
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8008e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f47f af6c 	bne.w	8008d0a <_tx_byte_release+0xe2>
 8008e32:	e000      	b.n	8008e36 <_tx_byte_release+0x20e>
                    break;
 8008e34:	bf00      	nop
 8008e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e38:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f383 8810 	msr	PRIMASK, r3
}
 8008e40:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Check for preemption.  */
            _tx_thread_system_preempt_check();
 8008e42:	f000 fbb7 	bl	80095b4 <_tx_thread_system_preempt_check>
 8008e46:	e005      	b.n	8008e54 <_tx_byte_release+0x22c>
 8008e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e4a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f383 8810 	msr	PRIMASK, r3
}
 8008e52:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 8008e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3778      	adds	r7, #120	; 0x78
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	ffffeeee 	.word	0xffffeeee
 8008e64:	42595445 	.word	0x42595445
 8008e68:	200a0d88 	.word	0x200a0d88
 8008e6c:	200a0e20 	.word	0x200a0e20

08008e70 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08e      	sub	sp, #56	; 0x38
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e7e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008e80:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008e82:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e84:	b672      	cpsid	i
    return(int_posture);
 8008e86:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8008e88:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e8e:	4a38      	ldr	r2, [pc, #224]	; (8008f70 <_tx_event_flags_cleanup+0x100>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d162      	bne.n	8008f5a <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d15c      	bne.n	8008f5a <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ea4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d056      	beq.n	8008f5a <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a30      	ldr	r2, [pc, #192]	; (8008f74 <_tx_event_flags_cleanup+0x104>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d151      	bne.n	8008f5a <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d04d      	beq.n	8008f5a <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d020      	beq.n	8008f18 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee0:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d103      	bne.n	8008ef0 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	2200      	movs	r2, #0
 8008eec:	611a      	str	r2, [r3, #16]
 8008eee:	e016      	b.n	8008f1e <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008efa:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f06:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8008f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d106      	bne.n	8008f1e <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f14:	611a      	str	r2, [r3, #16]
 8008f16:	e002      	b.n	8008f1e <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	2b07      	cmp	r3, #7
 8008f24:	d119      	bne.n	8008f5a <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2207      	movs	r2, #7
 8008f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008f2e:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <_tx_event_flags_cleanup+0x108>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3301      	adds	r3, #1
 8008f34:	4a10      	ldr	r2, [pc, #64]	; (8008f78 <_tx_event_flags_cleanup+0x108>)
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f383 8810 	msr	PRIMASK, r3
}
 8008f42:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fb6f 	bl	8009628 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f4e:	617b      	str	r3, [r7, #20]
    return(posture);
 8008f50:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008f52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f54:	b672      	cpsid	i
    return(int_posture);
 8008f56:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008f58:	637b      	str	r3, [r7, #52]	; 0x34
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f383 8810 	msr	PRIMASK, r3
}
 8008f64:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008f66:	bf00      	nop
 8008f68:	3738      	adds	r7, #56	; 0x38
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	08008e71 	.word	0x08008e71
 8008f74:	4456444e 	.word	0x4456444e
 8008f78:	200a0e20 	.word	0x200a0e20

08008f7c <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8008f86:	2224      	movs	r2, #36	; 0x24
 8008f88:	2100      	movs	r1, #0
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 fcd4 	bl	800a938 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f96:	f3ef 8310 	mrs	r3, PRIMASK
 8008f9a:	613b      	str	r3, [r7, #16]
    return(posture);
 8008f9c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8008f9e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008fa0:	b672      	cpsid	i
    return(int_posture);
 8008fa2:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8008fa4:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a18      	ldr	r2, [pc, #96]	; (800900c <_tx_event_flags_create+0x90>)
 8008faa:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8008fac:	4b18      	ldr	r3, [pc, #96]	; (8009010 <_tx_event_flags_create+0x94>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8008fb4:	4a17      	ldr	r2, [pc, #92]	; (8009014 <_tx_event_flags_create+0x98>)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	61da      	str	r2, [r3, #28]
 8008fc6:	e011      	b.n	8008fec <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8008fc8:	4b12      	ldr	r3, [pc, #72]	; (8009014 <_tx_event_flags_create+0x98>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8008fec:	4b08      	ldr	r3, [pc, #32]	; (8009010 <_tx_event_flags_create+0x94>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	4a07      	ldr	r2, [pc, #28]	; (8009010 <_tx_event_flags_create+0x94>)
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f383 8810 	msr	PRIMASK, r3
}
 8009000:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	4456444e 	.word	0x4456444e
 8009010:	200a0d64 	.word	0x200a0d64
 8009014:	200a0d60 	.word	0x200a0d60

08009018 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b096      	sub	sp, #88	; 0x58
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009026:	f3ef 8310 	mrs	r3, PRIMASK
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800902e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009030:	b672      	cpsid	i
    return(int_posture);
 8009032:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8009034:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800904a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8009050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009052:	43db      	mvns	r3, r3
 8009054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009056:	4013      	ands	r3, r2
 8009058:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800905a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800905c:	2b02      	cmp	r3, #2
 800905e:	d10a      	bne.n	8009076 <_tx_event_flags_get+0x5e>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8009060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	4013      	ands	r3, r2
 8009066:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8009068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	429a      	cmp	r2, r3
 800906e:	d006      	beq.n	800907e <_tx_event_flags_get+0x66>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8009070:	2300      	movs	r3, #0
 8009072:	64bb      	str	r3, [r7, #72]	; 0x48
 8009074:	e003      	b.n	800907e <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8009076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4013      	ands	r3, r2
 800907c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800907e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009080:	2b00      	cmp	r3, #0
 8009082:	d029      	beq.n	80090d8 <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009088:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	2b01      	cmp	r3, #1
 8009096:	d11c      	bne.n	80090d2 <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8009098:	2300      	movs	r3, #0
 800909a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <_tx_event_flags_get+0x98>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 80090ac:	2301      	movs	r3, #1
 80090ae:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 80090b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d106      	bne.n	80090c4 <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1a      	ldr	r2, [r3, #32]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	621a      	str	r2, [r3, #32]
 80090c2:	e006      	b.n	80090d2 <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	43db      	mvns	r3, r3
 80090cc:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80090d2:	2300      	movs	r3, #0
 80090d4:	653b      	str	r3, [r7, #80]	; 0x50
 80090d6:	e070      	b.n	80091ba <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80090d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d06b      	beq.n	80091b6 <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80090de:	4b3c      	ldr	r3, [pc, #240]	; (80091d0 <_tx_event_flags_get+0x1b8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <_tx_event_flags_get+0xd4>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 80090e6:	2307      	movs	r3, #7
 80090e8:	653b      	str	r3, [r7, #80]	; 0x50
 80090ea:	e066      	b.n	80091ba <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80090ec:	4b39      	ldr	r3, [pc, #228]	; (80091d4 <_tx_event_flags_get+0x1bc>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	4a38      	ldr	r2, [pc, #224]	; (80091d8 <_tx_event_flags_get+0x1c0>)
 80090f6:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8009126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009128:	2b00      	cmp	r3, #0
 800912a:	d109      	bne.n	8009140 <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009130:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009136:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800913c:	675a      	str	r2, [r3, #116]	; 0x74
 800913e:	e011      	b.n	8009164 <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914a:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009150:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009156:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800915c:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009162:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	2207      	movs	r2, #7
 8009172:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	2201      	movs	r2, #1
 8009178:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800917e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8009180:	4b13      	ldr	r3, [pc, #76]	; (80091d0 <_tx_event_flags_get+0x1b8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3301      	adds	r3, #1
 8009186:	4a12      	ldr	r2, [pc, #72]	; (80091d0 <_tx_event_flags_get+0x1b8>)
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800918c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f383 8810 	msr	PRIMASK, r3
}
 8009194:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009196:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009198:	f000 fb46 	bl	8009828 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800919c:	f3ef 8310 	mrs	r3, PRIMASK
 80091a0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80091a2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80091a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80091a6:	b672      	cpsid	i
    return(int_posture);
 80091a8:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 80091aa:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091b2:	653b      	str	r3, [r7, #80]	; 0x50
 80091b4:	e001      	b.n	80091ba <_tx_event_flags_get+0x1a2>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 80091b6:	2307      	movs	r3, #7
 80091b8:	653b      	str	r3, [r7, #80]	; 0x50
 80091ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f383 8810 	msr	PRIMASK, r3
}
 80091c4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 80091c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3758      	adds	r7, #88	; 0x58
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	200a0e20 	.word	0x200a0e20
 80091d4:	200a0d88 	.word	0x200a0d88
 80091d8:	08008e71 	.word	0x08008e71

080091dc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80091e0:	f000 f960 	bl	80094a4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80091e4:	f000 fce8 	bl	8009bb8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80091e8:	4b12      	ldr	r3, [pc, #72]	; (8009234 <_tx_initialize_high_level+0x58>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <_tx_initialize_high_level+0x5c>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80091f4:	4b11      	ldr	r3, [pc, #68]	; (800923c <_tx_initialize_high_level+0x60>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	4b11      	ldr	r3, [pc, #68]	; (8009240 <_tx_initialize_high_level+0x64>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8009200:	4b10      	ldr	r3, [pc, #64]	; (8009244 <_tx_initialize_high_level+0x68>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <_tx_initialize_high_level+0x6c>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800920c:	4b0f      	ldr	r3, [pc, #60]	; (800924c <_tx_initialize_high_level+0x70>)
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <_tx_initialize_high_level+0x74>)
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8009218:	4b0e      	ldr	r3, [pc, #56]	; (8009254 <_tx_initialize_high_level+0x78>)
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <_tx_initialize_high_level+0x7c>)
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8009224:	4b0d      	ldr	r3, [pc, #52]	; (800925c <_tx_initialize_high_level+0x80>)
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <_tx_initialize_high_level+0x84>)
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
#endif
}
 8009230:	bf00      	nop
 8009232:	bd80      	pop	{r7, pc}
 8009234:	200a0d50 	.word	0x200a0d50
 8009238:	200a0d54 	.word	0x200a0d54
 800923c:	200a0d58 	.word	0x200a0d58
 8009240:	200a0d5c 	.word	0x200a0d5c
 8009244:	200a0d60 	.word	0x200a0d60
 8009248:	200a0d64 	.word	0x200a0d64
 800924c:	200a0d70 	.word	0x200a0d70
 8009250:	200a0d74 	.word	0x200a0d74
 8009254:	200a0d78 	.word	0x200a0d78
 8009258:	200a0d7c 	.word	0x200a0d7c
 800925c:	200a0d68 	.word	0x200a0d68
 8009260:	200a0d6c 	.word	0x200a0d6c

08009264 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8009268:	4b10      	ldr	r3, [pc, #64]	; (80092ac <_tx_initialize_kernel_enter+0x48>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8009270:	d00c      	beq.n	800928c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009272:	4b0e      	ldr	r3, [pc, #56]	; (80092ac <_tx_initialize_kernel_enter+0x48>)
 8009274:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8009278:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800927a:	f7f6 fffb 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800927e:	f7ff ffad 	bl	80091dc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8009282:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <_tx_initialize_kernel_enter+0x4c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3301      	adds	r3, #1
 8009288:	4a09      	ldr	r2, [pc, #36]	; (80092b0 <_tx_initialize_kernel_enter+0x4c>)
 800928a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800928c:	4b07      	ldr	r3, [pc, #28]	; (80092ac <_tx_initialize_kernel_enter+0x48>)
 800928e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8009292:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8009294:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <_tx_initialize_kernel_enter+0x50>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4618      	mov	r0, r3
 800929a:	f7f7 faa1 	bl	80007e0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800929e:	4b03      	ldr	r3, [pc, #12]	; (80092ac <_tx_initialize_kernel_enter+0x48>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80092a4:	f7f7 f822 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80092a8:	bf00      	nop
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	2000000c 	.word	0x2000000c
 80092b0:	200a0e20 	.word	0x200a0e20
 80092b4:	200a0d80 	.word	0x200a0d80

080092b8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b092      	sub	sp, #72	; 0x48
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80092c6:	2300      	movs	r3, #0
 80092c8:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80092ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092cc:	21ef      	movs	r1, #239	; 0xef
 80092ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80092d0:	f001 fb32 	bl	800a938 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80092d4:	22b0      	movs	r2, #176	; 0xb0
 80092d6:	2100      	movs	r1, #0
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f001 fb2d 	bl	800a938 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092f4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092fa:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009300:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009306:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800930e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009314:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2220      	movs	r2, #32
 800931a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800931e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8009322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009324:	3b01      	subs	r3, #1
 8009326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009328:	4413      	add	r3, r2
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009330:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8009332:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009336:	429a      	cmp	r2, r3
 8009338:	d007      	beq.n	800934a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009348:	e006      	b.n	8009358 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800934e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009354:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2203      	movs	r2, #3
 800935c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4a48      	ldr	r2, [pc, #288]	; (8009484 <_tx_thread_create+0x1cc>)
 8009362:	655a      	str	r2, [r3, #84]	; 0x54
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800936a:	4947      	ldr	r1, [pc, #284]	; (8009488 <_tx_thread_create+0x1d0>)
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7f7 f82b 	bl	80003c8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009372:	f3ef 8310 	mrs	r3, PRIMASK
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800937c:	b672      	cpsid	i
    return(int_posture);
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8009380:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	4a41      	ldr	r2, [pc, #260]	; (800948c <_tx_thread_create+0x1d4>)
 8009386:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8009388:	4b41      	ldr	r3, [pc, #260]	; (8009490 <_tx_thread_create+0x1d8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10b      	bne.n	80093a8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8009390:	4a40      	ldr	r2, [pc, #256]	; (8009494 <_tx_thread_create+0x1dc>)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80093a6:	e016      	b.n	80093d6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80093a8:	4b3a      	ldr	r3, [pc, #232]	; (8009494 <_tx_thread_create+0x1dc>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80093ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80093b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80093d6:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <_tx_thread_create+0x1d8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	4a2c      	ldr	r2, [pc, #176]	; (8009490 <_tx_thread_create+0x1d8>)
 80093de:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80093e0:	4b2d      	ldr	r3, [pc, #180]	; (8009498 <_tx_thread_create+0x1e0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a2c      	ldr	r2, [pc, #176]	; (8009498 <_tx_thread_create+0x1e0>)
 80093e8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80093ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d129      	bne.n	8009444 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80093f0:	f3ef 8305 	mrs	r3, IPSR
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80093f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80093f8:	4b28      	ldr	r3, [pc, #160]	; (800949c <_tx_thread_create+0x1e4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009402:	d30d      	bcc.n	8009420 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8009404:	4b26      	ldr	r3, [pc, #152]	; (80094a0 <_tx_thread_create+0x1e8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800940a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800940c:	2b00      	cmp	r3, #0
 800940e:	d009      	beq.n	8009424 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009414:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8009416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941c:	63da      	str	r2, [r3, #60]	; 0x3c
 800941e:	e001      	b.n	8009424 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8009420:	2300      	movs	r3, #0
 8009422:	647b      	str	r3, [r7, #68]	; 0x44
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	f383 8810 	msr	PRIMASK, r3
}
 800942e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f8f9 	bl	8009628 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8009436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01e      	beq.n	800947a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800943c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800943e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009440:	63da      	str	r2, [r3, #60]	; 0x3c
 8009442:	e01a      	b.n	800947a <_tx_thread_create+0x1c2>
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f383 8810 	msr	PRIMASK, r3
}
 800944e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009450:	f3ef 8310 	mrs	r3, PRIMASK
 8009454:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009456:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009458:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800945a:	b672      	cpsid	i
    return(int_posture);
 800945c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800945e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8009460:	4b0d      	ldr	r3, [pc, #52]	; (8009498 <_tx_thread_create+0x1e0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3b01      	subs	r3, #1
 8009466:	4a0c      	ldr	r2, [pc, #48]	; (8009498 <_tx_thread_create+0x1e0>)
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	f383 8810 	msr	PRIMASK, r3
}
 8009474:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009476:	f000 f89d 	bl	80095b4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3748      	adds	r7, #72	; 0x48
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	08009afd 	.word	0x08009afd
 8009488:	0800951d 	.word	0x0800951d
 800948c:	54485244 	.word	0x54485244
 8009490:	200a0d94 	.word	0x200a0d94
 8009494:	200a0d90 	.word	0x200a0d90
 8009498:	200a0e20 	.word	0x200a0e20
 800949c:	2000000c 	.word	0x2000000c
 80094a0:	200a0d8c 	.word	0x200a0d8c

080094a4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80094a8:	4b12      	ldr	r3, [pc, #72]	; (80094f4 <_tx_thread_initialize+0x50>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80094ae:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <_tx_thread_initialize+0x54>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	4b11      	ldr	r3, [pc, #68]	; (80094fc <_tx_thread_initialize+0x58>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <_tx_thread_initialize+0x5c>)
 80094bc:	2220      	movs	r2, #32
 80094be:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80094c0:	2280      	movs	r2, #128	; 0x80
 80094c2:	2100      	movs	r1, #0
 80094c4:	480f      	ldr	r0, [pc, #60]	; (8009504 <_tx_thread_initialize+0x60>)
 80094c6:	f001 fa37 	bl	800a938 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80094ca:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <_tx_thread_initialize+0x64>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80094d0:	4b0e      	ldr	r3, [pc, #56]	; (800950c <_tx_thread_initialize+0x68>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80094d6:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <_tx_thread_initialize+0x6c>)
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80094dc:	4b0d      	ldr	r3, [pc, #52]	; (8009514 <_tx_thread_initialize+0x70>)
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80094e2:	4b0d      	ldr	r3, [pc, #52]	; (8009518 <_tx_thread_initialize+0x74>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80094ea:	4a0b      	ldr	r2, [pc, #44]	; (8009518 <_tx_thread_initialize+0x74>)
 80094ec:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80094ee:	bf00      	nop
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	200a0d88 	.word	0x200a0d88
 80094f8:	200a0d8c 	.word	0x200a0d8c
 80094fc:	200a0d98 	.word	0x200a0d98
 8009500:	200a0d9c 	.word	0x200a0d9c
 8009504:	200a0da0 	.word	0x200a0da0
 8009508:	200a0d90 	.word	0x200a0d90
 800950c:	200a0d94 	.word	0x200a0d94
 8009510:	200a0e20 	.word	0x200a0e20
 8009514:	200a0e24 	.word	0x200a0e24
 8009518:	200a0e28 	.word	0x200a0e28

0800951c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009522:	4b21      	ldr	r3, [pc, #132]	; (80095a8 <_tx_thread_shell_entry+0x8c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952c:	69fa      	ldr	r2, [r7, #28]
 800952e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8009534:	4b1d      	ldr	r3, [pc, #116]	; (80095ac <_tx_thread_shell_entry+0x90>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800953c:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <_tx_thread_shell_entry+0x90>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	69f8      	ldr	r0, [r7, #28]
 8009542:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009544:	f3ef 8310 	mrs	r3, PRIMASK
 8009548:	607b      	str	r3, [r7, #4]
    return(posture);
 800954a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800954c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800954e:	b672      	cpsid	i
    return(int_posture);
 8009550:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8009552:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	2201      	movs	r2, #1
 8009558:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	2201      	movs	r2, #1
 800955e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	2200      	movs	r2, #0
 8009564:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009566:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <_tx_thread_shell_entry+0x94>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	4a10      	ldr	r2, [pc, #64]	; (80095b0 <_tx_thread_shell_entry+0x94>)
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f383 8810 	msr	PRIMASK, r3
}
 800957a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800957c:	f3ef 8314 	mrs	r3, CONTROL
 8009580:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8009582:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f023 0304 	bic.w	r3, r3, #4
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f383 8814 	msr	CONTROL, r3
}
 8009598:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800959a:	69f8      	ldr	r0, [r7, #28]
 800959c:	f000 f944 	bl	8009828 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80095a0:	bf00      	nop
 80095a2:	3720      	adds	r7, #32
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	200a0d88 	.word	0x200a0d88
 80095ac:	200a0e24 	.word	0x200a0e24
 80095b0:	200a0e20 	.word	0x200a0e20

080095b4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b089      	sub	sp, #36	; 0x24
 80095b8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80095ba:	4b17      	ldr	r3, [pc, #92]	; (8009618 <_tx_thread_system_preempt_check+0x64>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d121      	bne.n	800960a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80095c6:	4b15      	ldr	r3, [pc, #84]	; (800961c <_tx_thread_system_preempt_check+0x68>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80095cc:	4b14      	ldr	r3, [pc, #80]	; (8009620 <_tx_thread_system_preempt_check+0x6c>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d017      	beq.n	800960a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80095da:	4b12      	ldr	r3, [pc, #72]	; (8009624 <_tx_thread_system_preempt_check+0x70>)
 80095dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80095e2:	f3ef 8305 	mrs	r3, IPSR
 80095e6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80095e8:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095ee:	f3ef 8310 	mrs	r3, PRIMASK
 80095f2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80095f4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80095f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80095f8:	b662      	cpsie	i
}
 80095fa:	bf00      	nop
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f383 8810 	msr	PRIMASK, r3
}
 8009606:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8009608:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800960a:	bf00      	nop
 800960c:	3724      	adds	r7, #36	; 0x24
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	200a0e20 	.word	0x200a0e20
 800961c:	200a0d88 	.word	0x200a0d88
 8009620:	200a0d8c 	.word	0x200a0d8c
 8009624:	e000ed04 	.word	0xe000ed04

08009628 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b096      	sub	sp, #88	; 0x58
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009630:	f3ef 8310 	mrs	r3, PRIMASK
 8009634:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8009638:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800963a:	b672      	cpsid	i
    return(int_posture);
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800963e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	334c      	adds	r3, #76	; 0x4c
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fb91 	bl	8009d74 <_tx_timer_system_deactivate>
 8009652:	e002      	b.n	800965a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800965a:	4b6c      	ldr	r3, [pc, #432]	; (800980c <_tx_thread_system_resume+0x1e4>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3b01      	subs	r3, #1
 8009660:	4a6a      	ldr	r2, [pc, #424]	; (800980c <_tx_thread_system_resume+0x1e4>)
 8009662:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	2b00      	cmp	r3, #0
 800966a:	f040 8083 	bne.w	8009774 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 8097 	beq.w	80097a6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967c:	2b00      	cmp	r3, #0
 800967e:	d172      	bne.n	8009766 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800968c:	4a60      	ldr	r2, [pc, #384]	; (8009810 <_tx_thread_system_resume+0x1e8>)
 800968e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009694:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8009696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d154      	bne.n	8009746 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800969c:	495c      	ldr	r1, [pc, #368]	; (8009810 <_tx_thread_system_resume+0x1e8>)
 800969e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80096b2:	2201      	movs	r2, #1
 80096b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ba:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80096bc:	4b55      	ldr	r3, [pc, #340]	; (8009814 <_tx_thread_system_resume+0x1ec>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c2:	4313      	orrs	r3, r2
 80096c4:	4a53      	ldr	r2, [pc, #332]	; (8009814 <_tx_thread_system_resume+0x1ec>)
 80096c6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80096c8:	4b53      	ldr	r3, [pc, #332]	; (8009818 <_tx_thread_system_resume+0x1f0>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d269      	bcs.n	80097a6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80096d2:	4a51      	ldr	r2, [pc, #324]	; (8009818 <_tx_thread_system_resume+0x1f0>)
 80096d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80096d8:	4b50      	ldr	r3, [pc, #320]	; (800981c <_tx_thread_system_resume+0x1f4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80096de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80096e4:	4a4d      	ldr	r2, [pc, #308]	; (800981c <_tx_thread_system_resume+0x1f4>)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e05c      	b.n	80097a6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80096ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d257      	bcs.n	80097a6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80096f6:	4a49      	ldr	r2, [pc, #292]	; (800981c <_tx_thread_system_resume+0x1f4>)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	f383 8810 	msr	PRIMASK, r3
}
 8009706:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009708:	4b40      	ldr	r3, [pc, #256]	; (800980c <_tx_thread_system_resume+0x1e4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800970e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d174      	bne.n	80097fe <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009714:	4b42      	ldr	r3, [pc, #264]	; (8009820 <_tx_thread_system_resume+0x1f8>)
 8009716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800971a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800971c:	f3ef 8305 	mrs	r3, IPSR
 8009720:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10c      	bne.n	8009742 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009728:	f3ef 8310 	mrs	r3, PRIMASK
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8009730:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009732:	b662      	cpsie	i
}
 8009734:	bf00      	nop
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f383 8810 	msr	PRIMASK, r3
}
 8009740:	bf00      	nop
}
 8009742:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8009744:	e05b      	b.n	80097fe <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8009746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800974c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8009752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800975c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009762:	621a      	str	r2, [r3, #32]
 8009764:	e01f      	b.n	80097a6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2203      	movs	r2, #3
 8009770:	631a      	str	r2, [r3, #48]	; 0x30
 8009772:	e018      	b.n	80097a6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009778:	2b01      	cmp	r3, #1
 800977a:	d014      	beq.n	80097a6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	2b02      	cmp	r3, #2
 8009782:	d010      	beq.n	80097a6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009788:	2b00      	cmp	r3, #0
 800978a:	d106      	bne.n	800979a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	631a      	str	r2, [r3, #48]	; 0x30
 8009798:	e005      	b.n	80097a6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2203      	movs	r2, #3
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80097a6:	4b1f      	ldr	r3, [pc, #124]	; (8009824 <_tx_thread_system_resume+0x1fc>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80097ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	f383 8810 	msr	PRIMASK, r3
}
 80097b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80097b8:	4b18      	ldr	r3, [pc, #96]	; (800981c <_tx_thread_system_resume+0x1f4>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097be:	429a      	cmp	r2, r3
 80097c0:	d020      	beq.n	8009804 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80097c2:	4b12      	ldr	r3, [pc, #72]	; (800980c <_tx_thread_system_resume+0x1e4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80097c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d11a      	bne.n	8009804 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80097ce:	4b14      	ldr	r3, [pc, #80]	; (8009820 <_tx_thread_system_resume+0x1f8>)
 80097d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097d6:	f3ef 8305 	mrs	r3, IPSR
 80097da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80097dc:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10f      	bne.n	8009802 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097e2:	f3ef 8310 	mrs	r3, PRIMASK
 80097e6:	613b      	str	r3, [r7, #16]
    return(posture);
 80097e8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80097ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80097ec:	b662      	cpsie	i
}
 80097ee:	bf00      	nop
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f383 8810 	msr	PRIMASK, r3
}
 80097fa:	bf00      	nop
}
 80097fc:	e001      	b.n	8009802 <_tx_thread_system_resume+0x1da>
                                return;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <_tx_thread_system_resume+0x1dc>
 8009802:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8009804:	3758      	adds	r7, #88	; 0x58
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	200a0e20 	.word	0x200a0e20
 8009810:	200a0da0 	.word	0x200a0da0
 8009814:	200a0d98 	.word	0x200a0d98
 8009818:	200a0d9c 	.word	0x200a0d9c
 800981c:	200a0d8c 	.word	0x200a0d8c
 8009820:	e000ed04 	.word	0xe000ed04
 8009824:	200a0d88 	.word	0x200a0d88

08009828 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b09e      	sub	sp, #120	; 0x78
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009830:	4b81      	ldr	r3, [pc, #516]	; (8009a38 <_tx_thread_system_suspend+0x210>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009836:	f3ef 8310 	mrs	r3, PRIMASK
 800983a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800983c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800983e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009840:	b672      	cpsid	i
    return(int_posture);
 8009842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009844:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800984a:	429a      	cmp	r2, r3
 800984c:	d112      	bne.n	8009874 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009852:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8009854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d008      	beq.n	800986c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800985a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009860:	d004      	beq.n	800986c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	334c      	adds	r3, #76	; 0x4c
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fa22 	bl	8009cb0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	4a72      	ldr	r2, [pc, #456]	; (8009a3c <_tx_thread_system_suspend+0x214>)
 8009872:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009874:	4b72      	ldr	r3, [pc, #456]	; (8009a40 <_tx_thread_system_suspend+0x218>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3b01      	subs	r3, #1
 800987a:	4a71      	ldr	r2, [pc, #452]	; (8009a40 <_tx_thread_system_suspend+0x218>)
 800987c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	2b01      	cmp	r3, #1
 8009884:	f040 80a6 	bne.w	80099d4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800989a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d015      	beq.n	80098ce <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80098a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098ac:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80098ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098b2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80098b4:	4a63      	ldr	r2, [pc, #396]	; (8009a44 <_tx_thread_system_suspend+0x21c>)
 80098b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d157      	bne.n	8009972 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80098c2:	4960      	ldr	r1, [pc, #384]	; (8009a44 <_tx_thread_system_suspend+0x21c>)
 80098c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80098cc:	e051      	b.n	8009972 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80098ce:	4a5d      	ldr	r2, [pc, #372]	; (8009a44 <_tx_thread_system_suspend+0x21c>)
 80098d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098d2:	2100      	movs	r1, #0
 80098d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80098d8:	2201      	movs	r2, #1
 80098da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80098e2:	4b59      	ldr	r3, [pc, #356]	; (8009a48 <_tx_thread_system_suspend+0x220>)
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098e8:	43db      	mvns	r3, r3
 80098ea:	4013      	ands	r3, r2
 80098ec:	4a56      	ldr	r2, [pc, #344]	; (8009a48 <_tx_thread_system_suspend+0x220>)
 80098ee:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80098f0:	2300      	movs	r3, #0
 80098f2:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80098f4:	4b54      	ldr	r3, [pc, #336]	; (8009a48 <_tx_thread_system_suspend+0x220>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80098fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d12b      	bne.n	8009958 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009900:	4b52      	ldr	r3, [pc, #328]	; (8009a4c <_tx_thread_system_suspend+0x224>)
 8009902:	2220      	movs	r2, #32
 8009904:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8009906:	4b52      	ldr	r3, [pc, #328]	; (8009a50 <_tx_thread_system_suspend+0x228>)
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800990e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009912:	f383 8810 	msr	PRIMASK, r3
}
 8009916:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009918:	4b49      	ldr	r3, [pc, #292]	; (8009a40 <_tx_thread_system_suspend+0x218>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800991e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009920:	2b00      	cmp	r3, #0
 8009922:	f040 8081 	bne.w	8009a28 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009926:	4b4b      	ldr	r3, [pc, #300]	; (8009a54 <_tx_thread_system_suspend+0x22c>)
 8009928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800992e:	f3ef 8305 	mrs	r3, IPSR
 8009932:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8009934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10c      	bne.n	8009954 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800993a:	f3ef 8310 	mrs	r3, PRIMASK
 800993e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8009940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8009942:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009944:	b662      	cpsie	i
}
 8009946:	bf00      	nop
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800994c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994e:	f383 8810 	msr	PRIMASK, r3
}
 8009952:	bf00      	nop
}
 8009954:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8009956:	e067      	b.n	8009a28 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8009958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800995a:	fa93 f3a3 	rbit	r3, r3
 800995e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009962:	fab3 f383 	clz	r3, r3
 8009966:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8009968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800996a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800996c:	4413      	add	r3, r2
 800996e:	4a37      	ldr	r2, [pc, #220]	; (8009a4c <_tx_thread_system_suspend+0x224>)
 8009970:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8009972:	4b37      	ldr	r3, [pc, #220]	; (8009a50 <_tx_thread_system_suspend+0x228>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	429a      	cmp	r2, r3
 800997a:	d12b      	bne.n	80099d4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800997c:	4b33      	ldr	r3, [pc, #204]	; (8009a4c <_tx_thread_system_suspend+0x224>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a30      	ldr	r2, [pc, #192]	; (8009a44 <_tx_thread_system_suspend+0x21c>)
 8009982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009986:	4a32      	ldr	r2, [pc, #200]	; (8009a50 <_tx_thread_system_suspend+0x228>)
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800998c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	f383 8810 	msr	PRIMASK, r3
}
 8009994:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009996:	4b2a      	ldr	r3, [pc, #168]	; (8009a40 <_tx_thread_system_suspend+0x218>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800999c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d144      	bne.n	8009a2c <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80099a2:	4b2c      	ldr	r3, [pc, #176]	; (8009a54 <_tx_thread_system_suspend+0x22c>)
 80099a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099aa:	f3ef 8305 	mrs	r3, IPSR
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10c      	bne.n	80099d0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099b6:	f3ef 8310 	mrs	r3, PRIMASK
 80099ba:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80099c0:	b662      	cpsie	i
}
 80099c2:	bf00      	nop
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	f383 8810 	msr	PRIMASK, r3
}
 80099ce:	bf00      	nop
}
 80099d0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80099d2:	e02b      	b.n	8009a2c <_tx_thread_system_suspend+0x204>
 80099d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	f383 8810 	msr	PRIMASK, r3
}
 80099de:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80099e0:	4b1b      	ldr	r3, [pc, #108]	; (8009a50 <_tx_thread_system_suspend+0x228>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d022      	beq.n	8009a30 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80099ea:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <_tx_thread_system_suspend+0x218>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 80099f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d11c      	bne.n	8009a30 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80099f6:	4b17      	ldr	r3, [pc, #92]	; (8009a54 <_tx_thread_system_suspend+0x22c>)
 80099f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099fe:	f3ef 8305 	mrs	r3, IPSR
 8009a02:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009a04:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10c      	bne.n	8009a24 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009a0e:	617b      	str	r3, [r7, #20]
    return(posture);
 8009a10:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8009a12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009a14:	b662      	cpsie	i
}
 8009a16:	bf00      	nop
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f383 8810 	msr	PRIMASK, r3
}
 8009a22:	bf00      	nop
}
 8009a24:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8009a26:	e003      	b.n	8009a30 <_tx_thread_system_suspend+0x208>
                return;
 8009a28:	bf00      	nop
 8009a2a:	e002      	b.n	8009a32 <_tx_thread_system_suspend+0x20a>
            return;
 8009a2c:	bf00      	nop
 8009a2e:	e000      	b.n	8009a32 <_tx_thread_system_suspend+0x20a>
    return;
 8009a30:	bf00      	nop
}
 8009a32:	3778      	adds	r7, #120	; 0x78
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	200a0d88 	.word	0x200a0d88
 8009a3c:	200a138c 	.word	0x200a138c
 8009a40:	200a0e20 	.word	0x200a0e20
 8009a44:	200a0da0 	.word	0x200a0da0
 8009a48:	200a0d98 	.word	0x200a0d98
 8009a4c:	200a0d9c 	.word	0x200a0d9c
 8009a50:	200a0d8c 	.word	0x200a0d8c
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009a5e:	4b21      	ldr	r3, [pc, #132]	; (8009ae4 <_tx_thread_time_slice+0x8c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a64:	f3ef 8310 	mrs	r3, PRIMASK
 8009a68:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009a6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a6e:	b672      	cpsid	i
    return(int_posture);
 8009a70:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8009a72:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009a74:	4b1c      	ldr	r3, [pc, #112]	; (8009ae8 <_tx_thread_time_slice+0x90>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d024      	beq.n	8009aca <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d120      	bne.n	8009aca <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	69da      	ldr	r2, [r3, #28]
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	4a15      	ldr	r2, [pc, #84]	; (8009aec <_tx_thread_time_slice+0x94>)
 8009a96:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d013      	beq.n	8009aca <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d10d      	bne.n	8009aca <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	6a12      	ldr	r2, [r2, #32]
 8009ab6:	490e      	ldr	r1, [pc, #56]	; (8009af0 <_tx_thread_time_slice+0x98>)
 8009ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009abc:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <_tx_thread_time_slice+0x9c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a0b      	ldr	r2, [pc, #44]	; (8009af0 <_tx_thread_time_slice+0x98>)
 8009ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac6:	4a0c      	ldr	r2, [pc, #48]	; (8009af8 <_tx_thread_time_slice+0xa0>)
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f383 8810 	msr	PRIMASK, r3
}
 8009ad4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8009ad6:	bf00      	nop
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	200a0d88 	.word	0x200a0d88
 8009ae8:	200a0e30 	.word	0x200a0e30
 8009aec:	200a138c 	.word	0x200a138c
 8009af0:	200a0da0 	.word	0x200a0da0
 8009af4:	200a0d9c 	.word	0x200a0d9c
 8009af8:	200a0d8c 	.word	0x200a0d8c

08009afc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08a      	sub	sp, #40	; 0x28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b08:	f3ef 8310 	mrs	r3, PRIMASK
 8009b0c:	617b      	str	r3, [r7, #20]
    return(posture);
 8009b0e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009b10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b12:	b672      	cpsid	i
    return(int_posture);
 8009b14:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009b16:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d10e      	bne.n	8009b3e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8009b20:	4b13      	ldr	r3, [pc, #76]	; (8009b70 <_tx_thread_timeout+0x74>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	4a12      	ldr	r2, [pc, #72]	; (8009b70 <_tx_thread_timeout+0x74>)
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f383 8810 	msr	PRIMASK, r3
}
 8009b34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b38:	f7ff fd76 	bl	8009628 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009b3c:	e013      	b.n	8009b66 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b42:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b4a:	61bb      	str	r3, [r7, #24]
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f383 8810 	msr	PRIMASK, r3
}
 8009b56:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	69b9      	ldr	r1, [r7, #24]
 8009b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b64:	4798      	blx	r3
}
 8009b66:	bf00      	nop
 8009b68:	3728      	adds	r7, #40	; 0x28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	200a0e20 	.word	0x200a0e20

08009b74 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b7e:	607b      	str	r3, [r7, #4]
    return(posture);
 8009b80:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009b82:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b84:	b672      	cpsid	i
    return(int_posture);
 8009b86:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8009b88:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8009b8a:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <_tx_timer_expiration_process+0x3c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	4a07      	ldr	r2, [pc, #28]	; (8009bb0 <_tx_timer_expiration_process+0x3c>)
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f383 8810 	msr	PRIMASK, r3
}
 8009b9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8009ba0:	4804      	ldr	r0, [pc, #16]	; (8009bb4 <_tx_timer_expiration_process+0x40>)
 8009ba2:	f7ff fd41 	bl	8009628 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	200a0e20 	.word	0x200a0e20
 8009bb4:	200a0ed0 	.word	0x200a0ed0

08009bb8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b089      	sub	sp, #36	; 0x24
 8009bbc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8009bbe:	4b28      	ldr	r3, [pc, #160]	; (8009c60 <_tx_timer_initialize+0xa8>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8009bc4:	4b27      	ldr	r3, [pc, #156]	; (8009c64 <_tx_timer_initialize+0xac>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009bca:	4b27      	ldr	r3, [pc, #156]	; (8009c68 <_tx_timer_initialize+0xb0>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009bd0:	4b26      	ldr	r3, [pc, #152]	; (8009c6c <_tx_timer_initialize+0xb4>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8009bd6:	4b26      	ldr	r3, [pc, #152]	; (8009c70 <_tx_timer_initialize+0xb8>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009bdc:	2280      	movs	r2, #128	; 0x80
 8009bde:	2100      	movs	r1, #0
 8009be0:	4824      	ldr	r0, [pc, #144]	; (8009c74 <_tx_timer_initialize+0xbc>)
 8009be2:	f000 fea9 	bl	800a938 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8009be6:	4b24      	ldr	r3, [pc, #144]	; (8009c78 <_tx_timer_initialize+0xc0>)
 8009be8:	4a22      	ldr	r2, [pc, #136]	; (8009c74 <_tx_timer_initialize+0xbc>)
 8009bea:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009bec:	4b23      	ldr	r3, [pc, #140]	; (8009c7c <_tx_timer_initialize+0xc4>)
 8009bee:	4a21      	ldr	r2, [pc, #132]	; (8009c74 <_tx_timer_initialize+0xbc>)
 8009bf0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8009bf2:	4b23      	ldr	r3, [pc, #140]	; (8009c80 <_tx_timer_initialize+0xc8>)
 8009bf4:	4a23      	ldr	r2, [pc, #140]	; (8009c84 <_tx_timer_initialize+0xcc>)
 8009bf6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009bf8:	4b21      	ldr	r3, [pc, #132]	; (8009c80 <_tx_timer_initialize+0xc8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4a20      	ldr	r2, [pc, #128]	; (8009c80 <_tx_timer_initialize+0xc8>)
 8009c00:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8009c02:	4b21      	ldr	r3, [pc, #132]	; (8009c88 <_tx_timer_initialize+0xd0>)
 8009c04:	4a21      	ldr	r2, [pc, #132]	; (8009c8c <_tx_timer_initialize+0xd4>)
 8009c06:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009c08:	4b21      	ldr	r3, [pc, #132]	; (8009c90 <_tx_timer_initialize+0xd8>)
 8009c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c0e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8009c10:	4b20      	ldr	r3, [pc, #128]	; (8009c94 <_tx_timer_initialize+0xdc>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8009c16:	4b1c      	ldr	r3, [pc, #112]	; (8009c88 <_tx_timer_initialize+0xd0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a1d      	ldr	r2, [pc, #116]	; (8009c90 <_tx_timer_initialize+0xd8>)
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	491d      	ldr	r1, [pc, #116]	; (8009c94 <_tx_timer_initialize+0xdc>)
 8009c20:	6809      	ldr	r1, [r1, #0]
 8009c22:	481c      	ldr	r0, [pc, #112]	; (8009c94 <_tx_timer_initialize+0xdc>)
 8009c24:	6800      	ldr	r0, [r0, #0]
 8009c26:	2400      	movs	r4, #0
 8009c28:	9405      	str	r4, [sp, #20]
 8009c2a:	2400      	movs	r4, #0
 8009c2c:	9404      	str	r4, [sp, #16]
 8009c2e:	9003      	str	r0, [sp, #12]
 8009c30:	9102      	str	r1, [sp, #8]
 8009c32:	9201      	str	r2, [sp, #4]
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	4b18      	ldr	r3, [pc, #96]	; (8009c98 <_tx_timer_initialize+0xe0>)
 8009c38:	4a18      	ldr	r2, [pc, #96]	; (8009c9c <_tx_timer_initialize+0xe4>)
 8009c3a:	4919      	ldr	r1, [pc, #100]	; (8009ca0 <_tx_timer_initialize+0xe8>)
 8009c3c:	4819      	ldr	r0, [pc, #100]	; (8009ca4 <_tx_timer_initialize+0xec>)
 8009c3e:	f7ff fb3b 	bl	80092b8 <_tx_thread_create>
 8009c42:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e5      	bne.n	8009c16 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009c4a:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <_tx_timer_initialize+0xf0>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009c50:	4b16      	ldr	r3, [pc, #88]	; (8009cac <_tx_timer_initialize+0xf4>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd90      	pop	{r4, r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	200a0e2c 	.word	0x200a0e2c
 8009c64:	200a138c 	.word	0x200a138c
 8009c68:	200a0e30 	.word	0x200a0e30
 8009c6c:	200a0ec0 	.word	0x200a0ec0
 8009c70:	200a0ecc 	.word	0x200a0ecc
 8009c74:	200a0e34 	.word	0x200a0e34
 8009c78:	200a0eb4 	.word	0x200a0eb4
 8009c7c:	200a0ebc 	.word	0x200a0ebc
 8009c80:	200a0eb8 	.word	0x200a0eb8
 8009c84:	200a0eb0 	.word	0x200a0eb0
 8009c88:	200a0f80 	.word	0x200a0f80
 8009c8c:	200a0f8c 	.word	0x200a0f8c
 8009c90:	200a0f84 	.word	0x200a0f84
 8009c94:	200a0f88 	.word	0x200a0f88
 8009c98:	4154494d 	.word	0x4154494d
 8009c9c:	08009de5 	.word	0x08009de5
 8009ca0:	0800a9e8 	.word	0x0800a9e8
 8009ca4:	200a0ed0 	.word	0x200a0ed0
 8009ca8:	200a0ec4 	.word	0x200a0ec4
 8009cac:	200a0ec8 	.word	0x200a0ec8

08009cb0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b089      	sub	sp, #36	; 0x24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d04a      	beq.n	8009d5a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d046      	beq.n	8009d5a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d142      	bne.n	8009d5a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2b20      	cmp	r3, #32
 8009cd8:	d902      	bls.n	8009ce0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8009cda:	231f      	movs	r3, #31
 8009cdc:	61bb      	str	r3, [r7, #24]
 8009cde:	e002      	b.n	8009ce6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8009ce6:	4b20      	ldr	r3, [pc, #128]	; (8009d68 <_tx_timer_system_activate+0xb8>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009cf2:	4b1e      	ldr	r3, [pc, #120]	; (8009d6c <_tx_timer_system_activate+0xbc>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d30b      	bcc.n	8009d14 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <_tx_timer_system_activate+0xbc>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	109b      	asrs	r3, r3, #2
 8009d06:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009d08:	4b19      	ldr	r3, [pc, #100]	; (8009d70 <_tx_timer_system_activate+0xc0>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e011      	b.n	8009d54 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8009d5a:	bf00      	nop
 8009d5c:	3724      	adds	r7, #36	; 0x24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	200a0ebc 	.word	0x200a0ebc
 8009d6c:	200a0eb8 	.word	0x200a0eb8
 8009d70:	200a0eb4 	.word	0x200a0eb4

08009d74 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d026      	beq.n	8009dd6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d108      	bne.n	8009da8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d117      	bne.n	8009dd0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e013      	b.n	8009dd0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	695b      	ldr	r3, [r3, #20]
 8009dac:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d105      	bne.n	8009dd0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	619a      	str	r2, [r3, #24]
    }
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b098      	sub	sp, #96	; 0x60
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009dec:	2300      	movs	r3, #0
 8009dee:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a73      	ldr	r2, [pc, #460]	; (8009fc0 <_tx_timer_thread_entry+0x1dc>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	f040 80de 	bne.w	8009fb6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfe:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8009e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e04:	b672      	cpsid	i
    return(int_posture);
 8009e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8009e08:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8009e0a:	4b6e      	ldr	r3, [pc, #440]	; (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f107 020c 	add.w	r2, r7, #12
 8009e1e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8009e20:	4b68      	ldr	r3, [pc, #416]	; (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8009e28:	4b66      	ldr	r3, [pc, #408]	; (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4a65      	ldr	r2, [pc, #404]	; (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e30:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8009e32:	4b64      	ldr	r3, [pc, #400]	; (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	4b64      	ldr	r3, [pc, #400]	; (8009fc8 <_tx_timer_thread_entry+0x1e4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d103      	bne.n	8009e46 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8009e3e:	4b63      	ldr	r3, [pc, #396]	; (8009fcc <_tx_timer_thread_entry+0x1e8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a60      	ldr	r2, [pc, #384]	; (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e44:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8009e46:	4b62      	ldr	r3, [pc, #392]	; (8009fd0 <_tx_timer_thread_entry+0x1ec>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e4e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	f383 8810 	msr	PRIMASK, r3
}
 8009e56:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e58:	f3ef 8310 	mrs	r3, PRIMASK
 8009e5c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e62:	b672      	cpsid	i
    return(int_posture);
 8009e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8009e66:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8009e68:	e07f      	b.n	8009f6a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8009e78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d102      	bne.n	8009e86 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	e00e      	b.n	8009ea4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8009e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e90:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e96:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8009e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e9a:	f107 020c 	add.w	r2, r7, #12
 8009e9e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8009ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ea2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b20      	cmp	r3, #32
 8009eaa:	d911      	bls.n	8009ed0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8009eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8009eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ebe:	f107 0208 	add.w	r2, r7, #8
 8009ec2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8009ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ec8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8009eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ecc:	60bb      	str	r3, [r7, #8]
 8009ece:	e01a      	b.n	8009f06 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8009ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8009ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8009edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8009ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d009      	beq.n	8009f00 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eee:	f107 0208 	add.w	r2, r7, #8
 8009ef2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8009ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ef8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8009efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009efc:	60bb      	str	r3, [r7, #8]
 8009efe:	e002      	b.n	8009f06 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8009f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f02:	2200      	movs	r2, #0
 8009f04:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8009f06:	4a33      	ldr	r2, [pc, #204]	; (8009fd4 <_tx_timer_thread_entry+0x1f0>)
 8009f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f12:	f383 8810 	msr	PRIMASK, r3
}
 8009f16:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8009f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8009f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f20:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f22:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f24:	f3ef 8310 	mrs	r3, PRIMASK
 8009f28:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f2e:	b672      	cpsid	i
    return(int_posture);
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009f32:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8009f34:	4b27      	ldr	r3, [pc, #156]	; (8009fd4 <_tx_timer_thread_entry+0x1f0>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d105      	bne.n	8009f4e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8009f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f44:	2200      	movs	r2, #0
 8009f46:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8009f48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009f4a:	f7ff feb1 	bl	8009cb0 <_tx_timer_system_activate>
 8009f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f383 8810 	msr	PRIMASK, r3
}
 8009f58:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f5e:	623b      	str	r3, [r7, #32]
    return(posture);
 8009f60:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009f62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f64:	b672      	cpsid	i
    return(int_posture);
 8009f66:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009f68:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f47f af7c 	bne.w	8009e6a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8009f72:	4b17      	ldr	r3, [pc, #92]	; (8009fd0 <_tx_timer_thread_entry+0x1ec>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d116      	bne.n	8009fa8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8009f7a:	4b17      	ldr	r3, [pc, #92]	; (8009fd8 <_tx_timer_thread_entry+0x1f4>)
 8009f7c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f80:	2203      	movs	r2, #3
 8009f82:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f86:	2201      	movs	r2, #1
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8009f8a:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <_tx_timer_thread_entry+0x1f8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	4a12      	ldr	r2, [pc, #72]	; (8009fdc <_tx_timer_thread_entry+0x1f8>)
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f96:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f383 8810 	msr	PRIMASK, r3
}
 8009f9e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009fa0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009fa2:	f7ff fc41 	bl	8009828 <_tx_thread_system_suspend>
 8009fa6:	e728      	b.n	8009dfa <_tx_timer_thread_entry+0x16>
 8009fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009faa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f383 8810 	msr	PRIMASK, r3
}
 8009fb2:	bf00      	nop
            TX_DISABLE
 8009fb4:	e721      	b.n	8009dfa <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8009fb6:	bf00      	nop
 8009fb8:	3760      	adds	r7, #96	; 0x60
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	4154494d 	.word	0x4154494d
 8009fc4:	200a0ebc 	.word	0x200a0ebc
 8009fc8:	200a0eb8 	.word	0x200a0eb8
 8009fcc:	200a0eb4 	.word	0x200a0eb4
 8009fd0:	200a0ec0 	.word	0x200a0ec0
 8009fd4:	200a0ecc 	.word	0x200a0ecc
 8009fd8:	200a0ed0 	.word	0x200a0ed0
 8009fdc:	200a0e20 	.word	0x200a0e20

08009fe0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08a      	sub	sp, #40	; 0x28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d102      	bne.n	8009ffe <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8009ffc:	e029      	b.n	800a052 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a2d      	ldr	r2, [pc, #180]	; (800a0b8 <_txe_byte_allocate+0xd8>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d002      	beq.n	800a00e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a008:	2302      	movs	r3, #2
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
 800a00c:	e021      	b.n	800a052 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a014:	2303      	movs	r3, #3
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
 800a018:	e01b      	b.n	800a052 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a020:	2305      	movs	r3, #5
 800a022:	627b      	str	r3, [r7, #36]	; 0x24
 800a024:	e015      	b.n	800a052 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d902      	bls.n	800a036 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a030:	2305      	movs	r3, #5
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
 800a034:	e00d      	b.n	800a052 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00a      	beq.n	800a052 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a03c:	f3ef 8305 	mrs	r3, IPSR
 800a040:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800a042:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a044:	4b1d      	ldr	r3, [pc, #116]	; (800a0bc <_txe_byte_allocate+0xdc>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4313      	orrs	r3, r2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a04e:	2304      	movs	r3, #4
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	d108      	bne.n	800a06a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a058:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <_txe_byte_allocate+0xe0>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	4a18      	ldr	r2, [pc, #96]	; (800a0c4 <_txe_byte_allocate+0xe4>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d101      	bne.n	800a06a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a066:	2313      	movs	r3, #19
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d114      	bne.n	800a09a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a070:	f3ef 8305 	mrs	r3, IPSR
 800a074:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a076:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a078:	4b10      	ldr	r3, [pc, #64]	; (800a0bc <_txe_byte_allocate+0xdc>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a082:	f3ef 8305 	mrs	r3, IPSR
 800a086:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a088:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a08a:	4b0c      	ldr	r3, [pc, #48]	; (800a0bc <_txe_byte_allocate+0xdc>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4313      	orrs	r3, r2
 800a090:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a094:	d201      	bcs.n	800a09a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a096:	2313      	movs	r3, #19
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7fe fad8 	bl	800865c <_tx_byte_allocate>
 800a0ac:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3728      	adds	r7, #40	; 0x28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	42595445 	.word	0x42595445
 800a0bc:	2000000c 	.word	0x2000000c
 800a0c0:	200a0d88 	.word	0x200a0d88
 800a0c4:	200a0ed0 	.word	0x200a0ed0

0800a0c8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b092      	sub	sp, #72	; 0x48
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a0e4:	e075      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800a0e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e8:	2b34      	cmp	r3, #52	; 0x34
 800a0ea:	d002      	beq.n	800a0f2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	647b      	str	r3, [r7, #68]	; 0x44
 800a0f0:	e06f      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0f2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a0fa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0fc:	b672      	cpsid	i
    return(int_posture);
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a100:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a102:	4b3b      	ldr	r3, [pc, #236]	; (800a1f0 <_txe_byte_pool_create+0x128>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3301      	adds	r3, #1
 800a108:	4a39      	ldr	r2, [pc, #228]	; (800a1f0 <_txe_byte_pool_create+0x128>)
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	f383 8810 	msr	PRIMASK, r3
}
 800a116:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800a118:	4b36      	ldr	r3, [pc, #216]	; (800a1f4 <_txe_byte_pool_create+0x12c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a11e:	2300      	movs	r3, #0
 800a120:	643b      	str	r3, [r7, #64]	; 0x40
 800a122:	e009      	b.n	800a138 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a128:	429a      	cmp	r2, r3
 800a12a:	d00b      	beq.n	800a144 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800a12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a134:	3301      	adds	r3, #1
 800a136:	643b      	str	r3, [r7, #64]	; 0x40
 800a138:	4b2f      	ldr	r3, [pc, #188]	; (800a1f8 <_txe_byte_pool_create+0x130>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a13e:	429a      	cmp	r2, r3
 800a140:	d3f0      	bcc.n	800a124 <_txe_byte_pool_create+0x5c>
 800a142:	e000      	b.n	800a146 <_txe_byte_pool_create+0x7e>
                break;
 800a144:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a146:	f3ef 8310 	mrs	r3, PRIMASK
 800a14a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a14c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a14e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a150:	b672      	cpsid	i
    return(int_posture);
 800a152:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a154:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a156:	4b26      	ldr	r3, [pc, #152]	; (800a1f0 <_txe_byte_pool_create+0x128>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	4a24      	ldr	r2, [pc, #144]	; (800a1f0 <_txe_byte_pool_create+0x128>)
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	f383 8810 	msr	PRIMASK, r3
}
 800a16a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a16c:	f7ff fa22 	bl	80095b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a174:	429a      	cmp	r2, r3
 800a176:	d102      	bne.n	800a17e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800a178:	2302      	movs	r3, #2
 800a17a:	647b      	str	r3, [r7, #68]	; 0x44
 800a17c:	e029      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800a184:	2303      	movs	r3, #3
 800a186:	647b      	str	r3, [r7, #68]	; 0x44
 800a188:	e023      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b63      	cmp	r3, #99	; 0x63
 800a18e:	d802      	bhi.n	800a196 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800a190:	2305      	movs	r3, #5
 800a192:	647b      	str	r3, [r7, #68]	; 0x44
 800a194:	e01d      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a196:	4b19      	ldr	r3, [pc, #100]	; (800a1fc <_txe_byte_pool_create+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19e:	4a18      	ldr	r2, [pc, #96]	; (800a200 <_txe_byte_pool_create+0x138>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d101      	bne.n	800a1a8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a1a4:	2313      	movs	r3, #19
 800a1a6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a1a8:	f3ef 8305 	mrs	r3, IPSR
 800a1ac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a1ae:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a1b0:	4b14      	ldr	r3, [pc, #80]	; (800a204 <_txe_byte_pool_create+0x13c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00b      	beq.n	800a1d2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a1ba:	f3ef 8305 	mrs	r3, IPSR
 800a1be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a1c0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a1c2:	4b10      	ldr	r3, [pc, #64]	; (800a204 <_txe_byte_pool_create+0x13c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a1cc:	d201      	bcs.n	800a1d2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a1ce:	2313      	movs	r3, #19
 800a1d0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d106      	bne.n	800a1e6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	68b9      	ldr	r1, [r7, #8]
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7fe fb7e 	bl	80088e0 <_tx_byte_pool_create>
 800a1e4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a1e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3748      	adds	r7, #72	; 0x48
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	200a0e20 	.word	0x200a0e20
 800a1f4:	200a0d78 	.word	0x200a0d78
 800a1f8:	200a0d7c 	.word	0x200a0d7c
 800a1fc:	200a0d88 	.word	0x200a0d88
 800a200:	200a0ed0 	.word	0x200a0ed0
 800a204:	2000000c 	.word	0x2000000c

0800a208 <_txe_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_release(VOID *memory_ptr)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]

    /* First check the supplied memory pointer.  */
    if (memory_ptr == TX_NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d102      	bne.n	800a220 <_txe_byte_release+0x18>
    {

        /* The byte memory pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 800a21a:	2303      	movs	r3, #3
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	e01d      	b.n	800a25c <_txe_byte_release+0x54>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a220:	4b14      	ldr	r3, [pc, #80]	; (800a274 <_txe_byte_release+0x6c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	4a13      	ldr	r2, [pc, #76]	; (800a278 <_txe_byte_release+0x70>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d101      	bne.n	800a232 <_txe_byte_release+0x2a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a22e:	2313      	movs	r3, #19
 800a230:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a232:	f3ef 8305 	mrs	r3, IPSR
 800a236:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a238:	68fa      	ldr	r2, [r7, #12]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a23a:	4b10      	ldr	r3, [pc, #64]	; (800a27c <_txe_byte_release+0x74>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4313      	orrs	r3, r2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00b      	beq.n	800a25c <_txe_byte_release+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a244:	f3ef 8305 	mrs	r3, IPSR
 800a248:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800a24a:	68ba      	ldr	r2, [r7, #8]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a24c:	4b0b      	ldr	r3, [pc, #44]	; (800a27c <_txe_byte_release+0x74>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4313      	orrs	r3, r2
 800a252:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a256:	d201      	bcs.n	800a25c <_txe_byte_release+0x54>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a258:	2313      	movs	r3, #19
 800a25a:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d103      	bne.n	800a26a <_txe_byte_release+0x62>
    {

        /* Call actual byte release function.  */
        status =  _tx_byte_release(memory_ptr);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7fe fce0 	bl	8008c28 <_tx_byte_release>
 800a268:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800a26a:	697b      	ldr	r3, [r7, #20]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	200a0d88 	.word	0x200a0d88
 800a278:	200a0ed0 	.word	0x200a0ed0
 800a27c:	2000000c 	.word	0x2000000c

0800a280 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b092      	sub	sp, #72	; 0x48
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a28c:	2300      	movs	r3, #0
 800a28e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d102      	bne.n	800a29c <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a296:	2306      	movs	r3, #6
 800a298:	647b      	str	r3, [r7, #68]	; 0x44
 800a29a:	e069      	b.n	800a370 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b24      	cmp	r3, #36	; 0x24
 800a2a0:	d002      	beq.n	800a2a8 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a2a2:	2306      	movs	r3, #6
 800a2a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a2a6:	e063      	b.n	800a370 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2b2:	b672      	cpsid	i
    return(int_posture);
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a2b6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a2b8:	4b34      	ldr	r3, [pc, #208]	; (800a38c <_txe_event_flags_create+0x10c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	4a33      	ldr	r2, [pc, #204]	; (800a38c <_txe_event_flags_create+0x10c>)
 800a2c0:	6013      	str	r3, [r2, #0]
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	f383 8810 	msr	PRIMASK, r3
}
 800a2cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800a2ce:	4b30      	ldr	r3, [pc, #192]	; (800a390 <_txe_event_flags_create+0x110>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a2d8:	e009      	b.n	800a2ee <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d00b      	beq.n	800a2fa <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800a2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800a2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ee:	4b29      	ldr	r3, [pc, #164]	; (800a394 <_txe_event_flags_create+0x114>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d3f0      	bcc.n	800a2da <_txe_event_flags_create+0x5a>
 800a2f8:	e000      	b.n	800a2fc <_txe_event_flags_create+0x7c>
                break;
 800a2fa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a300:	623b      	str	r3, [r7, #32]
    return(posture);
 800a302:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a304:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a306:	b672      	cpsid	i
    return(int_posture);
 800a308:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a30a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a30c:	4b1f      	ldr	r3, [pc, #124]	; (800a38c <_txe_event_flags_create+0x10c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3b01      	subs	r3, #1
 800a312:	4a1e      	ldr	r2, [pc, #120]	; (800a38c <_txe_event_flags_create+0x10c>)
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	f383 8810 	msr	PRIMASK, r3
}
 800a320:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a322:	f7ff f947 	bl	80095b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d102      	bne.n	800a334 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800a32e:	2306      	movs	r3, #6
 800a330:	647b      	str	r3, [r7, #68]	; 0x44
 800a332:	e01d      	b.n	800a370 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a334:	4b18      	ldr	r3, [pc, #96]	; (800a398 <_txe_event_flags_create+0x118>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33c:	4a17      	ldr	r2, [pc, #92]	; (800a39c <_txe_event_flags_create+0x11c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d101      	bne.n	800a346 <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a342:	2313      	movs	r3, #19
 800a344:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a346:	f3ef 8305 	mrs	r3, IPSR
 800a34a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a34c:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a34e:	4b14      	ldr	r3, [pc, #80]	; (800a3a0 <_txe_event_flags_create+0x120>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4313      	orrs	r3, r2
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a358:	f3ef 8305 	mrs	r3, IPSR
 800a35c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a35e:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a360:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <_txe_event_flags_create+0x120>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4313      	orrs	r3, r2
 800a366:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a36a:	d201      	bcs.n	800a370 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a36c:	2313      	movs	r3, #19
 800a36e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a372:	2b00      	cmp	r3, #0
 800a374:	d104      	bne.n	800a380 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800a376:	68b9      	ldr	r1, [r7, #8]
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7fe fdff 	bl	8008f7c <_tx_event_flags_create>
 800a37e:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a382:	4618      	mov	r0, r3
 800a384:	3748      	adds	r7, #72	; 0x48
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200a0e20 	.word	0x200a0e20
 800a390:	200a0d60 	.word	0x200a0d60
 800a394:	200a0d64 	.word	0x200a0d64
 800a398:	200a0d88 	.word	0x200a0d88
 800a39c:	200a0ed0 	.word	0x200a0ed0
 800a3a0:	2000000c 	.word	0x2000000c

0800a3a4 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08a      	sub	sp, #40	; 0x28
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d102      	bne.n	800a3c2 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a3bc:	2306      	movs	r3, #6
 800a3be:	61fb      	str	r3, [r7, #28]
 800a3c0:	e025      	b.n	800a40e <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a1e      	ldr	r2, [pc, #120]	; (800a440 <_txe_event_flags_get+0x9c>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d002      	beq.n	800a3d2 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a3cc:	2306      	movs	r3, #6
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	e01d      	b.n	800a40e <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	61fb      	str	r3, [r7, #28]
 800a3dc:	e017      	b.n	800a40e <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d014      	beq.n	800a40e <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a3e4:	f3ef 8305 	mrs	r3, IPSR
 800a3e8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a3ea:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a3ec:	4b15      	ldr	r3, [pc, #84]	; (800a444 <_txe_event_flags_get+0xa0>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a3f6:	2304      	movs	r3, #4
 800a3f8:	61fb      	str	r3, [r7, #28]
 800a3fa:	e008      	b.n	800a40e <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a3fc:	4b12      	ldr	r3, [pc, #72]	; (800a448 <_txe_event_flags_get+0xa4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	4a11      	ldr	r2, [pc, #68]	; (800a44c <_txe_event_flags_get+0xa8>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d101      	bne.n	800a40e <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a40a:	2304      	movs	r3, #4
 800a40c:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b03      	cmp	r3, #3
 800a418:	d901      	bls.n	800a41e <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 800a41a:	2308      	movs	r3, #8
 800a41c:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d108      	bne.n	800a436 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	68b9      	ldr	r1, [r7, #8]
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7fe fdf2 	bl	8009018 <_tx_event_flags_get>
 800a434:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800a436:	69fb      	ldr	r3, [r7, #28]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	4456444e 	.word	0x4456444e
 800a444:	2000000c 	.word	0x2000000c
 800a448:	200a0d88 	.word	0x200a0d88
 800a44c:	200a0ed0 	.word	0x200a0ed0

0800a450 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b09a      	sub	sp, #104	; 0x68
 800a454:	af06      	add	r7, sp, #24
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a45e:	2300      	movs	r3, #0
 800a460:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d102      	bne.n	800a46e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a468:	230e      	movs	r3, #14
 800a46a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a46c:	e0bb      	b.n	800a5e6 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800a46e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a470:	2bb0      	cmp	r3, #176	; 0xb0
 800a472:	d002      	beq.n	800a47a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a474:	230e      	movs	r3, #14
 800a476:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a478:	e0b5      	b.n	800a5e6 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a47a:	f3ef 8310 	mrs	r3, PRIMASK
 800a47e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a484:	b672      	cpsid	i
    return(int_posture);
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a48a:	4b64      	ldr	r3, [pc, #400]	; (800a61c <_txe_thread_create+0x1cc>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3301      	adds	r3, #1
 800a490:	4a62      	ldr	r2, [pc, #392]	; (800a61c <_txe_thread_create+0x1cc>)
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a496:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	f383 8810 	msr	PRIMASK, r3
}
 800a49e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800a4a4:	4b5e      	ldr	r3, [pc, #376]	; (800a620 <_txe_thread_create+0x1d0>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a4aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4ac:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800a4ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4b4:	4413      	add	r3, r2
 800a4b6:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	647b      	str	r3, [r7, #68]	; 0x44
 800a4c0:	e02b      	b.n	800a51a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d101      	bne.n	800a4ce <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800a4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d028      	beq.n	800a526 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800a4d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d308      	bcc.n	800a4f0 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800a4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d203      	bcs.n	800a4f0 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800a4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d308      	bcc.n	800a50c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800a4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a500:	429a      	cmp	r2, r3
 800a502:	d203      	bcs.n	800a50c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a504:	2300      	movs	r3, #0
 800a506:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800a50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a512:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a516:	3301      	adds	r3, #1
 800a518:	647b      	str	r3, [r7, #68]	; 0x44
 800a51a:	4b42      	ldr	r3, [pc, #264]	; (800a624 <_txe_thread_create+0x1d4>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a520:	429a      	cmp	r2, r3
 800a522:	d3ce      	bcc.n	800a4c2 <_txe_thread_create+0x72>
 800a524:	e000      	b.n	800a528 <_txe_thread_create+0xd8>
                break;
 800a526:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a528:	f3ef 8310 	mrs	r3, PRIMASK
 800a52c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a52e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a530:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a532:	b672      	cpsid	i
    return(int_posture);
 800a534:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a536:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a538:	4b38      	ldr	r3, [pc, #224]	; (800a61c <_txe_thread_create+0x1cc>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	4a37      	ldr	r2, [pc, #220]	; (800a61c <_txe_thread_create+0x1cc>)
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a544:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	f383 8810 	msr	PRIMASK, r3
}
 800a54c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a54e:	f7ff f831 	bl	80095b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a556:	429a      	cmp	r2, r3
 800a558:	d102      	bne.n	800a560 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800a55a:	230e      	movs	r3, #14
 800a55c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a55e:	e042      	b.n	800a5e6 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800a560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a562:	2b00      	cmp	r3, #0
 800a564:	d102      	bne.n	800a56c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a566:	2303      	movs	r3, #3
 800a568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a56a:	e03c      	b.n	800a5e6 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d102      	bne.n	800a578 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a572:	2303      	movs	r3, #3
 800a574:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a576:	e036      	b.n	800a5e6 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800a578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a57a:	2bc7      	cmp	r3, #199	; 0xc7
 800a57c:	d802      	bhi.n	800a584 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800a57e:	2305      	movs	r3, #5
 800a580:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a582:	e030      	b.n	800a5e6 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800a584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a586:	2b1f      	cmp	r3, #31
 800a588:	d902      	bls.n	800a590 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800a58a:	230f      	movs	r3, #15
 800a58c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a58e:	e02a      	b.n	800a5e6 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800a590:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a594:	429a      	cmp	r2, r3
 800a596:	d902      	bls.n	800a59e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800a598:	2318      	movs	r3, #24
 800a59a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a59c:	e023      	b.n	800a5e6 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800a59e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d902      	bls.n	800a5aa <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800a5a4:	2310      	movs	r3, #16
 800a5a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5a8:	e01d      	b.n	800a5e6 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800a5aa:	4b1f      	ldr	r3, [pc, #124]	; (800a628 <_txe_thread_create+0x1d8>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	4a1e      	ldr	r2, [pc, #120]	; (800a62c <_txe_thread_create+0x1dc>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d101      	bne.n	800a5bc <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a5b8:	2313      	movs	r3, #19
 800a5ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a5bc:	f3ef 8305 	mrs	r3, IPSR
 800a5c0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a5c2:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a5c4:	4b1a      	ldr	r3, [pc, #104]	; (800a630 <_txe_thread_create+0x1e0>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00b      	beq.n	800a5e6 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a5ce:	f3ef 8305 	mrs	r3, IPSR
 800a5d2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a5d4:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a5d6:	4b16      	ldr	r3, [pc, #88]	; (800a630 <_txe_thread_create+0x1e0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a5e0:	d201      	bcs.n	800a5e6 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a5e2:	2313      	movs	r3, #19
 800a5e4:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d112      	bne.n	800a612 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800a5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ee:	9305      	str	r3, [sp, #20]
 800a5f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5f2:	9304      	str	r3, [sp, #16]
 800a5f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5f6:	9303      	str	r3, [sp, #12]
 800a5f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5fa:	9302      	str	r3, [sp, #8]
 800a5fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7fe fe54 	bl	80092b8 <_tx_thread_create>
 800a610:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800a612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a614:	4618      	mov	r0, r3
 800a616:	3750      	adds	r7, #80	; 0x50
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	200a0e20 	.word	0x200a0e20
 800a620:	200a0d90 	.word	0x200a0d90
 800a624:	200a0d94 	.word	0x200a0d94
 800a628:	200a0d88 	.word	0x200a0d88
 800a62c:	200a0ed0 	.word	0x200a0ed0
 800a630:	2000000c 	.word	0x2000000c

0800a634 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a63a:	f3ef 8310 	mrs	r3, PRIMASK
 800a63e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a640:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800a642:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a644:	b672      	cpsid	i
    return(int_posture);
 800a646:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800a648:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800a64a:	463b      	mov	r3, r7
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 f835 	bl	800a6bc <tx_timer_get_next>
 800a652:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d103      	bne.n	800a662 <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7f6 fb15 	bl	8000c8c <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800a662:	4b07      	ldr	r3, [pc, #28]	; (800a680 <tx_low_power_enter+0x4c>)
 800a664:	2201      	movs	r2, #1
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f383 8810 	msr	PRIMASK, r3
}
 800a672:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800a674:	f7f6 fb14 	bl	8000ca0 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800a678:	bf00      	nop
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	200a1390 	.word	0x200a1390

0800a684 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800a68a:	4b0b      	ldr	r3, [pc, #44]	; (800a6b8 <tx_low_power_exit+0x34>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00d      	beq.n	800a6ae <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800a692:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <tx_low_power_exit+0x34>)
 800a694:	2200      	movs	r2, #0
 800a696:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800a698:	f7f6 fb09 	bl	8000cae <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800a69c:	f7f6 fb0e 	bl	8000cbc <App_ThreadX_LowPower_Timer_Adjust>
 800a6a0:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f86f 	bl	800a78c <tx_time_increment>
        }
    }
}
 800a6ae:	bf00      	nop
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	200a1390 	.word	0x200a1390

0800a6bc <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b08d      	sub	sp, #52	; 0x34
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800a6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a6ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ce:	617b      	str	r3, [r7, #20]
    return(posture);
 800a6d0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a6d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a6d4:	b672      	cpsid	i
    return(int_posture);
 800a6d6:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800a6d8:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800a6da:	4b29      	ldr	r3, [pc, #164]	; (800a780 <tx_timer_get_next+0xc4>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e4:	e02f      	b.n	800a746 <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d01d      	beq.n	800a72a <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b20      	cmp	r3, #32
 800a6fa:	d906      	bls.n	800a70a <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	4413      	add	r3, r2
 800a704:	3b20      	subs	r3, #32
 800a706:	623b      	str	r3, [r7, #32]
 800a708:	e001      	b.n	800a70e <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	429a      	cmp	r2, r3
 800a714:	d901      	bls.n	800a71a <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a726:	429a      	cmp	r2, r3
 800a728:	d1e4      	bne.n	800a6f4 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800a72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72c:	3304      	adds	r3, #4
 800a72e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800a730:	4b14      	ldr	r3, [pc, #80]	; (800a784 <tx_timer_get_next+0xc8>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a736:	429a      	cmp	r2, r3
 800a738:	d302      	bcc.n	800a740 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800a73a:	4b13      	ldr	r3, [pc, #76]	; (800a788 <tx_timer_get_next+0xcc>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	3301      	adds	r3, #1
 800a744:	627b      	str	r3, [r7, #36]	; 0x24
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	2b1f      	cmp	r3, #31
 800a74a:	d9cc      	bls.n	800a6e6 <tx_timer_get_next+0x2a>
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f383 8810 	msr	PRIMASK, r3
}
 800a756:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75e:	d004      	beq.n	800a76a <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	69fa      	ldr	r2, [r7, #28]
 800a764:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800a766:	2301      	movs	r3, #1
 800a768:	e003      	b.n	800a772 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800a770:	2300      	movs	r3, #0
    }
}
 800a772:	4618      	mov	r0, r3
 800a774:	3734      	adds	r7, #52	; 0x34
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	200a0ebc 	.word	0x200a0ebc
 800a784:	200a0eb8 	.word	0x200a0eb8
 800a788:	200a0eb4 	.word	0x200a0eb4

0800a78c <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08a      	sub	sp, #40	; 0x28
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 809b 	beq.w	800a8d2 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a79c:	f3ef 8310 	mrs	r3, PRIMASK
 800a7a0:	613b      	str	r3, [r7, #16]
    return(posture);
 800a7a2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800a7a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7a6:	b672      	cpsid	i
    return(int_posture);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a7aa:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800a7ac:	4b4b      	ldr	r3, [pc, #300]	; (800a8dc <tx_time_increment+0x150>)
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	4a49      	ldr	r2, [pc, #292]	; (800a8dc <tx_time_increment+0x150>)
 800a7b6:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800a7b8:	4b49      	ldr	r3, [pc, #292]	; (800a8e0 <tx_time_increment+0x154>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00e      	beq.n	800a7de <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800a7c0:	4b47      	ldr	r3, [pc, #284]	; (800a8e0 <tx_time_increment+0x154>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d206      	bcs.n	800a7d8 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800a7ca:	4b45      	ldr	r3, [pc, #276]	; (800a8e0 <tx_time_increment+0x154>)
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	4a43      	ldr	r2, [pc, #268]	; (800a8e0 <tx_time_increment+0x154>)
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	e002      	b.n	800a7de <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800a7d8:	4b41      	ldr	r3, [pc, #260]	; (800a8e0 <tx_time_increment+0x154>)
 800a7da:	2201      	movs	r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800a7de:	4b41      	ldr	r3, [pc, #260]	; (800a8e4 <tx_time_increment+0x158>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a7ec:	e046      	b.n	800a87c <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d034      	beq.n	800a860 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b20      	cmp	r3, #32
 800a802:	d908      	bls.n	800a816 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	4413      	add	r3, r2
 800a80c:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e003      	b.n	800a81e <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	69fa      	ldr	r2, [r7, #28]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d1e6      	bne.n	800a7fc <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	2200      	movs	r2, #0
 800a836:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d103      	bne.n	800a846 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	61bb      	str	r3, [r7, #24]
 800a844:	e009      	b.n	800a85a <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	6a3a      	ldr	r2, [r7, #32]
 800a84c:	6812      	ldr	r2, [r2, #0]
 800a84e:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800a850:	6a3b      	ldr	r3, [r7, #32]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	695a      	ldr	r2, [r3, #20]
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	3304      	adds	r3, #4
 800a864:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800a866:	4b20      	ldr	r3, [pc, #128]	; (800a8e8 <tx_time_increment+0x15c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6a3a      	ldr	r2, [r7, #32]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d302      	bcc.n	800a876 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800a870:	4b1e      	ldr	r3, [pc, #120]	; (800a8ec <tx_time_increment+0x160>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	3301      	adds	r3, #1
 800a87a:	627b      	str	r3, [r7, #36]	; 0x24
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	2b1f      	cmp	r3, #31
 800a880:	d9b5      	bls.n	800a7ee <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800a882:	4b1a      	ldr	r3, [pc, #104]	; (800a8ec <tx_time_increment+0x160>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a17      	ldr	r2, [pc, #92]	; (800a8e4 <tx_time_increment+0x158>)
 800a888:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800a88a:	e019      	b.n	800a8c0 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d206      	bcs.n	800a8ae <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	1ad2      	subs	r2, r2, r3
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	e002      	b.n	800a8b4 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800a8ba:	69f8      	ldr	r0, [r7, #28]
 800a8bc:	f7ff f9f8 	bl	8009cb0 <_tx_timer_system_activate>
    while (temp_list_head)
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1e2      	bne.n	800a88c <tx_time_increment+0x100>
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	f383 8810 	msr	PRIMASK, r3
}
 800a8d0:	e000      	b.n	800a8d4 <tx_time_increment+0x148>
        return;
 800a8d2:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800a8d4:	3728      	adds	r7, #40	; 0x28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	200a0e2c 	.word	0x200a0e2c
 800a8e0:	200a138c 	.word	0x200a138c
 800a8e4:	200a0ebc 	.word	0x200a0ebc
 800a8e8:	200a0eb8 	.word	0x200a0eb8
 800a8ec:	200a0eb4 	.word	0x200a0eb4

0800a8f0 <__libc_init_array>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	4d0d      	ldr	r5, [pc, #52]	; (800a928 <__libc_init_array+0x38>)
 800a8f4:	2600      	movs	r6, #0
 800a8f6:	4c0d      	ldr	r4, [pc, #52]	; (800a92c <__libc_init_array+0x3c>)
 800a8f8:	1b64      	subs	r4, r4, r5
 800a8fa:	10a4      	asrs	r4, r4, #2
 800a8fc:	42a6      	cmp	r6, r4
 800a8fe:	d109      	bne.n	800a914 <__libc_init_array+0x24>
 800a900:	4d0b      	ldr	r5, [pc, #44]	; (800a930 <__libc_init_array+0x40>)
 800a902:	2600      	movs	r6, #0
 800a904:	4c0b      	ldr	r4, [pc, #44]	; (800a934 <__libc_init_array+0x44>)
 800a906:	f000 f81f 	bl	800a948 <_init>
 800a90a:	1b64      	subs	r4, r4, r5
 800a90c:	10a4      	asrs	r4, r4, #2
 800a90e:	42a6      	cmp	r6, r4
 800a910:	d105      	bne.n	800a91e <__libc_init_array+0x2e>
 800a912:	bd70      	pop	{r4, r5, r6, pc}
 800a914:	f855 3b04 	ldr.w	r3, [r5], #4
 800a918:	3601      	adds	r6, #1
 800a91a:	4798      	blx	r3
 800a91c:	e7ee      	b.n	800a8fc <__libc_init_array+0xc>
 800a91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a922:	3601      	adds	r6, #1
 800a924:	4798      	blx	r3
 800a926:	e7f2      	b.n	800a90e <__libc_init_array+0x1e>
 800a928:	0800ab04 	.word	0x0800ab04
 800a92c:	0800ab04 	.word	0x0800ab04
 800a930:	0800ab04 	.word	0x0800ab04
 800a934:	0800ab08 	.word	0x0800ab08

0800a938 <memset>:
 800a938:	4402      	add	r2, r0
 800a93a:	4603      	mov	r3, r0
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d100      	bne.n	800a942 <memset+0xa>
 800a940:	4770      	bx	lr
 800a942:	f803 1b01 	strb.w	r1, [r3], #1
 800a946:	e7f9      	b.n	800a93c <memset+0x4>

0800a948 <_init>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr

0800a954 <_fini>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr
