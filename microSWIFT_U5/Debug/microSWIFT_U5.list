
microSWIFT_U5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a5c  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009dc4  08009dc4  00019dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08009dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000a6f5c  20000010  08009de4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200a6f6c  08009de4  00026f6c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b343  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d1e  00000000  00000000  0004b389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f10  00000000  00000000  000510a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001bd0  00000000  00000000  00052fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d2c  00000000  00000000  00054b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a4e6  00000000  00000000  0008e8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016946f  00000000  00000000  000b8d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00222209  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d30  00000000  00000000  0022225c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000010 	.word	0x20000010
 8000250:	00000000 	.word	0x00000000
 8000254:	08009c78 	.word	0x08009c78

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000014 	.word	0x20000014
 8000270:	08009c78 	.word	0x08009c78

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f89f 	bl	8000408 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	200a695c 	.word	0x200a695c
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	01e847ff 	.word	0x01e847ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a31      	ldr	r2, [pc, #196]	; (80003b8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4828      	ldr	r0, [pc, #160]	; (80003bc <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a29      	ldr	r2, [pc, #164]	; (80003c0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c22      	ldr	r4, [pc, #136]	; (80003c4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c1b      	ldr	r4, [pc, #108]	; (80003c4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b949      	cbnz	r1, 80003a2 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800038e:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000390:	f009 fae8 	bl	8009964 <tx_low_power_enter>
    POP     {r0-r3}
 8000394:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000396:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000398:	f009 fb0c 	bl	80099b4 <tx_low_power_exit>
    POP     {r0-r3}
 800039c:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a0:	e7f1      	b.n	8000386 <__tx_ts_wait>

080003a2 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a2:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003a6:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003aa:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 80003ae:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003b0:	e7d0      	b.n	8000354 <__tx_ts_restore>
 80003b2:	bf00      	nop

080003b4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b4:	4770      	bx	lr
 80003b6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003b8:	200a69f8 	.word	0x200a69f8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003bc:	200a6960 	.word	0x200a6960
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c0:	200a6964 	.word	0x200a6964
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c4:	200a6f64 	.word	0x200a6f64

080003c8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003c8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ca:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003ce:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003d6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003d8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003dc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003de:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003e6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003e8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ea:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003ec:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003ee:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fa:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003fc:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000402:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000404:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000406:	4770      	bx	lr

08000408 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000408:	4922      	ldr	r1, [pc, #136]	; (8000494 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040a:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 800040c:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000410:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000414:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000416:	b13a      	cbz	r2, 8000428 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000418:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800041c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800041e:	b91a      	cbnz	r2, 8000428 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000422:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000426:	6018      	str	r0, [r3, #0]

08000428 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000428:	491d      	ldr	r1, [pc, #116]	; (80004a0 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800042c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800042e:	b122      	cbz	r2, 800043a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000432:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000436:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000438:	e008      	b.n	800044c <__tx_timer_done>

0800043a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000440:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000442:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000444:	d101      	bne.n	800044a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000446:	4b19      	ldr	r3, [pc, #100]	; (80004ac <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000448:	6818      	ldr	r0, [r3, #0]

0800044a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044a:	6008      	str	r0, [r1, #0]

0800044c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800044e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000450:	b912      	cbnz	r2, 8000458 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000452:	4914      	ldr	r1, [pc, #80]	; (80004a4 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000454:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000456:	b1c8      	cbz	r0, 800048c <__tx_timer_nothing_expired>

08000458 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000458:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045a:	4912      	ldr	r1, [pc, #72]	; (80004a4 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800045e:	b108      	cbz	r0, 8000464 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000460:	f008 fe8e 	bl	8009180 <_tx_timer_expiration_process>

08000464 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000466:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000468:	b172      	cbz	r2, 8000488 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046a:	f008 fdfb 	bl	8009064 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800046e:	4810      	ldr	r0, [pc, #64]	; (80004b0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000470:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000472:	b949      	cbnz	r1, 8000488 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000474:	480f      	ldr	r0, [pc, #60]	; (80004b4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000476:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000478:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800047e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000482:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000484:	d000      	beq.n	8000488 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000486:	6002      	str	r2, [r0, #0]

08000488 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000488:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800048c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800048c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000490:	4770      	bx	lr
 8000492:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000494:	200a6a04 	.word	0x200a6a04
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000498:	200a6f64 	.word	0x200a6f64
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800049c:	200a6a08 	.word	0x200a6a08
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a0:	200a6a94 	.word	0x200a6a94
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a4:	200a6a98 	.word	0x200a6a98
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004a8:	200a6a90 	.word	0x200a6a90
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ac:	200a6a8c 	.word	0x200a6a8c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b0:	200a69f8 	.word	0x200a69f8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b4:	200a6960 	.word	0x200a6960
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b8:	200a6964 	.word	0x200a6964
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004bc:	e000ed04 	.word	0xe000ed04

080004c0 <__aeabi_uldivmod>:
 80004c0:	b953      	cbnz	r3, 80004d8 <__aeabi_uldivmod+0x18>
 80004c2:	b94a      	cbnz	r2, 80004d8 <__aeabi_uldivmod+0x18>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	bf08      	it	eq
 80004c8:	2800      	cmpeq	r0, #0
 80004ca:	bf1c      	itt	ne
 80004cc:	f04f 31ff 	movne.w	r1, #4294967295
 80004d0:	f04f 30ff 	movne.w	r0, #4294967295
 80004d4:	f000 b982 	b.w	80007dc <__aeabi_idiv0>
 80004d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e0:	f000 f806 	bl	80004f0 <__udivmoddi4>
 80004e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ec:	b004      	add	sp, #16
 80004ee:	4770      	bx	lr

080004f0 <__udivmoddi4>:
 80004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004f6:	4604      	mov	r4, r0
 80004f8:	460f      	mov	r7, r1
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d148      	bne.n	8000590 <__udivmoddi4+0xa0>
 80004fe:	428a      	cmp	r2, r1
 8000500:	4694      	mov	ip, r2
 8000502:	d961      	bls.n	80005c8 <__udivmoddi4+0xd8>
 8000504:	fab2 f382 	clz	r3, r2
 8000508:	b143      	cbz	r3, 800051c <__udivmoddi4+0x2c>
 800050a:	f1c3 0120 	rsb	r1, r3, #32
 800050e:	409f      	lsls	r7, r3
 8000510:	fa02 fc03 	lsl.w	ip, r2, r3
 8000514:	409c      	lsls	r4, r3
 8000516:	fa20 f101 	lsr.w	r1, r0, r1
 800051a:	430f      	orrs	r7, r1
 800051c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	0c22      	lsrs	r2, r4, #16
 8000526:	fbb7 f6f1 	udiv	r6, r7, r1
 800052a:	fb01 7716 	mls	r7, r1, r6, r7
 800052e:	fb06 f00e 	mul.w	r0, r6, lr
 8000532:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000536:	4290      	cmp	r0, r2
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x5c>
 800053a:	eb1c 0202 	adds.w	r2, ip, r2
 800053e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000542:	d202      	bcs.n	800054a <__udivmoddi4+0x5a>
 8000544:	4290      	cmp	r0, r2
 8000546:	f200 8137 	bhi.w	80007b8 <__udivmoddi4+0x2c8>
 800054a:	463e      	mov	r6, r7
 800054c:	1a12      	subs	r2, r2, r0
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb2 f0f1 	udiv	r0, r2, r1
 8000554:	fb01 2210 	mls	r2, r1, r0, r2
 8000558:	fb00 fe0e 	mul.w	lr, r0, lr
 800055c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000560:	45a6      	cmp	lr, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x86>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f100 32ff 	add.w	r2, r0, #4294967295
 800056c:	d202      	bcs.n	8000574 <__udivmoddi4+0x84>
 800056e:	45a6      	cmp	lr, r4
 8000570:	f200 811c 	bhi.w	80007ac <__udivmoddi4+0x2bc>
 8000574:	4610      	mov	r0, r2
 8000576:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800057a:	eba4 040e 	sub.w	r4, r4, lr
 800057e:	2600      	movs	r6, #0
 8000580:	b11d      	cbz	r5, 800058a <__udivmoddi4+0x9a>
 8000582:	40dc      	lsrs	r4, r3
 8000584:	2300      	movs	r3, #0
 8000586:	e9c5 4300 	strd	r4, r3, [r5]
 800058a:	4631      	mov	r1, r6
 800058c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000590:	428b      	cmp	r3, r1
 8000592:	d909      	bls.n	80005a8 <__udivmoddi4+0xb8>
 8000594:	2d00      	cmp	r5, #0
 8000596:	f000 80fd 	beq.w	8000794 <__udivmoddi4+0x2a4>
 800059a:	2600      	movs	r6, #0
 800059c:	e9c5 0100 	strd	r0, r1, [r5]
 80005a0:	4630      	mov	r0, r6
 80005a2:	4631      	mov	r1, r6
 80005a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a8:	fab3 f683 	clz	r6, r3
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d14b      	bne.n	8000648 <__udivmoddi4+0x158>
 80005b0:	428b      	cmp	r3, r1
 80005b2:	f0c0 80f2 	bcc.w	800079a <__udivmoddi4+0x2aa>
 80005b6:	4282      	cmp	r2, r0
 80005b8:	f240 80ef 	bls.w	800079a <__udivmoddi4+0x2aa>
 80005bc:	4630      	mov	r0, r6
 80005be:	2d00      	cmp	r5, #0
 80005c0:	d0e3      	beq.n	800058a <__udivmoddi4+0x9a>
 80005c2:	e9c5 4700 	strd	r4, r7, [r5]
 80005c6:	e7e0      	b.n	800058a <__udivmoddi4+0x9a>
 80005c8:	b902      	cbnz	r2, 80005cc <__udivmoddi4+0xdc>
 80005ca:	deff      	udf	#255	; 0xff
 80005cc:	fab2 f382 	clz	r3, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	f040 809d 	bne.w	8000710 <__udivmoddi4+0x220>
 80005d6:	1a89      	subs	r1, r1, r2
 80005d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005dc:	b297      	uxth	r7, r2
 80005de:	2601      	movs	r6, #1
 80005e0:	0c20      	lsrs	r0, r4, #16
 80005e2:	fbb1 f2fe 	udiv	r2, r1, lr
 80005e6:	fb0e 1112 	mls	r1, lr, r2, r1
 80005ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ee:	fb07 f002 	mul.w	r0, r7, r2
 80005f2:	4288      	cmp	r0, r1
 80005f4:	d90f      	bls.n	8000616 <__udivmoddi4+0x126>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f102 38ff 	add.w	r8, r2, #4294967295
 80005fe:	bf2c      	ite	cs
 8000600:	f04f 0901 	movcs.w	r9, #1
 8000604:	f04f 0900 	movcc.w	r9, #0
 8000608:	4288      	cmp	r0, r1
 800060a:	d903      	bls.n	8000614 <__udivmoddi4+0x124>
 800060c:	f1b9 0f00 	cmp.w	r9, #0
 8000610:	f000 80cf 	beq.w	80007b2 <__udivmoddi4+0x2c2>
 8000614:	4642      	mov	r2, r8
 8000616:	1a09      	subs	r1, r1, r0
 8000618:	b2a4      	uxth	r4, r4
 800061a:	fbb1 f0fe 	udiv	r0, r1, lr
 800061e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000622:	fb00 f707 	mul.w	r7, r0, r7
 8000626:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800062a:	42a7      	cmp	r7, r4
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x150>
 800062e:	eb1c 0404 	adds.w	r4, ip, r4
 8000632:	f100 31ff 	add.w	r1, r0, #4294967295
 8000636:	d202      	bcs.n	800063e <__udivmoddi4+0x14e>
 8000638:	42a7      	cmp	r7, r4
 800063a:	f200 80b4 	bhi.w	80007a6 <__udivmoddi4+0x2b6>
 800063e:	4608      	mov	r0, r1
 8000640:	1be4      	subs	r4, r4, r7
 8000642:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000646:	e79b      	b.n	8000580 <__udivmoddi4+0x90>
 8000648:	f1c6 0720 	rsb	r7, r6, #32
 800064c:	40b3      	lsls	r3, r6
 800064e:	fa01 f406 	lsl.w	r4, r1, r6
 8000652:	fa22 fc07 	lsr.w	ip, r2, r7
 8000656:	40f9      	lsrs	r1, r7
 8000658:	40b2      	lsls	r2, r6
 800065a:	ea4c 0c03 	orr.w	ip, ip, r3
 800065e:	fa20 f307 	lsr.w	r3, r0, r7
 8000662:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000666:	431c      	orrs	r4, r3
 8000668:	fa1f fe8c 	uxth.w	lr, ip
 800066c:	fa00 f306 	lsl.w	r3, r0, r6
 8000670:	0c20      	lsrs	r0, r4, #16
 8000672:	fbb1 f8f9 	udiv	r8, r1, r9
 8000676:	fb09 1118 	mls	r1, r9, r8, r1
 800067a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800067e:	fb08 f00e 	mul.w	r0, r8, lr
 8000682:	4288      	cmp	r0, r1
 8000684:	d90f      	bls.n	80006a6 <__udivmoddi4+0x1b6>
 8000686:	eb1c 0101 	adds.w	r1, ip, r1
 800068a:	f108 3aff 	add.w	sl, r8, #4294967295
 800068e:	bf2c      	ite	cs
 8000690:	f04f 0b01 	movcs.w	fp, #1
 8000694:	f04f 0b00 	movcc.w	fp, #0
 8000698:	4288      	cmp	r0, r1
 800069a:	d903      	bls.n	80006a4 <__udivmoddi4+0x1b4>
 800069c:	f1bb 0f00 	cmp.w	fp, #0
 80006a0:	f000 808d 	beq.w	80007be <__udivmoddi4+0x2ce>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	1a09      	subs	r1, r1, r0
 80006a8:	b2a4      	uxth	r4, r4
 80006aa:	fbb1 f0f9 	udiv	r0, r1, r9
 80006ae:	fb09 1110 	mls	r1, r9, r0, r1
 80006b2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006b6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ba:	458e      	cmp	lr, r1
 80006bc:	d907      	bls.n	80006ce <__udivmoddi4+0x1de>
 80006be:	eb1c 0101 	adds.w	r1, ip, r1
 80006c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80006c6:	d201      	bcs.n	80006cc <__udivmoddi4+0x1dc>
 80006c8:	458e      	cmp	lr, r1
 80006ca:	d87f      	bhi.n	80007cc <__udivmoddi4+0x2dc>
 80006cc:	4620      	mov	r0, r4
 80006ce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006d2:	eba1 010e 	sub.w	r1, r1, lr
 80006d6:	fba0 9802 	umull	r9, r8, r0, r2
 80006da:	4541      	cmp	r1, r8
 80006dc:	464c      	mov	r4, r9
 80006de:	46c6      	mov	lr, r8
 80006e0:	d302      	bcc.n	80006e8 <__udivmoddi4+0x1f8>
 80006e2:	d106      	bne.n	80006f2 <__udivmoddi4+0x202>
 80006e4:	454b      	cmp	r3, r9
 80006e6:	d204      	bcs.n	80006f2 <__udivmoddi4+0x202>
 80006e8:	3801      	subs	r0, #1
 80006ea:	ebb9 0402 	subs.w	r4, r9, r2
 80006ee:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d070      	beq.n	80007d8 <__udivmoddi4+0x2e8>
 80006f6:	1b1a      	subs	r2, r3, r4
 80006f8:	eb61 010e 	sbc.w	r1, r1, lr
 80006fc:	fa22 f306 	lsr.w	r3, r2, r6
 8000700:	fa01 f707 	lsl.w	r7, r1, r7
 8000704:	40f1      	lsrs	r1, r6
 8000706:	2600      	movs	r6, #0
 8000708:	431f      	orrs	r7, r3
 800070a:	e9c5 7100 	strd	r7, r1, [r5]
 800070e:	e73c      	b.n	800058a <__udivmoddi4+0x9a>
 8000710:	fa02 fc03 	lsl.w	ip, r2, r3
 8000714:	f1c3 0020 	rsb	r0, r3, #32
 8000718:	fa01 f203 	lsl.w	r2, r1, r3
 800071c:	fa21 f600 	lsr.w	r6, r1, r0
 8000720:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000724:	fa24 f100 	lsr.w	r1, r4, r0
 8000728:	fa1f f78c 	uxth.w	r7, ip
 800072c:	409c      	lsls	r4, r3
 800072e:	4311      	orrs	r1, r2
 8000730:	fbb6 f0fe 	udiv	r0, r6, lr
 8000734:	0c0a      	lsrs	r2, r1, #16
 8000736:	fb0e 6610 	mls	r6, lr, r0, r6
 800073a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800073e:	fb00 f607 	mul.w	r6, r0, r7
 8000742:	4296      	cmp	r6, r2
 8000744:	d90e      	bls.n	8000764 <__udivmoddi4+0x274>
 8000746:	eb1c 0202 	adds.w	r2, ip, r2
 800074a:	f100 38ff 	add.w	r8, r0, #4294967295
 800074e:	bf2c      	ite	cs
 8000750:	f04f 0901 	movcs.w	r9, #1
 8000754:	f04f 0900 	movcc.w	r9, #0
 8000758:	4296      	cmp	r6, r2
 800075a:	d902      	bls.n	8000762 <__udivmoddi4+0x272>
 800075c:	f1b9 0f00 	cmp.w	r9, #0
 8000760:	d031      	beq.n	80007c6 <__udivmoddi4+0x2d6>
 8000762:	4640      	mov	r0, r8
 8000764:	1b92      	subs	r2, r2, r6
 8000766:	b289      	uxth	r1, r1
 8000768:	fbb2 f6fe 	udiv	r6, r2, lr
 800076c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000770:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000774:	fb06 f207 	mul.w	r2, r6, r7
 8000778:	428a      	cmp	r2, r1
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x29c>
 800077c:	eb1c 0101 	adds.w	r1, ip, r1
 8000780:	f106 38ff 	add.w	r8, r6, #4294967295
 8000784:	d201      	bcs.n	800078a <__udivmoddi4+0x29a>
 8000786:	428a      	cmp	r2, r1
 8000788:	d823      	bhi.n	80007d2 <__udivmoddi4+0x2e2>
 800078a:	4646      	mov	r6, r8
 800078c:	1a89      	subs	r1, r1, r2
 800078e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000792:	e725      	b.n	80005e0 <__udivmoddi4+0xf0>
 8000794:	462e      	mov	r6, r5
 8000796:	4628      	mov	r0, r5
 8000798:	e6f7      	b.n	800058a <__udivmoddi4+0x9a>
 800079a:	1a84      	subs	r4, r0, r2
 800079c:	eb61 0303 	sbc.w	r3, r1, r3
 80007a0:	2001      	movs	r0, #1
 80007a2:	461f      	mov	r7, r3
 80007a4:	e70b      	b.n	80005be <__udivmoddi4+0xce>
 80007a6:	4464      	add	r4, ip
 80007a8:	3802      	subs	r0, #2
 80007aa:	e749      	b.n	8000640 <__udivmoddi4+0x150>
 80007ac:	4464      	add	r4, ip
 80007ae:	3802      	subs	r0, #2
 80007b0:	e6e1      	b.n	8000576 <__udivmoddi4+0x86>
 80007b2:	3a02      	subs	r2, #2
 80007b4:	4461      	add	r1, ip
 80007b6:	e72e      	b.n	8000616 <__udivmoddi4+0x126>
 80007b8:	3e02      	subs	r6, #2
 80007ba:	4462      	add	r2, ip
 80007bc:	e6c6      	b.n	800054c <__udivmoddi4+0x5c>
 80007be:	f1a8 0802 	sub.w	r8, r8, #2
 80007c2:	4461      	add	r1, ip
 80007c4:	e76f      	b.n	80006a6 <__udivmoddi4+0x1b6>
 80007c6:	3802      	subs	r0, #2
 80007c8:	4462      	add	r2, ip
 80007ca:	e7cb      	b.n	8000764 <__udivmoddi4+0x274>
 80007cc:	3802      	subs	r0, #2
 80007ce:	4461      	add	r1, ip
 80007d0:	e77d      	b.n	80006ce <__udivmoddi4+0x1de>
 80007d2:	3e02      	subs	r6, #2
 80007d4:	4461      	add	r1, ip
 80007d6:	e7d9      	b.n	800078c <__udivmoddi4+0x29c>
 80007d8:	462e      	mov	r6, r5
 80007da:	e6d6      	b.n	800058a <__udivmoddi4+0x9a>

080007dc <__aeabi_idiv0>:
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	; 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <tx_application_define+0x40>)
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <tx_application_define+0x44>)
 80007f4:	490c      	ldr	r1, [pc, #48]	; (8000828 <tx_application_define+0x48>)
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <tx_application_define+0x4c>)
 80007f8:	f009 f814 	bl	8009824 <_txe_byte_pool_create>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d109      	bne.n	8000816 <tx_application_define+0x36>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <tx_application_define+0x4c>)
 8000804:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000806:	68b8      	ldr	r0, [r7, #8]
 8000808:	f000 f812 	bl	8000830 <App_ThreadX_Init>
 800080c:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d000      	beq.n	8000816 <tx_application_define+0x36>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000814:	e7fe      	b.n	8000814 <tx_application_define+0x34>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	000a6040 	.word	0x000a6040
 8000824:	2000002c 	.word	0x2000002c
 8000828:	08009c90 	.word	0x08009c90
 800082c:	200a606c 	.word	0x200a606c

08000830 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af02      	add	r7, sp, #8
 8000836:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;

  CHAR *pointer;
  if (tx_byte_allocate(byte_pool, (VOID **)&pointer, APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS) {
 8000840:	f107 010c 	add.w	r1, r7, #12
 8000844:	2300      	movs	r3, #0
 8000846:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800084a:	6938      	ldr	r0, [r7, #16]
 800084c:	f008 ff76 	bl	800973c <_txe_byte_allocate>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <App_ThreadX_Init+0x2a>
	  ret = TX_POOL_ERROR;
 8000856:	2302      	movs	r3, #2
 8000858:	617b      	str	r3, [r7, #20]
  }

  ret = tx_block_pool_create(&memory_block_pool_0, "arrays pool", 125000, pointer, 125004);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2230      	movs	r2, #48	; 0x30
 800085e:	9201      	str	r2, [sp, #4]
 8000860:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <App_ThreadX_Init+0xb4>)
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	4a20      	ldr	r2, [pc, #128]	; (80008e8 <App_ThreadX_Init+0xb8>)
 8000866:	4921      	ldr	r1, [pc, #132]	; (80008ec <App_ThreadX_Init+0xbc>)
 8000868:	4821      	ldr	r0, [pc, #132]	; (80008f0 <App_ThreadX_Init+0xc0>)
 800086a:	f008 febf 	bl	80095ec <_txe_block_pool_create>
 800086e:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS) {
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <App_ThreadX_Init+0x4a>
	  ret = TX_POOL_ERROR;
 8000876:	2302      	movs	r3, #2
 8000878:	617b      	str	r3, [r7, #20]
  }

  ret = tx_block_pool_create(&memory_block_pool_1, "arrays pool", 125000, pointer, 125004);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2230      	movs	r2, #48	; 0x30
 800087e:	9201      	str	r2, [sp, #4]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <App_ThreadX_Init+0xb4>)
 8000882:	9200      	str	r2, [sp, #0]
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <App_ThreadX_Init+0xb8>)
 8000886:	4919      	ldr	r1, [pc, #100]	; (80008ec <App_ThreadX_Init+0xbc>)
 8000888:	481a      	ldr	r0, [pc, #104]	; (80008f4 <App_ThreadX_Init+0xc4>)
 800088a:	f008 feaf 	bl	80095ec <_txe_block_pool_create>
 800088e:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS) {
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <App_ThreadX_Init+0x6a>
	  ret = TX_POOL_ERROR;
 8000896:	2302      	movs	r3, #2
 8000898:	617b      	str	r3, [r7, #20]
  }

  ret = tx_block_pool_create(&memory_block_pool_2, "arrays pool", 125000, pointer, 125004);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2230      	movs	r2, #48	; 0x30
 800089e:	9201      	str	r2, [sp, #4]
 80008a0:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <App_ThreadX_Init+0xb4>)
 80008a2:	9200      	str	r2, [sp, #0]
 80008a4:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <App_ThreadX_Init+0xb8>)
 80008a6:	4911      	ldr	r1, [pc, #68]	; (80008ec <App_ThreadX_Init+0xbc>)
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <App_ThreadX_Init+0xc8>)
 80008aa:	f008 fe9f 	bl	80095ec <_txe_block_pool_create>
 80008ae:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS) {
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <App_ThreadX_Init+0x8a>
	  ret = TX_POOL_ERROR;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
  }

  ret = tx_block_pool_create(&memory_block_pool_3, "arrays pool", 125000, pointer, 125004);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2230      	movs	r2, #48	; 0x30
 80008be:	9201      	str	r2, [sp, #4]
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <App_ThreadX_Init+0xb4>)
 80008c2:	9200      	str	r2, [sp, #0]
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <App_ThreadX_Init+0xb8>)
 80008c6:	4909      	ldr	r1, [pc, #36]	; (80008ec <App_ThreadX_Init+0xbc>)
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <App_ThreadX_Init+0xcc>)
 80008ca:	f008 fe8f 	bl	80095ec <_txe_block_pool_create>
 80008ce:	6178      	str	r0, [r7, #20]
  if (ret != TX_SUCCESS) {
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <App_ThreadX_Init+0xaa>
	  ret = TX_POOL_ERROR;
 80008d6:	2302      	movs	r3, #2
 80008d8:	617b      	str	r3, [r7, #20]
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008da:	697b      	ldr	r3, [r7, #20]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0001e84c 	.word	0x0001e84c
 80008e8:	0001e848 	.word	0x0001e848
 80008ec:	08009ca4 	.word	0x08009ca4
 80008f0:	200a60a0 	.word	0x200a60a0
 80008f4:	200a60d0 	.word	0x200a60d0
 80008f8:	200a6100 	.word	0x200a6100
 80008fc:	200a6130 	.word	0x200a6130

08000900 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000904:	f007 ffb4 	bl	8008870 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
  return 0;
 8000940:	2300      	movs	r3, #0
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fe76 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f815 	bl	8000982 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000958:	f000 f87c 	bl	8000a54 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 fa40 	bl	8000de0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000960:	f000 f888 	bl	8000a74 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000964:	f000 f92c 	bl	8000bc0 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000968:	f000 fa0e 	bl	8000d88 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 800096c:	f000 f8da 	bl	8000b24 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000970:	f000 f972 	bl	8000c58 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000974:	f000 f9bc 	bl	8000cf0 <MX_USART3_UART_Init>
  MX_ICACHE_Init();
 8000978:	f000 f8c0 	bl	8000afc <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800097c:	f7ff ffc0 	bl	8000900 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000980:	e7fe      	b.n	8000980 <main+0x34>

08000982 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b09e      	sub	sp, #120	; 0x78
 8000986:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	2260      	movs	r2, #96	; 0x60
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f009 f969 	bl	8009c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009a6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80009aa:	f001 fed9 	bl	8002760 <HAL_PWREx_ControlVoltageScaling>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80009b4:	f000 faf8 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80009b8:	233a      	movs	r3, #58	; 0x3a
 80009ba:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c8:	2310      	movs	r3, #16
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009d2:	2301      	movs	r3, #1
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009d6:	2310      	movs	r3, #16
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80009da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009e8:	2301      	movs	r3, #1
 80009ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009f4:	2350      	movs	r3, #80	; 0x50
 80009f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 ffa7 	bl	8002964 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a1c:	f000 fac4 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	231f      	movs	r3, #31
 8000a22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2303      	movs	r3, #3
 8000a26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fe67 	bl	8003710 <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a48:	f000 faae 	bl	8000fa8 <Error_Handler>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	3778      	adds	r7, #120	; 0x78
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000a58:	f001 ff64 	bl	8002924 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a5c:	f001 ff72 	bl	8002944 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000a60:	2002      	movs	r0, #2
 8000a62:	f001 feff 	bl	8002864 <HAL_PWREx_ConfigSupply>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000a6c:	f000 fa9c 	bl	8000fa8 <Error_Handler>
  }
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <MX_ADC1_Init+0x84>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000a98:	2204      	movs	r2, #4
 8000a9a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_ADC1_Init+0x80>)
 8000ae2:	f000 fefb 	bl	80018dc <HAL_ADC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 fa5c 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200a6160 	.word	0x200a6160
 8000af8:	42028000 	.word	0x42028000

08000afc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 fcb5 	bl	8002470 <HAL_ICACHE_ConfigAssociativityMode>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b0c:	f000 fa4c 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b10:	f001 fcce 	bl	80024b0 <HAL_ICACHE_Enable>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b1a:	f000 fa45 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b3e:	4a1f      	ldr	r2, [pc, #124]	; (8000bbc <MX_RTC_Init+0x98>)
 8000b40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b44:	2240      	movs	r2, #64	; 0x40
 8000b46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b4a:	227f      	movs	r2, #127	; 0x7f
 8000b4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b7a:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000b7c:	f005 fe20 	bl	80067c0 <HAL_RTC_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000b86:	f000 fa0f 	bl	8000fa8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <MX_RTC_Init+0x94>)
 8000ba0:	f005 ff20 	bl	80069e4 <HAL_RTCEx_PrivilegeModeSet>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000baa:	f000 f9fd 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200a61ec 	.word	0x200a61ec
 8000bbc:	46007800 	.word	0x46007800

08000bc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <MX_USART1_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c0a:	f006 fb03 	bl	8007214 <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c14:	f000 f9c8 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c1c:	f006 feda 	bl	80079d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 f9bf 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c2e:	f006 ff0f 	bl	8007a50 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f000 f9b6 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c3e:	f006 fe90 	bl	8007962 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 f9ae 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200a621c 	.word	0x200a621c
 8000c54:	40013800 	.word	0x40013800

08000c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c64:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca0:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000ca2:	f006 fab7 	bl	8007214 <HAL_UART_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cac:	f000 f97c 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000cb4:	f006 fe8e 	bl	80079d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f000 f973 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000cc6:	f006 fec3 	bl	8007a50 <HAL_UARTEx_SetRxFifoThreshold>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd0:	f000 f96a 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_USART2_UART_Init+0x90>)
 8000cd6:	f006 fe44 	bl	8007962 <HAL_UARTEx_DisableFifoMode>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f000 f962 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200a62ac 	.word	0x200a62ac
 8000cec:	40004400 	.word	0x40004400

08000cf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000cf6:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <MX_USART3_UART_Init+0x94>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000cfc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d38:	4811      	ldr	r0, [pc, #68]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d3a:	f006 fa6b 	bl	8007214 <HAL_UART_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d44:	f000 f930 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d4c:	f006 fe42 	bl	80079d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d56:	f000 f927 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d5e:	f006 fe77 	bl	8007a50 <HAL_UARTEx_SetRxFifoThreshold>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d68:	f000 f91e 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d6e:	f006 fdf8 	bl	8007962 <HAL_UARTEx_DisableFifoMode>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d78:	f000 f916 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200a633c 	.word	0x200a633c
 8000d84:	40004800 	.word	0x40004800

08000d88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000d90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d94:	2206      	movs	r2, #6
 8000d96:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dc4:	f001 fb84 	bl	80024d0 <HAL_PCD_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000dce:	f000 f8eb 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200a63cc 	.word	0x200a63cc
 8000ddc:	42040000 	.word	0x42040000

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dfc:	4a5b      	ldr	r2, [pc, #364]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e06:	4b59      	ldr	r3, [pc, #356]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b55      	ldr	r3, [pc, #340]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e1a:	4a54      	ldr	r2, [pc, #336]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e24:	4b51      	ldr	r3, [pc, #324]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b4e      	ldr	r3, [pc, #312]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e38:	4a4c      	ldr	r2, [pc, #304]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e42:	4b4a      	ldr	r3, [pc, #296]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e50:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e56:	4a45      	ldr	r2, [pc, #276]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e60:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <MX_GPIO_Init+0x18c>)
 8000e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2104      	movs	r1, #4
 8000e72:	483f      	ldr	r0, [pc, #252]	; (8000f70 <MX_GPIO_Init+0x190>)
 8000e74:	f001 fae4 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	483d      	ldr	r0, [pc, #244]	; (8000f74 <MX_GPIO_Init+0x194>)
 8000e7e:	f001 fadf 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	21a0      	movs	r1, #160	; 0xa0
 8000e86:	483c      	ldr	r0, [pc, #240]	; (8000f78 <MX_GPIO_Init+0x198>)
 8000e88:	f001 fada 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <MX_GPIO_Init+0x19c>)
 8000e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4834      	ldr	r0, [pc, #208]	; (8000f74 <MX_GPIO_Init+0x194>)
 8000ea2:	f001 f8f5 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	482f      	ldr	r0, [pc, #188]	; (8000f78 <MX_GPIO_Init+0x198>)
 8000ebc:	f001 f8e8 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD1_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD1_CC2_Pin;
 8000ec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD1_CC2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4828      	ldr	r0, [pc, #160]	; (8000f78 <MX_GPIO_Init+0x198>)
 8000ed6:	f001 f8db 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000eda:	2304      	movs	r3, #4
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	481f      	ldr	r0, [pc, #124]	; (8000f70 <MX_GPIO_Init+0x190>)
 8000ef2:	f001 f8cd 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f02:	2302      	movs	r3, #2
 8000f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4819      	ldr	r0, [pc, #100]	; (8000f74 <MX_GPIO_Init+0x194>)
 8000f0e:	f001 f8bf 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD1_CC1_Pin */
  GPIO_InitStruct.Pin = UCPD1_CC1_Pin;
 8000f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD1_CC1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4816      	ldr	r0, [pc, #88]	; (8000f80 <MX_GPIO_Init+0x1a0>)
 8000f28:	f001 f8b2 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_GPIO_Init+0x198>)
 8000f44:	f001 f8a4 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_GPIO_Init+0x198>)
 8000f60:	f001 f896 	bl	8002090 <HAL_GPIO_Init>

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	46020c00 	.word	0x46020c00
 8000f70:	42021800 	.word	0x42021800
 8000f74:	42020800 	.word	0x42020800
 8000f78:	42020400 	.word	0x42020400
 8000f7c:	10210000 	.word	0x10210000
 8000f80:	42020000 	.word	0x42020000

08000f84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f96:	f000 fb81 	bl	800169c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40014400 	.word	0x40014400

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler+0x8>
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_MspInit+0x34>)
 8000fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <HAL_MspInit+0x34>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_MspInit+0x34>)
 8000fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f001 f826 	bl	800202a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	46020c00 	.word	0x46020c00

08000fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0bc      	sub	sp, #240	; 0xf0
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	22c8      	movs	r2, #200	; 0xc8
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f008 fe2b 	bl	8009c68 <memset>
  if(hadc->Instance==ADC1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <HAL_ADC_MspInit+0xbc>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d140      	bne.n	800109e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800101c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001028:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800102c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4618      	mov	r0, r3
 8001036:	f002 ff79 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001040:	f7ff ffb2 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 8001046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 800104c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001050:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 8001056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800105a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 8001064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001068:	4a10      	ldr	r2, [pc, #64]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 8001074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001080:	2304      	movs	r3, #4
 8001082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_ADC_MspInit+0xc4>)
 800109a:	f000 fff9 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	37f0      	adds	r7, #240	; 0xf0
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	42028000 	.word	0x42028000
 80010ac:	46020c00 	.word	0x46020c00
 80010b0:	42020800 	.word	0x42020800

080010b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0b6      	sub	sp, #216	; 0xd8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	22c8      	movs	r2, #200	; 0xc8
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 fdcf 	bl	8009c68 <memset>
  if(hrtc->Instance==RTC)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_RTC_MspInit+0x80>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d12a      	bne.n	800112a <HAL_RTC_MspInit+0x76>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 ff1d 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80010f8:	f7ff ff56 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_RTC_MspInit+0x84>)
 80010fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001102:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_RTC_MspInit+0x84>)
 8001104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_RTC_MspInit+0x84>)
 800110e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_RTC_MspInit+0x84>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_RTC_MspInit+0x84>)
 800111e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	37d8      	adds	r7, #216	; 0xd8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	46007800 	.word	0x46007800
 8001138:	46020c00 	.word	0x46020c00

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0c0      	sub	sp, #256	; 0x100
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	22c8      	movs	r2, #200	; 0xc8
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f008 fd83 	bl	8009c68 <memset>
  if(huart->Instance==USART1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a72      	ldr	r2, [pc, #456]	; (8001330 <HAL_UART_MspInit+0x1f4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d146      	bne.n	80011fa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800116c:	f04f 0201 	mov.w	r2, #1
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001178:	2300      	movs	r3, #0
 800117a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fed3 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800118c:	f7ff ff0c 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001190:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 8001192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001196:	4a67      	ldr	r2, [pc, #412]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80011a0:	4b64      	ldr	r3, [pc, #400]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80011a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80011b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011b4:	4a5f      	ldr	r2, [pc, #380]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80011c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80011cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e6:	2307      	movs	r3, #7
 80011e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011f0:	4619      	mov	r1, r3
 80011f2:	4851      	ldr	r0, [pc, #324]	; (8001338 <HAL_UART_MspInit+0x1fc>)
 80011f4:	f000 ff4c 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011f8:	e094      	b.n	8001324 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a4f      	ldr	r2, [pc, #316]	; (800133c <HAL_UART_MspInit+0x200>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d145      	bne.n	8001290 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001204:	f04f 0202 	mov.w	r2, #2
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001210:	2300      	movs	r3, #0
 8001212:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fe87 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001224:	f7ff fec0 	bl	8000fa8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001228:	4b42      	ldr	r3, [pc, #264]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 800122a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800122e:	4a41      	ldr	r2, [pc, #260]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001238:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 800123a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 8001248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800124c:	4a39      	ldr	r2, [pc, #228]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001256:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 8001258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001264:	230c      	movs	r3, #12
 8001266:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127c:	2307      	movs	r3, #7
 800127e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001286:	4619      	mov	r1, r3
 8001288:	482b      	ldr	r0, [pc, #172]	; (8001338 <HAL_UART_MspInit+0x1fc>)
 800128a:	f000 ff01 	bl	8002090 <HAL_GPIO_Init>
}
 800128e:	e049      	b.n	8001324 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2a      	ldr	r2, [pc, #168]	; (8001340 <HAL_UART_MspInit+0x204>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d144      	bne.n	8001324 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800129a:	f04f 0204 	mov.w	r2, #4
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fe3c 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_UART_MspInit+0x182>
      Error_Handler();
 80012ba:	f7ff fe75 	bl	8000fa8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80012c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80012c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80012d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80012de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_UART_MspInit+0x1f8>)
 80012ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012fa:	23a0      	movs	r3, #160	; 0xa0
 80012fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001312:	2307      	movs	r3, #7
 8001314:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <HAL_UART_MspInit+0x1fc>)
 8001320:	f000 feb6 	bl	8002090 <HAL_GPIO_Init>
}
 8001324:	bf00      	nop
 8001326:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40013800 	.word	0x40013800
 8001334:	46020c00 	.word	0x46020c00
 8001338:	42020000 	.word	0x42020000
 800133c:	40004400 	.word	0x40004400
 8001340:	40004800 	.word	0x40004800

08001344 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0be      	sub	sp, #248	; 0xf8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	22c8      	movs	r2, #200	; 0xc8
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f008 fc7f 	bl	8009c68 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a38      	ldr	r2, [pc, #224]	; (8001450 <HAL_PCD_MspInit+0x10c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d169      	bne.n	8001448 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001374:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fdce 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001396:	f7ff fe07 	bl	8000fa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <HAL_PCD_MspInit+0x110>)
 800139c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a0:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <HAL_PCD_MspInit+0x110>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_PCD_MspInit+0x110>)
 80013ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80013b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80013d2:	230a      	movs	r3, #10
 80013d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013dc:	4619      	mov	r1, r3
 80013de:	481e      	ldr	r0, [pc, #120]	; (8001458 <HAL_PCD_MspInit+0x114>)
 80013e0:	f000 fe56 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_PCD_MspInit+0x110>)
 80013e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ea:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <HAL_PCD_MspInit+0x110>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_PCD_MspInit+0x110>)
 80013f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_PCD_MspInit+0x110>)
 8001404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d119      	bne.n	8001444 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_PCD_MspInit+0x110>)
 8001412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_PCD_MspInit+0x110>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_PCD_MspInit+0x110>)
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800142e:	f001 fa69 	bl	8002904 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_PCD_MspInit+0x110>)
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_PCD_MspInit+0x110>)
 800143a:	f023 0304 	bic.w	r3, r3, #4
 800143e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001442:	e001      	b.n	8001448 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001444:	f001 fa5e 	bl	8002904 <HAL_PWREx_EnableVddUSB>
}
 8001448:	bf00      	nop
 800144a:	37f8      	adds	r7, #248	; 0xf8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	42040000 	.word	0x42040000
 8001454:	46020c00 	.word	0x46020c00
 8001458:	42020000 	.word	0x42020000

0800145c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	; 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_InitTick+0xcc>)
 800146e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <HAL_InitTick+0xcc>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_InitTick+0xcc>)
 800147e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800148a:	f107 0210 	add.w	r2, r7, #16
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fc8b 	bl	8003db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800149a:	f002 fc61 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 800149e:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a2:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_InitTick+0xd0>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	3b01      	subs	r3, #1
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_InitTick+0xd4>)
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_InitTick+0xd8>)
 80014b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_InitTick+0xd4>)
 80014b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ba:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_InitTick+0xd4>)
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_InitTick+0xd4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_InitTick+0xd4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim16);
 80014ce:	4818      	ldr	r0, [pc, #96]	; (8001530 <HAL_InitTick+0xd4>)
 80014d0:	f005 fab6 	bl	8006a40 <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80014da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80014e2:	4813      	ldr	r0, [pc, #76]	; (8001530 <HAL_InitTick+0xd4>)
 80014e4:	f005 fb0e 	bl	8006b04 <HAL_TIM_Base_Start_IT>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80014ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10e      	bne.n	8001514 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d808      	bhi.n	800150e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM16 global Interrupt */
        HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	2046      	movs	r0, #70	; 0x46
 8001502:	f000 fd9d 	bl	8002040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001506:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <HAL_InitTick+0xdc>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e002      	b.n	8001514 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001514:	2046      	movs	r0, #70	; 0x46
 8001516:	f000 fdad 	bl	8002074 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800151a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800151e:	4618      	mov	r0, r3
 8001520:	3738      	adds	r7, #56	; 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	46020c00 	.word	0x46020c00
 800152c:	431bde83 	.word	0x431bde83
 8001530:	200a68d8 	.word	0x200a68d8
 8001534:	40014400 	.word	0x40014400
 8001538:	20000004 	.word	0x20000004

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM16_IRQHandler+0x10>)
 800156e:	f005 fb69 	bl	8006c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200a68d8 	.word	0x200a68d8

0800157c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <SystemInit+0x68>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <SystemInit+0x68>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <SystemInit+0x6c>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <SystemInit+0x6c>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <SystemInit+0x6c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <SystemInit+0x6c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <SystemInit+0x6c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <SystemInit+0x6c>)
 80015ae:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015b2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <SystemInit+0x6c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <SystemInit+0x6c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <SystemInit+0x6c>)
 80015c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <SystemInit+0x6c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SystemInit+0x68>)
 80015d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d6:	609a      	str	r2, [r3, #8]
  #endif
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	46020c00 	.word	0x46020c00

080015ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015f2:	e003      	b.n	80015fc <LoopCopyDataInit>

080015f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015fa:	3104      	adds	r1, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <LoopForever+0xa>)
	ldr	r3, =_edata
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001600:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001602:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001604:	d3f6      	bcc.n	80015f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001608:	e002      	b.n	8001610 <LoopFillZerobss>

0800160a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800160a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800160c:	f842 3b04 	str.w	r3, [r2], #4

08001610 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <LoopForever+0x16>)
	cmp	r2, r3
 8001612:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001614:	d3f9      	bcc.n	800160a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001616:	f7ff ffb1 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f008 fb01 	bl	8009c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161e:	f7ff f995 	bl	800094c <main>

08001622 <LoopForever>:

LoopForever:
    b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001624:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001628:	08009dd4 	.word	0x08009dd4
	ldr	r0, =_sdata
 800162c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001630:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001634:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001638:	200a6f6c 	.word	0x200a6f6c

0800163c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_IRQHandler>
	...

08001640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_Init+0x4c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_Init+0x4c>)
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 fcea 	bl	800202a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001656:	f002 fa4d 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 800165a:	4602      	mov	r2, r0
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_Init+0x50>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	490b      	ldr	r1, [pc, #44]	; (8001694 <HAL_Init+0x54>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	fa22 f303 	lsr.w	r3, r2, r3
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_Init+0x58>)
 800166e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001670:	2007      	movs	r0, #7
 8001672:	f7ff fef3 	bl	800145c <HAL_InitTick>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e002      	b.n	8001686 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001680:	f7ff fc98 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40022000 	.word	0x40022000
 8001690:	46020c00 	.word	0x46020c00
 8001694:	08009cc4 	.word	0x08009cc4
 8001698:	20000000 	.word	0x20000000

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008
 80016c0:	200a6924 	.word	0x200a6924

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200a6924 	.word	0x200a6924

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008

08001724 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800175c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	2a00      	cmp	r2, #0
 8001774:	d002      	beq.n	800177c <LL_ADC_SetGainCompensation+0x32>
 8001776:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800177a:	e000      	b.n	800177e <LL_ADC_SetGainCompensation+0x34>
 800177c:	2200      	movs	r2, #0
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2107      	movs	r1, #7
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	431a      	orrs	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6093      	str	r3, [r2, #8]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001806:	d101      	bne.n	800180c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800182a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800182e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	609a      	str	r2, [r3, #8]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001856:	d101      	bne.n	800185c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <LL_ADC_IsEnabled+0x18>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <LL_ADC_IsEnabled+0x1a>
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d101      	bne.n	80018a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d101      	bne.n	80018ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e2e3      	b.n	8001ec4 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a92      	ldr	r2, [pc, #584]	; (8001b54 <HAL_ADC_Init+0x278>)
 800190a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fb69 	bl	8000fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff60 	bl	80017f2 <LL_ADC_IsDeepPowerDownEnabled>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff46 	bl	80017ce <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff7b 	bl	8001842 <LL_ADC_IsInternalRegulatorEnabled>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d115      	bne.n	800197e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff5f 	bl	800181a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800195c:	4b7e      	ldr	r3, [pc, #504]	; (8001b58 <HAL_ADC_Init+0x27c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	4a7e      	ldr	r2, [pc, #504]	; (8001b5c <HAL_ADC_Init+0x280>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	3301      	adds	r3, #1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001970:	e002      	b.n	8001978 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3b01      	subs	r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f9      	bne.n	8001972 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff5d 	bl	8001842 <LL_ADC_IsInternalRegulatorEnabled>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10e      	bne.n	80019ac <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001992:	f043 0210 	orr.w	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff6d 	bl	8001890 <LL_ADC_REG_IsConversionOngoing>
 80019b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f040 8274 	bne.w	8001eae <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 8270 	bne.w	8001eae <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff41 	bl	800186a <LL_ADC_IsEnabled>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d14e      	bne.n	8001a8c <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <HAL_ADC_Init+0x278>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d028      	beq.n	8001a4a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_ADC_Init+0x284>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d109      	bne.n	8001a16 <HAL_ADC_Init+0x13a>
 8001a02:	4857      	ldr	r0, [pc, #348]	; (8001b60 <HAL_ADC_Init+0x284>)
 8001a04:	f7ff ff31 	bl	800186a <LL_ADC_IsEnabled>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	e008      	b.n	8001a28 <HAL_ADC_Init+0x14c>
 8001a16:	484f      	ldr	r0, [pc, #316]	; (8001b54 <HAL_ADC_Init+0x278>)
 8001a18:	f7ff ff27 	bl	800186a <LL_ADC_IsEnabled>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d02f      	beq.n	8001a8c <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_ADC_Init+0x284>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_Init+0x15e>
 8001a36:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_ADC_Init+0x288>)
 8001a38:	e000      	b.n	8001a3c <HAL_ADC_Init+0x160>
 8001a3a:	4a4b      	ldr	r2, [pc, #300]	; (8001b68 <HAL_ADC_Init+0x28c>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7ff fe6e 	bl	8001724 <LL_ADC_SetCommonClock>
 8001a48:	e020      	b.n	8001a8c <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f023 010c 	bic.w	r1, r3, #12
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d005      	beq.n	8001a6c <HAL_ADC_Init+0x190>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	e000      	b.n	8001a6e <HAL_ADC_Init+0x192>
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <HAL_ADC_Init+0x28c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001a86:	4938      	ldr	r1, [pc, #224]	; (8001b68 <HAL_ADC_Init+0x28c>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a30      	ldr	r2, [pc, #192]	; (8001b54 <HAL_ADC_Init+0x278>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d010      	beq.n	8001ab8 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001aa2:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001aa8:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ab0:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	623b      	str	r3, [r7, #32]
 8001ab6:	e030      	b.n	8001b1a <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7f1b      	ldrb	r3, [r3, #28]
 8001abc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac4:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac6:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001acc:	2a00      	cmp	r2, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_ADC_Init+0x1fa>
 8001ad0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad4:	e000      	b.n	8001ad8 <HAL_ADC_Init+0x1fc>
 8001ad6:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ad8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ade:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da04      	bge.n	8001af2 <HAL_ADC_Init+0x216>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001af0:	e001      	b.n	8001af6 <HAL_ADC_Init+0x21a>
 8001af2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001af6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4918      	ldr	r1, [pc, #96]	; (8001b60 <HAL_ADC_Init+0x284>)
 8001afe:	428b      	cmp	r3, r1
 8001b00:	d103      	bne.n	8001b0a <HAL_ADC_Init+0x22e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b08:	e003      	b.n	8001b12 <HAL_ADC_Init+0x236>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b10:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001b12:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d12f      	bne.n	8001b84 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_ADC_Init+0x278>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	3b01      	subs	r3, #1
 8001b34:	045b      	lsls	r3, r3, #17
 8001b36:	6a3a      	ldr	r2, [r7, #32]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	e022      	b.n	8001b84 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d111      	bne.n	8001b6c <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	e018      	b.n	8001b84 <HAL_ADC_Init+0x2a8>
 8001b52:	bf00      	nop
 8001b54:	46021000 	.word	0x46021000
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	053e2d63 	.word	0x053e2d63
 8001b60:	42028000 	.word	0x42028000
 8001b64:	42028308 	.word	0x42028308
 8001b68:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b70:	f043 0220 	orr.w	r2, r3, #32
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a93      	ldr	r2, [pc, #588]	; (8001dd8 <HAL_ADC_Init+0x4fc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	6a3a      	ldr	r2, [r7, #32]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4b8a      	ldr	r3, [pc, #552]	; (8001ddc <HAL_ADC_Init+0x500>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	6a39      	ldr	r1, [r7, #32]
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	60d3      	str	r3, [r2, #12]
 8001bbe:	e033      	b.n	8001c28 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d009      	beq.n	8001bdc <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	6a3a      	ldr	r2, [r7, #32]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8001be6:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	6a39      	ldr	r1, [r7, #32]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6a      	ldr	r2, [pc, #424]	; (8001dd8 <HAL_ADC_Init+0x4fc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	f000 8093 	beq.w	8001d5a <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fe29 	bl	8001890 <LL_ADC_REG_IsConversionOngoing>
 8001c3e:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fe36 	bl	80018b6 <LL_ADC_INJ_IsConversionOngoing>
 8001c4a:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d161      	bne.n	8001d16 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d15e      	bne.n	8001d16 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7f1b      	ldrb	r3, [r3, #28]
 8001c5c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	495f      	ldr	r1, [pc, #380]	; (8001de0 <HAL_ADC_Init+0x504>)
 8001c64:	428b      	cmp	r3, r1
 8001c66:	d102      	bne.n	8001c6e <HAL_ADC_Init+0x392>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Init+0x398>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c72:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	6a39      	ldr	r1, [r7, #32]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f7ff fd51 	bl	800174a <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <HAL_ADC_Init+0x508>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001cc6:	0411      	lsls	r1, r2, #16
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cde:	0892      	lsrs	r2, r2, #2
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	e007      	b.n	8001d00 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d10c      	bne.n	8001d38 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f023 010f 	bic.w	r1, r3, #15
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
 8001d36:	e007      	b.n	8001d48 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 020f 	bic.w	r2, r2, #15
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d4c:	f023 0303 	bic.w	r3, r3, #3
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d58:	e0b2      	b.n	8001ec0 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001d62:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8001d68:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8001d6e:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d103      	bne.n	8001d88 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_ADC_Init+0x50c>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	69f9      	ldr	r1, [r7, #28]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da4:	461a      	mov	r2, r3
 8001da6:	2100      	movs	r1, #0
 8001da8:	f7ff fcf2 	bl	8001790 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	461a      	mov	r2, r3
 8001db6:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001dba:	f7ff fce9 	bl	8001790 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d112      	bne.n	8001dec <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f062 020f 	orn	r2, r2, #15
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
 8001dd6:	e044      	b.n	8001e62 <HAL_ADC_Init+0x586>
 8001dd8:	46021000 	.word	0x46021000
 8001ddc:	fff0c013 	.word	0xfff0c013
 8001de0:	42028000 	.word	0x42028000
 8001de4:	fc00f81e 	.word	0xfc00f81e
 8001de8:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df4:	d135      	bne.n	8001e62 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	e00d      	b.n	8001e18 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	d006      	beq.n	8001e20 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b07      	cmp	r3, #7
 8001e1c:	d9ee      	bls.n	8001dfc <HAL_ADC_Init+0x520>
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8001e20:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f062 020f 	orn	r2, r2, #15
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
 8001e38:	e013      	b.n	8001e62 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f003 031c 	and.w	r3, r3, #28
 8001e4c:	f06f 020f 	mvn.w	r2, #15
 8001e50:	fa02 f103 	lsl.w	r1, r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_ADC_Init+0x5f0>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	6a3a      	ldr	r2, [r7, #32]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d10b      	bne.n	8001e8a <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e7c:	f023 0303 	bic.w	r3, r3, #3
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e88:	e01a      	b.n	8001ec0 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e8e:	f023 0312 	bic.w	r3, r3, #18
 8001e92:	f043 0210 	orr.w	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001eac:	e008      	b.n	8001ec0 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8001ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	833ffff3 	.word	0x833ffff3

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff4c 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800204e:	f7ff ff63 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002052:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7ff ffb3 	bl	8001fc4 <NVIC_EncodePriority>
 800205e:	4602      	mov	r2, r0
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff82 	bl	8001f70 <__NVIC_SetPriority>
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff56 	bl	8001f34 <__NVIC_EnableIRQ>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020a2:	e1ba      	b.n	800241a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 81aa 	beq.w	8002414 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_GPIO_Init+0x188>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d15d      	bne.n	8002184 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80020ce:	2201      	movs	r2, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	4013      	ands	r3, r2
 80020dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80020f8:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_GPIO_Init+0x18c>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002100:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002102:	4a46      	ldr	r2, [pc, #280]	; (800221c <HAL_GPIO_Init+0x18c>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	3208      	adds	r2, #8
 8002116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	4013      	ands	r3, r2
 8002130:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220b      	movs	r2, #11
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	4313      	orrs	r3, r2
 8002144:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	3208      	adds	r2, #8
 800214e:	69f9      	ldr	r1, [r7, #28]
 8002150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	4013      	ands	r3, r2
 800216a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2202      	movs	r2, #2
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	4313      	orrs	r3, r2
 800217a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e067      	b.n	8002254 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x104>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d145      	bne.n	8002220 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	69f9      	ldr	r1, [r7, #28]
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	4313      	orrs	r3, r2
 800220c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e01e      	b.n	8002254 <HAL_GPIO_Init+0x1c4>
 8002216:	bf00      	nop
 8002218:	46020000 	.word	0x46020000
 800221c:	08009d1c 	.word	0x08009d1c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	4013      	ands	r3, r2
 8002236:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0203 	and.w	r2, r3, #3
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	4313      	orrs	r3, r2
 800224c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d00b      	beq.n	8002274 <HAL_GPIO_Init+0x1e4>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d007      	beq.n	8002274 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002268:	2b11      	cmp	r3, #17
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b12      	cmp	r3, #18
 8002272:	d130      	bne.n	80022d6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	4013      	ands	r3, r2
 800228a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	4313      	orrs	r3, r2
 800229c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80022aa:	2201      	movs	r2, #1
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 0201 	and.w	r2, r3, #1
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d017      	beq.n	800230e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	4313      	orrs	r3, r2
 8002306:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d07c      	beq.n	8002414 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800231a:	4a47      	ldr	r2, [pc, #284]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3318      	adds	r3, #24
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	4013      	ands	r3, r2
 800233c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0a9a      	lsrs	r2, r3, #10
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_GPIO_Init+0x3ac>)
 8002344:	4013      	ands	r3, r2
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	00d2      	lsls	r2, r2, #3
 800234e:	4093      	lsls	r3, r2
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	4313      	orrs	r3, r2
 8002354:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002356:	4938      	ldr	r1, [pc, #224]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3318      	adds	r3, #24
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	4013      	ands	r3, r2
 8002372:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002388:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	4013      	ands	r3, r2
 800239c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80023b2:	4a21      	ldr	r2, [pc, #132]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 80023ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80023de:	4a16      	ldr	r2, [pc, #88]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 80023e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_GPIO_Init+0x3a8>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3301      	adds	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	f47f ae3d 	bne.w	80020a4 <HAL_GPIO_Init+0x14>
  }
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3724      	adds	r7, #36	; 0x24
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	46022000 	.word	0x46022000
 800243c:	002f7f7f 	.word	0x002f7f7f

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800245c:	e002      	b.n	8002464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e007      	b.n	800249e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0204 	bic.w	r2, r3, #4
 8002496:	4905      	ldr	r1, [pc, #20]	; (80024ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40030400 	.word	0x40030400

080024b0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_ICACHE_Enable+0x1c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_ICACHE_Enable+0x1c>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40030400 	.word	0x40030400

080024d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	b08f      	sub	sp, #60	; 0x3c
 80024d4:	af0a      	add	r7, sp, #40	; 0x28
 80024d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e116      	b.n	8002710 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d106      	bne.n	8002502 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7fe ff21 	bl	8001344 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f005 fb4d 	bl	8007bc0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	687e      	ldr	r6, [r7, #4]
 800252e:	466d      	mov	r5, sp
 8002530:	f106 0410 	add.w	r4, r6, #16
 8002534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002540:	e885 0003 	stmia.w	r5, {r0, r1}
 8002544:	1d33      	adds	r3, r6, #4
 8002546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002548:	6838      	ldr	r0, [r7, #0]
 800254a:	f005 fb0d 	bl	8007b68 <USB_CoreInit>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0d7      	b.n	8002710 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f005 fb3b 	bl	8007be2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e04a      	b.n	8002608 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	333d      	adds	r3, #61	; 0x3d
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	333c      	adds	r3, #60	; 0x3c
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	b298      	uxth	r0, r3
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3344      	adds	r3, #68	; 0x44
 80025ae:	4602      	mov	r2, r0
 80025b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3340      	adds	r3, #64	; 0x40
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3348      	adds	r3, #72	; 0x48
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	334c      	adds	r3, #76	; 0x4c
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	3354      	adds	r3, #84	; 0x54
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	3301      	adds	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3af      	bcc.n	8002572 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e044      	b.n	80026a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3301      	adds	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3b5      	bcc.n	8002618 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	687e      	ldr	r6, [r7, #4]
 80026b4:	466d      	mov	r5, sp
 80026b6:	f106 0410 	add.w	r4, r6, #16
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ca:	1d33      	adds	r3, r6, #4
 80026cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f005 fad4 	bl	8007c7c <USB_DevInit>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e014      	b.n	8002710 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f80a 	bl	8002718 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f005 fc82 	bl	8008012 <USB_DevDisconnect>

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002718 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274a:	f043 0303 	orr.w	r3, r3, #3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002770:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d101      	bne.n	800277e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e057      	b.n	800282e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d90a      	bls.n	800279c <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4313      	orrs	r3, r2
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002798:	60d3      	str	r3, [r2, #12]
 800279a:	e007      	b.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80027a4:	4925      	ldr	r1, [pc, #148]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a24      	ldr	r2, [pc, #144]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	099b      	lsrs	r3, r3, #6
 80027b8:	2232      	movs	r2, #50	; 0x32
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	3301      	adds	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80027ca:	e002      	b.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0x84>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f3      	bne.n	80027cc <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01b      	beq.n	8002822 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	2232      	movs	r2, #50	; 0x32
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	3301      	adds	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002808:	e002      	b.n	8002810 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3b01      	subs	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <HAL_PWREx_ControlVoltageScaling+0xc2>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f3      	bne.n	800280a <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e000      	b.n	800282e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	46020800 	.word	0x46020800
 8002840:	20000000 	.word	0x20000000
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_PWREx_GetVoltageRange+0x18>)
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	46020800 	.word	0x46020800

08002864 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_PWREx_ConfigSupply+0x94>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a22      	ldr	r2, [pc, #136]	; (80028fc <HAL_PWREx_ConfigSupply+0x98>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	2232      	movs	r2, #50	; 0x32
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_PWREx_ConfigSupply+0x98>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d113      	bne.n	80028b8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_PWREx_ConfigSupply+0x9c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_PWREx_ConfigSupply+0x9c>)
 8002896:	f023 0302 	bic.w	r3, r3, #2
 800289a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800289c:	e002      	b.n	80028a4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_PWREx_ConfigSupply+0x9c>)
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d116      	bne.n	80028de <HAL_PWREx_ConfigSupply+0x7a>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f3      	bne.n	800289e <HAL_PWREx_ConfigSupply+0x3a>
 80028b6:	e012      	b.n	80028de <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_PWREx_ConfigSupply+0x9c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_PWREx_ConfigSupply+0x9c>)
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80028c4:	e002      	b.n	80028cc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_PWREx_ConfigSupply+0x9c>)
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <HAL_PWREx_ConfigSupply+0x7a>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f3      	bne.n	80028c6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e000      	b.n	80028ea <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000000 	.word	0x20000000
 80028fc:	10624dd3 	.word	0x10624dd3
 8002900:	46020800 	.word	0x46020800

08002904 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_PWREx_EnableVddUSB+0x1c>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_PWREx_EnableVddUSB+0x1c>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	6113      	str	r3, [r2, #16]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	46020800 	.word	0x46020800

08002924 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_PWREx_EnableVddIO2+0x1c>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_PWREx_EnableVddIO2+0x1c>)
 800292e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002932:	6113      	str	r3, [r2, #16]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	46020800 	.word	0x46020800

08002944 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	46020800 	.word	0x46020800

08002964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08e      	sub	sp, #56	; 0x38
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f000 bec3 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b9c      	ldr	r3, [pc, #624]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002988:	4b99      	ldr	r3, [pc, #612]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8172 	beq.w	8002c84 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_RCC_OscConfig+0x52>
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	f040 80e4 	bne.w	8002b76 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	f040 80e0 	bne.w	8002b76 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029b6:	4b8e      	ldr	r3, [pc, #568]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <HAL_RCC_OscConfig+0x6c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f000 be9a 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d4:	4b86      	ldr	r3, [pc, #536]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_RCC_OscConfig+0x86>
 80029e0:	4b83      	ldr	r3, [pc, #524]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80029e8:	e005      	b.n	80029f6 <HAL_RCC_OscConfig+0x92>
 80029ea:	4b81      	ldr	r3, [pc, #516]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 80029ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d255      	bcs.n	8002aa6 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 fa0b 	bl	8003e20 <RCC_SetFlashLatencyFromMSIRange>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f000 be77 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a16:	4b76      	ldr	r3, [pc, #472]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4a75      	ldr	r2, [pc, #468]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a20:	6093      	str	r3, [r2, #8]
 8002a22:	4b73      	ldr	r3, [pc, #460]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	4970      	ldr	r1, [pc, #448]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002a3c:	d309      	bcc.n	8002a52 <HAL_RCC_OscConfig+0xee>
 8002a3e:	4b6c      	ldr	r3, [pc, #432]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f023 021f 	bic.w	r2, r3, #31
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4969      	ldr	r1, [pc, #420]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60cb      	str	r3, [r1, #12]
 8002a50:	e07e      	b.n	8002b50 <HAL_RCC_OscConfig+0x1ec>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	da0a      	bge.n	8002a70 <HAL_RCC_OscConfig+0x10c>
 8002a5a:	4b65      	ldr	r3, [pc, #404]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	015b      	lsls	r3, r3, #5
 8002a68:	4961      	ldr	r1, [pc, #388]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60cb      	str	r3, [r1, #12]
 8002a6e:	e06f      	b.n	8002b50 <HAL_RCC_OscConfig+0x1ec>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d30a      	bcc.n	8002a90 <HAL_RCC_OscConfig+0x12c>
 8002a7a:	4b5d      	ldr	r3, [pc, #372]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	4959      	ldr	r1, [pc, #356]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
 8002a8e:	e05f      	b.n	8002b50 <HAL_RCC_OscConfig+0x1ec>
 8002a90:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	03db      	lsls	r3, r3, #15
 8002a9e:	4954      	ldr	r1, [pc, #336]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e054      	b.n	8002b50 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002aa6:	4b52      	ldr	r3, [pc, #328]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4a51      	ldr	r2, [pc, #324]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ab0:	6093      	str	r3, [r2, #8]
 8002ab2:	4b4f      	ldr	r3, [pc, #316]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	494c      	ldr	r1, [pc, #304]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002acc:	d309      	bcc.n	8002ae2 <HAL_RCC_OscConfig+0x17e>
 8002ace:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 021f 	bic.w	r2, r3, #31
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4945      	ldr	r1, [pc, #276]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
 8002ae0:	e028      	b.n	8002b34 <HAL_RCC_OscConfig+0x1d0>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	da0a      	bge.n	8002b00 <HAL_RCC_OscConfig+0x19c>
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	015b      	lsls	r3, r3, #5
 8002af8:	493d      	ldr	r1, [pc, #244]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60cb      	str	r3, [r1, #12]
 8002afe:	e019      	b.n	8002b34 <HAL_RCC_OscConfig+0x1d0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d30a      	bcc.n	8002b20 <HAL_RCC_OscConfig+0x1bc>
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	4935      	ldr	r1, [pc, #212]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
 8002b1e:	e009      	b.n	8002b34 <HAL_RCC_OscConfig+0x1d0>
 8002b20:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	03db      	lsls	r3, r3, #15
 8002b2e:	4930      	ldr	r1, [pc, #192]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 f96e 	bl	8003e20 <RCC_SetFlashLatencyFromMSIRange>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f000 bdda 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002b50:	f001 f8d8 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x290>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fc7f 	bl	800145c <HAL_InitTick>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 808a 	beq.w	8002c82 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8002b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b72:	f000 bdc7 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d066      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002b8a:	f7fe fd9b 	bl	80016c4 <HAL_GetTick>
 8002b8e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002b90:	e009      	b.n	8002ba6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b92:	f7fe fd97 	bl	80016c4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d902      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f000 bdaf 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ef      	beq.n	8002b92 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bbc:	6093      	str	r3, [r2, #8]
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	4909      	ldr	r1, [pc, #36]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002bd8:	d30e      	bcc.n	8002bf8 <HAL_RCC_OscConfig+0x294>
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f023 021f 	bic.w	r2, r3, #31
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4902      	ldr	r1, [pc, #8]	; (8002bf0 <HAL_RCC_OscConfig+0x28c>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
 8002bec:	e04a      	b.n	8002c84 <HAL_RCC_OscConfig+0x320>
 8002bee:	bf00      	nop
 8002bf0:	46020c00 	.word	0x46020c00
 8002bf4:	20000004 	.word	0x20000004
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	da0a      	bge.n	8002c16 <HAL_RCC_OscConfig+0x2b2>
 8002c00:	4b9b      	ldr	r3, [pc, #620]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	015b      	lsls	r3, r3, #5
 8002c0e:	4998      	ldr	r1, [pc, #608]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60cb      	str	r3, [r1, #12]
 8002c14:	e036      	b.n	8002c84 <HAL_RCC_OscConfig+0x320>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1e:	d30a      	bcc.n	8002c36 <HAL_RCC_OscConfig+0x2d2>
 8002c20:	4b93      	ldr	r3, [pc, #588]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	4990      	ldr	r1, [pc, #576]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60cb      	str	r3, [r1, #12]
 8002c34:	e026      	b.n	8002c84 <HAL_RCC_OscConfig+0x320>
 8002c36:	4b8e      	ldr	r3, [pc, #568]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	03db      	lsls	r3, r3, #15
 8002c44:	498a      	ldr	r1, [pc, #552]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60cb      	str	r3, [r1, #12]
 8002c4a:	e01b      	b.n	8002c84 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002c4c:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a87      	ldr	r2, [pc, #540]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c58:	f7fe fd34 	bl	80016c4 <HAL_GetTick>
 8002c5c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c60:	f7fe fd30 	bl	80016c4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d902      	bls.n	8002c74 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	f000 bd48 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ef      	bne.n	8002c60 <HAL_RCC_OscConfig+0x2fc>
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8094 	beq.w	8002dba <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x340>
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d110      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4b72      	ldr	r3, [pc, #456]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8083 	beq.w	8002db8 <HAL_RCC_OscConfig+0x454>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d17e      	bne.n	8002db8 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f000 bd22 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d106      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x374>
 8002cca:	4b69      	ldr	r3, [pc, #420]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a68      	ldr	r2, [pc, #416]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e041      	b.n	8002d5c <HAL_RCC_OscConfig+0x3f8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x3a4>
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a62      	ldr	r2, [pc, #392]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5f      	ldr	r2, [pc, #380]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002cf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e029      	b.n	8002d5c <HAL_RCC_OscConfig+0x3f8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002d10:	d112      	bne.n	8002d38 <HAL_RCC_OscConfig+0x3d4>
 8002d12:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a56      	ldr	r2, [pc, #344]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a53      	ldr	r2, [pc, #332]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b51      	ldr	r3, [pc, #324]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a50      	ldr	r2, [pc, #320]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e011      	b.n	8002d5c <HAL_RCC_OscConfig+0x3f8>
 8002d38:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a49      	ldr	r2, [pc, #292]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a46      	ldr	r2, [pc, #280]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d014      	beq.n	8002d8e <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8002d64:	f7fe fcae 	bl	80016c4 <HAL_GetTick>
 8002d68:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6a:	e009      	b.n	8002d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fcaa 	bl	80016c4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d902      	bls.n	8002d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	f000 bcc2 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d80:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ef      	beq.n	8002d6c <HAL_RCC_OscConfig+0x408>
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fc99 	bl	80016c4 <HAL_GetTick>
 8002d92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d94:	e009      	b.n	8002daa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d96:	f7fe fc95 	bl	80016c4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	; 0x64
 8002da2:	d902      	bls.n	8002daa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f000 bcad 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ef      	bne.n	8002d96 <HAL_RCC_OscConfig+0x432>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d066      	beq.n	8002e94 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x474>
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d11a      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d117      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_RCC_OscConfig+0x48e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f000 bc89 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	491b      	ldr	r1, [pc, #108]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e06:	e045      	b.n	8002e94 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d024      	beq.n	8002e5a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e1c:	f7fe fc52 	bl	80016c4 <HAL_GetTick>
 8002e20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e22:	e009      	b.n	8002e38 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7fe fc4e 	bl	80016c4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d902      	bls.n	8002e38 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	f000 bc66 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ef      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	4907      	ldr	r1, [pc, #28]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	610b      	str	r3, [r1, #16]
 8002e58:	e01c      	b.n	8002e94 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_RCC_OscConfig+0x50c>)
 8002e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e66:	f7fe fc2d 	bl	80016c4 <HAL_GetTick>
 8002e6a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e6c:	e00c      	b.n	8002e88 <HAL_RCC_OscConfig+0x524>
 8002e6e:	bf00      	nop
 8002e70:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e74:	f7fe fc26 	bl	80016c4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d902      	bls.n	8002e88 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	f000 bc3e 	b.w	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e88:	4baf      	ldr	r3, [pc, #700]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ef      	bne.n	8002e74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80c7 	beq.w	8003030 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea8:	4ba7      	ldr	r3, [pc, #668]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d111      	bne.n	8002eda <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4ba4      	ldr	r3, [pc, #656]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebc:	4aa2      	ldr	r2, [pc, #648]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ec6:	4ba0      	ldr	r3, [pc, #640]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002eda:	4b9c      	ldr	r3, [pc, #624]	; (800314c <HAL_RCC_OscConfig+0x7e8>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002ee6:	4b99      	ldr	r3, [pc, #612]	; (800314c <HAL_RCC_OscConfig+0x7e8>)
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	4a98      	ldr	r2, [pc, #608]	; (800314c <HAL_RCC_OscConfig+0x7e8>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fbe7 	bl	80016c4 <HAL_GetTick>
 8002ef6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe fbe3 	bl	80016c4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e3fb      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f0c:	4b8f      	ldr	r3, [pc, #572]	; (800314c <HAL_RCC_OscConfig+0x7e8>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05f      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002f20:	4b89      	ldr	r3, [pc, #548]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f26:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d037      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e3da      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f58:	4b7b      	ldr	r3, [pc, #492]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f5e:	4a7a      	ldr	r2, [pc, #488]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002f60:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002f64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002f68:	f7fe fbac 	bl	80016c4 <HAL_GetTick>
 8002f6c:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe fba8 	bl	80016c4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e3c0      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f82:	4b71      	ldr	r3, [pc, #452]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ef      	bne.n	8002f70 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002f90:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	496a      	ldr	r1, [pc, #424]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002fa6:	4b68      	ldr	r3, [pc, #416]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fac:	4a66      	ldr	r2, [pc, #408]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002fb6:	f7fe fb85 	bl	80016c4 <HAL_GetTick>
 8002fba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fb81 	bl	80016c4 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e399      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002fd0:	4b5d      	ldr	r3, [pc, #372]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ef      	beq.n	8002fbe <HAL_RCC_OscConfig+0x65a>
 8002fde:	e01b      	b.n	8003018 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fe6:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8002fe8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002fec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002ff0:	f7fe fb68 	bl	80016c4 <HAL_GetTick>
 8002ff4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fb64 	bl	80016c4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e37c      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800300a:	4b4f      	ldr	r3, [pc, #316]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 800300c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ef      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003018:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b49      	ldr	r3, [pc, #292]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	4a48      	ldr	r2, [pc, #288]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8112 	beq.w	8003262 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003044:	4b40      	ldr	r3, [pc, #256]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d111      	bne.n	8003076 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003052:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003058:	4a3b      	ldr	r2, [pc, #236]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003062:	4b39      	ldr	r3, [pc, #228]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003076:	4b35      	ldr	r3, [pc, #212]	; (800314c <HAL_RCC_OscConfig+0x7e8>)
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003082:	4b32      	ldr	r3, [pc, #200]	; (800314c <HAL_RCC_OscConfig+0x7e8>)
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	4a31      	ldr	r2, [pc, #196]	; (800314c <HAL_RCC_OscConfig+0x7e8>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fe fb19 	bl	80016c4 <HAL_GetTick>
 8003092:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fe fb15 	bl	80016c4 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e32d      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030a8:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_RCC_OscConfig+0x7e8>)
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01f      	beq.n	8003100 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 80030ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030dc:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 80030de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030e2:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030ec:	e018      	b.n	8003120 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 80030f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003106:	4a10      	ldr	r2, [pc, #64]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <HAL_RCC_OscConfig+0x7e4>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d058      	beq.n	80031da <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8003128:	f7fe facc 	bl	80016c4 <HAL_GetTick>
 800312c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	e00f      	b.n	8003150 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe fac8 	bl	80016c4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d906      	bls.n	8003150 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e2de      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
 8003146:	bf00      	nop
 8003148:	46020c00 	.word	0x46020c00
 800314c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003150:	4b9c      	ldr	r3, [pc, #624]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0e8      	beq.n	8003130 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800316a:	4b96      	ldr	r3, [pc, #600]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800316c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003170:	4a94      	ldr	r2, [pc, #592]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe faa2 	bl	80016c4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e2b8      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003192:	4b8c      	ldr	r3, [pc, #560]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ed      	beq.n	800317c <HAL_RCC_OscConfig+0x818>
 80031a0:	e053      	b.n	800324a <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031a2:	4b88      	ldr	r3, [pc, #544]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80031a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031a8:	4a86      	ldr	r2, [pc, #536]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80031aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe fa86 	bl	80016c4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e29c      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031ca:	4b7e      	ldr	r3, [pc, #504]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80031cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ed      	bne.n	80031b4 <HAL_RCC_OscConfig+0x850>
 80031d8:	e037      	b.n	800324a <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80031da:	f7fe fa73 	bl	80016c4 <HAL_GetTick>
 80031de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe fa6f 	bl	80016c4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e285      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f8:	4b72      	ldr	r3, [pc, #456]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80031fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ed      	bne.n	80031e2 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003206:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01a      	beq.n	800324a <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003214:	4b6b      	ldr	r3, [pc, #428]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800321a:	4a6a      	ldr	r2, [pc, #424]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800321c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003220:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe fa4d 	bl	80016c4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e263      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800323c:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800323e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ed      	bne.n	8003226 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003252:	4b5c      	ldr	r3, [pc, #368]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003258:	4a5a      	ldr	r2, [pc, #360]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d036      	beq.n	80032dc <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d019      	beq.n	80032aa <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003276:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a52      	ldr	r2, [pc, #328]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800327c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003280:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003282:	f7fe fa1f 	bl	80016c4 <HAL_GetTick>
 8003286:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328a:	f7fe fa1b 	bl	80016c4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e233      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800329c:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x926>
 80032a8:	e018      	b.n	80032dc <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80032aa:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a45      	ldr	r2, [pc, #276]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80032b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032b6:	f7fe fa05 	bl	80016c4 <HAL_GetTick>
 80032ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032be:	f7fe fa01 	bl	80016c4 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e219      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032d0:	4b3c      	ldr	r3, [pc, #240]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d036      	beq.n	8003356 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d019      	beq.n	8003324 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80032f0:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a33      	ldr	r2, [pc, #204]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80032f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032fc:	f7fe f9e2 	bl	80016c4 <HAL_GetTick>
 8003300:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003304:	f7fe f9de 	bl	80016c4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1f6      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003316:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x9a0>
 8003322:	e018      	b.n	8003356 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800332a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003330:	f7fe f9c8 	bl	80016c4 <HAL_GetTick>
 8003334:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003338:	f7fe f9c4 	bl	80016c4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e1dc      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800334a:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d07f      	beq.n	8003462 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	2b00      	cmp	r3, #0
 8003368:	d062      	beq.n	8003430 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003374:	6093      	str	r3, [r2, #8]
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	4910      	ldr	r1, [pc, #64]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003390:	d309      	bcc.n	80033a6 <HAL_RCC_OscConfig+0xa42>
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f023 021f 	bic.w	r2, r3, #31
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4909      	ldr	r1, [pc, #36]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
 80033a4:	e02a      	b.n	80033fc <HAL_RCC_OscConfig+0xa98>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da0c      	bge.n	80033c8 <HAL_RCC_OscConfig+0xa64>
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	015b      	lsls	r3, r3, #5
 80033bc:	4901      	ldr	r1, [pc, #4]	; (80033c4 <HAL_RCC_OscConfig+0xa60>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	60cb      	str	r3, [r1, #12]
 80033c2:	e01b      	b.n	80033fc <HAL_RCC_OscConfig+0xa98>
 80033c4:	46020c00 	.word	0x46020c00
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d30a      	bcc.n	80033e8 <HAL_RCC_OscConfig+0xa84>
 80033d2:	4ba5      	ldr	r3, [pc, #660]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	49a1      	ldr	r1, [pc, #644]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60cb      	str	r3, [r1, #12]
 80033e6:	e009      	b.n	80033fc <HAL_RCC_OscConfig+0xa98>
 80033e8:	4b9f      	ldr	r3, [pc, #636]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	03db      	lsls	r3, r3, #15
 80033f6:	499c      	ldr	r1, [pc, #624]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80033fc:	4b9a      	ldr	r3, [pc, #616]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a99      	ldr	r2, [pc, #612]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003402:	f043 0310 	orr.w	r3, r3, #16
 8003406:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003408:	f7fe f95c 	bl	80016c4 <HAL_GetTick>
 800340c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003410:	f7fe f958 	bl	80016c4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e170      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003422:	4b91      	ldr	r3, [pc, #580]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xaac>
 800342e:	e018      	b.n	8003462 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003430:	4b8d      	ldr	r3, [pc, #564]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a8c      	ldr	r2, [pc, #560]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800343c:	f7fe f942 	bl	80016c4 <HAL_GetTick>
 8003440:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003444:	f7fe f93e 	bl	80016c4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e156      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003456:	4b84      	ldr	r3, [pc, #528]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 814b 	beq.w	8003702 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003472:	4b7d      	ldr	r3, [pc, #500]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b0c      	cmp	r3, #12
 800347c:	f000 80fa 	beq.w	8003674 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	2b02      	cmp	r3, #2
 8003486:	f040 80cc 	bne.w	8003622 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b77      	ldr	r3, [pc, #476]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a76      	ldr	r2, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003494:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003496:	f7fe f915 	bl	80016c4 <HAL_GetTick>
 800349a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe f911 	bl	80016c4 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e129      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034b0:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d111      	bne.n	80034ee <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80034ca:	4b67      	ldr	r3, [pc, #412]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80034cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d0:	4a65      	ldr	r2, [pc, #404]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80034dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80034ee:	4b5f      	ldr	r3, [pc, #380]	; (800366c <HAL_RCC_OscConfig+0xd08>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003502:	4b5a      	ldr	r3, [pc, #360]	; (800366c <HAL_RCC_OscConfig+0xd08>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	4a59      	ldr	r2, [pc, #356]	; (800366c <HAL_RCC_OscConfig+0xd08>)
 8003508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800350e:	4b56      	ldr	r3, [pc, #344]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003522:	3a01      	subs	r2, #1
 8003524:	0212      	lsls	r2, r2, #8
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800352c:	430a      	orrs	r2, r1
 800352e:	494e      	ldr	r1, [pc, #312]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003530:	4313      	orrs	r3, r2
 8003532:	628b      	str	r3, [r1, #40]	; 0x28
 8003534:	4b4c      	ldr	r3, [pc, #304]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003538:	4b4d      	ldr	r3, [pc, #308]	; (8003670 <HAL_RCC_OscConfig+0xd0c>)
 800353a:	4013      	ands	r3, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003540:	3a01      	subs	r2, #1
 8003542:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800354a:	3a01      	subs	r2, #1
 800354c:	0252      	lsls	r2, r2, #9
 800354e:	b292      	uxth	r2, r2
 8003550:	4311      	orrs	r1, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003556:	3a01      	subs	r2, #1
 8003558:	0412      	lsls	r2, r2, #16
 800355a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003564:	3a01      	subs	r2, #1
 8003566:	0612      	lsls	r2, r2, #24
 8003568:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800356c:	430a      	orrs	r2, r1
 800356e:	493e      	ldr	r1, [pc, #248]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003570:	4313      	orrs	r3, r2
 8003572:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003574:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 800357a:	f023 0310 	bic.w	r3, r3, #16
 800357e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003588:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003590:	00d2      	lsls	r2, r2, #3
 8003592:	4935      	ldr	r1, [pc, #212]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003594:	4313      	orrs	r3, r2
 8003596:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003598:	4b33      	ldr	r3, [pc, #204]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	4a32      	ldr	r2, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 800359e:	f043 0310 	orr.w	r3, r3, #16
 80035a2:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80035a4:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	f023 020c 	bic.w	r2, r3, #12
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	492d      	ldr	r1, [pc, #180]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80035b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d105      	bne.n	80035ca <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80035be:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0xd08>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4a2a      	ldr	r2, [pc, #168]	; (800366c <HAL_RCC_OscConfig+0xd08>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c8:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80035ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80035d2:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80035d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d8:	4a23      	ldr	r2, [pc, #140]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80035da:	f023 0304 	bic.w	r3, r3, #4
 80035de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035e2:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	4a20      	ldr	r2, [pc, #128]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ec:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 80035f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035fa:	f7fe f863 	bl	80016c4 <HAL_GetTick>
 80035fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe f85f 	bl	80016c4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e077      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0xc9e>
 8003620:	e06f      	b.n	8003702 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a10      	ldr	r2, [pc, #64]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800362c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800362e:	f7fe f849 	bl	80016c4 <HAL_GetTick>
 8003632:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe f845 	bl	80016c4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e05d      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	4a03      	ldr	r2, [pc, #12]	; (8003668 <HAL_RCC_OscConfig+0xd04>)
 800365a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	6293      	str	r3, [r2, #40]	; 0x28
 8003664:	e04d      	b.n	8003702 <HAL_RCC_OscConfig+0xd9e>
 8003666:	bf00      	nop
 8003668:	46020c00 	.word	0x46020c00
 800366c:	46020800 	.word	0x46020800
 8003670:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_RCC_OscConfig+0xda8>)
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_OscConfig+0xda8>)
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	2b01      	cmp	r3, #1
 8003686:	d03a      	beq.n	80036fe <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0203 	and.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d133      	bne.n	80036fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d12a      	bne.n	80036fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	0b1b      	lsrs	r3, r3, #12
 80036ac:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d122      	bne.n	80036fe <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d11a      	bne.n	80036fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d111      	bne.n	80036fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d108      	bne.n	80036fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	0e1b      	lsrs	r3, r3, #24
 80036f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3738      	adds	r7, #56	; 0x38
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	46020c00 	.word	0x46020c00

08003710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e1d9      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b9b      	ldr	r3, [pc, #620]	; (8003994 <HAL_RCC_ClockConfig+0x284>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b98      	ldr	r3, [pc, #608]	; (8003994 <HAL_RCC_ClockConfig+0x284>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 020f 	bic.w	r2, r3, #15
 800373a:	4996      	ldr	r1, [pc, #600]	; (8003994 <HAL_RCC_ClockConfig+0x284>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b94      	ldr	r3, [pc, #592]	; (8003994 <HAL_RCC_ClockConfig+0x284>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e1c1      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	4b8c      	ldr	r3, [pc, #560]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800376c:	429a      	cmp	r2, r3
 800376e:	d908      	bls.n	8003782 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003770:	4b89      	ldr	r3, [pc, #548]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	4986      	ldr	r1, [pc, #536]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 800377e:	4313      	orrs	r3, r2
 8003780:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	4b81      	ldr	r3, [pc, #516]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800379c:	429a      	cmp	r2, r3
 800379e:	d909      	bls.n	80037b4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80037a0:	4b7d      	ldr	r3, [pc, #500]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	497a      	ldr	r1, [pc, #488]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4b74      	ldr	r3, [pc, #464]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d908      	bls.n	80037e2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b71      	ldr	r3, [pc, #452]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	496e      	ldr	r1, [pc, #440]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d010      	beq.n	8003810 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	4b69      	ldr	r3, [pc, #420]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d908      	bls.n	8003810 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80037fe:	4b66      	ldr	r3, [pc, #408]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 020f 	bic.w	r2, r3, #15
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4963      	ldr	r1, [pc, #396]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 800380c:	4313      	orrs	r3, r2
 800380e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80d2 	beq.w	80039c2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d143      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382a:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d110      	bne.n	800385a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003838:	4b57      	ldr	r3, [pc, #348]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383e:	4a56      	ldr	r2, [pc, #344]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003848:	4b53      	ldr	r3, [pc, #332]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 800384a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800385a:	f7fd ff33 	bl	80016c4 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003860:	4b4e      	ldr	r3, [pc, #312]	; (800399c <HAL_RCC_ClockConfig+0x28c>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00f      	beq.n	800388c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800386e:	f7fd ff29 	bl	80016c4 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e12b      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003880:	4b46      	ldr	r3, [pc, #280]	; (800399c <HAL_RCC_ClockConfig+0x28c>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b41      	ldr	r3, [pc, #260]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	4a3f      	ldr	r2, [pc, #252]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 800389a:	f023 0304 	bic.w	r3, r3, #4
 800389e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d121      	bne.n	80038f2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e112      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ba:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d115      	bne.n	80038f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e106      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0fa      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0f2      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4926      	ldr	r1, [pc, #152]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003900:	4313      	orrs	r3, r2
 8003902:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003904:	f7fd fede 	bl	80016c4 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d112      	bne.n	8003938 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fd fed6 	bl	80016c4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e0d6      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800392a:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d1ee      	bne.n	8003914 <HAL_RCC_ClockConfig+0x204>
 8003936:	e044      	b.n	80039c2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d112      	bne.n	8003966 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003942:	f7fd febf 	bl	80016c4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0bf      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d1ee      	bne.n	8003942 <HAL_RCC_ClockConfig+0x232>
 8003964:	e02d      	b.n	80039c2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d123      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003970:	f7fd fea8 	bl	80016c4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0a8      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003986:	4b04      	ldr	r3, [pc, #16]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ee      	bne.n	8003970 <HAL_RCC_ClockConfig+0x260>
 8003992:	e016      	b.n	80039c2 <HAL_RCC_ClockConfig+0x2b2>
 8003994:	40022000 	.word	0x40022000
 8003998:	46020c00 	.word	0x46020c00
 800399c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a0:	f7fd fe90 	bl	80016c4 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e090      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039b6:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d1ee      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d010      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b43      	ldr	r3, [pc, #268]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	429a      	cmp	r2, r3
 80039dc:	d208      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80039de:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f023 020f 	bic.w	r2, r3, #15
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	493d      	ldr	r1, [pc, #244]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b3c      	ldr	r3, [pc, #240]	; (8003ae4 <HAL_RCC_ClockConfig+0x3d4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d210      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <HAL_RCC_ClockConfig+0x3d4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 020f 	bic.w	r2, r3, #15
 8003a06:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_RCC_ClockConfig+0x3d4>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b35      	ldr	r3, [pc, #212]	; (8003ae4 <HAL_RCC_ClockConfig+0x3d4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e05b      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d208      	bcs.n	8003a4e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4925      	ldr	r1, [pc, #148]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d209      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003a6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	4919      	ldr	r1, [pc, #100]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d208      	bcs.n	8003aae <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003a9c:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	490d      	ldr	r1, [pc, #52]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003aae:	f000 f821 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_RCC_ClockConfig+0x3d0>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	490a      	ldr	r1, [pc, #40]	; (8003ae8 <HAL_RCC_ClockConfig+0x3d8>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac4:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x3dc>)
 8003ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_ClockConfig+0x3e0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fcc5 	bl	800145c <HAL_InitTick>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	46020c00 	.word	0x46020c00
 8003ae4:	40022000 	.word	0x40022000
 8003ae8:	08009cc4 	.word	0x08009cc4
 8003aec:	20000000 	.word	0x20000000
 8003af0:	20000004 	.word	0x20000004

08003af4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b08b      	sub	sp, #44	; 0x2c
 8003af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b02:	4b7b      	ldr	r3, [pc, #492]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b0c:	4b78      	ldr	r3, [pc, #480]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d121      	bne.n	8003b66 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d11e      	bne.n	8003b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003b28:	4b71      	ldr	r3, [pc, #452]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003b34:	4b6e      	ldr	r3, [pc, #440]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b3a:	0b1b      	lsrs	r3, r3, #12
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	e005      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003b44:	4b6a      	ldr	r3, [pc, #424]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	0f1b      	lsrs	r3, r3, #28
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b50:	4a68      	ldr	r2, [pc, #416]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d110      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b64:	e00d      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b66:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d102      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b72:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b74:	623b      	str	r3, [r7, #32]
 8003b76:	e004      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b7e:	4b5e      	ldr	r3, [pc, #376]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b80:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	f040 80ac 	bne.w	8003ce2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003b8a:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003b94:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003ba2:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bae:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	08db      	lsrs	r3, r3, #3
 8003bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8086 	beq.w	8003cde <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d003      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0xec>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d022      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x130>
 8003bde:	e043      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003cfc <HAL_RCC_GetSysClockFreq+0x208>
 8003bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf2:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c02:	ed97 6a01 	vldr	s12, [r7, #4]
 8003c06:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003d00 <HAL_RCC_GetSysClockFreq+0x20c>
 8003c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003c22:	e046      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003cfc <HAL_RCC_GetSysClockFreq+0x208>
 8003c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c36:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c46:	ed97 6a01 	vldr	s12, [r7, #4]
 8003c4a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003d00 <HAL_RCC_GetSysClockFreq+0x20c>
 8003c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003c66:	e024      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c90:	ed97 6a01 	vldr	s12, [r7, #4]
 8003c94:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003d00 <HAL_RCC_GetSysClockFreq+0x20c>
 8003c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003cb0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	0e1b      	lsrs	r3, r3, #24
 8003cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd6:	ee17 3a90 	vmov	r3, s15
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	372c      	adds	r7, #44	; 0x2c
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	46020c00 	.word	0x46020c00
 8003cf4:	08009cdc 	.word	0x08009cdc
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	4b742400 	.word	0x4b742400
 8003d00:	46000000 	.word	0x46000000

08003d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003d08:	f7ff fef4 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_RCC_GetHCLKFreq+0x28>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4906      	ldr	r1, [pc, #24]	; (8003d30 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003d18:	5ccb      	ldrb	r3, [r1, r3]
 8003d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1e:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <HAL_RCC_GetHCLKFreq+0x30>)
 8003d20:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_RCC_GetHCLKFreq+0x30>)
 8003d24:	681b      	ldr	r3, [r3, #0]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	46020c00 	.word	0x46020c00
 8003d30:	08009cc4 	.word	0x08009cc4
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003d3c:	f7ff ffe2 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	46020c00 	.word	0x46020c00
 8003d5c:	08009cd4 	.word	0x08009cd4

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003d64:	f7ff ffce 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	46020c00 	.word	0x46020c00
 8003d84:	08009cd4 	.word	0x08009cd4

08003d88 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003d8c:	f7ff ffba 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4903      	ldr	r1, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK3Freq+0x24>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	46020c00 	.word	0x46020c00
 8003dac:	08009cd4 	.word	0x08009cd4

08003db0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	221f      	movs	r2, #31
 8003dbe:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003dc0:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCC_GetClockConfig+0x68>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_GetClockConfig+0x68>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <HAL_RCC_GetClockConfig+0x68>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_RCC_GetClockConfig+0x68>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_GetClockConfig+0x68>)
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_RCC_GetClockConfig+0x6c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 020f 	and.w	r2, r3, #15
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	46020c00 	.word	0x46020c00
 8003e1c:	40022000 	.word	0x40022000

08003e20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e28:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e36:	f7fe fd07 	bl	8002848 <HAL_PWREx_GetVoltageRange>
 8003e3a:	6178      	str	r0, [r7, #20]
 8003e3c:	e019      	b.n	8003e72 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e44:	4a37      	ldr	r2, [pc, #220]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e4e:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e5c:	f7fe fcf4 	bl	8002848 <HAL_PWREx_GetVoltageRange>
 8003e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e68:	4a2e      	ldr	r2, [pc, #184]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e6a:	f023 0304 	bic.w	r3, r3, #4
 8003e6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e78:	d003      	beq.n	8003e82 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e80:	d109      	bne.n	8003e96 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e88:	d202      	bcs.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003e8e:	e033      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003e94:	e030      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9c:	d208      	bcs.n	8003eb0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d102      	bne.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	e025      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e035      	b.n	8003f1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb6:	d90f      	bls.n	8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ec4:	d902      	bls.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e015      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003ecc:	2301      	movs	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e012      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	e00f      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ede:	d109      	bne.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee6:	d102      	bne.n	8003eee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003ee8:	2301      	movs	r3, #1
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	e004      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003eee:	2302      	movs	r3, #2
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e001      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 020f 	bic.w	r2, r3, #15
 8003f00:	4909      	ldr	r1, [pc, #36]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d001      	beq.n	8003f1a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	46020c00 	.word	0x46020c00
 8003f28:	40022000 	.word	0x40022000

08003f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b0ba      	sub	sp, #232	; 0xe8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f002 0401 	and.w	r4, r2, #1
 8003f50:	2500      	movs	r5, #0
 8003f52:	ea54 0305 	orrs.w	r3, r4, r5
 8003f56:	d00b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003f58:	4bcb      	ldr	r3, [pc, #812]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f5e:	f023 0103 	bic.w	r1, r3, #3
 8003f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f68:	4ac7      	ldr	r2, [pc, #796]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f002 0802 	and.w	r8, r2, #2
 8003f7c:	f04f 0900 	mov.w	r9, #0
 8003f80:	ea58 0309 	orrs.w	r3, r8, r9
 8003f84:	d00b      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003f86:	4bc0      	ldr	r3, [pc, #768]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f8c:	f023 010c 	bic.w	r1, r3, #12
 8003f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	4abc      	ldr	r2, [pc, #752]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f002 0a04 	and.w	sl, r2, #4
 8003faa:	f04f 0b00 	mov.w	fp, #0
 8003fae:	ea5a 030b 	orrs.w	r3, sl, fp
 8003fb2:	d00b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003fb4:	4bb4      	ldr	r3, [pc, #720]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fba:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	4ab0      	ldr	r2, [pc, #704]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f002 0308 	and.w	r3, r2, #8
 8003fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fe2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d00b      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003fec:	4ba6      	ldr	r3, [pc, #664]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ff2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	4aa2      	ldr	r2, [pc, #648]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ffe:	430b      	orrs	r3, r1
 8004000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f002 0310 	and.w	r3, r2, #16
 8004010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800401a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800401e:	460b      	mov	r3, r1
 8004020:	4313      	orrs	r3, r2
 8004022:	d00b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004024:	4b98      	ldr	r3, [pc, #608]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800402a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800402e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004034:	4a94      	ldr	r2, [pc, #592]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004036:	430b      	orrs	r3, r1
 8004038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800403c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f002 0320 	and.w	r3, r2, #32
 8004048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004052:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004056:	460b      	mov	r3, r1
 8004058:	4313      	orrs	r3, r2
 800405a:	d00b      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800405c:	4b8a      	ldr	r3, [pc, #552]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004062:	f023 0107 	bic.w	r1, r3, #7
 8004066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800406a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406c:	4a86      	ldr	r2, [pc, #536]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800406e:	430b      	orrs	r3, r1
 8004070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800408a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800408e:	460b      	mov	r3, r1
 8004090:	4313      	orrs	r3, r2
 8004092:	d00b      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004094:	4b7c      	ldr	r3, [pc, #496]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800409e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a4:	4a78      	ldr	r2, [pc, #480]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80040b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040c6:	460b      	mov	r3, r1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	d00b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80040cc:	4b6e      	ldr	r3, [pc, #440]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040dc:	4a6a      	ldr	r2, [pc, #424]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040de:	430b      	orrs	r3, r1
 80040e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80040f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040fa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d00b      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004104:	4b60      	ldr	r3, [pc, #384]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800410a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800410e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	4a5c      	ldr	r2, [pc, #368]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004116:	430b      	orrs	r3, r1
 8004118:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800411c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004132:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004136:	460b      	mov	r3, r1
 8004138:	4313      	orrs	r3, r2
 800413a:	d00b      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800413c:	4b52      	ldr	r3, [pc, #328]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004142:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800414a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414c:	4a4e      	ldr	r2, [pc, #312]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414e:	430b      	orrs	r3, r1
 8004150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004164:	2300      	movs	r3, #0
 8004166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800416a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800416e:	460b      	mov	r3, r1
 8004170:	4313      	orrs	r3, r2
 8004172:	d00b      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004174:	4b44      	ldr	r3, [pc, #272]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800417a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800417e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004184:	4a40      	ldr	r2, [pc, #256]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004186:	430b      	orrs	r3, r1
 8004188:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800418c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80041ac:	4b36      	ldr	r3, [pc, #216]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041bc:	4a32      	ldr	r2, [pc, #200]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041be:	430b      	orrs	r3, r1
 80041c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80041c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80041d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041de:	460b      	mov	r3, r1
 80041e0:	4313      	orrs	r3, r2
 80041e2:	d00c      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f6:	4a24      	ldr	r2, [pc, #144]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f8:	430b      	orrs	r3, r1
 80041fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800420a:	67bb      	str	r3, [r7, #120]	; 0x78
 800420c:	2300      	movs	r3, #0
 800420e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004210:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004214:	460b      	mov	r3, r1
 8004216:	4313      	orrs	r3, r2
 8004218:	d04f      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800421a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d02d      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d827      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800422a:	2b60      	cmp	r3, #96	; 0x60
 800422c:	d02e      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800422e:	2b60      	cmp	r3, #96	; 0x60
 8004230:	d823      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d006      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d81f      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800423e:	2b20      	cmp	r3, #32
 8004240:	d011      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004242:	e01a      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004250:	e01d      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004256:	3308      	adds	r3, #8
 8004258:	4618      	mov	r0, r3
 800425a:	f002 f981 	bl	8006560 <RCCEx_PLL2_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004264:	e013      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800426a:	332c      	adds	r3, #44	; 0x2c
 800426c:	4618      	mov	r0, r3
 800426e:	f002 fa0f 	bl	8006690 <RCCEx_PLL3_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004278:	e009      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004280:	e005      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004282:	bf00      	nop
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004286:	bf00      	nop
 8004288:	46020c00 	.word	0x46020c00
        break;
 800428c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10d      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004296:	4bb6      	ldr	r3, [pc, #728]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004298:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800429c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80042a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	4ab1      	ldr	r2, [pc, #708]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80042b0:	e003      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80042b6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80042c6:	673b      	str	r3, [r7, #112]	; 0x70
 80042c8:	2300      	movs	r3, #0
 80042ca:	677b      	str	r3, [r7, #116]	; 0x74
 80042cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d053      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80042d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e2:	d033      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80042e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e8:	d82c      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80042ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ee:	d02f      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80042f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f4:	d826      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80042f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fa:	d008      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d820      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430a:	d011      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800430c:	e01a      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800430e:	4b98      	ldr	r3, [pc, #608]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	4a97      	ldr	r2, [pc, #604]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800431a:	e01a      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800431c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004320:	3308      	adds	r3, #8
 8004322:	4618      	mov	r0, r3
 8004324:	f002 f91c 	bl	8006560 <RCCEx_PLL2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800432e:	e010      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004334:	332c      	adds	r3, #44	; 0x2c
 8004336:	4618      	mov	r0, r3
 8004338:	f002 f9aa 	bl	8006690 <RCCEx_PLL3_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004342:	e006      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800434a:	e002      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800434c:	bf00      	nop
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004352:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10d      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800435a:	4b85      	ldr	r3, [pc, #532]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800435c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004360:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436c:	4a80      	ldr	r2, [pc, #512]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800436e:	430b      	orrs	r3, r1
 8004370:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004374:	e003      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004376:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800437a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800437e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800438a:	66bb      	str	r3, [r7, #104]	; 0x68
 800438c:	2300      	movs	r3, #0
 800438e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004390:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004394:	460b      	mov	r3, r1
 8004396:	4313      	orrs	r3, r2
 8004398:	d046      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800439a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800439e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043a2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80043a6:	d028      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80043a8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80043ac:	d821      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80043ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b2:	d022      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80043b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b8:	d81b      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80043ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043be:	d01c      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80043c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043c4:	d815      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	d008      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d0:	d80f      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d00e      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80043dc:	e009      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043e2:	3308      	adds	r3, #8
 80043e4:	4618      	mov	r0, r3
 80043e6:	f002 f8bb 	bl	8006560 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80043f0:	e004      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80043f8:	e000      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80043fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10d      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004404:	4b5a      	ldr	r3, [pc, #360]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800440a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800440e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004412:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004416:	4a56      	ldr	r2, [pc, #344]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004418:	430b      	orrs	r3, r1
 800441a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004424:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004434:	663b      	str	r3, [r7, #96]	; 0x60
 8004436:	2300      	movs	r3, #0
 8004438:	667b      	str	r3, [r7, #100]	; 0x64
 800443a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d03f      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	2b04      	cmp	r3, #4
 800444e:	d81e      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	08004497 	.word	0x08004497
 800445c:	0800446d 	.word	0x0800446d
 8004460:	0800447b 	.word	0x0800447b
 8004464:	08004497 	.word	0x08004497
 8004468:	08004497 	.word	0x08004497
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800446c:	4b40      	ldr	r3, [pc, #256]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	4a3f      	ldr	r2, [pc, #252]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004476:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004478:	e00e      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800447a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800447e:	332c      	adds	r3, #44	; 0x2c
 8004480:	4618      	mov	r0, r3
 8004482:	f002 f905 	bl	8006690 <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800448c:	e004      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004494:	e000      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004496:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004498:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80044a0:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80044a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044a6:	f023 0107 	bic.w	r1, r3, #7
 80044aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	4a2f      	ldr	r2, [pc, #188]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80044ba:	e003      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80044c0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80044c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80044d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d2:	2300      	movs	r3, #0
 80044d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80044da:	460b      	mov	r3, r1
 80044dc:	4313      	orrs	r3, r2
 80044de:	d04d      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80044e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ec:	d028      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80044ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044f2:	d821      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80044f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044f8:	d024      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80044fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044fe:	d81b      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004504:	d00e      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800450a:	d815      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01b      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d110      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004516:	4b16      	ldr	r3, [pc, #88]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004522:	e012      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004528:	332c      	adds	r3, #44	; 0x2c
 800452a:	4618      	mov	r0, r3
 800452c:	f002 f8b0 	bl	8006690 <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004536:	e008      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800453e:	e004      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004548:	bf00      	nop
    }
    if (ret == HAL_OK)
 800454a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d110      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004558:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800455c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004564:	4a02      	ldr	r2, [pc, #8]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004566:	430b      	orrs	r3, r1
 8004568:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800456c:	e006      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800456e:	bf00      	nop
 8004570:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004578:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800457c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004588:	653b      	str	r3, [r7, #80]	; 0x50
 800458a:	2300      	movs	r3, #0
 800458c:	657b      	str	r3, [r7, #84]	; 0x54
 800458e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	f000 80b5 	beq.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a0:	4b9d      	ldr	r3, [pc, #628]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80045a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d113      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	4b9a      	ldr	r3, [pc, #616]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b4:	4a98      	ldr	r2, [pc, #608]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80045be:	4b96      	ldr	r3, [pc, #600]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80045d6:	4b91      	ldr	r3, [pc, #580]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	4a90      	ldr	r2, [pc, #576]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045e2:	f7fd f86f 	bl	80016c4 <HAL_GetTick>
 80045e6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045ea:	e00b      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ec:	f7fd f86a 	bl	80016c4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d903      	bls.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004602:	e005      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004604:	4b85      	ldr	r3, [pc, #532]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ed      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004610:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d165      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004618:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800461a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d023      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800462e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004632:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	4293      	cmp	r3, r2
 800463c:	d01b      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800463e:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004648:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800464c:	4b72      	ldr	r3, [pc, #456]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800464e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004652:	4a71      	ldr	r2, [pc, #452]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800465c:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800465e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004662:	4a6d      	ldr	r2, [pc, #436]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004668:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800466c:	4a6a      	ldr	r2, [pc, #424]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004672:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fd f81f 	bl	80016c4 <HAL_GetTick>
 8004686:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468a:	e00d      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fd f81a 	bl	80016c4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	f241 3388 	movw	r3, #5000	; 0x1388
 800469c:	429a      	cmp	r2, r3
 800469e:	d903      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a8:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ea      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80046b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10d      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80046be:	4b56      	ldr	r3, [pc, #344]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80046d0:	4a51      	ldr	r2, [pc, #324]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046d2:	430b      	orrs	r3, r1
 80046d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046d8:	e008      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046de:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80046e2:	e003      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046e8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046ec:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f4:	4b48      	ldr	r3, [pc, #288]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fa:	4a47      	ldr	r2, [pc, #284]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046fc:	f023 0304 	bic.w	r3, r3, #4
 8004700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
 8004712:	2300      	movs	r3, #0
 8004714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004716:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d042      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004720:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004724:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004728:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800472c:	d022      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800472e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004732:	d81b      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004738:	d011      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473e:	d815      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d019      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004748:	d110      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800474a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800474e:	3308      	adds	r3, #8
 8004750:	4618      	mov	r0, r3
 8004752:	f001 ff05 	bl	8006560 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800475c:	e00d      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	4a2d      	ldr	r2, [pc, #180]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004768:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800476a:	e006      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004772:	e002      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004778:	bf00      	nop
    }
    if (ret == HAL_OK)
 800477a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004782:	4b25      	ldr	r3, [pc, #148]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004788:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800478c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004794:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004796:	430b      	orrs	r3, r1
 8004798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800479c:	e003      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80047a2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80047b2:	643b      	str	r3, [r7, #64]	; 0x40
 80047b4:	2300      	movs	r3, #0
 80047b6:	647b      	str	r3, [r7, #68]	; 0x44
 80047b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047bc:	460b      	mov	r3, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	d032      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80047c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	d00b      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d4:	d804      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d007      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80047e6:	e004      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80047e8:	bf00      	nop
 80047ea:	e002      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80047ec:	bf00      	nop
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80047f0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80047f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d112      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004800:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800480c:	4a02      	ldr	r2, [pc, #8]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800480e:	430b      	orrs	r3, r1
 8004810:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004814:	e008      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004816:	bf00      	nop
 8004818:	46020c00 	.word	0x46020c00
 800481c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004824:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004834:	63bb      	str	r3, [r7, #56]	; 0x38
 8004836:	2300      	movs	r3, #0
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800483e:	460b      	mov	r3, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	d00c      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004844:	4b98      	ldr	r3, [pc, #608]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004846:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800484a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800484e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004856:	4a94      	ldr	r2, [pc, #592]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004858:	430b      	orrs	r3, r1
 800485a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800485e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800486a:	633b      	str	r3, [r7, #48]	; 0x30
 800486c:	2300      	movs	r3, #0
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
 8004870:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004874:	460b      	mov	r3, r1
 8004876:	4313      	orrs	r3, r2
 8004878:	d019      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800487a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800487e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004886:	d105      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004888:	4b87      	ldr	r3, [pc, #540]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	4a86      	ldr	r2, [pc, #536]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800488e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004892:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004894:	4b84      	ldr	r3, [pc, #528]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004896:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800489a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800489e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048a6:	4a80      	ldr	r2, [pc, #512]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80048a8:	430b      	orrs	r3, r1
 80048aa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80048ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80048bc:	2300      	movs	r3, #0
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80048c4:	460b      	mov	r3, r1
 80048c6:	4313      	orrs	r3, r2
 80048c8:	d00c      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80048ca:	4b77      	ldr	r3, [pc, #476]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80048cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048dc:	4972      	ldr	r1, [pc, #456]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80048e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	2300      	movs	r3, #0
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
 80048f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d00c      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004900:	4b69      	ldr	r3, [pc, #420]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004906:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800490a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800490e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004912:	4965      	ldr	r1, [pc, #404]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800491a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d00c      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004936:	4b5c      	ldr	r3, [pc, #368]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800493c:	f023 0218 	bic.w	r2, r3, #24
 8004940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004944:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004948:	4957      	ldr	r1, [pc, #348]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004966:	460b      	mov	r3, r1
 8004968:	4313      	orrs	r3, r2
 800496a:	d032      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800496c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004978:	d105      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497a:	4b4b      	ldr	r3, [pc, #300]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	4a4a      	ldr	r2, [pc, #296]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004984:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800498a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800498e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004992:	d108      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004998:	3308      	adds	r3, #8
 800499a:	4618      	mov	r0, r3
 800499c:	f001 fde0 	bl	8006560 <RCCEx_PLL2_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80049a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80049ae:	4b3e      	ldr	r3, [pc, #248]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80049b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049c0:	4939      	ldr	r1, [pc, #228]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80049ce:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80049d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049e8:	460b      	mov	r3, r1
 80049ea:	4313      	orrs	r3, r2
 80049ec:	d03a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80049ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fa:	d00e      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80049fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a00:	d815      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d017      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a0a:	d110      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0c:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a16:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004a18:	e00e      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a1e:	3308      	adds	r3, #8
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 fd9d 	bl	8006560 <RCCEx_PLL2_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004a2c:	e004      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004a34:	e000      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8004a36:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004a38:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10d      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a52:	4915      	ldr	r1, [pc, #84]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004a5a:	e003      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a60:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	d00c      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a92:	4905      	ldr	r1, [pc, #20]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004a9a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	37e8      	adds	r7, #232	; 0xe8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa8:	46020c00 	.word	0x46020c00

08004aac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004ab4:	4bac      	ldr	r3, [pc, #688]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004abe:	4baa      	ldr	r3, [pc, #680]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004ac8:	4ba7      	ldr	r3, [pc, #668]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004ad6:	4ba4      	ldr	r3, [pc, #656]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ae0:	4ba1      	ldr	r3, [pc, #644]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	08db      	lsrs	r3, r3, #3
 8004ae6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 8123 	beq.w	8004d4a <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d062      	beq.n	8004bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	f200 8081 	bhi.w	8004c14 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d024      	beq.n	8004b62 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d17a      	bne.n	8004c14 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b28:	eddf 6a90 	vldr	s13, [pc, #576]	; 8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b30:	4b8d      	ldr	r3, [pc, #564]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b44:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8004d70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b60:	e08f      	b.n	8004c82 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004b62:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8004b6e:	4b7e      	ldr	r3, [pc, #504]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0f1b      	lsrs	r3, r3, #28
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	e006      	b.n	8004b88 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8004b7a:	4b7b      	ldr	r3, [pc, #492]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	0f1b      	lsrs	r3, r3, #28
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	4a7a      	ldr	r2, [pc, #488]	; (8004d74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bb2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004d70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bce:	e058      	b.n	8004c82 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be2:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bf6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004d70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c12:	e036      	b.n	8004c82 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004c14:	4b54      	ldr	r3, [pc, #336]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8004c20:	4b51      	ldr	r3, [pc, #324]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	0f1b      	lsrs	r3, r3, #28
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	e006      	b.n	8004c3a <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c32:	041b      	lsls	r3, r3, #16
 8004c34:	0f1b      	lsrs	r3, r3, #28
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	4a4e      	ldr	r2, [pc, #312]	; (8004d74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c40:	ee07 3a90 	vmov	s15, r3
 8004c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c60:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c64:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004d70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c80:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004c82:	4b39      	ldr	r3, [pc, #228]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d017      	beq.n	8004cbe <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	0a5b      	lsrs	r3, r3, #9
 8004c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb4:	ee17 2a90 	vmov	r2, s15
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e002      	b.n	8004cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004cc4:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d017      	beq.n	8004d00 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf6:	ee17 2a90 	vmov	r2, s15
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	e002      	b.n	8004d06 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d017      	beq.n	8004d42 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	0e1b      	lsrs	r3, r3, #24
 8004d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d28:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d38:	ee17 2a90 	vmov	r2, s15
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004d40:	e00c      	b.n	8004d5c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	e008      	b.n	8004d5c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
}
 8004d5c:	bf00      	nop
 8004d5e:	3724      	adds	r7, #36	; 0x24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	46020c00 	.word	0x46020c00
 8004d6c:	4b742400 	.word	0x4b742400
 8004d70:	46000000 	.word	0x46000000
 8004d74:	08009cdc 	.word	0x08009cdc

08004d78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004d80:	4bac      	ldr	r3, [pc, #688]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d88:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004d8a:	4baa      	ldr	r3, [pc, #680]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004d94:	4ba7      	ldr	r3, [pc, #668]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	3301      	adds	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004da2:	4ba4      	ldr	r3, [pc, #656]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004dac:	4ba1      	ldr	r3, [pc, #644]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	08db      	lsrs	r3, r3, #3
 8004db2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	fb02 f303 	mul.w	r3, r2, r3
 8004dbc:	ee07 3a90 	vmov	s15, r3
 8004dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8123 	beq.w	8005016 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d062      	beq.n	8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	f200 8081 	bhi.w	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d024      	beq.n	8004e2e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d17a      	bne.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8004df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfc:	4b8d      	ldr	r3, [pc, #564]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e10:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2c:	e08f      	b.n	8004f4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004e2e:	4b81      	ldr	r3, [pc, #516]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8004e3a:	4b7e      	ldr	r3, [pc, #504]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0f1b      	lsrs	r3, r3, #28
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8004e46:	4b7b      	ldr	r3, [pc, #492]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	0f1b      	lsrs	r3, r3, #28
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	4a7a      	ldr	r2, [pc, #488]	; (8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	ee07 3a90 	vmov	s15, r3
 8004e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e7e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e9a:	e058      	b.n	8004f4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	4b61      	ldr	r3, [pc, #388]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ec2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ede:	e036      	b.n	8004f4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004ee0:	4b54      	ldr	r3, [pc, #336]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8004eec:	4b51      	ldr	r3, [pc, #324]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	0f1b      	lsrs	r3, r3, #28
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	e006      	b.n	8004f06 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8004ef8:	4b4e      	ldr	r3, [pc, #312]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	0f1b      	lsrs	r3, r3, #28
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	4a4e      	ldr	r2, [pc, #312]	; (8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	ee07 3a90 	vmov	s15, r3
 8004f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f30:	eddf 5a42 	vldr	s11, [pc, #264]	; 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f4c:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004f4e:	4b39      	ldr	r3, [pc, #228]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d017      	beq.n	8004f8a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f5a:	4b36      	ldr	r3, [pc, #216]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	0a5b      	lsrs	r3, r3, #9
 8004f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f70:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f80:	ee17 2a90 	vmov	r2, s15
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e002      	b.n	8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004f90:	4b28      	ldr	r3, [pc, #160]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc2:	ee17 2a90 	vmov	r2, s15
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	e002      	b.n	8004fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004fd2:	4b18      	ldr	r3, [pc, #96]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d017      	beq.n	800500e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	0e1b      	lsrs	r3, r3, #24
 8004fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe8:	ee07 3a90 	vmov	s15, r3
 8004fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005004:	ee17 2a90 	vmov	r2, s15
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800500c:	e00c      	b.n	8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	609a      	str	r2, [r3, #8]
}
 8005028:	bf00      	nop
 800502a:	3724      	adds	r7, #36	; 0x24
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	46020c00 	.word	0x46020c00
 8005038:	4b742400 	.word	0x4b742400
 800503c:	46000000 	.word	0x46000000
 8005040:	08009cdc 	.word	0x08009cdc

08005044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005044:	b480      	push	{r7}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800504c:	4bac      	ldr	r3, [pc, #688]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005054:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005056:	4baa      	ldr	r3, [pc, #680]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005060:	4ba7      	ldr	r3, [pc, #668]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	3301      	adds	r3, #1
 800506c:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800506e:	4ba4      	ldr	r3, [pc, #656]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005078:	4ba1      	ldr	r3, [pc, #644]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800507a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507c:	08db      	lsrs	r3, r3, #3
 800507e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	ee07 3a90 	vmov	s15, r3
 800508c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005090:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8123 	beq.w	80052e2 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d062      	beq.n	8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	f200 8081 	bhi.w	80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d024      	beq.n	80050fa <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d17a      	bne.n	80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80050c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c8:	4b8d      	ldr	r3, [pc, #564]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80050ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d0:	ee07 3a90 	vmov	s15, r3
 80050d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80050d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80050dc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80050e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80050e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80050e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80050f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f4:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80050f8:	e08f      	b.n	800521a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80050fa:	4b81      	ldr	r3, [pc, #516]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8005106:	4b7e      	ldr	r3, [pc, #504]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0f1b      	lsrs	r3, r3, #28
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	e006      	b.n	8005120 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8005112:	4b7b      	ldr	r3, [pc, #492]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	0f1b      	lsrs	r3, r3, #28
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	4a7a      	ldr	r2, [pc, #488]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005146:	ed97 6a02 	vldr	s12, [r7, #8]
 800514a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800514e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005166:	e058      	b.n	800521a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517a:	4b61      	ldr	r3, [pc, #388]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800518a:	ed97 6a02 	vldr	s12, [r7, #8]
 800518e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005192:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005196:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800519a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051aa:	e036      	b.n	800521a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80051ac:	4b54      	ldr	r3, [pc, #336]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80051b8:	4b51      	ldr	r3, [pc, #324]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	0f1b      	lsrs	r3, r3, #28
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	e006      	b.n	80051d2 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80051c4:	4b4e      	ldr	r3, [pc, #312]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80051c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	0f1b      	lsrs	r3, r3, #28
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	4a4e      	ldr	r2, [pc, #312]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80051fc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005218:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800521a:	4b39      	ldr	r3, [pc, #228]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d017      	beq.n	8005256 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005226:	4b36      	ldr	r3, [pc, #216]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	0a5b      	lsrs	r3, r3, #9
 800522c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800523c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005240:	edd7 6a07 	vldr	s13, [r7, #28]
 8005244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800524c:	ee17 2a90 	vmov	r2, s15
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e002      	b.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800525c:	4b28      	ldr	r3, [pc, #160]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d017      	beq.n	8005298 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005268:	4b25      	ldr	r3, [pc, #148]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	0c1b      	lsrs	r3, r3, #16
 800526e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800527a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800527e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005282:	edd7 6a07 	vldr	s13, [r7, #28]
 8005286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800528e:	ee17 2a90 	vmov	r2, s15
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	e002      	b.n	800529e <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800529e:	4b18      	ldr	r3, [pc, #96]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d017      	beq.n	80052da <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	0e1b      	lsrs	r3, r3, #24
 80052b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80052bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052c0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80052c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d0:	ee17 2a90 	vmov	r2, s15
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80052d8:	e00c      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	e008      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	3724      	adds	r7, #36	; 0x24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	46020c00 	.word	0x46020c00
 8005304:	4b742400 	.word	0x4b742400
 8005308:	46000000 	.word	0x46000000
 800530c:	08009cdc 	.word	0x08009cdc

08005310 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08e      	sub	sp, #56	; 0x38
 8005314:	af00      	add	r7, sp, #0
 8005316:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800531a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800531e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005322:	430b      	orrs	r3, r1
 8005324:	d145      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005326:	4ba7      	ldr	r3, [pc, #668]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800532c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005330:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005332:	4ba4      	ldr	r3, [pc, #656]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d108      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005346:	d104      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534c:	637b      	str	r3, [r7, #52]	; 0x34
 800534e:	f001 b8fc 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005352:	4b9c      	ldr	r3, [pc, #624]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005360:	d114      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005368:	d110      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800536a:	4b96      	ldr	r3, [pc, #600]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005378:	d103      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800537a:	23fa      	movs	r3, #250	; 0xfa
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800537e:	f001 b8e4 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005382:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005388:	f001 b8df 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800538c:	4b8d      	ldr	r3, [pc, #564]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005398:	d107      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a0:	d103      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80053a2:	4b89      	ldr	r3, [pc, #548]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053a4:	637b      	str	r3, [r7, #52]	; 0x34
 80053a6:	f001 b8d0 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
 80053ae:	f001 b8cc 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80053b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80053ba:	430b      	orrs	r3, r1
 80053bc:	d151      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80053be:	4b81      	ldr	r3, [pc, #516]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80053c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053c4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d035      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	d841      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2b60      	cmp	r3, #96	; 0x60
 80053da:	d02a      	beq.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2b60      	cmp	r3, #96	; 0x60
 80053e0:	d83b      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d009      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d835      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d012      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80053fa:	e02e      	b.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fb53 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800540a:	f001 b89e 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800540e:	f107 0318 	add.w	r3, r7, #24
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fcb0 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800541c:	f001 b895 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005420:	f107 030c 	add.w	r3, r7, #12
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fe0d 	bl	8005044 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800542e:	f001 b88c 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005432:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005438:	f001 b887 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800543c:	4b61      	ldr	r3, [pc, #388]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005448:	d103      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800544a:	4b60      	ldr	r3, [pc, #384]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800544e:	f001 b87c 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005456:	f001 b878 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800545e:	f001 b874 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005466:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800546a:	430b      	orrs	r3, r1
 800546c:	d158      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800546e:	4b55      	ldr	r3, [pc, #340]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005478:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005480:	d03b      	beq.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d846      	bhi.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005490:	d02e      	beq.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005498:	d83e      	bhi.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a0:	d00b      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a8:	d836      	bhi.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b6:	d012      	beq.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80054b8:	e02e      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff faf4 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054c8:	f001 b83f 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054cc:	f107 0318 	add.w	r3, r7, #24
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fc51 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054da:	f001 b836 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054de:	f107 030c 	add.w	r3, r7, #12
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fdae 	bl	8005044 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ec:	f001 b82d 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80054f0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054f6:	f001 b828 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054fa:	4b32      	ldr	r3, [pc, #200]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005506:	d103      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005508:	4b30      	ldr	r3, [pc, #192]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800550c:	f001 b81d 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005514:	f001 b819 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800551c:	f001 b815 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005524:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005528:	430b      	orrs	r3, r1
 800552a:	d126      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800552e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005536:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d106      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	2b00      	cmp	r3, #0
 800554a:	d103      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800554c:	4b1f      	ldr	r3, [pc, #124]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
 8005550:	f000 bffb 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005560:	d107      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005568:	d103      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800556a:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
 800556e:	f000 bfec 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	637b      	str	r3, [r7, #52]	; 0x34
 8005576:	f000 bfe8 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800557a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800557e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005582:	430b      	orrs	r3, r1
 8005584:	d164      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800558c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005590:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005598:	d03d      	beq.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055a0:	d852      	bhi.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a8:	d014      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b0:	d84a      	bhi.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01f      	beq.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055be:	d012      	beq.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80055c0:	e042      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80055c2:	bf00      	nop
 80055c4:	46020c00 	.word	0x46020c00
 80055c8:	0007a120 	.word	0x0007a120
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fa67 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055e2:	f000 bfb2 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e6:	f107 0318 	add.w	r3, r7, #24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fbc4 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f4:	f000 bfa9 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80055f8:	4bab      	ldr	r3, [pc, #684]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005604:	d103      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005606:	4ba9      	ldr	r3, [pc, #676]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800560a:	f000 bf9e 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005612:	f000 bf9a 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005616:	4ba4      	ldr	r3, [pc, #656]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005622:	4ba1      	ldr	r3, [pc, #644]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	0e1b      	lsrs	r3, r3, #24
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	e006      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800562e:	4b9e      	ldr	r3, [pc, #632]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	0e1b      	lsrs	r3, r3, #24
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	4a9c      	ldr	r2, [pc, #624]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005644:	f000 bf81 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800564c:	f000 bf7d 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005654:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005658:	430b      	orrs	r3, r1
 800565a:	d175      	bne.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800565c:	4b92      	ldr	r3, [pc, #584]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800565e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005666:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2b00      	cmp	r3, #0
 800566c:	d15b      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800566e:	4b8e      	ldr	r3, [pc, #568]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005674:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005678:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005680:	d034      	beq.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005688:	d849      	bhi.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005690:	d00b      	beq.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005698:	d841      	bhi.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	2b00      	cmp	r3, #0
 800569e:	d016      	beq.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056a6:	d009      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80056a8:	e039      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff f9fc 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80056b8:	f000 bf47 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056bc:	f107 0318 	add.w	r3, r7, #24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fb59 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80056ca:	f000 bf3e 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80056ce:	4b76      	ldr	r3, [pc, #472]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056da:	d103      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80056dc:	4b73      	ldr	r3, [pc, #460]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056de:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80056e0:	f000 bf33 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80056e8:	f000 bf2f 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056ec:	4b6e      	ldr	r3, [pc, #440]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80056f8:	4b6b      	ldr	r3, [pc, #428]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	0e1b      	lsrs	r3, r3, #24
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	e006      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8005704:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	0e1b      	lsrs	r3, r3, #24
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	4a67      	ldr	r2, [pc, #412]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800571a:	f000 bf16 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005722:	f000 bf12 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572c:	d108      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800572e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff f9ba 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	637b      	str	r3, [r7, #52]	; 0x34
 800573c:	f000 bf05 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
 8005744:	f000 bf01 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800574c:	1e51      	subs	r1, r2, #1
 800574e:	430b      	orrs	r3, r1
 8005750:	d136      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005752:	4b55      	ldr	r3, [pc, #340]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fe fafc 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8005768:	6378      	str	r0, [r7, #52]	; 0x34
 800576a:	f000 beee 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	2b01      	cmp	r3, #1
 8005772:	d104      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005774:	f7fe f9be 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8005778:	6378      	str	r0, [r7, #52]	; 0x34
 800577a:	f000 bee6 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800577e:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578a:	d106      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	2b02      	cmp	r3, #2
 8005790:	d103      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8005792:	4b48      	ldr	r3, [pc, #288]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
 8005796:	f000 bed8 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800579a:	4b43      	ldr	r3, [pc, #268]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800579c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d107      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d104      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80057ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	f000 bec9 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	637b      	str	r3, [r7, #52]	; 0x34
 80057bc:	f000 bec5 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80057c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c4:	1e91      	subs	r1, r2, #2
 80057c6:	430b      	orrs	r3, r1
 80057c8:	d136      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80057ca:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057d0:	f003 030c 	and.w	r3, r3, #12
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80057dc:	f7fe faac 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 80057e0:	6378      	str	r0, [r7, #52]	; 0x34
 80057e2:	f000 beb2 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d104      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80057ec:	f7fe f982 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 80057f0:	6378      	str	r0, [r7, #52]	; 0x34
 80057f2:	f000 beaa 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80057f6:	4b2c      	ldr	r3, [pc, #176]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005802:	d106      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	2b08      	cmp	r3, #8
 8005808:	d103      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800580a:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	f000 be9c 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005812:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d107      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d104      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
 800582c:	f000 be8d 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
 8005834:	f000 be89 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583c:	1f11      	subs	r1, r2, #4
 800583e:	430b      	orrs	r3, r1
 8005840:	d13e      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005842:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005848:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800584c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fe fa70 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005858:	6378      	str	r0, [r7, #52]	; 0x34
 800585a:	f000 be76 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	2b10      	cmp	r3, #16
 8005862:	d104      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005864:	f7fe f946 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8005868:	6378      	str	r0, [r7, #52]	; 0x34
 800586a:	f000 be6e 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800586e:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587a:	d106      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	2b20      	cmp	r3, #32
 8005880:	d103      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
 8005886:	f000 be60 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800588a:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800588c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b02      	cmp	r3, #2
 8005896:	d10f      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	2b30      	cmp	r3, #48	; 0x30
 800589c:	d10c      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800589e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
 80058a4:	f000 be51 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80058a8:	46020c00 	.word	0x46020c00
 80058ac:	02dc6c00 	.word	0x02dc6c00
 80058b0:	08009cdc 	.word	0x08009cdc
 80058b4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
 80058bc:	f000 be45 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80058c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c4:	f1a2 0108 	sub.w	r1, r2, #8
 80058c8:	430b      	orrs	r3, r1
 80058ca:	d136      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80058cc:	4b9f      	ldr	r3, [pc, #636]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80058ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058d6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80058de:	f7fe fa2b 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 80058e2:	6378      	str	r0, [r7, #52]	; 0x34
 80058e4:	f000 be31 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d104      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fe f901 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 80058f2:	6378      	str	r0, [r7, #52]	; 0x34
 80058f4:	f000 be29 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80058f8:	4b94      	ldr	r3, [pc, #592]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005904:	d106      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	d103      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800590c:	4b90      	ldr	r3, [pc, #576]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	f000 be1b 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005914:	4b8d      	ldr	r3, [pc, #564]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b02      	cmp	r3, #2
 8005920:	d107      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2bc0      	cmp	r3, #192	; 0xc0
 8005926:	d104      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8005928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
 800592e:	f000 be0c 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
 8005936:	f000 be08 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800593a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593e:	f1a2 0110 	sub.w	r1, r2, #16
 8005942:	430b      	orrs	r3, r1
 8005944:	d139      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005946:	4b81      	ldr	r3, [pc, #516]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800594c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005950:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fe f9ee 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 800595c:	6378      	str	r0, [r7, #52]	; 0x34
 800595e:	f000 bdf4 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005968:	d104      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800596a:	f7fe f8c3 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 800596e:	6378      	str	r0, [r7, #52]	; 0x34
 8005970:	f000 bdeb 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005974:	4b75      	ldr	r3, [pc, #468]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005980:	d107      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005988:	d103      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800598a:	4b71      	ldr	r3, [pc, #452]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
 800598e:	f000 bddc 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005992:	4b6e      	ldr	r3, [pc, #440]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b02      	cmp	r3, #2
 800599e:	d108      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a6:	d104      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80059a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34
 80059ae:	f000 bdcc 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	637b      	str	r3, [r7, #52]	; 0x34
 80059b6:	f000 bdc8 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80059ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059be:	f1a2 0120 	sub.w	r1, r2, #32
 80059c2:	430b      	orrs	r3, r1
 80059c4:	d158      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059c6:	4b61      	ldr	r3, [pc, #388]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80059c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80059d8:	f7fe f9d6 	bl	8003d88 <HAL_RCC_GetPCLK3Freq>
 80059dc:	6378      	str	r0, [r7, #52]	; 0x34
 80059de:	f000 bdb4 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d104      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80059e8:	f7fe f884 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 80059ec:	6378      	str	r0, [r7, #52]	; 0x34
 80059ee:	f000 bdac 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80059f2:	4b56      	ldr	r3, [pc, #344]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fe:	d106      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d103      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8005a06:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0a:	f000 bd9e 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005a0e:	4b4f      	ldr	r3, [pc, #316]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d107      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d104      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8005a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
 8005a28:	f000 bd8f 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005a2c:	4b47      	ldr	r3, [pc, #284]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d11b      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d118      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a3e:	4b43      	ldr	r3, [pc, #268]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005a4a:	4b40      	ldr	r3, [pc, #256]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	0e1b      	lsrs	r3, r3, #24
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	e006      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005a56:	4b3d      	ldr	r3, [pc, #244]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	0e1b      	lsrs	r3, r3, #24
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	4a3b      	ldr	r2, [pc, #236]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6c:	f000 bd6d 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
 8005a74:	f000 bd69 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005a80:	430b      	orrs	r3, r1
 8005a82:	d169      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005a84:	4b31      	ldr	r3, [pc, #196]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a8a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005a8e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a96:	d104      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a98:	f7fe f82c 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8005a9c:	6378      	str	r0, [r7, #52]	; 0x34
 8005a9e:	f000 bd54 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa8:	d108      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aaa:	f107 0318 	add.w	r3, r7, #24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff f962 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab8:	f000 bd47 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005ac2:	f7fe f91f 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8005ac6:	6378      	str	r0, [r7, #52]	; 0x34
 8005ac8:	f000 bd3f 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ad2:	d118      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	0f1b      	lsrs	r3, r3, #28
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	e006      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005aec:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	0f1b      	lsrs	r3, r3, #28
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	4a16      	ldr	r2, [pc, #88]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
 8005b02:	f000 bd22 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005b06:	4b11      	ldr	r3, [pc, #68]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b12:	d107      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b1a:	d103      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b20:	f000 bd13 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b30:	d107      	bne.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b38:	d103      	bne.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3e:	f000 bd04 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
 8005b46:	f000 bd00 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005b4a:	bf00      	nop
 8005b4c:	46020c00 	.word	0x46020c00
 8005b50:	00f42400 	.word	0x00f42400
 8005b54:	08009cdc 	.word	0x08009cdc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b5c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005b60:	430b      	orrs	r3, r1
 8005b62:	d14e      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005b64:	4ba8      	ldr	r3, [pc, #672]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d841      	bhi.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005bb5 	.word	0x08005bb5
 8005b80:	08005b91 	.word	0x08005b91
 8005b84:	08005ba3 	.word	0x08005ba3
 8005b88:	08005bbf 	.word	0x08005bbf
 8005b8c:	08005bc9 	.word	0x08005bc9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe ff89 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b9e:	f000 bcd4 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ba2:	f107 030c 	add.w	r3, r7, #12
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fa4c 	bl	8005044 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bb0:	f000 bccb 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005bb4:	f7fe f8a6 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8005bb8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005bba:	f000 bcc6 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005bbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bc4:	f000 bcc1 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005bc8:	4b8f      	ldr	r3, [pc, #572]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8005bd4:	4b8c      	ldr	r3, [pc, #560]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	0e1b      	lsrs	r3, r3, #24
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	e006      	b.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005be0:	4b89      	ldr	r3, [pc, #548]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	0e1b      	lsrs	r3, r3, #24
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	4a87      	ldr	r2, [pc, #540]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bf6:	f000 bca8 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bfe:	f000 bca4 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c06:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	d15d      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005c0e:	4b7e      	ldr	r3, [pc, #504]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c14:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005c18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c20:	d036      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c28:	d84b      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c30:	d029      	beq.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c38:	d843      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c40:	d013      	beq.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c48:	d83b      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d015      	beq.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c56:	d134      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe ff25 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c66:	f000 bc70 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff f9e8 	bl	8005044 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c78:	f000 bc67 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005c7c:	f7fe f842 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8005c80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c82:	f000 bc62 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005c86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c8c:	f000 bc5d 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c90:	4b5d      	ldr	r3, [pc, #372]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005c9c:	4b5a      	ldr	r3, [pc, #360]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	0e1b      	lsrs	r3, r3, #24
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	e006      	b.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8005ca8:	4b57      	ldr	r3, [pc, #348]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	0e1b      	lsrs	r3, r3, #24
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	4a55      	ldr	r2, [pc, #340]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cbe:	f000 bc44 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cc6:	f000 bc40 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cce:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	d14a      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005cd6:	4b4c      	ldr	r3, [pc, #304]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7fe f826 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005cec:	6378      	str	r0, [r7, #52]	; 0x34
 8005cee:	f000 bc2c 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf8:	d104      	bne.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005cfa:	f7fd fefb 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8005cfe:	6378      	str	r0, [r7, #52]	; 0x34
 8005d00:	f000 bc23 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005d04:	4b40      	ldr	r3, [pc, #256]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d10:	d107      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d18:	d103      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8005d1a:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1e:	f000 bc14 	b.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005d22:	4b39      	ldr	r3, [pc, #228]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d11b      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d34:	d117      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d36:	4b34      	ldr	r3, [pc, #208]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8005d42:	4b31      	ldr	r3, [pc, #196]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0e1b      	lsrs	r3, r3, #24
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	e006      	b.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005d4e:	4b2e      	ldr	r3, [pc, #184]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	0e1b      	lsrs	r3, r3, #24
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	e3f1      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6a:	e3ee      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d70:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8005d74:	430b      	orrs	r3, r1
 8005d76:	d14d      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005d78:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d8a:	f7fd ffd5 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005d8e:	6378      	str	r0, [r7, #52]	; 0x34
 8005d90:	e3db      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d98:	d103      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d9a:	f7fd feab 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8005d9e:	6378      	str	r0, [r7, #52]	; 0x34
 8005da0:	e3d3      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005da2:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dae:	d106      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db6:	d102      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbc:	e3c5      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005dbe:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d11b      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dd0:	d117      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8005dde:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	0e1b      	lsrs	r3, r3, #24
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	0e1b      	lsrs	r3, r3, #24
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	4a04      	ldr	r2, [pc, #16]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005e00:	e3a3      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
 8005e06:	e3a0      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005e08:	46020c00 	.word	0x46020c00
 8005e0c:	08009cdc 	.word	0x08009cdc
 8005e10:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e18:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	d148      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005e20:	4b9d      	ldr	r3, [pc, #628]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e30:	d024      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	2bc0      	cmp	r3, #192	; 0xc0
 8005e36:	d839      	bhi.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2b80      	cmp	r3, #128	; 0x80
 8005e3c:	d00d      	beq.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d833      	bhi.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d011      	beq.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005e50:	e02c      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005e52:	f7fd ff99 	bl	8003d88 <HAL_RCC_GetPCLK3Freq>
 8005e56:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e58:	e377      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e5a:	4b8f      	ldr	r3, [pc, #572]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e66:	d102      	bne.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8005e68:	4b8c      	ldr	r3, [pc, #560]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e6c:	e36d      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e72:	e36a      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005e74:	f7fd fe3e 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8005e78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e7a:	e366      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8005e7c:	4b86      	ldr	r3, [pc, #536]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8005e88:	4b83      	ldr	r3, [pc, #524]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	0f1b      	lsrs	r3, r3, #28
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	e006      	b.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8005e94:	4b80      	ldr	r3, [pc, #512]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	0f1b      	lsrs	r3, r3, #28
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	4a7f      	ldr	r2, [pc, #508]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eaa:	e34e      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eb0:	e34b      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb6:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	d147      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005ebe:	4b76      	ldr	r3, [pc, #472]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fd ff32 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	6378      	str	r0, [r7, #52]	; 0x34
 8005ed6:	e338      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ede:	d103      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ee0:	f7fd fe08 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8005ee4:	6378      	str	r0, [r7, #52]	; 0x34
 8005ee6:	e330      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005ee8:	4b6b      	ldr	r3, [pc, #428]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d106      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efc:	d102      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8005efe:	4b67      	ldr	r3, [pc, #412]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
 8005f02:	e322      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005f04:	4b64      	ldr	r3, [pc, #400]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d11b      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f16:	d117      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f18:	4b5f      	ldr	r3, [pc, #380]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8005f24:	4b5c      	ldr	r3, [pc, #368]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	0e1b      	lsrs	r3, r3, #24
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	e006      	b.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8005f30:	4b59      	ldr	r3, [pc, #356]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	0e1b      	lsrs	r3, r3, #24
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	4a58      	ldr	r2, [pc, #352]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
 8005f46:	e300      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4c:	e2fd      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f52:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005f56:	430b      	orrs	r3, r1
 8005f58:	d15b      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005f5a:	4b4f      	ldr	r3, [pc, #316]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f64:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d117      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f6c:	4b4a      	ldr	r3, [pc, #296]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8005f78:	4b47      	ldr	r3, [pc, #284]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	0e1b      	lsrs	r3, r3, #24
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	e006      	b.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8005f84:	4b44      	ldr	r3, [pc, #272]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f8a:	041b      	lsls	r3, r3, #16
 8005f8c:	0e1b      	lsrs	r3, r3, #24
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	4a43      	ldr	r2, [pc, #268]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	e2d6      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005f9c:	4b3e      	ldr	r3, [pc, #248]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005faa:	d112      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d10e      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fb4:	4b38      	ldr	r3, [pc, #224]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fc2:	d102      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8005fc4:	23fa      	movs	r3, #250	; 0xfa
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fc8:	e2bf      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005fca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fd0:	e2bb      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005fd2:	4b31      	ldr	r3, [pc, #196]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d106      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe6:	d102      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8005fe8:	4b2c      	ldr	r3, [pc, #176]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
 8005fec:	e2ad      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005fee:	4b2a      	ldr	r3, [pc, #168]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d107      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006002:	d103      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8006004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	e29e      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
 8006010:	e29b      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006016:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800601a:	430b      	orrs	r3, r1
 800601c:	d162      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800601e:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006024:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006028:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2b00      	cmp	r3, #0
 800602e:	d117      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006030:	4b19      	ldr	r3, [pc, #100]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800603c:	4b16      	ldr	r3, [pc, #88]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	0e1b      	lsrs	r3, r3, #24
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	e006      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006048:	4b13      	ldr	r3, [pc, #76]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800604a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800604e:	041b      	lsls	r3, r3, #16
 8006050:	0e1b      	lsrs	r3, r3, #24
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	4a12      	ldr	r2, [pc, #72]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
 800605e:	e274      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800606a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800606e:	d119      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006076:	d115      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800607a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800607e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006086:	d102      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8006088:	23fa      	movs	r3, #250	; 0xfa
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800608c:	e25d      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800608e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006094:	e259      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006096:	bf00      	nop
 8006098:	46020c00 	.word	0x46020c00
 800609c:	00f42400 	.word	0x00f42400
 80060a0:	08009cdc 	.word	0x08009cdc
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80060a4:	4b9d      	ldr	r3, [pc, #628]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b0:	d106      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b8:	d102      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80060ba:	4b99      	ldr	r3, [pc, #612]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
 80060be:	e244      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80060c0:	4b96      	ldr	r3, [pc, #600]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80060c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d107      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d4:	d103      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 80060d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
 80060dc:	e235      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
 80060e2:	e232      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80060e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80060ec:	430b      	orrs	r3, r1
 80060ee:	d147      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060f0:	4b8a      	ldr	r3, [pc, #552]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80060f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060f6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060fa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006102:	f7fd fe19 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8006106:	6378      	str	r0, [r7, #52]	; 0x34
 8006108:	e21f      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800610a:	4b84      	ldr	r3, [pc, #528]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800610c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006118:	d112      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006120:	d10e      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006122:	4b7e      	ldr	r3, [pc, #504]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006130:	d102      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8006132:	23fa      	movs	r3, #250	; 0xfa
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006136:	e208      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006138:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800613e:	e204      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006140:	4b76      	ldr	r3, [pc, #472]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800614c:	d106      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006154:	d102      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8006156:	4b72      	ldr	r3, [pc, #456]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
 800615a:	e1f6      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800615c:	4b6f      	ldr	r3, [pc, #444]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800615e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b02      	cmp	r3, #2
 8006168:	d107      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006170:	d103      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
 8006178:	e1e7      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
 800617e:	e1e4      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006184:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006188:	430b      	orrs	r3, r1
 800618a:	d12d      	bne.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800618c:	4b63      	ldr	r3, [pc, #396]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800618e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006192:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006196:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006198:	4b60      	ldr	r3, [pc, #384]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a4:	d105      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 80061ac:	4b5c      	ldr	r3, [pc, #368]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
 80061b0:	e1cb      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061b8:	d107      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fc74 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
 80061c8:	e1bf      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061d0:	d107      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d2:	f107 0318 	add.w	r3, r7, #24
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe fdce 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
 80061e0:	e1b3      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
 80061e6:	e1b0      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80061e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ec:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80061f0:	430b      	orrs	r3, r1
 80061f2:	d14d      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80061f4:	4b49      	ldr	r3, [pc, #292]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80061f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006206:	d028      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800620e:	d83c      	bhi.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006216:	d013      	beq.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800621e:	d834      	bhi.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800622c:	d004      	beq.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800622e:	e02c      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fd fd96 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8006234:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006236:	e188      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006238:	f7fd fc5c 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 800623c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800623e:	e184      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006240:	4b36      	ldr	r3, [pc, #216]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624c:	d102      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800624e:	4b34      	ldr	r3, [pc, #208]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006252:	e17a      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006258:	e177      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800625a:	4b30      	ldr	r3, [pc, #192]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006266:	4b2d      	ldr	r3, [pc, #180]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0e1b      	lsrs	r3, r3, #24
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	e006      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006272:	4b2a      	ldr	r3, [pc, #168]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006278:	041b      	lsls	r3, r3, #16
 800627a:	0e1b      	lsrs	r3, r3, #24
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	4a28      	ldr	r2, [pc, #160]	; (8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8006282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006288:	e15f      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800628e:	e15c      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006294:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006298:	430b      	orrs	r3, r1
 800629a:	d154      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800629c:	4b1f      	ldr	r3, [pc, #124]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800629e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062ae:	d028      	beq.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062b6:	d843      	bhi.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062be:	d013      	beq.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062c6:	d83b      	bhi.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d4:	d004      	beq.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80062d6:	e033      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80062d8:	f7fd fd2e 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 80062dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80062de:	e134      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80062e0:	f7fd fc08 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 80062e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80062e6:	e130      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f4:	d102      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80062f6:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062fa:	e126      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006300:	e123      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	0e1b      	lsrs	r3, r3, #24
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	e00d      	b.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800631a:	bf00      	nop
 800631c:	46020c00 	.word	0x46020c00
 8006320:	00f42400 	.word	0x00f42400
 8006324:	08009cdc 	.word	0x08009cdc
 8006328:	4b8a      	ldr	r3, [pc, #552]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800632a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	0e1b      	lsrs	r3, r3, #24
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	4a88      	ldr	r2, [pc, #544]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800633e:	e104      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006344:	e101      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800634e:	430b      	orrs	r3, r1
 8006350:	d16e      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006352:	4b80      	ldr	r3, [pc, #512]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006358:	f003 0318 	and.w	r3, r3, #24
 800635c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	2b18      	cmp	r3, #24
 8006362:	d862      	bhi.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006364:	a201      	add	r2, pc, #4	; (adr r2, 800636c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636a:	bf00      	nop
 800636c:	080063d1 	.word	0x080063d1
 8006370:	0800642b 	.word	0x0800642b
 8006374:	0800642b 	.word	0x0800642b
 8006378:	0800642b 	.word	0x0800642b
 800637c:	0800642b 	.word	0x0800642b
 8006380:	0800642b 	.word	0x0800642b
 8006384:	0800642b 	.word	0x0800642b
 8006388:	0800642b 	.word	0x0800642b
 800638c:	080063d9 	.word	0x080063d9
 8006390:	0800642b 	.word	0x0800642b
 8006394:	0800642b 	.word	0x0800642b
 8006398:	0800642b 	.word	0x0800642b
 800639c:	0800642b 	.word	0x0800642b
 80063a0:	0800642b 	.word	0x0800642b
 80063a4:	0800642b 	.word	0x0800642b
 80063a8:	0800642b 	.word	0x0800642b
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	0800642b 	.word	0x0800642b
 80063b4:	0800642b 	.word	0x0800642b
 80063b8:	0800642b 	.word	0x0800642b
 80063bc:	0800642b 	.word	0x0800642b
 80063c0:	0800642b 	.word	0x0800642b
 80063c4:	0800642b 	.word	0x0800642b
 80063c8:	0800642b 	.word	0x0800642b
 80063cc:	080063fb 	.word	0x080063fb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80063d0:	f7fd fcda 	bl	8003d88 <HAL_RCC_GetPCLK3Freq>
 80063d4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063d6:	e0b8      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80063d8:	f7fd fb8c 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 80063dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063de:	e0b4      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063e0:	4b5c      	ldr	r3, [pc, #368]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	d102      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80063ee:	4b5b      	ldr	r3, [pc, #364]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063f2:	e0aa      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063f8:	e0a7      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063fa:	4b56      	ldr	r3, [pc, #344]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8006406:	4b53      	ldr	r3, [pc, #332]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	0e1b      	lsrs	r3, r3, #24
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	e006      	b.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8006412:	4b50      	ldr	r3, [pc, #320]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006418:	041b      	lsls	r3, r3, #16
 800641a:	0e1b      	lsrs	r3, r3, #24
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	4a4d      	ldr	r2, [pc, #308]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006428:	e08f      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800642e:	e08c      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006434:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006438:	430b      	orrs	r3, r1
 800643a:	d14c      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800643c:	4b45      	ldr	r3, [pc, #276]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800643e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006442:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006446:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800644e:	d013      	beq.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006456:	d83b      	bhi.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800645e:	d013      	beq.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006466:	d833      	bhi.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	2b00      	cmp	r3, #0
 800646c:	d014      	beq.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006474:	d014      	beq.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006476:	e02b      	b.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006478:	f107 0318 	add.w	r3, r7, #24
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe fc7b 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006486:	e060      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe fb0d 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006496:	e058      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006498:	f7fd fb2c 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 800649c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800649e:	e054      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064a0:	4b2c      	ldr	r3, [pc, #176]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80064ac:	4b29      	ldr	r3, [pc, #164]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	0e1b      	lsrs	r3, r3, #24
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	e006      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80064b8:	4b26      	ldr	r3, [pc, #152]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064be:	041b      	lsls	r3, r3, #16
 80064c0:	0e1b      	lsrs	r3, r3, #24
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	4a24      	ldr	r2, [pc, #144]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80064c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064ce:	e03c      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d4:	e039      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80064d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064da:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80064de:	430b      	orrs	r3, r1
 80064e0:	d131      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80064e2:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80064ee:	4b19      	ldr	r3, [pc, #100]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d106      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8006502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
 8006508:	e01f      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800650a:	4b12      	ldr	r3, [pc, #72]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800650c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006518:	d112      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006520:	d10e      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800652c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006530:	d102      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8006532:	23fa      	movs	r3, #250	; 0xfa
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006536:	e008      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006538:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800653e:	e004      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	637b      	str	r3, [r7, #52]	; 0x34
 8006544:	e001      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800654c:	4618      	mov	r0, r3
 800654e:	3738      	adds	r7, #56	; 0x38
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	46020c00 	.word	0x46020c00
 8006558:	08009cdc 	.word	0x08009cdc
 800655c:	00f42400 	.word	0x00f42400

08006560 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006568:	4b47      	ldr	r3, [pc, #284]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a46      	ldr	r2, [pc, #280]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 800656e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006572:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006574:	f7fb f8a6 	bl	80016c4 <HAL_GetTick>
 8006578:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800657a:	e008      	b.n	800658e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800657c:	f7fb f8a2 	bl	80016c4 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e077      	b.n	800667e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800658e:	4b3e      	ldr	r3, [pc, #248]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800659a:	4b3b      	ldr	r3, [pc, #236]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6811      	ldr	r1, [r2, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6852      	ldr	r2, [r2, #4]
 80065ae:	3a01      	subs	r2, #1
 80065b0:	0212      	lsls	r2, r2, #8
 80065b2:	430a      	orrs	r2, r1
 80065b4:	4934      	ldr	r1, [pc, #208]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80065ba:	4b33      	ldr	r3, [pc, #204]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 80065bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065be:	4b33      	ldr	r3, [pc, #204]	; (800668c <RCCEx_PLL2_Config+0x12c>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6892      	ldr	r2, [r2, #8]
 80065c6:	3a01      	subs	r2, #1
 80065c8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	68d2      	ldr	r2, [r2, #12]
 80065d0:	3a01      	subs	r2, #1
 80065d2:	0252      	lsls	r2, r2, #9
 80065d4:	b292      	uxth	r2, r2
 80065d6:	4311      	orrs	r1, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6912      	ldr	r2, [r2, #16]
 80065dc:	3a01      	subs	r2, #1
 80065de:	0412      	lsls	r2, r2, #16
 80065e0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80065e4:	4311      	orrs	r1, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6952      	ldr	r2, [r2, #20]
 80065ea:	3a01      	subs	r2, #1
 80065ec:	0612      	lsls	r2, r2, #24
 80065ee:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80065f2:	430a      	orrs	r2, r1
 80065f4:	4924      	ldr	r1, [pc, #144]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80065fa:	4b23      	ldr	r3, [pc, #140]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	f023 020c 	bic.w	r2, r3, #12
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	4920      	ldr	r1, [pc, #128]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006608:	4313      	orrs	r3, r2
 800660a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800660c:	4b1e      	ldr	r3, [pc, #120]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	491c      	ldr	r1, [pc, #112]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006616:	4313      	orrs	r3, r2
 8006618:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800661a:	4b1b      	ldr	r3, [pc, #108]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	4a1a      	ldr	r2, [pc, #104]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006620:	f023 0310 	bic.w	r3, r3, #16
 8006624:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006626:	4b18      	ldr	r3, [pc, #96]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	69d2      	ldr	r2, [r2, #28]
 8006636:	00d2      	lsls	r2, r2, #3
 8006638:	4913      	ldr	r1, [pc, #76]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 800663a:	4313      	orrs	r3, r2
 800663c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800663e:	4b12      	ldr	r3, [pc, #72]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006642:	4a11      	ldr	r2, [pc, #68]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006644:	f043 0310 	orr.w	r3, r3, #16
 8006648:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800664a:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a0e      	ldr	r2, [pc, #56]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006650:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006654:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006656:	f7fb f835 	bl	80016c4 <HAL_GetTick>
 800665a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800665c:	e008      	b.n	8006670 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800665e:	f7fb f831 	bl	80016c4 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e006      	b.n	800667e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <RCCEx_PLL2_Config+0x128>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f0      	beq.n	800665e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800667c:	2300      	movs	r3, #0

}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	46020c00 	.word	0x46020c00
 800668c:	80800000 	.word	0x80800000

08006690 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006698:	4b47      	ldr	r3, [pc, #284]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a46      	ldr	r2, [pc, #280]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 800669e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066a4:	f7fb f80e 	bl	80016c4 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066aa:	e008      	b.n	80066be <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066ac:	f7fb f80a 	bl	80016c4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e077      	b.n	80067ae <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066be:	4b3e      	ldr	r3, [pc, #248]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80066ca:	4b3b      	ldr	r3, [pc, #236]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066d2:	f023 0303 	bic.w	r3, r3, #3
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6811      	ldr	r1, [r2, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6852      	ldr	r2, [r2, #4]
 80066de:	3a01      	subs	r2, #1
 80066e0:	0212      	lsls	r2, r2, #8
 80066e2:	430a      	orrs	r2, r1
 80066e4:	4934      	ldr	r1, [pc, #208]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	630b      	str	r3, [r1, #48]	; 0x30
 80066ea:	4b33      	ldr	r3, [pc, #204]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 80066ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ee:	4b33      	ldr	r3, [pc, #204]	; (80067bc <RCCEx_PLL3_Config+0x12c>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6892      	ldr	r2, [r2, #8]
 80066f6:	3a01      	subs	r2, #1
 80066f8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	68d2      	ldr	r2, [r2, #12]
 8006700:	3a01      	subs	r2, #1
 8006702:	0252      	lsls	r2, r2, #9
 8006704:	b292      	uxth	r2, r2
 8006706:	4311      	orrs	r1, r2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6912      	ldr	r2, [r2, #16]
 800670c:	3a01      	subs	r2, #1
 800670e:	0412      	lsls	r2, r2, #16
 8006710:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006714:	4311      	orrs	r1, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6952      	ldr	r2, [r2, #20]
 800671a:	3a01      	subs	r2, #1
 800671c:	0612      	lsls	r2, r2, #24
 800671e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006722:	430a      	orrs	r2, r1
 8006724:	4924      	ldr	r1, [pc, #144]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 8006726:	4313      	orrs	r3, r2
 8006728:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800672a:	4b23      	ldr	r3, [pc, #140]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	f023 020c 	bic.w	r2, r3, #12
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	4920      	ldr	r1, [pc, #128]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 8006738:	4313      	orrs	r3, r2
 800673a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800673c:	4b1e      	ldr	r3, [pc, #120]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 800673e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	491c      	ldr	r1, [pc, #112]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 8006746:	4313      	orrs	r3, r2
 8006748:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800674a:	4b1b      	ldr	r3, [pc, #108]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	4a1a      	ldr	r2, [pc, #104]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 8006750:	f023 0310 	bic.w	r3, r3, #16
 8006754:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006756:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 8006758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800675e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	69d2      	ldr	r2, [r2, #28]
 8006766:	00d2      	lsls	r2, r2, #3
 8006768:	4913      	ldr	r1, [pc, #76]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 800676a:	4313      	orrs	r3, r2
 800676c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	4a11      	ldr	r2, [pc, #68]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 8006774:	f043 0310 	orr.w	r3, r3, #16
 8006778:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a0e      	ldr	r2, [pc, #56]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006786:	f7fa ff9d 	bl	80016c4 <HAL_GetTick>
 800678a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800678c:	e008      	b.n	80067a0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800678e:	f7fa ff99 	bl	80016c4 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e006      	b.n	80067ae <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <RCCEx_PLL3_Config+0x128>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f0      	beq.n	800678e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	46020c00 	.word	0x46020c00
 80067bc:	80800000 	.word	0x80800000

080067c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d068      	beq.n	80068a4 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fa fc64 	bl	80010b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067f4:	4b2e      	ldr	r3, [pc, #184]	; (80068b0 <HAL_RTC_Init+0xf0>)
 80067f6:	22ca      	movs	r2, #202	; 0xca
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24
 80067fa:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <HAL_RTC_Init+0xf0>)
 80067fc:	2253      	movs	r2, #83	; 0x53
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f87d 	bl	8006900 <RTC_EnterInitMode>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d13f      	bne.n	8006890 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006810:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <HAL_RTC_Init+0xf0>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	4a26      	ldr	r2, [pc, #152]	; (80068b0 <HAL_RTC_Init+0xf0>)
 8006816:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800681a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006820:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <HAL_RTC_Init+0xf0>)
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6859      	ldr	r1, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	4319      	orrs	r1, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	430b      	orrs	r3, r1
 8006834:	491e      	ldr	r1, [pc, #120]	; (80068b0 <HAL_RTC_Init+0xf0>)
 8006836:	4313      	orrs	r3, r2
 8006838:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	041b      	lsls	r3, r3, #16
 8006844:	491a      	ldr	r1, [pc, #104]	; (80068b0 <HAL_RTC_Init+0xf0>)
 8006846:	4313      	orrs	r3, r2
 8006848:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800684a:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <HAL_RTC_Init+0xf0>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	430b      	orrs	r3, r1
 800685c:	4914      	ldr	r1, [pc, #80]	; (80068b0 <HAL_RTC_Init+0xf0>)
 800685e:	4313      	orrs	r3, r2
 8006860:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f880 	bl	8006968 <RTC_ExitInitMode>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10e      	bne.n	8006890 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006872:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <HAL_RTC_Init+0xf0>)
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a19      	ldr	r1, [r3, #32]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4319      	orrs	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	430b      	orrs	r3, r1
 800688a:	4909      	ldr	r1, [pc, #36]	; (80068b0 <HAL_RTC_Init+0xf0>)
 800688c:	4313      	orrs	r3, r2
 800688e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <HAL_RTC_Init+0xf0>)
 8006892:	22ff      	movs	r2, #255	; 0xff
 8006894:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d103      	bne.n	80068a4 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	46007800 	.word	0x46007800

080068b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80068bc:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <HAL_RTC_WaitForSynchro+0x48>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	4a0e      	ldr	r2, [pc, #56]	; (80068fc <HAL_RTC_WaitForSynchro+0x48>)
 80068c2:	f023 0320 	bic.w	r3, r3, #32
 80068c6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80068c8:	f7fa fefc 	bl	80016c4 <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068ce:	e009      	b.n	80068e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068d0:	f7fa fef8 	bl	80016c4 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068de:	d901      	bls.n	80068e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e006      	b.n	80068f2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068e4:	4b05      	ldr	r3, [pc, #20]	; (80068fc <HAL_RTC_WaitForSynchro+0x48>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0ef      	beq.n	80068d0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	46007800 	.word	0x46007800

08006900 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800690c:	4b15      	ldr	r3, [pc, #84]	; (8006964 <RTC_EnterInitMode+0x64>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d120      	bne.n	800695a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006918:	4b12      	ldr	r3, [pc, #72]	; (8006964 <RTC_EnterInitMode+0x64>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4a11      	ldr	r2, [pc, #68]	; (8006964 <RTC_EnterInitMode+0x64>)
 800691e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006922:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006924:	f7fa fece 	bl	80016c4 <HAL_GetTick>
 8006928:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800692a:	e00d      	b.n	8006948 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800692c:	f7fa feca 	bl	80016c4 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800693a:	d905      	bls.n	8006948 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2203      	movs	r2, #3
 8006944:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <RTC_EnterInitMode+0x64>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d102      	bne.n	800695a <RTC_EnterInitMode+0x5a>
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b03      	cmp	r3, #3
 8006958:	d1e8      	bne.n	800692c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	46007800 	.word	0x46007800

08006968 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006974:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <RTC_ExitInitMode+0x78>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <RTC_ExitInitMode+0x78>)
 800697a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800697e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006980:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <RTC_ExitInitMode+0x78>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10c      	bne.n	80069a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff91 	bl	80068b4 <HAL_RTC_WaitForSynchro>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01e      	beq.n	80069d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2203      	movs	r2, #3
 800699c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	e017      	b.n	80069d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <RTC_ExitInitMode+0x78>)
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <RTC_ExitInitMode+0x78>)
 80069ac:	f023 0320 	bic.w	r3, r3, #32
 80069b0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ff7e 	bl	80068b4 <HAL_RTC_WaitForSynchro>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2203      	movs	r2, #3
 80069c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <RTC_ExitInitMode+0x78>)
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	4a04      	ldr	r2, [pc, #16]	; (80069e0 <RTC_ExitInitMode+0x78>)
 80069d0:	f043 0320 	orr.w	r3, r3, #32
 80069d4:	6193      	str	r3, [r2, #24]
  }
  return status;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	46007800 	.word	0x46007800

080069e4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4910      	ldr	r1, [pc, #64]	; (8006a38 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	490c      	ldr	r1, [pc, #48]	; (8006a3c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	6919      	ldr	r1, [r3, #16]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	041b      	lsls	r3, r3, #16
 8006a22:	430b      	orrs	r3, r1
 8006a24:	4905      	ldr	r1, [pc, #20]	; (8006a3c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	46007800 	.word	0x46007800
 8006a3c:	46007c00 	.word	0x46007c00

08006a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e049      	b.n	8006ae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f841 	bl	8006aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	f000 fa88 	bl	8006f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d001      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e072      	b.n	8006c02 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a35      	ldr	r2, [pc, #212]	; (8006c10 <HAL_TIM_Base_Start_IT+0x10c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d040      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a34      	ldr	r2, [pc, #208]	; (8006c14 <HAL_TIM_Base_Start_IT+0x110>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d03b      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d036      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b5a:	d031      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_TIM_Base_Start_IT+0x114>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d02c      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2c      	ldr	r2, [pc, #176]	; (8006c1c <HAL_TIM_Base_Start_IT+0x118>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d027      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <HAL_TIM_Base_Start_IT+0x11c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d022      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a29      	ldr	r2, [pc, #164]	; (8006c24 <HAL_TIM_Base_Start_IT+0x120>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d01d      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <HAL_TIM_Base_Start_IT+0x124>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d018      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a26      	ldr	r2, [pc, #152]	; (8006c2c <HAL_TIM_Base_Start_IT+0x128>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d013      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <HAL_TIM_Base_Start_IT+0x12c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00e      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a23      	ldr	r2, [pc, #140]	; (8006c34 <HAL_TIM_Base_Start_IT+0x130>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d009      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <HAL_TIM_Base_Start_IT+0x134>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d004      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0xbc>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <HAL_TIM_Base_Start_IT+0x138>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d115      	bne.n	8006bec <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <HAL_TIM_Base_Start_IT+0x13c>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b06      	cmp	r3, #6
 8006bd0:	d015      	beq.n	8006bfe <HAL_TIM_Base_Start_IT+0xfa>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d011      	beq.n	8006bfe <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 0201 	orr.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bea:	e008      	b.n	8006bfe <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	e000      	b.n	8006c00 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	50012c00 	.word	0x50012c00
 8006c18:	40000400 	.word	0x40000400
 8006c1c:	50000400 	.word	0x50000400
 8006c20:	40000800 	.word	0x40000800
 8006c24:	50000800 	.word	0x50000800
 8006c28:	40000c00 	.word	0x40000c00
 8006c2c:	50000c00 	.word	0x50000c00
 8006c30:	40013400 	.word	0x40013400
 8006c34:	50013400 	.word	0x50013400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	50014000 	.word	0x50014000
 8006c40:	00010007 	.word	0x00010007

08006c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0202 	mvn.w	r2, #2
 8006c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f965 	bl	8006f56 <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f957 	bl	8006f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f968 	bl	8006f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d122      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d11b      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0204 	mvn.w	r2, #4
 8006cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f93b 	bl	8006f56 <HAL_TIM_IC_CaptureCallback>
 8006ce0:	e005      	b.n	8006cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f92d 	bl	8006f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f93e 	bl	8006f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d122      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d11b      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0208 	mvn.w	r2, #8
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f911 	bl	8006f56 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f903 	bl	8006f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f914 	bl	8006f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d122      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d11b      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0210 	mvn.w	r2, #16
 8006d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2208      	movs	r2, #8
 8006d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f8e7 	bl	8006f56 <HAL_TIM_IC_CaptureCallback>
 8006d88:	e005      	b.n	8006d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8d9 	bl	8006f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8ea 	bl	8006f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d10e      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0201 	mvn.w	r2, #1
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fa f8de 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d10e      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de0:	2b80      	cmp	r3, #128	; 0x80
 8006de2:	d107      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f9d4 	bl	800719c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e02:	d10e      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d107      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f9c7 	bl	80071b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d10e      	bne.n	8006e4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d107      	bne.n	8006e4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f898 	bl	8006f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d10e      	bne.n	8006e7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d107      	bne.n	8006e7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f06f 0220 	mvn.w	r2, #32
 8006e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f987 	bl	8007188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e88:	d10f      	bne.n	8006eaa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e98:	d107      	bne.n	8006eaa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f98d 	bl	80071c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eb8:	d10f      	bne.n	8006eda <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ec8:	d107      	bne.n	8006eda <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f97f 	bl	80071d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ee8:	d10f      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef8:	d107      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f971 	bl	80071ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f18:	d10f      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f28:	d107      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f963 	bl	8007200 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a68      	ldr	r2, [pc, #416]	; (8007148 <TIM_Base_SetConfig+0x1b4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d02b      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a67      	ldr	r2, [pc, #412]	; (800714c <TIM_Base_SetConfig+0x1b8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d027      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fba:	d023      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fc2:	d01f      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a62      	ldr	r2, [pc, #392]	; (8007150 <TIM_Base_SetConfig+0x1bc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d01b      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a61      	ldr	r2, [pc, #388]	; (8007154 <TIM_Base_SetConfig+0x1c0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d017      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a60      	ldr	r2, [pc, #384]	; (8007158 <TIM_Base_SetConfig+0x1c4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a5f      	ldr	r2, [pc, #380]	; (800715c <TIM_Base_SetConfig+0x1c8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00f      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a5e      	ldr	r2, [pc, #376]	; (8007160 <TIM_Base_SetConfig+0x1cc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00b      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a5d      	ldr	r2, [pc, #372]	; (8007164 <TIM_Base_SetConfig+0x1d0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d007      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a5c      	ldr	r2, [pc, #368]	; (8007168 <TIM_Base_SetConfig+0x1d4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_Base_SetConfig+0x70>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a5b      	ldr	r2, [pc, #364]	; (800716c <TIM_Base_SetConfig+0x1d8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d108      	bne.n	8007016 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a4b      	ldr	r2, [pc, #300]	; (8007148 <TIM_Base_SetConfig+0x1b4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d043      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a4a      	ldr	r2, [pc, #296]	; (800714c <TIM_Base_SetConfig+0x1b8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d03f      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702c:	d03b      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007034:	d037      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a45      	ldr	r2, [pc, #276]	; (8007150 <TIM_Base_SetConfig+0x1bc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d033      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a44      	ldr	r2, [pc, #272]	; (8007154 <TIM_Base_SetConfig+0x1c0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d02f      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a43      	ldr	r2, [pc, #268]	; (8007158 <TIM_Base_SetConfig+0x1c4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d02b      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a42      	ldr	r2, [pc, #264]	; (800715c <TIM_Base_SetConfig+0x1c8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d027      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a41      	ldr	r2, [pc, #260]	; (8007160 <TIM_Base_SetConfig+0x1cc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d023      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a40      	ldr	r2, [pc, #256]	; (8007164 <TIM_Base_SetConfig+0x1d0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01f      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a3f      	ldr	r2, [pc, #252]	; (8007168 <TIM_Base_SetConfig+0x1d4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d01b      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a3e      	ldr	r2, [pc, #248]	; (800716c <TIM_Base_SetConfig+0x1d8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d017      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a3d      	ldr	r2, [pc, #244]	; (8007170 <TIM_Base_SetConfig+0x1dc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d013      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <TIM_Base_SetConfig+0x1e0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00f      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a3b      	ldr	r2, [pc, #236]	; (8007178 <TIM_Base_SetConfig+0x1e4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00b      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a3a      	ldr	r2, [pc, #232]	; (800717c <TIM_Base_SetConfig+0x1e8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d007      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a39      	ldr	r2, [pc, #228]	; (8007180 <TIM_Base_SetConfig+0x1ec>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_Base_SetConfig+0x112>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a38      	ldr	r2, [pc, #224]	; (8007184 <TIM_Base_SetConfig+0x1f0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d108      	bne.n	80070b8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a1a      	ldr	r2, [pc, #104]	; (8007148 <TIM_Base_SetConfig+0x1b4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d023      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a19      	ldr	r2, [pc, #100]	; (800714c <TIM_Base_SetConfig+0x1b8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01f      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a1e      	ldr	r2, [pc, #120]	; (8007168 <TIM_Base_SetConfig+0x1d4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d01b      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a1d      	ldr	r2, [pc, #116]	; (800716c <TIM_Base_SetConfig+0x1d8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d017      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <TIM_Base_SetConfig+0x1dc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d013      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1b      	ldr	r2, [pc, #108]	; (8007174 <TIM_Base_SetConfig+0x1e0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00f      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a1a      	ldr	r2, [pc, #104]	; (8007178 <TIM_Base_SetConfig+0x1e4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00b      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a19      	ldr	r2, [pc, #100]	; (800717c <TIM_Base_SetConfig+0x1e8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a18      	ldr	r2, [pc, #96]	; (8007180 <TIM_Base_SetConfig+0x1ec>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_Base_SetConfig+0x198>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a17      	ldr	r2, [pc, #92]	; (8007184 <TIM_Base_SetConfig+0x1f0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d103      	bne.n	8007134 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	615a      	str	r2, [r3, #20]
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40012c00 	.word	0x40012c00
 800714c:	50012c00 	.word	0x50012c00
 8007150:	40000400 	.word	0x40000400
 8007154:	50000400 	.word	0x50000400
 8007158:	40000800 	.word	0x40000800
 800715c:	50000800 	.word	0x50000800
 8007160:	40000c00 	.word	0x40000c00
 8007164:	50000c00 	.word	0x50000c00
 8007168:	40013400 	.word	0x40013400
 800716c:	50013400 	.word	0x50013400
 8007170:	40014000 	.word	0x40014000
 8007174:	50014000 	.word	0x50014000
 8007178:	40014400 	.word	0x40014400
 800717c:	50014400 	.word	0x50014400
 8007180:	40014800 	.word	0x40014800
 8007184:	50014800 	.word	0x50014800

08007188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e042      	b.n	80072ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7f9 ff7f 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2224      	movs	r2, #36	; 0x24
 8007242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f82c 	bl	80072b4 <UART_SetConfig>
 800725c:	4603      	mov	r3, r0
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e022      	b.n	80072ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f9c2 	bl	80075f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fa49 	bl	800773c <UART_CheckIdleState>
 80072aa:	4603      	mov	r3, r0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b8:	b094      	sub	sp, #80	; 0x50
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4b7e      	ldr	r3, [pc, #504]	; (80074c4 <UART_SetConfig+0x210>)
 80072ca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	431a      	orrs	r2, r3
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	431a      	orrs	r2, r3
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4977      	ldr	r1, [pc, #476]	; (80074c8 <UART_SetConfig+0x214>)
 80072ec:	4019      	ands	r1, r3
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	68d9      	ldr	r1, [r3, #12]
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	ea40 0301 	orr.w	r3, r0, r1
 800730e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b6a      	ldr	r3, [pc, #424]	; (80074c4 <UART_SetConfig+0x210>)
 800731c:	429a      	cmp	r2, r3
 800731e:	d009      	beq.n	8007334 <UART_SetConfig+0x80>
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4b69      	ldr	r3, [pc, #420]	; (80074cc <UART_SetConfig+0x218>)
 8007326:	429a      	cmp	r2, r3
 8007328:	d004      	beq.n	8007334 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	6a1a      	ldr	r2, [r3, #32]
 800732e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007330:	4313      	orrs	r3, r2
 8007332:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800733e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007348:	430b      	orrs	r3, r1
 800734a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	f023 000f 	bic.w	r0, r3, #15
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	ea40 0301 	orr.w	r3, r0, r1
 8007362:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	4b59      	ldr	r3, [pc, #356]	; (80074d0 <UART_SetConfig+0x21c>)
 800736a:	429a      	cmp	r2, r3
 800736c:	d102      	bne.n	8007374 <UART_SetConfig+0xc0>
 800736e:	2301      	movs	r3, #1
 8007370:	64bb      	str	r3, [r7, #72]	; 0x48
 8007372:	e029      	b.n	80073c8 <UART_SetConfig+0x114>
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4b56      	ldr	r3, [pc, #344]	; (80074d4 <UART_SetConfig+0x220>)
 800737a:	429a      	cmp	r2, r3
 800737c:	d102      	bne.n	8007384 <UART_SetConfig+0xd0>
 800737e:	2302      	movs	r3, #2
 8007380:	64bb      	str	r3, [r7, #72]	; 0x48
 8007382:	e021      	b.n	80073c8 <UART_SetConfig+0x114>
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	4b53      	ldr	r3, [pc, #332]	; (80074d8 <UART_SetConfig+0x224>)
 800738a:	429a      	cmp	r2, r3
 800738c:	d102      	bne.n	8007394 <UART_SetConfig+0xe0>
 800738e:	2304      	movs	r3, #4
 8007390:	64bb      	str	r3, [r7, #72]	; 0x48
 8007392:	e019      	b.n	80073c8 <UART_SetConfig+0x114>
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	4b50      	ldr	r3, [pc, #320]	; (80074dc <UART_SetConfig+0x228>)
 800739a:	429a      	cmp	r2, r3
 800739c:	d102      	bne.n	80073a4 <UART_SetConfig+0xf0>
 800739e:	2308      	movs	r3, #8
 80073a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073a2:	e011      	b.n	80073c8 <UART_SetConfig+0x114>
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b4d      	ldr	r3, [pc, #308]	; (80074e0 <UART_SetConfig+0x22c>)
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d102      	bne.n	80073b4 <UART_SetConfig+0x100>
 80073ae:	2310      	movs	r3, #16
 80073b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073b2:	e009      	b.n	80073c8 <UART_SetConfig+0x114>
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	4b42      	ldr	r3, [pc, #264]	; (80074c4 <UART_SetConfig+0x210>)
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d102      	bne.n	80073c4 <UART_SetConfig+0x110>
 80073be:	2320      	movs	r3, #32
 80073c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c2:	e001      	b.n	80073c8 <UART_SetConfig+0x114>
 80073c4:	2300      	movs	r3, #0
 80073c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4b3d      	ldr	r3, [pc, #244]	; (80074c4 <UART_SetConfig+0x210>)
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d005      	beq.n	80073de <UART_SetConfig+0x12a>
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b3d      	ldr	r3, [pc, #244]	; (80074cc <UART_SetConfig+0x218>)
 80073d8:	429a      	cmp	r2, r3
 80073da:	f040 8085 	bne.w	80074e8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e0:	2200      	movs	r2, #0
 80073e2:	623b      	str	r3, [r7, #32]
 80073e4:	627a      	str	r2, [r7, #36]	; 0x24
 80073e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80073ea:	f7fd ff91 	bl	8005310 <HAL_RCCEx_GetPeriphCLKFreq>
 80073ee:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80073f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80e8 	beq.w	80075c8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	4a39      	ldr	r2, [pc, #228]	; (80074e4 <UART_SetConfig+0x230>)
 80073fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007402:	461a      	mov	r2, r3
 8007404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007406:	fbb3 f3f2 	udiv	r3, r3, r2
 800740a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	4613      	mov	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	4413      	add	r3, r2
 8007416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007418:	429a      	cmp	r2, r3
 800741a:	d305      	bcc.n	8007428 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007424:	429a      	cmp	r2, r3
 8007426:	d903      	bls.n	8007430 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800742e:	e048      	b.n	80074c2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007432:	2200      	movs	r2, #0
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	61fa      	str	r2, [r7, #28]
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	4a29      	ldr	r2, [pc, #164]	; (80074e4 <UART_SetConfig+0x230>)
 800743e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007442:	b29b      	uxth	r3, r3
 8007444:	2200      	movs	r2, #0
 8007446:	613b      	str	r3, [r7, #16]
 8007448:	617a      	str	r2, [r7, #20]
 800744a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800744e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007452:	f7f9 f835 	bl	80004c0 <__aeabi_uldivmod>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4610      	mov	r0, r2
 800745c:	4619      	mov	r1, r3
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	020b      	lsls	r3, r1, #8
 8007468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800746c:	0202      	lsls	r2, r0, #8
 800746e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007470:	6849      	ldr	r1, [r1, #4]
 8007472:	0849      	lsrs	r1, r1, #1
 8007474:	2000      	movs	r0, #0
 8007476:	460c      	mov	r4, r1
 8007478:	4605      	mov	r5, r0
 800747a:	eb12 0804 	adds.w	r8, r2, r4
 800747e:	eb43 0905 	adc.w	r9, r3, r5
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	60fa      	str	r2, [r7, #12]
 800748c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007490:	4640      	mov	r0, r8
 8007492:	4649      	mov	r1, r9
 8007494:	f7f9 f814 	bl	80004c0 <__aeabi_uldivmod>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4613      	mov	r3, r2
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074a6:	d308      	bcc.n	80074ba <UART_SetConfig+0x206>
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ae:	d204      	bcs.n	80074ba <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074b6:	60da      	str	r2, [r3, #12]
 80074b8:	e003      	b.n	80074c2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80074c0:	e082      	b.n	80075c8 <UART_SetConfig+0x314>
 80074c2:	e081      	b.n	80075c8 <UART_SetConfig+0x314>
 80074c4:	46002400 	.word	0x46002400
 80074c8:	cfff69f3 	.word	0xcfff69f3
 80074cc:	56002400 	.word	0x56002400
 80074d0:	40013800 	.word	0x40013800
 80074d4:	40004400 	.word	0x40004400
 80074d8:	40004800 	.word	0x40004800
 80074dc:	40004c00 	.word	0x40004c00
 80074e0:	40005000 	.word	0x40005000
 80074e4:	08009d9c 	.word	0x08009d9c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f0:	d13c      	bne.n	800756c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80074f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f4:	2200      	movs	r2, #0
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074fe:	f7fd ff07 	bl	8005310 <HAL_RCCEx_GetPeriphCLKFreq>
 8007502:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d05e      	beq.n	80075c8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	4a39      	ldr	r2, [pc, #228]	; (80075f4 <UART_SetConfig+0x340>)
 8007510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007514:	461a      	mov	r2, r3
 8007516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007518:	fbb3 f3f2 	udiv	r3, r3, r2
 800751c:	005a      	lsls	r2, r3, #1
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	441a      	add	r2, r3
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	fbb2 f3f3 	udiv	r3, r2, r3
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007532:	2b0f      	cmp	r3, #15
 8007534:	d916      	bls.n	8007564 <UART_SetConfig+0x2b0>
 8007536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753c:	d212      	bcs.n	8007564 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	b29b      	uxth	r3, r3
 8007542:	f023 030f 	bic.w	r3, r3, #15
 8007546:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	b29b      	uxth	r3, r3
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	b29a      	uxth	r2, r3
 8007554:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007556:	4313      	orrs	r3, r2
 8007558:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	e031      	b.n	80075c8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800756a:	e02d      	b.n	80075c8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800756c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800756e:	2200      	movs	r2, #0
 8007570:	469a      	mov	sl, r3
 8007572:	4693      	mov	fp, r2
 8007574:	4650      	mov	r0, sl
 8007576:	4659      	mov	r1, fp
 8007578:	f7fd feca 	bl	8005310 <HAL_RCCEx_GetPeriphCLKFreq>
 800757c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800757e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d021      	beq.n	80075c8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	4a1a      	ldr	r2, [pc, #104]	; (80075f4 <UART_SetConfig+0x340>)
 800758a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800758e:	461a      	mov	r2, r3
 8007590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007592:	fbb3 f2f2 	udiv	r2, r3, r2
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	441a      	add	r2, r3
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075aa:	2b0f      	cmp	r3, #15
 80075ac:	d909      	bls.n	80075c2 <UART_SetConfig+0x30e>
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b4:	d205      	bcs.n	80075c2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60da      	str	r2, [r3, #12]
 80075c0:	e002      	b.n	80075c8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	2201      	movs	r2, #1
 80075cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	2201      	movs	r2, #1
 80075d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	2200      	movs	r2, #0
 80075dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	2200      	movs	r2, #0
 80075e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3750      	adds	r7, #80	; 0x50
 80075ec:	46bd      	mov	sp, r7
 80075ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075f2:	bf00      	nop
 80075f4:	08009d9c 	.word	0x08009d9c

080075f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00a      	beq.n	80076aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01a      	beq.n	800770e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f6:	d10a      	bne.n	800770e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	605a      	str	r2, [r3, #4]
  }
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af02      	add	r7, sp, #8
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800774c:	f7f9 ffba 	bl	80016c4 <HAL_GetTick>
 8007750:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b08      	cmp	r3, #8
 800775e:	d10e      	bne.n	800777e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f82f 	bl	80077d2 <UART_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e025      	b.n	80077ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b04      	cmp	r3, #4
 800778a:	d10e      	bne.n	80077aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800778c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f819 	bl	80077d2 <UART_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e00f      	b.n	80077ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b09c      	sub	sp, #112	; 0x70
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	4613      	mov	r3, r2
 80077e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e2:	e0a9      	b.n	8007938 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ea:	f000 80a5 	beq.w	8007938 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ee:	f7f9 ff69 	bl	80016c4 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d302      	bcc.n	8007804 <UART_WaitOnFlagUntilTimeout+0x32>
 80077fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007800:	2b00      	cmp	r3, #0
 8007802:	d140      	bne.n	8007886 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007814:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007818:	667b      	str	r3, [r7, #100]	; 0x64
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007824:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007828:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e6      	bne.n	8007804 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	f023 0301 	bic.w	r3, r3, #1
 800784c:	663b      	str	r3, [r7, #96]	; 0x60
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007856:	64ba      	str	r2, [r7, #72]	; 0x48
 8007858:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800785c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e5      	bne.n	8007836 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2220      	movs	r2, #32
 800786e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e069      	b.n	800795a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d051      	beq.n	8007938 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800789e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a2:	d149      	bne.n	8007938 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34
 80078ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e6      	bne.n	80078ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3308      	adds	r3, #8
 80078e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	613b      	str	r3, [r7, #16]
   return(result);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3308      	adds	r3, #8
 80078fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007900:	623a      	str	r2, [r7, #32]
 8007902:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	69f9      	ldr	r1, [r7, #28]
 8007906:	6a3a      	ldr	r2, [r7, #32]
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	61bb      	str	r3, [r7, #24]
   return(result);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e5      	bne.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2220      	movs	r2, #32
 8007920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e010      	b.n	800795a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	69da      	ldr	r2, [r3, #28]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	4013      	ands	r3, r2
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	429a      	cmp	r2, r3
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	429a      	cmp	r2, r3
 8007954:	f43f af46 	beq.w	80077e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3770      	adds	r7, #112	; 0x70
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_UARTEx_DisableFifoMode+0x16>
 8007974:	2302      	movs	r3, #2
 8007976:	e027      	b.n	80079c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2224      	movs	r2, #36	; 0x24
 8007984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e02d      	b.n	8007a48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2224      	movs	r2, #36	; 0x24
 80079f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f84f 	bl	8007acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e02d      	b.n	8007ac4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2224      	movs	r2, #36	; 0x24
 8007a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f811 	bl	8007acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d108      	bne.n	8007aee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aec:	e031      	b.n	8007b52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aee:	2308      	movs	r3, #8
 8007af0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007af2:	2308      	movs	r3, #8
 8007af4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	0e5b      	lsrs	r3, r3, #25
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	0f5b      	lsrs	r3, r3, #29
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	7b3a      	ldrb	r2, [r7, #12]
 8007b1a:	4911      	ldr	r1, [pc, #68]	; (8007b60 <UARTEx_SetNbDataToProcess+0x94>)
 8007b1c:	5c8a      	ldrb	r2, [r1, r2]
 8007b1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b22:	7b3a      	ldrb	r2, [r7, #12]
 8007b24:	490f      	ldr	r1, [pc, #60]	; (8007b64 <UARTEx_SetNbDataToProcess+0x98>)
 8007b26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	7b7a      	ldrb	r2, [r7, #13]
 8007b38:	4909      	ldr	r1, [pc, #36]	; (8007b60 <UARTEx_SetNbDataToProcess+0x94>)
 8007b3a:	5c8a      	ldrb	r2, [r1, r2]
 8007b3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b40:	7b7a      	ldrb	r2, [r7, #13]
 8007b42:	4908      	ldr	r1, [pc, #32]	; (8007b64 <UARTEx_SetNbDataToProcess+0x98>)
 8007b44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	08009db4 	.word	0x08009db4
 8007b64:	08009dbc 	.word	0x08009dbc

08007b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b68:	b084      	sub	sp, #16
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	f107 001c 	add.w	r0, r7, #28
 8007b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa72 	bl	8008070 <USB_CoreReset>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ba2:	e005      	b.n	8007bb0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bbc:	b004      	add	sp, #16
 8007bbe:	4770      	bx	lr

08007bc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f023 0201 	bic.w	r2, r3, #1
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d115      	bne.n	8007c30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c10:	2001      	movs	r0, #1
 8007c12:	f7f9 fd63 	bl	80016dc <HAL_Delay>
      ms++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fa19 	bl	8008054 <USB_GetMode>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d01e      	beq.n	8007c66 <USB_SetCurrentMode+0x84>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b31      	cmp	r3, #49	; 0x31
 8007c2c:	d9f0      	bls.n	8007c10 <USB_SetCurrentMode+0x2e>
 8007c2e:	e01a      	b.n	8007c66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d115      	bne.n	8007c62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c42:	2001      	movs	r0, #1
 8007c44:	f7f9 fd4a 	bl	80016dc <HAL_Delay>
      ms++;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa00 	bl	8008054 <USB_GetMode>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <USB_SetCurrentMode+0x84>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b31      	cmp	r3, #49	; 0x31
 8007c5e:	d9f0      	bls.n	8007c42 <USB_SetCurrentMode+0x60>
 8007c60:	e001      	b.n	8007c66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e005      	b.n	8007c72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b32      	cmp	r3, #50	; 0x32
 8007c6a:	d101      	bne.n	8007c70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e000      	b.n	8007c72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c96:	2300      	movs	r3, #0
 8007c98:	613b      	str	r3, [r7, #16]
 8007c9a:	e009      	b.n	8007cb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	3340      	adds	r3, #64	; 0x40
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3301      	adds	r3, #1
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b0e      	cmp	r3, #14
 8007cb4:	d9f2      	bls.n	8007c9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11c      	bne.n	8007cf6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cca:	f043 0302 	orr.w	r3, r3, #2
 8007cce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e005      	b.n	8007d02 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d14:	4619      	mov	r1, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	680b      	ldr	r3, [r1, #0]
 8007d20:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d22:	2103      	movs	r1, #3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f95b 	bl	8007fe0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d2a:	2110      	movs	r1, #16
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8f3 	bl	8007f18 <USB_FlushTxFifo>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f91f 	bl	8007f80 <USB_FlushRxFifo>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d52:	461a      	mov	r2, r3
 8007d54:	2300      	movs	r3, #0
 8007d56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5e:	461a      	mov	r2, r3
 8007d60:	2300      	movs	r3, #0
 8007d62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	e043      	b.n	8007dfe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d8c:	d118      	bne.n	8007dc0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da0:	461a      	mov	r2, r3
 8007da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	e013      	b.n	8007dd2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db6:	461a      	mov	r2, r3
 8007db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	e008      	b.n	8007dd2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dde:	461a      	mov	r2, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	461a      	mov	r2, r3
 8007df2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007df6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d3b7      	bcc.n	8007d76 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e06:	2300      	movs	r3, #0
 8007e08:	613b      	str	r3, [r7, #16]
 8007e0a:	e043      	b.n	8007e94 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e22:	d118      	bne.n	8007e56 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e36:	461a      	mov	r2, r3
 8007e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	e013      	b.n	8007e68 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	e008      	b.n	8007e68 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e62:	461a      	mov	r2, r3
 8007e64:	2300      	movs	r3, #0
 8007e66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e74:	461a      	mov	r2, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e86:	461a      	mov	r2, r3
 8007e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	3301      	adds	r3, #1
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d3b7      	bcc.n	8007e0c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ebc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d105      	bne.n	8007ed0 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f043 0210 	orr.w	r2, r3, #16
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <USB_DevInit+0x298>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	f043 0208 	orr.w	r2, r3, #8
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d107      	bne.n	8007f04 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007efc:	f043 0304 	orr.w	r3, r3, #4
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f10:	b004      	add	sp, #16
 8007f12:	4770      	bx	lr
 8007f14:	803c3800 	.word	0x803c3800

08007f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a13      	ldr	r2, [pc, #76]	; (8007f7c <USB_FlushTxFifo+0x64>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d901      	bls.n	8007f38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e01b      	b.n	8007f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	daf2      	bge.n	8007f26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	019b      	lsls	r3, r3, #6
 8007f48:	f043 0220 	orr.w	r2, r3, #32
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a08      	ldr	r2, [pc, #32]	; (8007f7c <USB_FlushTxFifo+0x64>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d901      	bls.n	8007f62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e006      	b.n	8007f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d0f0      	beq.n	8007f50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	00030d40 	.word	0x00030d40

08007f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4a11      	ldr	r2, [pc, #68]	; (8007fdc <USB_FlushRxFifo+0x5c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d901      	bls.n	8007f9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e018      	b.n	8007fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	daf2      	bge.n	8007f8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2210      	movs	r2, #16
 8007fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4a08      	ldr	r2, [pc, #32]	; (8007fdc <USB_FlushRxFifo+0x5c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d901      	bls.n	8007fc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e006      	b.n	8007fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2b10      	cmp	r3, #16
 8007fcc:	d0f0      	beq.n	8007fb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	00030d40 	.word	0x00030d40

08007fe0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008000:	4313      	orrs	r3, r2
 8008002:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008040:	f043 0302 	orr.w	r3, r3, #2
 8008044:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f003 0301 	and.w	r3, r3, #1
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4a13      	ldr	r2, [pc, #76]	; (80080d4 <USB_CoreReset+0x64>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d901      	bls.n	800808e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e01b      	b.n	80080c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	daf2      	bge.n	800807c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f043 0201 	orr.w	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4a09      	ldr	r2, [pc, #36]	; (80080d4 <USB_CoreReset+0x64>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d901      	bls.n	80080b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e006      	b.n	80080c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d0f0      	beq.n	80080a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	00030d40 	.word	0x00030d40

080080d8 <_tx_block_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b090      	sub	sp, #64	; 0x40
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
TX_BLOCK_POOL       *next_pool;
TX_BLOCK_POOL       *previous_pool;


    /* Initialize block pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BLOCK_POOL)));
 80080e6:	2230      	movs	r2, #48	; 0x30
 80080e8:	2100      	movs	r1, #0
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f001 fdbc 	bl	8009c68 <memset>

    /* Round the block size up to something that is evenly divisible by
       an ALIGN_TYPE (typically this is a 32-bit ULONG). This helps guarantee proper alignment.  */
    block_size =  (((block_size + (sizeof(ALIGN_TYPE))) - ((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3303      	adds	r3, #3
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	607b      	str	r3, [r7, #4]

    /* Round the pool size down to something that is evenly divisible by
       an ALIGN_TYPE (typically this is a 32-bit ULONG).  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80080fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080fc:	f023 0303 	bic.w	r3, r3, #3
 8008100:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Setup the basic block pool fields.  */
    pool_ptr -> tx_block_pool_name =             name_ptr;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	605a      	str	r2, [r3, #4]
    pool_ptr -> tx_block_pool_start =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	615a      	str	r2, [r3, #20]
    pool_ptr -> tx_block_pool_size =             pool_size;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008112:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_block_pool_block_size =       (UINT) block_size;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	61da      	str	r2, [r3, #28]

    /* Calculate the total number of blocks.  */
    total_blocks =  pool_size/(block_size + (sizeof(UCHAR *)));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3304      	adds	r3, #4
 800811e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Walk through the pool area, setting up the available block list.  */
    blocks =            ((UINT) 0);
 8008126:	2300      	movs	r3, #0
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
    block_ptr =         TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	637b      	str	r3, [r7, #52]	; 0x34
    next_block_ptr =    TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3304      	adds	r3, #4
 8008132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008134:	4413      	add	r3, r2
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
    while(blocks < (UINT) total_blocks)
 8008138:	e00e      	b.n	8008158 <_tx_block_pool_create+0x80>
    {

        /* Yes, we have another block.  Increment the block count.  */
        blocks++;
 800813a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800813c:	3301      	adds	r3, #1
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup the link to the next block.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
        *block_link_ptr =  next_block_ptr;
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008148:	601a      	str	r2, [r3, #0]

        /* Advance to the next block.  */
        block_ptr =   next_block_ptr;
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Update the next block pointer.  */
        next_block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008154:	4413      	add	r3, r2
 8008156:	633b      	str	r3, [r7, #48]	; 0x30
    while(blocks < (UINT) total_blocks)
 8008158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	429a      	cmp	r2, r3
 800815e:	d3ec      	bcc.n	800813a <_tx_block_pool_create+0x62>
    }

    /* Save the remaining information in the pool control block.  */
    pool_ptr -> tx_block_pool_available =  blocks;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008164:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_block_pool_total =      blocks;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800816a:	60da      	str	r2, [r3, #12]

    /* Quickly check to make sure at least one block is in the pool.  */
    if (blocks != ((UINT) 0))
 800816c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d047      	beq.n	8008202 <_tx_block_pool_create+0x12a>
    {

        /* Backup to the last block in the pool.  */
        block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr,(block_size + (sizeof(UCHAR *))));
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	f06f 0303 	mvn.w	r3, #3
 8008178:	1a9b      	subs	r3, r3, r2
 800817a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800817c:	4413      	add	r3, r2
 800817e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the last block's forward pointer to NULL.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28
        *block_link_ptr =  TX_NULL;
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]

        /* Setup the starting pool address.  */
        pool_ptr -> tx_block_pool_available_list =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	611a      	str	r2, [r3, #16]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008190:	f3ef 8310 	mrs	r3, PRIMASK
 8008194:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8008196:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8008198:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800819a:	b672      	cpsid	i
#endif
    return(int_posture);
 800819c:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts to place the block pool on the created list.  */
        TX_DISABLE
 800819e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Setup the block pool ID to make it valid.  */
        pool_ptr -> tx_block_pool_id =  TX_BLOCK_POOL_ID;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a1b      	ldr	r2, [pc, #108]	; (8008210 <_tx_block_pool_create+0x138>)
 80081a4:	601a      	str	r2, [r3, #0]

        /* Place the block pool on the list of created block pools.  First,
           check for an empty list.  */
        if (_tx_block_pool_created_count == TX_EMPTY)
 80081a6:	4b1b      	ldr	r3, [pc, #108]	; (8008214 <_tx_block_pool_create+0x13c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d109      	bne.n	80081c2 <_tx_block_pool_create+0xea>
        {

            /* The created block pool list is empty.  Add block pool to empty list.  */
            _tx_block_pool_created_ptr =                  pool_ptr;
 80081ae:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <_tx_block_pool_create+0x140>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6013      	str	r3, [r2, #0]
            pool_ptr -> tx_block_pool_created_next =      pool_ptr;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	629a      	str	r2, [r3, #40]	; 0x28
            pool_ptr -> tx_block_pool_created_previous =  pool_ptr;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	62da      	str	r2, [r3, #44]	; 0x2c
 80081c0:	e011      	b.n	80081e6 <_tx_block_pool_create+0x10e>
        }
        else
        {

            /* This list is not NULL, add to the end of the list.  */
            next_pool =      _tx_block_pool_created_ptr;
 80081c2:	4b15      	ldr	r3, [pc, #84]	; (8008218 <_tx_block_pool_create+0x140>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	623b      	str	r3, [r7, #32]
            previous_pool =  next_pool -> tx_block_pool_created_previous;
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	61fb      	str	r3, [r7, #28]

            /* Place the new block pool in the list.  */
            next_pool -> tx_block_pool_created_previous =  pool_ptr;
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	62da      	str	r2, [r3, #44]	; 0x2c
            previous_pool -> tx_block_pool_created_next =  pool_ptr;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	629a      	str	r2, [r3, #40]	; 0x28

            /* Setup this block pool's created links.  */
            pool_ptr -> tx_block_pool_created_previous =  previous_pool;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	69fa      	ldr	r2, [r7, #28]
 80081de:	62da      	str	r2, [r3, #44]	; 0x2c
            pool_ptr -> tx_block_pool_created_next =      next_pool;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6a3a      	ldr	r2, [r7, #32]
 80081e4:	629a      	str	r2, [r3, #40]	; 0x28
        }

        /* Increment the created count.  */
        _tx_block_pool_created_count++;
 80081e6:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <_tx_block_pool_create+0x13c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a09      	ldr	r2, [pc, #36]	; (8008214 <_tx_block_pool_create+0x13c>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f383 8810 	msr	PRIMASK, r3
}
 80081fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return successful status.  */
        status =  TX_SUCCESS;
 80081fc:	2300      	movs	r3, #0
 80081fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008200:	e001      	b.n	8008206 <_tx_block_pool_create+0x12e>
    }
    else
    {

        /* Not enough memory for one block, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8008202:	2305      	movs	r3, #5
 8008204:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Return completion status.  */
    return(status);
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008208:	4618      	mov	r0, r3
 800820a:	3740      	adds	r7, #64	; 0x40
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	424c4f43 	.word	0x424c4f43
 8008214:	200a694c 	.word	0x200a694c
 8008218:	200a6948 	.word	0x200a6948

0800821c <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b096      	sub	sp, #88	; 0x58
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3303      	adds	r3, #3
 800822e:	f023 0303 	bic.w	r3, r3, #3
 8008232:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008234:	f3ef 8310 	mrs	r3, PRIMASK
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800823c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800823e:	b672      	cpsid	i
    return(int_posture);
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8008242:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008244:	4b55      	ldr	r3, [pc, #340]	; (800839c <_tx_byte_allocate+0x180>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008252:	621a      	str	r2, [r3, #32]
 8008254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	f383 8810 	msr	PRIMASK, r3
}
 800825e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 f9b2 	bl	80085cc <_tx_byte_pool_search>
 8008268:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800826a:	f3ef 8310 	mrs	r3, PRIMASK
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008274:	b672      	cpsid	i
    return(int_posture);
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8008278:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800827a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008284:	e006      	b.n	8008294 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800828c:	429a      	cmp	r2, r3
 800828e:	d101      	bne.n	8008294 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8008290:	2301      	movs	r3, #1
 8008292:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8008294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0d9      	beq.n	800824e <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800829e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80082a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d008      	beq.n	80082b8 <_tx_byte_allocate+0x9c>
 80082a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	f383 8810 	msr	PRIMASK, r3
}
 80082b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80082b2:	2300      	movs	r3, #0
 80082b4:	653b      	str	r3, [r7, #80]	; 0x50
 80082b6:	e06c      	b.n	8008392 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d061      	beq.n	8008382 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80082be:	4b38      	ldr	r3, [pc, #224]	; (80083a0 <_tx_byte_allocate+0x184>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80082c6:	2310      	movs	r3, #16
 80082c8:	653b      	str	r3, [r7, #80]	; 0x50
 80082ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082cc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f383 8810 	msr	PRIMASK, r3
}
 80082d4:	e05d      	b.n	8008392 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80082d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d8:	4a32      	ldr	r2, [pc, #200]	; (80083a4 <_tx_byte_allocate+0x188>)
 80082da:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80082dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80082e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80082e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80082ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800830c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008316:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8008318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800831a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800831c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800831e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008322:	675a      	str	r2, [r3, #116]	; 0x74
 8008324:	e011      	b.n	800834a <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800832c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800832e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008330:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008336:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800833a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800833c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008342:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008348:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800834a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800834c:	2209      	movs	r2, #9
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008352:	2201      	movs	r2, #1
 8008354:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800835c:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <_tx_byte_allocate+0x184>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3301      	adds	r3, #1
 8008362:	4a0f      	ldr	r2, [pc, #60]	; (80083a0 <_tx_byte_allocate+0x184>)
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008368:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	f383 8810 	msr	PRIMASK, r3
}
 8008370:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008372:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008374:	f000 fd5e 	bl	8008e34 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8008378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800837e:	653b      	str	r3, [r7, #80]	; 0x50
 8008380:	e007      	b.n	8008392 <_tx_byte_allocate+0x176>
 8008382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008384:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f383 8810 	msr	PRIMASK, r3
}
 800838c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800838e:	2310      	movs	r3, #16
 8008390:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8008392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008394:	4618      	mov	r0, r3
 8008396:	3758      	adds	r7, #88	; 0x58
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	200a6960 	.word	0x200a6960
 80083a0:	200a69f8 	.word	0x200a69f8
 80083a4:	080083a9 	.word	0x080083a9

080083a8 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08e      	sub	sp, #56	; 0x38
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083b2:	f3ef 8310 	mrs	r3, PRIMASK
 80083b6:	623b      	str	r3, [r7, #32]
    return(posture);
 80083b8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80083ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80083bc:	b672      	cpsid	i
    return(int_posture);
 80083be:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80083c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083c6:	4a33      	ldr	r2, [pc, #204]	; (8008494 <_tx_byte_pool_cleanup+0xec>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d158      	bne.n	800847e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d152      	bne.n	800847e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083dc:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d04c      	beq.n	800847e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <_tx_byte_pool_cleanup+0xf0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d147      	bne.n	800847e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d043      	beq.n	800847e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	1e5a      	subs	r2, r3, #1
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d103      	bne.n	800841a <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	2200      	movs	r2, #0
 8008416:	625a      	str	r2, [r3, #36]	; 0x24
 8008418:	e013      	b.n	8008442 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008430:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	d102      	bne.n	8008442 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008440:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	2b09      	cmp	r3, #9
 8008448:	d119      	bne.n	800847e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2210      	movs	r2, #16
 800844e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008452:	4b12      	ldr	r3, [pc, #72]	; (800849c <_tx_byte_pool_cleanup+0xf4>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3301      	adds	r3, #1
 8008458:	4a10      	ldr	r2, [pc, #64]	; (800849c <_tx_byte_pool_cleanup+0xf4>)
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f383 8810 	msr	PRIMASK, r3
}
 8008466:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fbe3 	bl	8008c34 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800846e:	f3ef 8310 	mrs	r3, PRIMASK
 8008472:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008474:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008476:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008478:	b672      	cpsid	i
    return(int_posture);
 800847a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f383 8810 	msr	PRIMASK, r3
}
 8008488:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800848a:	bf00      	nop
 800848c:	3738      	adds	r7, #56	; 0x38
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	080083a9 	.word	0x080083a9
 8008498:	42595445 	.word	0x42595445
 800849c:	200a69f8 	.word	0x200a69f8

080084a0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08e      	sub	sp, #56	; 0x38
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80084ae:	2234      	movs	r2, #52	; 0x34
 80084b0:	2100      	movs	r1, #0
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f001 fbd8 	bl	8009c68 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f023 0303 	bic.w	r3, r3, #3
 80084be:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	f1a3 0208 	sub.w	r2, r3, #8
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2202      	movs	r2, #2
 80084ec:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80084f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	4413      	add	r3, r2
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80084fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fc:	3b04      	subs	r3, #4
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	3b04      	subs	r3, #4
 8008512:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800852a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008532:	3304      	adds	r3, #4
 8008534:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008538:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	4a1f      	ldr	r2, [pc, #124]	; (80085bc <_tx_byte_pool_create+0x11c>)
 800853e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008546:	f3ef 8310 	mrs	r3, PRIMASK
 800854a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800854c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800854e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008550:	b672      	cpsid	i
    return(int_posture);
 8008552:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008554:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4a19      	ldr	r2, [pc, #100]	; (80085c0 <_tx_byte_pool_create+0x120>)
 800855a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800855c:	4b19      	ldr	r3, [pc, #100]	; (80085c4 <_tx_byte_pool_create+0x124>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d109      	bne.n	8008578 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008564:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <_tx_byte_pool_create+0x128>)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	631a      	str	r2, [r3, #48]	; 0x30
 8008576:	e011      	b.n	800859c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8008578:	4b13      	ldr	r3, [pc, #76]	; (80085c8 <_tx_byte_pool_create+0x128>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a3a      	ldr	r2, [r7, #32]
 800859a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800859c:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <_tx_byte_pool_create+0x124>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	4a08      	ldr	r2, [pc, #32]	; (80085c4 <_tx_byte_pool_create+0x124>)
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f383 8810 	msr	PRIMASK, r3
}
 80085b0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3738      	adds	r7, #56	; 0x38
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	ffffeeee 	.word	0xffffeeee
 80085c0:	42595445 	.word	0x42595445
 80085c4:	200a6954 	.word	0x200a6954
 80085c8:	200a6950 	.word	0x200a6950

080085cc <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b097      	sub	sp, #92	; 0x5c
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085da:	f3ef 8310 	mrs	r3, PRIMASK
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80085e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80085e4:	b672      	cpsid	i
    return(int_posture);
 80085e6:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80085e8:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	3b02      	subs	r3, #2
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	4413      	add	r3, r2
 80085f8:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085fe:	429a      	cmp	r2, r3
 8008600:	d308      	bcc.n	8008614 <_tx_byte_pool_search+0x48>
 8008602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008604:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	f383 8810 	msr	PRIMASK, r3
}
 800860c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800860e:	2300      	movs	r3, #0
 8008610:	653b      	str	r3, [r7, #80]	; 0x50
 8008612:	e0dd      	b.n	80087d0 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008614:	4b72      	ldr	r3, [pc, #456]	; (80087e0 <_tx_byte_pool_search+0x214>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800861e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800862e:	2300      	movs	r3, #0
 8008630:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008634:	3304      	adds	r3, #4
 8008636:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a68      	ldr	r2, [pc, #416]	; (80087e4 <_tx_byte_pool_search+0x218>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d143      	bne.n	80086ce <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8008646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008650:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8008652:	2301      	movs	r3, #1
 8008654:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866a:	3b08      	subs	r3, #8
 800866c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800866e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d257      	bcs.n	8008726 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8008676:	2300      	movs	r3, #0
 8008678:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	3304      	adds	r3, #4
 800867e:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a56      	ldr	r2, [pc, #344]	; (80087e4 <_tx_byte_pool_search+0x218>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d113      	bne.n	80086b6 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	1e5a      	subs	r2, r3, #1
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d114      	bne.n	80086d8 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086b2:	615a      	str	r2, [r3, #20]
 80086b4:	e010      	b.n	80086d8 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80086c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d008      	beq.n	80086d8 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80086c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c8:	3b01      	subs	r3, #1
 80086ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80086cc:	e004      	b.n	80086d8 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80086ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d0:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80086d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80086de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e0:	3b01      	subs	r3, #1
 80086e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80086e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f383 8810 	msr	PRIMASK, r3
}
 80086ee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80086f0:	f3ef 8310 	mrs	r3, PRIMASK
 80086f4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80086f6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80086f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80086fa:	b672      	cpsid	i
    return(int_posture);
 80086fc:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80086fe:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008706:	429a      	cmp	r2, r3
 8008708:	d009      	beq.n	800871e <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800871c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800871e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008720:	2b00      	cmp	r3, #0
 8008722:	d186      	bne.n	8008632 <_tx_byte_pool_search+0x66>
 8008724:	e000      	b.n	8008728 <_tx_byte_pool_search+0x15c>
                    break;
 8008726:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8008728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d048      	beq.n	80087c0 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800872e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b13      	cmp	r3, #19
 8008736:	d91e      	bls.n	8008776 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3308      	adds	r3, #8
 800873c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800873e:	4413      	add	r3, r2
 8008740:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008748:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	3304      	adds	r3, #4
 8008756:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800875c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875e:	4a21      	ldr	r2, [pc, #132]	; (80087e4 <_tx_byte_pool_search+0x218>)
 8008760:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008770:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008778:	3304      	adds	r3, #4
 800877a:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	f1a3 0208 	sub.w	r2, r3, #8
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800879c:	429a      	cmp	r2, r3
 800879e:	d105      	bne.n	80087ac <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80087a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a2:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	615a      	str	r2, [r3, #20]
 80087ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f383 8810 	msr	PRIMASK, r3
}
 80087b6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80087b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ba:	3308      	adds	r3, #8
 80087bc:	653b      	str	r3, [r7, #80]	; 0x50
 80087be:	e007      	b.n	80087d0 <_tx_byte_pool_search+0x204>
 80087c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f383 8810 	msr	PRIMASK, r3
}
 80087ca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80087d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	375c      	adds	r7, #92	; 0x5c
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	200a6960 	.word	0x200a6960
 80087e4:	ffffeeee 	.word	0xffffeeee

080087e8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80087ec:	f000 f960 	bl	8008ab0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80087f0:	f000 fce8 	bl	80091c4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80087f4:	4b12      	ldr	r3, [pc, #72]	; (8008840 <_tx_initialize_high_level+0x58>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	4b12      	ldr	r3, [pc, #72]	; (8008844 <_tx_initialize_high_level+0x5c>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8008800:	4b11      	ldr	r3, [pc, #68]	; (8008848 <_tx_initialize_high_level+0x60>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <_tx_initialize_high_level+0x64>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800880c:	4b10      	ldr	r3, [pc, #64]	; (8008850 <_tx_initialize_high_level+0x68>)
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	4b10      	ldr	r3, [pc, #64]	; (8008854 <_tx_initialize_high_level+0x6c>)
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8008818:	4b0f      	ldr	r3, [pc, #60]	; (8008858 <_tx_initialize_high_level+0x70>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	4b0f      	ldr	r3, [pc, #60]	; (800885c <_tx_initialize_high_level+0x74>)
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8008824:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <_tx_initialize_high_level+0x78>)
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <_tx_initialize_high_level+0x7c>)
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8008830:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <_tx_initialize_high_level+0x80>)
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	4b0d      	ldr	r3, [pc, #52]	; (800886c <_tx_initialize_high_level+0x84>)
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]
#endif
}
 800883c:	bf00      	nop
 800883e:	bd80      	pop	{r7, pc}
 8008840:	200a6928 	.word	0x200a6928
 8008844:	200a692c 	.word	0x200a692c
 8008848:	200a6930 	.word	0x200a6930
 800884c:	200a6934 	.word	0x200a6934
 8008850:	200a6938 	.word	0x200a6938
 8008854:	200a693c 	.word	0x200a693c
 8008858:	200a6948 	.word	0x200a6948
 800885c:	200a694c 	.word	0x200a694c
 8008860:	200a6950 	.word	0x200a6950
 8008864:	200a6954 	.word	0x200a6954
 8008868:	200a6940 	.word	0x200a6940
 800886c:	200a6944 	.word	0x200a6944

08008870 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8008874:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <_tx_initialize_kernel_enter+0x48>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800887c:	d00c      	beq.n	8008898 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800887e:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <_tx_initialize_kernel_enter+0x48>)
 8008880:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8008884:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8008886:	f7f7 fcf5 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800888a:	f7ff ffad 	bl	80087e8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <_tx_initialize_kernel_enter+0x4c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	4a09      	ldr	r2, [pc, #36]	; (80088bc <_tx_initialize_kernel_enter+0x4c>)
 8008896:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008898:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <_tx_initialize_kernel_enter+0x48>)
 800889a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800889e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <_tx_initialize_kernel_enter+0x50>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7f7 ff9b 	bl	80007e0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80088aa:	4b03      	ldr	r3, [pc, #12]	; (80088b8 <_tx_initialize_kernel_enter+0x48>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80088b0:	f7f7 fd1c 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80088b4:	bf00      	nop
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	2000000c 	.word	0x2000000c
 80088bc:	200a69f8 	.word	0x200a69f8
 80088c0:	200a6958 	.word	0x200a6958

080088c4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b092      	sub	sp, #72	; 0x48
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80088d2:	2300      	movs	r3, #0
 80088d4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80088d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088d8:	21ef      	movs	r1, #239	; 0xef
 80088da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80088dc:	f001 f9c4 	bl	8009c68 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80088e0:	22b0      	movs	r2, #176	; 0xb0
 80088e2:	2100      	movs	r1, #0
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f001 f9bf 	bl	8009c68 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008900:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008906:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008912:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800891a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008920:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800892a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800892e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008930:	3b01      	subs	r3, #1
 8008932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008934:	4413      	add	r3, r2
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800893c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800893e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008942:	429a      	cmp	r2, r3
 8008944:	d007      	beq.n	8008956 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008954:	e006      	b.n	8008964 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800895a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008960:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2203      	movs	r2, #3
 8008968:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4a48      	ldr	r2, [pc, #288]	; (8008a90 <_tx_thread_create+0x1cc>)
 800896e:	655a      	str	r2, [r3, #84]	; 0x54
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8008976:	4947      	ldr	r1, [pc, #284]	; (8008a94 <_tx_thread_create+0x1d0>)
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f7f7 fd25 	bl	80003c8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800897e:	f3ef 8310 	mrs	r3, PRIMASK
 8008982:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008988:	b672      	cpsid	i
    return(int_posture);
 800898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800898c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4a41      	ldr	r2, [pc, #260]	; (8008a98 <_tx_thread_create+0x1d4>)
 8008992:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8008994:	4b41      	ldr	r3, [pc, #260]	; (8008a9c <_tx_thread_create+0x1d8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10b      	bne.n	80089b4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800899c:	4a40      	ldr	r2, [pc, #256]	; (8008aa0 <_tx_thread_create+0x1dc>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80089b2:	e016      	b.n	80089e2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80089b4:	4b3a      	ldr	r3, [pc, #232]	; (8008aa0 <_tx_thread_create+0x1dc>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80089ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089c0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80089e2:	4b2e      	ldr	r3, [pc, #184]	; (8008a9c <_tx_thread_create+0x1d8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3301      	adds	r3, #1
 80089e8:	4a2c      	ldr	r2, [pc, #176]	; (8008a9c <_tx_thread_create+0x1d8>)
 80089ea:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80089ec:	4b2d      	ldr	r3, [pc, #180]	; (8008aa4 <_tx_thread_create+0x1e0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3301      	adds	r3, #1
 80089f2:	4a2c      	ldr	r2, [pc, #176]	; (8008aa4 <_tx_thread_create+0x1e0>)
 80089f4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80089f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d129      	bne.n	8008a50 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80089fc:	f3ef 8305 	mrs	r3, IPSR
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8008a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8008a04:	4b28      	ldr	r3, [pc, #160]	; (8008aa8 <_tx_thread_create+0x1e4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008a0e:	d30d      	bcc.n	8008a2c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8008a10:	4b26      	ldr	r3, [pc, #152]	; (8008aac <_tx_thread_create+0x1e8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8008a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d009      	beq.n	8008a30 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8008a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a20:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8008a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a28:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a2a:	e001      	b.n	8008a30 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	f383 8810 	msr	PRIMASK, r3
}
 8008a3a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 f8f9 	bl	8008c34 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8008a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01e      	beq.n	8008a86 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8008a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a4e:	e01a      	b.n	8008a86 <_tx_thread_create+0x1c2>
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f383 8810 	msr	PRIMASK, r3
}
 8008a5a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a60:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008a62:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008a64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a66:	b672      	cpsid	i
    return(int_posture);
 8008a68:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8008a6a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	; (8008aa4 <_tx_thread_create+0x1e0>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	4a0c      	ldr	r2, [pc, #48]	; (8008aa4 <_tx_thread_create+0x1e0>)
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	f383 8810 	msr	PRIMASK, r3
}
 8008a80:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008a82:	f000 f89d 	bl	8008bc0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3748      	adds	r7, #72	; 0x48
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	08009109 	.word	0x08009109
 8008a94:	08008b29 	.word	0x08008b29
 8008a98:	54485244 	.word	0x54485244
 8008a9c:	200a696c 	.word	0x200a696c
 8008aa0:	200a6968 	.word	0x200a6968
 8008aa4:	200a69f8 	.word	0x200a69f8
 8008aa8:	2000000c 	.word	0x2000000c
 8008aac:	200a6964 	.word	0x200a6964

08008ab0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8008ab4:	4b12      	ldr	r3, [pc, #72]	; (8008b00 <_tx_thread_initialize+0x50>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8008aba:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <_tx_thread_initialize+0x54>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	4b11      	ldr	r3, [pc, #68]	; (8008b08 <_tx_thread_initialize+0x58>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008ac6:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <_tx_thread_initialize+0x5c>)
 8008ac8:	2220      	movs	r2, #32
 8008aca:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008acc:	2280      	movs	r2, #128	; 0x80
 8008ace:	2100      	movs	r1, #0
 8008ad0:	480f      	ldr	r0, [pc, #60]	; (8008b10 <_tx_thread_initialize+0x60>)
 8008ad2:	f001 f8c9 	bl	8009c68 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <_tx_thread_initialize+0x64>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8008adc:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <_tx_thread_initialize+0x68>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	; (8008b1c <_tx_thread_initialize+0x6c>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8008ae8:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <_tx_thread_initialize+0x70>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <_tx_thread_initialize+0x74>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8008af6:	4a0b      	ldr	r2, [pc, #44]	; (8008b24 <_tx_thread_initialize+0x74>)
 8008af8:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8008afa:	bf00      	nop
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	200a6960 	.word	0x200a6960
 8008b04:	200a6964 	.word	0x200a6964
 8008b08:	200a6970 	.word	0x200a6970
 8008b0c:	200a6974 	.word	0x200a6974
 8008b10:	200a6978 	.word	0x200a6978
 8008b14:	200a6968 	.word	0x200a6968
 8008b18:	200a696c 	.word	0x200a696c
 8008b1c:	200a69f8 	.word	0x200a69f8
 8008b20:	200a69fc 	.word	0x200a69fc
 8008b24:	200a6a00 	.word	0x200a6a00

08008b28 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008b2e:	4b21      	ldr	r3, [pc, #132]	; (8008bb4 <_tx_thread_shell_entry+0x8c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8008b40:	4b1d      	ldr	r3, [pc, #116]	; (8008bb8 <_tx_thread_shell_entry+0x90>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8008b48:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <_tx_thread_shell_entry+0x90>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69f8      	ldr	r0, [r7, #28]
 8008b4e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b50:	f3ef 8310 	mrs	r3, PRIMASK
 8008b54:	607b      	str	r3, [r7, #4]
    return(posture);
 8008b56:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8008b58:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b5a:	b672      	cpsid	i
    return(int_posture);
 8008b5c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8008b5e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	2201      	movs	r2, #1
 8008b64:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <_tx_thread_shell_entry+0x94>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3301      	adds	r3, #1
 8008b78:	4a10      	ldr	r2, [pc, #64]	; (8008bbc <_tx_thread_shell_entry+0x94>)
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f383 8810 	msr	PRIMASK, r3
}
 8008b86:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8008b88:	f3ef 8314 	mrs	r3, CONTROL
 8008b8c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8008b8e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f023 0304 	bic.w	r3, r3, #4
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f383 8814 	msr	CONTROL, r3
}
 8008ba4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8008ba6:	69f8      	ldr	r0, [r7, #28]
 8008ba8:	f000 f944 	bl	8008e34 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008bac:	bf00      	nop
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200a6960 	.word	0x200a6960
 8008bb8:	200a69fc 	.word	0x200a69fc
 8008bbc:	200a69f8 	.word	0x200a69f8

08008bc0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b089      	sub	sp, #36	; 0x24
 8008bc4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008bc6:	4b17      	ldr	r3, [pc, #92]	; (8008c24 <_tx_thread_system_preempt_check+0x64>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d121      	bne.n	8008c16 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8008bd2:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <_tx_thread_system_preempt_check+0x68>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8008bd8:	4b14      	ldr	r3, [pc, #80]	; (8008c2c <_tx_thread_system_preempt_check+0x6c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d017      	beq.n	8008c16 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <_tx_thread_system_preempt_check+0x70>)
 8008be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008bee:	f3ef 8305 	mrs	r3, IPSR
 8008bf2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008bf4:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10c      	bne.n	8008c14 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8008bfe:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008c00:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8008c02:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008c04:	b662      	cpsie	i
}
 8008c06:	bf00      	nop
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f383 8810 	msr	PRIMASK, r3
}
 8008c12:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8008c14:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8008c16:	bf00      	nop
 8008c18:	3724      	adds	r7, #36	; 0x24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	200a69f8 	.word	0x200a69f8
 8008c28:	200a6960 	.word	0x200a6960
 8008c2c:	200a6964 	.word	0x200a6964
 8008c30:	e000ed04 	.word	0xe000ed04

08008c34 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b096      	sub	sp, #88	; 0x58
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8008c44:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c46:	b672      	cpsid	i
    return(int_posture);
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8008c4a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	334c      	adds	r3, #76	; 0x4c
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fb91 	bl	8009380 <_tx_timer_system_deactivate>
 8008c5e:	e002      	b.n	8008c66 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008c66:	4b6c      	ldr	r3, [pc, #432]	; (8008e18 <_tx_thread_system_resume+0x1e4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	4a6a      	ldr	r2, [pc, #424]	; (8008e18 <_tx_thread_system_resume+0x1e4>)
 8008c6e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 8083 	bne.w	8008d80 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 8097 	beq.w	8008db2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d172      	bne.n	8008d72 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c96:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8008c98:	4a60      	ldr	r2, [pc, #384]	; (8008e1c <_tx_thread_system_resume+0x1e8>)
 8008c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8008ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d154      	bne.n	8008d52 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8008ca8:	495c      	ldr	r1, [pc, #368]	; (8008e1c <_tx_thread_system_resume+0x1e8>)
 8008caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8008cc8:	4b55      	ldr	r3, [pc, #340]	; (8008e20 <_tx_thread_system_resume+0x1ec>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	4a53      	ldr	r2, [pc, #332]	; (8008e20 <_tx_thread_system_resume+0x1ec>)
 8008cd2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8008cd4:	4b53      	ldr	r3, [pc, #332]	; (8008e24 <_tx_thread_system_resume+0x1f0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d269      	bcs.n	8008db2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8008cde:	4a51      	ldr	r2, [pc, #324]	; (8008e24 <_tx_thread_system_resume+0x1f0>)
 8008ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce2:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8008ce4:	4b50      	ldr	r3, [pc, #320]	; (8008e28 <_tx_thread_system_resume+0x1f4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8008cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d103      	bne.n	8008cf8 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8008cf0:	4a4d      	ldr	r2, [pc, #308]	; (8008e28 <_tx_thread_system_resume+0x1f4>)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	e05c      	b.n	8008db2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8008cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d257      	bcs.n	8008db2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8008d02:	4a49      	ldr	r2, [pc, #292]	; (8008e28 <_tx_thread_system_resume+0x1f4>)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	f383 8810 	msr	PRIMASK, r3
}
 8008d12:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008d14:	4b40      	ldr	r3, [pc, #256]	; (8008e18 <_tx_thread_system_resume+0x1e4>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8008d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d174      	bne.n	8008e0a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008d20:	4b42      	ldr	r3, [pc, #264]	; (8008e2c <_tx_thread_system_resume+0x1f8>)
 8008d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d26:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008d28:	f3ef 8305 	mrs	r3, IPSR
 8008d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10c      	bne.n	8008d4e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d34:	f3ef 8310 	mrs	r3, PRIMASK
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8008d3c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008d3e:	b662      	cpsie	i
}
 8008d40:	bf00      	nop
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	f383 8810 	msr	PRIMASK, r3
}
 8008d4c:	bf00      	nop
}
 8008d4e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8008d50:	e05b      	b.n	8008e0a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8008d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8008d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8008d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d68:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d6e:	621a      	str	r2, [r3, #32]
 8008d70:	e01f      	b.n	8008db2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d7e:	e018      	b.n	8008db2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d014      	beq.n	8008db2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d010      	beq.n	8008db2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d106      	bne.n	8008da6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	631a      	str	r2, [r3, #48]	; 0x30
 8008da4:	e005      	b.n	8008db2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2203      	movs	r2, #3
 8008db0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8008db2:	4b1f      	ldr	r3, [pc, #124]	; (8008e30 <_tx_thread_system_resume+0x1fc>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	f383 8810 	msr	PRIMASK, r3
}
 8008dc2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008dc4:	4b18      	ldr	r3, [pc, #96]	; (8008e28 <_tx_thread_system_resume+0x1f4>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d020      	beq.n	8008e10 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008dce:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <_tx_thread_system_resume+0x1e4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8008dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d11a      	bne.n	8008e10 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008dda:	4b14      	ldr	r3, [pc, #80]	; (8008e2c <_tx_thread_system_resume+0x1f8>)
 8008ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008de2:	f3ef 8305 	mrs	r3, IPSR
 8008de6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008de8:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10f      	bne.n	8008e0e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008dee:	f3ef 8310 	mrs	r3, PRIMASK
 8008df2:	613b      	str	r3, [r7, #16]
    return(posture);
 8008df4:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8008df6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008df8:	b662      	cpsie	i
}
 8008dfa:	bf00      	nop
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f383 8810 	msr	PRIMASK, r3
}
 8008e06:	bf00      	nop
}
 8008e08:	e001      	b.n	8008e0e <_tx_thread_system_resume+0x1da>
                                return;
 8008e0a:	bf00      	nop
 8008e0c:	e000      	b.n	8008e10 <_tx_thread_system_resume+0x1dc>
 8008e0e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8008e10:	3758      	adds	r7, #88	; 0x58
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	200a69f8 	.word	0x200a69f8
 8008e1c:	200a6978 	.word	0x200a6978
 8008e20:	200a6970 	.word	0x200a6970
 8008e24:	200a6974 	.word	0x200a6974
 8008e28:	200a6964 	.word	0x200a6964
 8008e2c:	e000ed04 	.word	0xe000ed04
 8008e30:	200a6960 	.word	0x200a6960

08008e34 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b09e      	sub	sp, #120	; 0x78
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8008e3c:	4b81      	ldr	r3, [pc, #516]	; (8009044 <_tx_thread_system_suspend+0x210>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e42:	f3ef 8310 	mrs	r3, PRIMASK
 8008e46:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8008e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8008e4a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e4c:	b672      	cpsid	i
    return(int_posture);
 8008e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8008e50:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d112      	bne.n	8008e80 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d008      	beq.n	8008e78 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8008e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d004      	beq.n	8008e78 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	334c      	adds	r3, #76	; 0x4c
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fa22 	bl	80092bc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	4a72      	ldr	r2, [pc, #456]	; (8009048 <_tx_thread_system_suspend+0x214>)
 8008e7e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008e80:	4b72      	ldr	r3, [pc, #456]	; (800904c <_tx_thread_system_suspend+0x218>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	4a71      	ldr	r2, [pc, #452]	; (800904c <_tx_thread_system_suspend+0x218>)
 8008e88:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	f040 80a6 	bne.w	8008fe0 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8008ea6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d015      	beq.n	8008eda <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8008eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8008eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ebc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ebe:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008ec0:	4a63      	ldr	r2, [pc, #396]	; (8009050 <_tx_thread_system_suspend+0x21c>)
 8008ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d157      	bne.n	8008f7e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8008ece:	4960      	ldr	r1, [pc, #384]	; (8009050 <_tx_thread_system_suspend+0x21c>)
 8008ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ed2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ed8:	e051      	b.n	8008f7e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8008eda:	4a5d      	ldr	r2, [pc, #372]	; (8009050 <_tx_thread_system_suspend+0x21c>)
 8008edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eec:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8008eee:	4b59      	ldr	r3, [pc, #356]	; (8009054 <_tx_thread_system_suspend+0x220>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	4a56      	ldr	r2, [pc, #344]	; (8009054 <_tx_thread_system_suspend+0x220>)
 8008efa:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8008efc:	2300      	movs	r3, #0
 8008efe:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8008f00:	4b54      	ldr	r3, [pc, #336]	; (8009054 <_tx_thread_system_suspend+0x220>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8008f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d12b      	bne.n	8008f64 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008f0c:	4b52      	ldr	r3, [pc, #328]	; (8009058 <_tx_thread_system_suspend+0x224>)
 8008f0e:	2220      	movs	r2, #32
 8008f10:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8008f12:	4b52      	ldr	r3, [pc, #328]	; (800905c <_tx_thread_system_suspend+0x228>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f1a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f1e:	f383 8810 	msr	PRIMASK, r3
}
 8008f22:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008f24:	4b49      	ldr	r3, [pc, #292]	; (800904c <_tx_thread_system_suspend+0x218>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8008f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8081 	bne.w	8009034 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008f32:	4b4b      	ldr	r3, [pc, #300]	; (8009060 <_tx_thread_system_suspend+0x22c>)
 8008f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f38:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f3a:	f3ef 8305 	mrs	r3, IPSR
 8008f3e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8008f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10c      	bne.n	8008f60 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f46:	f3ef 8310 	mrs	r3, PRIMASK
 8008f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8008f4e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008f50:	b662      	cpsie	i
}
 8008f52:	bf00      	nop
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	f383 8810 	msr	PRIMASK, r3
}
 8008f5e:	bf00      	nop
}
 8008f60:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8008f62:	e067      	b.n	8009034 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8008f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f66:	fa93 f3a3 	rbit	r3, r3
 8008f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f6e:	fab3 f383 	clz	r3, r3
 8008f72:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8008f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f78:	4413      	add	r3, r2
 8008f7a:	4a37      	ldr	r2, [pc, #220]	; (8009058 <_tx_thread_system_suspend+0x224>)
 8008f7c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8008f7e:	4b37      	ldr	r3, [pc, #220]	; (800905c <_tx_thread_system_suspend+0x228>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d12b      	bne.n	8008fe0 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008f88:	4b33      	ldr	r3, [pc, #204]	; (8009058 <_tx_thread_system_suspend+0x224>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a30      	ldr	r2, [pc, #192]	; (8009050 <_tx_thread_system_suspend+0x21c>)
 8008f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f92:	4a32      	ldr	r2, [pc, #200]	; (800905c <_tx_thread_system_suspend+0x228>)
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f98:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	f383 8810 	msr	PRIMASK, r3
}
 8008fa0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008fa2:	4b2a      	ldr	r3, [pc, #168]	; (800904c <_tx_thread_system_suspend+0x218>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8008fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d144      	bne.n	8009038 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008fae:	4b2c      	ldr	r3, [pc, #176]	; (8009060 <_tx_thread_system_suspend+0x22c>)
 8008fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008fb6:	f3ef 8305 	mrs	r3, IPSR
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10c      	bne.n	8008fdc <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8008fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008fcc:	b662      	cpsie	i
}
 8008fce:	bf00      	nop
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	f383 8810 	msr	PRIMASK, r3
}
 8008fda:	bf00      	nop
}
 8008fdc:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8008fde:	e02b      	b.n	8009038 <_tx_thread_system_suspend+0x204>
 8008fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fe2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f383 8810 	msr	PRIMASK, r3
}
 8008fea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008fec:	4b1b      	ldr	r3, [pc, #108]	; (800905c <_tx_thread_system_suspend+0x228>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d022      	beq.n	800903c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008ff6:	4b15      	ldr	r3, [pc, #84]	; (800904c <_tx_thread_system_suspend+0x218>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8008ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d11c      	bne.n	800903c <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009002:	4b17      	ldr	r3, [pc, #92]	; (8009060 <_tx_thread_system_suspend+0x22c>)
 8009004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009008:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800900a:	f3ef 8305 	mrs	r3, IPSR
 800900e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009010:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10c      	bne.n	8009030 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009016:	f3ef 8310 	mrs	r3, PRIMASK
 800901a:	617b      	str	r3, [r7, #20]
    return(posture);
 800901c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800901e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009020:	b662      	cpsie	i
}
 8009022:	bf00      	nop
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f383 8810 	msr	PRIMASK, r3
}
 800902e:	bf00      	nop
}
 8009030:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8009032:	e003      	b.n	800903c <_tx_thread_system_suspend+0x208>
                return;
 8009034:	bf00      	nop
 8009036:	e002      	b.n	800903e <_tx_thread_system_suspend+0x20a>
            return;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <_tx_thread_system_suspend+0x20a>
    return;
 800903c:	bf00      	nop
}
 800903e:	3778      	adds	r7, #120	; 0x78
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	200a6960 	.word	0x200a6960
 8009048:	200a6f64 	.word	0x200a6f64
 800904c:	200a69f8 	.word	0x200a69f8
 8009050:	200a6978 	.word	0x200a6978
 8009054:	200a6970 	.word	0x200a6970
 8009058:	200a6974 	.word	0x200a6974
 800905c:	200a6964 	.word	0x200a6964
 8009060:	e000ed04 	.word	0xe000ed04

08009064 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8009064:	b480      	push	{r7}
 8009066:	b087      	sub	sp, #28
 8009068:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800906a:	4b21      	ldr	r3, [pc, #132]	; (80090f0 <_tx_thread_time_slice+0x8c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009070:	f3ef 8310 	mrs	r3, PRIMASK
 8009074:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009076:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009078:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800907a:	b672      	cpsid	i
    return(int_posture);
 800907c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800907e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009080:	4b1c      	ldr	r3, [pc, #112]	; (80090f4 <_tx_thread_time_slice+0x90>)
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d024      	beq.n	80090d6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	2b00      	cmp	r3, #0
 8009092:	d120      	bne.n	80090d6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	69da      	ldr	r2, [r3, #28]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	4a15      	ldr	r2, [pc, #84]	; (80090f8 <_tx_thread_time_slice+0x94>)
 80090a2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d013      	beq.n	80090d6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d10d      	bne.n	80090d6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	6a12      	ldr	r2, [r2, #32]
 80090c2:	490e      	ldr	r1, [pc, #56]	; (80090fc <_tx_thread_time_slice+0x98>)
 80090c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80090c8:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <_tx_thread_time_slice+0x9c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a0b      	ldr	r2, [pc, #44]	; (80090fc <_tx_thread_time_slice+0x98>)
 80090ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d2:	4a0c      	ldr	r2, [pc, #48]	; (8009104 <_tx_thread_time_slice+0xa0>)
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f383 8810 	msr	PRIMASK, r3
}
 80090e0:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80090e2:	bf00      	nop
 80090e4:	371c      	adds	r7, #28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	200a6960 	.word	0x200a6960
 80090f4:	200a6a08 	.word	0x200a6a08
 80090f8:	200a6f64 	.word	0x200a6f64
 80090fc:	200a6978 	.word	0x200a6978
 8009100:	200a6974 	.word	0x200a6974
 8009104:	200a6964 	.word	0x200a6964

08009108 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009114:	f3ef 8310 	mrs	r3, PRIMASK
 8009118:	617b      	str	r3, [r7, #20]
    return(posture);
 800911a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800911c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800911e:	b672      	cpsid	i
    return(int_posture);
 8009120:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009122:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009128:	2b04      	cmp	r3, #4
 800912a:	d10e      	bne.n	800914a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800912c:	4b13      	ldr	r3, [pc, #76]	; (800917c <_tx_thread_timeout+0x74>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3301      	adds	r3, #1
 8009132:	4a12      	ldr	r2, [pc, #72]	; (800917c <_tx_thread_timeout+0x74>)
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f383 8810 	msr	PRIMASK, r3
}
 8009140:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009144:	f7ff fd76 	bl	8008c34 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009148:	e013      	b.n	8009172 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800914e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009156:	61bb      	str	r3, [r7, #24]
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f383 8810 	msr	PRIMASK, r3
}
 8009162:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	69b9      	ldr	r1, [r7, #24]
 800916e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009170:	4798      	blx	r3
}
 8009172:	bf00      	nop
 8009174:	3728      	adds	r7, #40	; 0x28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	200a69f8 	.word	0x200a69f8

08009180 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009186:	f3ef 8310 	mrs	r3, PRIMASK
 800918a:	607b      	str	r3, [r7, #4]
    return(posture);
 800918c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800918e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009190:	b672      	cpsid	i
    return(int_posture);
 8009192:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8009194:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <_tx_timer_expiration_process+0x3c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	4a07      	ldr	r2, [pc, #28]	; (80091bc <_tx_timer_expiration_process+0x3c>)
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f383 8810 	msr	PRIMASK, r3
}
 80091aa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80091ac:	4804      	ldr	r0, [pc, #16]	; (80091c0 <_tx_timer_expiration_process+0x40>)
 80091ae:	f7ff fd41 	bl	8008c34 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	200a69f8 	.word	0x200a69f8
 80091c0:	200a6aa8 	.word	0x200a6aa8

080091c4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80091c4:	b590      	push	{r4, r7, lr}
 80091c6:	b089      	sub	sp, #36	; 0x24
 80091c8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80091ca:	4b28      	ldr	r3, [pc, #160]	; (800926c <_tx_timer_initialize+0xa8>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80091d0:	4b27      	ldr	r3, [pc, #156]	; (8009270 <_tx_timer_initialize+0xac>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80091d6:	4b27      	ldr	r3, [pc, #156]	; (8009274 <_tx_timer_initialize+0xb0>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80091dc:	4b26      	ldr	r3, [pc, #152]	; (8009278 <_tx_timer_initialize+0xb4>)
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80091e2:	4b26      	ldr	r3, [pc, #152]	; (800927c <_tx_timer_initialize+0xb8>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80091e8:	2280      	movs	r2, #128	; 0x80
 80091ea:	2100      	movs	r1, #0
 80091ec:	4824      	ldr	r0, [pc, #144]	; (8009280 <_tx_timer_initialize+0xbc>)
 80091ee:	f000 fd3b 	bl	8009c68 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80091f2:	4b24      	ldr	r3, [pc, #144]	; (8009284 <_tx_timer_initialize+0xc0>)
 80091f4:	4a22      	ldr	r2, [pc, #136]	; (8009280 <_tx_timer_initialize+0xbc>)
 80091f6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80091f8:	4b23      	ldr	r3, [pc, #140]	; (8009288 <_tx_timer_initialize+0xc4>)
 80091fa:	4a21      	ldr	r2, [pc, #132]	; (8009280 <_tx_timer_initialize+0xbc>)
 80091fc:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80091fe:	4b23      	ldr	r3, [pc, #140]	; (800928c <_tx_timer_initialize+0xc8>)
 8009200:	4a23      	ldr	r2, [pc, #140]	; (8009290 <_tx_timer_initialize+0xcc>)
 8009202:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009204:	4b21      	ldr	r3, [pc, #132]	; (800928c <_tx_timer_initialize+0xc8>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3304      	adds	r3, #4
 800920a:	4a20      	ldr	r2, [pc, #128]	; (800928c <_tx_timer_initialize+0xc8>)
 800920c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800920e:	4b21      	ldr	r3, [pc, #132]	; (8009294 <_tx_timer_initialize+0xd0>)
 8009210:	4a21      	ldr	r2, [pc, #132]	; (8009298 <_tx_timer_initialize+0xd4>)
 8009212:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009214:	4b21      	ldr	r3, [pc, #132]	; (800929c <_tx_timer_initialize+0xd8>)
 8009216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800921a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800921c:	4b20      	ldr	r3, [pc, #128]	; (80092a0 <_tx_timer_initialize+0xdc>)
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8009222:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <_tx_timer_initialize+0xd0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1d      	ldr	r2, [pc, #116]	; (800929c <_tx_timer_initialize+0xd8>)
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	491d      	ldr	r1, [pc, #116]	; (80092a0 <_tx_timer_initialize+0xdc>)
 800922c:	6809      	ldr	r1, [r1, #0]
 800922e:	481c      	ldr	r0, [pc, #112]	; (80092a0 <_tx_timer_initialize+0xdc>)
 8009230:	6800      	ldr	r0, [r0, #0]
 8009232:	2400      	movs	r4, #0
 8009234:	9405      	str	r4, [sp, #20]
 8009236:	2400      	movs	r4, #0
 8009238:	9404      	str	r4, [sp, #16]
 800923a:	9003      	str	r0, [sp, #12]
 800923c:	9102      	str	r1, [sp, #8]
 800923e:	9201      	str	r2, [sp, #4]
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	4b18      	ldr	r3, [pc, #96]	; (80092a4 <_tx_timer_initialize+0xe0>)
 8009244:	4a18      	ldr	r2, [pc, #96]	; (80092a8 <_tx_timer_initialize+0xe4>)
 8009246:	4919      	ldr	r1, [pc, #100]	; (80092ac <_tx_timer_initialize+0xe8>)
 8009248:	4819      	ldr	r0, [pc, #100]	; (80092b0 <_tx_timer_initialize+0xec>)
 800924a:	f7ff fb3b 	bl	80088c4 <_tx_thread_create>
 800924e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e5      	bne.n	8009222 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009256:	4b17      	ldr	r3, [pc, #92]	; (80092b4 <_tx_timer_initialize+0xf0>)
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800925c:	4b16      	ldr	r3, [pc, #88]	; (80092b8 <_tx_timer_initialize+0xf4>)
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8009262:	bf00      	nop
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	bd90      	pop	{r4, r7, pc}
 800926a:	bf00      	nop
 800926c:	200a6a04 	.word	0x200a6a04
 8009270:	200a6f64 	.word	0x200a6f64
 8009274:	200a6a08 	.word	0x200a6a08
 8009278:	200a6a98 	.word	0x200a6a98
 800927c:	200a6aa4 	.word	0x200a6aa4
 8009280:	200a6a0c 	.word	0x200a6a0c
 8009284:	200a6a8c 	.word	0x200a6a8c
 8009288:	200a6a94 	.word	0x200a6a94
 800928c:	200a6a90 	.word	0x200a6a90
 8009290:	200a6a88 	.word	0x200a6a88
 8009294:	200a6b58 	.word	0x200a6b58
 8009298:	200a6b64 	.word	0x200a6b64
 800929c:	200a6b5c 	.word	0x200a6b5c
 80092a0:	200a6b60 	.word	0x200a6b60
 80092a4:	4154494d 	.word	0x4154494d
 80092a8:	080093f1 	.word	0x080093f1
 80092ac:	08009cb0 	.word	0x08009cb0
 80092b0:	200a6aa8 	.word	0x200a6aa8
 80092b4:	200a6a9c 	.word	0x200a6a9c
 80092b8:	200a6aa0 	.word	0x200a6aa0

080092bc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80092bc:	b480      	push	{r7}
 80092be:	b089      	sub	sp, #36	; 0x24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d04a      	beq.n	8009366 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d046      	beq.n	8009366 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d142      	bne.n	8009366 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d902      	bls.n	80092ec <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80092e6:	231f      	movs	r3, #31
 80092e8:	61bb      	str	r3, [r7, #24]
 80092ea:	e002      	b.n	80092f2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80092f2:	4b20      	ldr	r3, [pc, #128]	; (8009374 <_tx_timer_system_activate+0xb8>)
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80092fe:	4b1e      	ldr	r3, [pc, #120]	; (8009378 <_tx_timer_system_activate+0xbc>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	429a      	cmp	r2, r3
 8009306:	d30b      	bcc.n	8009320 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009308:	4b1b      	ldr	r3, [pc, #108]	; (8009378 <_tx_timer_system_activate+0xbc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	109b      	asrs	r3, r3, #2
 8009312:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009314:	4b19      	ldr	r3, [pc, #100]	; (800937c <_tx_timer_system_activate+0xc0>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d109      	bne.n	800933c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e011      	b.n	8009360 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8009366:	bf00      	nop
 8009368:	3724      	adds	r7, #36	; 0x24
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	200a6a94 	.word	0x200a6a94
 8009378:	200a6a90 	.word	0x200a6a90
 800937c:	200a6a8c 	.word	0x200a6a8c

08009380 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d026      	beq.n	80093e2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d108      	bne.n	80093b4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d117      	bne.n	80093dc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	e013      	b.n	80093dc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d105      	bne.n	80093dc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	619a      	str	r2, [r3, #24]
    }
}
 80093e2:	bf00      	nop
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
	...

080093f0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b098      	sub	sp, #96	; 0x60
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80093f8:	2300      	movs	r3, #0
 80093fa:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a73      	ldr	r2, [pc, #460]	; (80095cc <_tx_timer_thread_entry+0x1dc>)
 8009400:	4293      	cmp	r3, r2
 8009402:	f040 80de 	bne.w	80095c2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009406:	f3ef 8310 	mrs	r3, PRIMASK
 800940a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800940c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800940e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009410:	b672      	cpsid	i
    return(int_posture);
 8009412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8009414:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8009416:	4b6e      	ldr	r3, [pc, #440]	; (80095d0 <_tx_timer_thread_entry+0x1e0>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f107 020c 	add.w	r2, r7, #12
 800942a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800942c:	4b68      	ldr	r3, [pc, #416]	; (80095d0 <_tx_timer_thread_entry+0x1e0>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8009434:	4b66      	ldr	r3, [pc, #408]	; (80095d0 <_tx_timer_thread_entry+0x1e0>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3304      	adds	r3, #4
 800943a:	4a65      	ldr	r2, [pc, #404]	; (80095d0 <_tx_timer_thread_entry+0x1e0>)
 800943c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800943e:	4b64      	ldr	r3, [pc, #400]	; (80095d0 <_tx_timer_thread_entry+0x1e0>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b64      	ldr	r3, [pc, #400]	; (80095d4 <_tx_timer_thread_entry+0x1e4>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d103      	bne.n	8009452 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800944a:	4b63      	ldr	r3, [pc, #396]	; (80095d8 <_tx_timer_thread_entry+0x1e8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a60      	ldr	r2, [pc, #384]	; (80095d0 <_tx_timer_thread_entry+0x1e0>)
 8009450:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8009452:	4b62      	ldr	r3, [pc, #392]	; (80095dc <_tx_timer_thread_entry+0x1ec>)
 8009454:	2200      	movs	r2, #0
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800945a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	f383 8810 	msr	PRIMASK, r3
}
 8009462:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009464:	f3ef 8310 	mrs	r3, PRIMASK
 8009468:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800946e:	b672      	cpsid	i
    return(int_posture);
 8009470:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8009472:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8009474:	e07f      	b.n	8009576 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8009480:	2300      	movs	r3, #0
 8009482:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8009484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009488:	429a      	cmp	r2, r3
 800948a:	d102      	bne.n	8009492 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	e00e      	b.n	80094b0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8009492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800949a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800949c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800949e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094a2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80094a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a6:	f107 020c 	add.w	r2, r7, #12
 80094aa:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80094ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ae:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80094b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b20      	cmp	r3, #32
 80094b6:	d911      	bls.n	80094dc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80094b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80094c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80094c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ca:	f107 0208 	add.w	r2, r7, #8
 80094ce:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80094d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094d4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80094d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d8:	60bb      	str	r3, [r7, #8]
 80094da:	e01a      	b.n	8009512 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80094dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80094e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80094e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ee:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80094f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d009      	beq.n	800950c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80094f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fa:	f107 0208 	add.w	r2, r7, #8
 80094fe:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8009500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009502:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009504:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8009506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009508:	60bb      	str	r3, [r7, #8]
 800950a:	e002      	b.n	8009512 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800950c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800950e:	2200      	movs	r2, #0
 8009510:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8009512:	4a33      	ldr	r2, [pc, #204]	; (80095e0 <_tx_timer_thread_entry+0x1f0>)
 8009514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	f383 8810 	msr	PRIMASK, r3
}
 8009522:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8009524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800952a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800952c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800952e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009530:	f3ef 8310 	mrs	r3, PRIMASK
 8009534:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800953a:	b672      	cpsid	i
    return(int_posture);
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800953e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8009540:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <_tx_timer_thread_entry+0x1f0>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800954a:	429a      	cmp	r2, r3
 800954c:	d105      	bne.n	800955a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800954e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009550:	2200      	movs	r2, #0
 8009552:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8009554:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009556:	f7ff feb1 	bl	80092bc <_tx_timer_system_activate>
 800955a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800955c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	f383 8810 	msr	PRIMASK, r3
}
 8009564:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009566:	f3ef 8310 	mrs	r3, PRIMASK
 800956a:	623b      	str	r3, [r7, #32]
    return(posture);
 800956c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800956e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009570:	b672      	cpsid	i
    return(int_posture);
 8009572:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009574:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	f47f af7c 	bne.w	8009476 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800957e:	4b17      	ldr	r3, [pc, #92]	; (80095dc <_tx_timer_thread_entry+0x1ec>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d116      	bne.n	80095b4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8009586:	4b17      	ldr	r3, [pc, #92]	; (80095e4 <_tx_timer_thread_entry+0x1f4>)
 8009588:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800958a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800958c:	2203      	movs	r2, #3
 800958e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009592:	2201      	movs	r2, #1
 8009594:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8009596:	4b14      	ldr	r3, [pc, #80]	; (80095e8 <_tx_timer_thread_entry+0x1f8>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	4a12      	ldr	r2, [pc, #72]	; (80095e8 <_tx_timer_thread_entry+0x1f8>)
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f383 8810 	msr	PRIMASK, r3
}
 80095aa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80095ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80095ae:	f7ff fc41 	bl	8008e34 <_tx_thread_system_suspend>
 80095b2:	e728      	b.n	8009406 <_tx_timer_thread_entry+0x16>
 80095b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f383 8810 	msr	PRIMASK, r3
}
 80095be:	bf00      	nop
            TX_DISABLE
 80095c0:	e721      	b.n	8009406 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80095c2:	bf00      	nop
 80095c4:	3760      	adds	r7, #96	; 0x60
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	4154494d 	.word	0x4154494d
 80095d0:	200a6a94 	.word	0x200a6a94
 80095d4:	200a6a90 	.word	0x200a6a90
 80095d8:	200a6a8c 	.word	0x200a6a8c
 80095dc:	200a6a98 	.word	0x200a6a98
 80095e0:	200a6aa4 	.word	0x200a6aa4
 80095e4:	200a6aa8 	.word	0x200a6aa8
 80095e8:	200a69f8 	.word	0x200a69f8

080095ec <_txe_block_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b094      	sub	sp, #80	; 0x50
 80095f0:	af02      	add	r7, sp, #8
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80095fa:	2300      	movs	r3, #0
 80095fc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <_txe_block_pool_create+0x1e>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009604:	2302      	movs	r3, #2
 8009606:	647b      	str	r3, [r7, #68]	; 0x44
 8009608:	e07b      	b.n	8009702 <_txe_block_pool_create+0x116>
    }

    /* Check for invalid control block size.  */
    else if (pool_control_block_size != (sizeof(TX_BLOCK_POOL)))
 800960a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800960c:	2b30      	cmp	r3, #48	; 0x30
 800960e:	d002      	beq.n	8009616 <_txe_block_pool_create+0x2a>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009610:	2302      	movs	r3, #2
 8009612:	647b      	str	r3, [r7, #68]	; 0x44
 8009614:	e075      	b.n	8009702 <_txe_block_pool_create+0x116>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009616:	f3ef 8310 	mrs	r3, PRIMASK
 800961a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800961e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009620:	b672      	cpsid	i
    return(int_posture);
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009624:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009626:	4b3f      	ldr	r3, [pc, #252]	; (8009724 <_txe_block_pool_create+0x138>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	4a3d      	ldr	r2, [pc, #244]	; (8009724 <_txe_block_pool_create+0x138>)
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009632:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	f383 8810 	msr	PRIMASK, r3
}
 800963a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_block_pool_created_ptr;
 800963c:	4b3a      	ldr	r3, [pc, #232]	; (8009728 <_txe_block_pool_create+0x13c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 8009642:	2300      	movs	r3, #0
 8009644:	643b      	str	r3, [r7, #64]	; 0x40
 8009646:	e009      	b.n	800965c <_txe_block_pool_create+0x70>
        {

            /* Determine if this block pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964c:	429a      	cmp	r2, r3
 800964e:	d00b      	beq.n	8009668 <_txe_block_pool_create+0x7c>
                break;
            }
            else
            {
                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_block_pool_created_next;
 8009650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 8009656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009658:	3301      	adds	r3, #1
 800965a:	643b      	str	r3, [r7, #64]	; 0x40
 800965c:	4b33      	ldr	r3, [pc, #204]	; (800972c <_txe_block_pool_create+0x140>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009662:	429a      	cmp	r2, r3
 8009664:	d3f0      	bcc.n	8009648 <_txe_block_pool_create+0x5c>
 8009666:	e000      	b.n	800966a <_txe_block_pool_create+0x7e>
                break;
 8009668:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800966a:	f3ef 8310 	mrs	r3, PRIMASK
 800966e:	623b      	str	r3, [r7, #32]
    return(posture);
 8009670:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009672:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009674:	b672      	cpsid	i
    return(int_posture);
 8009676:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009678:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800967a:	4b2a      	ldr	r3, [pc, #168]	; (8009724 <_txe_block_pool_create+0x138>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3b01      	subs	r3, #1
 8009680:	4a28      	ldr	r2, [pc, #160]	; (8009724 <_txe_block_pool_create+0x138>)
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	f383 8810 	msr	PRIMASK, r3
}
 800968e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009690:	f7ff fa96 	bl	8008bc0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009698:	429a      	cmp	r2, r3
 800969a:	d102      	bne.n	80096a2 <_txe_block_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800969c:	2302      	movs	r3, #2
 800969e:	647b      	str	r3, [r7, #68]	; 0x44
 80096a0:	e02f      	b.n	8009702 <_txe_block_pool_create+0x116>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <_txe_block_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80096a8:	2303      	movs	r3, #3
 80096aa:	647b      	str	r3, [r7, #68]	; 0x44
 80096ac:	e029      	b.n	8009702 <_txe_block_pool_create+0x116>
        }
        else
        {

            /* Check for invalid pool size.  */
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) >
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f023 0303 	bic.w	r3, r3, #3
 80096b4:	1d1a      	adds	r2, r3, #4
                                            ((pool_size/(sizeof(void *)))*(sizeof(void *))))
 80096b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b8:	f023 0303 	bic.w	r3, r3, #3
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) >
 80096bc:	429a      	cmp	r2, r3
 80096be:	d902      	bls.n	80096c6 <_txe_block_pool_create+0xda>
            {

                /* Not enough memory for one block, return appropriate error.  */
                status =  TX_SIZE_ERROR;
 80096c0:	2305      	movs	r3, #5
 80096c2:	647b      	str	r3, [r7, #68]	; 0x44
 80096c4:	e01d      	b.n	8009702 <_txe_block_pool_create+0x116>
            {

#ifndef TX_TIMER_PROCESS_IN_ISR

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80096c6:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <_txe_block_pool_create+0x144>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check for invalid caller of this function.  First check for a calling thread.  */
                if (thread_ptr == &_tx_timer_thread)
 80096cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ce:	4a19      	ldr	r2, [pc, #100]	; (8009734 <_txe_block_pool_create+0x148>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d101      	bne.n	80096d8 <_txe_block_pool_create+0xec>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80096d4:	2313      	movs	r3, #19
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096d8:	f3ef 8305 	mrs	r3, IPSR
 80096dc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80096de:	69ba      	ldr	r2, [r7, #24]
                }
#endif

                /* Check for interrupt call.  */
                if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80096e0:	4b15      	ldr	r3, [pc, #84]	; (8009738 <_txe_block_pool_create+0x14c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <_txe_block_pool_create+0x116>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096ea:	f3ef 8305 	mrs	r3, IPSR
 80096ee:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80096f0:	697a      	ldr	r2, [r7, #20]
                {

                    /* Now, make sure the call is from an interrupt and not initialization.  */
                    if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80096f2:	4b11      	ldr	r3, [pc, #68]	; (8009738 <_txe_block_pool_create+0x14c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80096fc:	d201      	bcs.n	8009702 <_txe_block_pool_create+0x116>
                    {

                        /* Invalid caller of this function, return appropriate error code.  */
                        status =  TX_CALLER_ERROR;
 80096fe:	2313      	movs	r3, #19
 8009700:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009704:	2b00      	cmp	r3, #0
 8009706:	d108      	bne.n	800971a <_txe_block_pool_create+0x12e>
    {

        /* Call actual block pool create function.  */
        status =  _tx_block_pool_create(pool_ptr, name_ptr, block_size, pool_start, pool_size);
 8009708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7fe fce0 	bl	80080d8 <_tx_block_pool_create>
 8009718:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800971a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800971c:	4618      	mov	r0, r3
 800971e:	3748      	adds	r7, #72	; 0x48
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	200a69f8 	.word	0x200a69f8
 8009728:	200a6948 	.word	0x200a6948
 800972c:	200a694c 	.word	0x200a694c
 8009730:	200a6960 	.word	0x200a6960
 8009734:	200a6aa8 	.word	0x200a6aa8
 8009738:	2000000c 	.word	0x2000000c

0800973c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	; 0x28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800974a:	2300      	movs	r3, #0
 800974c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d102      	bne.n	800975a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009754:	2302      	movs	r3, #2
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
 8009758:	e029      	b.n	80097ae <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a2d      	ldr	r2, [pc, #180]	; (8009814 <_txe_byte_allocate+0xd8>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d002      	beq.n	800976a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009764:	2302      	movs	r3, #2
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
 8009768:	e021      	b.n	80097ae <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8009770:	2303      	movs	r3, #3
 8009772:	627b      	str	r3, [r7, #36]	; 0x24
 8009774:	e01b      	b.n	80097ae <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800977c:	2305      	movs	r3, #5
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
 8009780:	e015      	b.n	80097ae <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	429a      	cmp	r2, r3
 800978a:	d902      	bls.n	8009792 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800978c:	2305      	movs	r3, #5
 800978e:	627b      	str	r3, [r7, #36]	; 0x24
 8009790:	e00d      	b.n	80097ae <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00a      	beq.n	80097ae <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009798:	f3ef 8305 	mrs	r3, IPSR
 800979c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800979e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80097a0:	4b1d      	ldr	r3, [pc, #116]	; (8009818 <_txe_byte_allocate+0xdc>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80097aa:	2304      	movs	r3, #4
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d108      	bne.n	80097c6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80097b4:	4b19      	ldr	r3, [pc, #100]	; (800981c <_txe_byte_allocate+0xe0>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	4a18      	ldr	r2, [pc, #96]	; (8009820 <_txe_byte_allocate+0xe4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d101      	bne.n	80097c6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80097c2:	2313      	movs	r3, #19
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d114      	bne.n	80097f6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097cc:	f3ef 8305 	mrs	r3, IPSR
 80097d0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80097d2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80097d4:	4b10      	ldr	r3, [pc, #64]	; (8009818 <_txe_byte_allocate+0xdc>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4313      	orrs	r3, r2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097de:	f3ef 8305 	mrs	r3, IPSR
 80097e2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80097e4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80097e6:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <_txe_byte_allocate+0xdc>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80097f0:	d201      	bcs.n	80097f6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80097f2:	2313      	movs	r3, #19
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d106      	bne.n	800980a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7fe fd0a 	bl	800821c <_tx_byte_allocate>
 8009808:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800980c:	4618      	mov	r0, r3
 800980e:	3728      	adds	r7, #40	; 0x28
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	42595445 	.word	0x42595445
 8009818:	2000000c 	.word	0x2000000c
 800981c:	200a6960 	.word	0x200a6960
 8009820:	200a6aa8 	.word	0x200a6aa8

08009824 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b092      	sub	sp, #72	; 0x48
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009832:	2300      	movs	r3, #0
 8009834:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800983c:	2302      	movs	r3, #2
 800983e:	647b      	str	r3, [r7, #68]	; 0x44
 8009840:	e075      	b.n	800992e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8009842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009844:	2b34      	cmp	r3, #52	; 0x34
 8009846:	d002      	beq.n	800984e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009848:	2302      	movs	r3, #2
 800984a:	647b      	str	r3, [r7, #68]	; 0x44
 800984c:	e06f      	b.n	800992e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800984e:	f3ef 8310 	mrs	r3, PRIMASK
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8009856:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009858:	b672      	cpsid	i
    return(int_posture);
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800985c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800985e:	4b3b      	ldr	r3, [pc, #236]	; (800994c <_txe_byte_pool_create+0x128>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	4a39      	ldr	r2, [pc, #228]	; (800994c <_txe_byte_pool_create+0x128>)
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	f383 8810 	msr	PRIMASK, r3
}
 8009872:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8009874:	4b36      	ldr	r3, [pc, #216]	; (8009950 <_txe_byte_pool_create+0x12c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800987a:	2300      	movs	r3, #0
 800987c:	643b      	str	r3, [r7, #64]	; 0x40
 800987e:	e009      	b.n	8009894 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009884:	429a      	cmp	r2, r3
 8009886:	d00b      	beq.n	80098a0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8009888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800988e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009890:	3301      	adds	r3, #1
 8009892:	643b      	str	r3, [r7, #64]	; 0x40
 8009894:	4b2f      	ldr	r3, [pc, #188]	; (8009954 <_txe_byte_pool_create+0x130>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800989a:	429a      	cmp	r2, r3
 800989c:	d3f0      	bcc.n	8009880 <_txe_byte_pool_create+0x5c>
 800989e:	e000      	b.n	80098a2 <_txe_byte_pool_create+0x7e>
                break;
 80098a0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098a2:	f3ef 8310 	mrs	r3, PRIMASK
 80098a6:	623b      	str	r3, [r7, #32]
    return(posture);
 80098a8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80098aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80098ac:	b672      	cpsid	i
    return(int_posture);
 80098ae:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80098b0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80098b2:	4b26      	ldr	r3, [pc, #152]	; (800994c <_txe_byte_pool_create+0x128>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	4a24      	ldr	r2, [pc, #144]	; (800994c <_txe_byte_pool_create+0x128>)
 80098ba:	6013      	str	r3, [r2, #0]
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	f383 8810 	msr	PRIMASK, r3
}
 80098c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80098c8:	f7ff f97a 	bl	8008bc0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d102      	bne.n	80098da <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80098d4:	2302      	movs	r3, #2
 80098d6:	647b      	str	r3, [r7, #68]	; 0x44
 80098d8:	e029      	b.n	800992e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80098e0:	2303      	movs	r3, #3
 80098e2:	647b      	str	r3, [r7, #68]	; 0x44
 80098e4:	e023      	b.n	800992e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b63      	cmp	r3, #99	; 0x63
 80098ea:	d802      	bhi.n	80098f2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80098ec:	2305      	movs	r3, #5
 80098ee:	647b      	str	r3, [r7, #68]	; 0x44
 80098f0:	e01d      	b.n	800992e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80098f2:	4b19      	ldr	r3, [pc, #100]	; (8009958 <_txe_byte_pool_create+0x134>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80098f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fa:	4a18      	ldr	r2, [pc, #96]	; (800995c <_txe_byte_pool_create+0x138>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d101      	bne.n	8009904 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009900:	2313      	movs	r3, #19
 8009902:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009904:	f3ef 8305 	mrs	r3, IPSR
 8009908:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800990a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800990c:	4b14      	ldr	r3, [pc, #80]	; (8009960 <_txe_byte_pool_create+0x13c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4313      	orrs	r3, r2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009916:	f3ef 8305 	mrs	r3, IPSR
 800991a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800991c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800991e:	4b10      	ldr	r3, [pc, #64]	; (8009960 <_txe_byte_pool_create+0x13c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4313      	orrs	r3, r2
 8009924:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009928:	d201      	bcs.n	800992e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800992a:	2313      	movs	r3, #19
 800992c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800992e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009930:	2b00      	cmp	r3, #0
 8009932:	d106      	bne.n	8009942 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7fe fdb0 	bl	80084a0 <_tx_byte_pool_create>
 8009940:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8009942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009944:	4618      	mov	r0, r3
 8009946:	3748      	adds	r7, #72	; 0x48
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	200a69f8 	.word	0x200a69f8
 8009950:	200a6950 	.word	0x200a6950
 8009954:	200a6954 	.word	0x200a6954
 8009958:	200a6960 	.word	0x200a6960
 800995c:	200a6aa8 	.word	0x200a6aa8
 8009960:	2000000c 	.word	0x2000000c

08009964 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800996a:	f3ef 8310 	mrs	r3, PRIMASK
 800996e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009970:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009972:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009974:	b672      	cpsid	i
    return(int_posture);
 8009976:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 8009978:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800997a:	463b      	mov	r3, r7
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f835 	bl	80099ec <tx_timer_get_next>
 8009982:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d103      	bne.n	8009992 <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	4618      	mov	r0, r3
 800998e:	f7f6 ffbd 	bl	800090c <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 8009992:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <tx_low_power_enter+0x4c>)
 8009994:	2201      	movs	r2, #1
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f383 8810 	msr	PRIMASK, r3
}
 80099a2:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 80099a4:	f7f6 ffbc 	bl	8000920 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 80099a8:	bf00      	nop
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	200a6f68 	.word	0x200a6f68

080099b4 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 80099ba:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <tx_low_power_exit+0x34>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00d      	beq.n	80099de <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 80099c2:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <tx_low_power_exit+0x34>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 80099c8:	f7f6 ffb1 	bl	800092e <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 80099cc:	f7f6 ffb6 	bl	800093c <App_ThreadX_LowPower_Timer_Adjust>
 80099d0:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f86f 	bl	8009abc <tx_time_increment>
        }
    }
}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	200a6f68 	.word	0x200a6f68

080099ec <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b08d      	sub	sp, #52	; 0x34
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 80099f4:	f04f 33ff 	mov.w	r3, #4294967295
 80099f8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099fa:	f3ef 8310 	mrs	r3, PRIMASK
 80099fe:	617b      	str	r3, [r7, #20]
    return(posture);
 8009a00:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009a02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a04:	b672      	cpsid	i
    return(int_posture);
 8009a06:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 8009a08:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 8009a0a:	4b29      	ldr	r3, [pc, #164]	; (8009ab0 <tx_timer_get_next+0xc4>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8009a10:	2300      	movs	r3, #0
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
 8009a14:	e02f      	b.n	8009a76 <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d01d      	beq.n	8009a5a <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8009a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d906      	bls.n	8009a3a <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	4413      	add	r3, r2
 8009a34:	3b20      	subs	r3, #32
 8009a36:	623b      	str	r3, [r7, #32]
 8009a38:	e001      	b.n	8009a3e <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 8009a3e:	69fa      	ldr	r2, [r7, #28]
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d901      	bls.n	8009a4a <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 8009a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d1e4      	bne.n	8009a24 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 8009a60:	4b14      	ldr	r3, [pc, #80]	; (8009ab4 <tx_timer_get_next+0xc8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d302      	bcc.n	8009a70 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8009a6a:	4b13      	ldr	r3, [pc, #76]	; (8009ab8 <tx_timer_get_next+0xcc>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	3301      	adds	r3, #1
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	2b1f      	cmp	r3, #31
 8009a7a:	d9cc      	bls.n	8009a16 <tx_timer_get_next+0x2a>
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f383 8810 	msr	PRIMASK, r3
}
 8009a86:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8e:	d004      	beq.n	8009a9a <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	69fa      	ldr	r2, [r7, #28]
 8009a94:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 8009a96:	2301      	movs	r3, #1
 8009a98:	e003      	b.n	8009aa2 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 8009aa0:	2300      	movs	r3, #0
    }
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3734      	adds	r7, #52	; 0x34
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	200a6a94 	.word	0x200a6a94
 8009ab4:	200a6a90 	.word	0x200a6a90
 8009ab8:	200a6a8c 	.word	0x200a6a8c

08009abc <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08a      	sub	sp, #40	; 0x28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 809b 	beq.w	8009c02 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009acc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad0:	613b      	str	r3, [r7, #16]
    return(posture);
 8009ad2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009ad4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ad6:	b672      	cpsid	i
    return(int_posture);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009ada:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 8009adc:	4b4b      	ldr	r3, [pc, #300]	; (8009c0c <tx_time_increment+0x150>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	4a49      	ldr	r2, [pc, #292]	; (8009c0c <tx_time_increment+0x150>)
 8009ae6:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8009ae8:	4b49      	ldr	r3, [pc, #292]	; (8009c10 <tx_time_increment+0x154>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00e      	beq.n	8009b0e <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 8009af0:	4b47      	ldr	r3, [pc, #284]	; (8009c10 <tx_time_increment+0x154>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d206      	bcs.n	8009b08 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 8009afa:	4b45      	ldr	r3, [pc, #276]	; (8009c10 <tx_time_increment+0x154>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	4a43      	ldr	r2, [pc, #268]	; (8009c10 <tx_time_increment+0x154>)
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	e002      	b.n	8009b0e <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8009b08:	4b41      	ldr	r3, [pc, #260]	; (8009c10 <tx_time_increment+0x154>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 8009b0e:	4b41      	ldr	r3, [pc, #260]	; (8009c14 <tx_time_increment+0x158>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b1c:	e046      	b.n	8009bac <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d034      	beq.n	8009b90 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d908      	bls.n	8009b46 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	e003      	b.n	8009b4e <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	69fa      	ldr	r2, [r7, #28]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d1e6      	bne.n	8009b2c <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	2200      	movs	r2, #0
 8009b66:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	61bb      	str	r3, [r7, #24]
 8009b74:	e009      	b.n	8009b8a <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	6a3a      	ldr	r2, [r7, #32]
 8009b7c:	6812      	ldr	r2, [r2, #0]
 8009b7e:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	695a      	ldr	r2, [r3, #20]
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	3304      	adds	r3, #4
 8009b94:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 8009b96:	4b20      	ldr	r3, [pc, #128]	; (8009c18 <tx_time_increment+0x15c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6a3a      	ldr	r2, [r7, #32]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d302      	bcc.n	8009ba6 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8009ba0:	4b1e      	ldr	r3, [pc, #120]	; (8009c1c <tx_time_increment+0x160>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	3301      	adds	r3, #1
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	2b1f      	cmp	r3, #31
 8009bb0:	d9b5      	bls.n	8009b1e <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 8009bb2:	4b1a      	ldr	r3, [pc, #104]	; (8009c1c <tx_time_increment+0x160>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a17      	ldr	r2, [pc, #92]	; (8009c14 <tx_time_increment+0x158>)
 8009bb8:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 8009bba:	e019      	b.n	8009bf0 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d206      	bcs.n	8009bde <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	e002      	b.n	8009be4 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	2201      	movs	r2, #1
 8009be2:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	2200      	movs	r2, #0
 8009be8:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 8009bea:	69f8      	ldr	r0, [r7, #28]
 8009bec:	f7ff fb66 	bl	80092bc <_tx_timer_system_activate>
    while (temp_list_head)
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e2      	bne.n	8009bbc <tx_time_increment+0x100>
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f383 8810 	msr	PRIMASK, r3
}
 8009c00:	e000      	b.n	8009c04 <tx_time_increment+0x148>
        return;
 8009c02:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009c04:	3728      	adds	r7, #40	; 0x28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	200a6a04 	.word	0x200a6a04
 8009c10:	200a6f64 	.word	0x200a6f64
 8009c14:	200a6a94 	.word	0x200a6a94
 8009c18:	200a6a90 	.word	0x200a6a90
 8009c1c:	200a6a8c 	.word	0x200a6a8c

08009c20 <__libc_init_array>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	4d0d      	ldr	r5, [pc, #52]	; (8009c58 <__libc_init_array+0x38>)
 8009c24:	2600      	movs	r6, #0
 8009c26:	4c0d      	ldr	r4, [pc, #52]	; (8009c5c <__libc_init_array+0x3c>)
 8009c28:	1b64      	subs	r4, r4, r5
 8009c2a:	10a4      	asrs	r4, r4, #2
 8009c2c:	42a6      	cmp	r6, r4
 8009c2e:	d109      	bne.n	8009c44 <__libc_init_array+0x24>
 8009c30:	4d0b      	ldr	r5, [pc, #44]	; (8009c60 <__libc_init_array+0x40>)
 8009c32:	2600      	movs	r6, #0
 8009c34:	4c0b      	ldr	r4, [pc, #44]	; (8009c64 <__libc_init_array+0x44>)
 8009c36:	f000 f81f 	bl	8009c78 <_init>
 8009c3a:	1b64      	subs	r4, r4, r5
 8009c3c:	10a4      	asrs	r4, r4, #2
 8009c3e:	42a6      	cmp	r6, r4
 8009c40:	d105      	bne.n	8009c4e <__libc_init_array+0x2e>
 8009c42:	bd70      	pop	{r4, r5, r6, pc}
 8009c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c48:	3601      	adds	r6, #1
 8009c4a:	4798      	blx	r3
 8009c4c:	e7ee      	b.n	8009c2c <__libc_init_array+0xc>
 8009c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c52:	3601      	adds	r6, #1
 8009c54:	4798      	blx	r3
 8009c56:	e7f2      	b.n	8009c3e <__libc_init_array+0x1e>
 8009c58:	08009dcc 	.word	0x08009dcc
 8009c5c:	08009dcc 	.word	0x08009dcc
 8009c60:	08009dcc 	.word	0x08009dcc
 8009c64:	08009dd0 	.word	0x08009dd0

08009c68 <memset>:
 8009c68:	4402      	add	r2, r0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d100      	bne.n	8009c72 <memset+0xa>
 8009c70:	4770      	bx	lr
 8009c72:	f803 1b01 	strb.w	r1, [r3], #1
 8009c76:	e7f9      	b.n	8009c6c <memset+0x4>

08009c78 <_init>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	bf00      	nop
 8009c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7e:	bc08      	pop	{r3}
 8009c80:	469e      	mov	lr, r3
 8009c82:	4770      	bx	lr

08009c84 <_fini>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	bf00      	nop
 8009c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8a:	bc08      	pop	{r3}
 8009c8c:	469e      	mov	lr, r3
 8009c8e:	4770      	bx	lr
