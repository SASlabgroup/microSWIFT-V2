
microSWIFT_U5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000232ac  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000114c  080234e8  080234e8  000334e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08024634  08024634  00034634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802463c  0802463c  0003463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08024640  08024640  00034640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000000  08024644  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000b6ecb  2000020c  08024850  0004020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000601  200b70d7  08024850  000470d7  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00044364  00000000  00000000  00040242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009a6f  00000000  00000000  000845a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002940  00000000  00000000  0008e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002338  00000000  00000000  00090958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040a93  00000000  00000000  00092c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044d19  00000000  00000000  000d3723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017382c  00000000  00000000  0011843c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028bc68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b500  00000000  00000000  0028bcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000020c 	.word	0x2000020c
 8000254:	00000000 	.word	0x00000000
 8000258:	080234cc 	.word	0x080234cc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000210 	.word	0x20000210
 8000274:	080234cc 	.word	0x080234cc

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89b 	bl	8000404 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	200b6abc 	.word	0x200b6abc
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	00124f7f 	.word	0x00124f7f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_context_restore>:
    PUSH    {r0, lr}                                // Save return address
    BL      _tx_execution_isr_exit                  // Call the ISR exit function
    POP     {r0, lr}                                // Recover return address
#endif

    BX      lr
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <_tx_thread_context_save>:
    PUSH    {r0, lr}                                // Save return address
    BL      _tx_execution_isr_enter                 // Call the ISR enter function
    POP     {r0, lr}                                // Recover return address
#endif

    BX      lr
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop

080002f8 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f8:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002fc:	4a2d      	ldr	r2, [pc, #180]	; (80003b4 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002fe:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000300:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000304:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000308:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 800030c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800030e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000312:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000316:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800031a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800031e:	f3bf 8f6f 	isb	sy

08000322 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000322:	e7fe      	b.n	8000322 <__tx_wait_here>

08000324 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000324:	4824      	ldr	r0, [pc, #144]	; (80003b8 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000326:	4a25      	ldr	r2, [pc, #148]	; (80003bc <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000328:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 800032c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800032e:	b191      	cbz	r1, 8000356 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000330:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000332:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000336:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800033a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800033e:	d101      	bne.n	8000344 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000340:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000344 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000344:	4c1e      	ldr	r4, [pc, #120]	; (80003c0 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000346:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800034a:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800034e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000350:	b10d      	cbz	r5, 8000356 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000352:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000354:	6023      	str	r3, [r4, #0]

08000356 <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 8000356:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000358:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800035a:	b1d1      	cbz	r1, 8000392 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800035c:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 800035e:	b662      	cpsie	i

08000360 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000360:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000362:	4c17      	ldr	r4, [pc, #92]	; (80003c0 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000364:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000366:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800036a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800036c:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800036e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000372:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000376:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800037a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800037e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000382:	d101      	bne.n	8000388 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000384:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000388 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000388:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800038c:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000390:	4770      	bx	lr

08000392 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000392:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000394:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000396:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000398:	b909      	cbnz	r1, 800039e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800039a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800039c:	e7f9      	b.n	8000392 <__tx_ts_wait>

0800039e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800039e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003a2:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003a6:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 80003aa:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003ac:	e7d8      	b.n	8000360 <__tx_ts_restore>
 80003ae:	bf00      	nop

080003b0 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b0:	4770      	bx	lr
 80003b2:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003b4:	200b6b58 	.word	0x200b6b58
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003b8:	200b6ac0 	.word	0x200b6ac0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003bc:	200b6ac4 	.word	0x200b6ac4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c0:	200b70c4 	.word	0x200b70c4

080003c4 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003c4:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003c6:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003ca:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003ce:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003d2:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003d4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003d8:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003da:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003dc:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003de:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e0:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003e2:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003e4:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003e6:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003e8:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003ea:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f0:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003f6:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003f8:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003fe:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000400:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000402:	4770      	bx	lr

08000404 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000404:	4922      	ldr	r1, [pc, #136]	; (8000490 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000406:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000408:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800040c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800040e:	4b21      	ldr	r3, [pc, #132]	; (8000494 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000410:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000412:	b13a      	cbz	r2, 8000424 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000414:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000418:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800041a:	b91a      	cbnz	r2, 8000424 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800041e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000422:	6018      	str	r0, [r3, #0]

08000424 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000424:	491d      	ldr	r1, [pc, #116]	; (800049c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000426:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000428:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800042a:	b122      	cbz	r2, 8000436 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800042e:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000432:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000434:	e008      	b.n	8000448 <__tx_timer_done>

08000436 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000436:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800043a:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 800043c:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800043e:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000440:	d101      	bne.n	8000446 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000444:	6818      	ldr	r0, [r3, #0]

08000446 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000446:	6008      	str	r0, [r1, #0]

08000448 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800044a:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 800044c:	b912      	cbnz	r2, 8000454 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800044e:	4914      	ldr	r1, [pc, #80]	; (80004a0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000450:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000452:	b1c8      	cbz	r0, 8000488 <__tx_timer_nothing_expired>

08000454 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000454:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000456:	4912      	ldr	r1, [pc, #72]	; (80004a0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800045a:	b108      	cbz	r0, 8000460 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800045c:	f01d fa04 	bl	801d868 <_tx_timer_expiration_process>

08000460 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000462:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000464:	b172      	cbz	r2, 8000484 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000466:	f01d f971 	bl	801d74c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800046a:	4810      	ldr	r0, [pc, #64]	; (80004ac <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800046c:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800046e:	b949      	cbnz	r1, 8000484 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000470:	480f      	ldr	r0, [pc, #60]	; (80004b0 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000472:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000474:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000476:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800047a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800047e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000480:	d000      	beq.n	8000484 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000482:	6002      	str	r2, [r0, #0]

08000484 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000484:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000488 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000488:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800048c:	4770      	bx	lr
 800048e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000490:	200b6b64 	.word	0x200b6b64
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000494:	200b70c4 	.word	0x200b70c4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000498:	200b6b68 	.word	0x200b6b68
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800049c:	200b6bf4 	.word	0x200b6bf4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a0:	200b6bf8 	.word	0x200b6bf8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004a4:	200b6bf0 	.word	0x200b6bf0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004a8:	200b6bec 	.word	0x200b6bec
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004ac:	200b6b58 	.word	0x200b6b58
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b0:	200b6ac0 	.word	0x200b6ac0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b4:	200b6ac4 	.word	0x200b6ac4
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b8:	e000ed04 	.word	0xe000ed04

080004bc <strlen>:
 80004bc:	4603      	mov	r3, r0
 80004be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004c2:	2a00      	cmp	r2, #0
 80004c4:	d1fb      	bne.n	80004be <strlen+0x2>
 80004c6:	1a18      	subs	r0, r3, r0
 80004c8:	3801      	subs	r0, #1
 80004ca:	4770      	bx	lr

080004cc <__aeabi_drsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e002      	b.n	80004d8 <__adddf3>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dsub>:
 80004d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d8 <__adddf3>:
 80004d8:	b530      	push	{r4, r5, lr}
 80004da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	bf1f      	itttt	ne
 80004ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fe:	f000 80e2 	beq.w	80006c6 <__adddf3+0x1ee>
 8000502:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000506:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800050a:	bfb8      	it	lt
 800050c:	426d      	neglt	r5, r5
 800050e:	dd0c      	ble.n	800052a <__adddf3+0x52>
 8000510:	442c      	add	r4, r5
 8000512:	ea80 0202 	eor.w	r2, r0, r2
 8000516:	ea81 0303 	eor.w	r3, r1, r3
 800051a:	ea82 0000 	eor.w	r0, r2, r0
 800051e:	ea83 0101 	eor.w	r1, r3, r1
 8000522:	ea80 0202 	eor.w	r2, r0, r2
 8000526:	ea81 0303 	eor.w	r3, r1, r3
 800052a:	2d36      	cmp	r5, #54	; 0x36
 800052c:	bf88      	it	hi
 800052e:	bd30      	pophi	{r4, r5, pc}
 8000530:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000534:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000538:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800053c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000540:	d002      	beq.n	8000548 <__adddf3+0x70>
 8000542:	4240      	negs	r0, r0
 8000544:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000548:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800054c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000550:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000554:	d002      	beq.n	800055c <__adddf3+0x84>
 8000556:	4252      	negs	r2, r2
 8000558:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800055c:	ea94 0f05 	teq	r4, r5
 8000560:	f000 80a7 	beq.w	80006b2 <__adddf3+0x1da>
 8000564:	f1a4 0401 	sub.w	r4, r4, #1
 8000568:	f1d5 0e20 	rsbs	lr, r5, #32
 800056c:	db0d      	blt.n	800058a <__adddf3+0xb2>
 800056e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000572:	fa22 f205 	lsr.w	r2, r2, r5
 8000576:	1880      	adds	r0, r0, r2
 8000578:	f141 0100 	adc.w	r1, r1, #0
 800057c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000580:	1880      	adds	r0, r0, r2
 8000582:	fa43 f305 	asr.w	r3, r3, r5
 8000586:	4159      	adcs	r1, r3
 8000588:	e00e      	b.n	80005a8 <__adddf3+0xd0>
 800058a:	f1a5 0520 	sub.w	r5, r5, #32
 800058e:	f10e 0e20 	add.w	lr, lr, #32
 8000592:	2a01      	cmp	r2, #1
 8000594:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000598:	bf28      	it	cs
 800059a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800059e:	fa43 f305 	asr.w	r3, r3, r5
 80005a2:	18c0      	adds	r0, r0, r3
 80005a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	d507      	bpl.n	80005be <__adddf3+0xe6>
 80005ae:	f04f 0e00 	mov.w	lr, #0
 80005b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80005be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005c2:	d31b      	bcc.n	80005fc <__adddf3+0x124>
 80005c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c8:	d30c      	bcc.n	80005e4 <__adddf3+0x10c>
 80005ca:	0849      	lsrs	r1, r1, #1
 80005cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005d4:	f104 0401 	add.w	r4, r4, #1
 80005d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e0:	f080 809a 	bcs.w	8000718 <__adddf3+0x240>
 80005e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	ea41 0105 	orr.w	r1, r1, r5
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000600:	4140      	adcs	r0, r0
 8000602:	eb41 0101 	adc.w	r1, r1, r1
 8000606:	3c01      	subs	r4, #1
 8000608:	bf28      	it	cs
 800060a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800060e:	d2e9      	bcs.n	80005e4 <__adddf3+0x10c>
 8000610:	f091 0f00 	teq	r1, #0
 8000614:	bf04      	itt	eq
 8000616:	4601      	moveq	r1, r0
 8000618:	2000      	moveq	r0, #0
 800061a:	fab1 f381 	clz	r3, r1
 800061e:	bf08      	it	eq
 8000620:	3320      	addeq	r3, #32
 8000622:	f1a3 030b 	sub.w	r3, r3, #11
 8000626:	f1b3 0220 	subs.w	r2, r3, #32
 800062a:	da0c      	bge.n	8000646 <__adddf3+0x16e>
 800062c:	320c      	adds	r2, #12
 800062e:	dd08      	ble.n	8000642 <__adddf3+0x16a>
 8000630:	f102 0c14 	add.w	ip, r2, #20
 8000634:	f1c2 020c 	rsb	r2, r2, #12
 8000638:	fa01 f00c 	lsl.w	r0, r1, ip
 800063c:	fa21 f102 	lsr.w	r1, r1, r2
 8000640:	e00c      	b.n	800065c <__adddf3+0x184>
 8000642:	f102 0214 	add.w	r2, r2, #20
 8000646:	bfd8      	it	le
 8000648:	f1c2 0c20 	rsble	ip, r2, #32
 800064c:	fa01 f102 	lsl.w	r1, r1, r2
 8000650:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000654:	bfdc      	itt	le
 8000656:	ea41 010c 	orrle.w	r1, r1, ip
 800065a:	4090      	lslle	r0, r2
 800065c:	1ae4      	subs	r4, r4, r3
 800065e:	bfa2      	ittt	ge
 8000660:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000664:	4329      	orrge	r1, r5
 8000666:	bd30      	popge	{r4, r5, pc}
 8000668:	ea6f 0404 	mvn.w	r4, r4
 800066c:	3c1f      	subs	r4, #31
 800066e:	da1c      	bge.n	80006aa <__adddf3+0x1d2>
 8000670:	340c      	adds	r4, #12
 8000672:	dc0e      	bgt.n	8000692 <__adddf3+0x1ba>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0220 	rsb	r2, r4, #32
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f302 	lsl.w	r3, r1, r2
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	fa21 f304 	lsr.w	r3, r1, r4
 800068c:	ea45 0103 	orr.w	r1, r5, r3
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	f1c4 040c 	rsb	r4, r4, #12
 8000696:	f1c4 0220 	rsb	r2, r4, #32
 800069a:	fa20 f002 	lsr.w	r0, r0, r2
 800069e:	fa01 f304 	lsl.w	r3, r1, r4
 80006a2:	ea40 0003 	orr.w	r0, r0, r3
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	fa21 f004 	lsr.w	r0, r1, r4
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	f094 0f00 	teq	r4, #0
 80006b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ba:	bf06      	itte	eq
 80006bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c0:	3401      	addeq	r4, #1
 80006c2:	3d01      	subne	r5, #1
 80006c4:	e74e      	b.n	8000564 <__adddf3+0x8c>
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf18      	it	ne
 80006cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d0:	d029      	beq.n	8000726 <__adddf3+0x24e>
 80006d2:	ea94 0f05 	teq	r4, r5
 80006d6:	bf08      	it	eq
 80006d8:	ea90 0f02 	teqeq	r0, r2
 80006dc:	d005      	beq.n	80006ea <__adddf3+0x212>
 80006de:	ea54 0c00 	orrs.w	ip, r4, r0
 80006e2:	bf04      	itt	eq
 80006e4:	4619      	moveq	r1, r3
 80006e6:	4610      	moveq	r0, r2
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	ea91 0f03 	teq	r1, r3
 80006ee:	bf1e      	ittt	ne
 80006f0:	2100      	movne	r1, #0
 80006f2:	2000      	movne	r0, #0
 80006f4:	bd30      	popne	{r4, r5, pc}
 80006f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006fa:	d105      	bne.n	8000708 <__adddf3+0x230>
 80006fc:	0040      	lsls	r0, r0, #1
 80006fe:	4149      	adcs	r1, r1
 8000700:	bf28      	it	cs
 8000702:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd30      	pop	{r4, r5, pc}
 8000708:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800070c:	bf3c      	itt	cc
 800070e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000712:	bd30      	popcc	{r4, r5, pc}
 8000714:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000718:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800072a:	bf1a      	itte	ne
 800072c:	4619      	movne	r1, r3
 800072e:	4610      	movne	r0, r2
 8000730:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000734:	bf1c      	itt	ne
 8000736:	460b      	movne	r3, r1
 8000738:	4602      	movne	r2, r0
 800073a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800073e:	bf06      	itte	eq
 8000740:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000744:	ea91 0f03 	teqeq	r1, r3
 8000748:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	bf00      	nop

08000750 <__aeabi_ui2d>:
 8000750:	f090 0f00 	teq	r0, #0
 8000754:	bf04      	itt	eq
 8000756:	2100      	moveq	r1, #0
 8000758:	4770      	bxeq	lr
 800075a:	b530      	push	{r4, r5, lr}
 800075c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000760:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000764:	f04f 0500 	mov.w	r5, #0
 8000768:	f04f 0100 	mov.w	r1, #0
 800076c:	e750      	b.n	8000610 <__adddf3+0x138>
 800076e:	bf00      	nop

08000770 <__aeabi_i2d>:
 8000770:	f090 0f00 	teq	r0, #0
 8000774:	bf04      	itt	eq
 8000776:	2100      	moveq	r1, #0
 8000778:	4770      	bxeq	lr
 800077a:	b530      	push	{r4, r5, lr}
 800077c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000780:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000784:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000788:	bf48      	it	mi
 800078a:	4240      	negmi	r0, r0
 800078c:	f04f 0100 	mov.w	r1, #0
 8000790:	e73e      	b.n	8000610 <__adddf3+0x138>
 8000792:	bf00      	nop

08000794 <__aeabi_f2d>:
 8000794:	0042      	lsls	r2, r0, #1
 8000796:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007a2:	bf1f      	itttt	ne
 80007a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b0:	4770      	bxne	lr
 80007b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007b6:	bf08      	it	eq
 80007b8:	4770      	bxeq	lr
 80007ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007be:	bf04      	itt	eq
 80007c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007c4:	4770      	bxeq	lr
 80007c6:	b530      	push	{r4, r5, lr}
 80007c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	e71c      	b.n	8000610 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_ul2d>:
 80007d8:	ea50 0201 	orrs.w	r2, r0, r1
 80007dc:	bf08      	it	eq
 80007de:	4770      	bxeq	lr
 80007e0:	b530      	push	{r4, r5, lr}
 80007e2:	f04f 0500 	mov.w	r5, #0
 80007e6:	e00a      	b.n	80007fe <__aeabi_l2d+0x16>

080007e8 <__aeabi_l2d>:
 80007e8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ec:	bf08      	it	eq
 80007ee:	4770      	bxeq	lr
 80007f0:	b530      	push	{r4, r5, lr}
 80007f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007f6:	d502      	bpl.n	80007fe <__aeabi_l2d+0x16>
 80007f8:	4240      	negs	r0, r0
 80007fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000802:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000806:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800080a:	f43f aed8 	beq.w	80005be <__adddf3+0xe6>
 800080e:	f04f 0203 	mov.w	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000826:	f1c2 0320 	rsb	r3, r2, #32
 800082a:	fa00 fc03 	lsl.w	ip, r0, r3
 800082e:	fa20 f002 	lsr.w	r0, r0, r2
 8000832:	fa01 fe03 	lsl.w	lr, r1, r3
 8000836:	ea40 000e 	orr.w	r0, r0, lr
 800083a:	fa21 f102 	lsr.w	r1, r1, r2
 800083e:	4414      	add	r4, r2
 8000840:	e6bd      	b.n	80005be <__adddf3+0xe6>
 8000842:	bf00      	nop

08000844 <__aeabi_dmul>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8de 	bleq	8000a20 <__aeabi_dmul+0x1dc>
 8000864:	442c      	add	r4, r5
 8000866:	ea81 0603 	eor.w	r6, r1, r3
 800086a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800086e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000872:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000876:	bf18      	it	ne
 8000878:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800087c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000884:	d038      	beq.n	80008f8 <__aeabi_dmul+0xb4>
 8000886:	fba0 ce02 	umull	ip, lr, r0, r2
 800088a:	f04f 0500 	mov.w	r5, #0
 800088e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000892:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000896:	fbe0 e503 	umlal	lr, r5, r0, r3
 800089a:	f04f 0600 	mov.w	r6, #0
 800089e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008a2:	f09c 0f00 	teq	ip, #0
 80008a6:	bf18      	it	ne
 80008a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80008ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008b8:	d204      	bcs.n	80008c4 <__aeabi_dmul+0x80>
 80008ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008be:	416d      	adcs	r5, r5
 80008c0:	eb46 0606 	adc.w	r6, r6, r6
 80008c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008dc:	bf88      	it	hi
 80008de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e2:	d81e      	bhi.n	8000922 <__aeabi_dmul+0xde>
 80008e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008e8:	bf08      	it	eq
 80008ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008fc:	ea46 0101 	orr.w	r1, r6, r1
 8000900:	ea40 0002 	orr.w	r0, r0, r2
 8000904:	ea81 0103 	eor.w	r1, r1, r3
 8000908:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	f300 80ab 	bgt.w	8000a7c <__aeabi_dmul+0x238>
 8000926:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800092a:	bfde      	ittt	le
 800092c:	2000      	movle	r0, #0
 800092e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000932:	bd70      	pople	{r4, r5, r6, pc}
 8000934:	f1c4 0400 	rsb	r4, r4, #0
 8000938:	3c20      	subs	r4, #32
 800093a:	da35      	bge.n	80009a8 <__aeabi_dmul+0x164>
 800093c:	340c      	adds	r4, #12
 800093e:	dc1b      	bgt.n	8000978 <__aeabi_dmul+0x134>
 8000940:	f104 0414 	add.w	r4, r4, #20
 8000944:	f1c4 0520 	rsb	r5, r4, #32
 8000948:	fa00 f305 	lsl.w	r3, r0, r5
 800094c:	fa20 f004 	lsr.w	r0, r0, r4
 8000950:	fa01 f205 	lsl.w	r2, r1, r5
 8000954:	ea40 0002 	orr.w	r0, r0, r2
 8000958:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800095c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000960:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000964:	fa21 f604 	lsr.w	r6, r1, r4
 8000968:	eb42 0106 	adc.w	r1, r2, r6
 800096c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000970:	bf08      	it	eq
 8000972:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f1c4 040c 	rsb	r4, r4, #12
 800097c:	f1c4 0520 	rsb	r5, r4, #32
 8000980:	fa00 f304 	lsl.w	r3, r0, r4
 8000984:	fa20 f005 	lsr.w	r0, r0, r5
 8000988:	fa01 f204 	lsl.w	r2, r1, r4
 800098c:	ea40 0002 	orr.w	r0, r0, r2
 8000990:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000994:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000998:	f141 0100 	adc.w	r1, r1, #0
 800099c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a0:	bf08      	it	eq
 80009a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f1c4 0520 	rsb	r5, r4, #32
 80009ac:	fa00 f205 	lsl.w	r2, r0, r5
 80009b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80009b4:	fa20 f304 	lsr.w	r3, r0, r4
 80009b8:	fa01 f205 	lsl.w	r2, r1, r5
 80009bc:	ea43 0302 	orr.w	r3, r3, r2
 80009c0:	fa21 f004 	lsr.w	r0, r1, r4
 80009c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009c8:	fa21 f204 	lsr.w	r2, r1, r4
 80009cc:	ea20 0002 	bic.w	r0, r0, r2
 80009d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009d8:	bf08      	it	eq
 80009da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f094 0f00 	teq	r4, #0
 80009e4:	d10f      	bne.n	8000a06 <__aeabi_dmul+0x1c2>
 80009e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009ea:	0040      	lsls	r0, r0, #1
 80009ec:	eb41 0101 	adc.w	r1, r1, r1
 80009f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f4:	bf08      	it	eq
 80009f6:	3c01      	subeq	r4, #1
 80009f8:	d0f7      	beq.n	80009ea <__aeabi_dmul+0x1a6>
 80009fa:	ea41 0106 	orr.w	r1, r1, r6
 80009fe:	f095 0f00 	teq	r5, #0
 8000a02:	bf18      	it	ne
 8000a04:	4770      	bxne	lr
 8000a06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	eb43 0303 	adc.w	r3, r3, r3
 8000a10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a14:	bf08      	it	eq
 8000a16:	3d01      	subeq	r5, #1
 8000a18:	d0f7      	beq.n	8000a0a <__aeabi_dmul+0x1c6>
 8000a1a:	ea43 0306 	orr.w	r3, r3, r6
 8000a1e:	4770      	bx	lr
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a28:	bf18      	it	ne
 8000a2a:	ea95 0f0c 	teqne	r5, ip
 8000a2e:	d00c      	beq.n	8000a4a <__aeabi_dmul+0x206>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	d1d1      	bne.n	80009e0 <__aeabi_dmul+0x19c>
 8000a3c:	ea81 0103 	eor.w	r1, r1, r3
 8000a40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
 8000a4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a4e:	bf06      	itte	eq
 8000a50:	4610      	moveq	r0, r2
 8000a52:	4619      	moveq	r1, r3
 8000a54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a58:	d019      	beq.n	8000a8e <__aeabi_dmul+0x24a>
 8000a5a:	ea94 0f0c 	teq	r4, ip
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dmul+0x222>
 8000a60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a64:	d113      	bne.n	8000a8e <__aeabi_dmul+0x24a>
 8000a66:	ea95 0f0c 	teq	r5, ip
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_dmul+0x234>
 8000a6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a70:	bf1c      	itt	ne
 8000a72:	4610      	movne	r0, r2
 8000a74:	4619      	movne	r1, r3
 8000a76:	d10a      	bne.n	8000a8e <__aeabi_dmul+0x24a>
 8000a78:	ea81 0103 	eor.w	r1, r1, r3
 8000a7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a96:	bd70      	pop	{r4, r5, r6, pc}

08000a98 <__aeabi_ddiv>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000aa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aa6:	bf1d      	ittte	ne
 8000aa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000aac:	ea94 0f0c 	teqne	r4, ip
 8000ab0:	ea95 0f0c 	teqne	r5, ip
 8000ab4:	f000 f8a7 	bleq	8000c06 <__aeabi_ddiv+0x16e>
 8000ab8:	eba4 0405 	sub.w	r4, r4, r5
 8000abc:	ea81 0e03 	eor.w	lr, r1, r3
 8000ac0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ac8:	f000 8088 	beq.w	8000bdc <__aeabi_ddiv+0x144>
 8000acc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ad0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ad4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ad8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000adc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ae0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ae4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000ae8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000aec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000af0:	429d      	cmp	r5, r3
 8000af2:	bf08      	it	eq
 8000af4:	4296      	cmpeq	r6, r2
 8000af6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000afa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000afe:	d202      	bcs.n	8000b06 <__aeabi_ddiv+0x6e>
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b06:	1ab6      	subs	r6, r6, r2
 8000b08:	eb65 0503 	sbc.w	r5, r5, r3
 8000b0c:	085b      	lsrs	r3, r3, #1
 8000b0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b22:	bf22      	ittt	cs
 8000b24:	1ab6      	subcs	r6, r6, r2
 8000b26:	4675      	movcs	r5, lr
 8000b28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b3a:	bf22      	ittt	cs
 8000b3c:	1ab6      	subcs	r6, r6, r2
 8000b3e:	4675      	movcs	r5, lr
 8000b40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b52:	bf22      	ittt	cs
 8000b54:	1ab6      	subcs	r6, r6, r2
 8000b56:	4675      	movcs	r5, lr
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b62:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6a:	bf22      	ittt	cs
 8000b6c:	1ab6      	subcs	r6, r6, r2
 8000b6e:	4675      	movcs	r5, lr
 8000b70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b74:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b78:	d018      	beq.n	8000bac <__aeabi_ddiv+0x114>
 8000b7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b82:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b96:	d1c0      	bne.n	8000b1a <__aeabi_ddiv+0x82>
 8000b98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b9c:	d10b      	bne.n	8000bb6 <__aeabi_ddiv+0x11e>
 8000b9e:	ea41 0100 	orr.w	r1, r1, r0
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000baa:	e7b6      	b.n	8000b1a <__aeabi_ddiv+0x82>
 8000bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bb0:	bf04      	itt	eq
 8000bb2:	4301      	orreq	r1, r0
 8000bb4:	2000      	moveq	r0, #0
 8000bb6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bba:	bf88      	it	hi
 8000bbc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bc0:	f63f aeaf 	bhi.w	8000922 <__aeabi_dmul+0xde>
 8000bc4:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bc8:	bf04      	itt	eq
 8000bca:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bd2:	f150 0000 	adcs.w	r0, r0, #0
 8000bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bda:	bd70      	pop	{r4, r5, r6, pc}
 8000bdc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000be0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000be4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000be8:	bfc2      	ittt	gt
 8000bea:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bf2:	bd70      	popgt	{r4, r5, r6, pc}
 8000bf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf8:	f04f 0e00 	mov.w	lr, #0
 8000bfc:	3c01      	subs	r4, #1
 8000bfe:	e690      	b.n	8000922 <__aeabi_dmul+0xde>
 8000c00:	ea45 0e06 	orr.w	lr, r5, r6
 8000c04:	e68d      	b.n	8000922 <__aeabi_dmul+0xde>
 8000c06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c0a:	ea94 0f0c 	teq	r4, ip
 8000c0e:	bf08      	it	eq
 8000c10:	ea95 0f0c 	teqeq	r5, ip
 8000c14:	f43f af3b 	beq.w	8000a8e <__aeabi_dmul+0x24a>
 8000c18:	ea94 0f0c 	teq	r4, ip
 8000c1c:	d10a      	bne.n	8000c34 <__aeabi_ddiv+0x19c>
 8000c1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c22:	f47f af34 	bne.w	8000a8e <__aeabi_dmul+0x24a>
 8000c26:	ea95 0f0c 	teq	r5, ip
 8000c2a:	f47f af25 	bne.w	8000a78 <__aeabi_dmul+0x234>
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	e72c      	b.n	8000a8e <__aeabi_dmul+0x24a>
 8000c34:	ea95 0f0c 	teq	r5, ip
 8000c38:	d106      	bne.n	8000c48 <__aeabi_ddiv+0x1b0>
 8000c3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c3e:	f43f aefd 	beq.w	8000a3c <__aeabi_dmul+0x1f8>
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	e722      	b.n	8000a8e <__aeabi_dmul+0x24a>
 8000c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c4c:	bf18      	it	ne
 8000c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c52:	f47f aec5 	bne.w	80009e0 <__aeabi_dmul+0x19c>
 8000c56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c5a:	f47f af0d 	bne.w	8000a78 <__aeabi_dmul+0x234>
 8000c5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c62:	f47f aeeb 	bne.w	8000a3c <__aeabi_dmul+0x1f8>
 8000c66:	e712      	b.n	8000a8e <__aeabi_dmul+0x24a>

08000c68 <__gedf2>:
 8000c68:	f04f 3cff 	mov.w	ip, #4294967295
 8000c6c:	e006      	b.n	8000c7c <__cmpdf2+0x4>
 8000c6e:	bf00      	nop

08000c70 <__ledf2>:
 8000c70:	f04f 0c01 	mov.w	ip, #1
 8000c74:	e002      	b.n	8000c7c <__cmpdf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__cmpdf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c8c:	bf18      	it	ne
 8000c8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c92:	d01b      	beq.n	8000ccc <__cmpdf2+0x54>
 8000c94:	b001      	add	sp, #4
 8000c96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000c9a:	bf0c      	ite	eq
 8000c9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ca0:	ea91 0f03 	teqne	r1, r3
 8000ca4:	bf02      	ittt	eq
 8000ca6:	ea90 0f02 	teqeq	r0, r2
 8000caa:	2000      	moveq	r0, #0
 8000cac:	4770      	bxeq	lr
 8000cae:	f110 0f00 	cmn.w	r0, #0
 8000cb2:	ea91 0f03 	teq	r1, r3
 8000cb6:	bf58      	it	pl
 8000cb8:	4299      	cmppl	r1, r3
 8000cba:	bf08      	it	eq
 8000cbc:	4290      	cmpeq	r0, r2
 8000cbe:	bf2c      	ite	cs
 8000cc0:	17d8      	asrcs	r0, r3, #31
 8000cc2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cc6:	f040 0001 	orr.w	r0, r0, #1
 8000cca:	4770      	bx	lr
 8000ccc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cd4:	d102      	bne.n	8000cdc <__cmpdf2+0x64>
 8000cd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cda:	d107      	bne.n	8000cec <__cmpdf2+0x74>
 8000cdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ce0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ce4:	d1d6      	bne.n	8000c94 <__cmpdf2+0x1c>
 8000ce6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cea:	d0d3      	beq.n	8000c94 <__cmpdf2+0x1c>
 8000cec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_cdrcmple>:
 8000cf4:	4684      	mov	ip, r0
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	4662      	mov	r2, ip
 8000cfa:	468c      	mov	ip, r1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4663      	mov	r3, ip
 8000d00:	e000      	b.n	8000d04 <__aeabi_cdcmpeq>
 8000d02:	bf00      	nop

08000d04 <__aeabi_cdcmpeq>:
 8000d04:	b501      	push	{r0, lr}
 8000d06:	f7ff ffb7 	bl	8000c78 <__cmpdf2>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	bf48      	it	mi
 8000d0e:	f110 0f00 	cmnmi.w	r0, #0
 8000d12:	bd01      	pop	{r0, pc}

08000d14 <__aeabi_dcmpeq>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff fff4 	bl	8000d04 <__aeabi_cdcmpeq>
 8000d1c:	bf0c      	ite	eq
 8000d1e:	2001      	moveq	r0, #1
 8000d20:	2000      	movne	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_dcmplt>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffea 	bl	8000d04 <__aeabi_cdcmpeq>
 8000d30:	bf34      	ite	cc
 8000d32:	2001      	movcc	r0, #1
 8000d34:	2000      	movcs	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_dcmple>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffe0 	bl	8000d04 <__aeabi_cdcmpeq>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_dcmpge>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffce 	bl	8000cf4 <__aeabi_cdrcmple>
 8000d58:	bf94      	ite	ls
 8000d5a:	2001      	movls	r0, #1
 8000d5c:	2000      	movhi	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_dcmpgt>:
 8000d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d68:	f7ff ffc4 	bl	8000cf4 <__aeabi_cdrcmple>
 8000d6c:	bf34      	ite	cc
 8000d6e:	2001      	movcc	r0, #1
 8000d70:	2000      	movcs	r0, #0
 8000d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d76:	bf00      	nop

08000d78 <__aeabi_dcmpun>:
 8000d78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d80:	d102      	bne.n	8000d88 <__aeabi_dcmpun+0x10>
 8000d82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d86:	d10a      	bne.n	8000d9e <__aeabi_dcmpun+0x26>
 8000d88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d90:	d102      	bne.n	8000d98 <__aeabi_dcmpun+0x20>
 8000d92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d96:	d102      	bne.n	8000d9e <__aeabi_dcmpun+0x26>
 8000d98:	f04f 0000 	mov.w	r0, #0
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0001 	mov.w	r0, #1
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_d2iz>:
 8000da4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000da8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dac:	d215      	bcs.n	8000dda <__aeabi_d2iz+0x36>
 8000dae:	d511      	bpl.n	8000dd4 <__aeabi_d2iz+0x30>
 8000db0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000db4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000db8:	d912      	bls.n	8000de0 <__aeabi_d2iz+0x3c>
 8000dba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dca:	fa23 f002 	lsr.w	r0, r3, r2
 8000dce:	bf18      	it	ne
 8000dd0:	4240      	negne	r0, r0
 8000dd2:	4770      	bx	lr
 8000dd4:	f04f 0000 	mov.w	r0, #0
 8000dd8:	4770      	bx	lr
 8000dda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dde:	d105      	bne.n	8000dec <__aeabi_d2iz+0x48>
 8000de0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000de4:	bf08      	it	eq
 8000de6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dea:	4770      	bx	lr
 8000dec:	f04f 0000 	mov.w	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_d2uiz>:
 8000df4:	004a      	lsls	r2, r1, #1
 8000df6:	d211      	bcs.n	8000e1c <__aeabi_d2uiz+0x28>
 8000df8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dfc:	d211      	bcs.n	8000e22 <__aeabi_d2uiz+0x2e>
 8000dfe:	d50d      	bpl.n	8000e1c <__aeabi_d2uiz+0x28>
 8000e00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e08:	d40e      	bmi.n	8000e28 <__aeabi_d2uiz+0x34>
 8000e0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e16:	fa23 f002 	lsr.w	r0, r3, r2
 8000e1a:	4770      	bx	lr
 8000e1c:	f04f 0000 	mov.w	r0, #0
 8000e20:	4770      	bx	lr
 8000e22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e26:	d102      	bne.n	8000e2e <__aeabi_d2uiz+0x3a>
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	4770      	bx	lr
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_d2f>:
 8000e34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000e3c:	bf24      	itt	cs
 8000e3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000e42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000e46:	d90d      	bls.n	8000e64 <__aeabi_d2f+0x30>
 8000e48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000e58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e5c:	bf08      	it	eq
 8000e5e:	f020 0001 	biceq.w	r0, r0, #1
 8000e62:	4770      	bx	lr
 8000e64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000e68:	d121      	bne.n	8000eae <__aeabi_d2f+0x7a>
 8000e6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000e6e:	bfbc      	itt	lt
 8000e70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000e74:	4770      	bxlt	lr
 8000e76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000e7e:	f1c2 0218 	rsb	r2, r2, #24
 8000e82:	f1c2 0c20 	rsb	ip, r2, #32
 8000e86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000e8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000e8e:	bf18      	it	ne
 8000e90:	f040 0001 	orrne.w	r0, r0, #1
 8000e94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000e9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ea0:	ea40 000c 	orr.w	r0, r0, ip
 8000ea4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ea8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000eac:	e7cc      	b.n	8000e48 <__aeabi_d2f+0x14>
 8000eae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000eb2:	d107      	bne.n	8000ec4 <__aeabi_d2f+0x90>
 8000eb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000eb8:	bf1e      	ittt	ne
 8000eba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ebe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ec2:	4770      	bxne	lr
 8000ec4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_uldivmod>:
 8000ed4:	b953      	cbnz	r3, 8000eec <__aeabi_uldivmod+0x18>
 8000ed6:	b94a      	cbnz	r2, 8000eec <__aeabi_uldivmod+0x18>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bf08      	it	eq
 8000edc:	2800      	cmpeq	r0, #0
 8000ede:	bf1c      	itt	ne
 8000ee0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ee4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee8:	f000 b9b8 	b.w	800125c <__aeabi_idiv0>
 8000eec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ef0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ef4:	f000 f83c 	bl	8000f70 <__udivmoddi4>
 8000ef8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f00:	b004      	add	sp, #16
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_d2lz>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	2200      	movs	r2, #0
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	f7ff ff0b 	bl	8000d28 <__aeabi_dcmplt>
 8000f12:	b928      	cbnz	r0, 8000f20 <__aeabi_d2lz+0x1c>
 8000f14:	4620      	mov	r0, r4
 8000f16:	4629      	mov	r1, r5
 8000f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f1c:	f000 b80a 	b.w	8000f34 <__aeabi_d2ulz>
 8000f20:	4620      	mov	r0, r4
 8000f22:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f26:	f000 f805 	bl	8000f34 <__aeabi_d2ulz>
 8000f2a:	4240      	negs	r0, r0
 8000f2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f30:	bd38      	pop	{r3, r4, r5, pc}
 8000f32:	bf00      	nop

08000f34 <__aeabi_d2ulz>:
 8000f34:	b5d0      	push	{r4, r6, r7, lr}
 8000f36:	2200      	movs	r2, #0
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <__aeabi_d2ulz+0x34>)
 8000f3a:	4606      	mov	r6, r0
 8000f3c:	460f      	mov	r7, r1
 8000f3e:	f7ff fc81 	bl	8000844 <__aeabi_dmul>
 8000f42:	f7ff ff57 	bl	8000df4 <__aeabi_d2uiz>
 8000f46:	4604      	mov	r4, r0
 8000f48:	f7ff fc02 	bl	8000750 <__aeabi_ui2d>
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <__aeabi_d2ulz+0x38>)
 8000f50:	f7ff fc78 	bl	8000844 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4630      	mov	r0, r6
 8000f5a:	4639      	mov	r1, r7
 8000f5c:	f7ff faba 	bl	80004d4 <__aeabi_dsub>
 8000f60:	f7ff ff48 	bl	8000df4 <__aeabi_d2uiz>
 8000f64:	4621      	mov	r1, r4
 8000f66:	bdd0      	pop	{r4, r6, r7, pc}
 8000f68:	3df00000 	.word	0x3df00000
 8000f6c:	41f00000 	.word	0x41f00000

08000f70 <__udivmoddi4>:
 8000f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000f76:	4604      	mov	r4, r0
 8000f78:	460f      	mov	r7, r1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d148      	bne.n	8001010 <__udivmoddi4+0xa0>
 8000f7e:	428a      	cmp	r2, r1
 8000f80:	4694      	mov	ip, r2
 8000f82:	d961      	bls.n	8001048 <__udivmoddi4+0xd8>
 8000f84:	fab2 f382 	clz	r3, r2
 8000f88:	b143      	cbz	r3, 8000f9c <__udivmoddi4+0x2c>
 8000f8a:	f1c3 0120 	rsb	r1, r3, #32
 8000f8e:	409f      	lsls	r7, r3
 8000f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f94:	409c      	lsls	r4, r3
 8000f96:	fa20 f101 	lsr.w	r1, r0, r1
 8000f9a:	430f      	orrs	r7, r1
 8000f9c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	0c22      	lsrs	r2, r4, #16
 8000fa6:	fbb7 f6f1 	udiv	r6, r7, r1
 8000faa:	fb01 7716 	mls	r7, r1, r6, r7
 8000fae:	fb06 f00e 	mul.w	r0, r6, lr
 8000fb2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000fb6:	4290      	cmp	r0, r2
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x5c>
 8000fba:	eb1c 0202 	adds.w	r2, ip, r2
 8000fbe:	f106 37ff 	add.w	r7, r6, #4294967295
 8000fc2:	d202      	bcs.n	8000fca <__udivmoddi4+0x5a>
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	f200 8137 	bhi.w	8001238 <__udivmoddi4+0x2c8>
 8000fca:	463e      	mov	r6, r7
 8000fcc:	1a12      	subs	r2, r2, r0
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	fbb2 f0f1 	udiv	r0, r2, r1
 8000fd4:	fb01 2210 	mls	r2, r1, r0, r2
 8000fd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fe0:	45a6      	cmp	lr, r4
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x86>
 8000fe4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fec:	d202      	bcs.n	8000ff4 <__udivmoddi4+0x84>
 8000fee:	45a6      	cmp	lr, r4
 8000ff0:	f200 811c 	bhi.w	800122c <__udivmoddi4+0x2bc>
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ffa:	eba4 040e 	sub.w	r4, r4, lr
 8000ffe:	2600      	movs	r6, #0
 8001000:	b11d      	cbz	r5, 800100a <__udivmoddi4+0x9a>
 8001002:	40dc      	lsrs	r4, r3
 8001004:	2300      	movs	r3, #0
 8001006:	e9c5 4300 	strd	r4, r3, [r5]
 800100a:	4631      	mov	r1, r6
 800100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001010:	428b      	cmp	r3, r1
 8001012:	d909      	bls.n	8001028 <__udivmoddi4+0xb8>
 8001014:	2d00      	cmp	r5, #0
 8001016:	f000 80fd 	beq.w	8001214 <__udivmoddi4+0x2a4>
 800101a:	2600      	movs	r6, #0
 800101c:	e9c5 0100 	strd	r0, r1, [r5]
 8001020:	4630      	mov	r0, r6
 8001022:	4631      	mov	r1, r6
 8001024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001028:	fab3 f683 	clz	r6, r3
 800102c:	2e00      	cmp	r6, #0
 800102e:	d14b      	bne.n	80010c8 <__udivmoddi4+0x158>
 8001030:	428b      	cmp	r3, r1
 8001032:	f0c0 80f2 	bcc.w	800121a <__udivmoddi4+0x2aa>
 8001036:	4282      	cmp	r2, r0
 8001038:	f240 80ef 	bls.w	800121a <__udivmoddi4+0x2aa>
 800103c:	4630      	mov	r0, r6
 800103e:	2d00      	cmp	r5, #0
 8001040:	d0e3      	beq.n	800100a <__udivmoddi4+0x9a>
 8001042:	e9c5 4700 	strd	r4, r7, [r5]
 8001046:	e7e0      	b.n	800100a <__udivmoddi4+0x9a>
 8001048:	b902      	cbnz	r2, 800104c <__udivmoddi4+0xdc>
 800104a:	deff      	udf	#255	; 0xff
 800104c:	fab2 f382 	clz	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 809d 	bne.w	8001190 <__udivmoddi4+0x220>
 8001056:	1a89      	subs	r1, r1, r2
 8001058:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800105c:	b297      	uxth	r7, r2
 800105e:	2601      	movs	r6, #1
 8001060:	0c20      	lsrs	r0, r4, #16
 8001062:	fbb1 f2fe 	udiv	r2, r1, lr
 8001066:	fb0e 1112 	mls	r1, lr, r2, r1
 800106a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800106e:	fb07 f002 	mul.w	r0, r7, r2
 8001072:	4288      	cmp	r0, r1
 8001074:	d90f      	bls.n	8001096 <__udivmoddi4+0x126>
 8001076:	eb1c 0101 	adds.w	r1, ip, r1
 800107a:	f102 38ff 	add.w	r8, r2, #4294967295
 800107e:	bf2c      	ite	cs
 8001080:	f04f 0901 	movcs.w	r9, #1
 8001084:	f04f 0900 	movcc.w	r9, #0
 8001088:	4288      	cmp	r0, r1
 800108a:	d903      	bls.n	8001094 <__udivmoddi4+0x124>
 800108c:	f1b9 0f00 	cmp.w	r9, #0
 8001090:	f000 80cf 	beq.w	8001232 <__udivmoddi4+0x2c2>
 8001094:	4642      	mov	r2, r8
 8001096:	1a09      	subs	r1, r1, r0
 8001098:	b2a4      	uxth	r4, r4
 800109a:	fbb1 f0fe 	udiv	r0, r1, lr
 800109e:	fb0e 1110 	mls	r1, lr, r0, r1
 80010a2:	fb00 f707 	mul.w	r7, r0, r7
 80010a6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010aa:	42a7      	cmp	r7, r4
 80010ac:	d908      	bls.n	80010c0 <__udivmoddi4+0x150>
 80010ae:	eb1c 0404 	adds.w	r4, ip, r4
 80010b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010b6:	d202      	bcs.n	80010be <__udivmoddi4+0x14e>
 80010b8:	42a7      	cmp	r7, r4
 80010ba:	f200 80b4 	bhi.w	8001226 <__udivmoddi4+0x2b6>
 80010be:	4608      	mov	r0, r1
 80010c0:	1be4      	subs	r4, r4, r7
 80010c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80010c6:	e79b      	b.n	8001000 <__udivmoddi4+0x90>
 80010c8:	f1c6 0720 	rsb	r7, r6, #32
 80010cc:	40b3      	lsls	r3, r6
 80010ce:	fa01 f406 	lsl.w	r4, r1, r6
 80010d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80010d6:	40f9      	lsrs	r1, r7
 80010d8:	40b2      	lsls	r2, r6
 80010da:	ea4c 0c03 	orr.w	ip, ip, r3
 80010de:	fa20 f307 	lsr.w	r3, r0, r7
 80010e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010e6:	431c      	orrs	r4, r3
 80010e8:	fa1f fe8c 	uxth.w	lr, ip
 80010ec:	fa00 f306 	lsl.w	r3, r0, r6
 80010f0:	0c20      	lsrs	r0, r4, #16
 80010f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80010f6:	fb09 1118 	mls	r1, r9, r8, r1
 80010fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010fe:	fb08 f00e 	mul.w	r0, r8, lr
 8001102:	4288      	cmp	r0, r1
 8001104:	d90f      	bls.n	8001126 <__udivmoddi4+0x1b6>
 8001106:	eb1c 0101 	adds.w	r1, ip, r1
 800110a:	f108 3aff 	add.w	sl, r8, #4294967295
 800110e:	bf2c      	ite	cs
 8001110:	f04f 0b01 	movcs.w	fp, #1
 8001114:	f04f 0b00 	movcc.w	fp, #0
 8001118:	4288      	cmp	r0, r1
 800111a:	d903      	bls.n	8001124 <__udivmoddi4+0x1b4>
 800111c:	f1bb 0f00 	cmp.w	fp, #0
 8001120:	f000 808d 	beq.w	800123e <__udivmoddi4+0x2ce>
 8001124:	46d0      	mov	r8, sl
 8001126:	1a09      	subs	r1, r1, r0
 8001128:	b2a4      	uxth	r4, r4
 800112a:	fbb1 f0f9 	udiv	r0, r1, r9
 800112e:	fb09 1110 	mls	r1, r9, r0, r1
 8001132:	fb00 fe0e 	mul.w	lr, r0, lr
 8001136:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800113a:	458e      	cmp	lr, r1
 800113c:	d907      	bls.n	800114e <__udivmoddi4+0x1de>
 800113e:	eb1c 0101 	adds.w	r1, ip, r1
 8001142:	f100 34ff 	add.w	r4, r0, #4294967295
 8001146:	d201      	bcs.n	800114c <__udivmoddi4+0x1dc>
 8001148:	458e      	cmp	lr, r1
 800114a:	d87f      	bhi.n	800124c <__udivmoddi4+0x2dc>
 800114c:	4620      	mov	r0, r4
 800114e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001152:	eba1 010e 	sub.w	r1, r1, lr
 8001156:	fba0 9802 	umull	r9, r8, r0, r2
 800115a:	4541      	cmp	r1, r8
 800115c:	464c      	mov	r4, r9
 800115e:	46c6      	mov	lr, r8
 8001160:	d302      	bcc.n	8001168 <__udivmoddi4+0x1f8>
 8001162:	d106      	bne.n	8001172 <__udivmoddi4+0x202>
 8001164:	454b      	cmp	r3, r9
 8001166:	d204      	bcs.n	8001172 <__udivmoddi4+0x202>
 8001168:	3801      	subs	r0, #1
 800116a:	ebb9 0402 	subs.w	r4, r9, r2
 800116e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8001172:	2d00      	cmp	r5, #0
 8001174:	d070      	beq.n	8001258 <__udivmoddi4+0x2e8>
 8001176:	1b1a      	subs	r2, r3, r4
 8001178:	eb61 010e 	sbc.w	r1, r1, lr
 800117c:	fa22 f306 	lsr.w	r3, r2, r6
 8001180:	fa01 f707 	lsl.w	r7, r1, r7
 8001184:	40f1      	lsrs	r1, r6
 8001186:	2600      	movs	r6, #0
 8001188:	431f      	orrs	r7, r3
 800118a:	e9c5 7100 	strd	r7, r1, [r5]
 800118e:	e73c      	b.n	800100a <__udivmoddi4+0x9a>
 8001190:	fa02 fc03 	lsl.w	ip, r2, r3
 8001194:	f1c3 0020 	rsb	r0, r3, #32
 8001198:	fa01 f203 	lsl.w	r2, r1, r3
 800119c:	fa21 f600 	lsr.w	r6, r1, r0
 80011a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011a4:	fa24 f100 	lsr.w	r1, r4, r0
 80011a8:	fa1f f78c 	uxth.w	r7, ip
 80011ac:	409c      	lsls	r4, r3
 80011ae:	4311      	orrs	r1, r2
 80011b0:	fbb6 f0fe 	udiv	r0, r6, lr
 80011b4:	0c0a      	lsrs	r2, r1, #16
 80011b6:	fb0e 6610 	mls	r6, lr, r0, r6
 80011ba:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80011be:	fb00 f607 	mul.w	r6, r0, r7
 80011c2:	4296      	cmp	r6, r2
 80011c4:	d90e      	bls.n	80011e4 <__udivmoddi4+0x274>
 80011c6:	eb1c 0202 	adds.w	r2, ip, r2
 80011ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80011ce:	bf2c      	ite	cs
 80011d0:	f04f 0901 	movcs.w	r9, #1
 80011d4:	f04f 0900 	movcc.w	r9, #0
 80011d8:	4296      	cmp	r6, r2
 80011da:	d902      	bls.n	80011e2 <__udivmoddi4+0x272>
 80011dc:	f1b9 0f00 	cmp.w	r9, #0
 80011e0:	d031      	beq.n	8001246 <__udivmoddi4+0x2d6>
 80011e2:	4640      	mov	r0, r8
 80011e4:	1b92      	subs	r2, r2, r6
 80011e6:	b289      	uxth	r1, r1
 80011e8:	fbb2 f6fe 	udiv	r6, r2, lr
 80011ec:	fb0e 2216 	mls	r2, lr, r6, r2
 80011f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80011f4:	fb06 f207 	mul.w	r2, r6, r7
 80011f8:	428a      	cmp	r2, r1
 80011fa:	d907      	bls.n	800120c <__udivmoddi4+0x29c>
 80011fc:	eb1c 0101 	adds.w	r1, ip, r1
 8001200:	f106 38ff 	add.w	r8, r6, #4294967295
 8001204:	d201      	bcs.n	800120a <__udivmoddi4+0x29a>
 8001206:	428a      	cmp	r2, r1
 8001208:	d823      	bhi.n	8001252 <__udivmoddi4+0x2e2>
 800120a:	4646      	mov	r6, r8
 800120c:	1a89      	subs	r1, r1, r2
 800120e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001212:	e725      	b.n	8001060 <__udivmoddi4+0xf0>
 8001214:	462e      	mov	r6, r5
 8001216:	4628      	mov	r0, r5
 8001218:	e6f7      	b.n	800100a <__udivmoddi4+0x9a>
 800121a:	1a84      	subs	r4, r0, r2
 800121c:	eb61 0303 	sbc.w	r3, r1, r3
 8001220:	2001      	movs	r0, #1
 8001222:	461f      	mov	r7, r3
 8001224:	e70b      	b.n	800103e <__udivmoddi4+0xce>
 8001226:	4464      	add	r4, ip
 8001228:	3802      	subs	r0, #2
 800122a:	e749      	b.n	80010c0 <__udivmoddi4+0x150>
 800122c:	4464      	add	r4, ip
 800122e:	3802      	subs	r0, #2
 8001230:	e6e1      	b.n	8000ff6 <__udivmoddi4+0x86>
 8001232:	3a02      	subs	r2, #2
 8001234:	4461      	add	r1, ip
 8001236:	e72e      	b.n	8001096 <__udivmoddi4+0x126>
 8001238:	3e02      	subs	r6, #2
 800123a:	4462      	add	r2, ip
 800123c:	e6c6      	b.n	8000fcc <__udivmoddi4+0x5c>
 800123e:	f1a8 0802 	sub.w	r8, r8, #2
 8001242:	4461      	add	r1, ip
 8001244:	e76f      	b.n	8001126 <__udivmoddi4+0x1b6>
 8001246:	3802      	subs	r0, #2
 8001248:	4462      	add	r2, ip
 800124a:	e7cb      	b.n	80011e4 <__udivmoddi4+0x274>
 800124c:	3802      	subs	r0, #2
 800124e:	4461      	add	r1, ip
 8001250:	e77d      	b.n	800114e <__udivmoddi4+0x1de>
 8001252:	3e02      	subs	r6, #2
 8001254:	4461      	add	r1, ip
 8001256:	e7d9      	b.n	800120c <__udivmoddi4+0x29c>
 8001258:	462e      	mov	r6, r5
 800125a:	e6d6      	b.n	800100a <__udivmoddi4+0x9a>

0800125c <__aeabi_idiv0>:
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800126c:	2334      	movs	r3, #52	; 0x34
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <tx_application_define+0x50>)
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <tx_application_define+0x54>)
 8001274:	4910      	ldr	r1, [pc, #64]	; (80012b8 <tx_application_define+0x58>)
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <tx_application_define+0x5c>)
 8001278:	f01c fda0 	bl	801ddbc <_txe_byte_pool_create>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <tx_application_define+0x2c>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
	  shut_it_all_down();
 8001282:	f00d fb01 	bl	800e888 <shut_it_all_down>
	  HAL_NVIC_SystemReset();
 8001286:	f010 fe0e 	bl	8011ea6 <HAL_NVIC_SystemReset>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800128a:	e00c      	b.n	80012a6 <tx_application_define+0x46>
    memory_ptr = (VOID *)&tx_app_byte_pool;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <tx_application_define+0x5c>)
 800128e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f00c f8bf 	bl	800d414 <App_ThreadX_Init>
 8001296:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <tx_application_define+0x46>
    	shut_it_all_down();
 800129e:	f00d faf3 	bl	800e888 <shut_it_all_down>
	  	HAL_NVIC_SystemReset();
 80012a2:	f010 fe00 	bl	8011ea6 <HAL_NVIC_SystemReset>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	000b5a60 	.word	0x000b5a60
 80012b4:	20000228 	.word	0x20000228
 80012b8:	080234e8 	.word	0x080234e8
 80012bc:	200234c8 	.word	0x200234c8

080012c0 <c_FFTImplementationCallback_r2b>:
static void c_FFTImplementationCallback_r2b(const emxArray_creal32_T *x,
                                            int unsigned_nRows,
                                            const emxArray_real32_T *costab,
                                            const emxArray_real32_T *sintab,
                                            emxArray_creal32_T *y)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b098      	sub	sp, #96	; 0x60
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
  int iy;
  int j;
  int ju;
  int k;
  int nRowsD2;
  sintab_data = sintab->data;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  costab_data = costab->data;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
  x_data = x->data;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  iy = y->size[0];
 80012e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  y->size[0] = unsigned_nRows;
 80012e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(y, iy);
 80012f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80012f2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80012f4:	f006 ff37 	bl	8008166 <emxEnsureCapacity_creal32_T>
  y_data = y->data;
 80012f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (unsigned_nRows > x->size[0]) {
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	429a      	cmp	r2, r3
 8001308:	dd26      	ble.n	8001358 <c_FFTImplementationCallback_r2b+0x98>
    iy = y->size[0];
 800130a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
    y->size[0] = unsigned_nRows;
 8001312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(y, iy);
 800131a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800131c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800131e:	f006 ff22 	bl	8008166 <emxEnsureCapacity_creal32_T>
    y_data = y->data;
 8001322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (iy = 0; iy < unsigned_nRows; iy++) {
 8001328:	2300      	movs	r3, #0
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800132c:	e010      	b.n	8001350 <c_FFTImplementationCallback_r2b+0x90>
      y_data[iy].re = 0.0F;
 800132e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001334:	4413      	add	r3, r2
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
      y_data[iy].im = 0.0F;
 800133c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001342:	4413      	add	r3, r2
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
    for (iy = 0; iy < unsigned_nRows; iy++) {
 800134a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800134c:	3301      	adds	r3, #1
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001350:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbea      	blt.n	800132e <c_FFTImplementationCallback_r2b+0x6e>
    }
  }
  iDelta2 = x->size[0];
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	657b      	str	r3, [r7, #84]	; 0x54
  if (iDelta2 > unsigned_nRows) {
 8001360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	429a      	cmp	r2, r3
 8001366:	dd01      	ble.n	800136c <c_FFTImplementationCallback_r2b+0xac>
    iDelta2 = unsigned_nRows;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	657b      	str	r3, [r7, #84]	; 0x54
  }
  iheight = unsigned_nRows - 2;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3b02      	subs	r3, #2
 8001370:	653b      	str	r3, [r7, #80]	; 0x50
  nRowsD2 = unsigned_nRows / 2;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	0fda      	lsrs	r2, r3, #31
 8001376:	4413      	add	r3, r2
 8001378:	105b      	asrs	r3, r3, #1
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  k = nRowsD2 / 2;
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	0fda      	lsrs	r2, r3, #31
 8001380:	4413      	add	r3, r2
 8001382:	105b      	asrs	r3, r3, #1
 8001384:	643b      	str	r3, [r7, #64]	; 0x40
  iy = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
  ju = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i <= iDelta2 - 2; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	65bb      	str	r3, [r7, #88]	; 0x58
 8001392:	e02b      	b.n	80013ec <c_FFTImplementationCallback_r2b+0x12c>
    bool tst;
    y_data[iy] = x_data[i];
 8001394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800139a:	18d1      	adds	r1, r2, r3
 800139c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013a2:	4413      	add	r3, r2
 80013a4:	460a      	mov	r2, r1
 80013a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013aa:	e883 0003 	stmia.w	r3, {r0, r1}
    iy = unsigned_nRows;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    tst = true;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    while (tst) {
 80013b8:	e00f      	b.n	80013da <c_FFTImplementationCallback_r2b+0x11a>
      iy >>= 1;
 80013ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013bc:	105b      	asrs	r3, r3, #1
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c
      ju ^= iy;
 80013c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c4:	4053      	eors	r3, r2
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
      tst = ((ju & iy) == 0);
 80013c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    while (tst) {
 80013da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1eb      	bne.n	80013ba <c_FFTImplementationCallback_r2b+0xfa>
    }
    iy = ju;
 80013e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (i = 0; i <= iDelta2 - 2; i++) {
 80013e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e8:	3301      	adds	r3, #1
 80013ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80013ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dbce      	blt.n	8001394 <c_FFTImplementationCallback_r2b+0xd4>
  }
  y_data[iy] = x_data[iDelta2 - 1];
 80013f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80013fc:	3b01      	subs	r3, #1
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001402:	18d1      	adds	r1, r2, r3
 8001404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800140a:	4413      	add	r3, r2
 800140c:	460a      	mov	r2, r1
 800140e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001412:	e883 0003 	stmia.w	r3, {r0, r1}
  if (unsigned_nRows > 1) {
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	dd55      	ble.n	80014c8 <c_FFTImplementationCallback_r2b+0x208>
    for (i = 0; i <= iheight; i += 2) {
 800141c:	2300      	movs	r3, #0
 800141e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001420:	e04e      	b.n	80014c0 <c_FFTImplementationCallback_r2b+0x200>
      temp_re_tmp = y_data[i + 1].re;
 8001422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001424:	3301      	adds	r3, #1
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800142a:	4413      	add	r3, r2
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
      temp_im = y_data[i + 1].im;
 8001430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001432:	3301      	adds	r3, #1
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001438:	4413      	add	r3, r2
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
      temp_re = y_data[i].re;
 800143e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001444:	4413      	add	r3, r2
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	623b      	str	r3, [r7, #32]
      twid_re = y_data[i].im;
 800144a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001450:	4413      	add	r3, r2
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	61fb      	str	r3, [r7, #28]
      y_data[i + 1].re = temp_re - temp_re_tmp;
 8001456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001458:	3301      	adds	r3, #1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800145e:	4413      	add	r3, r2
 8001460:	ed97 7a08 	vldr	s14, [r7, #32]
 8001464:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146c:	edc3 7a00 	vstr	s15, [r3]
      y_data[i + 1].im = twid_re - temp_im;
 8001470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001472:	3301      	adds	r3, #1
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001478:	4413      	add	r3, r2
 800147a:	ed97 7a07 	vldr	s14, [r7, #28]
 800147e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001486:	edc3 7a01 	vstr	s15, [r3, #4]
      y_data[i].re = temp_re + temp_re_tmp;
 800148a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001490:	4413      	add	r3, r2
 8001492:	ed97 7a08 	vldr	s14, [r7, #32]
 8001496:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800149a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149e:	edc3 7a00 	vstr	s15, [r3]
      y_data[i].im = twid_re + temp_im;
 80014a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014a8:	4413      	add	r3, r2
 80014aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i <= iheight; i += 2) {
 80014ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014bc:	3302      	adds	r3, #2
 80014be:	65bb      	str	r3, [r7, #88]	; 0x58
 80014c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c4:	429a      	cmp	r2, r3
 80014c6:	ddac      	ble.n	8001422 <c_FFTImplementationCallback_r2b+0x162>
    }
  }
  iy = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  iDelta2 = 4;
 80014cc:	2304      	movs	r3, #4
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
  iheight = ((k - 1) << 2) + 1;
 80014d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014d2:	3b01      	subs	r3, #1
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	3301      	adds	r3, #1
 80014d8:	653b      	str	r3, [r7, #80]	; 0x50
  while (k > 0) {
 80014da:	e104      	b.n	80016e6 <c_FFTImplementationCallback_r2b+0x426>
    int b_temp_re_tmp;
    for (i = 0; i < iheight; i += iDelta2) {
 80014dc:	2300      	movs	r3, #0
 80014de:	65bb      	str	r3, [r7, #88]	; 0x58
 80014e0:	e053      	b.n	800158a <c_FFTImplementationCallback_r2b+0x2ca>
      b_temp_re_tmp = i + iy;
 80014e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e6:	4413      	add	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
      temp_re = y_data[b_temp_re_tmp].re;
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	623b      	str	r3, [r7, #32]
      temp_im = y_data[b_temp_re_tmp].im;
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014fc:	4413      	add	r3, r2
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
      y_data[b_temp_re_tmp].re = y_data[i].re - temp_re;
 8001502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001508:	4413      	add	r3, r2
 800150a:	ed93 7a00 	vldr	s14, [r3]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001514:	4413      	add	r3, r2
 8001516:	edd7 7a08 	vldr	s15, [r7, #32]
 800151a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151e:	edc3 7a00 	vstr	s15, [r3]
      y_data[b_temp_re_tmp].im = y_data[i].im - temp_im;
 8001522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001528:	4413      	add	r3, r2
 800152a:	ed93 7a01 	vldr	s14, [r3, #4]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001534:	4413      	add	r3, r2
 8001536:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	edc3 7a01 	vstr	s15, [r3, #4]
      y_data[i].re += temp_re;
 8001542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001548:	4413      	add	r3, r2
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001554:	4413      	add	r3, r2
 8001556:	edd7 7a08 	vldr	s15, [r7, #32]
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	edc3 7a00 	vstr	s15, [r3]
      y_data[i].im += temp_im;
 8001562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001568:	4413      	add	r3, r2
 800156a:	ed93 7a01 	vldr	s14, [r3, #4]
 800156e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001574:	4413      	add	r3, r2
 8001576:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < iheight; i += iDelta2) {
 8001582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001586:	4413      	add	r3, r2
 8001588:	65bb      	str	r3, [r7, #88]	; 0x58
 800158a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800158c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800158e:	429a      	cmp	r2, r3
 8001590:	dba7      	blt.n	80014e2 <c_FFTImplementationCallback_r2b+0x222>
    }
    ju = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = k; j < nRowsD2; j += k) {
 8001596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001598:	64bb      	str	r3, [r7, #72]	; 0x48
 800159a:	e091      	b.n	80016c0 <c_FFTImplementationCallback_r2b+0x400>
      float twid_im;
      int ihi;
      twid_re = costab_data[j];
 800159c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	61fb      	str	r3, [r7, #28]
      twid_im = sintab_data[j];
 80015a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015ae:	4413      	add	r3, r2
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	61bb      	str	r3, [r7, #24]
      i = ju;
 80015b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b6:	65bb      	str	r3, [r7, #88]	; 0x58
      ihi = ju + iheight;
 80015b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015bc:	4413      	add	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
      while (i < ihi) {
 80015c0:	e073      	b.n	80016aa <c_FFTImplementationCallback_r2b+0x3ea>
        b_temp_re_tmp = i + iy;
 80015c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015c6:	4413      	add	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp_re_tmp = y_data[b_temp_re_tmp].im;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015d0:	4413      	add	r3, r2
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
        temp_im = y_data[b_temp_re_tmp].re;
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015dc:	4413      	add	r3, r2
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
        temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
 80015e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80015e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ee:	edd7 6a06 	vldr	s13, [r7, #24]
 80015f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fe:	edc7 7a08 	vstr	s15, [r7, #32]
        temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
 8001602:	ed97 7a07 	vldr	s14, [r7, #28]
 8001606:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800160a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001612:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        y_data[b_temp_re_tmp].re = y_data[i].re - temp_re;
 8001622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001628:	4413      	add	r3, r2
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001634:	4413      	add	r3, r2
 8001636:	edd7 7a08 	vldr	s15, [r7, #32]
 800163a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163e:	edc3 7a00 	vstr	s15, [r3]
        y_data[b_temp_re_tmp].im = y_data[i].im - temp_im;
 8001642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001648:	4413      	add	r3, r2
 800164a:	ed93 7a01 	vldr	s14, [r3, #4]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001654:	4413      	add	r3, r2
 8001656:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800165a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165e:	edc3 7a01 	vstr	s15, [r3, #4]
        y_data[i].re += temp_re;
 8001662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001668:	4413      	add	r3, r2
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001674:	4413      	add	r3, r2
 8001676:	edd7 7a08 	vldr	s15, [r7, #32]
 800167a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167e:	edc3 7a00 	vstr	s15, [r3]
        y_data[i].im += temp_im;
 8001682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001688:	4413      	add	r3, r2
 800168a:	ed93 7a01 	vldr	s14, [r3, #4]
 800168e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001694:	4413      	add	r3, r2
 8001696:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800169a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169e:	edc3 7a01 	vstr	s15, [r3, #4]
        i += iDelta2;
 80016a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	4413      	add	r3, r2
 80016a8:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ihi) {
 80016aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	db87      	blt.n	80015c2 <c_FFTImplementationCallback_r2b+0x302>
      }
      ju++;
 80016b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b4:	3301      	adds	r3, #1
 80016b6:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = k; j < nRowsD2; j += k) {
 80016b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016bc:	4413      	add	r3, r2
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f6ff af69 	blt.w	800159c <c_FFTImplementationCallback_r2b+0x2dc>
    }
    k /= 2;
 80016ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016cc:	0fda      	lsrs	r2, r3, #31
 80016ce:	4413      	add	r3, r2
 80016d0:	105b      	asrs	r3, r3, #1
 80016d2:	643b      	str	r3, [r7, #64]	; 0x40
    iy = iDelta2;
 80016d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    iDelta2 += iDelta2;
 80016d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	657b      	str	r3, [r7, #84]	; 0x54
    iheight -= iy;
 80016de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80016e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	653b      	str	r3, [r7, #80]	; 0x50
  while (k > 0) {
 80016e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f73f aef7 	bgt.w	80014dc <c_FFTImplementationCallback_r2b+0x21c>
  }
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	3760      	adds	r7, #96	; 0x60
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <d_FFTImplementationCallback_doH>:
static void d_FFTImplementationCallback_doH(
    const emxArray_real32_T *x, emxArray_creal32_T *y, int nrowsx, int nRows,
    int nfft, const emxArray_creal32_T *wwc, const emxArray_real32_T *costab,
    const emxArray_real32_T *sintab, const emxArray_real32_T *costabinv,
    const emxArray_real32_T *sintabinv)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	ed2d 8b02 	vpush	{d8}
 80016fe:	b0bd      	sub	sp, #244	; 0xf4
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  int nRowsD2;
  int nd2;
  int temp_re_tmp;
  int *wrapIndex_data;
  bool tst;
  sintabinv_data = sintabinv->data;
 800170a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  costabinv_data = costabinv->data;
 8001714:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  sintab_data = sintab->data;
 800171e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  costab_data = costab->data;
 8001728:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  wwc_data = wwc->data;
 8001732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  y_data = y->data;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  x_data = x->data;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  emxInit_creal32_T(&ytmp, 1);
 800174c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001750:	2101      	movs	r1, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f006 ffa5 	bl	80086a2 <emxInit_creal32_T>
  hnRows = nRows / 2;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	0fda      	lsrs	r2, r3, #31
 800175c:	4413      	add	r3, r2
 800175e:	105b      	asrs	r3, r3, #1
 8001760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  istart = ytmp->size[0];
 8001764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  ytmp->size[0] = hnRows;
 800176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001776:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(ytmp, istart);
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800177e:	4618      	mov	r0, r3
 8001780:	f006 fcf1 	bl	8008166 <emxEnsureCapacity_creal32_T>
  ytmp_data = ytmp->data;
 8001784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  if (hnRows > nrowsx) {
 800178c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	dd34      	ble.n	8001800 <d_FFTImplementationCallback_doH+0x108>
    istart = ytmp->size[0];
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    ytmp->size[0] = hnRows;
 80017a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80017a8:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(ytmp, istart);
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f006 fcd8 	bl	8008166 <emxEnsureCapacity_creal32_T>
    ytmp_data = ytmp->data;
 80017b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    for (istart = 0; istart < hnRows; istart++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017c4:	e016      	b.n	80017f4 <d_FFTImplementationCallback_doH+0xfc>
      ytmp_data[istart].re = 0.0F;
 80017c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80017d0:	4413      	add	r3, r2
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
      ytmp_data[istart].im = 0.0F;
 80017d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80017e2:	4413      	add	r3, r2
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
    for (istart = 0; istart < hnRows; istart++) {
 80017ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017ee:	3301      	adds	r3, #1
 80017f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80017f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbe2      	blt.n	80017c6 <d_FFTImplementationCallback_doH+0xce>
    }
  }
  if ((x->size[0] & 1) == 0) {
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <d_FFTImplementationCallback_doH+0x128>
    tst = true;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    ju = x->size[0];
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800181e:	e015      	b.n	800184c <d_FFTImplementationCallback_doH+0x154>
  } else if (x->size[0] >= nRows) {
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	dc06      	bgt.n	800183a <d_FFTImplementationCallback_doH+0x142>
    tst = true;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    ju = nRows;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001838:	e008      	b.n	800184c <d_FFTImplementationCallback_doH+0x154>
  } else {
    tst = false;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    ju = x->size[0] - 1;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3b01      	subs	r3, #1
 8001848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }
  emxInit_real32_T(&costab1q, 2);
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	2102      	movs	r1, #2
 8001852:	4618      	mov	r0, r3
 8001854:	f006 ff95 	bl	8008782 <emxInit_real32_T>
  if (ju > nRows) {
 8001858:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	dd02      	ble.n	8001868 <d_FFTImplementationCallback_doH+0x170>
    ju = nRows;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }
  nd2 = nRows << 1;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  temp_im = 6.28318548F / (float)nd2;
 8001870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187c:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8001b10 <d_FFTImplementationCallback_doH+0x418>
 8001880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001884:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
  j = nd2 / 2 / 2;
 8001888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800188c:	2b00      	cmp	r3, #0
 800188e:	da00      	bge.n	8001892 <d_FFTImplementationCallback_doH+0x19a>
 8001890:	3303      	adds	r3, #3
 8001892:	109b      	asrs	r3, r3, #2
 8001894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  istart = costab1q->size[0] * costab1q->size[1];
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a3a      	ldr	r2, [r7, #32]
 80018a0:	6852      	ldr	r2, [r2, #4]
 80018a2:	3204      	adds	r2, #4
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  costab1q->size[0] = 1;
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
  costab1q->size[1] = j + 1;
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80018c0:	3201      	adds	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(costab1q, istart);
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80018ca:	4618      	mov	r0, r3
 80018cc:	f006 fd17 	bl	80082fe <emxEnsureCapacity_real32_T>
  costab1q_data = costab1q->data;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  costab1q_data[0] = 1.0F;
 80018d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018e0:	601a      	str	r2, [r3, #0]
  nd2 = j / 2 - 1;
 80018e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018e6:	0fda      	lsrs	r2, r3, #31
 80018e8:	4413      	add	r3, r2
 80018ea:	105b      	asrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  for (k = 0; k <= nd2; k++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80018f8:	e01e      	b.n	8001938 <d_FFTImplementationCallback_doH+0x240>
    costab1q_data[k + 1] = cosf(temp_im * (float)(k + 1));
 80018fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018fe:	3301      	adds	r3, #1
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001908:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001914:	3301      	adds	r3, #1
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800191c:	18d4      	adds	r4, r2, r3
 800191e:	eeb0 0a67 	vmov.f32	s0, s15
 8001922:	f01c ff55 	bl	801e7d0 <cosf>
 8001926:	eef0 7a40 	vmov.f32	s15, s0
 800192a:	edc4 7a00 	vstr	s15, [r4]
  for (k = 0; k <= nd2; k++) {
 800192e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001932:	3301      	adds	r3, #1
 8001934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001938:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800193c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001940:	429a      	cmp	r2, r3
 8001942:	ddda      	ble.n	80018fa <d_FFTImplementationCallback_doH+0x202>
  }
  istart = nd2 + 2;
 8001944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001948:	3302      	adds	r3, #2
 800194a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  hszCostab = j - 1;
 800194e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001952:	3b01      	subs	r3, #1
 8001954:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  for (k = istart; k <= hszCostab; k++) {
 8001958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800195c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001960:	e01f      	b.n	80019a2 <d_FFTImplementationCallback_doH+0x2aa>
    costab1q_data[k] = sinf(temp_im * (float)(j - k));
 8001962:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001986:	18d4      	adds	r4, r2, r3
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	f01c ff68 	bl	801e860 <sinf>
 8001990:	eef0 7a40 	vmov.f32	s15, s0
 8001994:	edc4 7a00 	vstr	s15, [r4]
  for (k = istart; k <= hszCostab; k++) {
 8001998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800199c:	3301      	adds	r3, #1
 800199e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80019a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80019a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019aa:	429a      	cmp	r2, r3
 80019ac:	ddd9      	ble.n	8001962 <d_FFTImplementationCallback_doH+0x26a>
  }
  emxInit_real32_T(&b_costab, 2);
 80019ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b2:	2102      	movs	r1, #2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f006 fee4 	bl	8008782 <emxInit_real32_T>
  emxInit_real32_T(&b_sintab, 2);
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	2102      	movs	r1, #2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f006 fede 	bl	8008782 <emxInit_real32_T>
  costab1q_data[j] = 0.0F;
 80019c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019d0:	4413      	add	r3, r2
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
  j = costab1q->size[1] - 1;
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  nd2 = (costab1q->size[1] - 1) << 1;
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	3304      	adds	r3, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  istart = b_costab->size[0] * b_costab->size[1];
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019fe:	6852      	ldr	r2, [r2, #4]
 8001a00:	3204      	adds	r2, #4
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  b_costab->size[0] = 1;
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
  b_costab->size[1] = nd2 + 1;
 8001a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a1e:	3201      	adds	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_costab, istart);
 8001a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a24:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 fc68 	bl	80082fe <emxEnsureCapacity_real32_T>
  b_costab_data = b_costab->data;
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  istart = b_sintab->size[0] * b_sintab->size[1];
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	6852      	ldr	r2, [r2, #4]
 8001a40:	3204      	adds	r2, #4
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  b_sintab->size[0] = 1;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
  b_sintab->size[1] = nd2 + 1;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a5e:	3201      	adds	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_sintab, istart);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f006 fc48 	bl	80082fe <emxEnsureCapacity_real32_T>
  b_sintab_data = b_sintab->data;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  b_costab_data[0] = 1.0F;
 8001a76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a7e:	601a      	str	r2, [r3, #0]
  b_sintab_data[0] = 0.0F;
 8001a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
  for (k = 0; k < j; k++) {
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001a90:	e02d      	b.n	8001aee <d_FFTImplementationCallback_doH+0x3f6>
    b_costab_data[k + 1] = costab1q_data[k + 1];
 8001a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a96:	3301      	adds	r3, #1
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a9e:	441a      	add	r2, r3
 8001aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001aac:	440b      	add	r3, r1
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
    b_sintab_data[k + 1] = -costab1q_data[(j - k) - 1];
 8001ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ac8:	4413      	add	r3, r2
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ada:	4413      	add	r3, r2
 8001adc:	eef1 7a67 	vneg.f32	s15, s15
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < j; k++) {
 8001ae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001aee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001af2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbcb      	blt.n	8001a92 <d_FFTImplementationCallback_doH+0x39a>
  }
  istart = costab1q->size[1];
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  for (k = istart; k <= nd2; k++) {
 8001b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b0c:	e031      	b.n	8001b72 <d_FFTImplementationCallback_doH+0x47a>
 8001b0e:	bf00      	nop
 8001b10:	40c90fdb 	.word	0x40c90fdb
    b_costab_data[k] = -costab1q_data[nd2 - k];
 8001b14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b24:	4413      	add	r3, r2
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b34:	4413      	add	r3, r2
 8001b36:	eef1 7a67 	vneg.f32	s15, s15
 8001b3a:	edc3 7a00 	vstr	s15, [r3]
    b_sintab_data[k] = -costab1q_data[k - j];
 8001b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b4e:	4413      	add	r3, r2
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b5e:	4413      	add	r3, r2
 8001b60:	eef1 7a67 	vneg.f32	s15, s15
 8001b64:	edc3 7a00 	vstr	s15, [r3]
  for (k = istart; k <= nd2; k++) {
 8001b68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	ddca      	ble.n	8001b14 <d_FFTImplementationCallback_doH+0x41c>
  }
  emxInit_real32_T(&hsintab, 2);
 8001b7e:	f107 0318 	add.w	r3, r7, #24
 8001b82:	2102      	movs	r1, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f006 fdfc 	bl	8008782 <emxInit_real32_T>
  emxInit_real32_T(&hcostabinv, 2);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f006 fdf6 	bl	8008782 <emxInit_real32_T>
  emxInit_real32_T(&hsintabinv, 2);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 fdf0 	bl	8008782 <emxInit_real32_T>
  hszCostab = costab->size[1] / 2;
 8001ba2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0fda      	lsrs	r2, r3, #31
 8001bae:	4413      	add	r3, r2
 8001bb0:	105b      	asrs	r3, r3, #1
 8001bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  istart = costab1q->size[0] * costab1q->size[1];
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6a3a      	ldr	r2, [r7, #32]
 8001bbe:	6852      	ldr	r2, [r2, #4]
 8001bc0:	3204      	adds	r2, #4
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  costab1q->size[0] = 1;
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
  costab1q->size[1] = hszCostab;
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001bde:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(costab1q, istart);
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001be6:	4618      	mov	r0, r3
 8001be8:	f006 fb89 	bl	80082fe <emxEnsureCapacity_real32_T>
  costab1q_data = costab1q->data;
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  istart = hsintab->size[0] * hsintab->size[1];
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	6852      	ldr	r2, [r2, #4]
 8001bfe:	3204      	adds	r2, #4
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  hsintab->size[0] = 1;
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
  hsintab->size[1] = hszCostab;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	3304      	adds	r3, #4
 8001c18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001c1c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hsintab, istart);
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001c24:	4618      	mov	r0, r3
 8001c26:	f006 fb6a 	bl	80082fe <emxEnsureCapacity_real32_T>
  hsintab_data = hsintab->data;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  istart = hcostabinv->size[0] * hcostabinv->size[1];
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	6852      	ldr	r2, [r2, #4]
 8001c3c:	3204      	adds	r2, #4
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  hcostabinv->size[0] = 1;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
  hcostabinv->size[1] = hszCostab;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001c5a:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hcostabinv, istart);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001c62:	4618      	mov	r0, r3
 8001c64:	f006 fb4b 	bl	80082fe <emxEnsureCapacity_real32_T>
  hcostabinv_data = hcostabinv->data;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  istart = hsintabinv->size[0] * hsintabinv->size[1];
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	6852      	ldr	r2, [r2, #4]
 8001c7a:	3204      	adds	r2, #4
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  hsintabinv->size[0] = 1;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
  hsintabinv->size[1] = hszCostab;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	3304      	adds	r3, #4
 8001c94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001c98:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hsintabinv, istart);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f006 fb2c 	bl	80082fe <emxEnsureCapacity_real32_T>
  hsintabinv_data = hsintabinv->data;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  for (i = 0; i < hszCostab; i++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cb4:	e043      	b.n	8001d3e <d_FFTImplementationCallback_doH+0x646>
    nd2 = ((i + 1) << 1) - 2;
 8001cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cba:	3301      	adds	r3, #1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	3b02      	subs	r3, #2
 8001cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    costab1q_data[i] = costab_data[nd2];
 8001cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001cce:	441a      	add	r2, r3
 8001cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001cda:	440b      	add	r3, r1
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	601a      	str	r2, [r3, #0]
    hsintab_data[i] = sintab_data[nd2];
 8001ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cea:	441a      	add	r2, r3
 8001cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001cf6:	440b      	add	r3, r1
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	601a      	str	r2, [r3, #0]
    hcostabinv_data[i] = costabinv_data[nd2];
 8001cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001d06:	441a      	add	r2, r3
 8001d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001d12:	440b      	add	r3, r1
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	601a      	str	r2, [r3, #0]
    hsintabinv_data[i] = sintabinv_data[nd2];
 8001d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d22:	441a      	add	r2, r3
 8001d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001d2e:	440b      	add	r3, r1
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	601a      	str	r2, [r3, #0]
  for (i = 0; i < hszCostab; i++) {
 8001d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d3e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d46:	429a      	cmp	r2, r3
 8001d48:	dbb5      	blt.n	8001cb6 <d_FFTImplementationCallback_doH+0x5be>
  }
  emxInit_int32_T(&wrapIndex, 2);
 8001d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f006 fcde 	bl	8008712 <emxInit_int32_T>
  emxInit_creal32_T(&reconVar1, 1);
 8001d56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f006 fca0 	bl	80086a2 <emxInit_creal32_T>
  emxInit_creal32_T(&reconVar2, 1);
 8001d62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d66:	2101      	movs	r1, #1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f006 fc9a 	bl	80086a2 <emxInit_creal32_T>
  istart = reconVar1->size[0];
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  reconVar1->size[0] = hnRows;
 8001d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001d80:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(reconVar1, istart);
 8001d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d84:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 f9ec 	bl	8008166 <emxEnsureCapacity_creal32_T>
  reconVar1_data = reconVar1->data;
 8001d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  istart = reconVar2->size[0];
 8001d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  reconVar2->size[0] = hnRows;
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001da8:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(reconVar2, istart);
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001db0:	4618      	mov	r0, r3
 8001db2:	f006 f9d8 	bl	8008166 <emxEnsureCapacity_creal32_T>
  reconVar2_data = reconVar2->data;
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	67fb      	str	r3, [r7, #124]	; 0x7c
  istart = wrapIndex->size[0] * wrapIndex->size[1];
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc4:	6852      	ldr	r2, [r2, #4]
 8001dc6:	3204      	adds	r2, #4
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  wrapIndex->size[0] = 1;
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
  wrapIndex->size[1] = hnRows;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	3304      	adds	r3, #4
 8001de0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001de4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_int32_T(wrapIndex, istart);
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001dec:	4618      	mov	r0, r3
 8001dee:	f006 fa20 	bl	8008232 <emxEnsureCapacity_int32_T>
  wrapIndex_data = wrapIndex->data;
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	67bb      	str	r3, [r7, #120]	; 0x78
  for (i = 0; i < hnRows; i++) {
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001dfe:	e05c      	b.n	8001eba <d_FFTImplementationCallback_doH+0x7c2>
    istart = i << 1;
 8001e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    temp_im = b_sintab_data[istart];
 8001e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001e14:	4413      	add	r3, r2
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    temp_re = b_costab_data[istart];
 8001e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e26:	4413      	add	r3, r2
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	66bb      	str	r3, [r7, #104]	; 0x68
    reconVar1_data[i].re = temp_im + 1.0F;
 8001e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e36:	4413      	add	r3, r2
 8001e38:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e44:	edc3 7a00 	vstr	s15, [r3]
    reconVar1_data[i].im = -temp_re;
 8001e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e52:	4413      	add	r3, r2
 8001e54:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e58:	eef1 7a67 	vneg.f32	s15, s15
 8001e5c:	edc3 7a01 	vstr	s15, [r3, #4]
    reconVar2_data[i].re = 1.0F - temp_im;
 8001e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e68:	4413      	add	r3, r2
 8001e6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e6e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e76:	edc3 7a00 	vstr	s15, [r3]
    reconVar2_data[i].im = temp_re;
 8001e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e82:	4413      	add	r3, r2
 8001e84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e86:	605a      	str	r2, [r3, #4]
    if (i + 1 != 1) {
 8001e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00c      	beq.n	8001eaa <d_FFTImplementationCallback_doH+0x7b2>
      wrapIndex_data[i] = (hnRows - i) + 1;
 8001e90:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e98:	1ad2      	subs	r2, r2, r3
 8001e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3201      	adds	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e002      	b.n	8001eb0 <d_FFTImplementationCallback_doH+0x7b8>
    } else {
      wrapIndex_data[0] = 1;
 8001eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  for (i = 0; i < hnRows; i++) {
 8001eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001eba:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	db9c      	blt.n	8001e00 <d_FFTImplementationCallback_doH+0x708>
    }
  }
  emxFree_real32_T(&b_sintab);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f006 fb61 	bl	8008592 <emxFree_real32_T>
  emxFree_real32_T(&b_costab);
 8001ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f006 fb5c 	bl	8008592 <emxFree_real32_T>
  z_tmp = (double)ju / 2.0;
 8001eda:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001ede:	f7fe fc47 	bl	8000770 <__aeabi_i2d>
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eea:	f7fe fdd5 	bl	8000a98 <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  istart = (int)((double)ju / 2.0);
 8001ef6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001efa:	f7fe fc39 	bl	8000770 <__aeabi_i2d>
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f06:	f7fe fdc7 	bl	8000a98 <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f7fe ff47 	bl	8000da4 <__aeabi_d2iz>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  for (hszCostab = 0; hszCostab < istart; hszCostab++) {
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001f22:	e05c      	b.n	8001fde <d_FFTImplementationCallback_doH+0x8e6>
    temp_re_tmp = (hnRows + hszCostab) - 1;
 8001f24:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	66fb      	str	r3, [r7, #108]	; 0x6c
    temp_re = wwc_data[temp_re_tmp].re;
 8001f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	66bb      	str	r3, [r7, #104]	; 0x68
    temp_im = wwc_data[temp_re_tmp].im;
 8001f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f48:	4413      	add	r3, r2
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    nd2 = hszCostab << 1;
 8001f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    twid_re = x_data[nd2];
 8001f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	667b      	str	r3, [r7, #100]	; 0x64
    twid_im = x_data[nd2 + 1];
 8001f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f6e:	3301      	adds	r3, #1
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001f76:	4413      	add	r3, r2
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	65bb      	str	r3, [r7, #88]	; 0x58
    ytmp_data[hszCostab].re = temp_re * twid_re + temp_im * twid_im;
 8001f7c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001f80:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f88:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8001f8c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f9e:	4413      	add	r3, r2
 8001fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa4:	edc3 7a00 	vstr	s15, [r3]
    ytmp_data[hszCostab].im = temp_re * twid_im - temp_im * twid_re;
 8001fa8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001fac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb4:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8001fb8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001fca:	4413      	add	r3, r2
 8001fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd0:	edc3 7a01 	vstr	s15, [r3, #4]
  for (hszCostab = 0; hszCostab < istart; hszCostab++) {
 8001fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001fde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	db9c      	blt.n	8001f24 <d_FFTImplementationCallback_doH+0x82c>
  }
  if (!tst) {
 8001fea:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 809f 	beq.w	8002138 <d_FFTImplementationCallback_doH+0xa40>
    temp_re_tmp = (hnRows + (int)z_tmp) - 1;
 8001ffa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001ffe:	f7fe fed1 	bl	8000da4 <__aeabi_d2iz>
 8002002:	4602      	mov	r2, r0
 8002004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002008:	4413      	add	r3, r2
 800200a:	3b01      	subs	r3, #1
 800200c:	66fb      	str	r3, [r7, #108]	; 0x6c
    temp_re = wwc_data[temp_re_tmp].re;
 800200e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002016:	4413      	add	r3, r2
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	66bb      	str	r3, [r7, #104]	; 0x68
    temp_im = wwc_data[temp_re_tmp].im;
 800201c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002024:	4413      	add	r3, r2
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    twid_re = x_data[(int)z_tmp << 1];
 800202c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002030:	f7fe feb8 	bl	8000da4 <__aeabi_d2iz>
 8002034:	4603      	mov	r3, r0
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800203e:	4413      	add	r3, r2
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	667b      	str	r3, [r7, #100]	; 0x64
    ytmp_data[(int)z_tmp].re = temp_re * twid_re + temp_im * 0.0F;
 8002044:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002048:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800204c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8002050:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002054:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002350 <d_FFTImplementationCallback_doH+0xc58>
 8002058:	ee27 8a87 	vmul.f32	s16, s15, s14
 800205c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002060:	f7fe fea0 	bl	8000da4 <__aeabi_d2iz>
 8002064:	4603      	mov	r3, r0
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800206c:	4413      	add	r3, r2
 800206e:	ee78 7a88 	vadd.f32	s15, s17, s16
 8002072:	edc3 7a00 	vstr	s15, [r3]
    ytmp_data[(int)z_tmp].im = temp_re * 0.0F - temp_im * twid_re;
 8002076:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800207a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002350 <d_FFTImplementationCallback_doH+0xc58>
 800207e:	ee67 8a87 	vmul.f32	s17, s15, s14
 8002082:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002086:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800208a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800208e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002092:	f7fe fe87 	bl	8000da4 <__aeabi_d2iz>
 8002096:	4603      	mov	r3, r0
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800209e:	4413      	add	r3, r2
 80020a0:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80020a4:	edc3 7a01 	vstr	s15, [r3, #4]
    if ((int)z_tmp + 2 <= hnRows) {
 80020a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80020ac:	f7fe fe7a 	bl	8000da4 <__aeabi_d2iz>
 80020b0:	4603      	mov	r3, r0
 80020b2:	3301      	adds	r3, #1
 80020b4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f340 8082 	ble.w	80021c2 <d_FFTImplementationCallback_doH+0xaca>
      istart = (int)((double)ju / 2.0) + 2;
 80020be:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80020c2:	f7fe fb55 	bl	8000770 <__aeabi_i2d>
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ce:	f7fe fce3 	bl	8000a98 <__aeabi_ddiv>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fe63 	bl	8000da4 <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	3302      	adds	r3, #2
 80020e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (i = istart; i <= hnRows; i++) {
 80020e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020ee:	e01c      	b.n	800212a <d_FFTImplementationCallback_doH+0xa32>
        ytmp_data[i - 1].re = 0.0F;
 80020f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80020f8:	3b01      	subs	r3, #1
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002100:	4413      	add	r3, r2
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
        ytmp_data[i - 1].im = 0.0F;
 8002108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800210c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002110:	3b01      	subs	r3, #1
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002118:	4413      	add	r3, r2
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
      for (i = istart; i <= hnRows; i++) {
 8002120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002124:	3301      	adds	r3, #1
 8002126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800212a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800212e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002132:	429a      	cmp	r2, r3
 8002134:	dddc      	ble.n	80020f0 <d_FFTImplementationCallback_doH+0x9f8>
 8002136:	e044      	b.n	80021c2 <d_FFTImplementationCallback_doH+0xaca>
      }
    }
  } else if ((int)z_tmp + 1 <= hnRows) {
 8002138:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800213c:	f7fe fe32 	bl	8000da4 <__aeabi_d2iz>
 8002140:	4602      	mov	r2, r0
 8002142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002146:	4293      	cmp	r3, r2
 8002148:	dd3b      	ble.n	80021c2 <d_FFTImplementationCallback_doH+0xaca>
    istart = (int)((double)ju / 2.0) + 1;
 800214a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800214e:	f7fe fb0f 	bl	8000770 <__aeabi_i2d>
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800215a:	f7fe fc9d 	bl	8000a98 <__aeabi_ddiv>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fe1d 	bl	8000da4 <__aeabi_d2iz>
 800216a:	4603      	mov	r3, r0
 800216c:	3301      	adds	r3, #1
 800216e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (i = istart; i <= hnRows; i++) {
 8002172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800217a:	e01c      	b.n	80021b6 <d_FFTImplementationCallback_doH+0xabe>
      ytmp_data[i - 1].re = 0.0F;
 800217c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002180:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002184:	3b01      	subs	r3, #1
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800218c:	4413      	add	r3, r2
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
      ytmp_data[i - 1].im = 0.0F;
 8002194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002198:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800219c:	3b01      	subs	r3, #1
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021a4:	4413      	add	r3, r2
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
    for (i = istart; i <= hnRows; i++) {
 80021ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021b0:	3301      	adds	r3, #1
 80021b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021b6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80021ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021be:	429a      	cmp	r2, r3
 80021c0:	dddc      	ble.n	800217c <d_FFTImplementationCallback_doH+0xa84>
    }
  }
  emxInit_creal32_T(&fy, 1);
 80021c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021c6:	2101      	movs	r1, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f006 fa6a 	bl	80086a2 <emxInit_creal32_T>
  z_tmp = (double)nfft / 2.0;
 80021ce:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80021d2:	f7fe facd 	bl	8000770 <__aeabi_i2d>
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021de:	f7fe fc5b 	bl	8000a98 <__aeabi_ddiv>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  nd2 = (int)z_tmp;
 80021ea:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80021ee:	f7fe fdd9 	bl	8000da4 <__aeabi_d2iz>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  istart = fy->size[0];
 80021f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  fy->size[0] = (int)z_tmp;
 8002202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002204:	685c      	ldr	r4, [r3, #4]
 8002206:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800220a:	f7fe fdcb 	bl	8000da4 <__aeabi_d2iz>
 800220e:	4603      	mov	r3, r0
 8002210:	6023      	str	r3, [r4, #0]
  emxEnsureCapacity_creal32_T(fy, istart);
 8002212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002214:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002218:	4618      	mov	r0, r3
 800221a:	f005 ffa4 	bl	8008166 <emxEnsureCapacity_creal32_T>
  fy_data = fy->data;
 800221e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if ((int)z_tmp > ytmp->size[0]) {
 8002226:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800222a:	f7fe fdbb 	bl	8000da4 <__aeabi_d2iz>
 800222e:	4602      	mov	r2, r0
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	dd37      	ble.n	80022aa <d_FFTImplementationCallback_doH+0xbb2>
    istart = fy->size[0];
 800223a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    fy->size[0] = (int)z_tmp;
 8002244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002246:	685c      	ldr	r4, [r3, #4]
 8002248:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800224c:	f7fe fdaa 	bl	8000da4 <__aeabi_d2iz>
 8002250:	4603      	mov	r3, r0
 8002252:	6023      	str	r3, [r4, #0]
    emxEnsureCapacity_creal32_T(fy, istart);
 8002254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002256:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800225a:	4618      	mov	r0, r3
 800225c:	f005 ff83 	bl	8008166 <emxEnsureCapacity_creal32_T>
    fy_data = fy->data;
 8002260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    for (istart = 0; istart < nd2; istart++) {
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800226e:	e016      	b.n	800229e <d_FFTImplementationCallback_doH+0xba6>
      fy_data[istart].re = 0.0F;
 8002270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800227a:	4413      	add	r3, r2
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
      fy_data[istart].im = 0.0F;
 8002282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800228c:	4413      	add	r3, r2
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
    for (istart = 0; istart < nd2; istart++) {
 8002294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002298:	3301      	adds	r3, #1
 800229a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800229e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80022a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbe2      	blt.n	8002270 <d_FFTImplementationCallback_doH+0xb78>
    }
  }
  ju = ytmp->size[0];
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  istart = (int)z_tmp;
 80022b4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80022b8:	f7fe fd74 	bl	8000da4 <__aeabi_d2iz>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (ju <= istart) {
 80022c2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80022c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022ca:	429a      	cmp	r2, r3
 80022cc:	dc03      	bgt.n	80022d6 <d_FFTImplementationCallback_doH+0xbde>
    istart = ju;
 80022ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  }
  hszCostab = (int)z_tmp - 2;
 80022d6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80022da:	f7fe fd63 	bl	8000da4 <__aeabi_d2iz>
 80022de:	4603      	mov	r3, r0
 80022e0:	3b02      	subs	r3, #2
 80022e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  nRowsD2 = (int)z_tmp / 2;
 80022e6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80022ea:	f7fe fd5b 	bl	8000da4 <__aeabi_d2iz>
 80022ee:	4603      	mov	r3, r0
 80022f0:	0fda      	lsrs	r2, r3, #31
 80022f2:	4413      	add	r3, r2
 80022f4:	105b      	asrs	r3, r3, #1
 80022f6:	663b      	str	r3, [r7, #96]	; 0x60
  k = nRowsD2 / 2;
 80022f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022fa:	0fda      	lsrs	r2, r3, #31
 80022fc:	4413      	add	r3, r2
 80022fe:	105b      	asrs	r3, r3, #1
 8002300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  nd2 = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  ju = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (i = 0; i <= istart - 2; i++) {
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002316:	e041      	b.n	800239c <d_FFTImplementationCallback_doH+0xca4>
    fy_data[nd2] = ytmp_data[i];
 8002318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002322:	18d1      	adds	r1, r2, r3
 8002324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800232e:	4413      	add	r3, r2
 8002330:	460a      	mov	r2, r1
 8002332:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002336:	e883 0003 	stmia.w	r3, {r0, r1}
    j = (int)z_tmp;
 800233a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800233e:	f7fe fd31 	bl	8000da4 <__aeabi_d2iz>
 8002342:	4603      	mov	r3, r0
 8002344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tst = true;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    while (tst) {
 800234e:	e018      	b.n	8002382 <d_FFTImplementationCallback_doH+0xc8a>
 8002350:	00000000 	.word	0x00000000
      j >>= 1;
 8002354:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002358:	105b      	asrs	r3, r3, #1
 800235a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      ju ^= j;
 800235e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002362:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002366:	4053      	eors	r3, r2
 8002368:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      tst = ((ju & j) == 0);
 800236c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002370:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    while (tst) {
 8002382:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e4      	bne.n	8002354 <d_FFTImplementationCallback_doH+0xc5c>
    }
    nd2 = ju;
 800238a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800238e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  for (i = 0; i <= istart - 2; i++) {
 8002392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002396:	3301      	adds	r3, #1
 8002398:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800239c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023a0:	3b01      	subs	r3, #1
 80023a2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80023a6:	429a      	cmp	r2, r3
 80023a8:	dbb6      	blt.n	8002318 <d_FFTImplementationCallback_doH+0xc20>
  }
  fy_data[nd2] = ytmp_data[istart - 1];
 80023aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80023b2:	3b01      	subs	r3, #1
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80023ba:	18d1      	adds	r1, r2, r3
 80023bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80023c6:	4413      	add	r3, r2
 80023c8:	460a      	mov	r2, r1
 80023ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023ce:	e883 0003 	stmia.w	r3, {r0, r1}
  if ((int)z_tmp > 1) {
 80023d2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80023d6:	f7fe fce5 	bl	8000da4 <__aeabi_d2iz>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b01      	cmp	r3, #1
 80023de:	dd6b      	ble.n	80024b8 <d_FFTImplementationCallback_doH+0xdc0>
    for (i = 0; i <= hszCostab; i += 2) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023e6:	e061      	b.n	80024ac <d_FFTImplementationCallback_doH+0xdb4>
      b_temp_re_tmp = fy_data[i + 1].re;
 80023e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023ec:	3301      	adds	r3, #1
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80023f4:	4413      	add	r3, r2
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      temp_re = fy_data[i + 1].im;
 80023fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023fe:	3301      	adds	r3, #1
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002406:	4413      	add	r3, r2
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	66bb      	str	r3, [r7, #104]	; 0x68
      twid_im = fy_data[i].re;
 800240c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002416:	4413      	add	r3, r2
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	65bb      	str	r3, [r7, #88]	; 0x58
      temp_im = fy_data[i].im;
 800241c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002426:	4413      	add	r3, r2
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      fy_data[i + 1].re = twid_im - b_temp_re_tmp;
 800242e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002432:	3301      	adds	r3, #1
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800243a:	4413      	add	r3, r2
 800243c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002440:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002448:	edc3 7a00 	vstr	s15, [r3]
      fy_data[i + 1].im = temp_im - temp_re;
 800244c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002450:	3301      	adds	r3, #1
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002458:	4413      	add	r3, r2
 800245a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800245e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002466:	edc3 7a01 	vstr	s15, [r3, #4]
      fy_data[i].re = twid_im + b_temp_re_tmp;
 800246a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002474:	4413      	add	r3, r2
 8002476:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800247a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800247e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002482:	edc3 7a00 	vstr	s15, [r3]
      fy_data[i].im = temp_im + temp_re;
 8002486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002490:	4413      	add	r3, r2
 8002492:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002496:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800249a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i <= hszCostab; i += 2) {
 80024a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a6:	3302      	adds	r3, #2
 80024a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024ac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80024b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dd97      	ble.n	80023e8 <d_FFTImplementationCallback_doH+0xcf0>
    }
  }
  nd2 = 2;
 80024b8:	2302      	movs	r3, #2
 80024ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  hszCostab = 4;
 80024be:	2304      	movs	r3, #4
 80024c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  ju = ((k - 1) << 2) + 1;
 80024c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024c8:	3b01      	subs	r3, #1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	3301      	adds	r3, #1
 80024ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  while (k > 0) {
 80024d2:	e14f      	b.n	8002774 <d_FFTImplementationCallback_doH+0x107c>
    for (i = 0; i < ju; i += hszCostab) {
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024da:	e069      	b.n	80025b0 <d_FFTImplementationCallback_doH+0xeb8>
      temp_re_tmp = i + nd2;
 80024dc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80024e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024e4:	4413      	add	r3, r2
 80024e6:	66fb      	str	r3, [r7, #108]	; 0x6c
      temp_re = fy_data[temp_re_tmp].re;
 80024e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024f0:	4413      	add	r3, r2
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	66bb      	str	r3, [r7, #104]	; 0x68
      temp_im = fy_data[temp_re_tmp].im;
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024fe:	4413      	add	r3, r2
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      fy_data[temp_re_tmp].re = fy_data[i].re - temp_re;
 8002506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002510:	4413      	add	r3, r2
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800251e:	4413      	add	r3, r2
 8002520:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002528:	edc3 7a00 	vstr	s15, [r3]
      fy_data[temp_re_tmp].im = fy_data[i].im - temp_im;
 800252c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002536:	4413      	add	r3, r2
 8002538:	ed93 7a01 	vldr	s14, [r3, #4]
 800253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002544:	4413      	add	r3, r2
 8002546:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc3 7a01 	vstr	s15, [r3, #4]
      fy_data[i].re += temp_re;
 8002552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800255c:	4413      	add	r3, r2
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800256c:	4413      	add	r3, r2
 800256e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002576:	edc3 7a00 	vstr	s15, [r3]
      fy_data[i].im += temp_im;
 800257a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002584:	4413      	add	r3, r2
 8002586:	ed93 7a01 	vldr	s14, [r3, #4]
 800258a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002594:	4413      	add	r3, r2
 8002596:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800259a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < ju; i += hszCostab) {
 80025a2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80025a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025aa:	4413      	add	r3, r2
 80025ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025b0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80025b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025b8:	429a      	cmp	r2, r3
 80025ba:	db8f      	blt.n	80024dc <d_FFTImplementationCallback_doH+0xde4>
    }
    istart = 1;
 80025bc:	2301      	movs	r3, #1
 80025be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (j = k; j < nRowsD2; j += k) {
 80025c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025ca:	e0b6      	b.n	800273a <d_FFTImplementationCallback_doH+0x1042>
      int ihi;
      twid_re = costab1q_data[j];
 80025cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	667b      	str	r3, [r7, #100]	; 0x64
      twid_im = hsintab_data[j];
 80025dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80025e6:	4413      	add	r3, r2
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	65bb      	str	r3, [r7, #88]	; 0x58
      i = istart;
 80025ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      ihi = istart + ju;
 80025f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025fc:	4413      	add	r3, r2
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
      while (i < ihi) {
 8002600:	e089      	b.n	8002716 <d_FFTImplementationCallback_doH+0x101e>
        temp_re_tmp = i + nd2;
 8002602:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800260a:	4413      	add	r3, r2
 800260c:	66fb      	str	r3, [r7, #108]	; 0x6c
        b_temp_re_tmp = fy_data[temp_re_tmp].im;
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002616:	4413      	add	r3, r2
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	65fb      	str	r3, [r7, #92]	; 0x5c
        temp_im = fy_data[temp_re_tmp].re;
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002624:	4413      	add	r3, r2
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        temp_re = twid_re * temp_im - twid_im * b_temp_re_tmp;
 800262c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002630:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002638:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800263c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002648:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
        temp_im = twid_re * b_temp_re_tmp + twid_im * temp_im;
 800264c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002650:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002658:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800265c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
        fy_data[temp_re_tmp].re = fy_data[i].re - temp_re;
 800266c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002676:	4413      	add	r3, r2
 8002678:	ed93 7a00 	vldr	s14, [r3]
 800267c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002684:	4413      	add	r3, r2
 8002686:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800268a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268e:	edc3 7a00 	vstr	s15, [r3]
        fy_data[temp_re_tmp].im = fy_data[i].im - temp_im;
 8002692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800269c:	4413      	add	r3, r2
 800269e:	ed93 7a01 	vldr	s14, [r3, #4]
 80026a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026aa:	4413      	add	r3, r2
 80026ac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80026b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b4:	edc3 7a01 	vstr	s15, [r3, #4]
        fy_data[i].re += temp_re;
 80026b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026c2:	4413      	add	r3, r2
 80026c4:	ed93 7a00 	vldr	s14, [r3]
 80026c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026d2:	4413      	add	r3, r2
 80026d4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026dc:	edc3 7a00 	vstr	s15, [r3]
        fy_data[i].im += temp_im;
 80026e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026ea:	4413      	add	r3, r2
 80026ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80026f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026fa:	4413      	add	r3, r2
 80026fc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002704:	edc3 7a01 	vstr	s15, [r3, #4]
        i += hszCostab;
 8002708:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800270c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002710:	4413      	add	r3, r2
 8002712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      while (i < ihi) {
 8002716:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800271a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271c:	429a      	cmp	r2, r3
 800271e:	f6ff af70 	blt.w	8002602 <d_FFTImplementationCallback_doH+0xf0a>
      }
      istart++;
 8002722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002726:	3301      	adds	r3, #1
 8002728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (j = k; j < nRowsD2; j += k) {
 800272c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002734:	4413      	add	r3, r2
 8002736:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800273a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800273e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002740:	429a      	cmp	r2, r3
 8002742:	f6ff af43 	blt.w	80025cc <d_FFTImplementationCallback_doH+0xed4>
    }
    k /= 2;
 8002746:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800274a:	0fda      	lsrs	r2, r3, #31
 800274c:	4413      	add	r3, r2
 800274e:	105b      	asrs	r3, r3, #1
 8002750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    nd2 = hszCostab;
 8002754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    hszCostab += hszCostab;
 800275c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    ju -= nd2;
 8002766:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800276a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  while (k > 0) {
 8002774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002778:	2b00      	cmp	r3, #0
 800277a:	f73f aeab 	bgt.w	80024d4 <d_FFTImplementationCallback_doH+0xddc>
  }
  emxInit_creal32_T(&fv, 1);
 800277e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f005 ff8c 	bl	80086a2 <emxInit_creal32_T>
  c_FFTImplementationCallback_r2b(wwc, (int)z_tmp, costab1q, hsintab, fv);
 800278a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800278e:	f7fe fb09 	bl	8000da4 <__aeabi_d2iz>
 8002792:	6a3a      	ldr	r2, [r7, #32]
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	460b      	mov	r3, r1
 800279c:	4601      	mov	r1, r0
 800279e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80027a2:	f7fe fd8d 	bl	80012c0 <c_FFTImplementationCallback_r2b>
  fv_data = fv->data;
 80027a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	657b      	str	r3, [r7, #84]	; 0x54
  nd2 = fy->size[0];
 80027ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  emxFree_real32_T(&costab1q);
 80027b6:	f107 0320 	add.w	r3, r7, #32
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 fee9 	bl	8008592 <emxFree_real32_T>
  emxFree_real32_T(&hsintab);
 80027c0:	f107 0318 	add.w	r3, r7, #24
 80027c4:	4618      	mov	r0, r3
 80027c6:	f005 fee4 	bl	8008592 <emxFree_real32_T>
  for (istart = 0; istart < nd2; istart++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027d0:	e04f      	b.n	8002872 <d_FFTImplementationCallback_doH+0x117a>
    twid_im = fy_data[istart].re;
 80027d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027dc:	4413      	add	r3, r2
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	65bb      	str	r3, [r7, #88]	; 0x58
    temp_im = fv_data[istart].im;
 80027e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ea:	4413      	add	r3, r2
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    temp_re = fy_data[istart].im;
 80027f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027fc:	4413      	add	r3, r2
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	66bb      	str	r3, [r7, #104]	; 0x68
    twid_re = fv_data[istart].re;
 8002802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800280a:	4413      	add	r3, r2
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	667b      	str	r3, [r7, #100]	; 0x64
    fy_data[istart].re = twid_im * twid_re - temp_re * temp_im;
 8002810:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002814:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002820:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002832:	4413      	add	r3, r2
 8002834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002838:	edc3 7a00 	vstr	s15, [r3]
    fy_data[istart].im = twid_im * temp_im + temp_re * twid_re;
 800283c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002840:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002848:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800284c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800285e:	4413      	add	r3, r2
 8002860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002864:	edc3 7a01 	vstr	s15, [r3, #4]
  for (istart = 0; istart < nd2; istart++) {
 8002868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800286c:	3301      	adds	r3, #1
 800286e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002872:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800287a:	429a      	cmp	r2, r3
 800287c:	dba9      	blt.n	80027d2 <d_FFTImplementationCallback_doH+0x10da>
  }
  c_FFTImplementationCallback_r2b(fy, (int)z_tmp, hcostabinv, hsintabinv, fv);
 800287e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002880:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002884:	f7fe fa8e 	bl	8000da4 <__aeabi_d2iz>
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	6979      	ldr	r1, [r7, #20]
 800288c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	460b      	mov	r3, r1
 8002892:	4601      	mov	r1, r0
 8002894:	4620      	mov	r0, r4
 8002896:	f7fe fd13 	bl	80012c0 <c_FFTImplementationCallback_r2b>
  fv_data = fv->data;
 800289a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	657b      	str	r3, [r7, #84]	; 0x54
  emxFree_creal32_T(&fy);
 80028a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 fe20 	bl	80084ea <emxFree_creal32_T>
  emxFree_real32_T(&hsintabinv);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4618      	mov	r0, r3
 80028b0:	f005 fe6f 	bl	8008592 <emxFree_real32_T>
  emxFree_real32_T(&hcostabinv);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4618      	mov	r0, r3
 80028ba:	f005 fe6a 	bl	8008592 <emxFree_real32_T>
  if (fv->size[0] > 1) {
 80028be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	dd44      	ble.n	8002952 <d_FFTImplementationCallback_doH+0x125a>
    temp_im = 1.0F / (float)fv->size[0];
 80028c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028de:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    nd2 = fv->size[0];
 80028e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    for (istart = 0; istart < nd2; istart++) {
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80028f2:	e028      	b.n	8002946 <d_FFTImplementationCallback_doH+0x124e>
      fv_data[istart].re *= temp_im;
 80028f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028fc:	4413      	add	r3, r2
 80028fe:	ed93 7a00 	vldr	s14, [r3]
 8002902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800290a:	4413      	add	r3, r2
 800290c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002914:	edc3 7a00 	vstr	s15, [r3]
      fv_data[istart].im *= temp_im;
 8002918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002920:	4413      	add	r3, r2
 8002922:	ed93 7a01 	vldr	s14, [r3, #4]
 8002926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800292e:	4413      	add	r3, r2
 8002930:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002938:	edc3 7a01 	vstr	s15, [r3, #4]
    for (istart = 0; istart < nd2; istart++) {
 800293c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002940:	3301      	adds	r3, #1
 8002942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002946:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800294a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800294e:	429a      	cmp	r2, r3
 8002950:	dbd0      	blt.n	80028f4 <d_FFTImplementationCallback_doH+0x11fc>
    }
  }
  istart = (int)(float)hnRows;
 8002952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002962:	ee17 3a90 	vmov	r3, s15
 8002966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  hszCostab = wwc->size[0];
 800296a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  for (k = istart; k <= hszCostab; k++) {
 8002976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800297a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800297e:	e062      	b.n	8002a46 <d_FFTImplementationCallback_doH+0x134e>
    temp_im = wwc_data[k - 1].re;
 8002980:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002984:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002988:	3b01      	subs	r3, #1
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002990:	4413      	add	r3, r2
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    temp_re = fv_data[k - 1].im;
 8002998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800299c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80029a0:	3b01      	subs	r3, #1
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029a6:	4413      	add	r3, r2
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	66bb      	str	r3, [r7, #104]	; 0x68
    twid_re = wwc_data[k - 1].im;
 80029ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029b0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80029b4:	3b01      	subs	r3, #1
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029bc:	4413      	add	r3, r2
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	667b      	str	r3, [r7, #100]	; 0x64
    twid_im = fv_data[k - 1].re;
 80029c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80029ca:	3b01      	subs	r3, #1
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029d0:	4413      	add	r3, r2
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	65bb      	str	r3, [r7, #88]	; 0x58
    nd2 = k - istart;
 80029d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    ytmp_data[nd2].re = temp_im * twid_im + twid_re * temp_re;
 80029e4:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80029e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80029ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f0:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80029f4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80029f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a06:	4413      	add	r3, r2
 8002a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0c:	edc3 7a00 	vstr	s15, [r3]
    ytmp_data[nd2].im = temp_im * temp_re - twid_re * twid_im;
 8002a10:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002a14:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a1c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002a20:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a32:	4413      	add	r3, r2
 8002a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a38:	edc3 7a01 	vstr	s15, [r3, #4]
  for (k = istart; k <= hszCostab; k++) {
 8002a3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a40:	3301      	adds	r3, #1
 8002a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	dd96      	ble.n	8002980 <d_FFTImplementationCallback_doH+0x1288>
  }
  emxFree_creal32_T(&fv);
 8002a52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a56:	4618      	mov	r0, r3
 8002a58:	f005 fd47 	bl	80084ea <emxFree_creal32_T>
  for (i = 0; i < hnRows; i++) {
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a62:	e104      	b.n	8002c6e <d_FFTImplementationCallback_doH+0x1576>
    float b_ytmp_re_tmp;
    float ytmp_im_tmp;
    float ytmp_re_tmp;
    istart = wrapIndex_data[i];
 8002a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a6c:	4413      	add	r3, r2
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    temp_im = ytmp_data[i].re;
 8002a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a7e:	4413      	add	r3, r2
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    temp_re = reconVar1_data[i].im;
 8002a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a90:	4413      	add	r3, r2
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	66bb      	str	r3, [r7, #104]	; 0x68
    twid_re = ytmp_data[i].im;
 8002a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002aa0:	4413      	add	r3, r2
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	667b      	str	r3, [r7, #100]	; 0x64
    twid_im = reconVar1_data[i].re;
 8002aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ab0:	4413      	add	r3, r2
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	65bb      	str	r3, [r7, #88]	; 0x58
    b_temp_re_tmp = ytmp_data[istart - 1].re;
 8002ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ac6:	4413      	add	r3, r2
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	65fb      	str	r3, [r7, #92]	; 0x5c
    ytmp_im_tmp = -ytmp_data[istart - 1].im;
 8002acc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ad0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002adc:	4413      	add	r3, r2
 8002ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ae2:	eef1 7a67 	vneg.f32	s15, s15
 8002ae6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    ytmp_re_tmp = reconVar2_data[i].im;
 8002aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002af2:	4413      	add	r3, r2
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	64fb      	str	r3, [r7, #76]	; 0x4c
    b_ytmp_re_tmp = reconVar2_data[i].re;
 8002af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b00:	4413      	add	r3, r2
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	64bb      	str	r3, [r7, #72]	; 0x48
    y_data[i].re =
        0.5F * ((temp_im * twid_im - twid_re * temp_re) +
 8002b06:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002b0a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b12:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002b16:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
                (b_temp_re_tmp * b_ytmp_re_tmp - ytmp_im_tmp * ytmp_re_tmp));
 8002b22:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002b26:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b2e:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8002b32:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002b36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
        0.5F * ((temp_im * twid_im - twid_re * temp_re) +
 8002b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[i].re =
 8002b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b4c:	4413      	add	r3, r2
        0.5F * ((temp_im * twid_im - twid_re * temp_re) +
 8002b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b52:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[i].re =
 8002b56:	edc3 7a00 	vstr	s15, [r3]
    y_data[i].im =
        0.5F * ((temp_im * temp_re + twid_re * twid_im) +
 8002b5a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002b5e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b66:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002b6a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b72:	ee37 7a27 	vadd.f32	s14, s14, s15
                (b_temp_re_tmp * ytmp_re_tmp + ytmp_im_tmp * b_ytmp_re_tmp));
 8002b76:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002b7a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002b7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b82:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8002b86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_im * temp_re + twid_re * twid_im) +
 8002b92:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[i].im =
 8002b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ba0:	4413      	add	r3, r2
        0.5F * ((temp_im * temp_re + twid_re * twid_im) +
 8002ba2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[i].im =
 8002baa:	edc3 7a01 	vstr	s15, [r3, #4]
    istart = hnRows + i;
 8002bae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y_data[istart].re =
        0.5F * ((temp_im * b_ytmp_re_tmp - twid_re * ytmp_re_tmp) +
 8002bbc:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002bc0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc8:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002bcc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
                (b_temp_re_tmp * twid_im - ytmp_im_tmp * temp_re));
 8002bd8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002bdc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002be0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002be4:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8002be8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002bec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bf0:	ee76 7ae7 	vsub.f32	s15, s13, s15
        0.5F * ((temp_im * b_ytmp_re_tmp - twid_re * ytmp_re_tmp) +
 8002bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[istart].re =
 8002bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c02:	4413      	add	r3, r2
        0.5F * ((temp_im * b_ytmp_re_tmp - twid_re * ytmp_re_tmp) +
 8002c04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c08:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[istart].re =
 8002c0c:	edc3 7a00 	vstr	s15, [r3]
    y_data[istart].im =
        0.5F * ((temp_im * ytmp_re_tmp + twid_re * b_ytmp_re_tmp) +
 8002c10:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002c14:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c1c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002c20:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c28:	ee37 7a27 	vadd.f32	s14, s14, s15
                (b_temp_re_tmp * temp_re + ytmp_im_tmp * twid_im));
 8002c2c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002c30:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002c34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c38:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8002c3c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_im * ytmp_re_tmp + twid_re * b_ytmp_re_tmp) +
 8002c48:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[istart].im =
 8002c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c56:	4413      	add	r3, r2
        0.5F * ((temp_im * ytmp_re_tmp + twid_re * b_ytmp_re_tmp) +
 8002c58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[istart].im =
 8002c60:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < hnRows; i++) {
 8002c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c6e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c76:	429a      	cmp	r2, r3
 8002c78:	f6ff aef4 	blt.w	8002a64 <d_FFTImplementationCallback_doH+0x136c>
  }
  emxFree_creal32_T(&reconVar2);
 8002c7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c80:	4618      	mov	r0, r3
 8002c82:	f005 fc32 	bl	80084ea <emxFree_creal32_T>
  emxFree_creal32_T(&reconVar1);
 8002c86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 fc2d 	bl	80084ea <emxFree_creal32_T>
  emxFree_int32_T(&wrapIndex);
 8002c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 fc52 	bl	800853e <emxFree_int32_T>
  emxFree_creal32_T(&ytmp);
 8002c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f005 fc23 	bl	80084ea <emxFree_creal32_T>
}
 8002ca4:	bf00      	nop
 8002ca6:	37ec      	adds	r7, #236	; 0xec
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	ecbd 8b02 	vpop	{d8}
 8002cae:	bd90      	pop	{r4, r7, pc}

08002cb0 <c_FFTImplementationCallback_doH>:
 */
void c_FFTImplementationCallback_doH(const emxArray_real32_T *x,
                                     emxArray_creal32_T *y, int unsigned_nRows,
                                     const emxArray_real32_T *costab,
                                     const emxArray_real32_T *sintab)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	ed2d 8b02 	vpush	{d8}
 8002cb6:	b0b1      	sub	sp, #196	; 0xc4
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  int nRows;
  int nRowsD2;
  int *bitrevIndex_data;
  int *wrapIndex_data;
  bool tst;
  sintab_data = sintab->data;
 8002cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  costab_data = costab->data;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  y_data = y->data;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  x_data = x->data;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  emxInit_real32_T(&hcostab, 2);
 8002ce4:	f107 0318 	add.w	r3, r7, #24
 8002ce8:	2102      	movs	r1, #2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f005 fd49 	bl	8008782 <emxInit_real32_T>
  emxInit_real32_T(&hsintab, 2);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f005 fd43 	bl	8008782 <emxInit_real32_T>
  nRows = unsigned_nRows / 2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0fda      	lsrs	r2, r3, #31
 8002d00:	4413      	add	r3, r2
 8002d02:	105b      	asrs	r3, r3, #1
 8002d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  istart = y->size[0];
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (istart > nRows) {
 8002d12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	dd03      	ble.n	8002d26 <c_FFTImplementationCallback_doH+0x76>
    istart = nRows;
 8002d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  }
  ihi = nRows - 2;
 8002d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d2a:	3b02      	subs	r3, #2
 8002d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  nRowsD2 = nRows / 2;
 8002d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d34:	0fda      	lsrs	r2, r3, #31
 8002d36:	4413      	add	r3, r2
 8002d38:	105b      	asrs	r3, r3, #1
 8002d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  k = nRowsD2 / 2;
 8002d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d42:	0fda      	lsrs	r2, r3, #31
 8002d44:	4413      	add	r3, r2
 8002d46:	105b      	asrs	r3, r3, #1
 8002d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  hszCostab = costab->size[1] / 2;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0fda      	lsrs	r2, r3, #31
 8002d56:	4413      	add	r3, r2
 8002d58:	105b      	asrs	r3, r3, #1
 8002d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  b_j1 = hcostab->size[0] * hcostab->size[1];
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	6852      	ldr	r2, [r2, #4]
 8002d68:	3204      	adds	r2, #4
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  hcostab->size[0] = 1;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
  hcostab->size[1] = hszCostab;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d86:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hcostab, b_j1);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f005 fab5 	bl	80082fe <emxEnsureCapacity_real32_T>
  hcostab_data = hcostab->data;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  b_j1 = hsintab->size[0] * hsintab->size[1];
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	6852      	ldr	r2, [r2, #4]
 8002da6:	3204      	adds	r2, #4
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  hsintab->size[0] = 1;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
  hsintab->size[1] = hszCostab;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dc4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hsintab, b_j1);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f005 fa96 	bl	80082fe <emxEnsureCapacity_real32_T>
  hsintab_data = hsintab->data;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  for (i = 0; i < hszCostab; i++) {
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dde:	e026      	b.n	8002e2e <c_FFTImplementationCallback_doH+0x17e>
    iDelta = ((i + 1) << 1) - 2;
 8002de0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002de4:	3301      	adds	r3, #1
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	3b02      	subs	r3, #2
 8002dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    hcostab_data[i] = costab_data[iDelta];
 8002dee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002df8:	441a      	add	r2, r3
 8002dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002e04:	440b      	add	r3, r1
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	601a      	str	r2, [r3, #0]
    hsintab_data[i] = sintab_data[iDelta];
 8002e0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e14:	441a      	add	r2, r3
 8002e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e1e:	440b      	add	r3, r1
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	601a      	str	r2, [r3, #0]
  for (i = 0; i < hszCostab; i++) {
 8002e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e36:	429a      	cmp	r2, r3
 8002e38:	dbd2      	blt.n	8002de0 <c_FFTImplementationCallback_doH+0x130>
  }
  emxInit_int32_T(&wrapIndex, 2);
 8002e3a:	f107 031c 	add.w	r3, r7, #28
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f005 fc66 	bl	8008712 <emxInit_int32_T>
  emxInit_creal32_T(&reconVar1, 1);
 8002e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f005 fc28 	bl	80086a2 <emxInit_creal32_T>
  emxInit_creal32_T(&reconVar2, 1);
 8002e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e56:	2101      	movs	r1, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f005 fc22 	bl	80086a2 <emxInit_creal32_T>
  b_j1 = reconVar1->size[0];
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  reconVar1->size[0] = nRows;
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002e70:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(reconVar1, b_j1);
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f005 f974 	bl	8008166 <emxEnsureCapacity_creal32_T>
  reconVar1_data = reconVar1->data;
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	67bb      	str	r3, [r7, #120]	; 0x78
  b_j1 = reconVar2->size[0];
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  reconVar2->size[0] = nRows;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002e96:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(reconVar2, b_j1);
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f005 f961 	bl	8008166 <emxEnsureCapacity_creal32_T>
  reconVar2_data = reconVar2->data;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	677b      	str	r3, [r7, #116]	; 0x74
  b_j1 = wrapIndex->size[0] * wrapIndex->size[1];
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	6852      	ldr	r2, [r2, #4]
 8002eb4:	3204      	adds	r2, #4
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  wrapIndex->size[0] = 1;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
  wrapIndex->size[1] = nRows;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002ed2:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_int32_T(wrapIndex, b_j1);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002eda:	4618      	mov	r0, r3
 8002edc:	f005 f9a9 	bl	8008232 <emxEnsureCapacity_int32_T>
  wrapIndex_data = wrapIndex->data;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	673b      	str	r3, [r7, #112]	; 0x70
  for (i = 0; i < nRows; i++) {
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eec:	e054      	b.n	8002f98 <c_FFTImplementationCallback_doH+0x2e8>
    temp_re = sintab_data[i];
 8002eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002ef8:	4413      	add	r3, r2
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp2_re = costab_data[i];
 8002efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f08:	4413      	add	r3, r2
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
    reconVar1_data[i].re = temp_re + 1.0F;
 8002f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f16:	4413      	add	r3, r2
 8002f18:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f24:	edc3 7a00 	vstr	s15, [r3]
    reconVar1_data[i].im = -temp2_re;
 8002f28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f30:	4413      	add	r3, r2
 8002f32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f36:	eef1 7a67 	vneg.f32	s15, s15
 8002f3a:	edc3 7a01 	vstr	s15, [r3, #4]
    reconVar2_data[i].re = 1.0F - temp_re;
 8002f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f46:	4413      	add	r3, r2
 8002f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f4c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f54:	edc3 7a00 	vstr	s15, [r3]
    reconVar2_data[i].im = temp2_re;
 8002f58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f60:	4413      	add	r3, r2
 8002f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f64:	605a      	str	r2, [r3, #4]
    if (i + 1 != 1) {
 8002f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00c      	beq.n	8002f88 <c_FFTImplementationCallback_doH+0x2d8>
      wrapIndex_data[i] = (nRows - i) + 1;
 8002f6e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002f80:	440b      	add	r3, r1
 8002f82:	3201      	adds	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e002      	b.n	8002f8e <c_FFTImplementationCallback_doH+0x2de>
    } else {
      wrapIndex_data[0] = 1;
 8002f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < nRows; i++) {
 8002f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f92:	3301      	adds	r3, #1
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	dba4      	blt.n	8002eee <c_FFTImplementationCallback_doH+0x23e>
    }
  }
  emxInit_int32_T(&bitrevIndex, 1);
 8002fa4:	f107 0320 	add.w	r3, r7, #32
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4618      	mov	r0, r3
 8002fac:	f005 fbb1 	bl	8008712 <emxInit_int32_T>
  z_tmp = (double)unsigned_nRows / 2.0;
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fd fbdd 	bl	8000770 <__aeabi_i2d>
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fbe:	f7fd fd6b 	bl	8000a98 <__aeabi_ddiv>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  ju = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  hszCostab = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  iDelta = (int)z_tmp;
 8002fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fda:	f7fd fee3 	bl	8000da4 <__aeabi_d2iz>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  b_j1 = bitrevIndex->size[0];
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  bitrevIndex->size[0] = (int)z_tmp;
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	685c      	ldr	r4, [r3, #4]
 8002ff2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ff6:	f7fd fed5 	bl	8000da4 <__aeabi_d2iz>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6023      	str	r3, [r4, #0]
  emxEnsureCapacity_int32_T(bitrevIndex, b_j1);
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003004:	4618      	mov	r0, r3
 8003006:	f005 f914 	bl	8008232 <emxEnsureCapacity_int32_T>
  bitrevIndex_data = bitrevIndex->data;
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	667b      	str	r3, [r7, #100]	; 0x64
  for (b_j1 = 0; b_j1 < iDelta; b_j1++) {
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003016:	e00b      	b.n	8003030 <c_FFTImplementationCallback_doH+0x380>
    bitrevIndex_data[b_j1] = 0;
 8003018:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003020:	4413      	add	r3, r2
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
  for (b_j1 = 0; b_j1 < iDelta; b_j1++) {
 8003026:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800302a:	3301      	adds	r3, #1
 800302c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003038:	429a      	cmp	r2, r3
 800303a:	dbed      	blt.n	8003018 <c_FFTImplementationCallback_doH+0x368>
  }
  for (b_j1 = 0; b_j1 <= istart - 2; b_j1++) {
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003042:	e037      	b.n	80030b4 <c_FFTImplementationCallback_doH+0x404>
    bitrevIndex_data[b_j1] = hszCostab;
 8003044:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800304c:	4413      	add	r3, r2
 800304e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003052:	601a      	str	r2, [r3, #0]
    iDelta = (int)z_tmp;
 8003054:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003058:	f7fd fea4 	bl	8000da4 <__aeabi_d2iz>
 800305c:	4603      	mov	r3, r0
 800305e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    tst = true;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    while (tst) {
 8003068:	e016      	b.n	8003098 <c_FFTImplementationCallback_doH+0x3e8>
      iDelta >>= 1;
 800306a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800306e:	105b      	asrs	r3, r3, #1
 8003070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      ju ^= iDelta;
 8003074:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800307c:	4053      	eors	r3, r2
 800307e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      tst = ((ju & iDelta) == 0);
 8003082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003086:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    while (tst) {
 8003098:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e4      	bne.n	800306a <c_FFTImplementationCallback_doH+0x3ba>
    }
    hszCostab = ju + 1;
 80030a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030a4:	3301      	adds	r3, #1
 80030a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  for (b_j1 = 0; b_j1 <= istart - 2; b_j1++) {
 80030aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030ae:	3301      	adds	r3, #1
 80030b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80030b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030b8:	3b01      	subs	r3, #1
 80030ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030be:	429a      	cmp	r2, r3
 80030c0:	dbc0      	blt.n	8003044 <c_FFTImplementationCallback_doH+0x394>
  }
  bitrevIndex_data[istart - 1] = hszCostab;
 80030c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030ca:	3b01      	subs	r3, #1
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80030d0:	4413      	add	r3, r2
 80030d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030d6:	601a      	str	r2, [r3, #0]
  if ((x->size[0] & 1) == 0) {
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <c_FFTImplementationCallback_doH+0x448>
    tst = true;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    istart = x->size[0];
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030f6:	e015      	b.n	8003124 <c_FFTImplementationCallback_doH+0x474>
  } else if (x->size[0] >= unsigned_nRows) {
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	dc06      	bgt.n	8003112 <c_FFTImplementationCallback_doH+0x462>
    tst = true;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    istart = unsigned_nRows;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003110:	e008      	b.n	8003124 <c_FFTImplementationCallback_doH+0x474>
  } else {
    tst = false;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    istart = x->size[0] - 1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3b01      	subs	r3, #1
 8003120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  }
  if (istart <= unsigned_nRows) {
 8003124:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	dc04      	bgt.n	8003138 <c_FFTImplementationCallback_doH+0x488>
    iDelta = istart;
 800312e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003136:	e002      	b.n	800313e <c_FFTImplementationCallback_doH+0x48e>
  } else {
    iDelta = unsigned_nRows;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  }
  d = (double)iDelta / 2.0;
 800313e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003142:	f7fd fb15 	bl	8000770 <__aeabi_i2d>
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800314e:	f7fd fca3 	bl	8000a98 <__aeabi_ddiv>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  if (istart > unsigned_nRows) {
 800315a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	dd02      	ble.n	800316a <c_FFTImplementationCallback_doH+0x4ba>
    istart = unsigned_nRows;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  }
  b_j1 = (int)((double)istart / 2.0);
 800316a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800316e:	f7fd faff 	bl	8000770 <__aeabi_i2d>
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800317a:	f7fd fc8d 	bl	8000a98 <__aeabi_ddiv>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f7fd fe0d 	bl	8000da4 <__aeabi_d2iz>
 800318a:	4603      	mov	r3, r0
 800318c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  for (i = 0; i < b_j1; i++) {
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003196:	e034      	b.n	8003202 <c_FFTImplementationCallback_doH+0x552>
    hszCostab = i << 1;
 8003198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    y_data[bitrevIndex_data[i] - 1].re = x_data[hszCostab];
 80031a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80031ac:	441a      	add	r2, r3
 80031ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80031b6:	440b      	add	r3, r1
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80031be:	3b01      	subs	r3, #1
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031c6:	440b      	add	r3, r1
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	601a      	str	r2, [r3, #0]
    y_data[bitrevIndex_data[i] - 1].im = x_data[hszCostab + 1];
 80031cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031d0:	3301      	adds	r3, #1
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80031d8:	441a      	add	r2, r3
 80031da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80031e2:	440b      	add	r3, r1
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80031ea:	3b01      	subs	r3, #1
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031f2:	440b      	add	r3, r1
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < b_j1; i++) {
 80031f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031fc:	3301      	adds	r3, #1
 80031fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003206:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800320a:	429a      	cmp	r2, r3
 800320c:	dbc4      	blt.n	8003198 <c_FFTImplementationCallback_doH+0x4e8>
  }
  if (!tst) {
 800320e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003212:	f083 0301 	eor.w	r3, r3, #1
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d026      	beq.n	800326a <c_FFTImplementationCallback_doH+0x5ba>
    b_j1 = bitrevIndex_data[(int)d] - 1;
 800321c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003220:	f7fd fdc0 	bl	8000da4 <__aeabi_d2iz>
 8003224:	4603      	mov	r3, r0
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800322a:	4413      	add	r3, r2
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3b01      	subs	r3, #1
 8003230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    y_data[b_j1].re = x_data[(int)d << 1];
 8003234:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003238:	f7fd fdb4 	bl	8000da4 <__aeabi_d2iz>
 800323c:	4603      	mov	r3, r0
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003246:	441a      	add	r2, r3
 8003248:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003252:	440b      	add	r3, r1
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	601a      	str	r2, [r3, #0]
    y_data[b_j1].im = 0.0F;
 8003258:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003262:	4413      	add	r3, r2
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
  }
  emxFree_int32_T(&bitrevIndex);
 800326a:	f107 0320 	add.w	r3, r7, #32
 800326e:	4618      	mov	r0, r3
 8003270:	f005 f965 	bl	800853e <emxFree_int32_T>
  if (nRows > 1) {
 8003274:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003278:	2b01      	cmp	r3, #1
 800327a:	dd79      	ble.n	8003370 <c_FFTImplementationCallback_doH+0x6c0>
    for (i = 0; i <= ihi; i += 2) {
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003282:	e06f      	b.n	8003364 <c_FFTImplementationCallback_doH+0x6b4>
      temp_re_tmp = y_data[i + 1].re;
 8003284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003288:	3301      	adds	r3, #1
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003290:	4413      	add	r3, r2
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	657b      	str	r3, [r7, #84]	; 0x54
      temp_im_tmp = y_data[i + 1].im;
 8003296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800329a:	3301      	adds	r3, #1
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80032a2:	4413      	add	r3, r2
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	653b      	str	r3, [r7, #80]	; 0x50
      y_data[i + 1].re = y_data[i].re - temp_re_tmp;
 80032a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80032b2:	4413      	add	r3, r2
 80032b4:	ed93 7a00 	vldr	s14, [r3]
 80032b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032bc:	3301      	adds	r3, #1
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80032c4:	4413      	add	r3, r2
 80032c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80032ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ce:	edc3 7a00 	vstr	s15, [r3]
      y_data[i + 1].im = y_data[i].im - y_data[i + 1].im;
 80032d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80032dc:	4413      	add	r3, r2
 80032de:	ed93 7a01 	vldr	s14, [r3, #4]
 80032e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032e6:	3301      	adds	r3, #1
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80032ee:	4413      	add	r3, r2
 80032f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80032f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032f8:	3301      	adds	r3, #1
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003300:	4413      	add	r3, r2
 8003302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003306:	edc3 7a01 	vstr	s15, [r3, #4]
      y_data[i].re += temp_re_tmp;
 800330a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003314:	4413      	add	r3, r2
 8003316:	ed93 7a00 	vldr	s14, [r3]
 800331a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003324:	4413      	add	r3, r2
 8003326:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800332a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332e:	edc3 7a00 	vstr	s15, [r3]
      y_data[i].im += temp_im_tmp;
 8003332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800333c:	4413      	add	r3, r2
 800333e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800334c:	4413      	add	r3, r2
 800334e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003356:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i <= ihi; i += 2) {
 800335a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800335e:	3302      	adds	r3, #2
 8003360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003364:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800336c:	429a      	cmp	r2, r3
 800336e:	dd89      	ble.n	8003284 <c_FFTImplementationCallback_doH+0x5d4>
    }
  }
  iDelta = 2;
 8003370:	2302      	movs	r3, #2
 8003372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  hszCostab = 4;
 8003376:	2304      	movs	r3, #4
 8003378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  ju = ((k - 1) << 2) + 1;
 800337c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003380:	3b01      	subs	r3, #1
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	3301      	adds	r3, #1
 8003386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  while (k > 0) {
 800338a:	e159      	b.n	8003640 <c_FFTImplementationCallback_doH+0x990>
    for (i = 0; i < ju; i += hszCostab) {
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003392:	e06d      	b.n	8003470 <c_FFTImplementationCallback_doH+0x7c0>
      b_j1 = i + iDelta;
 8003394:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800339c:	4413      	add	r3, r2
 800339e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      temp_re = y_data[b_j1].re;
 80033a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033ac:	4413      	add	r3, r2
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      temp_im = y_data[b_j1].im;
 80033b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033bc:	4413      	add	r3, r2
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
      y_data[b_j1].re = y_data[i].re - temp_re;
 80033c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033cc:	4413      	add	r3, r2
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033dc:	4413      	add	r3, r2
 80033de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80033e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e6:	edc3 7a00 	vstr	s15, [r3]
      y_data[b_j1].im = y_data[i].im - temp_im;
 80033ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033f4:	4413      	add	r3, r2
 80033f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80033fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003404:	4413      	add	r3, r2
 8003406:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800340a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340e:	edc3 7a01 	vstr	s15, [r3, #4]
      y_data[i].re += temp_re;
 8003412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800341c:	4413      	add	r3, r2
 800341e:	ed93 7a00 	vldr	s14, [r3]
 8003422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800342c:	4413      	add	r3, r2
 800342e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003436:	edc3 7a00 	vstr	s15, [r3]
      y_data[i].im += temp_im;
 800343a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003444:	4413      	add	r3, r2
 8003446:	ed93 7a01 	vldr	s14, [r3, #4]
 800344a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003454:	4413      	add	r3, r2
 8003456:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800345a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < ju; i += hszCostab) {
 8003462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800346a:	4413      	add	r3, r2
 800346c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003470:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003478:	429a      	cmp	r2, r3
 800347a:	db8b      	blt.n	8003394 <c_FFTImplementationCallback_doH+0x6e4>
    }
    istart = 1;
 800347c:	2301      	movs	r3, #1
 800347e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (nRows = k; nRows < nRowsD2; nRows += k) {
 8003482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800348a:	e0bb      	b.n	8003604 <c_FFTImplementationCallback_doH+0x954>
      temp2_re = hcostab_data[nRows];
 800348c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003496:	4413      	add	r3, r2
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
      temp2_im = hsintab_data[nRows];
 800349c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034a4:	4413      	add	r3, r2
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
      i = istart;
 80034aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      ihi = istart + ju;
 80034b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034ba:	4413      	add	r3, r2
 80034bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      while (i < ihi) {
 80034c0:	e08d      	b.n	80035de <c_FFTImplementationCallback_doH+0x92e>
        b_j1 = i + iDelta;
 80034c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034ca:	4413      	add	r3, r2
 80034cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        temp_re_tmp = y_data[b_j1].im;
 80034d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80034da:	4413      	add	r3, r2
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	657b      	str	r3, [r7, #84]	; 0x54
        y_re_tmp = y_data[b_j1].re;
 80034e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80034ea:	4413      	add	r3, r2
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
        temp_re = temp2_re * y_re_tmp - temp2_im * temp_re_tmp;
 80034f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80034f4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80034f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034fc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003500:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800350c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        temp_im = temp2_re * temp_re_tmp + temp2_im * y_re_tmp;
 8003510:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003514:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800351c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003520:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        y_data[b_j1].re = y_data[i].re - temp_re;
 8003530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800353a:	4413      	add	r3, r2
 800353c:	ed93 7a00 	vldr	s14, [r3]
 8003540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800354a:	4413      	add	r3, r2
 800354c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003554:	edc3 7a00 	vstr	s15, [r3]
        y_data[b_j1].im = y_data[i].im - temp_im;
 8003558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003562:	4413      	add	r3, r2
 8003564:	ed93 7a01 	vldr	s14, [r3, #4]
 8003568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003572:	4413      	add	r3, r2
 8003574:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357c:	edc3 7a01 	vstr	s15, [r3, #4]
        y_data[i].re += temp_re;
 8003580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800358a:	4413      	add	r3, r2
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800359a:	4413      	add	r3, r2
 800359c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80035a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a4:	edc3 7a00 	vstr	s15, [r3]
        y_data[i].im += temp_im;
 80035a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80035b2:	4413      	add	r3, r2
 80035b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80035b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80035c2:	4413      	add	r3, r2
 80035c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035cc:	edc3 7a01 	vstr	s15, [r3, #4]
        i += hszCostab;
 80035d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035d8:	4413      	add	r3, r2
 80035da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      while (i < ihi) {
 80035de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035e6:	429a      	cmp	r2, r3
 80035e8:	f6ff af6b 	blt.w	80034c2 <c_FFTImplementationCallback_doH+0x812>
      }
      istart++;
 80035ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035f0:	3301      	adds	r3, #1
 80035f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (nRows = k; nRows < nRowsD2; nRows += k) {
 80035f6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80035fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035fe:	4413      	add	r3, r2
 8003600:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003604:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800360c:	429a      	cmp	r2, r3
 800360e:	f6ff af3d 	blt.w	800348c <c_FFTImplementationCallback_doH+0x7dc>
    }
    k /= 2;
 8003612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003616:	0fda      	lsrs	r2, r3, #31
 8003618:	4413      	add	r3, r2
 800361a:	105b      	asrs	r3, r3, #1
 800361c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    iDelta = hszCostab;
 8003620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    hszCostab += hszCostab;
 8003628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    ju -= iDelta;
 8003632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003636:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  while (k > 0) {
 8003640:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f73f aea1 	bgt.w	800338c <c_FFTImplementationCallback_doH+0x6dc>
  }
  emxFree_real32_T(&hsintab);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4618      	mov	r0, r3
 8003650:	f004 ff9f 	bl	8008592 <emxFree_real32_T>
  emxFree_real32_T(&hcostab);
 8003654:	f107 0318 	add.w	r3, r7, #24
 8003658:	4618      	mov	r0, r3
 800365a:	f004 ff9a 	bl	8008592 <emxFree_real32_T>
  iDelta = (int)z_tmp / 2;
 800365e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003662:	f7fd fb9f 	bl	8000da4 <__aeabi_d2iz>
 8003666:	4603      	mov	r3, r0
 8003668:	0fda      	lsrs	r2, r3, #31
 800366a:	4413      	add	r3, r2
 800366c:	105b      	asrs	r3, r3, #1
 800366e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  temp_re_tmp = y_data[0].re;
 8003672:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	657b      	str	r3, [r7, #84]	; 0x54
  temp_im_tmp = y_data[0].im;
 800367a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	653b      	str	r3, [r7, #80]	; 0x50
  y_data[0].re = 0.5F * ((temp_re_tmp * reconVar1_data[0].re -
 8003682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003684:	ed93 7a00 	vldr	s14, [r3]
 8003688:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800368c:	ee27 7a27 	vmul.f32	s14, s14, s15
                          temp_im_tmp * reconVar1_data[0].im) +
 8003690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003692:	edd3 6a01 	vldr	s13, [r3, #4]
 8003696:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800369a:	ee66 7aa7 	vmul.f32	s15, s13, s15
  y_data[0].re = 0.5F * ((temp_re_tmp * reconVar1_data[0].re -
 800369e:	ee37 7a67 	vsub.f32	s14, s14, s15
                         (temp_re_tmp * reconVar2_data[0].re -
 80036a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a4:	edd3 6a00 	vldr	s13, [r3]
 80036a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80036ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
                          -temp_im_tmp * reconVar2_data[0].im));
 80036b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b2:	ed93 6a01 	vldr	s12, [r3, #4]
 80036b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80036ba:	ee66 7a27 	vmul.f32	s15, s12, s15
                         (temp_re_tmp * reconVar2_data[0].re -
 80036be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                          temp_im_tmp * reconVar1_data[0].im) +
 80036c2:	ee77 7a27 	vadd.f32	s15, s14, s15
  y_data[0].re = 0.5F * ((temp_re_tmp * reconVar1_data[0].re -
 80036c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036d2:	edc3 7a00 	vstr	s15, [r3]
  y_data[0].im = 0.5F * ((temp_re_tmp * reconVar1_data[0].im +
 80036d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80036dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80036e0:	ee27 7a27 	vmul.f32	s14, s14, s15
                          temp_im_tmp * reconVar1_data[0].re) +
 80036e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e6:	edd3 6a00 	vldr	s13, [r3]
 80036ea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80036ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
  y_data[0].im = 0.5F * ((temp_re_tmp * reconVar1_data[0].im +
 80036f2:	ee37 7a27 	vadd.f32	s14, s14, s15
                         (temp_re_tmp * reconVar2_data[0].im +
 80036f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80036fc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003700:	ee66 6aa7 	vmul.f32	s13, s13, s15
                          -temp_im_tmp * reconVar2_data[0].re));
 8003704:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003708:	eeb1 6a67 	vneg.f32	s12, s15
 800370c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee66 7a27 	vmul.f32	s15, s12, s15
                         (temp_re_tmp * reconVar2_data[0].im +
 8003716:	ee76 7aa7 	vadd.f32	s15, s13, s15
                          temp_im_tmp * reconVar1_data[0].re) +
 800371a:	ee77 7a27 	vadd.f32	s15, s14, s15
  y_data[0].im = 0.5F * ((temp_re_tmp * reconVar1_data[0].im +
 800371e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003726:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800372a:	edc3 7a01 	vstr	s15, [r3, #4]
  y_data[(int)z_tmp].re = 0.5F * ((temp_re_tmp * reconVar2_data[0].re -
 800372e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003730:	ed93 7a00 	vldr	s14, [r3]
 8003734:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003738:	ee27 7a27 	vmul.f32	s14, s14, s15
                                   temp_im_tmp * reconVar2_data[0].im) +
 800373c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003742:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003746:	ee66 7aa7 	vmul.f32	s15, s13, s15
  y_data[(int)z_tmp].re = 0.5F * ((temp_re_tmp * reconVar2_data[0].re -
 800374a:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  (temp_re_tmp * reconVar1_data[0].re -
 800374e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003750:	edd3 6a00 	vldr	s13, [r3]
 8003754:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003758:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                   -temp_im_tmp * reconVar1_data[0].im));
 800375c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800375e:	ed93 6a01 	vldr	s12, [r3, #4]
 8003762:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003766:	ee66 7a27 	vmul.f32	s15, s12, s15
                                  (temp_re_tmp * reconVar1_data[0].re -
 800376a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                   temp_im_tmp * reconVar2_data[0].im) +
 800376e:	ee37 8a27 	vadd.f32	s16, s14, s15
  y_data[(int)z_tmp].re = 0.5F * ((temp_re_tmp * reconVar2_data[0].re -
 8003772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003776:	f7fd fb15 	bl	8000da4 <__aeabi_d2iz>
 800377a:	4603      	mov	r3, r0
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003782:	4413      	add	r3, r2
 8003784:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003788:	ee68 7a27 	vmul.f32	s15, s16, s15
 800378c:	edc3 7a00 	vstr	s15, [r3]
  y_data[(int)z_tmp].im = 0.5F * ((temp_re_tmp * reconVar2_data[0].im +
 8003790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003792:	ed93 7a01 	vldr	s14, [r3, #4]
 8003796:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800379a:	ee27 7a27 	vmul.f32	s14, s14, s15
                                   temp_im_tmp * reconVar2_data[0].re) +
 800379e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a0:	edd3 6a00 	vldr	s13, [r3]
 80037a4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80037a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
  y_data[(int)z_tmp].im = 0.5F * ((temp_re_tmp * reconVar2_data[0].im +
 80037ac:	ee37 7a27 	vadd.f32	s14, s14, s15
                                  (temp_re_tmp * reconVar1_data[0].im +
 80037b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80037b6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80037ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                   -temp_im_tmp * reconVar1_data[0].re));
 80037be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80037c2:	eeb1 6a67 	vneg.f32	s12, s15
 80037c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	ee66 7a27 	vmul.f32	s15, s12, s15
                                  (temp_re_tmp * reconVar1_data[0].im +
 80037d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                   temp_im_tmp * reconVar2_data[0].re) +
 80037d4:	ee37 8a27 	vadd.f32	s16, s14, s15
  y_data[(int)z_tmp].im = 0.5F * ((temp_re_tmp * reconVar2_data[0].im +
 80037d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037dc:	f7fd fae2 	bl	8000da4 <__aeabi_d2iz>
 80037e0:	4603      	mov	r3, r0
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80037e8:	4413      	add	r3, r2
 80037ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80037ee:	ee68 7a27 	vmul.f32	s15, s16, s15
 80037f2:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 2; i <= iDelta; i++) {
 80037f6:	2302      	movs	r3, #2
 80037f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037fc:	e205      	b.n	8003c0a <c_FFTImplementationCallback_doH+0xf5a>
    float temp2_im_tmp;
    temp_re_tmp = y_data[i - 1].re;
 80037fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003802:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003806:	3b01      	subs	r3, #1
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800380e:	4413      	add	r3, r2
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	657b      	str	r3, [r7, #84]	; 0x54
    temp_im_tmp = y_data[i - 1].im;
 8003814:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003818:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800381c:	3b01      	subs	r3, #1
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003824:	4413      	add	r3, r2
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	653b      	str	r3, [r7, #80]	; 0x50
    b_j1 = wrapIndex_data[i - 1];
 800382a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800382e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003832:	3b01      	subs	r3, #1
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003838:	4413      	add	r3, r2
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    temp2_im = y_data[b_j1 - 1].re;
 8003840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003844:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003848:	3b01      	subs	r3, #1
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003850:	4413      	add	r3, r2
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
    temp2_im_tmp = y_data[b_j1 - 1].im;
 8003856:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800385a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800385e:	3b01      	subs	r3, #1
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003866:	4413      	add	r3, r2
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
    y_re_tmp = reconVar1_data[i - 1].im;
 800386c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003870:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003874:	3b01      	subs	r3, #1
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800387a:	4413      	add	r3, r2
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
    b_y_re_tmp = reconVar1_data[i - 1].re;
 8003880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003884:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003888:	3b01      	subs	r3, #1
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800388e:	4413      	add	r3, r2
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
    c_y_re_tmp = reconVar2_data[i - 1].im;
 8003894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003898:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800389c:	3b01      	subs	r3, #1
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80038a2:	4413      	add	r3, r2
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	647b      	str	r3, [r7, #68]	; 0x44
    d_y_re_tmp = reconVar2_data[i - 1].re;
 80038a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80038b0:	3b01      	subs	r3, #1
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80038b6:	4413      	add	r3, r2
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	643b      	str	r3, [r7, #64]	; 0x40
    y_data[i - 1].re =
        0.5F * ((temp_re_tmp * b_y_re_tmp - temp_im_tmp * y_re_tmp) +
 80038bc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80038c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80038c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80038cc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80038d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d4:	ee37 7a67 	vsub.f32	s14, s14, s15
                (temp2_im * d_y_re_tmp - -temp2_im_tmp * c_y_re_tmp));
 80038d8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80038dc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80038e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038e4:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 80038e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80038ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_re_tmp * b_y_re_tmp - temp_im_tmp * y_re_tmp) +
 80038f4:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[i - 1].re =
 80038f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038fc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003900:	3b01      	subs	r3, #1
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003908:	4413      	add	r3, r2
        0.5F * ((temp_re_tmp * b_y_re_tmp - temp_im_tmp * y_re_tmp) +
 800390a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800390e:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[i - 1].re =
 8003912:	edc3 7a00 	vstr	s15, [r3]
    y_data[i - 1].im =
        0.5F * ((temp_re_tmp * y_re_tmp + temp_im_tmp * b_y_re_tmp) +
 8003916:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800391a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800391e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003922:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003926:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800392a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800392e:	ee37 7a27 	vadd.f32	s14, s14, s15
                (temp2_im * c_y_re_tmp + -temp2_im_tmp * d_y_re_tmp));
 8003932:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003936:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800393a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800393e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003942:	eeb1 6a67 	vneg.f32	s12, s15
 8003946:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800394a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_re_tmp * y_re_tmp + temp_im_tmp * b_y_re_tmp) +
 8003952:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[i - 1].im =
 8003956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800395a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800395e:	3b01      	subs	r3, #1
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003966:	4413      	add	r3, r2
        0.5F * ((temp_re_tmp * y_re_tmp + temp_im_tmp * b_y_re_tmp) +
 8003968:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800396c:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[i - 1].im =
 8003970:	edc3 7a01 	vstr	s15, [r3, #4]
    hszCostab = ((int)z_tmp + i) - 1;
 8003974:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003978:	f7fd fa14 	bl	8000da4 <__aeabi_d2iz>
 800397c:	4602      	mov	r2, r0
 800397e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003982:	4413      	add	r3, r2
 8003984:	3b01      	subs	r3, #1
 8003986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    y_data[hszCostab].re =
        0.5F * ((temp_re_tmp * d_y_re_tmp - temp_im_tmp * c_y_re_tmp) +
 800398a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800398e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003996:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800399a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800399e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a2:	ee37 7a67 	vsub.f32	s14, s14, s15
                (temp2_im * b_y_re_tmp - -temp2_im_tmp * y_re_tmp));
 80039a6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80039aa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039b2:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 80039b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80039ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039be:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_re_tmp * d_y_re_tmp - temp_im_tmp * c_y_re_tmp) +
 80039c2:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[hszCostab].re =
 80039c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80039d0:	4413      	add	r3, r2
        0.5F * ((temp_re_tmp * d_y_re_tmp - temp_im_tmp * c_y_re_tmp) +
 80039d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80039d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[hszCostab].re =
 80039da:	edc3 7a00 	vstr	s15, [r3]
    y_data[hszCostab].im =
        0.5F * ((temp_re_tmp * c_y_re_tmp + temp_im_tmp * d_y_re_tmp) +
 80039de:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80039e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ea:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80039ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80039f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f6:	ee37 7a27 	vadd.f32	s14, s14, s15
                (temp2_im * y_re_tmp + -temp2_im_tmp * b_y_re_tmp));
 80039fa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80039fe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003a02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a06:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a0a:	eeb1 6a67 	vneg.f32	s12, s15
 8003a0e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003a12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_re_tmp * c_y_re_tmp + temp_im_tmp * d_y_re_tmp) +
 8003a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[hszCostab].im =
 8003a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003a28:	4413      	add	r3, r2
        0.5F * ((temp_re_tmp * c_y_re_tmp + temp_im_tmp * d_y_re_tmp) +
 8003a2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[hszCostab].im =
 8003a32:	edc3 7a01 	vstr	s15, [r3, #4]
    temp_im = reconVar1_data[b_j1 - 1].im;
 8003a36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a44:	4413      	add	r3, r2
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
    temp_re = reconVar1_data[b_j1 - 1].re;
 8003a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a4e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003a52:	3b01      	subs	r3, #1
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a58:	4413      	add	r3, r2
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    y_re_tmp = reconVar2_data[b_j1 - 1].im;
 8003a5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a62:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003a66:	3b01      	subs	r3, #1
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a6c:	4413      	add	r3, r2
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp2_re = reconVar2_data[b_j1 - 1].re;
 8003a72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a76:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a80:	4413      	add	r3, r2
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38
    y_data[b_j1 - 1].re =
        0.5F * ((temp2_im * temp_re - temp2_im_tmp * temp_im) +
 8003a86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a92:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003a96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
                (temp_re_tmp * temp2_re - -temp_im_tmp * y_re_tmp));
 8003aa2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003aa6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003aaa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aae:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8003ab2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003ab6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp2_im * temp_re - temp2_im_tmp * temp_im) +
 8003abe:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[b_j1 - 1].re =
 8003ac2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ac6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003aca:	3b01      	subs	r3, #1
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003ad2:	4413      	add	r3, r2
        0.5F * ((temp2_im * temp_re - temp2_im_tmp * temp_im) +
 8003ad4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[b_j1 - 1].re =
 8003adc:	edc3 7a00 	vstr	s15, [r3]
    y_data[b_j1 - 1].im =
        0.5F * ((temp2_im * temp_im + temp2_im_tmp * temp_re) +
 8003ae0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003ae4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003af0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af8:	ee37 7a27 	vadd.f32	s14, s14, s15
                (temp_re_tmp * y_re_tmp + -temp_im_tmp * temp2_re));
 8003afc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003b00:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003b04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b08:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003b0c:	eeb1 6a67 	vneg.f32	s12, s15
 8003b10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp2_im * temp_im + temp2_im_tmp * temp_re) +
 8003b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[b_j1 - 1].im =
 8003b20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b24:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003b30:	4413      	add	r3, r2
        0.5F * ((temp2_im * temp_im + temp2_im_tmp * temp_re) +
 8003b32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b36:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[b_j1 - 1].im =
 8003b3a:	edc3 7a01 	vstr	s15, [r3, #4]
    b_j1 = (b_j1 + (int)z_tmp) - 1;
 8003b3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b42:	f7fd f92f 	bl	8000da4 <__aeabi_d2iz>
 8003b46:	4602      	mov	r2, r0
 8003b48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    y_data[b_j1].re = 0.5F * ((temp2_im * temp2_re - temp2_im_tmp * y_re_tmp) +
 8003b54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b60:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003b64:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b6c:	ee37 7a67 	vsub.f32	s14, s14, s15
                              (temp_re_tmp * temp_re - -temp_im_tmp * temp_im));
 8003b70:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003b74:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b7c:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8003b80:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003b84:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[b_j1].re = 0.5F * ((temp2_im * temp2_re - temp2_im_tmp * y_re_tmp) +
 8003b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003b9a:	4413      	add	r3, r2
 8003b9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba4:	edc3 7a00 	vstr	s15, [r3]
    y_data[b_j1].im = 0.5F * ((temp2_im * y_re_tmp + temp2_im_tmp * temp2_re) +
 8003ba8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003bb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
                              (temp_re_tmp * temp_im + -temp_im_tmp * temp_re));
 8003bc4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003bc8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003bcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bd0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003bd4:	eeb1 6a67 	vneg.f32	s12, s15
 8003bd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003bdc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[b_j1].im = 0.5F * ((temp2_im * y_re_tmp + temp2_im_tmp * temp2_re) +
 8003be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003bf2:	4413      	add	r3, r2
 8003bf4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bfc:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 2; i <= iDelta; i++) {
 8003c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c04:	3301      	adds	r3, #1
 8003c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c12:	429a      	cmp	r2, r3
 8003c14:	f77f adf3 	ble.w	80037fe <c_FFTImplementationCallback_doH+0xb4e>
  }
  emxFree_int32_T(&wrapIndex);
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f004 fc8e 	bl	800853e <emxFree_int32_T>
  if (iDelta != 0) {
 8003c22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80e2 	beq.w	8003df0 <c_FFTImplementationCallback_doH+0x1140>
    temp_re_tmp = y_data[iDelta].re;
 8003c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c36:	4413      	add	r3, r2
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	657b      	str	r3, [r7, #84]	; 0x54
    temp_im_tmp = y_data[iDelta].im;
 8003c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c46:	4413      	add	r3, r2
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
    y_re_tmp = reconVar1_data[iDelta].im;
 8003c4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c54:	4413      	add	r3, r2
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	64fb      	str	r3, [r7, #76]	; 0x4c
    b_y_re_tmp = reconVar1_data[iDelta].re;
 8003c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c62:	4413      	add	r3, r2
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	64bb      	str	r3, [r7, #72]	; 0x48
    c_y_re_tmp = reconVar2_data[iDelta].im;
 8003c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c70:	4413      	add	r3, r2
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
    d_y_re_tmp = reconVar2_data[iDelta].re;
 8003c76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c7e:	4413      	add	r3, r2
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	643b      	str	r3, [r7, #64]	; 0x40
    temp_re = temp_re_tmp * d_y_re_tmp;
 8003c84:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003c88:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    temp2_re = temp_re_tmp * b_y_re_tmp;
 8003c94:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003c98:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    y_data[iDelta].re = 0.5F * ((temp2_re - temp_im_tmp * y_re_tmp) +
 8003ca4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003ca8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
                                (temp_re - -temp_im_tmp * c_y_re_tmp));
 8003cb8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003cbc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003cc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cc4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[iDelta].re = 0.5F * ((temp2_re - temp_im_tmp * y_re_tmp) +
 8003ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003cda:	4413      	add	r3, r2
 8003cdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ce4:	edc3 7a00 	vstr	s15, [r3]
    temp2_im = temp_re_tmp * c_y_re_tmp;
 8003ce8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003cec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    temp_im = temp_re_tmp * y_re_tmp;
 8003cf8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003cfc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d04:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    y_data[iDelta].im = 0.5F * ((temp_im + temp_im_tmp * b_y_re_tmp) +
 8003d08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003d0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d14:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003d18:	ee37 7a27 	vadd.f32	s14, s14, s15
                                (temp2_im + -temp_im_tmp * d_y_re_tmp));
 8003d1c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003d20:	eef1 6a67 	vneg.f32	s13, s15
 8003d24:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003d28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[iDelta].im = 0.5F * ((temp_im + temp_im_tmp * b_y_re_tmp) +
 8003d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003d42:	4413      	add	r3, r2
 8003d44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d4c:	edc3 7a01 	vstr	s15, [r3, #4]
    b_j1 = (int)z_tmp + iDelta;
 8003d50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d54:	f7fd f826 	bl	8000da4 <__aeabi_d2iz>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d5e:	4413      	add	r3, r2
 8003d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    y_data[b_j1].re = 0.5F * ((temp_re - temp_im_tmp * c_y_re_tmp) +
 8003d64:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003d68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d70:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003d74:	ee37 7a67 	vsub.f32	s14, s14, s15
                              (temp2_re - -temp_im_tmp * y_re_tmp));
 8003d78:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003d7c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d84:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[b_j1].re = 0.5F * ((temp_re - temp_im_tmp * c_y_re_tmp) +
 8003d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003d9a:	4413      	add	r3, r2
 8003d9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da4:	edc3 7a00 	vstr	s15, [r3]
    y_data[b_j1].im = 0.5F * ((temp2_im + temp_im_tmp * d_y_re_tmp) +
 8003da8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003dac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003db4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003db8:	ee37 7a27 	vadd.f32	s14, s14, s15
                              (temp_im + -temp_im_tmp * b_y_re_tmp));
 8003dbc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003dc0:	eef1 6a67 	vneg.f32	s13, s15
 8003dc4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003dc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003dcc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[b_j1].im = 0.5F * ((temp2_im + temp_im_tmp * d_y_re_tmp) +
 8003dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003de2:	4413      	add	r3, r2
 8003de4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dec:	edc3 7a01 	vstr	s15, [r3, #4]
  }
  emxFree_creal32_T(&reconVar2);
 8003df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f004 fb78 	bl	80084ea <emxFree_creal32_T>
  emxFree_creal32_T(&reconVar1);
 8003dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f004 fb73 	bl	80084ea <emxFree_creal32_T>
}
 8003e04:	bf00      	nop
 8003e06:	37c4      	adds	r7, #196	; 0xc4
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	ecbd 8b02 	vpop	{d8}
 8003e0e:	bd90      	pop	{r4, r7, pc}

08003e10 <c_FFTImplementationCallback_dob>:
void c_FFTImplementationCallback_dob(const emxArray_real32_T *x, int n2blue,
                                     int nfft, const emxArray_real32_T *costab,
                                     const emxArray_real32_T *sintab,
                                     const emxArray_real32_T *sintabinv,
                                     emxArray_creal32_T *y)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b0a4      	sub	sp, #144	; 0x90
 8003e14:	af06      	add	r7, sp, #24
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  int k;
  int minNrowsNx;
  int nInt2;
  int nInt2m1;
  int rt;
  sintab_data = sintab->data;
 8003e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  costab_data = costab->data;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  x_data = x->data;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
  emxInit_creal32_T(&wwc, 1);
 8003e32:	f107 0310 	add.w	r3, r7, #16
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f004 fc32 	bl	80086a2 <emxInit_creal32_T>
  if ((nfft != 1) && ((nfft & 1) == 0)) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	f000 80ba 	beq.w	8003fba <c_FFTImplementationCallback_dob+0x1aa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 80b4 	bne.w	8003fba <c_FFTImplementationCallback_dob+0x1aa>
    j = nfft / 2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0fda      	lsrs	r2, r3, #31
 8003e56:	4413      	add	r3, r2
 8003e58:	105b      	asrs	r3, r3, #1
 8003e5a:	65bb      	str	r3, [r7, #88]	; 0x58
    nInt2m1 = (j + j) - 1;
 8003e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
    ihi = wwc->size[0];
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    wwc->size[0] = nInt2m1;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e72:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(wwc, ihi);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f004 f974 	bl	8008166 <emxEnsureCapacity_creal32_T>
    wwc_data = wwc->data;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	673b      	str	r3, [r7, #112]	; 0x70
    rt = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	647b      	str	r3, [r7, #68]	; 0x44
    wwc_data[j - 1].re = 1.0F;
 8003e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e8a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e94:	4413      	add	r3, r2
 8003e96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e9a:	601a      	str	r2, [r3, #0]
    wwc_data[j - 1].im = 0.0F;
 8003e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	605a      	str	r2, [r3, #4]
    nInt2 = j << 1;
 8003eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (k = 0; k <= j - 2; k++) {
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	657b      	str	r3, [r7, #84]	; 0x54
 8003eba:	e059      	b.n	8003f70 <c_FFTImplementationCallback_dob+0x160>
      minNrowsNx = ((k + 1) << 1) - 1;
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	653b      	str	r3, [r7, #80]	; 0x50
      if (nInt2 - rt <= minNrowsNx) {
 8003ec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	db06      	blt.n	8003ee0 <c_FFTImplementationCallback_dob+0xd0>
        rt += minNrowsNx - nInt2;
 8003ed2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eda:	4413      	add	r3, r2
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ede:	e003      	b.n	8003ee8 <c_FFTImplementationCallback_dob+0xd8>
      } else {
        rt += minNrowsNx;
 8003ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee4:	4413      	add	r3, r2
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
      }
      nt_im = -3.14159274F * (float)rt / (float)j;
 8003ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef2:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8004174 <c_FFTImplementationCallback_dob+0x364>
 8003ef6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f08:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
      if (nt_im == 0.0F) {
 8003f0c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003f10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	d106      	bne.n	8003f28 <c_FFTImplementationCallback_dob+0x118>
        nt_re = 1.0F;
 8003f1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f1e:	667b      	str	r3, [r7, #100]	; 0x64
        nt_im = 0.0F;
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f26:	e00b      	b.n	8003f40 <c_FFTImplementationCallback_dob+0x130>
      } else {
        nt_re = cosf(nt_im);
 8003f28:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8003f2c:	f01a fc50 	bl	801e7d0 <cosf>
 8003f30:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
        nt_im = sinf(nt_im);
 8003f34:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8003f38:	f01a fc92 	bl	801e860 <sinf>
 8003f3c:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
      }
      ihi = (j - k) - 2;
 8003f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	3b02      	subs	r3, #2
 8003f48:	65fb      	str	r3, [r7, #92]	; 0x5c
      wwc_data[ihi].re = nt_re;
 8003f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f50:	4413      	add	r3, r2
 8003f52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f54:	601a      	str	r2, [r3, #0]
      wwc_data[ihi].im = -nt_im;
 8003f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f5c:	4413      	add	r3, r2
 8003f5e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003f62:	eef1 7a67 	vneg.f32	s15, s15
 8003f66:	edc3 7a01 	vstr	s15, [r3, #4]
    for (k = 0; k <= j - 2; k++) {
 8003f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f72:	3b01      	subs	r3, #1
 8003f74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f76:	429a      	cmp	r2, r3
 8003f78:	dba0      	blt.n	8003ebc <c_FFTImplementationCallback_dob+0xac>
    }
    ihi = nInt2m1 - 1;
 8003f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (k = ihi; k >= j; k--) {
 8003f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f82:	657b      	str	r3, [r7, #84]	; 0x54
 8003f84:	e014      	b.n	8003fb0 <c_FFTImplementationCallback_dob+0x1a0>
      wwc_data[k] = wwc_data[(nInt2m1 - k) - 1];
 8003f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003f90:	3b01      	subs	r3, #1
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f96:	18d1      	adds	r1, r2, r3
 8003f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f9e:	4413      	add	r3, r2
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fa6:	e883 0003 	stmia.w	r3, {r0, r1}
    for (k = ihi; k >= j; k--) {
 8003faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fac:	3b01      	subs	r3, #1
 8003fae:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	dae6      	bge.n	8003f86 <c_FFTImplementationCallback_dob+0x176>
  if ((nfft != 1) && ((nfft & 1) == 0)) {
 8003fb8:	e0ad      	b.n	8004116 <c_FFTImplementationCallback_dob+0x306>
    }
  } else {
    nInt2m1 = (nfft + nfft) - 1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	64bb      	str	r3, [r7, #72]	; 0x48
    ihi = wwc->size[0];
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    wwc->size[0] = nInt2m1;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd0:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(wwc, ihi);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 f8c5 	bl	8008166 <emxEnsureCapacity_creal32_T>
    wwc_data = wwc->data;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	673b      	str	r3, [r7, #112]	; 0x70
    rt = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	647b      	str	r3, [r7, #68]	; 0x44
    wwc_data[nfft - 1].re = 1.0F;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003fec:	3b01      	subs	r3, #1
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ff8:	601a      	str	r2, [r3, #0]
    wwc_data[nfft - 1].im = 0.0F;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004000:	3b01      	subs	r3, #1
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004006:	4413      	add	r3, r2
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	605a      	str	r2, [r3, #4]
    nInt2 = nfft << 1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (k = 0; k <= nfft - 2; k++) {
 8004014:	2300      	movs	r3, #0
 8004016:	657b      	str	r3, [r7, #84]	; 0x54
 8004018:	e059      	b.n	80040ce <c_FFTImplementationCallback_dob+0x2be>
      minNrowsNx = ((k + 1) << 1) - 1;
 800401a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401c:	3301      	adds	r3, #1
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	653b      	str	r3, [r7, #80]	; 0x50
      if (nInt2 - rt <= minNrowsNx) {
 8004024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800402c:	429a      	cmp	r2, r3
 800402e:	db06      	blt.n	800403e <c_FFTImplementationCallback_dob+0x22e>
        rt += minNrowsNx - nInt2;
 8004030:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004038:	4413      	add	r3, r2
 800403a:	647b      	str	r3, [r7, #68]	; 0x44
 800403c:	e003      	b.n	8004046 <c_FFTImplementationCallback_dob+0x236>
      } else {
        rt += minNrowsNx;
 800403e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004042:	4413      	add	r3, r2
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
      }
      nt_im = -3.14159274F * (float)rt / (float)nfft;
 8004046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004050:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004174 <c_FFTImplementationCallback_dob+0x364>
 8004054:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004066:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
      if (nt_im == 0.0F) {
 800406a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800406e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004076:	d106      	bne.n	8004086 <c_FFTImplementationCallback_dob+0x276>
        nt_re = 1.0F;
 8004078:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800407c:	667b      	str	r3, [r7, #100]	; 0x64
        nt_im = 0.0F;
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	66bb      	str	r3, [r7, #104]	; 0x68
 8004084:	e00b      	b.n	800409e <c_FFTImplementationCallback_dob+0x28e>
      } else {
        nt_re = cosf(nt_im);
 8004086:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 800408a:	f01a fba1 	bl	801e7d0 <cosf>
 800408e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
        nt_im = sinf(nt_im);
 8004092:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8004096:	f01a fbe3 	bl	801e860 <sinf>
 800409a:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
      }
      ihi = (nfft - k) - 2;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	3b02      	subs	r3, #2
 80040a6:	65fb      	str	r3, [r7, #92]	; 0x5c
      wwc_data[ihi].re = nt_re;
 80040a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040ae:	4413      	add	r3, r2
 80040b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040b2:	601a      	str	r2, [r3, #0]
      wwc_data[ihi].im = -nt_im;
 80040b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040ba:	4413      	add	r3, r2
 80040bc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80040c0:	eef1 7a67 	vneg.f32	s15, s15
 80040c4:	edc3 7a01 	vstr	s15, [r3, #4]
    for (k = 0; k <= nfft - 2; k++) {
 80040c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ca:	3301      	adds	r3, #1
 80040cc:	657b      	str	r3, [r7, #84]	; 0x54
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dba0      	blt.n	800401a <c_FFTImplementationCallback_dob+0x20a>
    }
    ihi = nInt2m1 - 1;
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	3b01      	subs	r3, #1
 80040dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (k = ihi; k >= nfft; k--) {
 80040de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e0:	657b      	str	r3, [r7, #84]	; 0x54
 80040e2:	e014      	b.n	800410e <c_FFTImplementationCallback_dob+0x2fe>
      wwc_data[k] = wwc_data[(nInt2m1 - k) - 1];
 80040e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80040ee:	3b01      	subs	r3, #1
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040f4:	18d1      	adds	r1, r2, r3
 80040f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040fc:	4413      	add	r3, r2
 80040fe:	460a      	mov	r2, r1
 8004100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004104:	e883 0003 	stmia.w	r3, {r0, r1}
    for (k = ihi; k >= nfft; k--) {
 8004108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410a:	3b01      	subs	r3, #1
 800410c:	657b      	str	r3, [r7, #84]	; 0x54
 800410e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	dae6      	bge.n	80040e4 <c_FFTImplementationCallback_dob+0x2d4>
    }
  }
  ihi = y->size[0];
 8004116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	65fb      	str	r3, [r7, #92]	; 0x5c
  y->size[0] = nfft;
 8004120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(y, ihi);
 800412a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800412c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004130:	f004 f819 	bl	8008166 <emxEnsureCapacity_creal32_T>
  y_data = y->data;
 8004134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (nfft > x->size[0]) {
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	dd2c      	ble.n	80041a2 <c_FFTImplementationCallback_dob+0x392>
    ihi = y->size[0];
 8004148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	65fb      	str	r3, [r7, #92]	; 0x5c
    y->size[0] = nfft;
 8004152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(y, ihi);
 800415c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800415e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004162:	f004 f800 	bl	8008166 <emxEnsureCapacity_creal32_T>
    y_data = y->data;
 8004166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (ihi = 0; ihi < nfft; ihi++) {
 800416e:	2300      	movs	r3, #0
 8004170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004172:	e012      	b.n	800419a <c_FFTImplementationCallback_dob+0x38a>
 8004174:	c0490fdb 	.word	0xc0490fdb
      y_data[ihi].re = 0.0F;
 8004178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800417e:	4413      	add	r3, r2
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
      y_data[ihi].im = 0.0F;
 8004186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800418c:	4413      	add	r3, r2
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
    for (ihi = 0; ihi < nfft; ihi++) {
 8004194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004196:	3301      	adds	r3, #1
 8004198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800419a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	dbea      	blt.n	8004178 <c_FFTImplementationCallback_dob+0x368>
    }
  }
  emxInit_creal32_T(&fy, 1);
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f004 fa7a 	bl	80086a2 <emxInit_creal32_T>
  emxInit_creal32_T(&fv, 1);
 80041ae:	f107 0318 	add.w	r3, r7, #24
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f004 fa74 	bl	80086a2 <emxInit_creal32_T>
  if ((n2blue != 1) && ((nfft & 1) == 0)) {
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d01d      	beq.n	80041fc <c_FFTImplementationCallback_dob+0x3ec>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d118      	bne.n	80041fc <c_FFTImplementationCallback_dob+0x3ec>
    d_FFTImplementationCallback_doH(x, y, x->size[0], nfft, n2blue, wwc, costab,
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80041d6:	9205      	str	r2, [sp, #20]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	9204      	str	r2, [sp, #16]
 80041dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041e0:	9203      	str	r2, [sp, #12]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	9202      	str	r2, [sp, #8]
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	460a      	mov	r2, r1
 80041f0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7fd fa7f 	bl	80016f8 <d_FFTImplementationCallback_doH>
 80041fa:	e384      	b.n	8004906 <c_FFTImplementationCallback_dob+0xaf6>
    float b_nt_re_tmp;
    float twid_im;
    float twid_re;
    int nRowsD2;
    int nt_re_tmp;
    minNrowsNx = x->size[0];
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	653b      	str	r3, [r7, #80]	; 0x50
    if (nfft <= minNrowsNx) {
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	429a      	cmp	r2, r3
 800420a:	dc01      	bgt.n	8004210 <c_FFTImplementationCallback_dob+0x400>
      minNrowsNx = nfft;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	653b      	str	r3, [r7, #80]	; 0x50
    }
    for (k = 0; k < minNrowsNx; k++) {
 8004210:	2300      	movs	r3, #0
 8004212:	657b      	str	r3, [r7, #84]	; 0x54
 8004214:	e031      	b.n	800427a <c_FFTImplementationCallback_dob+0x46a>
      nt_re_tmp = (nfft + k) - 1;
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421a:	4413      	add	r3, r2
 800421c:	3b01      	subs	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
      y_data[k].re = wwc_data[nt_re_tmp].re * x_data[k];
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004226:	4413      	add	r3, r2
 8004228:	ed93 7a00 	vldr	s14, [r3]
 800422c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004232:	4413      	add	r3, r2
 8004234:	edd3 7a00 	vldr	s15, [r3]
 8004238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800423e:	4413      	add	r3, r2
 8004240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004244:	edc3 7a00 	vstr	s15, [r3]
      y_data[k].im = wwc_data[nt_re_tmp].im * -x_data[k];
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800424e:	4413      	add	r3, r2
 8004250:	ed93 7a01 	vldr	s14, [r3, #4]
 8004254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800425a:	4413      	add	r3, r2
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	eef1 7a67 	vneg.f32	s15, s15
 8004264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800426a:	4413      	add	r3, r2
 800426c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004270:	edc3 7a01 	vstr	s15, [r3, #4]
    for (k = 0; k < minNrowsNx; k++) {
 8004274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004276:	3301      	adds	r3, #1
 8004278:	657b      	str	r3, [r7, #84]	; 0x54
 800427a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800427c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427e:	429a      	cmp	r2, r3
 8004280:	dbc9      	blt.n	8004216 <c_FFTImplementationCallback_dob+0x406>
    }
    ihi = minNrowsNx + 1;
 8004282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004284:	3301      	adds	r3, #1
 8004286:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (k = ihi; k <= nfft; k++) {
 8004288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428a:	657b      	str	r3, [r7, #84]	; 0x54
 800428c:	e016      	b.n	80042bc <c_FFTImplementationCallback_dob+0x4ac>
      y_data[k - 1].re = 0.0F;
 800428e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004290:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004294:	3b01      	subs	r3, #1
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800429a:	4413      	add	r3, r2
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
      y_data[k - 1].im = 0.0F;
 80042a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80042a8:	3b01      	subs	r3, #1
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042ae:	4413      	add	r3, r2
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	605a      	str	r2, [r3, #4]
    for (k = ihi; k <= nfft; k++) {
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	3301      	adds	r3, #1
 80042ba:	657b      	str	r3, [r7, #84]	; 0x54
 80042bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	dde4      	ble.n	800428e <c_FFTImplementationCallback_dob+0x47e>
    }
    ihi = fy->size[0];
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    fy->size[0] = n2blue;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(fy, ihi);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80042d8:	4618      	mov	r0, r3
 80042da:	f003 ff44 	bl	8008166 <emxEnsureCapacity_creal32_T>
    fy_data = fy->data;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	677b      	str	r3, [r7, #116]	; 0x74
    if (n2blue > y->size[0]) {
 80042e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dd27      	ble.n	8004342 <c_FFTImplementationCallback_dob+0x532>
      ihi = fy->size[0];
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      fy->size[0] = n2blue;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_creal32_T(fy, ihi);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004306:	4618      	mov	r0, r3
 8004308:	f003 ff2d 	bl	8008166 <emxEnsureCapacity_creal32_T>
      fy_data = fy->data;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	677b      	str	r3, [r7, #116]	; 0x74
      for (ihi = 0; ihi < n2blue; ihi++) {
 8004312:	2300      	movs	r3, #0
 8004314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004316:	e010      	b.n	800433a <c_FFTImplementationCallback_dob+0x52a>
        fy_data[ihi].re = 0.0F;
 8004318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800431e:	4413      	add	r3, r2
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
        fy_data[ihi].im = 0.0F;
 8004326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800432c:	4413      	add	r3, r2
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	605a      	str	r2, [r3, #4]
      for (ihi = 0; ihi < n2blue; ihi++) {
 8004334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004336:	3301      	adds	r3, #1
 8004338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800433a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	dbea      	blt.n	8004318 <c_FFTImplementationCallback_dob+0x508>
      }
    }
    nInt2m1 = y->size[0];
 8004342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (nInt2m1 > n2blue) {
 800434c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	dd01      	ble.n	8004358 <c_FFTImplementationCallback_dob+0x548>
      nInt2m1 = n2blue;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    rt = n2blue - 2;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	3b02      	subs	r3, #2
 800435c:	647b      	str	r3, [r7, #68]	; 0x44
    nRowsD2 = n2blue / 2;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	0fda      	lsrs	r2, r3, #31
 8004362:	4413      	add	r3, r2
 8004364:	105b      	asrs	r3, r3, #1
 8004366:	633b      	str	r3, [r7, #48]	; 0x30
    k = nRowsD2 / 2;
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	0fda      	lsrs	r2, r3, #31
 800436c:	4413      	add	r3, r2
 800436e:	105b      	asrs	r3, r3, #1
 8004370:	657b      	str	r3, [r7, #84]	; 0x54
    minNrowsNx = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	653b      	str	r3, [r7, #80]	; 0x50
    nInt2 = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (i = 0; i <= nInt2m1 - 2; i++) {
 800437a:	2300      	movs	r3, #0
 800437c:	663b      	str	r3, [r7, #96]	; 0x60
 800437e:	e02b      	b.n	80043d8 <c_FFTImplementationCallback_dob+0x5c8>
      bool tst;
      fy_data[minNrowsNx] = y_data[i];
 8004380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004386:	18d1      	adds	r1, r2, r3
 8004388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800438e:	4413      	add	r3, r2
 8004390:	460a      	mov	r2, r1
 8004392:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004396:	e883 0003 	stmia.w	r3, {r0, r1}
      minNrowsNx = n2blue;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
      tst = true;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      while (tst) {
 80043a4:	e00f      	b.n	80043c6 <c_FFTImplementationCallback_dob+0x5b6>
        minNrowsNx >>= 1;
 80043a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a8:	105b      	asrs	r3, r3, #1
 80043aa:	653b      	str	r3, [r7, #80]	; 0x50
        nInt2 ^= minNrowsNx;
 80043ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b0:	4053      	eors	r3, r2
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
        tst = ((nInt2 & minNrowsNx) == 0);
 80043b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      while (tst) {
 80043c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1eb      	bne.n	80043a6 <c_FFTImplementationCallback_dob+0x596>
      }
      minNrowsNx = nInt2;
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	653b      	str	r3, [r7, #80]	; 0x50
    for (i = 0; i <= nInt2m1 - 2; i++) {
 80043d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d4:	3301      	adds	r3, #1
 80043d6:	663b      	str	r3, [r7, #96]	; 0x60
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	3b01      	subs	r3, #1
 80043dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043de:	429a      	cmp	r2, r3
 80043e0:	dbce      	blt.n	8004380 <c_FFTImplementationCallback_dob+0x570>
    }
    fy_data[minNrowsNx] = y_data[nInt2m1 - 1];
 80043e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80043e8:	3b01      	subs	r3, #1
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043ee:	18d1      	adds	r1, r2, r3
 80043f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80043f6:	4413      	add	r3, r2
 80043f8:	460a      	mov	r2, r1
 80043fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043fe:	e883 0003 	stmia.w	r3, {r0, r1}
    if (n2blue > 1) {
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b01      	cmp	r3, #1
 8004406:	dd55      	ble.n	80044b4 <c_FFTImplementationCallback_dob+0x6a4>
      for (i = 0; i <= rt; i += 2) {
 8004408:	2300      	movs	r3, #0
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
 800440c:	e04e      	b.n	80044ac <c_FFTImplementationCallback_dob+0x69c>
        b_nt_re_tmp = fy_data[i + 1].re;
 800440e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004410:	3301      	adds	r3, #1
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004416:	4413      	add	r3, r2
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
        nt_im = fy_data[i + 1].im;
 800441c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441e:	3301      	adds	r3, #1
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004424:	4413      	add	r3, r2
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	66bb      	str	r3, [r7, #104]	; 0x68
        twid_im = fy_data[i].re;
 800442a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004430:	4413      	add	r3, r2
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
        nt_re = fy_data[i].im;
 8004436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800443c:	4413      	add	r3, r2
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	667b      	str	r3, [r7, #100]	; 0x64
        fy_data[i + 1].re = twid_im - b_nt_re_tmp;
 8004442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004444:	3301      	adds	r3, #1
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800444a:	4413      	add	r3, r2
 800444c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004450:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004458:	edc3 7a00 	vstr	s15, [r3]
        fy_data[i + 1].im = nt_re - nt_im;
 800445c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800445e:	3301      	adds	r3, #1
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004464:	4413      	add	r3, r2
 8004466:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800446a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800446e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004472:	edc3 7a01 	vstr	s15, [r3, #4]
        fy_data[i].re = twid_im + b_nt_re_tmp;
 8004476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800447c:	4413      	add	r3, r2
 800447e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004482:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800448a:	edc3 7a00 	vstr	s15, [r3]
        fy_data[i].im = nt_re + nt_im;
 800448e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004494:	4413      	add	r3, r2
 8004496:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800449a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800449e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a2:	edc3 7a01 	vstr	s15, [r3, #4]
      for (i = 0; i <= rt; i += 2) {
 80044a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044a8:	3302      	adds	r3, #2
 80044aa:	663b      	str	r3, [r7, #96]	; 0x60
 80044ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b0:	429a      	cmp	r2, r3
 80044b2:	ddac      	ble.n	800440e <c_FFTImplementationCallback_dob+0x5fe>
      }
    }
    minNrowsNx = 2;
 80044b4:	2302      	movs	r3, #2
 80044b6:	653b      	str	r3, [r7, #80]	; 0x50
    nInt2m1 = 4;
 80044b8:	2304      	movs	r3, #4
 80044ba:	64bb      	str	r3, [r7, #72]	; 0x48
    rt = ((k - 1) << 2) + 1;
 80044bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044be:	3b01      	subs	r3, #1
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	3301      	adds	r3, #1
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
    while (k > 0) {
 80044c6:	e104      	b.n	80046d2 <c_FFTImplementationCallback_dob+0x8c2>
      for (i = 0; i < rt; i += nInt2m1) {
 80044c8:	2300      	movs	r3, #0
 80044ca:	663b      	str	r3, [r7, #96]	; 0x60
 80044cc:	e053      	b.n	8004576 <c_FFTImplementationCallback_dob+0x766>
        nt_re_tmp = i + minNrowsNx;
 80044ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d2:	4413      	add	r3, r2
 80044d4:	61fb      	str	r3, [r7, #28]
        nt_re = fy_data[nt_re_tmp].re;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80044dc:	4413      	add	r3, r2
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	667b      	str	r3, [r7, #100]	; 0x64
        nt_im = fy_data[nt_re_tmp].im;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80044e8:	4413      	add	r3, r2
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	66bb      	str	r3, [r7, #104]	; 0x68
        fy_data[nt_re_tmp].re = fy_data[i].re - nt_re;
 80044ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80044f4:	4413      	add	r3, r2
 80044f6:	ed93 7a00 	vldr	s14, [r3]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004500:	4413      	add	r3, r2
 8004502:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450a:	edc3 7a00 	vstr	s15, [r3]
        fy_data[nt_re_tmp].im = fy_data[i].im - nt_im;
 800450e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004514:	4413      	add	r3, r2
 8004516:	ed93 7a01 	vldr	s14, [r3, #4]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004520:	4413      	add	r3, r2
 8004522:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800452a:	edc3 7a01 	vstr	s15, [r3, #4]
        fy_data[i].re += nt_re;
 800452e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004534:	4413      	add	r3, r2
 8004536:	ed93 7a00 	vldr	s14, [r3]
 800453a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004540:	4413      	add	r3, r2
 8004542:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800454a:	edc3 7a00 	vstr	s15, [r3]
        fy_data[i].im += nt_im;
 800454e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004554:	4413      	add	r3, r2
 8004556:	ed93 7a01 	vldr	s14, [r3, #4]
 800455a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004560:	4413      	add	r3, r2
 8004562:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800456a:	edc3 7a01 	vstr	s15, [r3, #4]
      for (i = 0; i < rt; i += nInt2m1) {
 800456e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004572:	4413      	add	r3, r2
 8004574:	663b      	str	r3, [r7, #96]	; 0x60
 8004576:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457a:	429a      	cmp	r2, r3
 800457c:	dba7      	blt.n	80044ce <c_FFTImplementationCallback_dob+0x6be>
      }
      nInt2 = 1;
 800457e:	2301      	movs	r3, #1
 8004580:	64fb      	str	r3, [r7, #76]	; 0x4c
      for (j = k; j < nRowsD2; j += k) {
 8004582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004584:	65bb      	str	r3, [r7, #88]	; 0x58
 8004586:	e091      	b.n	80046ac <c_FFTImplementationCallback_dob+0x89c>
        twid_re = costab_data[j];
 8004588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800458e:	4413      	add	r3, r2
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	623b      	str	r3, [r7, #32]
        twid_im = sintab_data[j];
 8004594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800459a:	4413      	add	r3, r2
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
        i = nInt2;
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	663b      	str	r3, [r7, #96]	; 0x60
        ihi = nInt2 + rt;
 80045a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a8:	4413      	add	r3, r2
 80045aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (i < ihi) {
 80045ac:	e073      	b.n	8004696 <c_FFTImplementationCallback_dob+0x886>
          nt_re_tmp = i + minNrowsNx;
 80045ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b2:	4413      	add	r3, r2
 80045b4:	61fb      	str	r3, [r7, #28]
          b_nt_re_tmp = fy_data[nt_re_tmp].im;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045bc:	4413      	add	r3, r2
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          nt_im = fy_data[nt_re_tmp].re;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045c8:	4413      	add	r3, r2
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	66bb      	str	r3, [r7, #104]	; 0x68
          nt_re = twid_re * nt_im - twid_im * b_nt_re_tmp;
 80045ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80045d2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80045d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045da:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80045de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80045e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ea:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          nt_im = twid_re * b_nt_re_tmp + twid_im * nt_im;
 80045ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80045f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80045f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045fa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80045fe:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
          fy_data[nt_re_tmp].re = fy_data[i].re - nt_re;
 800460e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004614:	4413      	add	r3, r2
 8004616:	ed93 7a00 	vldr	s14, [r3]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004620:	4413      	add	r3, r2
 8004622:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800462a:	edc3 7a00 	vstr	s15, [r3]
          fy_data[nt_re_tmp].im = fy_data[i].im - nt_im;
 800462e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004634:	4413      	add	r3, r2
 8004636:	ed93 7a01 	vldr	s14, [r3, #4]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004640:	4413      	add	r3, r2
 8004642:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800464a:	edc3 7a01 	vstr	s15, [r3, #4]
          fy_data[i].re += nt_re;
 800464e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004654:	4413      	add	r3, r2
 8004656:	ed93 7a00 	vldr	s14, [r3]
 800465a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004660:	4413      	add	r3, r2
 8004662:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800466a:	edc3 7a00 	vstr	s15, [r3]
          fy_data[i].im += nt_im;
 800466e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004674:	4413      	add	r3, r2
 8004676:	ed93 7a01 	vldr	s14, [r3, #4]
 800467a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004680:	4413      	add	r3, r2
 8004682:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800468a:	edc3 7a01 	vstr	s15, [r3, #4]
          i += nInt2m1;
 800468e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004692:	4413      	add	r3, r2
 8004694:	663b      	str	r3, [r7, #96]	; 0x60
        while (i < ihi) {
 8004696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469a:	429a      	cmp	r2, r3
 800469c:	db87      	blt.n	80045ae <c_FFTImplementationCallback_dob+0x79e>
        }
        nInt2++;
 800469e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a0:	3301      	adds	r3, #1
 80046a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      for (j = k; j < nRowsD2; j += k) {
 80046a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a8:	4413      	add	r3, r2
 80046aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80046ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	429a      	cmp	r2, r3
 80046b2:	f6ff af69 	blt.w	8004588 <c_FFTImplementationCallback_dob+0x778>
      }
      k /= 2;
 80046b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b8:	0fda      	lsrs	r2, r3, #31
 80046ba:	4413      	add	r3, r2
 80046bc:	105b      	asrs	r3, r3, #1
 80046be:	657b      	str	r3, [r7, #84]	; 0x54
      minNrowsNx = nInt2m1;
 80046c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c2:	653b      	str	r3, [r7, #80]	; 0x50
      nInt2m1 += nInt2m1;
 80046c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	64bb      	str	r3, [r7, #72]	; 0x48
      rt -= minNrowsNx;
 80046ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	647b      	str	r3, [r7, #68]	; 0x44
    while (k > 0) {
 80046d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f73f aef7 	bgt.w	80044c8 <c_FFTImplementationCallback_dob+0x6b8>
    }
    c_FFTImplementationCallback_r2b(wwc, n2blue, costab, sintab, fv);
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	f7fc fdea 	bl	80012c0 <c_FFTImplementationCallback_r2b>
    fv_data = fv->data;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
    minNrowsNx = fy->size[0];
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
    for (ihi = 0; ihi < minNrowsNx; ihi++) {
 80046fa:	2300      	movs	r3, #0
 80046fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046fe:	e042      	b.n	8004786 <c_FFTImplementationCallback_dob+0x976>
      twid_im = fy_data[ihi].re;
 8004700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004706:	4413      	add	r3, r2
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
      nt_im = fv_data[ihi].im;
 800470c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004712:	4413      	add	r3, r2
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	66bb      	str	r3, [r7, #104]	; 0x68
      nt_re = fy_data[ihi].im;
 8004718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800471e:	4413      	add	r3, r2
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	667b      	str	r3, [r7, #100]	; 0x64
      twid_re = fv_data[ihi].re;
 8004724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472a:	4413      	add	r3, r2
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	623b      	str	r3, [r7, #32]
      fy_data[ihi].re = twid_im * twid_re - nt_re * nt_im;
 8004730:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004734:	edd7 7a08 	vldr	s15, [r7, #32]
 8004738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800473c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8004740:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800474e:	4413      	add	r3, r2
 8004750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004754:	edc3 7a00 	vstr	s15, [r3]
      fy_data[ihi].im = twid_im * nt_im + nt_re * twid_re;
 8004758:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800475c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004764:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8004768:	edd7 7a08 	vldr	s15, [r7, #32]
 800476c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004776:	4413      	add	r3, r2
 8004778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477c:	edc3 7a01 	vstr	s15, [r3, #4]
    for (ihi = 0; ihi < minNrowsNx; ihi++) {
 8004780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004782:	3301      	adds	r3, #1
 8004784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004786:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800478a:	429a      	cmp	r2, r3
 800478c:	dbb8      	blt.n	8004700 <c_FFTImplementationCallback_dob+0x8f0>
    }
    c_FFTImplementationCallback_r2b(fy, n2blue, costab, sintabinv, fv);
 800478e:	6978      	ldr	r0, [r7, #20]
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	f7fc fd90 	bl	80012c0 <c_FFTImplementationCallback_r2b>
    fv_data = fv->data;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (fv->size[0] > 1) {
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	dd3a      	ble.n	8004826 <c_FFTImplementationCallback_dob+0xa16>
      nt_im = 1.0F / (float)fv->size[0];
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047c6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
      minNrowsNx = fv->size[0];
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	653b      	str	r3, [r7, #80]	; 0x50
      for (ihi = 0; ihi < minNrowsNx; ihi++) {
 80047d2:	2300      	movs	r3, #0
 80047d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d6:	e022      	b.n	800481e <c_FFTImplementationCallback_dob+0xa0e>
        fv_data[ihi].re *= nt_im;
 80047d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	4413      	add	r3, r2
 80047e0:	ed93 7a00 	vldr	s14, [r3]
 80047e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	4413      	add	r3, r2
 80047ec:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80047f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f4:	edc3 7a00 	vstr	s15, [r3]
        fv_data[ihi].im *= nt_im;
 80047f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fe:	4413      	add	r3, r2
 8004800:	ed93 7a01 	vldr	s14, [r3, #4]
 8004804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	4413      	add	r3, r2
 800480c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004814:	edc3 7a01 	vstr	s15, [r3, #4]
      for (ihi = 0; ihi < minNrowsNx; ihi++) {
 8004818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481a:	3301      	adds	r3, #1
 800481c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800481e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004822:	429a      	cmp	r2, r3
 8004824:	dbd8      	blt.n	80047d8 <c_FFTImplementationCallback_dob+0x9c8>
      }
    }
    ihi = (int)(float)nfft;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004834:	ee17 3a90 	vmov	r3, s15
 8004838:	65fb      	str	r3, [r7, #92]	; 0x5c
    minNrowsNx = wwc->size[0];
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	653b      	str	r3, [r7, #80]	; 0x50
    for (k = ihi; k <= minNrowsNx; k++) {
 8004842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004844:	657b      	str	r3, [r7, #84]	; 0x54
 8004846:	e05a      	b.n	80048fe <c_FFTImplementationCallback_dob+0xaee>
      nt_im = wwc_data[k - 1].re;
 8004848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800484e:	3b01      	subs	r3, #1
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004854:	4413      	add	r3, r2
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	66bb      	str	r3, [r7, #104]	; 0x68
      nt_re = fv_data[k - 1].im;
 800485a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004860:	3b01      	subs	r3, #1
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004866:	4413      	add	r3, r2
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	667b      	str	r3, [r7, #100]	; 0x64
      twid_re = wwc_data[k - 1].im;
 800486c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004872:	3b01      	subs	r3, #1
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004878:	4413      	add	r3, r2
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	623b      	str	r3, [r7, #32]
      twid_im = fv_data[k - 1].re;
 800487e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004880:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004884:	3b01      	subs	r3, #1
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	4413      	add	r3, r2
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
      nInt2m1 = k - (int)(float)nfft;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800489a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800489e:	ee17 2a90 	vmov	r2, s15
 80048a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	64bb      	str	r3, [r7, #72]	; 0x48
      y_data[nInt2m1].re = nt_im * twid_im + twid_re * nt_re;
 80048a8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80048ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80048b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048b4:	edd7 6a08 	vldr	s13, [r7, #32]
 80048b8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80048bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048c6:	4413      	add	r3, r2
 80048c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048cc:	edc3 7a00 	vstr	s15, [r3]
      y_data[nInt2m1].im = nt_im * nt_re - twid_re * twid_im;
 80048d0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80048d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80048d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048dc:	edd7 6a08 	vldr	s13, [r7, #32]
 80048e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80048e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ee:	4413      	add	r3, r2
 80048f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048f4:	edc3 7a01 	vstr	s15, [r3, #4]
    for (k = ihi; k <= minNrowsNx; k++) {
 80048f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fa:	3301      	adds	r3, #1
 80048fc:	657b      	str	r3, [r7, #84]	; 0x54
 80048fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004902:	429a      	cmp	r2, r3
 8004904:	dda0      	ble.n	8004848 <c_FFTImplementationCallback_dob+0xa38>
    }
  }
  emxFree_creal32_T(&fv);
 8004906:	f107 0318 	add.w	r3, r7, #24
 800490a:	4618      	mov	r0, r3
 800490c:	f003 fded 	bl	80084ea <emxFree_creal32_T>
  emxFree_creal32_T(&fy);
 8004910:	f107 0314 	add.w	r3, r7, #20
 8004914:	4618      	mov	r0, r3
 8004916:	f003 fde8 	bl	80084ea <emxFree_creal32_T>
  emxFree_creal32_T(&wwc);
 800491a:	f107 0310 	add.w	r3, r7, #16
 800491e:	4618      	mov	r0, r3
 8004920:	f003 fde3 	bl	80084ea <emxFree_creal32_T>
}
 8004924:	bf00      	nop
 8004926:	3778      	adds	r7, #120	; 0x78
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <b_binary_expand_op>:
 *                const emxArray_real_T *in2
 * Return Type  : void
 */
static void b_binary_expand_op(emxArray_real32_T *in1,
                               const emxArray_real_T *in2)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	ed2d 8b02 	vpush	{d8}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  float *in1_data;
  int i;
  int loop_ub;
  int stride_0_1;
  int stride_1_1;
  in2_data = in2->data;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	61fb      	str	r3, [r7, #28]
  in1_data = in1->data;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
  emxInit_real32_T(&b_in1, 2);
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f003 ff18 	bl	8008782 <emxInit_real32_T>
  i = b_in1->size[0] * b_in1->size[1];
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	6852      	ldr	r2, [r2, #4]
 800495c:	3204      	adds	r2, #4
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  b_in1->size[0] = 1;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]
  if (in2->size[1] == 1) {
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <b_binary_expand_op+0x5e>
    b_in1->size[1] = in1->size[1];
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	6852      	ldr	r2, [r2, #4]
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e006      	b.n	8004998 <b_binary_expand_op+0x6c>
  } else {
    b_in1->size[1] = in2->size[1];
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	6852      	ldr	r2, [r2, #4]
 8004996:	601a      	str	r2, [r3, #0]
  }
  emxEnsureCapacity_real32_T(b_in1, i);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499c:	4618      	mov	r0, r3
 800499e:	f003 fcae 	bl	80082fe <emxEnsureCapacity_real32_T>
  b_in1_data = b_in1->data;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	617b      	str	r3, [r7, #20]
  stride_0_1 = (in1->size[1] != 1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	613b      	str	r3, [r7, #16]
  stride_1_1 = (in2->size[1] != 1);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	60fb      	str	r3, [r7, #12]
  if (in2->size[1] == 1) {
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d104      	bne.n	80049e6 <b_binary_expand_op+0xba>
    loop_ub = in1->size[1];
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	623b      	str	r3, [r7, #32]
 80049e4:	e003      	b.n	80049ee <b_binary_expand_op+0xc2>
  } else {
    loop_ub = in2->size[1];
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	623b      	str	r3, [r7, #32]
  }
  for (i = 0; i < loop_ub; i++) {
 80049ee:	2300      	movs	r3, #0
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
 80049f2:	e022      	b.n	8004a3a <b_binary_expand_op+0x10e>
    b_in1_data[i] = in1_data[i * stride_0_1] * (float)in2_data[i * stride_1_1];
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4413      	add	r3, r2
 8004a02:	ed93 8a00 	vldr	s16, [r3]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7fc fa0a 	bl	8000e34 <__aeabi_d2f>
 8004a20:	ee07 0a90 	vmov	s15, r0
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004a30:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < loop_ub; i++) {
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	3301      	adds	r3, #1
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	dbd8      	blt.n	80049f4 <b_binary_expand_op+0xc8>
  }
  i = in1->size[0] * in1->size[1];
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6852      	ldr	r2, [r2, #4]
 8004a4c:	3204      	adds	r2, #4
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  in1->size[0] = 1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
  in1->size[1] = b_in1->size[1];
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	6852      	ldr	r2, [r2, #4]
 8004a6a:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(in1, i);
 8004a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f003 fc45 	bl	80082fe <emxEnsureCapacity_real32_T>
  in1_data = in1->data;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
  loop_ub = b_in1->size[1];
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	623b      	str	r3, [r7, #32]
  for (i = 0; i < loop_ub; i++) {
 8004a82:	2300      	movs	r3, #0
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
 8004a86:	e00c      	b.n	8004aa2 <b_binary_expand_op+0x176>
    in1_data[i] = b_in1_data[i];
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	441a      	add	r2, r3
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	440b      	add	r3, r1
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < loop_ub; i++) {
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	dbee      	blt.n	8004a88 <b_binary_expand_op+0x15c>
  }
  emxFree_real32_T(&b_in1);
 8004aaa:	f107 0308 	add.w	r3, r7, #8
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f003 fd6f 	bl	8008592 <emxFree_real32_T>
}
 8004ab4:	bf00      	nop
 8004ab6:	3728      	adds	r7, #40	; 0x28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	ecbd 8b02 	vpop	{d8}
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <binary_expand_op>:
 * Return Type  : void
 */
static void binary_expand_op(creal32_T in1[42], const emxArray_real_T *in2,
                             const emxArray_creal32_T *in3,
                             const emxArray_creal32_T *in4, double in5)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b092      	sub	sp, #72	; 0x48
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6178      	str	r0, [r7, #20]
 8004ac8:	6139      	str	r1, [r7, #16]
 8004aca:	60fa      	str	r2, [r7, #12]
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	ed87 0b00 	vstr	d0, [r7]
  creal32_T *b_in3_data;
  int i;
  int loop_ub;
  int stride_0_1;
  int stride_1_1;
  in4_data = in4->data;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  in3_data = in3->data;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
  emxInit_creal32_T(&b_in3, 2);
 8004ade:	f107 0318 	add.w	r3, r7, #24
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f003 fddc 	bl	80086a2 <emxInit_creal32_T>
  i = b_in3->size[0] * b_in3->size[1];
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	6852      	ldr	r2, [r2, #4]
 8004af4:	3204      	adds	r2, #4
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	647b      	str	r3, [r7, #68]	; 0x44
  b_in3->size[0] = 1;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
  if (in4->size[1] == 1) {
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <binary_expand_op+0x62>
    b_in3->size[1] = in3->size[1];
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	6852      	ldr	r2, [r2, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e006      	b.n	8004b30 <binary_expand_op+0x70>
  } else {
    b_in3->size[1] = in4->size[1];
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	6852      	ldr	r2, [r2, #4]
 8004b2e:	601a      	str	r2, [r3, #0]
  }
  emxEnsureCapacity_creal32_T(b_in3, i);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b34:	4618      	mov	r0, r3
 8004b36:	f003 fb16 	bl	8008166 <emxEnsureCapacity_creal32_T>
  b_in3_data = b_in3->data;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
  stride_0_1 = (in3->size[1] != 1);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	633b      	str	r3, [r7, #48]	; 0x30
  stride_1_1 = (in4->size[1] != 1);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (in4->size[1] == 1) {
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d104      	bne.n	8004b7e <binary_expand_op+0xbe>
    loop_ub = in3->size[1];
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b7c:	e003      	b.n	8004b86 <binary_expand_op+0xc6>
  } else {
    loop_ub = in4->size[1];
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	643b      	str	r3, [r7, #64]	; 0x40
  }
  for (i = 0; i < loop_ub; i++) {
 8004b86:	2300      	movs	r3, #0
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8a:	e0b1      	b.n	8004cf0 <binary_expand_op+0x230>
    float in3_re;
    float in4_im;
    float in4_re;
    int in4_re_tmp;
    in4_re_tmp = i * stride_1_1;
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b90:	fb02 f303 	mul.w	r3, r2, r3
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
    in4_re = in4_data[in4_re_tmp].re;
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b9c:	4413      	add	r3, r2
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    in4_im = -in4_data[in4_re_tmp].im;
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ba8:	4413      	add	r3, r2
 8004baa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bae:	eef1 7a67 	vneg.f32	s15, s15
 8004bb2:	edc7 7a08 	vstr	s15, [r7, #32]
    in3_re = in3_data[i * stride_0_1].re * in4_re -
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bc2:	4413      	add	r3, r2
 8004bc4:	ed93 7a00 	vldr	s14, [r3]
 8004bc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
             in3_data[i * stride_0_1].im * in4_im;
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd4:	fb02 f303 	mul.w	r3, r2, r3
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bdc:	4413      	add	r3, r2
 8004bde:	edd3 6a01 	vldr	s13, [r3, #4]
 8004be2:	edd7 7a08 	vldr	s15, [r7, #32]
 8004be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    in3_re = in3_data[i * stride_0_1].re * in4_re -
 8004bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
    in4_re = in3_data[i * stride_0_1].re * in4_im +
 8004bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bfe:	4413      	add	r3, r2
 8004c00:	ed93 7a00 	vldr	s14, [r3]
 8004c04:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c08:	ee27 7a27 	vmul.f32	s14, s14, s15
             in3_data[i * stride_0_1].im * in4_re;
 8004c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c10:	fb02 f303 	mul.w	r3, r2, r3
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c18:	4413      	add	r3, r2
 8004c1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8004c1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
    in4_re = in3_data[i * stride_0_1].re * in4_im +
 8004c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (in4_re == 0.0F) {
 8004c2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004c32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	d117      	bne.n	8004c6c <binary_expand_op+0x1ac>
      b_in3_data[i].re = in3_re / (float)in5;
 8004c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c40:	f7fc f8f8 	bl	8000e34 <__aeabi_d2f>
 8004c44:	ee06 0a90 	vmov	s13, r0
 8004c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c4e:	4413      	add	r3, r2
 8004c50:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c58:	edc3 7a00 	vstr	s15, [r3]
      b_in3_data[i].im = 0.0F;
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c62:	4413      	add	r3, r2
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	e03e      	b.n	8004cea <binary_expand_op+0x22a>
    } else if (in3_re == 0.0F) {
 8004c6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c78:	d117      	bne.n	8004caa <binary_expand_op+0x1ea>
      b_in3_data[i].re = 0.0F;
 8004c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c80:	4413      	add	r3, r2
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
      b_in3_data[i].im = in4_re / (float)in5;
 8004c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c8c:	f7fc f8d2 	bl	8000e34 <__aeabi_d2f>
 8004c90:	ee06 0a90 	vmov	s13, r0
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9a:	4413      	add	r3, r2
 8004c9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ca4:	edc3 7a01 	vstr	s15, [r3, #4]
 8004ca8:	e01f      	b.n	8004cea <binary_expand_op+0x22a>
    } else {
      b_in3_data[i].re = in3_re / (float)in5;
 8004caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cae:	f7fc f8c1 	bl	8000e34 <__aeabi_d2f>
 8004cb2:	ee06 0a90 	vmov	s13, r0
 8004cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cbc:	4413      	add	r3, r2
 8004cbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8004cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cc6:	edc3 7a00 	vstr	s15, [r3]
      b_in3_data[i].im = in4_re / (float)in5;
 8004cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cce:	f7fc f8b1 	bl	8000e34 <__aeabi_d2f>
 8004cd2:	ee06 0a90 	vmov	s13, r0
 8004cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cdc:	4413      	add	r3, r2
 8004cde:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004ce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ce6:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < loop_ub; i++) {
 8004cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cec:	3301      	adds	r3, #1
 8004cee:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	f6ff af49 	blt.w	8004b8c <binary_expand_op+0xcc>
    }
  }
  b_interp1(in2, b_in3, in1);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6938      	ldr	r0, [r7, #16]
 8004d02:	f004 f981 	bl	8009008 <b_interp1>
  emxFree_creal32_T(&b_in3);
 8004d06:	f107 0318 	add.w	r3, r7, #24
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f003 fbed 	bl	80084ea <emxFree_creal32_T>
}
 8004d10:	bf00      	nop
 8004d12:	3748      	adds	r7, #72	; 0x48
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <rt_atan2f_snf>:
 * Arguments    : float u0
 *                float u1
 * Return Type  : float
 */
static float rt_atan2f_snf(float u0, float u1)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d22:	edc7 0a00 	vstr	s1, [r7]
  float y;
  if (rtIsNaNF(u0) || rtIsNaNF(u1)) {
 8004d26:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d2a:	f005 f8ea 	bl	8009f02 <rtIsNaNF>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <rt_atan2f_snf+0x2a>
 8004d34:	ed97 0a00 	vldr	s0, [r7]
 8004d38:	f005 f8e3 	bl	8009f02 <rtIsNaNF>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <rt_atan2f_snf+0x32>
    y = rtNaNF;
 8004d42:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <rt_atan2f_snf+0x108>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e061      	b.n	8004e0e <rt_atan2f_snf+0xf6>
  } else if (rtIsInfF(u0) && rtIsInfF(u1)) {
 8004d4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d4e:	f005 f88b 	bl	8009e68 <rtIsInfF>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d033      	beq.n	8004dc0 <rt_atan2f_snf+0xa8>
 8004d58:	ed97 0a00 	vldr	s0, [r7]
 8004d5c:	f005 f884 	bl	8009e68 <rtIsInfF>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02c      	beq.n	8004dc0 <rt_atan2f_snf+0xa8>
    int b_u0;
    int b_u1;
    if (u0 > 0.0F) {
 8004d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	dd02      	ble.n	8004d7a <rt_atan2f_snf+0x62>
      b_u0 = 1;
 8004d74:	2301      	movs	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	e002      	b.n	8004d80 <rt_atan2f_snf+0x68>
    } else {
      b_u0 = -1;
 8004d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7e:	613b      	str	r3, [r7, #16]
    }
    if (u1 > 0.0F) {
 8004d80:	edd7 7a00 	vldr	s15, [r7]
 8004d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	dd02      	ble.n	8004d94 <rt_atan2f_snf+0x7c>
      b_u1 = 1;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	e002      	b.n	8004d9a <rt_atan2f_snf+0x82>
    } else {
      b_u1 = -1;
 8004d94:	f04f 33ff 	mov.w	r3, #4294967295
 8004d98:	60fb      	str	r3, [r7, #12]
    }
    y = atan2f((float)b_u0, (float)b_u1);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	ee07 3a10 	vmov	s14, r3
 8004daa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004dae:	eef0 0a47 	vmov.f32	s1, s14
 8004db2:	eeb0 0a67 	vmov.f32	s0, s15
 8004db6:	f019 fd99 	bl	801e8ec <atan2f>
 8004dba:	ed87 0a05 	vstr	s0, [r7, #20]
  } else if (rtIsInfF(u0) && rtIsInfF(u1)) {
 8004dbe:	e026      	b.n	8004e0e <rt_atan2f_snf+0xf6>
  } else if (u1 == 0.0F) {
 8004dc0:	edd7 7a00 	vldr	s15, [r7]
 8004dc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	d117      	bne.n	8004dfe <rt_atan2f_snf+0xe6>
    if (u0 > 0.0F) {
 8004dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dda:	dd02      	ble.n	8004de2 <rt_atan2f_snf+0xca>
      y = RT_PIF / 2.0F;
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <rt_atan2f_snf+0x10c>)
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e015      	b.n	8004e0e <rt_atan2f_snf+0xf6>
    } else if (u0 < 0.0F) {
 8004de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004de6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dee:	d502      	bpl.n	8004df6 <rt_atan2f_snf+0xde>
      y = -(RT_PIF / 2.0F);
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <rt_atan2f_snf+0x110>)
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e00b      	b.n	8004e0e <rt_atan2f_snf+0xf6>
    } else {
      y = 0.0F;
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e007      	b.n	8004e0e <rt_atan2f_snf+0xf6>
    }
  } else {
    y = atan2f(u0, u1);
 8004dfe:	edd7 0a00 	vldr	s1, [r7]
 8004e02:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e06:	f019 fd71 	bl	801e8ec <atan2f>
 8004e0a:	ed87 0a05 	vstr	s0, [r7, #20]
  }
  return y;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	ee07 3a90 	vmov	s15, r3
}
 8004e14:	eeb0 0a67 	vmov.f32	s0, s15
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000000 	.word	0x20000000
 8004e24:	3fc90fdb 	.word	0x3fc90fdb
 8004e28:	bfc90fdb 	.word	0xbfc90fdb

08004e2c <rt_roundd_snf>:
/*
 * Arguments    : double u
 * Return Type  : double
 */
static double rt_roundd_snf(double u)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	ed87 0b00 	vstr	d0, [r7]
  double y;
  if (fabs(u) < 4.503599627370496E+15) {
 8004e36:	6838      	ldr	r0, [r7, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	4b2f      	ldr	r3, [pc, #188]	; (8004f00 <rt_roundd_snf+0xd4>)
 8004e44:	f7fb ff70 	bl	8000d28 <__aeabi_dcmplt>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d048      	beq.n	8004ee0 <rt_roundd_snf+0xb4>
    if (u >= 0.5) {
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	4b2c      	ldr	r3, [pc, #176]	; (8004f04 <rt_roundd_snf+0xd8>)
 8004e54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e58:	f7fb ff7a 	bl	8000d50 <__aeabi_dcmpge>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d013      	beq.n	8004e8a <rt_roundd_snf+0x5e>
      y = floor(u + 0.5);
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <rt_roundd_snf+0xd8>)
 8004e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e6c:	f7fb fb34 	bl	80004d8 <__adddf3>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	ec43 2b17 	vmov	d7, r2, r3
 8004e78:	eeb0 0a47 	vmov.f32	s0, s14
 8004e7c:	eef0 0a67 	vmov.f32	s1, s15
 8004e80:	f019 fbca 	bl	801e618 <floor>
 8004e84:	ed87 0b02 	vstr	d0, [r7, #8]
 8004e88:	e02e      	b.n	8004ee8 <rt_roundd_snf+0xbc>
    } else if (u > -0.5) {
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <rt_roundd_snf+0xdc>)
 8004e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e94:	f7fb ff66 	bl	8000d64 <__aeabi_dcmpgt>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00c      	beq.n	8004eb8 <rt_roundd_snf+0x8c>
      y = u * 0.0;
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eaa:	f7fb fccb 	bl	8000844 <__aeabi_dmul>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004eb6:	e017      	b.n	8004ee8 <rt_roundd_snf+0xbc>
    } else {
      y = ceil(u - 0.5);
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <rt_roundd_snf+0xd8>)
 8004ebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ec2:	f7fb fb07 	bl	80004d4 <__aeabi_dsub>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	ec43 2b17 	vmov	d7, r2, r3
 8004ece:	eeb0 0a47 	vmov.f32	s0, s14
 8004ed2:	eef0 0a67 	vmov.f32	s1, s15
 8004ed6:	f019 fb1b 	bl	801e510 <ceil>
 8004eda:	ed87 0b02 	vstr	d0, [r7, #8]
 8004ede:	e003      	b.n	8004ee8 <rt_roundd_snf+0xbc>
    }
  } else {
    y = u;
 8004ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }
  return y;
 8004ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eec:	ec43 2b17 	vmov	d7, r2, r3
}
 8004ef0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ef4:	eef0 0a67 	vmov.f32	s1, s15
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	43300000 	.word	0x43300000
 8004f04:	3fe00000 	.word	0x3fe00000
 8004f08:	bfe00000 	.word	0xbfe00000
 8004f0c:	00000000 	.word	0x00000000

08004f10 <NEDwaves_memlight>:
                       emxArray_real32_T *down, double fs, real16_T *Hs,
                       real16_T *Tp, real16_T *Dp, real16_T E[42],
                       real16_T *b_fmin, real16_T *b_fmax, signed char a1[42],
                       signed char b1[42], signed char a2[42],
                       signed char b2[42], unsigned char check[42])
{
 8004f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f14:	ed2d 8b02 	vpush	{d8}
 8004f18:	f6ad 1d44 	subw	sp, sp, #2372	; 0x944
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	f507 6614 	add.w	r6, r7, #2368	; 0x940
 8004f22:	f6a6 161c 	subw	r6, r6, #2332	; 0x91c
 8004f26:	6030      	str	r0, [r6, #0]
 8004f28:	f507 6014 	add.w	r0, r7, #2368	; 0x940
 8004f2c:	f5a0 6012 	sub.w	r0, r0, #2336	; 0x920
 8004f30:	6001      	str	r1, [r0, #0]
 8004f32:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8004f36:	f6a1 1124 	subw	r1, r1, #2340	; 0x924
 8004f3a:	600a      	str	r2, [r1, #0]
 8004f3c:	f107 0210 	add.w	r2, r7, #16
 8004f40:	ed82 0b00 	vstr	d0, [r2]
 8004f44:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8004f48:	f6a2 1228 	subw	r2, r2, #2344	; 0x928
 8004f4c:	6013      	str	r3, [r2, #0]
  signed char i1;
  bool exitg1;
  bool *b_taper_data;
  /*  parameters  */
  /* testing = true; */
  pts = east->size[1];
 8004f4e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004f52:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
  /*  length of the input data (should be 2^N for efficiency) */
  /*  min frequecny for final output, Hz */
  /*  max frequecny for final output, Hz */
  /*  number of frequency bands in final result */
  /*  remove the mean */
  x = mean(north);
 8004f60:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004f64:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	f004 fce5 	bl	8009938 <mean>
 8004f6e:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8004f72:	ed83 0a00 	vstr	s0, [r3]
  nx = north->size[1] - 1;
 8004f76:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004f7a:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  i = north->size[0] * north->size[1];
 8004f8c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004f90:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8004f9e:	f6a2 121c 	subw	r2, r2, #2332	; 0x91c
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	6852      	ldr	r2, [r2, #4]
 8004fa6:	3204      	adds	r2, #4
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  north->size[0] = 1;
 8004fb2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004fb6:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(north, i);
 8004fc2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004fc6:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8004fca:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	f003 f995 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = north->data;
 8004fd4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004fd8:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  for (i = 0; i <= nx; i++) {
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8004fea:	e01a      	b.n	8005022 <NEDwaves_memlight+0x112>
    north_data[i] -= x;
 8004fec:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8004ff6:	4413      	add	r3, r2
 8004ff8:	ed93 7a00 	vldr	s14, [r3]
 8004ffc:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8005006:	4413      	add	r3, r2
 8005008:	f607 1204 	addw	r2, r7, #2308	; 0x904
 800500c:	edd2 7a00 	vldr	s15, [r2]
 8005010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005014:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= nx; i++) {
 8005018:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800501c:	3301      	adds	r3, #1
 800501e:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8005022:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8005026:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 800502a:	429a      	cmp	r2, r3
 800502c:	ddde      	ble.n	8004fec <NEDwaves_memlight+0xdc>
  }
  x = mean(east);
 800502e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005032:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	f004 fc7e 	bl	8009938 <mean>
 800503c:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8005040:	ed83 0a00 	vstr	s0, [r3]
  nx = east->size[1] - 1;
 8005044:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005048:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3b01      	subs	r3, #1
 8005056:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  i = east->size[0] * east->size[1];
 800505a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800505e:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800506c:	f5a2 6212 	sub.w	r2, r2, #2336	; 0x920
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	6852      	ldr	r2, [r2, #4]
 8005074:	3204      	adds	r2, #4
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  east->size[0] = 1;
 8005080:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005084:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(east, i);
 8005090:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005094:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8005098:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f003 f92e 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = east->data;
 80050a2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80050a6:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  for (i = 0; i <= nx; i++) {
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80050b8:	e01a      	b.n	80050f0 <NEDwaves_memlight+0x1e0>
    north_data[i] -= x;
 80050ba:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 80050c4:	4413      	add	r3, r2
 80050c6:	ed93 7a00 	vldr	s14, [r3]
 80050ca:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 80050d4:	4413      	add	r3, r2
 80050d6:	f607 1204 	addw	r2, r7, #2308	; 0x904
 80050da:	edd2 7a00 	vldr	s15, [r2]
 80050de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050e2:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= nx; i++) {
 80050e6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80050ea:	3301      	adds	r3, #1
 80050ec:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80050f0:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80050f4:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80050f8:	429a      	cmp	r2, r3
 80050fa:	ddde      	ble.n	80050ba <NEDwaves_memlight+0x1aa>
  }
  x = mean(down);
 80050fc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005100:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	f004 fc17 	bl	8009938 <mean>
 800510a:	f607 1304 	addw	r3, r7, #2308	; 0x904
 800510e:	ed83 0a00 	vstr	s0, [r3]
  nx = down->size[1] - 1;
 8005112:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005116:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3b01      	subs	r3, #1
 8005124:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  i = down->size[0] * down->size[1];
 8005128:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800512c:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800513a:	f6a2 1224 	subw	r2, r2, #2340	; 0x924
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	6852      	ldr	r2, [r2, #4]
 8005142:	3204      	adds	r2, #4
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  down->size[0] = 1;
 800514e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005152:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(down, i);
 800515e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005162:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005166:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	f003 f8c7 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = down->data;
 8005170:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005174:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  for (i = 0; i <= nx; i++) {
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8005186:	e01a      	b.n	80051be <NEDwaves_memlight+0x2ae>
    north_data[i] -= x;
 8005188:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8005192:	4413      	add	r3, r2
 8005194:	ed93 7a00 	vldr	s14, [r3]
 8005198:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 80051a2:	4413      	add	r3, r2
 80051a4:	f607 1204 	addw	r2, r7, #2308	; 0x904
 80051a8:	edd2 7a00 	vldr	s15, [r2]
 80051ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051b0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= nx; i++) {
 80051b4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80051b8:	3301      	adds	r3, #1
 80051ba:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80051be:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80051c2:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80051c6:	429a      	cmp	r2, r3
 80051c8:	ddde      	ble.n	8005188 <NEDwaves_memlight+0x278>
  }
  emxInit_real_T(&taper);
 80051ca:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f003 fb0f 	bl	80087f2 <emxInit_real_T>
  /*  taper and rescale (to preserve variance) */
  /*  get original variance of each  */
  b_x = var(north);
 80051d4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80051d8:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	f005 f8a1 	bl	800a324 <var>
 80051e2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80051e6:	ed83 0a00 	vstr	s0, [r3]
  fe = var(east);
 80051ea:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80051ee:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	f005 f896 	bl	800a324 <var>
 80051f8:	f607 1324 	addw	r3, r7, #2340	; 0x924
 80051fc:	ed83 0a00 	vstr	s0, [r3]
  x = var(down);
 8005200:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005204:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f005 f88b 	bl	800a324 <var>
 800520e:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8005212:	ed83 0a00 	vstr	s0, [r3]
  /*  define the taper */
  if (pts < 1) {
 8005216:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800521a:	2b00      	cmp	r3, #0
 800521c:	dc06      	bgt.n	800522c <NEDwaves_memlight+0x31c>
    taper->size[1] = 0;
 800521e:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e04b      	b.n	80052c4 <NEDwaves_memlight+0x3b4>
  } else {
    i = taper->size[0] * taper->size[1];
 800522c:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 8005238:	6852      	ldr	r2, [r2, #4]
 800523a:	3204      	adds	r2, #4
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    taper->size[0] = 1;
 8005246:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]
    taper->size[1] = pts;
 8005250:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 800525c:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real_T(taper, i);
 800525e:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005262:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005266:	4618      	mov	r0, r3
 8005268:	f003 f8af 	bl	80083ca <emxEnsureCapacity_real_T>
    taper_data = taper->data;
 800526c:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    nx = pts - 1;
 8005276:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800527a:	3b01      	subs	r3, #1
 800527c:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    for (i = 0; i <= nx; i++) {
 8005280:	2300      	movs	r3, #0
 8005282:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8005286:	e017      	b.n	80052b8 <NEDwaves_memlight+0x3a8>
      taper_data[i] = (double)i + 1.0;
 8005288:	f8d7 0920 	ldr.w	r0, [r7, #2336]	; 0x920
 800528c:	f7fb fa70 	bl	8000770 <__aeabi_i2d>
 8005290:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800529a:	18d6      	adds	r6, r2, r3
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	4bcb      	ldr	r3, [pc, #812]	; (80055d0 <NEDwaves_memlight+0x6c0>)
 80052a2:	f7fb f919 	bl	80004d8 <__adddf3>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	e9c6 2300 	strd	r2, r3, [r6]
    for (i = 0; i <= nx; i++) {
 80052ae:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80052b2:	3301      	adds	r3, #1
 80052b4:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80052b8:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80052bc:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80052c0:	429a      	cmp	r2, r3
 80052c2:	dde1      	ble.n	8005288 <NEDwaves_memlight+0x378>
    }
  }
  i = taper->size[0] * taper->size[1];
 80052c4:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80052d0:	6852      	ldr	r2, [r2, #4]
 80052d2:	3204      	adds	r2, #4
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  taper->size[0] = 1;
 80052de:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(taper, i);
 80052e8:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80052ec:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 80052f0:	4618      	mov	r0, r3
 80052f2:	f003 f86a 	bl	80083ca <emxEnsureCapacity_real_T>
  taper_data = taper->data;
 80052f6:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
  nx = taper->size[1] - 1;
 8005300:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3b01      	subs	r3, #1
 800530c:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i <= nx; i++) {
 8005310:	2300      	movs	r3, #0
 8005312:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8005316:	e029      	b.n	800536c <NEDwaves_memlight+0x45c>
    taper_data[i] = taper_data[i] * 3.1415926535897931 / (double)pts;
 8005318:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8005322:	4413      	add	r3, r2
 8005324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005328:	a3a7      	add	r3, pc, #668	; (adr r3, 80055c8 <NEDwaves_memlight+0x6b8>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f7fb fa89 	bl	8000844 <__aeabi_dmul>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4690      	mov	r8, r2
 8005338:	4699      	mov	r9, r3
 800533a:	f8d7 0908 	ldr.w	r0, [r7, #2312]	; 0x908
 800533e:	f7fb fa17 	bl	8000770 <__aeabi_i2d>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800534a:	00c9      	lsls	r1, r1, #3
 800534c:	f8d7 08fc 	ldr.w	r0, [r7, #2300]	; 0x8fc
 8005350:	1846      	adds	r6, r0, r1
 8005352:	4640      	mov	r0, r8
 8005354:	4649      	mov	r1, r9
 8005356:	f7fb fb9f 	bl	8000a98 <__aeabi_ddiv>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i <= nx; i++) {
 8005362:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005366:	3301      	adds	r3, #1
 8005368:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 800536c:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8005370:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8005374:	429a      	cmp	r2, r3
 8005376:	ddcf      	ble.n	8005318 <NEDwaves_memlight+0x408>
  }
  nx = taper->size[1];
 8005378:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (k = 0; k < nx; k++) {
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800538a:	e01e      	b.n	80053ca <NEDwaves_memlight+0x4ba>
    taper_data[k] = sin(taper_data[k]);
 800538c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8005396:	4413      	add	r3, r2
 8005398:	ed93 7b00 	vldr	d7, [r3]
 800539c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80053a6:	18d6      	adds	r6, r2, r3
 80053a8:	eeb0 0a47 	vmov.f32	s0, s14
 80053ac:	eef0 0a67 	vmov.f32	s1, s15
 80053b0:	f019 f9b6 	bl	801e720 <sin>
 80053b4:	eeb0 7a40 	vmov.f32	s14, s0
 80053b8:	eef0 7a60 	vmov.f32	s15, s1
 80053bc:	ed86 7b00 	vstr	d7, [r6]
  for (k = 0; k < nx; k++) {
 80053c0:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80053c4:	3301      	adds	r3, #1
 80053c6:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80053ca:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 80053ce:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80053d2:	429a      	cmp	r2, r3
 80053d4:	dbda      	blt.n	800538c <NEDwaves_memlight+0x47c>
  }
  /*  apply the taper */
  if (north->size[1] == taper->size[1]) {
 80053d6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80053da:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d166      	bne.n	80054c2 <NEDwaves_memlight+0x5b2>
    nx = north->size[1] - 1;
 80053f4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80053f8:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3b01      	subs	r3, #1
 8005406:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    i = north->size[0] * north->size[1];
 800540a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800540e:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800541c:	f6a2 121c 	subw	r2, r2, #2332	; 0x91c
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	6852      	ldr	r2, [r2, #4]
 8005424:	3204      	adds	r2, #4
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	fb02 f303 	mul.w	r3, r2, r3
 800542c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    north->size[0] = 1;
 8005430:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005434:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(north, i);
 8005440:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005444:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8005448:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	f002 ff56 	bl	80082fe <emxEnsureCapacity_real32_T>
    north_data = north->data;
 8005452:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005456:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
    for (i = 0; i <= nx; i++) {
 8005462:	2300      	movs	r3, #0
 8005464:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8005468:	e024      	b.n	80054b4 <NEDwaves_memlight+0x5a4>
      north_data[i] *= (float)taper_data[i];
 800546a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8005474:	4413      	add	r3, r2
 8005476:	ed93 8a00 	vldr	s16, [r3]
 800547a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8005484:	4413      	add	r3, r2
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	f7fb fcd1 	bl	8000e34 <__aeabi_d2f>
 8005492:	ee07 0a90 	vmov	s15, r0
 8005496:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 80054a0:	4413      	add	r3, r2
 80054a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80054a6:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i <= nx; i++) {
 80054aa:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80054ae:	3301      	adds	r3, #1
 80054b0:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80054b4:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80054b8:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80054bc:	429a      	cmp	r2, r3
 80054be:	ddd4      	ble.n	800546a <NEDwaves_memlight+0x55a>
 80054c0:	e009      	b.n	80054d6 <NEDwaves_memlight+0x5c6>
    }
  } else {
    b_binary_expand_op(north, taper);
 80054c2:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80054c6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80054ca:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 80054ce:	4611      	mov	r1, r2
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	f7ff fa2b 	bl	800492c <b_binary_expand_op>
  }
  if (east->size[1] == taper->size[1]) {
 80054d6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80054da:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d16f      	bne.n	80055d4 <NEDwaves_memlight+0x6c4>
    nx = east->size[1] - 1;
 80054f4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80054f8:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3b01      	subs	r3, #1
 8005506:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    i = east->size[0] * east->size[1];
 800550a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800550e:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800551c:	f5a2 6212 	sub.w	r2, r2, #2336	; 0x920
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	6852      	ldr	r2, [r2, #4]
 8005524:	3204      	adds	r2, #4
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    east->size[0] = 1;
 8005530:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005534:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(east, i);
 8005540:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005544:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8005548:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	f002 fed6 	bl	80082fe <emxEnsureCapacity_real32_T>
    north_data = east->data;
 8005552:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005556:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
    for (i = 0; i <= nx; i++) {
 8005562:	2300      	movs	r3, #0
 8005564:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8005568:	e024      	b.n	80055b4 <NEDwaves_memlight+0x6a4>
      north_data[i] *= (float)taper_data[i];
 800556a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8005574:	4413      	add	r3, r2
 8005576:	ed93 8a00 	vldr	s16, [r3]
 800557a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8005584:	4413      	add	r3, r2
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	4610      	mov	r0, r2
 800558c:	4619      	mov	r1, r3
 800558e:	f7fb fc51 	bl	8000e34 <__aeabi_d2f>
 8005592:	ee07 0a90 	vmov	s15, r0
 8005596:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 80055a0:	4413      	add	r3, r2
 80055a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80055a6:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i <= nx; i++) {
 80055aa:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80055ae:	3301      	adds	r3, #1
 80055b0:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80055b4:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80055b8:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80055bc:	429a      	cmp	r2, r3
 80055be:	ddd4      	ble.n	800556a <NEDwaves_memlight+0x65a>
 80055c0:	e012      	b.n	80055e8 <NEDwaves_memlight+0x6d8>
 80055c2:	bf00      	nop
 80055c4:	f3af 8000 	nop.w
 80055c8:	54442d18 	.word	0x54442d18
 80055cc:	400921fb 	.word	0x400921fb
 80055d0:	3ff00000 	.word	0x3ff00000
    }
  } else {
    b_binary_expand_op(east, taper);
 80055d4:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80055d8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80055dc:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80055e0:	4611      	mov	r1, r2
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	f7ff f9a2 	bl	800492c <b_binary_expand_op>
  }
  if (down->size[1] == taper->size[1]) {
 80055e8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80055ec:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	3304      	adds	r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d166      	bne.n	80056d4 <NEDwaves_memlight+0x7c4>
    nx = down->size[1] - 1;
 8005606:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800560a:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    i = down->size[0] * down->size[1];
 800561c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005620:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800562e:	f6a2 1224 	subw	r2, r2, #2340	; 0x924
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	6852      	ldr	r2, [r2, #4]
 8005636:	3204      	adds	r2, #4
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	fb02 f303 	mul.w	r3, r2, r3
 800563e:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    down->size[0] = 1;
 8005642:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005646:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(down, i);
 8005652:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005656:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 800565a:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	f002 fe4d 	bl	80082fe <emxEnsureCapacity_real32_T>
    north_data = down->data;
 8005664:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005668:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
    for (i = 0; i <= nx; i++) {
 8005674:	2300      	movs	r3, #0
 8005676:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 800567a:	e024      	b.n	80056c6 <NEDwaves_memlight+0x7b6>
      north_data[i] *= (float)taper_data[i];
 800567c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8005686:	4413      	add	r3, r2
 8005688:	ed93 8a00 	vldr	s16, [r3]
 800568c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8005696:	4413      	add	r3, r2
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	4610      	mov	r0, r2
 800569e:	4619      	mov	r1, r3
 80056a0:	f7fb fbc8 	bl	8000e34 <__aeabi_d2f>
 80056a4:	ee07 0a90 	vmov	s15, r0
 80056a8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 80056b2:	4413      	add	r3, r2
 80056b4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80056b8:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i <= nx; i++) {
 80056bc:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80056c0:	3301      	adds	r3, #1
 80056c2:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80056c6:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80056ca:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80056ce:	429a      	cmp	r2, r3
 80056d0:	ddd4      	ble.n	800567c <NEDwaves_memlight+0x76c>
 80056d2:	e009      	b.n	80056e8 <NEDwaves_memlight+0x7d8>
    }
  } else {
    b_binary_expand_op(down, taper);
 80056d4:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80056d8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80056dc:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80056e0:	4611      	mov	r1, r2
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	f7ff f922 	bl	800492c <b_binary_expand_op>
  }
  /*  then rescale to regain the same original variance */
  b_x = sqrtf(b_x / var(north));
 80056e8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80056ec:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	f004 fe17 	bl	800a324 <var>
 80056f6:	eef0 6a40 	vmov.f32	s13, s0
 80056fa:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80056fe:	edd3 7a00 	vldr	s15, [r3]
 8005702:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005706:	eeb0 0a47 	vmov.f32	s0, s14
 800570a:	f019 f8f1 	bl	801e8f0 <sqrtf>
 800570e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8005712:	ed83 0a00 	vstr	s0, [r3]
  i = north->size[0] * north->size[1];
 8005716:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800571a:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8005728:	f6a2 121c 	subw	r2, r2, #2332	; 0x91c
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	3204      	adds	r2, #4
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	fb02 f303 	mul.w	r3, r2, r3
 8005738:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  north->size[0] = 1;
 800573c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005740:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(north, i);
 800574c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005750:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8005754:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f002 fdd0 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = north->data;
 800575e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005762:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  nx = north->size[1] - 1;
 800576e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005772:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3b01      	subs	r3, #1
 8005780:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i <= nx; i++) {
 8005784:	2300      	movs	r3, #0
 8005786:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 800578a:	e01a      	b.n	80057c2 <NEDwaves_memlight+0x8b2>
    north_data[i] *= b_x;
 800578c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8005796:	4413      	add	r3, r2
 8005798:	ed93 7a00 	vldr	s14, [r3]
 800579c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 80057a6:	4413      	add	r3, r2
 80057a8:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80057ac:	edd2 7a00 	vldr	s15, [r2]
 80057b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= nx; i++) {
 80057b8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80057bc:	3301      	adds	r3, #1
 80057be:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80057c2:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80057c6:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80057ca:	429a      	cmp	r2, r3
 80057cc:	ddde      	ble.n	800578c <NEDwaves_memlight+0x87c>
  }
  b_x = sqrtf(fe / var(east));
 80057ce:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80057d2:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	f004 fda4 	bl	800a324 <var>
 80057dc:	eef0 6a40 	vmov.f32	s13, s0
 80057e0:	f607 1324 	addw	r3, r7, #2340	; 0x924
 80057e4:	edd3 7a00 	vldr	s15, [r3]
 80057e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80057ec:	eeb0 0a47 	vmov.f32	s0, s14
 80057f0:	f019 f87e 	bl	801e8f0 <sqrtf>
 80057f4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80057f8:	ed83 0a00 	vstr	s0, [r3]
  i = east->size[0] * east->size[1];
 80057fc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005800:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800580e:	f5a2 6212 	sub.w	r2, r2, #2336	; 0x920
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	6852      	ldr	r2, [r2, #4]
 8005816:	3204      	adds	r2, #4
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  east->size[0] = 1;
 8005822:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005826:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(east, i);
 8005832:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005836:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800583a:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	f002 fd5d 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = east->data;
 8005844:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005848:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  nx = east->size[1] - 1;
 8005854:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8005858:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3b01      	subs	r3, #1
 8005866:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i <= nx; i++) {
 800586a:	2300      	movs	r3, #0
 800586c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8005870:	e01a      	b.n	80058a8 <NEDwaves_memlight+0x998>
    north_data[i] *= b_x;
 8005872:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 800587c:	4413      	add	r3, r2
 800587e:	ed93 7a00 	vldr	s14, [r3]
 8005882:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 800588c:	4413      	add	r3, r2
 800588e:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8005892:	edd2 7a00 	vldr	s15, [r2]
 8005896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= nx; i++) {
 800589e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80058a2:	3301      	adds	r3, #1
 80058a4:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80058a8:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80058ac:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80058b0:	429a      	cmp	r2, r3
 80058b2:	ddde      	ble.n	8005872 <NEDwaves_memlight+0x962>
  }
  b_x = sqrtf(x / var(down));
 80058b4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80058b8:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f004 fd31 	bl	800a324 <var>
 80058c2:	eef0 6a40 	vmov.f32	s13, s0
 80058c6:	f607 1304 	addw	r3, r7, #2308	; 0x904
 80058ca:	edd3 7a00 	vldr	s15, [r3]
 80058ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80058d2:	eeb0 0a47 	vmov.f32	s0, s14
 80058d6:	f019 f80b 	bl	801e8f0 <sqrtf>
 80058da:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80058de:	ed83 0a00 	vstr	s0, [r3]
  i = down->size[0] * down->size[1];
 80058e2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80058e6:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80058f4:	f6a2 1224 	subw	r2, r2, #2340	; 0x924
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	6852      	ldr	r2, [r2, #4]
 80058fc:	3204      	adds	r2, #4
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	fb02 f303 	mul.w	r3, r2, r3
 8005904:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  down->size[0] = 1;
 8005908:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800590c:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(down, i);
 8005918:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800591c:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005920:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	f002 fcea 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = down->data;
 800592a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800592e:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  nx = down->size[1] - 1;
 800593a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800593e:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3b01      	subs	r3, #1
 800594c:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i <= nx; i++) {
 8005950:	2300      	movs	r3, #0
 8005952:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8005956:	e01a      	b.n	800598e <NEDwaves_memlight+0xa7e>
    north_data[i] *= b_x;
 8005958:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8005962:	4413      	add	r3, r2
 8005964:	ed93 7a00 	vldr	s14, [r3]
 8005968:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8005972:	4413      	add	r3, r2
 8005974:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8005978:	edd2 7a00 	vldr	s15, [r2]
 800597c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005980:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= nx; i++) {
 8005984:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005988:	3301      	adds	r3, #1
 800598a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 800598e:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8005992:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8005996:	429a      	cmp	r2, r3
 8005998:	ddde      	ble.n	8005958 <NEDwaves_memlight+0xa48>
  }
  emxInit_creal32_T(&U, 2);
 800599a:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 800599e:	2102      	movs	r1, #2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f002 fe7e 	bl	80086a2 <emxInit_creal32_T>
  emxInit_creal32_T(&V, 2);
 80059a6:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80059aa:	2102      	movs	r1, #2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f002 fe78 	bl	80086a2 <emxInit_creal32_T>
  emxInit_creal32_T(&W, 2);
 80059b2:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 80059b6:	2102      	movs	r1, #2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f002 fe72 	bl	80086a2 <emxInit_creal32_T>
  emxInit_int32_T(&r, 2);
 80059be:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 80059c2:	2102      	movs	r1, #2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 fea4 	bl	8008712 <emxInit_int32_T>
  /*  FFT, note convention for lower case as time-domain and upper case as freq
   * domain */
  /*  calculate Fourier coefs (complex values, double sided) */
  fft(east, U);
 80059ca:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80059ce:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80059d2:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80059d6:	4611      	mov	r1, r2
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f002 ff85 	bl	80088e8 <fft>
  fft(north, V);
 80059de:	f8d7 28b8 	ldr.w	r2, [r7, #2232]	; 0x8b8
 80059e2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80059e6:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 80059ea:	4611      	mov	r1, r2
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	f002 ff7b 	bl	80088e8 <fft>
  fft(down, W);
 80059f2:	f8d7 28b4 	ldr.w	r2, [r7, #2228]	; 0x8b4
 80059f6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80059fa:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80059fe:	4611      	mov	r1, r2
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	f002 ff71 	bl	80088e8 <fft>
  /*  second half of Matlab's FFT is redundant, so throw it out */
  d = (double)pts / 2.0;
 8005a06:	f8d7 0908 	ldr.w	r0, [r7, #2312]	; 0x908
 8005a0a:	f7fa feb1 	bl	8000770 <__aeabi_i2d>
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a16:	f7fb f83f 	bl	8000a98 <__aeabi_ddiv>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8005a22:	e9c1 2300 	strd	r2, r3, [r1]
  i = (int)rt_roundd_snf(d + 1.0);
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	4bc5      	ldr	r3, [pc, #788]	; (8005d40 <NEDwaves_memlight+0xe30>)
 8005a2c:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8005a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a34:	f7fa fd50 	bl	80004d8 <__adddf3>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	ec43 2b17 	vmov	d7, r2, r3
 8005a40:	eeb0 0a47 	vmov.f32	s0, s14
 8005a44:	eef0 0a67 	vmov.f32	s1, s15
 8005a48:	f7ff f9f0 	bl	8004e2c <rt_roundd_snf>
 8005a4c:	ec53 2b10 	vmov	r2, r3, d0
 8005a50:	4610      	mov	r0, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	f7fb f9a6 	bl	8000da4 <__aeabi_d2iz>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  nxout = r->size[0] * r->size[1];
 8005a5e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8005a6a:	6852      	ldr	r2, [r2, #4]
 8005a6c:	3204      	adds	r2, #4
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  r->size[0] = 1;
 8005a78:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
  nx = pts - i;
 8005a82:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8005a86:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  r->size[1] = nx + 1;
 8005a90:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8005a9c:	3201      	adds	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_int32_T(r, nxout);
 8005aa0:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005aa4:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f002 fbc2 	bl	8008232 <emxEnsureCapacity_int32_T>
  r1 = r->data;
 8005aae:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
  for (nxout = 0; nxout <= nx; nxout++) {
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8005abe:	e010      	b.n	8005ae2 <NEDwaves_memlight+0xbd2>
    r1[nxout] = i + nxout;
 8005ac0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8005aca:	4413      	add	r3, r2
 8005acc:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005ad0:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8005ad4:	440a      	add	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]
  for (nxout = 0; nxout <= nx; nxout++) {
 8005ad8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005adc:	3301      	adds	r3, #1
 8005ade:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8005ae2:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8005ae6:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8005aea:	429a      	cmp	r2, r3
 8005aec:	dde8      	ble.n	8005ac0 <NEDwaves_memlight+0xbb0>
  }
  nullAssignment(U, r);
 8005aee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005af2:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f004 f8e7 	bl	8009ccc <nullAssignment>
  U_data = U->data;
 8005afe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
  nxout = r->size[0] * r->size[1];
 8005b08:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8005b14:	6852      	ldr	r2, [r2, #4]
 8005b16:	3204      	adds	r2, #4
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  r->size[0] = 1;
 8005b22:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
  nx = pts - i;
 8005b2c:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8005b30:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  r->size[1] = nx + 1;
 8005b3a:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8005b46:	3201      	adds	r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_int32_T(r, nxout);
 8005b4a:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005b4e:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 8005b52:	4618      	mov	r0, r3
 8005b54:	f002 fb6d 	bl	8008232 <emxEnsureCapacity_int32_T>
  r1 = r->data;
 8005b58:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
  for (nxout = 0; nxout <= nx; nxout++) {
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8005b68:	e010      	b.n	8005b8c <NEDwaves_memlight+0xc7c>
    r1[nxout] = i + nxout;
 8005b6a:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8005b74:	4413      	add	r3, r2
 8005b76:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005b7a:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8005b7e:	440a      	add	r2, r1
 8005b80:	601a      	str	r2, [r3, #0]
  for (nxout = 0; nxout <= nx; nxout++) {
 8005b82:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005b86:	3301      	adds	r3, #1
 8005b88:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8005b8c:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8005b90:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8005b94:	429a      	cmp	r2, r3
 8005b96:	dde8      	ble.n	8005b6a <NEDwaves_memlight+0xc5a>
  }
  nullAssignment(V, r);
 8005b98:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005b9c:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f004 f892 	bl	8009ccc <nullAssignment>
  V_data = V->data;
 8005ba8:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
  nxout = r->size[0] * r->size[1];
 8005bb2:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8005bbe:	6852      	ldr	r2, [r2, #4]
 8005bc0:	3204      	adds	r2, #4
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  r->size[0] = 1;
 8005bcc:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
  nx = pts - i;
 8005bd6:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8005bda:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  r->size[1] = nx + 1;
 8005be4:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8005bf0:	3201      	adds	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_int32_T(r, nxout);
 8005bf4:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005bf8:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f002 fb18 	bl	8008232 <emxEnsureCapacity_int32_T>
  r1 = r->data;
 8005c02:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
  for (nxout = 0; nxout <= nx; nxout++) {
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8005c12:	e010      	b.n	8005c36 <NEDwaves_memlight+0xd26>
    r1[nxout] = i + nxout;
 8005c14:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8005c1e:	4413      	add	r3, r2
 8005c20:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005c24:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8005c28:	440a      	add	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
  for (nxout = 0; nxout <= nx; nxout++) {
 8005c2c:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005c30:	3301      	adds	r3, #1
 8005c32:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8005c36:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8005c3a:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	dde8      	ble.n	8005c14 <NEDwaves_memlight+0xd04>
  }
  nullAssignment(W, r);
 8005c42:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005c46:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f004 f83d 	bl	8009ccc <nullAssignment>
  W_data = W->data;
 8005c52:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
  /*  throw out the mean (first coef) and add a zero (to make it the right
   * length)   */
  nxin = U->size[1];
 8005c5c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
  nxout = U->size[1] - 1;
 8005c68:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  emxFree_int32_T(&r);
 8005c78:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f002 fc5e 	bl	800853e <emxFree_int32_T>
  for (k = 0; k < nxout; k++) {
 8005c82:	2300      	movs	r3, #0
 8005c84:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8005c88:	e016      	b.n	8005cb8 <NEDwaves_memlight+0xda8>
    U_data[k] = U_data[k + 1];
 8005c8a:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005c8e:	3301      	adds	r3, #1
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8005c96:	18d1      	adds	r1, r2, r3
 8005c98:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8005ca2:	4413      	add	r3, r2
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005caa:	e883 0003 	stmia.w	r3, {r0, r1}
  for (k = 0; k < nxout; k++) {
 8005cae:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8005cb8:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 8005cbc:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	dbe2      	blt.n	8005c8a <NEDwaves_memlight+0xd7a>
  }
  i = U->size[0] * U->size[1];
 8005cc4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8005cd0:	6852      	ldr	r2, [r2, #4]
 8005cd2:	3204      	adds	r2, #4
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  if (nxout < 1) {
 8005cde:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dc06      	bgt.n	8005cf4 <NEDwaves_memlight+0xde4>
    U->size[1] = 0;
 8005ce6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e007      	b.n	8005d04 <NEDwaves_memlight+0xdf4>
  } else {
    U->size[1] = nxin - 1;
 8005cf4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	f8d7 2914 	ldr.w	r2, [r7, #2324]	; 0x914
 8005d00:	3a01      	subs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
  }
  emxEnsureCapacity_creal32_T(U, i);
 8005d04:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005d08:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f002 fa2a 	bl	8008166 <emxEnsureCapacity_creal32_T>
  U_data = U->data;
 8005d12:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
  nxin = V->size[1];
 8005d1c:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
  nxout = V->size[1] - 1;
 8005d28:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  for (k = 0; k < nxout; k++) {
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8005d3e:	e018      	b.n	8005d72 <NEDwaves_memlight+0xe62>
 8005d40:	3ff00000 	.word	0x3ff00000
    V_data[k] = V_data[k + 1];
 8005d44:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005d48:	3301      	adds	r3, #1
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8005d50:	18d1      	adds	r1, r2, r3
 8005d52:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8005d5c:	4413      	add	r3, r2
 8005d5e:	460a      	mov	r2, r1
 8005d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d64:	e883 0003 	stmia.w	r3, {r0, r1}
  for (k = 0; k < nxout; k++) {
 8005d68:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8005d72:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 8005d76:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	dbe2      	blt.n	8005d44 <NEDwaves_memlight+0xe34>
  }
  i = V->size[0] * V->size[1];
 8005d7e:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8d7 28b8 	ldr.w	r2, [r7, #2232]	; 0x8b8
 8005d8a:	6852      	ldr	r2, [r2, #4]
 8005d8c:	3204      	adds	r2, #4
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  if (nxout < 1) {
 8005d98:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dc06      	bgt.n	8005dae <NEDwaves_memlight+0xe9e>
    V->size[1] = 0;
 8005da0:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e007      	b.n	8005dbe <NEDwaves_memlight+0xeae>
  } else {
    V->size[1] = nxin - 1;
 8005dae:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	f8d7 2914 	ldr.w	r2, [r7, #2324]	; 0x914
 8005dba:	3a01      	subs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
  }
  emxEnsureCapacity_creal32_T(V, i);
 8005dbe:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005dc2:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f002 f9cd 	bl	8008166 <emxEnsureCapacity_creal32_T>
  V_data = V->data;
 8005dcc:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
  nxin = W->size[1];
 8005dd6:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
  nxout = W->size[1] - 1;
 8005de2:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	3304      	adds	r3, #4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  for (k = 0; k < nxout; k++) {
 8005df2:	2300      	movs	r3, #0
 8005df4:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8005df8:	e016      	b.n	8005e28 <NEDwaves_memlight+0xf18>
    W_data[k] = W_data[k + 1];
 8005dfa:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005dfe:	3301      	adds	r3, #1
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8005e06:	18d1      	adds	r1, r2, r3
 8005e08:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8005e12:	4413      	add	r3, r2
 8005e14:	460a      	mov	r2, r1
 8005e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e1a:	e883 0003 	stmia.w	r3, {r0, r1}
  for (k = 0; k < nxout; k++) {
 8005e1e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8005e22:	3301      	adds	r3, #1
 8005e24:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8005e28:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 8005e2c:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005e30:	429a      	cmp	r2, r3
 8005e32:	dbe2      	blt.n	8005dfa <NEDwaves_memlight+0xeea>
  }
  i = W->size[0] * W->size[1];
 8005e34:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8d7 28b4 	ldr.w	r2, [r7, #2228]	; 0x8b4
 8005e40:	6852      	ldr	r2, [r2, #4]
 8005e42:	3204      	adds	r2, #4
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  if (nxout < 1) {
 8005e4e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	dc06      	bgt.n	8005e64 <NEDwaves_memlight+0xf54>
    W->size[1] = 0;
 8005e56:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e007      	b.n	8005e74 <NEDwaves_memlight+0xf64>
  } else {
    W->size[1] = nxin - 1;
 8005e64:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	f8d7 2914 	ldr.w	r2, [r7, #2324]	; 0x914
 8005e70:	3a01      	subs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
  }
  emxEnsureCapacity_creal32_T(W, i);
 8005e74:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005e78:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f002 f972 	bl	8008166 <emxEnsureCapacity_creal32_T>
  W_data = W->data;
 8005e82:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
  d = rt_roundd_snf(d);
 8005e8c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8005e90:	ed93 0b00 	vldr	d0, [r3]
 8005e94:	f7fe ffca 	bl	8004e2c <rt_roundd_snf>
 8005e98:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8005e9c:	ed83 0b00 	vstr	d0, [r3]
  i = (int)d;
 8005ea0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8005ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ea8:	f7fa ff7c 	bl	8000da4 <__aeabi_d2iz>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  U_data[i - 1].re = 0.0F;
 8005eb2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005eb6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
  U_data[i - 1].im = 0.0F;
 8005eca:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005ece:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8005eda:	4413      	add	r3, r2
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	605a      	str	r2, [r3, #4]
  V_data[i - 1].re = 0.0F;
 8005ee2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005ee6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005eea:	3b01      	subs	r3, #1
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
  V_data[i - 1].im = 0.0F;
 8005efa:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005efe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005f02:	3b01      	subs	r3, #1
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	605a      	str	r2, [r3, #4]
  W_data[i - 1].re = 0.0F;
 8005f12:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005f16:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8005f22:	4413      	add	r3, r2
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
  W_data[i - 1].im = 0.0F;
 8005f2a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005f2e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005f32:	3b01      	subs	r3, #1
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	605a      	str	r2, [r3, #4]
  /*  determine the frequency vector */
  /*  highest spectral frequency  */
  /*  frequency resolution  */
  d1 = 1.0 / ((double)pts / fs);
 8005f42:	f8d7 0908 	ldr.w	r0, [r7, #2312]	; 0x908
 8005f46:	f7fa fc13 	bl	8000770 <__aeabi_i2d>
 8005f4a:	f107 0310 	add.w	r3, r7, #16
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f7fa fda1 	bl	8000a98 <__aeabi_ddiv>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	f04f 0000 	mov.w	r0, #0
 8005f5e:	49ba      	ldr	r1, [pc, #744]	; (8006248 <NEDwaves_memlight+0x1338>)
 8005f60:	f7fa fd9a 	bl	8000a98 <__aeabi_ddiv>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8005f6c:	e9c1 2300 	strd	r2, r3, [r1]
  delta2 = fs / 2.0;
 8005f70:	f107 0310 	add.w	r3, r7, #16
 8005f74:	4619      	mov	r1, r3
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f82:	f7fa fd89 	bl	8000a98 <__aeabi_ddiv>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8005f8e:	e9c1 2300 	strd	r2, r3, [r1]
  nxout = taper->size[0] * taper->size[1];
 8005f92:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 8005f9e:	6852      	ldr	r2, [r2, #4]
 8005fa0:	3204      	adds	r2, #4
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  taper->size[0] = 1;
 8005fac:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
  taper->size[1] = i;
 8005fb6:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8005fc2:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(taper, nxout);
 8005fc4:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005fc8:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f002 f9fc 	bl	80083ca <emxEnsureCapacity_real_T>
  taper_data = taper->data;
 8005fd2:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
  if (i >= 1) {
 8005fdc:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f340 81f0 	ble.w	80063c6 <NEDwaves_memlight+0x14b6>
    nx = i - 1;
 8005fe6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005fea:	3b01      	subs	r3, #1
 8005fec:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    taper_data[i - 1] = delta2;
 8005ff0:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8005ff4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8006000:	18d1      	adds	r1, r2, r3
 8006002:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	e9c1 2300 	strd	r2, r3, [r1]
    if (taper->size[1] >= 2) {
 800600e:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	3304      	adds	r3, #4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	f340 81d4 	ble.w	80063c6 <NEDwaves_memlight+0x14b6>
      taper_data[0] = d1;
 800601e:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 8006022:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	e9c1 2300 	strd	r2, r3, [r1]
      if (taper->size[1] >= 3) {
 800602e:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	3304      	adds	r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b02      	cmp	r3, #2
 800603a:	f340 81c4 	ble.w	80063c6 <NEDwaves_memlight+0x14b6>
        if ((d1 == -delta2) && (i > 2)) {
 800603e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8006048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006052:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8006056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800605a:	f7fa fe5b 	bl	8000d14 <__aeabi_dcmpeq>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d063      	beq.n	800612c <NEDwaves_memlight+0x121c>
 8006064:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006068:	2b02      	cmp	r3, #2
 800606a:	dd5f      	ble.n	800612c <NEDwaves_memlight+0x121c>
          delta2 /= (double)i - 1.0;
 800606c:	f8d7 0920 	ldr.w	r0, [r7, #2336]	; 0x920
 8006070:	f7fa fb7e 	bl	8000770 <__aeabi_i2d>
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	4b73      	ldr	r3, [pc, #460]	; (8006248 <NEDwaves_memlight+0x1338>)
 800607a:	f7fa fa2b 	bl	80004d4 <__aeabi_dsub>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8006086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800608a:	f7fa fd05 	bl	8000a98 <__aeabi_ddiv>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8006096:	e9c1 2300 	strd	r2, r3, [r1]
          for (k = 2; k <= nx; k++) {
 800609a:	2302      	movs	r3, #2
 800609c:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80060a0:	e029      	b.n	80060f6 <NEDwaves_memlight+0x11e6>
            taper_data[k - 1] = ((double)((k << 1) - i) - 1.0) * delta2;
 80060a2:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80060a6:	005a      	lsls	r2, r3, #1
 80060a8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa fb5e 	bl	8000770 <__aeabi_i2d>
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	4b63      	ldr	r3, [pc, #396]	; (8006248 <NEDwaves_memlight+0x1338>)
 80060ba:	f7fa fa0b 	bl	80004d4 <__aeabi_dsub>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80060ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80060ce:	3b01      	subs	r3, #1
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80060d6:	18d4      	adds	r4, r2, r3
 80060d8:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f7fa fbb0 	bl	8000844 <__aeabi_dmul>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	e9c4 2300 	strd	r2, r3, [r4]
          for (k = 2; k <= nx; k++) {
 80060ec:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80060f0:	3301      	adds	r3, #1
 80060f2:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80060f6:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 80060fa:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80060fe:	429a      	cmp	r2, r3
 8006100:	ddcf      	ble.n	80060a2 <NEDwaves_memlight+0x1192>
          }
          if ((i & 1) == 1) {
 8006102:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 815b 	beq.w	80063c6 <NEDwaves_memlight+0x14b6>
            taper_data[i >> 1] = 0.0;
 8006110:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006114:	105b      	asrs	r3, r3, #1
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800611c:	18d1      	adds	r1, r2, r3
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	e9c1 2300 	strd	r2, r3, [r1]
          if ((i & 1) == 1) {
 800612a:	e14c      	b.n	80063c6 <NEDwaves_memlight+0x14b6>
          }
        } else if (((d1 < 0.0) != (delta2 < 0.0)) &&
 800612c:	2301      	movs	r3, #1
 800612e:	461e      	mov	r6, r3
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	f607 1138 	addw	r1, r7, #2360	; 0x938
 800613c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006140:	f7fa fdf2 	bl	8000d28 <__aeabi_dcmplt>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <NEDwaves_memlight+0x123e>
 800614a:	2300      	movs	r3, #0
 800614c:	461e      	mov	r6, r3
 800614e:	b2f6      	uxtb	r6, r6
 8006150:	2301      	movs	r3, #1
 8006152:	4698      	mov	r8, r3
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8006160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006164:	f7fa fde0 	bl	8000d28 <__aeabi_dcmplt>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <NEDwaves_memlight+0x1262>
 800616e:	2300      	movs	r3, #0
 8006170:	4698      	mov	r8, r3
 8006172:	fa5f f388 	uxtb.w	r3, r8
 8006176:	4073      	eors	r3, r6
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80be 	beq.w	80062fc <NEDwaves_memlight+0x13ec>
                   ((fabs(d1) > 8.9884656743115785E+307) ||
 8006180:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800618a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800618e:	607b      	str	r3, [r7, #4]
        } else if (((d1 < 0.0) != (delta2 < 0.0)) &&
 8006190:	f04f 32ff 	mov.w	r2, #4294967295
 8006194:	4b2d      	ldr	r3, [pc, #180]	; (800624c <NEDwaves_memlight+0x133c>)
 8006196:	e9d7 0100 	ldrd	r0, r1, [r7]
 800619a:	f7fa fde3 	bl	8000d64 <__aeabi_dcmpgt>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d110      	bne.n	80061c6 <NEDwaves_memlight+0x12b6>
                    (fabs(delta2) > 8.9884656743115785E+307))) {
 80061a4:	f8d7 4930 	ldr.w	r4, [r7, #2352]	; 0x930
 80061a8:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80061ac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
                   ((fabs(d1) > 8.9884656743115785E+307) ||
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	4b25      	ldr	r3, [pc, #148]	; (800624c <NEDwaves_memlight+0x133c>)
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa fdd3 	bl	8000d64 <__aeabi_dcmpgt>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 809b 	beq.w	80062fc <NEDwaves_memlight+0x13ec>
          delta1 = d1 / ((double)taper->size[1] - 1.0);
 80061c6:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fa facd 	bl	8000770 <__aeabi_i2d>
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <NEDwaves_memlight+0x1338>)
 80061dc:	f7fa f97a 	bl	80004d4 <__aeabi_dsub>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	f607 1138 	addw	r1, r7, #2360	; 0x938
 80061e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ec:	f7fa fc54 	bl	8000a98 <__aeabi_ddiv>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80061f8:	e9c1 2300 	strd	r2, r3, [r1]
          delta2 /= (double)taper->size[1] - 1.0;
 80061fc:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f7fa fab2 	bl	8000770 <__aeabi_i2d>
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <NEDwaves_memlight+0x1338>)
 8006212:	f7fa f95f 	bl	80004d4 <__aeabi_dsub>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 800621e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006222:	f7fa fc39 	bl	8000a98 <__aeabi_ddiv>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 800622e:	e9c1 2300 	strd	r2, r3, [r1]
          i = taper->size[1];
 8006232:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
          for (k = 0; k <= i - 3; k++) {
 800623e:	2300      	movs	r3, #0
 8006240:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8006244:	e052      	b.n	80062ec <NEDwaves_memlight+0x13dc>
 8006246:	bf00      	nop
 8006248:	3ff00000 	.word	0x3ff00000
 800624c:	7fdfffff 	.word	0x7fdfffff
            taper_data[k + 1] =
                (d1 + delta2 * ((double)k + 1.0)) - delta1 * ((double)k + 1.0);
 8006250:	f8d7 091c 	ldr.w	r0, [r7, #2332]	; 0x91c
 8006254:	f7fa fa8c 	bl	8000770 <__aeabi_i2d>
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	4baa      	ldr	r3, [pc, #680]	; (8006508 <NEDwaves_memlight+0x15f8>)
 800625e:	f7fa f93b 	bl	80004d8 <__adddf3>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f7fa fae7 	bl	8000844 <__aeabi_dmul>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4610      	mov	r0, r2
 800627c:	4619      	mov	r1, r3
 800627e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7fa f927 	bl	80004d8 <__adddf3>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4690      	mov	r8, r2
 8006290:	4699      	mov	r9, r3
 8006292:	f8d7 091c 	ldr.w	r0, [r7, #2332]	; 0x91c
 8006296:	f7fa fa6b 	bl	8000770 <__aeabi_i2d>
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	4b9a      	ldr	r3, [pc, #616]	; (8006508 <NEDwaves_memlight+0x15f8>)
 80062a0:	f7fa f91a 	bl	80004d8 <__adddf3>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7fa fac6 	bl	8000844 <__aeabi_dmul>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
            taper_data[k + 1] =
 80062c0:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80062c4:	3301      	adds	r3, #1
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80062cc:	18d4      	adds	r4, r2, r3
                (d1 + delta2 * ((double)k + 1.0)) - delta1 * ((double)k + 1.0);
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	f7fa f8fd 	bl	80004d4 <__aeabi_dsub>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
            taper_data[k + 1] =
 80062de:	e9c4 2300 	strd	r2, r3, [r4]
          for (k = 0; k <= i - 3; k++) {
 80062e2:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80062e6:	3301      	adds	r3, #1
 80062e8:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80062ec:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80062f0:	3b02      	subs	r3, #2
 80062f2:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 80062f6:	429a      	cmp	r2, r3
 80062f8:	dbaa      	blt.n	8006250 <NEDwaves_memlight+0x1340>
        } else if (((d1 < 0.0) != (delta2 < 0.0)) &&
 80062fa:	e064      	b.n	80063c6 <NEDwaves_memlight+0x14b6>
          }
        } else {
          delta1 = (delta2 - d1) / ((double)taper->size[1] - 1.0);
 80062fc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8006308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800630c:	f7fa f8e2 	bl	80004d4 <__aeabi_dsub>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4614      	mov	r4, r2
 8006316:	461d      	mov	r5, r3
 8006318:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f7fa fa24 	bl	8000770 <__aeabi_i2d>
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	4b76      	ldr	r3, [pc, #472]	; (8006508 <NEDwaves_memlight+0x15f8>)
 800632e:	f7fa f8d1 	bl	80004d4 <__aeabi_dsub>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7fa fbad 	bl	8000a98 <__aeabi_ddiv>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 8006346:	e9c1 2300 	strd	r2, r3, [r1]
          i = taper->size[1];
 800634a:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
          for (k = 0; k <= i - 3; k++) {
 8006356:	2300      	movs	r3, #0
 8006358:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800635c:	e02c      	b.n	80063b8 <NEDwaves_memlight+0x14a8>
            taper_data[k + 1] = d1 + ((double)k + 1.0) * delta1;
 800635e:	f8d7 091c 	ldr.w	r0, [r7, #2332]	; 0x91c
 8006362:	f7fa fa05 	bl	8000770 <__aeabi_i2d>
 8006366:	f04f 0200 	mov.w	r2, #0
 800636a:	4b67      	ldr	r3, [pc, #412]	; (8006508 <NEDwaves_memlight+0x15f8>)
 800636c:	f7fa f8b4 	bl	80004d8 <__adddf3>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4610      	mov	r0, r2
 8006376:	4619      	mov	r1, r3
 8006378:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f7fa fa60 	bl	8000844 <__aeabi_dmul>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4610      	mov	r0, r2
 800638a:	4619      	mov	r1, r3
 800638c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006390:	3301      	adds	r3, #1
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8006398:	18d4      	adds	r4, r2, r3
 800639a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f7fa f899 	bl	80004d8 <__adddf3>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	e9c4 2300 	strd	r2, r3, [r4]
          for (k = 0; k <= i - 3; k++) {
 80063ae:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80063b2:	3301      	adds	r3, #1
 80063b4:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80063b8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80063bc:	3b02      	subs	r3, #2
 80063be:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	dbcb      	blt.n	800635e <NEDwaves_memlight+0x144e>
          }
        }
      }
    }
  }
  emxInit_boolean_T(&b_taper);
 80063c6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f002 f935 	bl	800863a <emxInit_boolean_T>
  /*  remove high frequency tail (to save memory) */
  i = b_taper->size[0] * b_taper->size[1];
 80063d0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80063dc:	6852      	ldr	r2, [r2, #4]
 80063de:	3204      	adds	r2, #4
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  b_taper->size[0] = 1;
 80063ea:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
  b_taper->size[1] = taper->size[1];
 80063f4:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	6852      	ldr	r2, [r2, #4]
 8006404:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b_taper, i);
 8006406:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800640a:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fe44 	bl	800809c <emxEnsureCapacity_boolean_T>
  b_taper_data = b_taper->data;
 8006414:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
  nx = taper->size[1];
 800641e:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i < nx; i++) {
 800642a:	2300      	movs	r3, #0
 800642c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006430:	e01f      	b.n	8006472 <NEDwaves_memlight+0x1562>
    b_taper_data[i] = (taper_data[i] > 0.55);
 8006432:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800643c:	4413      	add	r3, r2
 800643e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006442:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006446:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 800644a:	18d4      	adds	r4, r2, r3
 800644c:	2301      	movs	r3, #1
 800644e:	461d      	mov	r5, r3
 8006450:	a32b      	add	r3, pc, #172	; (adr r3, 8006500 <NEDwaves_memlight+0x15f0>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7fa fc85 	bl	8000d64 <__aeabi_dcmpgt>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <NEDwaves_memlight+0x1554>
 8006460:	2300      	movs	r3, #0
 8006462:	461d      	mov	r5, r3
 8006464:	b2eb      	uxtb	r3, r5
 8006466:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < nx; i++) {
 8006468:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800646c:	3301      	adds	r3, #1
 800646e:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006472:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8006476:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 800647a:	429a      	cmp	r2, r3
 800647c:	dbd9      	blt.n	8006432 <NEDwaves_memlight+0x1522>
  }
  b_nullAssignment(U, b_taper);
 800647e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8006482:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8006486:	4611      	mov	r1, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f003 fba4 	bl	8009bd6 <b_nullAssignment>
  U_data = U->data;
 800648e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
  i = b_taper->size[0] * b_taper->size[1];
 8006498:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80064a4:	6852      	ldr	r2, [r2, #4]
 80064a6:	3204      	adds	r2, #4
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
 80064ae:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  b_taper->size[0] = 1;
 80064b2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
  b_taper->size[1] = taper->size[1];
 80064bc:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	3304      	adds	r3, #4
 80064ca:	6852      	ldr	r2, [r2, #4]
 80064cc:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b_taper, i);
 80064ce:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80064d2:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 fde0 	bl	800809c <emxEnsureCapacity_boolean_T>
  b_taper_data = b_taper->data;
 80064dc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
  nx = taper->size[1];
 80064e6:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i < nx; i++) {
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80064f8:	e029      	b.n	800654e <NEDwaves_memlight+0x163e>
 80064fa:	bf00      	nop
 80064fc:	f3af 8000 	nop.w
 8006500:	9999999a 	.word	0x9999999a
 8006504:	3fe19999 	.word	0x3fe19999
 8006508:	3ff00000 	.word	0x3ff00000
    b_taper_data[i] = (taper_data[i] > 0.55);
 800650c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8006516:	4413      	add	r3, r2
 8006518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800651c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006520:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 8006524:	18d4      	adds	r4, r2, r3
 8006526:	2301      	movs	r3, #1
 8006528:	461d      	mov	r5, r3
 800652a:	f60f 536c 	addw	r3, pc, #3436	; 0xd6c
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f7fa fc17 	bl	8000d64 <__aeabi_dcmpgt>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <NEDwaves_memlight+0x1630>
 800653c:	2300      	movs	r3, #0
 800653e:	461d      	mov	r5, r3
 8006540:	b2eb      	uxtb	r3, r5
 8006542:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < nx; i++) {
 8006544:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006548:	3301      	adds	r3, #1
 800654a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 800654e:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8006552:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8006556:	429a      	cmp	r2, r3
 8006558:	dbd8      	blt.n	800650c <NEDwaves_memlight+0x15fc>
  }
  b_nullAssignment(V, b_taper);
 800655a:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 800655e:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f003 fb36 	bl	8009bd6 <b_nullAssignment>
  V_data = V->data;
 800656a:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
  i = b_taper->size[0] * b_taper->size[1];
 8006574:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8006580:	6852      	ldr	r2, [r2, #4]
 8006582:	3204      	adds	r2, #4
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  b_taper->size[0] = 1;
 800658e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]
  b_taper->size[1] = taper->size[1];
 8006598:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	6852      	ldr	r2, [r2, #4]
 80065a8:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b_taper, i);
 80065aa:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80065ae:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 fd72 	bl	800809c <emxEnsureCapacity_boolean_T>
  b_taper_data = b_taper->data;
 80065b8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
  nx = taper->size[1];
 80065c2:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i < nx; i++) {
 80065ce:	2300      	movs	r3, #0
 80065d0:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80065d4:	e020      	b.n	8006618 <NEDwaves_memlight+0x1708>
    b_taper_data[i] = (taper_data[i] > 0.55);
 80065d6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80065e0:	4413      	add	r3, r2
 80065e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065e6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80065ea:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 80065ee:	18d4      	adds	r4, r2, r3
 80065f0:	2301      	movs	r3, #1
 80065f2:	461d      	mov	r5, r3
 80065f4:	f60f 43a0 	addw	r3, pc, #3232	; 0xca0
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f7fa fbb2 	bl	8000d64 <__aeabi_dcmpgt>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <NEDwaves_memlight+0x16fa>
 8006606:	2300      	movs	r3, #0
 8006608:	461d      	mov	r5, r3
 800660a:	b2eb      	uxtb	r3, r5
 800660c:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < nx; i++) {
 800660e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006612:	3301      	adds	r3, #1
 8006614:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006618:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 800661c:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8006620:	429a      	cmp	r2, r3
 8006622:	dbd8      	blt.n	80065d6 <NEDwaves_memlight+0x16c6>
  }
  b_nullAssignment(W, b_taper);
 8006624:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8006628:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800662c:	4611      	mov	r1, r2
 800662e:	4618      	mov	r0, r3
 8006630:	f003 fad1 	bl	8009bd6 <b_nullAssignment>
  W_data = W->data;
 8006634:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
  i = b_taper->size[0] * b_taper->size[1];
 800663e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800664a:	6852      	ldr	r2, [r2, #4]
 800664c:	3204      	adds	r2, #4
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	fb02 f303 	mul.w	r3, r2, r3
 8006654:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  b_taper->size[0] = 1;
 8006658:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]
  b_taper->size[1] = taper->size[1];
 8006662:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	6852      	ldr	r2, [r2, #4]
 8006672:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b_taper, i);
 8006674:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8006678:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800667c:	4618      	mov	r0, r3
 800667e:	f001 fd0d 	bl	800809c <emxEnsureCapacity_boolean_T>
  b_taper_data = b_taper->data;
 8006682:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
  nx = taper->size[1];
 800668c:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i < nx; i++) {
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 800669e:	e020      	b.n	80066e2 <NEDwaves_memlight+0x17d2>
    b_taper_data[i] = (taper_data[i] > 0.55);
 80066a0:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80066aa:	4413      	add	r3, r2
 80066ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066b0:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80066b4:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 80066b8:	18d4      	adds	r4, r2, r3
 80066ba:	2301      	movs	r3, #1
 80066bc:	461d      	mov	r5, r3
 80066be:	f60f 33d8 	addw	r3, pc, #3032	; 0xbd8
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7fa fb4d 	bl	8000d64 <__aeabi_dcmpgt>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <NEDwaves_memlight+0x17c4>
 80066d0:	2300      	movs	r3, #0
 80066d2:	461d      	mov	r5, r3
 80066d4:	b2eb      	uxtb	r3, r5
 80066d6:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < nx; i++) {
 80066d8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80066dc:	3301      	adds	r3, #1
 80066de:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80066e2:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80066e6:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80066ea:	429a      	cmp	r2, r3
 80066ec:	dbd8      	blt.n	80066a0 <NEDwaves_memlight+0x1790>
  }
  nxin = taper->size[1];
 80066ee:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
  nx = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  i = b_taper->size[1];
 8006700:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  for (k = 0; k < i; k++) {
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8006712:	e010      	b.n	8006736 <NEDwaves_memlight+0x1826>
    nx += b_taper_data[k];
 8006714:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006718:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 800671c:	4413      	add	r3, r2
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8006726:	4413      	add	r3, r2
 8006728:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (k = 0; k < i; k++) {
 800672c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006730:	3301      	adds	r3, #1
 8006732:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8006736:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 800673a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800673e:	429a      	cmp	r2, r3
 8006740:	dbe8      	blt.n	8006714 <NEDwaves_memlight+0x1804>
  }
  nxout = taper->size[1] - nx;
 8006742:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	3304      	adds	r3, #4
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  nx = -1;
 8006756:	f04f 33ff 	mov.w	r3, #4294967295
 800675a:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (k = 0; k < nxin; k++) {
 800675e:	2300      	movs	r3, #0
 8006760:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8006764:	e02d      	b.n	80067c2 <NEDwaves_memlight+0x18b2>
    if ((k + 1 > b_taper->size[1]) || (!b_taper_data[k])) {
 8006766:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	3304      	adds	r3, #4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 8006774:	429a      	cmp	r2, r3
 8006776:	da0a      	bge.n	800678e <NEDwaves_memlight+0x187e>
 8006778:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800677c:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 8006780:	4413      	add	r3, r2
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f083 0301 	eor.w	r3, r3, #1
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d014      	beq.n	80067b8 <NEDwaves_memlight+0x18a8>
      nx++;
 800678e:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8006792:	3301      	adds	r3, #1
 8006794:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
      taper_data[nx] = taper_data[k];
 8006798:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80067a2:	4413      	add	r3, r2
 80067a4:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 80067a8:	00d2      	lsls	r2, r2, #3
 80067aa:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 80067ae:	4411      	add	r1, r2
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < nxin; k++) {
 80067b8:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80067bc:	3301      	adds	r3, #1
 80067be:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80067c2:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 80067c6:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80067ca:	429a      	cmp	r2, r3
 80067cc:	dbcb      	blt.n	8006766 <NEDwaves_memlight+0x1856>
    }
  }
  emxFree_boolean_T(&b_taper);
 80067ce:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 fe5f 	bl	8008496 <emxFree_boolean_T>
  emxInit_real32_T(&b_U, 2);
 80067d8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80067dc:	2102      	movs	r1, #2
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 ffcf 	bl	8008782 <emxInit_real32_T>
  i = taper->size[0] * taper->size[1];
 80067e4:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 80067f0:	6852      	ldr	r2, [r2, #4]
 80067f2:	3204      	adds	r2, #4
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	fb02 f303 	mul.w	r3, r2, r3
 80067fa:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  if (nxout < 1) {
 80067fe:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8006802:	2b00      	cmp	r3, #0
 8006804:	dc06      	bgt.n	8006814 <NEDwaves_memlight+0x1904>
    taper->size[1] = 0;
 8006806:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	3304      	adds	r3, #4
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	e006      	b.n	8006822 <NEDwaves_memlight+0x1912>
  } else {
    taper->size[1] = nxout;
 8006814:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8006820:	601a      	str	r2, [r3, #0]
  }
  emxEnsureCapacity_real_T(taper, i);
 8006822:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006826:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800682a:	4618      	mov	r0, r3
 800682c:	f001 fdcd 	bl	80083ca <emxEnsureCapacity_real_T>
  /*  f = linspace(fmin, fmax,nf); */
  /*  U = interp1(allf, U, f);  */
  /*  V = interp1(allf, V, f);  */
  /*  W = interp1(allf, W, f);  */
  /*  POWER SPECTRAL DENSITY (auto-spectra) */
  delta1 = d * fs;
 8006830:	f107 0310 	add.w	r3, r7, #16
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 800683c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006840:	f7fa f800 	bl	8000844 <__aeabi_dmul>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 800684c:	e9c1 2300 	strd	r2, r3, [r1]
  /*  CROSS-SPECTRAL DENSITY  */
  /*  interp onto output frequencies */
  i = b_U->size[0] * b_U->size[1];
 8006850:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8d7 28a8 	ldr.w	r2, [r7, #2216]	; 0x8a8
 800685c:	6852      	ldr	r2, [r2, #4]
 800685e:	3204      	adds	r2, #4
 8006860:	6812      	ldr	r2, [r2, #0]
 8006862:	fb02 f303 	mul.w	r3, r2, r3
 8006866:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  b_U->size[0] = 1;
 800686a:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	601a      	str	r2, [r3, #0]
  b_U->size[1] = U->size[1];
 8006874:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	6852      	ldr	r2, [r2, #4]
 8006884:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_U, i);
 8006886:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 800688a:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800688e:	4618      	mov	r0, r3
 8006890:	f001 fd35 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = b_U->data;
 8006894:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  nx = U->size[1];
 800689e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i < nx; i++) {
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80068b0:	e038      	b.n	8006924 <NEDwaves_memlight+0x1a14>
    b_x = U_data[i].re;
 80068b2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 80068bc:	4413      	add	r3, r2
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80068c4:	6013      	str	r3, [r2, #0]
    fe = U_data[i].im;
 80068c6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 80068d0:	4413      	add	r3, r2
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f607 1224 	addw	r2, r7, #2340	; 0x924
 80068d8:	6013      	str	r3, [r2, #0]
    north_data[i] = (b_x * b_x - fe * -fe) / (float)delta1;
 80068da:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80068de:	edd3 7a00 	vldr	s15, [r3]
 80068e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80068e6:	f607 1324 	addw	r3, r7, #2340	; 0x924
 80068ea:	edd3 7a00 	vldr	s15, [r3]
 80068ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068f2:	ee37 8a27 	vadd.f32	s16, s14, s15
 80068f6:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80068fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068fe:	f7fa fa99 	bl	8000e34 <__aeabi_d2f>
 8006902:	ee07 0a10 	vmov	s14, r0
 8006906:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8006910:	4413      	add	r3, r2
 8006912:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006916:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < nx; i++) {
 800691a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800691e:	3301      	adds	r3, #1
 8006920:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006924:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8006928:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 800692c:	429a      	cmp	r2, r3
 800692e:	dbc0      	blt.n	80068b2 <NEDwaves_memlight+0x19a2>
  }
  interp1(taper, b_U, UU);
 8006930:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006934:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 8006938:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800693c:	4618      	mov	r0, r3
 800693e:	f002 fddb 	bl	80094f8 <interp1>
  i = b_U->size[0] * b_U->size[1];
 8006942:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8d7 28a8 	ldr.w	r2, [r7, #2216]	; 0x8a8
 800694e:	6852      	ldr	r2, [r2, #4]
 8006950:	3204      	adds	r2, #4
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	fb02 f303 	mul.w	r3, r2, r3
 8006958:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  b_U->size[0] = 1;
 800695c:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
  b_U->size[1] = V->size[1];
 8006966:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	6852      	ldr	r2, [r2, #4]
 8006976:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_U, i);
 8006978:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 800697c:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8006980:	4618      	mov	r0, r3
 8006982:	f001 fcbc 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = b_U->data;
 8006986:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  nx = V->size[1];
 8006990:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i < nx; i++) {
 800699c:	2300      	movs	r3, #0
 800699e:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80069a2:	e038      	b.n	8006a16 <NEDwaves_memlight+0x1b06>
    b_x = V_data[i].re;
 80069a4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 80069ae:	4413      	add	r3, r2
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80069b6:	6013      	str	r3, [r2, #0]
    fe = V_data[i].im;
 80069b8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 80069c2:	4413      	add	r3, r2
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f607 1224 	addw	r2, r7, #2340	; 0x924
 80069ca:	6013      	str	r3, [r2, #0]
    north_data[i] = (b_x * b_x - fe * -fe) / (float)delta1;
 80069cc:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80069d0:	edd3 7a00 	vldr	s15, [r3]
 80069d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80069d8:	f607 1324 	addw	r3, r7, #2340	; 0x924
 80069dc:	edd3 7a00 	vldr	s15, [r3]
 80069e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80069e4:	ee37 8a27 	vadd.f32	s16, s14, s15
 80069e8:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80069ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069f0:	f7fa fa20 	bl	8000e34 <__aeabi_d2f>
 80069f4:	ee07 0a10 	vmov	s14, r0
 80069f8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8006a02:	4413      	add	r3, r2
 8006a04:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006a08:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < nx; i++) {
 8006a0c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006a10:	3301      	adds	r3, #1
 8006a12:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006a16:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8006a1a:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	dbc0      	blt.n	80069a4 <NEDwaves_memlight+0x1a94>
  }
  interp1(taper, b_U, VV);
 8006a22:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006a26:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 8006a2a:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f002 fd62 	bl	80094f8 <interp1>
  i = b_U->size[0] * b_U->size[1];
 8006a34:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8d7 28a8 	ldr.w	r2, [r7, #2216]	; 0x8a8
 8006a40:	6852      	ldr	r2, [r2, #4]
 8006a42:	3204      	adds	r2, #4
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
  b_U->size[0] = 1;
 8006a4e:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
  b_U->size[1] = W->size[1];
 8006a58:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	6852      	ldr	r2, [r2, #4]
 8006a68:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_U, i);
 8006a6a:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006a6e:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 fc43 	bl	80082fe <emxEnsureCapacity_real32_T>
  north_data = b_U->data;
 8006a78:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
  nx = W->size[1];
 8006a82:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
  for (i = 0; i < nx; i++) {
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006a94:	e038      	b.n	8006b08 <NEDwaves_memlight+0x1bf8>
    fe = W_data[i].re;
 8006a96:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8006aa0:	4413      	add	r3, r2
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8006aa8:	6013      	str	r3, [r2, #0]
    b_x = W_data[i].im;
 8006aaa:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8006ab4:	4413      	add	r3, r2
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8006abc:	6013      	str	r3, [r2, #0]
    north_data[i] = (fe * fe - b_x * -b_x) / (float)delta1;
 8006abe:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8006ac2:	edd3 7a00 	vldr	s15, [r3]
 8006ac6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006aca:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006ace:	edd3 7a00 	vldr	s15, [r3]
 8006ad2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ad6:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006ada:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ae2:	f7fa f9a7 	bl	8000e34 <__aeabi_d2f>
 8006ae6:	ee07 0a10 	vmov	s14, r0
 8006aea:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	f8d7 2900 	ldr.w	r2, [r7, #2304]	; 0x900
 8006af4:	4413      	add	r3, r2
 8006af6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006afa:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < nx; i++) {
 8006afe:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006b02:	3301      	adds	r3, #1
 8006b04:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006b08:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8006b0c:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8006b10:	429a      	cmp	r2, r3
 8006b12:	dbc0      	blt.n	8006a96 <NEDwaves_memlight+0x1b86>
  }
  interp1(taper, b_U, WW);
 8006b14:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006b18:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 8006b1c:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8006b20:	4618      	mov	r0, r3
 8006b22:	f002 fce9 	bl	80094f8 <interp1>
  /* Cxz = real(UW); % cospectrum of vertical and east horizontal motion */
  /* Qyz = imag(VW); % quadspectrum of vertical and north horizontal motion */
  /* Cyz = real(VW); % cospectrum of vertical and north horizontal motion */
  /* Cxy = real(UV) ./ ( (2*pi*f).^2 );  % cospectrum of east and north motion
   */
  emxFree_real32_T(&b_U);
 8006b26:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 fd31 	bl	8008592 <emxFree_real32_T>
  for (k = 0; k < 42; k++) {
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8006b36:	e05c      	b.n	8006bf2 <NEDwaves_memlight+0x1ce2>
    x = UU[k] + VV[k];
 8006b38:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006b3c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8006b40:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	ed93 7a00 	vldr	s14, [r3]
 8006b4c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006b50:	f5a3 6292 	sub.w	r2, r3, #1168	; 0x490
 8006b54:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	edd3 7a00 	vldr	s15, [r3]
 8006b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b64:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8006b68:	edc3 7a00 	vstr	s15, [r3]
    x_tmp_tmp[k] = x;
 8006b6c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006b70:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 8006b74:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f607 1204 	addw	r2, r7, #2308	; 0x904
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	601a      	str	r2, [r3, #0]
    x *= WW[k];
 8006b84:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006b88:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 8006b8c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	edd3 7a00 	vldr	s15, [r3]
 8006b98:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8006b9c:	ed93 7a00 	vldr	s14, [r3]
 8006ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba4:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8006ba8:	edc3 7a00 	vstr	s15, [r3]
    b_b1[k] = x;
 8006bac:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006bb0:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 8006bb4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	f607 1204 	addw	r2, r7, #2308	; 0x904
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	601a      	str	r2, [r3, #0]
    b_a1[k] = sqrtf(x);
 8006bc4:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8006bc8:	ed93 0a00 	vldr	s0, [r3]
 8006bcc:	f017 fe90 	bl	801e8f0 <sqrtf>
 8006bd0:	eef0 7a40 	vmov.f32	s15, s0
 8006bd4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006bd8:	f5a3 62d1 	sub.w	r2, r3, #1672	; 0x688
 8006bdc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < 42; k++) {
 8006be8:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006bec:	3301      	adds	r3, #1
 8006bee:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8006bf2:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006bf6:	2b29      	cmp	r3, #41	; 0x29
 8006bf8:	dd9e      	ble.n	8006b38 <NEDwaves_memlight+0x1c28>
  }
  emxInit_creal32_T(&c_U, 2);
 8006bfa:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006bfe:	2102      	movs	r1, #2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 fd4e 	bl	80086a2 <emxInit_creal32_T>
  if (U->size[1] == W->size[1]) {
 8006c06:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	f040 8125 	bne.w	8006e6a <NEDwaves_memlight+0x1f5a>
    i = c_U->size[0] * c_U->size[1];
 8006c20:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8d7 28b0 	ldr.w	r2, [r7, #2224]	; 0x8b0
 8006c2c:	6852      	ldr	r2, [r2, #4]
 8006c2e:	3204      	adds	r2, #4
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    c_U->size[0] = 1;
 8006c3a:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
    c_U->size[1] = U->size[1];
 8006c44:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	3304      	adds	r3, #4
 8006c52:	6852      	ldr	r2, [r2, #4]
 8006c54:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(c_U, i);
 8006c56:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006c5a:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fa81 	bl	8008166 <emxEnsureCapacity_creal32_T>
    b_U_data = c_U->data;
 8006c64:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
    nx = U->size[1];
 8006c6e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    for (i = 0; i < nx; i++) {
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006c80:	e0e2      	b.n	8006e48 <NEDwaves_memlight+0x1f38>
      W_re = W_data[i].re;
 8006c82:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8006c8c:	4413      	add	r3, r2
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f607 122c 	addw	r2, r7, #2348	; 0x92c
 8006c94:	6013      	str	r3, [r2, #0]
      W_im = -W_data[i].im;
 8006c96:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8006ca0:	4413      	add	r3, r2
 8006ca2:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ca6:	eef1 7a67 	vneg.f32	s15, s15
 8006caa:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8006cae:	edc3 7a00 	vstr	s15, [r3]
      b_x = U_data[i].re;
 8006cb2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8006cbc:	4413      	add	r3, r2
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8006cc4:	6013      	str	r3, [r2, #0]
      fe = U_data[i].im;
 8006cc6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8006cd0:	4413      	add	r3, r2
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8006cd8:	6013      	str	r3, [r2, #0]
      U_re = b_x * W_re - fe * W_im;
 8006cda:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006cde:	ed93 7a00 	vldr	s14, [r3]
 8006ce2:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8006ce6:	edd3 7a00 	vldr	s15, [r3]
 8006cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cee:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8006cf2:	edd3 6a00 	vldr	s13, [r3]
 8006cf6:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8006cfa:	edd3 7a00 	vldr	s15, [r3]
 8006cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d06:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8006d0a:	edc3 7a00 	vstr	s15, [r3]
      fe = b_x * W_im + fe * W_re;
 8006d0e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006d12:	ed93 7a00 	vldr	s14, [r3]
 8006d16:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8006d1a:	edd3 7a00 	vldr	s15, [r3]
 8006d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d22:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8006d26:	edd3 6a00 	vldr	s13, [r3]
 8006d2a:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8006d2e:	edd3 7a00 	vldr	s15, [r3]
 8006d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d3a:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8006d3e:	edc3 7a00 	vstr	s15, [r3]
      if (fe == 0.0F) {
 8006d42:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8006d46:	edd3 7a00 	vldr	s15, [r3]
 8006d4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d52:	d11f      	bne.n	8006d94 <NEDwaves_memlight+0x1e84>
        b_U_data[i].re = U_re / (float)delta1;
 8006d54:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d5c:	f7fa f86a 	bl	8000e34 <__aeabi_d2f>
 8006d60:	ee06 0a90 	vmov	s13, r0
 8006d64:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8006d6e:	4413      	add	r3, r2
 8006d70:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8006d74:	ed92 7a00 	vldr	s14, [r2]
 8006d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d7c:	edc3 7a00 	vstr	s15, [r3]
        b_U_data[i].im = 0.0F;
 8006d80:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	605a      	str	r2, [r3, #4]
 8006d92:	e054      	b.n	8006e3e <NEDwaves_memlight+0x1f2e>
      } else if (U_re == 0.0F) {
 8006d94:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8006d98:	edd3 7a00 	vldr	s15, [r3]
 8006d9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da4:	d11f      	bne.n	8006de6 <NEDwaves_memlight+0x1ed6>
        b_U_data[i].re = 0.0F;
 8006da6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8006db0:	4413      	add	r3, r2
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
        b_U_data[i].im = fe / (float)delta1;
 8006db8:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dc0:	f7fa f838 	bl	8000e34 <__aeabi_d2f>
 8006dc4:	ee06 0a90 	vmov	s13, r0
 8006dc8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8006dd8:	ed92 7a00 	vldr	s14, [r2]
 8006ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006de0:	edc3 7a01 	vstr	s15, [r3, #4]
 8006de4:	e02b      	b.n	8006e3e <NEDwaves_memlight+0x1f2e>
      } else {
        b_U_data[i].re = U_re / (float)delta1;
 8006de6:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dee:	f7fa f821 	bl	8000e34 <__aeabi_d2f>
 8006df2:	ee06 0a90 	vmov	s13, r0
 8006df6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8006e00:	4413      	add	r3, r2
 8006e02:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8006e06:	ed92 7a00 	vldr	s14, [r2]
 8006e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e0e:	edc3 7a00 	vstr	s15, [r3]
        b_U_data[i].im = fe / (float)delta1;
 8006e12:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e1a:	f7fa f80b 	bl	8000e34 <__aeabi_d2f>
 8006e1e:	ee06 0a90 	vmov	s13, r0
 8006e22:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8006e32:	ed92 7a00 	vldr	s14, [r2]
 8006e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e3a:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < nx; i++) {
 8006e3e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006e42:	3301      	adds	r3, #1
 8006e44:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006e48:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8006e4c:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8006e50:	429a      	cmp	r2, r3
 8006e52:	f6ff af16 	blt.w	8006c82 <NEDwaves_memlight+0x1d72>
      }
    }
    b_interp1(taper, c_U, fcv);
 8006e56:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8006e5a:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 8006e5e:	f207 7254 	addw	r2, r7, #1876	; 0x754
 8006e62:	4618      	mov	r0, r3
 8006e64:	f002 f8d0 	bl	8009008 <b_interp1>
 8006e68:	e00d      	b.n	8006e86 <NEDwaves_memlight+0x1f76>
  } else {
    binary_expand_op(fcv, taper, U, W, delta1);
 8006e6a:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 8006e6e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8006e72:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8006e76:	f207 7054 	addw	r0, r7, #1876	; 0x754
 8006e7a:	f607 04d8 	addw	r4, r7, #2264	; 0x8d8
 8006e7e:	ed94 0b00 	vldr	d0, [r4]
 8006e82:	f7fd fe1d 	bl	8004ac0 <binary_expand_op>
  }
  for (k = 0; k < 42; k++) {
 8006e86:	2300      	movs	r3, #0
 8006e88:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8006e8c:	e03f      	b.n	8006f0e <NEDwaves_memlight+0x1ffe>
    b_a1[k] = fcv[k].im / b_a1[k];
 8006e8e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006e92:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8006e96:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	edd3 6a00 	vldr	s13, [r3]
 8006ea4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006ea8:	f5a3 62d1 	sub.w	r2, r3, #1672	; 0x688
 8006eac:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	ed93 7a00 	vldr	s14, [r3]
 8006eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ebc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006ec0:	f5a3 62d1 	sub.w	r2, r3, #1672	; 0x688
 8006ec4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	edc3 7a00 	vstr	s15, [r3]
    b_b1[k] = sqrtf(b_b1[k]);
 8006ed0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006ed4:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 8006ed8:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	edd3 7a00 	vldr	s15, [r3]
 8006ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ee8:	f017 fd02 	bl	801e8f0 <sqrtf>
 8006eec:	eef0 7a40 	vmov.f32	s15, s0
 8006ef0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006ef4:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 8006ef8:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < 42; k++) {
 8006f04:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8006f0e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8006f12:	2b29      	cmp	r3, #41	; 0x29
 8006f14:	ddbb      	ble.n	8006e8e <NEDwaves_memlight+0x1f7e>
  }
  if (V->size[1] == W->size[1]) {
 8006f16:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	3304      	adds	r3, #4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	f040 8125 	bne.w	800717a <NEDwaves_memlight+0x226a>
    i = c_U->size[0] * c_U->size[1];
 8006f30:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8d7 28b0 	ldr.w	r2, [r7, #2224]	; 0x8b0
 8006f3c:	6852      	ldr	r2, [r2, #4]
 8006f3e:	3204      	adds	r2, #4
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    c_U->size[0] = 1;
 8006f4a:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	601a      	str	r2, [r3, #0]
    c_U->size[1] = V->size[1];
 8006f54:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	3304      	adds	r3, #4
 8006f62:	6852      	ldr	r2, [r2, #4]
 8006f64:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(c_U, i);
 8006f66:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006f6a:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f8f9 	bl	8008166 <emxEnsureCapacity_creal32_T>
    b_U_data = c_U->data;
 8006f74:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
    nx = V->size[1];
 8006f7e:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    for (i = 0; i < nx; i++) {
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8006f90:	e0e2      	b.n	8007158 <NEDwaves_memlight+0x2248>
      W_re = W_data[i].re;
 8006f92:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8006f9c:	4413      	add	r3, r2
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f607 122c 	addw	r2, r7, #2348	; 0x92c
 8006fa4:	6013      	str	r3, [r2, #0]
      W_im = -W_data[i].im;
 8006fa6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8006fb0:	4413      	add	r3, r2
 8006fb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8006fb6:	eef1 7a67 	vneg.f32	s15, s15
 8006fba:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8006fbe:	edc3 7a00 	vstr	s15, [r3]
      b_x = V_data[i].re;
 8006fc2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8006fcc:	4413      	add	r3, r2
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8006fd4:	6013      	str	r3, [r2, #0]
      x = V_data[i].im;
 8006fd6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8006fe0:	4413      	add	r3, r2
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f607 1204 	addw	r2, r7, #2308	; 0x904
 8006fe8:	6013      	str	r3, [r2, #0]
      V_re = b_x * W_re - x * W_im;
 8006fea:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006fee:	ed93 7a00 	vldr	s14, [r3]
 8006ff2:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8006ff6:	edd3 7a00 	vldr	s15, [r3]
 8006ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ffe:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007002:	edd3 6a00 	vldr	s13, [r3]
 8007006:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 800700a:	edd3 7a00 	vldr	s15, [r3]
 800700e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007016:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 800701a:	edc3 7a00 	vstr	s15, [r3]
      x = b_x * W_im + x * W_re;
 800701e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007022:	ed93 7a00 	vldr	s14, [r3]
 8007026:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 800702a:	edd3 7a00 	vldr	s15, [r3]
 800702e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007032:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007036:	edd3 6a00 	vldr	s13, [r3]
 800703a:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 800703e:	edd3 7a00 	vldr	s15, [r3]
 8007042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800704a:	f607 1304 	addw	r3, r7, #2308	; 0x904
 800704e:	edc3 7a00 	vstr	s15, [r3]
      if (x == 0.0F) {
 8007052:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007056:	edd3 7a00 	vldr	s15, [r3]
 800705a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800705e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007062:	d11f      	bne.n	80070a4 <NEDwaves_memlight+0x2194>
        b_U_data[i].re = V_re / (float)delta1;
 8007064:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800706c:	f7f9 fee2 	bl	8000e34 <__aeabi_d2f>
 8007070:	ee06 0a90 	vmov	s13, r0
 8007074:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 800707e:	4413      	add	r3, r2
 8007080:	f607 02c4 	addw	r2, r7, #2244	; 0x8c4
 8007084:	ed92 7a00 	vldr	s14, [r2]
 8007088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800708c:	edc3 7a00 	vstr	s15, [r3]
        b_U_data[i].im = 0.0F;
 8007090:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 800709a:	4413      	add	r3, r2
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	605a      	str	r2, [r3, #4]
 80070a2:	e054      	b.n	800714e <NEDwaves_memlight+0x223e>
      } else if (V_re == 0.0F) {
 80070a4:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 80070a8:	edd3 7a00 	vldr	s15, [r3]
 80070ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b4:	d11f      	bne.n	80070f6 <NEDwaves_memlight+0x21e6>
        b_U_data[i].re = 0.0F;
 80070b6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 80070c0:	4413      	add	r3, r2
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
        b_U_data[i].im = x / (float)delta1;
 80070c8:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80070cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070d0:	f7f9 feb0 	bl	8000e34 <__aeabi_d2f>
 80070d4:	ee06 0a90 	vmov	s13, r0
 80070d8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 80070e2:	4413      	add	r3, r2
 80070e4:	f607 1204 	addw	r2, r7, #2308	; 0x904
 80070e8:	ed92 7a00 	vldr	s14, [r2]
 80070ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070f0:	edc3 7a01 	vstr	s15, [r3, #4]
 80070f4:	e02b      	b.n	800714e <NEDwaves_memlight+0x223e>
      } else {
        b_U_data[i].re = V_re / (float)delta1;
 80070f6:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80070fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070fe:	f7f9 fe99 	bl	8000e34 <__aeabi_d2f>
 8007102:	ee06 0a90 	vmov	s13, r0
 8007106:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8007110:	4413      	add	r3, r2
 8007112:	f607 02c4 	addw	r2, r7, #2244	; 0x8c4
 8007116:	ed92 7a00 	vldr	s14, [r2]
 800711a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800711e:	edc3 7a00 	vstr	s15, [r3]
        b_U_data[i].im = x / (float)delta1;
 8007122:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800712a:	f7f9 fe83 	bl	8000e34 <__aeabi_d2f>
 800712e:	ee06 0a90 	vmov	s13, r0
 8007132:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 800713c:	4413      	add	r3, r2
 800713e:	f607 1204 	addw	r2, r7, #2308	; 0x904
 8007142:	ed92 7a00 	vldr	s14, [r2]
 8007146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800714a:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < nx; i++) {
 800714e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007152:	3301      	adds	r3, #1
 8007154:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007158:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 800715c:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8007160:	429a      	cmp	r2, r3
 8007162:	f6ff af16 	blt.w	8006f92 <NEDwaves_memlight+0x2082>
      }
    }
    b_interp1(taper, c_U, fcv);
 8007166:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 800716a:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 800716e:	f207 7254 	addw	r2, r7, #1876	; 0x754
 8007172:	4618      	mov	r0, r3
 8007174:	f001 ff48 	bl	8009008 <b_interp1>
 8007178:	e00d      	b.n	8007196 <NEDwaves_memlight+0x2286>
  } else {
    binary_expand_op(fcv, taper, V, W, delta1);
 800717a:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800717e:	f8d7 28b8 	ldr.w	r2, [r7, #2232]	; 0x8b8
 8007182:	f8d7 38b4 	ldr.w	r3, [r7, #2228]	; 0x8b4
 8007186:	f207 7054 	addw	r0, r7, #1876	; 0x754
 800718a:	f607 04d8 	addw	r4, r7, #2264	; 0x8d8
 800718e:	ed94 0b00 	vldr	d0, [r4]
 8007192:	f7fd fc95 	bl	8004ac0 <binary_expand_op>
  }
  emxFree_creal32_T(&W);
 8007196:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 800719a:	4618      	mov	r0, r3
 800719c:	f001 f9a5 	bl	80084ea <emxFree_creal32_T>
  /*  Scalar energy spectra (a0) */
  for (i = 0; i < 42; i++) {
 80071a0:	2300      	movs	r3, #0
 80071a2:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80071a6:	e042      	b.n	800722e <NEDwaves_memlight+0x231e>
    b_b1[i] = fcv[i].im / b_b1[i];
 80071a8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80071ac:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 80071b0:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	4413      	add	r3, r2
 80071b8:	3304      	adds	r3, #4
 80071ba:	edd3 6a00 	vldr	s13, [r3]
 80071be:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80071c2:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 80071c6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	ed93 7a00 	vldr	s14, [r3]
 80071d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80071da:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 80071de:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	edc3 7a00 	vstr	s15, [r3]
    b_E[i] = x_tmp_tmp[i] / fv[i];
 80071ea:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80071ee:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 80071f2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	edd3 6a00 	vldr	s13, [r3]
 80071fe:	4a28      	ldr	r2, [pc, #160]	; (80072a0 <NEDwaves_memlight+0x2390>)
 8007200:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	ed93 7a00 	vldr	s14, [r3]
 800720c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007210:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007214:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 8007218:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 42; i++) {
 8007224:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007228:	3301      	adds	r3, #1
 800722a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 800722e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007232:	2b29      	cmp	r3, #41	; 0x29
 8007234:	ddb8      	ble.n	80071a8 <NEDwaves_memlight+0x2298>
  /*  E = ( WW ) ./ ( (2*pi*f).^2 ); % arbitrary depth, but more noise? */
  /*  use orbit shape as check on quality (=1 in deep water) */
  /*  wave stats */
  /*  frequency cutoff for wave stats */
  /*  significant wave height */
  W_re = b_E[4];
 8007236:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800723a:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f607 122c 	addw	r2, r7, #2348	; 0x92c
 8007244:	6013      	str	r3, [r2, #0]
  for (k = 0; k < 37; k++) {
 8007246:	2300      	movs	r3, #0
 8007248:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800724c:	e019      	b.n	8007282 <NEDwaves_memlight+0x2372>
    W_re += b_E[k + 5];
 800724e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007252:	3305      	adds	r3, #5
 8007254:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007258:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	edd3 7a00 	vldr	s15, [r3]
 8007264:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007268:	ed93 7a00 	vldr	s14, [r3]
 800726c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007270:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007274:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < 37; k++) {
 8007278:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800727c:	3301      	adds	r3, #1
 800727e:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8007282:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007286:	2b24      	cmp	r3, #36	; 0x24
 8007288:	dde1      	ble.n	800724e <NEDwaves_memlight+0x233e>
  }
  /*   energy period */
  for (i = 0; i < 38; i++) {
 800728a:	2300      	movs	r3, #0
 800728c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007290:	e02b      	b.n	80072ea <NEDwaves_memlight+0x23da>
 8007292:	bf00      	nop
 8007294:	f3af 8000 	nop.w
 8007298:	9999999a 	.word	0x9999999a
 800729c:	3fe19999 	.word	0x3fe19999
 80072a0:	08023704 	.word	0x08023704
    c_x[i] = fv1[i] * b_E[i + 4];
 80072a4:	4ad3      	ldr	r2, [pc, #844]	; (80075f4 <NEDwaves_memlight+0x26e4>)
 80072a6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	ed93 7a00 	vldr	s14, [r3]
 80072b2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80072b6:	3304      	adds	r3, #4
 80072b8:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80072bc:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	edd3 7a00 	vldr	s15, [r3]
 80072c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072cc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80072d0:	f6a3 1218 	subw	r2, r3, #2328	; 0x918
 80072d4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 38; i++) {
 80072e0:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80072e4:	3301      	adds	r3, #1
 80072e6:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 80072ea:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80072ee:	2b25      	cmp	r3, #37	; 0x25
 80072f0:	ddd8      	ble.n	80072a4 <NEDwaves_memlight+0x2394>
  }
  b_x = c_x[0];
 80072f2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80072f6:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8007300:	6013      	str	r3, [r2, #0]
  fe = b_E[4];
 8007302:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007306:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8007310:	6013      	str	r3, [r2, #0]
  for (k = 0; k < 37; k++) {
 8007312:	2300      	movs	r3, #0
 8007314:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8007318:	e02e      	b.n	8007378 <NEDwaves_memlight+0x2468>
    b_x += c_x[k + 1];
 800731a:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800731e:	3301      	adds	r3, #1
 8007320:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007324:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	edd3 7a00 	vldr	s15, [r3]
 8007330:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007334:	ed93 7a00 	vldr	s14, [r3]
 8007338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800733c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007340:	edc3 7a00 	vstr	s15, [r3]
    fe += b_E[k + 5];
 8007344:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007348:	3305      	adds	r3, #5
 800734a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800734e:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	edd3 7a00 	vldr	s15, [r3]
 800735a:	f607 1324 	addw	r3, r7, #2340	; 0x924
 800735e:	ed93 7a00 	vldr	s14, [r3]
 8007362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007366:	f607 1324 	addw	r3, r7, #2340	; 0x924
 800736a:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < 37; k++) {
 800736e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007372:	3301      	adds	r3, #1
 8007374:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8007378:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800737c:	2b24      	cmp	r3, #36	; 0x24
 800737e:	ddcc      	ble.n	800731a <NEDwaves_memlight+0x240a>
  }
  fe = b_x / fe;
 8007380:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007384:	edd3 6a00 	vldr	s13, [r3]
 8007388:	f607 1324 	addw	r3, r7, #2340	; 0x924
 800738c:	ed93 7a00 	vldr	s14, [r3]
 8007390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007394:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007398:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < 42; k++) {
 800739c:	2300      	movs	r3, #0
 800739e:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80073a2:	e01d      	b.n	80073e0 <NEDwaves_memlight+0x24d0>
    varargin_1[k] = fabsf(fv2[k] - fe);
 80073a4:	4a94      	ldr	r2, [pc, #592]	; (80075f8 <NEDwaves_memlight+0x26e8>)
 80073a6:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	ed93 7a00 	vldr	s14, [r3]
 80073b2:	f607 1324 	addw	r3, r7, #2340	; 0x924
 80073b6:	edd3 7a00 	vldr	s15, [r3]
 80073ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073be:	eef0 7ae7 	vabs.f32	s15, s15
 80073c2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80073c6:	f5a3 62fb 	sub.w	r2, r3, #2008	; 0x7d8
 80073ca:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < 42; k++) {
 80073d6:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80073da:	3301      	adds	r3, #1
 80073dc:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80073e0:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80073e4:	2b29      	cmp	r3, #41	; 0x29
 80073e6:	dddd      	ble.n	80073a4 <NEDwaves_memlight+0x2494>
  }
  if (!rtIsNaNF(varargin_1[0])) {
 80073e8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80073ec:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 80073f0:	edd3 7a00 	vldr	s15, [r3]
 80073f4:	eeb0 0a67 	vmov.f32	s0, s15
 80073f8:	f002 fd83 	bl	8009f02 <rtIsNaNF>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f083 0301 	eor.w	r3, r3, #1
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <NEDwaves_memlight+0x2500>
    nxout = 1;
 8007408:	2301      	movs	r3, #1
 800740a:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800740e:	e036      	b.n	800747e <NEDwaves_memlight+0x256e>
  } else {
    nxout = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
    k = 2;
 8007416:	2302      	movs	r3, #2
 8007418:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    exitg1 = false;
 800741c:	2300      	movs	r3, #0
 800741e:	f887 390e 	strb.w	r3, [r7, #2318]	; 0x90e
    while ((!exitg1) && (k < 43)) {
 8007422:	e021      	b.n	8007468 <NEDwaves_memlight+0x2558>
      if (!rtIsNaNF(varargin_1[k - 1])) {
 8007424:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007428:	3b01      	subs	r3, #1
 800742a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800742e:	f5a2 62fb 	sub.w	r2, r2, #2008	; 0x7d8
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	edd3 7a00 	vldr	s15, [r3]
 800743a:	eeb0 0a67 	vmov.f32	s0, s15
 800743e:	f002 fd60 	bl	8009f02 <rtIsNaNF>
 8007442:	4603      	mov	r3, r0
 8007444:	f083 0301 	eor.w	r3, r3, #1
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <NEDwaves_memlight+0x254e>
        nxout = k;
 800744e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007452:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
        exitg1 = true;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 390e 	strb.w	r3, [r7, #2318]	; 0x90e
 800745c:	e004      	b.n	8007468 <NEDwaves_memlight+0x2558>
      } else {
        k++;
 800745e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007462:	3301      	adds	r3, #1
 8007464:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    while ((!exitg1) && (k < 43)) {
 8007468:	f897 390e 	ldrb.w	r3, [r7, #2318]	; 0x90e
 800746c:	f083 0301 	eor.w	r3, r3, #1
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <NEDwaves_memlight+0x256e>
 8007476:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800747a:	2b2a      	cmp	r3, #42	; 0x2a
 800747c:	ddd2      	ble.n	8007424 <NEDwaves_memlight+0x2514>
      }
    }
  }
  if (nxout == 0) {
 800747e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <NEDwaves_memlight+0x257e>
    nxout = 1;
 8007486:	2301      	movs	r3, #1
 8007488:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800748c:	e043      	b.n	8007516 <NEDwaves_memlight+0x2606>
  } else {
    b_x = varargin_1[nxout - 1];
 800748e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8007492:	3b01      	subs	r3, #1
 8007494:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007498:	f5a2 62fb 	sub.w	r2, r2, #2008	; 0x7d8
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80074a6:	6013      	str	r3, [r2, #0]
    i = nxout + 1;
 80074a8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80074ac:	3301      	adds	r3, #1
 80074ae:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    for (k = i; k < 43; k++) {
 80074b2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80074b6:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80074ba:	e028      	b.n	800750e <NEDwaves_memlight+0x25fe>
      x = varargin_1[k - 1];
 80074bc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80074c0:	3b01      	subs	r3, #1
 80074c2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80074c6:	f5a2 62fb 	sub.w	r2, r2, #2008	; 0x7d8
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f607 1204 	addw	r2, r7, #2308	; 0x904
 80074d4:	6013      	str	r3, [r2, #0]
      if (b_x > x) {
 80074d6:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80074da:	ed93 7a00 	vldr	s14, [r3]
 80074de:	f607 1304 	addw	r3, r7, #2308	; 0x904
 80074e2:	edd3 7a00 	vldr	s15, [r3]
 80074e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ee:	dd09      	ble.n	8007504 <NEDwaves_memlight+0x25f4>
        b_x = x;
 80074f0:	f607 1304 	addw	r3, r7, #2308	; 0x904
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80074fa:	6013      	str	r3, [r2, #0]
        nxout = k;
 80074fc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007500:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
    for (k = i; k < 43; k++) {
 8007504:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007508:	3301      	adds	r3, #1
 800750a:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800750e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007512:	2b2a      	cmp	r3, #42	; 0x2a
 8007514:	ddd2      	ble.n	80074bc <NEDwaves_memlight+0x25ac>
    }
  }
  /*  peak period */
  /* [~ , fpindex] = max(UU+VV); % can use velocity (picks out more distint
   * peak) */
  if (!rtIsNaNF(b_E[0])) {
 8007516:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800751a:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800751e:	edd3 7a00 	vldr	s15, [r3]
 8007522:	eeb0 0a67 	vmov.f32	s0, s15
 8007526:	f002 fcec 	bl	8009f02 <rtIsNaNF>
 800752a:	4603      	mov	r3, r0
 800752c:	f083 0301 	eor.w	r3, r3, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <NEDwaves_memlight+0x262e>
    nx = 1;
 8007536:	2301      	movs	r3, #1
 8007538:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 800753c:	e036      	b.n	80075ac <NEDwaves_memlight+0x269c>
  } else {
    nx = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    k = 2;
 8007544:	2302      	movs	r3, #2
 8007546:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    exitg1 = false;
 800754a:	2300      	movs	r3, #0
 800754c:	f887 390e 	strb.w	r3, [r7, #2318]	; 0x90e
    while ((!exitg1) && (k < 43)) {
 8007550:	e021      	b.n	8007596 <NEDwaves_memlight+0x2686>
      if (!rtIsNaNF(b_E[k - 1])) {
 8007552:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007556:	3b01      	subs	r3, #1
 8007558:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800755c:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	edd3 7a00 	vldr	s15, [r3]
 8007568:	eeb0 0a67 	vmov.f32	s0, s15
 800756c:	f002 fcc9 	bl	8009f02 <rtIsNaNF>
 8007570:	4603      	mov	r3, r0
 8007572:	f083 0301 	eor.w	r3, r3, #1
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <NEDwaves_memlight+0x267c>
        nx = k;
 800757c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007580:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
        exitg1 = true;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 390e 	strb.w	r3, [r7, #2318]	; 0x90e
 800758a:	e004      	b.n	8007596 <NEDwaves_memlight+0x2686>
      } else {
        k++;
 800758c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007590:	3301      	adds	r3, #1
 8007592:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    while ((!exitg1) && (k < 43)) {
 8007596:	f897 390e 	ldrb.w	r3, [r7, #2318]	; 0x90e
 800759a:	f083 0301 	eor.w	r3, r3, #1
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <NEDwaves_memlight+0x269c>
 80075a4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80075a8:	2b2a      	cmp	r3, #42	; 0x2a
 80075aa:	ddd2      	ble.n	8007552 <NEDwaves_memlight+0x2642>
      }
    }
  }
  if (nx == 0) {
 80075ac:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d103      	bne.n	80075bc <NEDwaves_memlight+0x26ac>
    nxin = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 80075ba:	e04d      	b.n	8007658 <NEDwaves_memlight+0x2748>
  } else {
    b_x = b_E[nx - 1];
 80075bc:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80075c0:	3b01      	subs	r3, #1
 80075c2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80075c6:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80075d4:	6013      	str	r3, [r2, #0]
    nxin = nx - 1;
 80075d6:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80075da:	3b01      	subs	r3, #1
 80075dc:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    i = nx + 1;
 80075e0:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80075e4:	3301      	adds	r3, #1
 80075e6:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    for (k = i; k < 43; k++) {
 80075ea:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80075ee:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 80075f2:	e02d      	b.n	8007650 <NEDwaves_memlight+0x2740>
 80075f4:	080237ac 	.word	0x080237ac
 80075f8:	08023844 	.word	0x08023844
      x = b_E[k - 1];
 80075fc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007600:	3b01      	subs	r3, #1
 8007602:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007606:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f607 1204 	addw	r2, r7, #2308	; 0x904
 8007614:	6013      	str	r3, [r2, #0]
      if (b_x < x) {
 8007616:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800761a:	ed93 7a00 	vldr	s14, [r3]
 800761e:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007622:	edd3 7a00 	vldr	s15, [r3]
 8007626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762e:	d50a      	bpl.n	8007646 <NEDwaves_memlight+0x2736>
        b_x = x;
 8007630:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800763a:	6013      	str	r3, [r2, #0]
        nxin = k - 1;
 800763c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007640:	3b01      	subs	r3, #1
 8007642:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    for (k = i; k < 43; k++) {
 8007646:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800764a:	3301      	adds	r3, #1
 800764c:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8007650:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007654:	2b2a      	cmp	r3, #42	; 0x2a
 8007656:	ddd1      	ble.n	80075fc <NEDwaves_memlight+0x26ec>
      }
    }
  }
  delta2 = 1.0 / dv[nxin];
 8007658:	4ad7      	ldr	r2, [pc, #860]	; (80079b8 <NEDwaves_memlight+0x2aa8>)
 800765a:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4413      	add	r3, r2
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f04f 0000 	mov.w	r0, #0
 800766a:	49d4      	ldr	r1, [pc, #848]	; (80079bc <NEDwaves_memlight+0x2aac>)
 800766c:	f7f9 fa14 	bl	8000a98 <__aeabi_ddiv>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8007678:	e9c1 2300 	strd	r2, r3, [r1]
  if (delta2 > 18.0) {
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	4bcf      	ldr	r3, [pc, #828]	; (80079c0 <NEDwaves_memlight+0x2ab0>)
 8007682:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8007686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800768a:	f7f9 fb6b 	bl	8000d64 <__aeabi_dcmpgt>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d016      	beq.n	80076c2 <NEDwaves_memlight+0x27b2>
    /*  if reasonable peak not found, use centroid */
    delta2 = 1.0F / fe;
 8007694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007698:	f607 1324 	addw	r3, r7, #2340	; 0x924
 800769c:	edd3 7a00 	vldr	s15, [r3]
 80076a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80076a4:	ee16 0a90 	vmov	r0, s13
 80076a8:	f7f9 f874 	bl	8000794 <__aeabi_f2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80076b4:	e9c1 2300 	strd	r2, r3, [r1]
    nxin = nxout - 1;
 80076b8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80076bc:	3b01      	subs	r3, #1
 80076be:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
  }
  /*  wave directions */
  /*  peak wave direction, rotated to geographic conventions */
  /*  [rad], 4 quadrant */
  /*  switch from rad to deg, and CCW to CW (negate) */
  fe = -57.3248405F * rt_atan2f_snf(b_b1[nxin], b_a1[nxin]) + 90.0F;
 80076c2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80076c6:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 80076ca:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	edd3 7a00 	vldr	s15, [r3]
 80076d6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80076da:	f5a3 62d1 	sub.w	r2, r3, #1672	; 0x688
 80076de:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	ed93 7a00 	vldr	s14, [r3]
 80076ea:	eef0 0a47 	vmov.f32	s1, s14
 80076ee:	eeb0 0a67 	vmov.f32	s0, s15
 80076f2:	f7fd fb11 	bl	8004d18 <rt_atan2f_snf>
 80076f6:	eef0 7a40 	vmov.f32	s15, s0
 80076fa:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80079c4 <NEDwaves_memlight+0x2ab4>
 80076fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007702:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80079c8 <NEDwaves_memlight+0x2ab8>
 8007706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800770a:	f607 1324 	addw	r3, r7, #2340	; 0x924
 800770e:	edc3 7a00 	vstr	s15, [r3]
  /*  rotate from eastward = 0 to northward  = 0 */
  if (fe < 0.0F) {
 8007712:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007716:	edd3 7a00 	vldr	s15, [r3]
 800771a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800771e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007722:	d50b      	bpl.n	800773c <NEDwaves_memlight+0x282c>
    fe += 360.0F;
 8007724:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007728:	edd3 7a00 	vldr	s15, [r3]
 800772c:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80079cc <NEDwaves_memlight+0x2abc>
 8007730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007734:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007738:	edc3 7a00 	vstr	s15, [r3]
  }
  /*  take NW quadrant from negative to 270-360 range */
  if (fe > 180.0F) {
 800773c:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007740:	edd3 7a00 	vldr	s15, [r3]
 8007744:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80079d0 <NEDwaves_memlight+0x2ac0>
 8007748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007750:	dd0b      	ble.n	800776a <NEDwaves_memlight+0x285a>
    fe -= 180.0F;
 8007752:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007756:	edd3 7a00 	vldr	s15, [r3]
 800775a:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80079d0 <NEDwaves_memlight+0x2ac0>
 800775e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007762:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007766:	edc3 7a00 	vstr	s15, [r3]
  }
  /*  take reciprocal such wave direction is FROM, not TOWARDS */
  if (fe < 180.0F) {
 800776a:	f607 1324 	addw	r3, r7, #2340	; 0x924
 800776e:	edd3 7a00 	vldr	s15, [r3]
 8007772:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80079d0 <NEDwaves_memlight+0x2ac0>
 8007776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800777a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777e:	d50b      	bpl.n	8007798 <NEDwaves_memlight+0x2888>
    fe += 180.0F;
 8007780:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007784:	edd3 7a00 	vldr	s15, [r3]
 8007788:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80079d0 <NEDwaves_memlight+0x2ac0>
 800778c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007790:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007794:	edc3 7a00 	vstr	s15, [r3]
  }
  /*  take reciprocal such wave direction is FROM, not TOWARDS */
  /*  format for microSWIFT telemetry output (payload type 52) */
  *Hs = floatToHalf(4.0F * sqrtf(W_re * 0.0119512193F));
 8007798:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 800779c:	edd3 7a00 	vldr	s15, [r3]
 80077a0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80079d4 <NEDwaves_memlight+0x2ac4>
 80077a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077a8:	eeb0 0a67 	vmov.f32	s0, s15
 80077ac:	f017 f8a0 	bl	801e8f0 <sqrtf>
 80077b0:	eef0 7a40 	vmov.f32	s15, s0
 80077b4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80077b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077bc:	eeb0 0a67 	vmov.f32	s0, s15
 80077c0:	f002 fc14 	bl	8009fec <floatToHalf>
 80077c4:	4602      	mov	r2, r0
 80077c6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80077ca:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	801a      	strh	r2, [r3, #0]
  *Tp = doubleToHalf(delta2);
 80077d2:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80077d6:	ed93 0b00 	vldr	d0, [r3]
 80077da:	f002 fcb3 	bl	800a144 <doubleToHalf>
 80077de:	4602      	mov	r2, r0
 80077e0:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80077e4:	801a      	strh	r2, [r3, #0]
  *Dp = floatToHalf(fe);
 80077e6:	f607 1324 	addw	r3, r7, #2340	; 0x924
 80077ea:	ed93 0a00 	vldr	s0, [r3]
 80077ee:	f002 fbfd 	bl	8009fec <floatToHalf>
 80077f2:	4602      	mov	r2, r0
 80077f4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80077f8:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < 42; i++) {
 80077fa:	2300      	movs	r3, #0
 80077fc:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007800:	e02b      	b.n	800785a <NEDwaves_memlight+0x294a>
    E[i] = floatToHalf(b_E[i]);
 8007802:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007806:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800780a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	edd3 7a00 	vldr	s15, [r3]
 8007816:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 8007820:	18d4      	adds	r4, r2, r3
 8007822:	eeb0 0a67 	vmov.f32	s0, s15
 8007826:	f002 fbe1 	bl	8009fec <floatToHalf>
 800782a:	4603      	mov	r3, r0
 800782c:	8023      	strh	r3, [r4, #0]
    x_tmp_data[i] = dv[i];
 800782e:	4a62      	ldr	r2, [pc, #392]	; (80079b8 <NEDwaves_memlight+0x2aa8>)
 8007830:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	4413      	add	r3, r2
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8007840:	f5a1 7050 	sub.w	r0, r1, #832	; 0x340
 8007844:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8007848:	00c9      	lsls	r1, r1, #3
 800784a:	4401      	add	r1, r0
 800784c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 42; i++) {
 8007850:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007854:	3301      	adds	r3, #1
 8007856:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 800785a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800785e:	2b29      	cmp	r3, #41	; 0x29
 8007860:	ddcf      	ble.n	8007802 <NEDwaves_memlight+0x28f2>
  }
  delta2 = x_tmp_data[0];
 8007862:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007866:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8007872:	e9c1 2300 	strd	r2, r3, [r1]
  d1 = x_tmp_data[0];
 8007876:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800787a:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8007886:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < 41; k++) {
 800788a:	2300      	movs	r3, #0
 800788c:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8007890:	e03d      	b.n	800790e <NEDwaves_memlight+0x29fe>
    d = x_tmp_data[k + 1];
 8007892:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007896:	3301      	adds	r3, #1
 8007898:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800789c:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	4413      	add	r3, r2
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 80078ac:	e9c1 2300 	strd	r2, r3, [r1]
    if (delta2 > d) {
 80078b0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80078bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c0:	f7f9 fa50 	bl	8000d64 <__aeabi_dcmpgt>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d007      	beq.n	80078da <NEDwaves_memlight+0x29ca>
      delta2 = d;
 80078ca:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80078d6:	e9c1 2300 	strd	r2, r3, [r1]
    }
    if (d1 < d) {
 80078da:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f607 1138 	addw	r1, r7, #2360	; 0x938
 80078e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ea:	f7f9 fa1d 	bl	8000d28 <__aeabi_dcmplt>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <NEDwaves_memlight+0x29f4>
      d1 = d;
 80078f4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8007900:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < 41; k++) {
 8007904:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007908:	3301      	adds	r3, #1
 800790a:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800790e:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8007912:	2b28      	cmp	r3, #40	; 0x28
 8007914:	ddbd      	ble.n	8007892 <NEDwaves_memlight+0x2982>
    }
  }
  *b_fmin = doubleToHalf(delta2);
 8007916:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800791a:	ed93 0b00 	vldr	d0, [r3]
 800791e:	f002 fc11 	bl	800a144 <doubleToHalf>
 8007922:	4602      	mov	r2, r0
 8007924:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8007928:	801a      	strh	r2, [r3, #0]
  *b_fmax = doubleToHalf(d1);
 800792a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800792e:	ed93 0b00 	vldr	d0, [r3]
 8007932:	f002 fc07 	bl	800a144 <doubleToHalf>
 8007936:	4602      	mov	r2, r0
 8007938:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800793c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < 42; i++) {
 800793e:	2300      	movs	r3, #0
 8007940:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007944:	e135      	b.n	8007bb2 <NEDwaves_memlight+0x2ca2>
    x = roundf(b_a1[i] * 100.0F);
 8007946:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800794a:	f5a3 62d1 	sub.w	r2, r3, #1672	; 0x688
 800794e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	edd3 7a00 	vldr	s15, [r3]
 800795a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80079d8 <NEDwaves_memlight+0x2ac8>
 800795e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007962:	eeb0 0a67 	vmov.f32	s0, s15
 8007966:	f016 ff77 	bl	801e858 <roundf>
 800796a:	f607 1304 	addw	r3, r7, #2308	; 0x904
 800796e:	ed83 0a00 	vstr	s0, [r3]
    if (x < 128.0F) {
 8007972:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007976:	edd3 7a00 	vldr	s15, [r3]
 800797a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80079e0 <NEDwaves_memlight+0x2ad0>
 800797e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007986:	d531      	bpl.n	80079ec <NEDwaves_memlight+0x2adc>
      if (x >= -128.0F) {
 8007988:	f607 1304 	addw	r3, r7, #2308	; 0x904
 800798c:	edd3 7a00 	vldr	s15, [r3]
 8007990:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80079dc <NEDwaves_memlight+0x2acc>
 8007994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799c:	db22      	blt.n	80079e4 <NEDwaves_memlight+0x2ad4>
        i1 = (signed char)x;
 800799e:	f607 1304 	addw	r3, r7, #2308	; 0x904
 80079a2:	edd3 7a00 	vldr	s15, [r3]
 80079a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079aa:	edc7 7a02 	vstr	s15, [r7, #8]
 80079ae:	7a3b      	ldrb	r3, [r7, #8]
 80079b0:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 80079b4:	e02c      	b.n	8007a10 <NEDwaves_memlight+0x2b00>
 80079b6:	bf00      	nop
 80079b8:	080238f0 	.word	0x080238f0
 80079bc:	3ff00000 	.word	0x3ff00000
 80079c0:	40320000 	.word	0x40320000
 80079c4:	c2654ca3 	.word	0xc2654ca3
 80079c8:	42b40000 	.word	0x42b40000
 80079cc:	43b40000 	.word	0x43b40000
 80079d0:	43340000 	.word	0x43340000
 80079d4:	3c43cf0c 	.word	0x3c43cf0c
 80079d8:	42c80000 	.word	0x42c80000
 80079dc:	c3000000 	.word	0xc3000000
 80079e0:	43000000 	.word	0x43000000
      } else {
        i1 = MIN_int8_T;
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 80079ea:	e011      	b.n	8007a10 <NEDwaves_memlight+0x2b00>
      }
    } else if (x >= 128.0F) {
 80079ec:	f607 1304 	addw	r3, r7, #2308	; 0x904
 80079f0:	edd3 7a00 	vldr	s15, [r3]
 80079f4:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80079e0 <NEDwaves_memlight+0x2ad0>
 80079f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a00:	db03      	blt.n	8007a0a <NEDwaves_memlight+0x2afa>
      i1 = MAX_int8_T;
 8007a02:	237f      	movs	r3, #127	; 0x7f
 8007a04:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007a08:	e002      	b.n	8007a10 <NEDwaves_memlight+0x2b00>
    } else {
      i1 = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
    }
    a1[i] = i1;
 8007a10:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007a14:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 8007a18:	4413      	add	r3, r2
 8007a1a:	f897 290f 	ldrb.w	r2, [r7, #2319]	; 0x90f
 8007a1e:	701a      	strb	r2, [r3, #0]
    x = roundf(b_b1[i] * 100.0F);
 8007a20:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007a24:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 8007a28:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	edd3 7a00 	vldr	s15, [r3]
 8007a34:	ed1f 7a18 	vldr	s14, [pc, #-96]	; 80079d8 <NEDwaves_memlight+0x2ac8>
 8007a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a40:	f016 ff0a 	bl	801e858 <roundf>
 8007a44:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007a48:	ed83 0a00 	vstr	s0, [r3]
    if (x < 128.0F) {
 8007a4c:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007a50:	edd3 7a00 	vldr	s15, [r3]
 8007a54:	ed1f 7a1e 	vldr	s14, [pc, #-120]	; 80079e0 <NEDwaves_memlight+0x2ad0>
 8007a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a60:	d51a      	bpl.n	8007a98 <NEDwaves_memlight+0x2b88>
      if (x >= -128.0F) {
 8007a62:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007a66:	edd3 7a00 	vldr	s15, [r3]
 8007a6a:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 80079dc <NEDwaves_memlight+0x2acc>
 8007a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a76:	db0b      	blt.n	8007a90 <NEDwaves_memlight+0x2b80>
        i1 = (signed char)x;
 8007a78:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007a7c:	edd3 7a00 	vldr	s15, [r3]
 8007a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a84:	edc7 7a02 	vstr	s15, [r7, #8]
 8007a88:	7a3b      	ldrb	r3, [r7, #8]
 8007a8a:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007a8e:	e015      	b.n	8007abc <NEDwaves_memlight+0x2bac>
      } else {
        i1 = MIN_int8_T;
 8007a90:	2380      	movs	r3, #128	; 0x80
 8007a92:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007a96:	e011      	b.n	8007abc <NEDwaves_memlight+0x2bac>
      }
    } else if (x >= 128.0F) {
 8007a98:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007a9c:	edd3 7a00 	vldr	s15, [r3]
 8007aa0:	ed1f 7a31 	vldr	s14, [pc, #-196]	; 80079e0 <NEDwaves_memlight+0x2ad0>
 8007aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aac:	db03      	blt.n	8007ab6 <NEDwaves_memlight+0x2ba6>
      i1 = MAX_int8_T;
 8007aae:	237f      	movs	r3, #127	; 0x7f
 8007ab0:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007ab4:	e002      	b.n	8007abc <NEDwaves_memlight+0x2bac>
    } else {
      i1 = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
    }
    b1[i] = i1;
 8007abc:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007ac0:	f8d7 2980 	ldr.w	r2, [r7, #2432]	; 0x980
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f897 290f 	ldrb.w	r2, [r7, #2319]	; 0x90f
 8007aca:	701a      	strb	r2, [r3, #0]
    x = roundf((UU[i] - VV[i]) / x_tmp_tmp[i] * 100.0F);
 8007acc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007ad0:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8007ad4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	ed93 7a00 	vldr	s14, [r3]
 8007ae0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007ae4:	f5a3 6292 	sub.w	r2, r3, #1168	; 0x490
 8007ae8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	edd3 7a00 	vldr	s15, [r3]
 8007af4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007af8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007afc:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 8007b00:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	ed93 7a00 	vldr	s14, [r3]
 8007b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b10:	ed1f 7a4f 	vldr	s14, [pc, #-316]	; 80079d8 <NEDwaves_memlight+0x2ac8>
 8007b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b18:	eeb0 0a67 	vmov.f32	s0, s15
 8007b1c:	f016 fe9c 	bl	801e858 <roundf>
 8007b20:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007b24:	ed83 0a00 	vstr	s0, [r3]
    if (x < 128.0F) {
 8007b28:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007b2c:	edd3 7a00 	vldr	s15, [r3]
 8007b30:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 80079e0 <NEDwaves_memlight+0x2ad0>
 8007b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3c:	d51a      	bpl.n	8007b74 <NEDwaves_memlight+0x2c64>
      if (x >= -128.0F) {
 8007b3e:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007b42:	edd3 7a00 	vldr	s15, [r3]
 8007b46:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 80079dc <NEDwaves_memlight+0x2acc>
 8007b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	db0b      	blt.n	8007b6c <NEDwaves_memlight+0x2c5c>
        i1 = (signed char)x;
 8007b54:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007b58:	edd3 7a00 	vldr	s15, [r3]
 8007b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b60:	edc7 7a02 	vstr	s15, [r7, #8]
 8007b64:	7a3b      	ldrb	r3, [r7, #8]
 8007b66:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007b6a:	e015      	b.n	8007b98 <NEDwaves_memlight+0x2c88>
      } else {
        i1 = MIN_int8_T;
 8007b6c:	2380      	movs	r3, #128	; 0x80
 8007b6e:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007b72:	e011      	b.n	8007b98 <NEDwaves_memlight+0x2c88>
      }
    } else if (x >= 128.0F) {
 8007b74:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007b78:	edd3 7a00 	vldr	s15, [r3]
 8007b7c:	ed1f 7a68 	vldr	s14, [pc, #-416]	; 80079e0 <NEDwaves_memlight+0x2ad0>
 8007b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b88:	db03      	blt.n	8007b92 <NEDwaves_memlight+0x2c82>
      i1 = MAX_int8_T;
 8007b8a:	237f      	movs	r3, #127	; 0x7f
 8007b8c:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007b90:	e002      	b.n	8007b98 <NEDwaves_memlight+0x2c88>
    } else {
      i1 = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
    }
    a2[i] = i1;
 8007b98:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007b9c:	f8d7 2984 	ldr.w	r2, [r7, #2436]	; 0x984
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f897 290f 	ldrb.w	r2, [r7, #2319]	; 0x90f
 8007ba6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 42; i++) {
 8007ba8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007bac:	3301      	adds	r3, #1
 8007bae:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007bb2:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007bb6:	2b29      	cmp	r3, #41	; 0x29
 8007bb8:	f77f aec5 	ble.w	8007946 <NEDwaves_memlight+0x2a36>
  }
  if (U->size[1] == V->size[1]) {
 8007bbc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	f040 8125 	bne.w	8007e20 <NEDwaves_memlight+0x2f10>
    i = c_U->size[0] * c_U->size[1];
 8007bd6:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f8d7 28b0 	ldr.w	r2, [r7, #2224]	; 0x8b0
 8007be2:	6852      	ldr	r2, [r2, #4]
 8007be4:	3204      	adds	r2, #4
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
 8007bec:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    c_U->size[0] = 1;
 8007bf0:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
    c_U->size[1] = U->size[1];
 8007bfa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	3304      	adds	r3, #4
 8007c08:	6852      	ldr	r2, [r2, #4]
 8007c0a:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(c_U, i);
 8007c0c:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8007c10:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 faa6 	bl	8008166 <emxEnsureCapacity_creal32_T>
    b_U_data = c_U->data;
 8007c1a:	f8d7 38b0 	ldr.w	r3, [r7, #2224]	; 0x8b0
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
    nx = U->size[1];
 8007c24:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    for (i = 0; i < nx; i++) {
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007c36:	e0e2      	b.n	8007dfe <NEDwaves_memlight+0x2eee>
      V_re = V_data[i].re;
 8007c38:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8007c42:	4413      	add	r3, r2
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f607 02c4 	addw	r2, r7, #2244	; 0x8c4
 8007c4a:	6013      	str	r3, [r2, #0]
      x = -V_data[i].im;
 8007c4c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8007c56:	4413      	add	r3, r2
 8007c58:	edd3 7a01 	vldr	s15, [r3, #4]
 8007c5c:	eef1 7a67 	vneg.f32	s15, s15
 8007c60:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007c64:	edc3 7a00 	vstr	s15, [r3]
      b_x = U_data[i].re;
 8007c68:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8007c72:	4413      	add	r3, r2
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8007c7a:	6013      	str	r3, [r2, #0]
      fe = U_data[i].im;
 8007c7c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8007c86:	4413      	add	r3, r2
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8007c8e:	6013      	str	r3, [r2, #0]
      U_re = b_x * V_re - fe * x;
 8007c90:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007c94:	ed93 7a00 	vldr	s14, [r3]
 8007c98:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 8007c9c:	edd3 7a00 	vldr	s15, [r3]
 8007ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ca4:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007ca8:	edd3 6a00 	vldr	s13, [r3]
 8007cac:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007cb0:	edd3 7a00 	vldr	s15, [r3]
 8007cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cbc:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007cc0:	edc3 7a00 	vstr	s15, [r3]
      fe = b_x * x + fe * V_re;
 8007cc4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007cc8:	ed93 7a00 	vldr	s14, [r3]
 8007ccc:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007cd0:	edd3 7a00 	vldr	s15, [r3]
 8007cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cd8:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007cdc:	edd3 6a00 	vldr	s13, [r3]
 8007ce0:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 8007ce4:	edd3 7a00 	vldr	s15, [r3]
 8007ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cf0:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007cf4:	edc3 7a00 	vstr	s15, [r3]
      if (fe == 0.0F) {
 8007cf8:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8007cfc:	edd3 7a00 	vldr	s15, [r3]
 8007d00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d08:	d11f      	bne.n	8007d4a <NEDwaves_memlight+0x2e3a>
        b_U_data[i].re = U_re / (float)delta1;
 8007d0a:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d12:	f7f9 f88f 	bl	8000e34 <__aeabi_d2f>
 8007d16:	ee06 0a90 	vmov	s13, r0
 8007d1a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8007d24:	4413      	add	r3, r2
 8007d26:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007d2a:	ed92 7a00 	vldr	s14, [r2]
 8007d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d32:	edc3 7a00 	vstr	s15, [r3]
        b_U_data[i].im = 0.0F;
 8007d36:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8007d40:	4413      	add	r3, r2
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	605a      	str	r2, [r3, #4]
 8007d48:	e054      	b.n	8007df4 <NEDwaves_memlight+0x2ee4>
      } else if (U_re == 0.0F) {
 8007d4a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007d4e:	edd3 7a00 	vldr	s15, [r3]
 8007d52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5a:	d11f      	bne.n	8007d9c <NEDwaves_memlight+0x2e8c>
        b_U_data[i].re = 0.0F;
 8007d5c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8007d66:	4413      	add	r3, r2
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
        b_U_data[i].im = fe / (float)delta1;
 8007d6e:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d76:	f7f9 f85d 	bl	8000e34 <__aeabi_d2f>
 8007d7a:	ee06 0a90 	vmov	s13, r0
 8007d7e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8007d88:	4413      	add	r3, r2
 8007d8a:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8007d8e:	ed92 7a00 	vldr	s14, [r2]
 8007d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d96:	edc3 7a01 	vstr	s15, [r3, #4]
 8007d9a:	e02b      	b.n	8007df4 <NEDwaves_memlight+0x2ee4>
      } else {
        b_U_data[i].re = U_re / (float)delta1;
 8007d9c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007da0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007da4:	f7f9 f846 	bl	8000e34 <__aeabi_d2f>
 8007da8:	ee06 0a90 	vmov	s13, r0
 8007dac:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8007db6:	4413      	add	r3, r2
 8007db8:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007dbc:	ed92 7a00 	vldr	s14, [r2]
 8007dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007dc4:	edc3 7a00 	vstr	s15, [r3]
        b_U_data[i].im = fe / (float)delta1;
 8007dc8:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007dcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dd0:	f7f9 f830 	bl	8000e34 <__aeabi_d2f>
 8007dd4:	ee06 0a90 	vmov	s13, r0
 8007dd8:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8007de2:	4413      	add	r3, r2
 8007de4:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8007de8:	ed92 7a00 	vldr	s14, [r2]
 8007dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007df0:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < nx; i++) {
 8007df4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007df8:	3301      	adds	r3, #1
 8007dfa:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007dfe:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8007e02:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8007e06:	429a      	cmp	r2, r3
 8007e08:	f6ff af16 	blt.w	8007c38 <NEDwaves_memlight+0x2d28>
      }
    }
    b_interp1(taper, c_U, fcv);
 8007e0c:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8007e10:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 8007e14:	f207 7254 	addw	r2, r7, #1876	; 0x754
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 f8f5 	bl	8009008 <b_interp1>
 8007e1e:	e00d      	b.n	8007e3c <NEDwaves_memlight+0x2f2c>
  } else {
    binary_expand_op(fcv, taper, U, V, delta1);
 8007e20:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 8007e24:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007e28:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8007e2c:	f207 7054 	addw	r0, r7, #1876	; 0x754
 8007e30:	f607 04d8 	addw	r4, r7, #2264	; 0x8d8
 8007e34:	ed94 0b00 	vldr	d0, [r4]
 8007e38:	f7fc fe42 	bl	8004ac0 <binary_expand_op>
  }
  emxFree_creal32_T(&c_U);
 8007e3c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fb52 	bl	80084ea <emxFree_creal32_T>
  emxFree_creal32_T(&V);
 8007e46:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fb4d 	bl	80084ea <emxFree_creal32_T>
  emxFree_creal32_T(&U);
 8007e50:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fb48 	bl	80084ea <emxFree_creal32_T>
  emxFree_real_T(&taper);
 8007e5a:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fbc1 	bl	80085e6 <emxFree_real_T>
  for (i = 0; i < 42; i++) {
 8007e64:	2300      	movs	r3, #0
 8007e66:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007e6a:	e0c8      	b.n	8007ffe <NEDwaves_memlight+0x30ee>
    unsigned char u;
    x = x_tmp_tmp[i];
 8007e6c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007e70:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 8007e74:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f607 1204 	addw	r2, r7, #2308	; 0x904
 8007e82:	6013      	str	r3, [r2, #0]
    b_x = roundf(2.0F * fcv[i].re / x * 100.0F);
 8007e84:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007e88:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8007e8c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	4413      	add	r3, r2
 8007e94:	edd3 7a00 	vldr	s15, [r3]
 8007e98:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007e9c:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007ea0:	ed93 7a00 	vldr	s14, [r3]
 8007ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ea8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800801c <NEDwaves_memlight+0x310c>
 8007eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8007eb4:	f016 fcd0 	bl	801e858 <roundf>
 8007eb8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007ebc:	ed83 0a00 	vstr	s0, [r3]
    if (b_x < 128.0F) {
 8007ec0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007ec4:	edd3 7a00 	vldr	s15, [r3]
 8007ec8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8008020 <NEDwaves_memlight+0x3110>
 8007ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed4:	d51a      	bpl.n	8007f0c <NEDwaves_memlight+0x2ffc>
      if (b_x >= -128.0F) {
 8007ed6:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007eda:	edd3 7a00 	vldr	s15, [r3]
 8007ede:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8008024 <NEDwaves_memlight+0x3114>
 8007ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eea:	db0b      	blt.n	8007f04 <NEDwaves_memlight+0x2ff4>
        i1 = (signed char)b_x;
 8007eec:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007ef0:	edd3 7a00 	vldr	s15, [r3]
 8007ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ef8:	edc7 7a02 	vstr	s15, [r7, #8]
 8007efc:	7a3b      	ldrb	r3, [r7, #8]
 8007efe:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007f02:	e015      	b.n	8007f30 <NEDwaves_memlight+0x3020>
      } else {
        i1 = MIN_int8_T;
 8007f04:	2380      	movs	r3, #128	; 0x80
 8007f06:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007f0a:	e011      	b.n	8007f30 <NEDwaves_memlight+0x3020>
      }
    } else if (b_x >= 128.0F) {
 8007f0c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007f10:	edd3 7a00 	vldr	s15, [r3]
 8007f14:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8008020 <NEDwaves_memlight+0x3110>
 8007f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f20:	db03      	blt.n	8007f2a <NEDwaves_memlight+0x301a>
      i1 = MAX_int8_T;
 8007f22:	237f      	movs	r3, #127	; 0x7f
 8007f24:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
 8007f28:	e002      	b.n	8007f30 <NEDwaves_memlight+0x3020>
    } else {
      i1 = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f887 390f 	strb.w	r3, [r7, #2319]	; 0x90f
    }
    b2[i] = i1;
 8007f30:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007f34:	f8d7 2988 	ldr.w	r2, [r7, #2440]	; 0x988
 8007f38:	4413      	add	r3, r2
 8007f3a:	f897 290f 	ldrb.w	r2, [r7, #2319]	; 0x90f
 8007f3e:	701a      	strb	r2, [r3, #0]
    x = roundf(WW[i] / x * 10.0F);
 8007f40:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8007f44:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 8007f48:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	edd3 6a00 	vldr	s13, [r3]
 8007f54:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007f58:	ed93 7a00 	vldr	s14, [r3]
 8007f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f68:	eeb0 0a67 	vmov.f32	s0, s15
 8007f6c:	f016 fc74 	bl	801e858 <roundf>
 8007f70:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007f74:	ed83 0a00 	vstr	s0, [r3]
    if (x < 256.0F) {
 8007f78:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007f7c:	edd3 7a00 	vldr	s15, [r3]
 8007f80:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008028 <NEDwaves_memlight+0x3118>
 8007f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8c:	d518      	bpl.n	8007fc0 <NEDwaves_memlight+0x30b0>
      if (x >= 0.0F) {
 8007f8e:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007f92:	edd3 7a00 	vldr	s15, [r3]
 8007f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9e:	db0b      	blt.n	8007fb8 <NEDwaves_memlight+0x30a8>
        u = (unsigned char)x;
 8007fa0:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007fa4:	edd3 7a00 	vldr	s15, [r3]
 8007fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fac:	edc7 7a02 	vstr	s15, [r7, #8]
 8007fb0:	7a3b      	ldrb	r3, [r7, #8]
 8007fb2:	f887 390d 	strb.w	r3, [r7, #2317]	; 0x90d
 8007fb6:	e015      	b.n	8007fe4 <NEDwaves_memlight+0x30d4>
      } else {
        u = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 390d 	strb.w	r3, [r7, #2317]	; 0x90d
 8007fbe:	e011      	b.n	8007fe4 <NEDwaves_memlight+0x30d4>
      }
    } else if (x >= 256.0F) {
 8007fc0:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8007fc4:	edd3 7a00 	vldr	s15, [r3]
 8007fc8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008028 <NEDwaves_memlight+0x3118>
 8007fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd4:	db03      	blt.n	8007fde <NEDwaves_memlight+0x30ce>
      u = MAX_uint8_T;
 8007fd6:	23ff      	movs	r3, #255	; 0xff
 8007fd8:	f887 390d 	strb.w	r3, [r7, #2317]	; 0x90d
 8007fdc:	e002      	b.n	8007fe4 <NEDwaves_memlight+0x30d4>
    } else {
      u = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f887 390d 	strb.w	r3, [r7, #2317]	; 0x90d
    }
    check[i] = u;
 8007fe4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007fe8:	f8d7 298c 	ldr.w	r2, [r7, #2444]	; 0x98c
 8007fec:	4413      	add	r3, r2
 8007fee:	f897 290d 	ldrb.w	r2, [r7, #2317]	; 0x90d
 8007ff2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 42; i++) {
 8007ff4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8007ffe:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8008002:	2b29      	cmp	r3, #41	; 0x29
 8008004:	f77f af32 	ble.w	8007e6c <NEDwaves_memlight+0x2f5c>
  /*      legend('a1','b1','a2','b2') */
  /*      xlabel('frequency [Hz]') */
  /*      drawnow */
  /*   */
  /*  end */
}
 8008008:	bf00      	nop
 800800a:	bf00      	nop
 800800c:	f607 1744 	addw	r7, r7, #2372	; 0x944
 8008010:	46bd      	mov	sp, r7
 8008012:	ecbd 8b02 	vpop	{d8}
 8008016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800801a:	bf00      	nop
 800801c:	42c80000 	.word	0x42c80000
 8008020:	43000000 	.word	0x43000000
 8008024:	c3000000 	.word	0xc3000000
 8008028:	43800000 	.word	0x43800000

0800802c <emxCreate_real32_T>:
 * Arguments    : int rows
 *                int cols
 * Return Type  : emxArray_real32_T *
 */
emxArray_real32_T *emxCreate_real32_T(int rows, int cols)
{
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  emxArray_real32_T *emx;
  int numEl;
  emxInit_real32_T(&emx, 2);
 8008036:	f107 0308 	add.w	r3, r7, #8
 800803a:	2102      	movs	r1, #2
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fba0 	bl	8008782 <emxInit_real32_T>
  emx->size[0] = rows;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	601a      	str	r2, [r3, #0]
  numEl = rows * cols;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	fb02 f303 	mul.w	r3, r2, r3
 8008052:	60fb      	str	r3, [r7, #12]
  emx->size[1] = cols;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	3304      	adds	r3, #4
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	601a      	str	r2, [r3, #0]
  emx->data = (float *)calloc_replacement((unsigned int)numEl, sizeof(float));
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	68bc      	ldr	r4, [r7, #8]
 8008062:	2104      	movs	r1, #4
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fd6f 	bl	8009b48 <calloc_replacement>
 800806a:	4603      	mov	r3, r0
 800806c:	6023      	str	r3, [r4, #0]
  emx->numDimensions = 2;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2202      	movs	r2, #2
 8008072:	60da      	str	r2, [r3, #12]
  emx->allocatedSize = numEl;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	609a      	str	r2, [r3, #8]
  return emx;
 800807a:	68bb      	ldr	r3, [r7, #8]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	bd90      	pop	{r4, r7, pc}

08008084 <emxDestroyArray_real32_T>:
/*
 * Arguments    : emxArray_real32_T *emxArray
 * Return Type  : void
 */
void emxDestroyArray_real32_T(emxArray_real32_T *emxArray)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  emxFree_real32_T(&emxArray);
 800808c:	1d3b      	adds	r3, r7, #4
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fa7f 	bl	8008592 <emxFree_real32_T>
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <emxEnsureCapacity_boolean_T>:
 * Arguments    : emxArray_boolean_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_boolean_T(emxArray_boolean_T *emxArray, int oldNumel)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	da01      	bge.n	80080b0 <emxEnsureCapacity_boolean_T+0x14>
    oldNumel = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 80080b0:	2301      	movs	r3, #1
 80080b2:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	e00c      	b.n	80080d4 <emxEnsureCapacity_boolean_T+0x38>
    newNumel *= emxArray->size[i];
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	fb02 f303 	mul.w	r3, r2, r3
 80080cc:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	3301      	adds	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	429a      	cmp	r2, r3
 80080dc:	dbed      	blt.n	80080ba <emxEnsureCapacity_boolean_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	dd3a      	ble.n	800815e <emxEnsureCapacity_boolean_T+0xc2>
    i = emxArray->allocatedSize;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b0f      	cmp	r3, #15
 80080f2:	dc0d      	bgt.n	8008110 <emxEnsureCapacity_boolean_T+0x74>
      i = 16;
 80080f4:	2310      	movs	r3, #16
 80080f6:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 80080f8:	e00a      	b.n	8008110 <emxEnsureCapacity_boolean_T+0x74>
      if (i > 1073741823) {
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008100:	db03      	blt.n	800810a <emxEnsureCapacity_boolean_T+0x6e>
        i = MAX_int32_T;
 8008102:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e002      	b.n	8008110 <emxEnsureCapacity_boolean_T+0x74>
      } else {
        i *= 2;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	429a      	cmp	r2, r3
 8008116:	dbf0      	blt.n	80080fa <emxEnsureCapacity_boolean_T+0x5e>
      }
    }
    newData = calloc_replacement((unsigned int)i, sizeof(bool));
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2101      	movs	r1, #1
 800811c:	4618      	mov	r0, r3
 800811e:	f001 fd13 	bl	8009b48 <calloc_replacement>
 8008122:	60f8      	str	r0, [r7, #12]
    if (emxArray->data != NULL) {
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00f      	beq.n	800814c <emxEnsureCapacity_boolean_T+0xb0>
      memcpy(newData, emxArray->data, sizeof(bool) * oldNumel);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	4619      	mov	r1, r3
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f018 fa0f 	bl	8020558 <memcpy>
      if (emxArray->canFreeData) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	7c1b      	ldrb	r3, [r3, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d004      	beq.n	800814c <emxEnsureCapacity_boolean_T+0xb0>
        free_replacement(emxArray->data);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4618      	mov	r0, r3
 8008148:	f001 fd2a 	bl	8009ba0 <free_replacement>
      }
    }
    emxArray->data = (bool *)newData;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	741a      	strb	r2, [r3, #16]
  }
}
 800815e:	bf00      	nop
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <emxEnsureCapacity_creal32_T>:
 * Arguments    : emxArray_creal32_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_creal32_T(emxArray_creal32_T *emxArray, int oldNumel)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	da01      	bge.n	800817a <emxEnsureCapacity_creal32_T+0x14>
    oldNumel = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 800817a:	2301      	movs	r3, #1
 800817c:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	e00c      	b.n	800819e <emxEnsureCapacity_creal32_T+0x38>
    newNumel *= emxArray->size[i];
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	fb02 f303 	mul.w	r3, r2, r3
 8008196:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3301      	adds	r3, #1
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	dbed      	blt.n	8008184 <emxEnsureCapacity_creal32_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	dd3b      	ble.n	800822a <emxEnsureCapacity_creal32_T+0xc4>
    i = emxArray->allocatedSize;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b0f      	cmp	r3, #15
 80081bc:	dc0d      	bgt.n	80081da <emxEnsureCapacity_creal32_T+0x74>
      i = 16;
 80081be:	2310      	movs	r3, #16
 80081c0:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 80081c2:	e00a      	b.n	80081da <emxEnsureCapacity_creal32_T+0x74>
      if (i > 1073741823) {
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ca:	db03      	blt.n	80081d4 <emxEnsureCapacity_creal32_T+0x6e>
        i = MAX_int32_T;
 80081cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e002      	b.n	80081da <emxEnsureCapacity_creal32_T+0x74>
      } else {
        i *= 2;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	429a      	cmp	r2, r3
 80081e0:	dbf0      	blt.n	80081c4 <emxEnsureCapacity_creal32_T+0x5e>
      }
    }
    newData = calloc_replacement((unsigned int)i, sizeof(creal32_T));
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2108      	movs	r1, #8
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fcae 	bl	8009b48 <calloc_replacement>
 80081ec:	60f8      	str	r0, [r7, #12]
    if (emxArray->data != NULL) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d010      	beq.n	8008218 <emxEnsureCapacity_creal32_T+0xb2>
      memcpy(newData, emxArray->data, sizeof(creal32_T) * oldNumel);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6819      	ldr	r1, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	461a      	mov	r2, r3
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f018 f9a9 	bl	8020558 <memcpy>
      if (emxArray->canFreeData) {
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	7c1b      	ldrb	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <emxEnsureCapacity_creal32_T+0xb2>
        free_replacement(emxArray->data);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f001 fcc4 	bl	8009ba0 <free_replacement>
      }
    }
    emxArray->data = (creal32_T *)newData;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	741a      	strb	r2, [r3, #16]
  }
}
 800822a:	bf00      	nop
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <emxEnsureCapacity_int32_T>:
 * Arguments    : emxArray_int32_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_int32_T(emxArray_int32_T *emxArray, int oldNumel)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	da01      	bge.n	8008246 <emxEnsureCapacity_int32_T+0x14>
    oldNumel = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8008246:	2301      	movs	r3, #1
 8008248:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	e00c      	b.n	800826a <emxEnsureCapacity_int32_T+0x38>
    newNumel *= emxArray->size[i];
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	3301      	adds	r3, #1
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	429a      	cmp	r2, r3
 8008272:	dbed      	blt.n	8008250 <emxEnsureCapacity_int32_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	429a      	cmp	r2, r3
 800827c:	dd3b      	ble.n	80082f6 <emxEnsureCapacity_int32_T+0xc4>
    i = emxArray->allocatedSize;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2b0f      	cmp	r3, #15
 8008288:	dc0d      	bgt.n	80082a6 <emxEnsureCapacity_int32_T+0x74>
      i = 16;
 800828a:	2310      	movs	r3, #16
 800828c:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 800828e:	e00a      	b.n	80082a6 <emxEnsureCapacity_int32_T+0x74>
      if (i > 1073741823) {
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008296:	db03      	blt.n	80082a0 <emxEnsureCapacity_int32_T+0x6e>
        i = MAX_int32_T;
 8008298:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	e002      	b.n	80082a6 <emxEnsureCapacity_int32_T+0x74>
      } else {
        i *= 2;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	dbf0      	blt.n	8008290 <emxEnsureCapacity_int32_T+0x5e>
      }
    }
    newData = calloc_replacement((unsigned int)i, sizeof(int));
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2104      	movs	r1, #4
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 fc48 	bl	8009b48 <calloc_replacement>
 80082b8:	60f8      	str	r0, [r7, #12]
    if (emxArray->data != NULL) {
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d010      	beq.n	80082e4 <emxEnsureCapacity_int32_T+0xb2>
      memcpy(newData, emxArray->data, sizeof(int) * oldNumel);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6819      	ldr	r1, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	461a      	mov	r2, r3
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f018 f943 	bl	8020558 <memcpy>
      if (emxArray->canFreeData) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	7c1b      	ldrb	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <emxEnsureCapacity_int32_T+0xb2>
        free_replacement(emxArray->data);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 fc5e 	bl	8009ba0 <free_replacement>
      }
    }
    emxArray->data = (int *)newData;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	741a      	strb	r2, [r3, #16]
  }
}
 80082f6:	bf00      	nop
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <emxEnsureCapacity_real32_T>:
 * Arguments    : emxArray_real32_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real32_T(emxArray_real32_T *emxArray, int oldNumel)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b086      	sub	sp, #24
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	da01      	bge.n	8008312 <emxEnsureCapacity_real32_T+0x14>
    oldNumel = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8008312:	2301      	movs	r3, #1
 8008314:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	e00c      	b.n	8008336 <emxEnsureCapacity_real32_T+0x38>
    newNumel *= emxArray->size[i];
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	fb02 f303 	mul.w	r3, r2, r3
 800832e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	3301      	adds	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	429a      	cmp	r2, r3
 800833e:	dbed      	blt.n	800831c <emxEnsureCapacity_real32_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	429a      	cmp	r2, r3
 8008348:	dd3b      	ble.n	80083c2 <emxEnsureCapacity_real32_T+0xc4>
    i = emxArray->allocatedSize;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2b0f      	cmp	r3, #15
 8008354:	dc0d      	bgt.n	8008372 <emxEnsureCapacity_real32_T+0x74>
      i = 16;
 8008356:	2310      	movs	r3, #16
 8008358:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 800835a:	e00a      	b.n	8008372 <emxEnsureCapacity_real32_T+0x74>
      if (i > 1073741823) {
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008362:	db03      	blt.n	800836c <emxEnsureCapacity_real32_T+0x6e>
        i = MAX_int32_T;
 8008364:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	e002      	b.n	8008372 <emxEnsureCapacity_real32_T+0x74>
      } else {
        i *= 2;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	429a      	cmp	r2, r3
 8008378:	dbf0      	blt.n	800835c <emxEnsureCapacity_real32_T+0x5e>
      }
    }
    newData = calloc_replacement((unsigned int)i, sizeof(float));
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2104      	movs	r1, #4
 800837e:	4618      	mov	r0, r3
 8008380:	f001 fbe2 	bl	8009b48 <calloc_replacement>
 8008384:	60f8      	str	r0, [r7, #12]
    if (emxArray->data != NULL) {
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d010      	beq.n	80083b0 <emxEnsureCapacity_real32_T+0xb2>
      memcpy(newData, emxArray->data, sizeof(float) * oldNumel);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6819      	ldr	r1, [r3, #0]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	461a      	mov	r2, r3
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f018 f8dd 	bl	8020558 <memcpy>
      if (emxArray->canFreeData) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7c1b      	ldrb	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <emxEnsureCapacity_real32_T+0xb2>
        free_replacement(emxArray->data);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f001 fbf8 	bl	8009ba0 <free_replacement>
      }
    }
    emxArray->data = (float *)newData;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	741a      	strb	r2, [r3, #16]
  }
}
 80083c2:	bf00      	nop
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <emxEnsureCapacity_real_T>:
 * Arguments    : emxArray_real_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real_T(emxArray_real_T *emxArray, int oldNumel)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da01      	bge.n	80083de <emxEnsureCapacity_real_T+0x14>
    oldNumel = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 80083de:	2301      	movs	r3, #1
 80083e0:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]
 80083e6:	e00c      	b.n	8008402 <emxEnsureCapacity_real_T+0x38>
    newNumel *= emxArray->size[i];
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	fb02 f303 	mul.w	r3, r2, r3
 80083fa:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	3301      	adds	r3, #1
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	429a      	cmp	r2, r3
 800840a:	dbed      	blt.n	80083e8 <emxEnsureCapacity_real_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	429a      	cmp	r2, r3
 8008414:	dd3b      	ble.n	800848e <emxEnsureCapacity_real_T+0xc4>
    i = emxArray->allocatedSize;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2b0f      	cmp	r3, #15
 8008420:	dc0d      	bgt.n	800843e <emxEnsureCapacity_real_T+0x74>
      i = 16;
 8008422:	2310      	movs	r3, #16
 8008424:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8008426:	e00a      	b.n	800843e <emxEnsureCapacity_real_T+0x74>
      if (i > 1073741823) {
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842e:	db03      	blt.n	8008438 <emxEnsureCapacity_real_T+0x6e>
        i = MAX_int32_T;
 8008430:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	e002      	b.n	800843e <emxEnsureCapacity_real_T+0x74>
      } else {
        i *= 2;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	429a      	cmp	r2, r3
 8008444:	dbf0      	blt.n	8008428 <emxEnsureCapacity_real_T+0x5e>
      }
    }
    newData = calloc_replacement((unsigned int)i, sizeof(double));
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2108      	movs	r1, #8
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fb7c 	bl	8009b48 <calloc_replacement>
 8008450:	60f8      	str	r0, [r7, #12]
    if (emxArray->data != NULL) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d010      	beq.n	800847c <emxEnsureCapacity_real_T+0xb2>
      memcpy(newData, emxArray->data, sizeof(double) * oldNumel);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6819      	ldr	r1, [r3, #0]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	461a      	mov	r2, r3
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f018 f877 	bl	8020558 <memcpy>
      if (emxArray->canFreeData) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7c1b      	ldrb	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <emxEnsureCapacity_real_T+0xb2>
        free_replacement(emxArray->data);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f001 fb92 	bl	8009ba0 <free_replacement>
      }
    }
    emxArray->data = (double *)newData;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	741a      	strb	r2, [r3, #16]
  }
}
 800848e:	bf00      	nop
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <emxFree_boolean_T>:
/*
 * Arguments    : emxArray_boolean_T **pEmxArray
 * Return Type  : void
 */
void emxFree_boolean_T(emxArray_boolean_T **pEmxArray)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_boolean_T *)NULL) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01d      	beq.n	80084e2 <emxFree_boolean_T+0x4c>
    if (((*pEmxArray)->data != (bool *)NULL) && (*pEmxArray)->canFreeData) {
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00a      	beq.n	80084c6 <emxFree_boolean_T+0x30>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	7c1b      	ldrb	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <emxFree_boolean_T+0x30>
      free_replacement((*pEmxArray)->data);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 fb6d 	bl	8009ba0 <free_replacement>
    }
    free_replacement((*pEmxArray)->size);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 fb67 	bl	8009ba0 <free_replacement>
    free_replacement(*pEmxArray);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fb62 	bl	8009ba0 <free_replacement>
    *pEmxArray = (emxArray_boolean_T *)NULL;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
  }
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <emxFree_creal32_T>:
/*
 * Arguments    : emxArray_creal32_T **pEmxArray
 * Return Type  : void
 */
void emxFree_creal32_T(emxArray_creal32_T **pEmxArray)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_creal32_T *)NULL) {
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d01d      	beq.n	8008536 <emxFree_creal32_T+0x4c>
    if (((*pEmxArray)->data != (creal32_T *)NULL) &&
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <emxFree_creal32_T+0x30>
        (*pEmxArray)->canFreeData) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	7c1b      	ldrb	r3, [r3, #16]
    if (((*pEmxArray)->data != (creal32_T *)NULL) &&
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <emxFree_creal32_T+0x30>
      free_replacement((*pEmxArray)->data);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fb43 	bl	8009ba0 <free_replacement>
    }
    free_replacement((*pEmxArray)->size);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fb3d 	bl	8009ba0 <free_replacement>
    free_replacement(*pEmxArray);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fb38 	bl	8009ba0 <free_replacement>
    *pEmxArray = (emxArray_creal32_T *)NULL;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
  }
}
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <emxFree_int32_T>:
/*
 * Arguments    : emxArray_int32_T **pEmxArray
 * Return Type  : void
 */
void emxFree_int32_T(emxArray_int32_T **pEmxArray)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_int32_T *)NULL) {
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d01d      	beq.n	800858a <emxFree_int32_T+0x4c>
    if (((*pEmxArray)->data != (int *)NULL) && (*pEmxArray)->canFreeData) {
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00a      	beq.n	800856e <emxFree_int32_T+0x30>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	7c1b      	ldrb	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <emxFree_int32_T+0x30>
      free_replacement((*pEmxArray)->data);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f001 fb19 	bl	8009ba0 <free_replacement>
    }
    free_replacement((*pEmxArray)->size);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4618      	mov	r0, r3
 8008576:	f001 fb13 	bl	8009ba0 <free_replacement>
    free_replacement(*pEmxArray);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f001 fb0e 	bl	8009ba0 <free_replacement>
    *pEmxArray = (emxArray_int32_T *)NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
  }
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <emxFree_real32_T>:
/*
 * Arguments    : emxArray_real32_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real32_T(emxArray_real32_T **pEmxArray)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real32_T *)NULL) {
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01d      	beq.n	80085de <emxFree_real32_T+0x4c>
    if (((*pEmxArray)->data != (float *)NULL) && (*pEmxArray)->canFreeData) {
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <emxFree_real32_T+0x30>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	7c1b      	ldrb	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <emxFree_real32_T+0x30>
      free_replacement((*pEmxArray)->data);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 faef 	bl	8009ba0 <free_replacement>
    }
    free_replacement((*pEmxArray)->size);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 fae9 	bl	8009ba0 <free_replacement>
    free_replacement(*pEmxArray);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 fae4 	bl	8009ba0 <free_replacement>
    *pEmxArray = (emxArray_real32_T *)NULL;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
  }
}
 80085de:	bf00      	nop
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <emxFree_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real_T(emxArray_real_T **pEmxArray)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real_T *)NULL) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d01d      	beq.n	8008632 <emxFree_real_T+0x4c>
    if (((*pEmxArray)->data != (double *)NULL) && (*pEmxArray)->canFreeData) {
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <emxFree_real_T+0x30>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	7c1b      	ldrb	r3, [r3, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <emxFree_real_T+0x30>
      free_replacement((*pEmxArray)->data);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	f001 fac5 	bl	8009ba0 <free_replacement>
    }
    free_replacement((*pEmxArray)->size);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fabf 	bl	8009ba0 <free_replacement>
    free_replacement(*pEmxArray);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	f001 faba 	bl	8009ba0 <free_replacement>
    *pEmxArray = (emxArray_real_T *)NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
  }
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <emxInit_boolean_T>:
/*
 * Arguments    : emxArray_boolean_T **pEmxArray
 * Return Type  : void
 */
void emxInit_boolean_T(emxArray_boolean_T **pEmxArray)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  emxArray_boolean_T *emxArray;
  int i;
  *pEmxArray = (emxArray_boolean_T *)malloc_replacement(sizeof(emxArray_boolean_T));
 8008642:	2014      	movs	r0, #20
 8008644:	f001 fa62 	bl	8009b0c <malloc_replacement>
 8008648:	4602      	mov	r2, r0
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60bb      	str	r3, [r7, #8]
  emxArray->data = (bool *)NULL;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = 2;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2202      	movs	r2, #2
 800865e:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc_replacement(sizeof(int) * 2U);
 8008660:	2008      	movs	r0, #8
 8008662:	f001 fa53 	bl	8009b0c <malloc_replacement>
 8008666:	4602      	mov	r2, r0
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2200      	movs	r2, #0
 8008670:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2201      	movs	r2, #1
 8008676:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < 2; i++) {
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e009      	b.n	8008692 <emxInit_boolean_T+0x58>
    emxArray->size[i] = 0;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2; i++) {
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3301      	adds	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b01      	cmp	r3, #1
 8008696:	ddf2      	ble.n	800867e <emxInit_boolean_T+0x44>
  }
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <emxInit_creal32_T>:
 * Arguments    : emxArray_creal32_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_creal32_T(emxArray_creal32_T **pEmxArray, int numDimensions)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  emxArray_creal32_T *emxArray;
  int i;
  *pEmxArray = (emxArray_creal32_T *)malloc_replacement(sizeof(emxArray_creal32_T));
 80086ac:	2014      	movs	r0, #20
 80086ae:	f001 fa2d 	bl	8009b0c <malloc_replacement>
 80086b2:	4602      	mov	r2, r0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60bb      	str	r3, [r7, #8]
  emxArray->data = (creal32_T *)NULL;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc_replacement(sizeof(int) * numDimensions);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fa1c 	bl	8009b0c <malloc_replacement>
 80086d4:	4602      	mov	r2, r0
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2200      	movs	r2, #0
 80086de:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2201      	movs	r2, #1
 80086e4:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	e009      	b.n	8008700 <emxInit_creal32_T+0x5e>
    emxArray->size[i] = 0;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3301      	adds	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	dbf1      	blt.n	80086ec <emxInit_creal32_T+0x4a>
  }
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <emxInit_int32_T>:
 * Arguments    : emxArray_int32_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_int32_T(emxArray_int32_T **pEmxArray, int numDimensions)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
  emxArray_int32_T *emxArray;
  int i;
  *pEmxArray = (emxArray_int32_T *)malloc_replacement(sizeof(emxArray_int32_T));
 800871c:	2014      	movs	r0, #20
 800871e:	f001 f9f5 	bl	8009b0c <malloc_replacement>
 8008722:	4602      	mov	r2, r0
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	60bb      	str	r3, [r7, #8]
  emxArray->data = (int *)NULL;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc_replacement(sizeof(int) * numDimensions);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4618      	mov	r0, r3
 8008740:	f001 f9e4 	bl	8009b0c <malloc_replacement>
 8008744:	4602      	mov	r2, r0
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2200      	movs	r2, #0
 800874e:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2201      	movs	r2, #1
 8008754:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e009      	b.n	8008770 <emxInit_int32_T+0x5e>
    emxArray->size[i] = 0;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	dbf1      	blt.n	800875c <emxInit_int32_T+0x4a>
  }
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <emxInit_real32_T>:
 * Arguments    : emxArray_real32_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real32_T(emxArray_real32_T **pEmxArray, int numDimensions)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
  emxArray_real32_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real32_T *)malloc_replacement(sizeof(emxArray_real32_T));
 800878c:	2014      	movs	r0, #20
 800878e:	f001 f9bd 	bl	8009b0c <malloc_replacement>
 8008792:	4602      	mov	r2, r0
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60bb      	str	r3, [r7, #8]
  emxArray->data = (float *)NULL;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc_replacement(sizeof(int) * numDimensions);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 f9ac 	bl	8009b0c <malloc_replacement>
 80087b4:	4602      	mov	r2, r0
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2201      	movs	r2, #1
 80087c4:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
 80087ca:	e009      	b.n	80087e0 <emxInit_real32_T+0x5e>
    emxArray->size[i] = 0;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3301      	adds	r3, #1
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	dbf1      	blt.n	80087cc <emxInit_real32_T+0x4a>
  }
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <emxInit_real_T>:
/*
 * Arguments    : emxArray_real_T **pEmxArray
 * Return Type  : void
 */
void emxInit_real_T(emxArray_real_T **pEmxArray)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  emxArray_real_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real_T *)malloc_replacement(sizeof(emxArray_real_T));
 80087fa:	2014      	movs	r0, #20
 80087fc:	f001 f986 	bl	8009b0c <malloc_replacement>
 8008800:	4602      	mov	r2, r0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60bb      	str	r3, [r7, #8]
  emxArray->data = (double *)NULL;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = 2;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2202      	movs	r2, #2
 8008816:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc_replacement(sizeof(int) * 2U);
 8008818:	2008      	movs	r0, #8
 800881a:	f001 f977 	bl	8009b0c <malloc_replacement>
 800881e:	4602      	mov	r2, r0
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2201      	movs	r2, #1
 800882e:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < 2; i++) {
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e009      	b.n	800884a <emxInit_real_T+0x58>
    emxArray->size[i] = 0;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2; i++) {
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3301      	adds	r3, #1
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b01      	cmp	r3, #1
 800884e:	ddf2      	ble.n	8008836 <emxInit_real_T+0x44>
  }
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <b_bsearch>:
 * Arguments    : const emxArray_real_T *x
 *                double xi
 * Return Type  : int
 */
int b_bsearch(const emxArray_real_T *x, double xi)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b08a      	sub	sp, #40	; 0x28
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	ed87 0b00 	vstr	d0, [r7]
  const double *x_data;
  int high_i;
  int low_ip1;
  int n;
  x_data = x->data;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	617b      	str	r3, [r7, #20]
  high_i = x->size[1];
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
  n = 1;
 8008874:	2301      	movs	r3, #1
 8008876:	61fb      	str	r3, [r7, #28]
  low_ip1 = 2;
 8008878:	2302      	movs	r3, #2
 800887a:	623b      	str	r3, [r7, #32]
  while (high_i > low_ip1) {
 800887c:	e02a      	b.n	80088d4 <b_bsearch+0x7a>
    int mid_i;
    mid_i = (n >> 1) + (high_i >> 1);
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	105a      	asrs	r2, r3, #1
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	105b      	asrs	r3, r3, #1
 8008886:	4413      	add	r3, r2
 8008888:	61bb      	str	r3, [r7, #24]
    if (((n & 1) == 1) && ((high_i & 1) == 1)) {
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d007      	beq.n	80088a4 <b_bsearch+0x4a>
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <b_bsearch+0x4a>
      mid_i++;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	3301      	adds	r3, #1
 80088a2:	61bb      	str	r3, [r7, #24]
    }
    if (xi >= x_data[mid_i - 1]) {
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80088aa:	3b01      	subs	r3, #1
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4413      	add	r3, r2
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088ba:	f7f8 fa49 	bl	8000d50 <__aeabi_dcmpge>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <b_bsearch+0x76>
      n = mid_i;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	61fb      	str	r3, [r7, #28]
      low_ip1 = mid_i + 1;
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	3301      	adds	r3, #1
 80088cc:	623b      	str	r3, [r7, #32]
 80088ce:	e001      	b.n	80088d4 <b_bsearch+0x7a>
    } else {
      high_i = mid_i;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (high_i > low_ip1) {
 80088d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	429a      	cmp	r2, r3
 80088da:	dcd0      	bgt.n	800887e <b_bsearch+0x24>
    }
  }
  return n;
 80088dc:	69fb      	ldr	r3, [r7, #28]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3728      	adds	r7, #40	; 0x28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <fft>:
 * Arguments    : const emxArray_real32_T *x
 *                emxArray_creal32_T *y
 * Return Type  : void
 */
void fft(const emxArray_real32_T *x, emxArray_creal32_T *y)
{
 80088e8:	b5b0      	push	{r4, r5, r7, lr}
 80088ea:	b0a2      	sub	sp, #136	; 0x88
 80088ec:	af04      	add	r7, sp, #16
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  float *sintabinv_data;
  int c_x;
  int d_x;
  int k;
  int pow2p;
  x_data = x->data;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (x->size[1] == 0) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	3304      	adds	r3, #4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d109      	bne.n	8008918 <fft+0x30>
    y->size[0] = 1;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	601a      	str	r2, [r3, #0]
    y->size[1] = 0;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	3304      	adds	r3, #4
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
    for (pow2p = 0; pow2p < pmax; pow2p++) {
      y_data[pow2p] = yCol_data[pow2p];
    }
    emxFree_creal32_T(&yCol);
  }
}
 8008916:	e372      	b.n	8008ffe <fft+0x716>
    useRadix2 = ((x->size[1] & (x->size[1] - 1)) == 0);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	3304      	adds	r3, #4
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	3304      	adds	r3, #4
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3b01      	subs	r3, #1
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	bf0c      	ite	eq
 8008930:	2301      	moveq	r3, #1
 8008932:	2300      	movne	r3, #0
 8008934:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    pmin = 1;
 8008938:	2301      	movs	r3, #1
 800893a:	667b      	str	r3, [r7, #100]	; 0x64
    if (useRadix2) {
 800893c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008940:	2b00      	cmp	r3, #0
 8008942:	d004      	beq.n	800894e <fft+0x66>
      pmax = x->size[1];
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	66bb      	str	r3, [r7, #104]	; 0x68
 800894c:	e044      	b.n	80089d8 <fft+0xf0>
      n = (x->size[1] + x->size[1]) - 1;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	3b01      	subs	r3, #1
 800895a:	657b      	str	r3, [r7, #84]	; 0x54
      pmax = 31;
 800895c:	231f      	movs	r3, #31
 800895e:	66bb      	str	r3, [r7, #104]	; 0x68
      if (n <= 1) {
 8008960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008962:	2b01      	cmp	r3, #1
 8008964:	dc02      	bgt.n	800896c <fft+0x84>
        pmax = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	66bb      	str	r3, [r7, #104]	; 0x68
 800896a:	e02e      	b.n	80089ca <fft+0xe2>
        pmin = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	667b      	str	r3, [r7, #100]	; 0x64
        exitg1 = false;
 8008970:	2300      	movs	r3, #0
 8008972:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        while ((!exitg1) && (pmax - pmin > 1)) {
 8008976:	e01c      	b.n	80089b2 <fft+0xca>
          k = (pmin + pmax) >> 1;
 8008978:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800897a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800897c:	4413      	add	r3, r2
 800897e:	105b      	asrs	r3, r3, #1
 8008980:	673b      	str	r3, [r7, #112]	; 0x70
          pow2p = 1 << k;
 8008982:	2201      	movs	r2, #1
 8008984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008986:	fa02 f303 	lsl.w	r3, r2, r3
 800898a:	66fb      	str	r3, [r7, #108]	; 0x6c
          if (pow2p == n) {
 800898c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800898e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008990:	429a      	cmp	r2, r3
 8008992:	d105      	bne.n	80089a0 <fft+0xb8>
            pmax = k;
 8008994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008996:	66bb      	str	r3, [r7, #104]	; 0x68
            exitg1 = true;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800899e:	e008      	b.n	80089b2 <fft+0xca>
          } else if (pow2p > n) {
 80089a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a4:	429a      	cmp	r2, r3
 80089a6:	dd02      	ble.n	80089ae <fft+0xc6>
            pmax = k;
 80089a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80089ac:	e001      	b.n	80089b2 <fft+0xca>
            pmin = k;
 80089ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089b0:	667b      	str	r3, [r7, #100]	; 0x64
        while ((!exitg1) && (pmax - pmin > 1)) {
 80089b2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80089b6:	f083 0301 	eor.w	r3, r3, #1
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <fft+0xe2>
 80089c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	dcd6      	bgt.n	8008978 <fft+0x90>
      pmin = 1 << pmax;
 80089ca:	2201      	movs	r2, #1
 80089cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	667b      	str	r3, [r7, #100]	; 0x64
      pmax = pmin;
 80089d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089d6:	66bb      	str	r3, [r7, #104]	; 0x68
    emxInit_real32_T(&costab1q, 2);
 80089d8:	f107 031c 	add.w	r3, r7, #28
 80089dc:	2102      	movs	r1, #2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fecf 	bl	8008782 <emxInit_real32_T>
    e = 6.28318548F / (float)pmax;
 80089e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089ee:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8008c64 <fft+0x37c>
 80089f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089f6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    n = pmax / 2 / 2;
 80089fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da00      	bge.n	8008a02 <fft+0x11a>
 8008a00:	3303      	adds	r3, #3
 8008a02:	109b      	asrs	r3, r3, #2
 8008a04:	657b      	str	r3, [r7, #84]	; 0x54
    pow2p = costab1q->size[0] * costab1q->size[1];
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	6852      	ldr	r2, [r2, #4]
 8008a10:	3204      	adds	r2, #4
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	fb02 f303 	mul.w	r3, r2, r3
 8008a18:	66fb      	str	r3, [r7, #108]	; 0x6c
    costab1q->size[0] = 1;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
    costab1q->size[1] = n + 1;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	3304      	adds	r3, #4
 8008a28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(costab1q, pow2p);
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fc63 	bl	80082fe <emxEnsureCapacity_real32_T>
    costab1q_data = costab1q->data;
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    costab1q_data[0] = 1.0F;
 8008a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008a44:	601a      	str	r2, [r3, #0]
    pmax = n / 2 - 1;
 8008a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a48:	0fda      	lsrs	r2, r3, #31
 8008a4a:	4413      	add	r3, r2
 8008a4c:	105b      	asrs	r3, r3, #1
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	66bb      	str	r3, [r7, #104]	; 0x68
    for (k = 0; k <= pmax; k++) {
 8008a52:	2300      	movs	r3, #0
 8008a54:	673b      	str	r3, [r7, #112]	; 0x70
 8008a56:	e019      	b.n	8008a8c <fft+0x1a4>
      costab1q_data[k + 1] = cosf(e * (float)(k + 1));
 8008a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	ee07 3a90 	vmov	s15, r3
 8008a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a64:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a6e:	3301      	adds	r3, #1
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a74:	18d4      	adds	r4, r2, r3
 8008a76:	eeb0 0a67 	vmov.f32	s0, s15
 8008a7a:	f015 fea9 	bl	801e7d0 <cosf>
 8008a7e:	eef0 7a40 	vmov.f32	s15, s0
 8008a82:	edc4 7a00 	vstr	s15, [r4]
    for (k = 0; k <= pmax; k++) {
 8008a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a88:	3301      	adds	r3, #1
 8008a8a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a90:	429a      	cmp	r2, r3
 8008a92:	dde1      	ble.n	8008a58 <fft+0x170>
    pow2p = pmax + 2;
 8008a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a96:	3302      	adds	r3, #2
 8008a98:	66fb      	str	r3, [r7, #108]	; 0x6c
    pmax = n - 1;
 8008a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	66bb      	str	r3, [r7, #104]	; 0x68
    for (k = pow2p; k <= pmax; k++) {
 8008aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa2:	673b      	str	r3, [r7, #112]	; 0x70
 8008aa4:	e019      	b.n	8008ada <fft+0x1f2>
      costab1q_data[k] = sinf(e * (float)(n - k));
 8008aa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	ee07 3a90 	vmov	s15, r3
 8008ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ab4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ac2:	18d4      	adds	r4, r2, r3
 8008ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ac8:	f015 feca 	bl	801e860 <sinf>
 8008acc:	eef0 7a40 	vmov.f32	s15, s0
 8008ad0:	edc4 7a00 	vstr	s15, [r4]
    for (k = pow2p; k <= pmax; k++) {
 8008ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	673b      	str	r3, [r7, #112]	; 0x70
 8008ada:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	dde1      	ble.n	8008aa6 <fft+0x1be>
    costab1q_data[n] = 0.0F;
 8008ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ae8:	4413      	add	r3, r2
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
    emxInit_real32_T(&costab, 2);
 8008af0:	f107 0320 	add.w	r3, r7, #32
 8008af4:	2102      	movs	r1, #2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fe43 	bl	8008782 <emxInit_real32_T>
    emxInit_real32_T(&sintab, 2);
 8008afc:	f107 0318 	add.w	r3, r7, #24
 8008b00:	2102      	movs	r1, #2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff fe3d 	bl	8008782 <emxInit_real32_T>
    emxInit_real32_T(&sintabinv, 2);
 8008b08:	f107 0314 	add.w	r3, r7, #20
 8008b0c:	2102      	movs	r1, #2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff fe37 	bl	8008782 <emxInit_real32_T>
    if (!useRadix2) {
 8008b14:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008b18:	f083 0301 	eor.w	r3, r3, #1
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 80f8 	beq.w	8008d14 <fft+0x42c>
      n = costab1q->size[1] - 1;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	657b      	str	r3, [r7, #84]	; 0x54
      pmax = (costab1q->size[1] - 1) << 1;
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	3304      	adds	r3, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	66bb      	str	r3, [r7, #104]	; 0x68
      pow2p = costab->size[0] * costab->size[1];
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	6852      	ldr	r2, [r2, #4]
 8008b48:	3204      	adds	r2, #4
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	fb02 f303 	mul.w	r3, r2, r3
 8008b50:	66fb      	str	r3, [r7, #108]	; 0x6c
      costab->size[0] = 1;
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	601a      	str	r2, [r3, #0]
      costab->size[1] = pmax + 1;
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b62:	3201      	adds	r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(costab, pow2p);
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7ff fbc7 	bl	80082fe <emxEnsureCapacity_real32_T>
      costab_data = costab->data;
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	64bb      	str	r3, [r7, #72]	; 0x48
      pow2p = sintab->size[0] * sintab->size[1];
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	6852      	ldr	r2, [r2, #4]
 8008b80:	3204      	adds	r2, #4
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	fb02 f303 	mul.w	r3, r2, r3
 8008b88:	66fb      	str	r3, [r7, #108]	; 0x6c
      sintab->size[0] = 1;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	601a      	str	r2, [r3, #0]
      sintab->size[1] = pmax + 1;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	3304      	adds	r3, #4
 8008b98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b9a:	3201      	adds	r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(sintab, pow2p);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fbab 	bl	80082fe <emxEnsureCapacity_real32_T>
      sintab_data = sintab->data;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	647b      	str	r3, [r7, #68]	; 0x44
      costab_data[0] = 1.0F;
 8008bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008bb4:	601a      	str	r2, [r3, #0]
      sintab_data[0] = 0.0F;
 8008bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb8:	f04f 0200 	mov.w	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]
      pow2p = sintabinv->size[0] * sintabinv->size[1];
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	6852      	ldr	r2, [r2, #4]
 8008bc8:	3204      	adds	r2, #4
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
      sintabinv->size[0] = 1;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
      sintabinv->size[1] = pmax + 1;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	3304      	adds	r3, #4
 8008be0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008be2:	3201      	adds	r2, #1
 8008be4:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(sintabinv, pow2p);
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff fb87 	bl	80082fe <emxEnsureCapacity_real32_T>
      sintabinv_data = sintabinv->data;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	643b      	str	r3, [r7, #64]	; 0x40
      for (k = 0; k < n; k++) {
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	673b      	str	r3, [r7, #112]	; 0x70
 8008bfa:	e012      	b.n	8008c22 <fft+0x33a>
        sintabinv_data[k + 1] = costab1q_data[(n - k) - 1];
 8008bfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c06:	3b01      	subs	r3, #1
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c0c:	441a      	add	r2, r3
 8008c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c10:	3301      	adds	r3, #1
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c16:	440b      	add	r3, r1
 8008c18:	6812      	ldr	r2, [r2, #0]
 8008c1a:	601a      	str	r2, [r3, #0]
      for (k = 0; k < n; k++) {
 8008c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c1e:	3301      	adds	r3, #1
 8008c20:	673b      	str	r3, [r7, #112]	; 0x70
 8008c22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c26:	429a      	cmp	r2, r3
 8008c28:	dbe8      	blt.n	8008bfc <fft+0x314>
      pow2p = costab1q->size[1];
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	66fb      	str	r3, [r7, #108]	; 0x6c
      for (k = pow2p; k <= pmax; k++) {
 8008c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c34:	673b      	str	r3, [r7, #112]	; 0x70
 8008c36:	e00e      	b.n	8008c56 <fft+0x36e>
        sintabinv_data[k] = costab1q_data[k - n];
 8008c38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c42:	441a      	add	r2, r3
 8008c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c4a:	440b      	add	r3, r1
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	601a      	str	r2, [r3, #0]
      for (k = pow2p; k <= pmax; k++) {
 8008c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c52:	3301      	adds	r3, #1
 8008c54:	673b      	str	r3, [r7, #112]	; 0x70
 8008c56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	ddec      	ble.n	8008c38 <fft+0x350>
      for (k = 0; k < n; k++) {
 8008c5e:	2300      	movs	r3, #0
 8008c60:	673b      	str	r3, [r7, #112]	; 0x70
 8008c62:	e024      	b.n	8008cae <fft+0x3c6>
 8008c64:	40c90fdb 	.word	0x40c90fdb
        costab_data[k + 1] = costab1q_data[k + 1];
 8008c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c70:	441a      	add	r2, r3
 8008c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c74:	3301      	adds	r3, #1
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008c7a:	440b      	add	r3, r1
 8008c7c:	6812      	ldr	r2, [r2, #0]
 8008c7e:	601a      	str	r2, [r3, #0]
        sintab_data[k + 1] = -costab1q_data[(n - k) - 1];
 8008c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c90:	4413      	add	r3, r2
 8008c92:	edd3 7a00 	vldr	s15, [r3]
 8008c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c98:	3301      	adds	r3, #1
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c9e:	4413      	add	r3, r2
 8008ca0:	eef1 7a67 	vneg.f32	s15, s15
 8008ca4:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < n; k++) {
 8008ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008caa:	3301      	adds	r3, #1
 8008cac:	673b      	str	r3, [r7, #112]	; 0x70
 8008cae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	dbd8      	blt.n	8008c68 <fft+0x380>
      pow2p = costab1q->size[1];
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
      for (k = pow2p; k <= pmax; k++) {
 8008cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc0:	673b      	str	r3, [r7, #112]	; 0x70
 8008cc2:	e022      	b.n	8008d0a <fft+0x422>
        costab_data[k] = -costab1q_data[pmax - k];
 8008cc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cce:	4413      	add	r3, r2
 8008cd0:	edd3 7a00 	vldr	s15, [r3]
 8008cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cda:	4413      	add	r3, r2
 8008cdc:	eef1 7a67 	vneg.f32	s15, s15
 8008ce0:	edc3 7a00 	vstr	s15, [r3]
        sintab_data[k] = -costab1q_data[k - n];
 8008ce4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cee:	4413      	add	r3, r2
 8008cf0:	edd3 7a00 	vldr	s15, [r3]
 8008cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cfa:	4413      	add	r3, r2
 8008cfc:	eef1 7a67 	vneg.f32	s15, s15
 8008d00:	edc3 7a00 	vstr	s15, [r3]
      for (k = pow2p; k <= pmax; k++) {
 8008d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d06:	3301      	adds	r3, #1
 8008d08:	673b      	str	r3, [r7, #112]	; 0x70
 8008d0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	ddd8      	ble.n	8008cc4 <fft+0x3dc>
 8008d12:	e0ad      	b.n	8008e70 <fft+0x588>
      n = costab1q->size[1] - 1;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	657b      	str	r3, [r7, #84]	; 0x54
      pmax = (costab1q->size[1] - 1) << 1;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	3304      	adds	r3, #4
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	66bb      	str	r3, [r7, #104]	; 0x68
      pow2p = costab->size[0] * costab->size[1];
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6a3a      	ldr	r2, [r7, #32]
 8008d36:	6852      	ldr	r2, [r2, #4]
 8008d38:	3204      	adds	r2, #4
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	fb02 f303 	mul.w	r3, r2, r3
 8008d40:	66fb      	str	r3, [r7, #108]	; 0x6c
      costab->size[0] = 1;
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	601a      	str	r2, [r3, #0]
      costab->size[1] = pmax + 1;
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d52:	3201      	adds	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(costab, pow2p);
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff facf 	bl	80082fe <emxEnsureCapacity_real32_T>
      costab_data = costab->data;
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	64bb      	str	r3, [r7, #72]	; 0x48
      pow2p = sintab->size[0] * sintab->size[1];
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	6852      	ldr	r2, [r2, #4]
 8008d70:	3204      	adds	r2, #4
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
 8008d78:	66fb      	str	r3, [r7, #108]	; 0x6c
      sintab->size[0] = 1;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	601a      	str	r2, [r3, #0]
      sintab->size[1] = pmax + 1;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	3304      	adds	r3, #4
 8008d88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d8a:	3201      	adds	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(sintab, pow2p);
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff fab3 	bl	80082fe <emxEnsureCapacity_real32_T>
      sintab_data = sintab->data;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	647b      	str	r3, [r7, #68]	; 0x44
      costab_data[0] = 1.0F;
 8008d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008da4:	601a      	str	r2, [r3, #0]
      sintab_data[0] = 0.0F;
 8008da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
      for (k = 0; k < n; k++) {
 8008dae:	2300      	movs	r3, #0
 8008db0:	673b      	str	r3, [r7, #112]	; 0x70
 8008db2:	e022      	b.n	8008dfa <fft+0x512>
        costab_data[k + 1] = costab1q_data[k + 1];
 8008db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008db6:	3301      	adds	r3, #1
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dbc:	441a      	add	r2, r3
 8008dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008dc6:	440b      	add	r3, r1
 8008dc8:	6812      	ldr	r2, [r2, #0]
 8008dca:	601a      	str	r2, [r3, #0]
        sintab_data[k + 1] = -costab1q_data[(n - k) - 1];
 8008dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ddc:	4413      	add	r3, r2
 8008dde:	edd3 7a00 	vldr	s15, [r3]
 8008de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008de4:	3301      	adds	r3, #1
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dea:	4413      	add	r3, r2
 8008dec:	eef1 7a67 	vneg.f32	s15, s15
 8008df0:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < n; k++) {
 8008df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008df6:	3301      	adds	r3, #1
 8008df8:	673b      	str	r3, [r7, #112]	; 0x70
 8008dfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	dbd8      	blt.n	8008db4 <fft+0x4cc>
      pow2p = costab1q->size[1];
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	66fb      	str	r3, [r7, #108]	; 0x6c
      for (k = pow2p; k <= pmax; k++) {
 8008e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0c:	673b      	str	r3, [r7, #112]	; 0x70
 8008e0e:	e022      	b.n	8008e56 <fft+0x56e>
        costab_data[k] = -costab1q_data[pmax - k];
 8008e10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e1a:	4413      	add	r3, r2
 8008e1c:	edd3 7a00 	vldr	s15, [r3]
 8008e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e26:	4413      	add	r3, r2
 8008e28:	eef1 7a67 	vneg.f32	s15, s15
 8008e2c:	edc3 7a00 	vstr	s15, [r3]
        sintab_data[k] = -costab1q_data[k - n];
 8008e30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e3a:	4413      	add	r3, r2
 8008e3c:	edd3 7a00 	vldr	s15, [r3]
 8008e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e46:	4413      	add	r3, r2
 8008e48:	eef1 7a67 	vneg.f32	s15, s15
 8008e4c:	edc3 7a00 	vstr	s15, [r3]
      for (k = pow2p; k <= pmax; k++) {
 8008e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e52:	3301      	adds	r3, #1
 8008e54:	673b      	str	r3, [r7, #112]	; 0x70
 8008e56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	ddd8      	ble.n	8008e10 <fft+0x528>
      sintabinv->size[0] = 1;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	601a      	str	r2, [r3, #0]
      sintabinv->size[1] = 0;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
    emxFree_real32_T(&costab1q);
 8008e70:	f107 031c 	add.w	r3, r7, #28
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff fb8c 	bl	8008592 <emxFree_real32_T>
    emxInit_creal32_T(&yCol, 1);
 8008e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e7e:	2101      	movs	r1, #1
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff fc0e 	bl	80086a2 <emxInit_creal32_T>
    if (useRadix2) {
 8008e86:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d044      	beq.n	8008f18 <fft+0x630>
      pow2p = yCol->size[0];
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	66fb      	str	r3, [r7, #108]	; 0x6c
      yCol->size[0] = x->size[1];
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	6852      	ldr	r2, [r2, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_creal32_T(yCol, pow2p);
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff f95d 	bl	8008166 <emxEnsureCapacity_creal32_T>
      yCol_data = yCol->data;
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	677b      	str	r3, [r7, #116]	; 0x74
      if (x->size[1] != 1) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d023      	beq.n	8008f06 <fft+0x61e>
        pmax = x->size[1];
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	66bb      	str	r3, [r7, #104]	; 0x68
        b_x = *x;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8008ecc:	461d      	mov	r5, r3
 8008ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed2:	682b      	ldr	r3, [r5, #0]
 8008ed4:	6023      	str	r3, [r4, #0]
        d_x = pmax;
 8008ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ed8:	60fb      	str	r3, [r7, #12]
        b_x.size = &d_x;
 8008eda:	f107 030c 	add.w	r3, r7, #12
 8008ede:	62bb      	str	r3, [r7, #40]	; 0x28
        b_x.numDimensions = 1;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	633b      	str	r3, [r7, #48]	; 0x30
        c_FFTImplementationCallback_doH(&b_x, yCol, x->size[1], costab, sintab);
 8008ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	6a3c      	ldr	r4, [r7, #32]
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	4623      	mov	r3, r4
 8008efa:	f7f9 fed9 	bl	8002cb0 <c_FFTImplementationCallback_doH>
        yCol_data = yCol->data;
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	677b      	str	r3, [r7, #116]	; 0x74
 8008f04:	e030      	b.n	8008f68 <fft+0x680>
        yCol_data[0].re = x_data[0];
 8008f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f0c:	601a      	str	r2, [r3, #0]
        yCol_data[0].im = 0.0F;
 8008f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f10:	f04f 0200 	mov.w	r2, #0
 8008f14:	605a      	str	r2, [r3, #4]
 8008f16:	e027      	b.n	8008f68 <fft+0x680>
      pmax = x->size[1];
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	66bb      	str	r3, [r7, #104]	; 0x68
      b_x = *x;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8008f26:	461d      	mov	r5, r3
 8008f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	6023      	str	r3, [r4, #0]
      c_x = pmax;
 8008f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f32:	613b      	str	r3, [r7, #16]
      b_x.size = &c_x;
 8008f34:	f107 0310 	add.w	r3, r7, #16
 8008f38:	62bb      	str	r3, [r7, #40]	; 0x28
      b_x.numDimensions = 1;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	633b      	str	r3, [r7, #48]	; 0x30
      c_FFTImplementationCallback_dob(&b_x, pmin, x->size[1], costab, sintab,
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	3304      	adds	r3, #4
 8008f44:	681c      	ldr	r4, [r3, #0]
 8008f46:	6a3d      	ldr	r5, [r7, #32]
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f52:	9102      	str	r1, [sp, #8]
 8008f54:	9201      	str	r2, [sp, #4]
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	462b      	mov	r3, r5
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008f5e:	f7fa ff57 	bl	8003e10 <c_FFTImplementationCallback_dob>
      yCol_data = yCol->data;
 8008f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	677b      	str	r3, [r7, #116]	; 0x74
    emxFree_real32_T(&sintabinv);
 8008f68:	f107 0314 	add.w	r3, r7, #20
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff fb10 	bl	8008592 <emxFree_real32_T>
    emxFree_real32_T(&sintab);
 8008f72:	f107 0318 	add.w	r3, r7, #24
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff fb0b 	bl	8008592 <emxFree_real32_T>
    emxFree_real32_T(&costab);
 8008f7c:	f107 0320 	add.w	r3, r7, #32
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7ff fb06 	bl	8008592 <emxFree_real32_T>
    pow2p = y->size[0] * y->size[1];
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	6852      	ldr	r2, [r2, #4]
 8008f90:	3204      	adds	r2, #4
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	fb02 f303 	mul.w	r3, r2, r3
 8008f98:	66fb      	str	r3, [r7, #108]	; 0x6c
    y->size[0] = 1;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]
    y->size[1] = x->size[1];
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	3304      	adds	r3, #4
 8008fac:	6852      	ldr	r2, [r2, #4]
 8008fae:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(y, pow2p);
 8008fb0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fb2:	6838      	ldr	r0, [r7, #0]
 8008fb4:	f7ff f8d7 	bl	8008166 <emxEnsureCapacity_creal32_T>
    y_data = y->data;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    pmax = x->size[1];
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	66bb      	str	r3, [r7, #104]	; 0x68
    for (pow2p = 0; pow2p < pmax; pow2p++) {
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fca:	e00f      	b.n	8008fec <fft+0x704>
      y_data[pow2p] = yCol_data[pow2p];
 8008fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008fd2:	18d1      	adds	r1, r2, r3
 8008fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fda:	4413      	add	r3, r2
 8008fdc:	460a      	mov	r2, r1
 8008fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fe2:	e883 0003 	stmia.w	r3, {r0, r1}
    for (pow2p = 0; pow2p < pmax; pow2p++) {
 8008fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe8:	3301      	adds	r3, #1
 8008fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	dbeb      	blt.n	8008fcc <fft+0x6e4>
    emxFree_creal32_T(&yCol);
 8008ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fa76 	bl	80084ea <emxFree_creal32_T>
}
 8008ffe:	bf00      	nop
 8009000:	3778      	adds	r7, #120	; 0x78
 8009002:	46bd      	mov	sp, r7
 8009004:	bdb0      	pop	{r4, r5, r7, pc}
 8009006:	bf00      	nop

08009008 <b_interp1>:
 *                creal32_T Vq[42]
 * Return Type  : void
 */
void b_interp1(const emxArray_real_T *varargin_1,
               const emxArray_creal32_T *varargin_2, creal32_T Vq[42])
{
 8009008:	b5b0      	push	{r4, r5, r7, lr}
 800900a:	ed2d 8b02 	vpush	{d8}
 800900e:	b096      	sub	sp, #88	; 0x58
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
  double *x_data;
  int b_j1;
  int k;
  int nd2;
  int nx;
  varargin_2_data = varargin_2->data;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	647b      	str	r3, [r7, #68]	; 0x44
  varargin_1_data = varargin_1->data;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	643b      	str	r3, [r7, #64]	; 0x40
  emxInit_creal32_T(&y, 2);
 8009024:	f107 0314 	add.w	r3, r7, #20
 8009028:	2102      	movs	r1, #2
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff fb39 	bl	80086a2 <emxInit_creal32_T>
  k = y->size[0] * y->size[1];
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	6852      	ldr	r2, [r2, #4]
 800903a:	3204      	adds	r2, #4
 800903c:	6812      	ldr	r2, [r2, #0]
 800903e:	fb02 f303 	mul.w	r3, r2, r3
 8009042:	653b      	str	r3, [r7, #80]	; 0x50
  y->size[0] = 1;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	601a      	str	r2, [r3, #0]
  y->size[1] = varargin_2->size[1];
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	3304      	adds	r3, #4
 8009056:	6852      	ldr	r2, [r2, #4]
 8009058:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(y, k);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800905e:	4618      	mov	r0, r3
 8009060:	f7ff f881 	bl	8008166 <emxEnsureCapacity_creal32_T>
  y_data = y->data;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
  nd2 = varargin_2->size[1];
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	63bb      	str	r3, [r7, #56]	; 0x38
  for (k = 0; k < nd2; k++) {
 8009072:	2300      	movs	r3, #0
 8009074:	653b      	str	r3, [r7, #80]	; 0x50
 8009076:	e00f      	b.n	8009098 <b_interp1+0x90>
    y_data[k] = varargin_2_data[k];
 8009078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800907e:	18d1      	adds	r1, r2, r3
 8009080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009086:	4413      	add	r3, r2
 8009088:	460a      	mov	r2, r1
 800908a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800908e:	e883 0003 	stmia.w	r3, {r0, r1}
  for (k = 0; k < nd2; k++) {
 8009092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009094:	3301      	adds	r3, #1
 8009096:	653b      	str	r3, [r7, #80]	; 0x50
 8009098:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	429a      	cmp	r2, r3
 800909e:	dbeb      	blt.n	8009078 <b_interp1+0x70>
  }
  emxInit_real_T(&x);
 80090a0:	f107 0310 	add.w	r3, r7, #16
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7ff fba4 	bl	80087f2 <emxInit_real_T>
  k = x->size[0] * x->size[1];
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	6852      	ldr	r2, [r2, #4]
 80090b4:	3204      	adds	r2, #4
 80090b6:	6812      	ldr	r2, [r2, #0]
 80090b8:	fb02 f303 	mul.w	r3, r2, r3
 80090bc:	653b      	str	r3, [r7, #80]	; 0x50
  x->size[0] = 1;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
  x->size[1] = varargin_1->size[1];
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	3304      	adds	r3, #4
 80090d0:	6852      	ldr	r2, [r2, #4]
 80090d2:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(x, k);
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff f976 	bl	80083ca <emxEnsureCapacity_real_T>
  x_data = x->data;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	637b      	str	r3, [r7, #52]	; 0x34
  nd2 = varargin_1->size[1];
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	63bb      	str	r3, [r7, #56]	; 0x38
  for (k = 0; k < nd2; k++) {
 80090ec:	2300      	movs	r3, #0
 80090ee:	653b      	str	r3, [r7, #80]	; 0x50
 80090f0:	e00e      	b.n	8009110 <b_interp1+0x108>
    x_data[k] = varargin_1_data[k];
 80090f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090f8:	4413      	add	r3, r2
 80090fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090fc:	00d2      	lsls	r2, r2, #3
 80090fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009100:	4411      	add	r1, r2
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < nd2; k++) {
 800910a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800910c:	3301      	adds	r3, #1
 800910e:	653b      	str	r3, [r7, #80]	; 0x50
 8009110:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	429a      	cmp	r2, r3
 8009116:	dbec      	blt.n	80090f2 <b_interp1+0xea>
  }
  nx = varargin_1->size[1] - 1;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3b01      	subs	r3, #1
 8009122:	64fb      	str	r3, [r7, #76]	; 0x4c
  k = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	653b      	str	r3, [r7, #80]	; 0x50
  int exitg1;
  do {
    exitg1 = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (k <= nx) {
 800912c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800912e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009130:	429a      	cmp	r2, r3
 8009132:	dc15      	bgt.n	8009160 <b_interp1+0x158>
      if (rtIsNaN(varargin_1_data[k])) {
 8009134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800913a:	4413      	add	r3, r2
 800913c:	ed93 7b00 	vldr	d7, [r3]
 8009140:	eeb0 0a47 	vmov.f32	s0, s14
 8009144:	eef0 0a67 	vmov.f32	s1, s15
 8009148:	f000 fec6 	bl	8009ed8 <rtIsNaN>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <b_interp1+0x150>
        exitg1 = 1;
 8009152:	2301      	movs	r3, #1
 8009154:	64bb      	str	r3, [r7, #72]	; 0x48
 8009156:	e1b5      	b.n	80094c4 <b_interp1+0x4bc>
      } else {
        k++;
 8009158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800915a:	3301      	adds	r3, #1
 800915c:	653b      	str	r3, [r7, #80]	; 0x50
 800915e:	e1b1      	b.n	80094c4 <b_interp1+0x4bc>
      }
    } else {
      double xtmp;
      float xtmp_im;
      float xtmp_re;
      if (varargin_1_data[1] < varargin_1_data[0]) {
 8009160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009162:	3308      	adds	r3, #8
 8009164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f7f7 fddb 	bl	8000d28 <__aeabi_dcmplt>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d06a      	beq.n	800924e <b_interp1+0x246>
        k = (nx + 1) >> 1;
 8009178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917a:	3301      	adds	r3, #1
 800917c:	105b      	asrs	r3, r3, #1
 800917e:	653b      	str	r3, [r7, #80]	; 0x50
        for (b_j1 = 0; b_j1 < k; b_j1++) {
 8009180:	2300      	movs	r3, #0
 8009182:	657b      	str	r3, [r7, #84]	; 0x54
 8009184:	e022      	b.n	80091cc <b_interp1+0x1c4>
          xtmp = x_data[b_j1];
 8009186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800918c:	4413      	add	r3, r2
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	e9c7 2308 	strd	r2, r3, [r7, #32]
          nd2 = nx - b_j1;
 8009196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	63bb      	str	r3, [r7, #56]	; 0x38
          x_data[b_j1] = x_data[nd2];
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091a4:	4413      	add	r3, r2
 80091a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091a8:	00d2      	lsls	r2, r2, #3
 80091aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091ac:	4411      	add	r1, r2
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	e9c1 2300 	strd	r2, r3, [r1]
          x_data[nd2] = xtmp;
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091bc:	18d1      	adds	r1, r2, r3
 80091be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091c2:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_j1 = 0; b_j1 < k; b_j1++) {
 80091c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091c8:	3301      	adds	r3, #1
 80091ca:	657b      	str	r3, [r7, #84]	; 0x54
 80091cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091d0:	429a      	cmp	r2, r3
 80091d2:	dbd8      	blt.n	8009186 <b_interp1+0x17e>
        }
        nd2 = varargin_2->size[1] >> 1;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	105b      	asrs	r3, r3, #1
 80091de:	63bb      	str	r3, [r7, #56]	; 0x38
        for (b_j1 = 0; b_j1 < nd2; b_j1++) {
 80091e0:	2300      	movs	r3, #0
 80091e2:	657b      	str	r3, [r7, #84]	; 0x54
 80091e4:	e02f      	b.n	8009246 <b_interp1+0x23e>
          nx = (varargin_2->size[1] - b_j1) - 1;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	3304      	adds	r3, #4
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	64fb      	str	r3, [r7, #76]	; 0x4c
          xtmp_re = y_data[b_j1].re;
 80091f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091fc:	4413      	add	r3, r2
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	633b      	str	r3, [r7, #48]	; 0x30
          xtmp_im = y_data[b_j1].im;
 8009202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009208:	4413      	add	r3, r2
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	62fb      	str	r3, [r7, #44]	; 0x2c
          y_data[b_j1] = y_data[nx];
 800920e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009214:	18d1      	adds	r1, r2, r3
 8009216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800921c:	4413      	add	r3, r2
 800921e:	460a      	mov	r2, r1
 8009220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009224:	e883 0003 	stmia.w	r3, {r0, r1}
          y_data[nx].re = xtmp_re;
 8009228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800922e:	4413      	add	r3, r2
 8009230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009232:	601a      	str	r2, [r3, #0]
          y_data[nx].im = xtmp_im;
 8009234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800923a:	4413      	add	r3, r2
 800923c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800923e:	605a      	str	r2, [r3, #4]
        for (b_j1 = 0; b_j1 < nd2; b_j1++) {
 8009240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009242:	3301      	adds	r3, #1
 8009244:	657b      	str	r3, [r7, #84]	; 0x54
 8009246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	429a      	cmp	r2, r3
 800924c:	dbcb      	blt.n	80091e6 <b_interp1+0x1de>
        }
      }
      for (k = 0; k < 42; k++) {
 800924e:	2300      	movs	r3, #0
 8009250:	653b      	str	r3, [r7, #80]	; 0x50
 8009252:	e131      	b.n	80094b8 <b_interp1+0x4b0>
        Vq[k].re = rtNaNF;
 8009254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	4413      	add	r3, r2
 800925c:	4aa3      	ldr	r2, [pc, #652]	; (80094ec <b_interp1+0x4e4>)
 800925e:	6812      	ldr	r2, [r2, #0]
 8009260:	601a      	str	r2, [r3, #0]
        Vq[k].im = rtNaNF;
 8009262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	4413      	add	r3, r2
 800926a:	4aa0      	ldr	r2, [pc, #640]	; (80094ec <b_interp1+0x4e4>)
 800926c:	6812      	ldr	r2, [r2, #0]
 800926e:	605a      	str	r2, [r3, #4]
        xtmp = dv[k];
 8009270:	4a9f      	ldr	r2, [pc, #636]	; (80094f0 <b_interp1+0x4e8>)
 8009272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	4413      	add	r3, r2
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        if ((!(xtmp > x_data[x->size[1] - 1])) && (!(xtmp < x_data[0]))) {
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	3304      	adds	r3, #4
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800928c:	3b01      	subs	r3, #1
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009292:	4413      	add	r3, r2
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	2101      	movs	r1, #1
 800929a:	460c      	mov	r4, r1
 800929c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80092a0:	f7f7 fd60 	bl	8000d64 <__aeabi_dcmpgt>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <b_interp1+0x2a6>
 80092aa:	2300      	movs	r3, #0
 80092ac:	461c      	mov	r4, r3
 80092ae:	b2e3      	uxtb	r3, r4
 80092b0:	f083 0301 	eor.w	r3, r3, #1
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 80fb 	beq.w	80094b2 <b_interp1+0x4aa>
 80092bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	2101      	movs	r1, #1
 80092c4:	460c      	mov	r4, r1
 80092c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80092ca:	f7f7 fd2d 	bl	8000d28 <__aeabi_dcmplt>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <b_interp1+0x2d0>
 80092d4:	2300      	movs	r3, #0
 80092d6:	461c      	mov	r4, r3
 80092d8:	b2e3      	uxtb	r3, r4
 80092da:	f083 0301 	eor.w	r3, r3, #1
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 80e6 	beq.w	80094b2 <b_interp1+0x4aa>
          nd2 = b_bsearch(x, xtmp) - 1;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	ed97 0b08 	vldr	d0, [r7, #32]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff fab4 	bl	800885a <b_bsearch>
 80092f2:	4603      	mov	r3, r0
 80092f4:	3b01      	subs	r3, #1
 80092f6:	63bb      	str	r3, [r7, #56]	; 0x38
          xtmp = (xtmp - x_data[nd2]) / (x_data[nd2 + 1] - x_data[nd2]);
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092fe:	4413      	add	r3, r2
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009308:	f7f7 f8e4 	bl	80004d4 <__aeabi_dsub>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4614      	mov	r4, r2
 8009312:	461d      	mov	r5, r3
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	3301      	adds	r3, #1
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800931c:	4413      	add	r3, r2
 800931e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009328:	4413      	add	r3, r2
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f7 f8d1 	bl	80004d4 <__aeabi_dsub>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	f7f7 fbad 	bl	8000a98 <__aeabi_ddiv>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	e9c7 2308 	strd	r2, r3, [r7, #32]
          if (xtmp == 0.0) {
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	f04f 0300 	mov.w	r3, #0
 800934e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009352:	f7f7 fcdf 	bl	8000d14 <__aeabi_dcmpeq>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00d      	beq.n	8009378 <b_interp1+0x370>
            Vq[k] = y_data[nd2];
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009362:	18d1      	adds	r1, r2, r3
 8009364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	460a      	mov	r2, r1
 800936e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009372:	e883 0003 	stmia.w	r3, {r0, r1}
 8009376:	e09c      	b.n	80094b2 <b_interp1+0x4aa>
          } else if (xtmp == 1.0) {
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	4b5d      	ldr	r3, [pc, #372]	; (80094f4 <b_interp1+0x4ec>)
 800937e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009382:	f7f7 fcc7 	bl	8000d14 <__aeabi_dcmpeq>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00e      	beq.n	80093aa <b_interp1+0x3a2>
            Vq[k] = y_data[nd2 + 1];
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	3301      	adds	r3, #1
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009394:	18d1      	adds	r1, r2, r3
 8009396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009398:	00db      	lsls	r3, r3, #3
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	4413      	add	r3, r2
 800939e:	460a      	mov	r2, r1
 80093a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80093a8:	e083      	b.n	80094b2 <b_interp1+0x4aa>
          } else {
            float b_y_tmp;
            float y_tmp;
            xtmp_re = y_data[nd2].re;
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093b0:	4413      	add	r3, r2
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	633b      	str	r3, [r7, #48]	; 0x30
            xtmp_im = y_data[nd2 + 1].re;
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	3301      	adds	r3, #1
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093be:	4413      	add	r3, r2
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            y_tmp = y_data[nd2].im;
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093ca:	4413      	add	r3, r2
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	61fb      	str	r3, [r7, #28]
            b_y_tmp = y_data[nd2 + 1].im;
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	3301      	adds	r3, #1
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093d8:	4413      	add	r3, r2
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	61bb      	str	r3, [r7, #24]
            if ((xtmp_re == xtmp_im) && (y_tmp == b_y_tmp)) {
 80093de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80093e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80093e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80093ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ee:	d116      	bne.n	800941e <b_interp1+0x416>
 80093f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80093f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80093f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80093fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009400:	d10d      	bne.n	800941e <b_interp1+0x416>
              Vq[k] = y_data[nd2];
 8009402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009408:	18d1      	adds	r1, r2, r3
 800940a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	4413      	add	r3, r2
 8009412:	460a      	mov	r2, r1
 8009414:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009418:	e883 0003 	stmia.w	r3, {r0, r1}
 800941c:	e049      	b.n	80094b2 <b_interp1+0x4aa>
            } else {
              Vq[k].re = (float)(1.0 - xtmp) * xtmp_re + (float)xtmp * xtmp_im;
 800941e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009422:	f04f 0000 	mov.w	r0, #0
 8009426:	4933      	ldr	r1, [pc, #204]	; (80094f4 <b_interp1+0x4ec>)
 8009428:	f7f7 f854 	bl	80004d4 <__aeabi_dsub>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4610      	mov	r0, r2
 8009432:	4619      	mov	r1, r3
 8009434:	f7f7 fcfe 	bl	8000e34 <__aeabi_d2f>
 8009438:	ee07 0a10 	vmov	s14, r0
 800943c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009440:	ee27 8a27 	vmul.f32	s16, s14, s15
 8009444:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009448:	f7f7 fcf4 	bl	8000e34 <__aeabi_d2f>
 800944c:	ee07 0a10 	vmov	s14, r0
 8009450:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	4413      	add	r3, r2
 8009460:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009464:	edc3 7a00 	vstr	s15, [r3]
              Vq[k].im = (float)(1.0 - xtmp) * y_tmp + (float)xtmp * b_y_tmp;
 8009468:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800946c:	f04f 0000 	mov.w	r0, #0
 8009470:	4920      	ldr	r1, [pc, #128]	; (80094f4 <b_interp1+0x4ec>)
 8009472:	f7f7 f82f 	bl	80004d4 <__aeabi_dsub>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4610      	mov	r0, r2
 800947c:	4619      	mov	r1, r3
 800947e:	f7f7 fcd9 	bl	8000e34 <__aeabi_d2f>
 8009482:	ee07 0a10 	vmov	s14, r0
 8009486:	edd7 7a07 	vldr	s15, [r7, #28]
 800948a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800948e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009492:	f7f7 fccf 	bl	8000e34 <__aeabi_d2f>
 8009496:	ee07 0a10 	vmov	s14, r0
 800949a:	edd7 7a06 	vldr	s15, [r7, #24]
 800949e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	4413      	add	r3, r2
 80094aa:	ee78 7a27 	vadd.f32	s15, s16, s15
 80094ae:	edc3 7a01 	vstr	s15, [r3, #4]
      for (k = 0; k < 42; k++) {
 80094b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b4:	3301      	adds	r3, #1
 80094b6:	653b      	str	r3, [r7, #80]	; 0x50
 80094b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ba:	2b29      	cmp	r3, #41	; 0x29
 80094bc:	f77f aeca 	ble.w	8009254 <b_interp1+0x24c>
            }
          }
        }
      }
      exitg1 = 1;
 80094c0:	2301      	movs	r3, #1
 80094c2:	64bb      	str	r3, [r7, #72]	; 0x48
    }
  } while (exitg1 == 0);
 80094c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f43f ae2e 	beq.w	8009128 <b_interp1+0x120>
  emxFree_real_T(&x);
 80094cc:	f107 0310 	add.w	r3, r7, #16
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff f888 	bl	80085e6 <emxFree_real_T>
  emxFree_creal32_T(&y);
 80094d6:	f107 0314 	add.w	r3, r7, #20
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff f805 	bl	80084ea <emxFree_creal32_T>
}
 80094e0:	bf00      	nop
 80094e2:	3758      	adds	r7, #88	; 0x58
 80094e4:	46bd      	mov	sp, r7
 80094e6:	ecbd 8b02 	vpop	{d8}
 80094ea:	bdb0      	pop	{r4, r5, r7, pc}
 80094ec:	20000000 	.word	0x20000000
 80094f0:	080238f0 	.word	0x080238f0
 80094f4:	3ff00000 	.word	0x3ff00000

080094f8 <interp1>:
 *                float Vq[42]
 * Return Type  : void
 */
void interp1(const emxArray_real_T *varargin_1,
             const emxArray_real32_T *varargin_2, float Vq[42])
{
 80094f8:	b5b0      	push	{r4, r5, r7, lr}
 80094fa:	ed2d 8b02 	vpush	{d8}
 80094fe:	b092      	sub	sp, #72	; 0x48
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  float *y_data;
  int b_j1;
  int k;
  int nd2;
  int nx;
  varargin_2_data = varargin_2->data;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	637b      	str	r3, [r7, #52]	; 0x34
  varargin_1_data = varargin_1->data;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	633b      	str	r3, [r7, #48]	; 0x30
  emxInit_real32_T(&y, 2);
 8009514:	f107 0314 	add.w	r3, r7, #20
 8009518:	2102      	movs	r1, #2
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff f931 	bl	8008782 <emxInit_real32_T>
  k = y->size[0] * y->size[1];
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	6852      	ldr	r2, [r2, #4]
 800952a:	3204      	adds	r2, #4
 800952c:	6812      	ldr	r2, [r2, #0]
 800952e:	fb02 f303 	mul.w	r3, r2, r3
 8009532:	643b      	str	r3, [r7, #64]	; 0x40
  y->size[0] = 1;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	601a      	str	r2, [r3, #0]
  y->size[1] = varargin_2->size[1];
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	3304      	adds	r3, #4
 8009546:	6852      	ldr	r2, [r2, #4]
 8009548:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(y, k);
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe fed5 	bl	80082fe <emxEnsureCapacity_real32_T>
  y_data = y->data;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	62fb      	str	r3, [r7, #44]	; 0x2c
  nd2 = varargin_2->size[1];
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	62bb      	str	r3, [r7, #40]	; 0x28
  for (k = 0; k < nd2; k++) {
 8009562:	2300      	movs	r3, #0
 8009564:	643b      	str	r3, [r7, #64]	; 0x40
 8009566:	e00c      	b.n	8009582 <interp1+0x8a>
    y_data[k] = varargin_2_data[k];
 8009568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800956e:	441a      	add	r2, r3
 8009570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009576:	440b      	add	r3, r1
 8009578:	6812      	ldr	r2, [r2, #0]
 800957a:	601a      	str	r2, [r3, #0]
  for (k = 0; k < nd2; k++) {
 800957c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957e:	3301      	adds	r3, #1
 8009580:	643b      	str	r3, [r7, #64]	; 0x40
 8009582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	429a      	cmp	r2, r3
 8009588:	dbee      	blt.n	8009568 <interp1+0x70>
  }
  emxInit_real_T(&x);
 800958a:	f107 0310 	add.w	r3, r7, #16
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff f92f 	bl	80087f2 <emxInit_real_T>
  k = x->size[0] * x->size[1];
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	6852      	ldr	r2, [r2, #4]
 800959e:	3204      	adds	r2, #4
 80095a0:	6812      	ldr	r2, [r2, #0]
 80095a2:	fb02 f303 	mul.w	r3, r2, r3
 80095a6:	643b      	str	r3, [r7, #64]	; 0x40
  x->size[0] = 1;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	601a      	str	r2, [r3, #0]
  x->size[1] = varargin_1->size[1];
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	3304      	adds	r3, #4
 80095ba:	6852      	ldr	r2, [r2, #4]
 80095bc:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real_T(x, k);
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe ff01 	bl	80083ca <emxEnsureCapacity_real_T>
  x_data = x->data;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
  nd2 = varargin_1->size[1];
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	62bb      	str	r3, [r7, #40]	; 0x28
  for (k = 0; k < nd2; k++) {
 80095d6:	2300      	movs	r3, #0
 80095d8:	643b      	str	r3, [r7, #64]	; 0x40
 80095da:	e00e      	b.n	80095fa <interp1+0x102>
    x_data[k] = varargin_1_data[k];
 80095dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e2:	4413      	add	r3, r2
 80095e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095e6:	00d2      	lsls	r2, r2, #3
 80095e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095ea:	4411      	add	r1, r2
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < nd2; k++) {
 80095f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f6:	3301      	adds	r3, #1
 80095f8:	643b      	str	r3, [r7, #64]	; 0x40
 80095fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	429a      	cmp	r2, r3
 8009600:	dbec      	blt.n	80095dc <interp1+0xe4>
  }
  nx = varargin_1->size[1] - 1;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3b01      	subs	r3, #1
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
  k = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	643b      	str	r3, [r7, #64]	; 0x40
  int exitg1;
  do {
    exitg1 = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	63bb      	str	r3, [r7, #56]	; 0x38
    if (k <= nx) {
 8009616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961a:	429a      	cmp	r2, r3
 800961c:	dc15      	bgt.n	800964a <interp1+0x152>
      if (rtIsNaN(varargin_1_data[k])) {
 800961e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009624:	4413      	add	r3, r2
 8009626:	ed93 7b00 	vldr	d7, [r3]
 800962a:	eeb0 0a47 	vmov.f32	s0, s14
 800962e:	eef0 0a67 	vmov.f32	s1, s15
 8009632:	f000 fc51 	bl	8009ed8 <rtIsNaN>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <interp1+0x14a>
        exitg1 = 1;
 800963c:	2301      	movs	r3, #1
 800963e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009640:	e160      	b.n	8009904 <interp1+0x40c>
      } else {
        k++;
 8009642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009644:	3301      	adds	r3, #1
 8009646:	643b      	str	r3, [r7, #64]	; 0x40
 8009648:	e15c      	b.n	8009904 <interp1+0x40c>
      }
    } else {
      double xtmp;
      if (varargin_1_data[1] < varargin_1_data[0]) {
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	3308      	adds	r3, #8
 800964e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f7f7 fb66 	bl	8000d28 <__aeabi_dcmplt>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d05b      	beq.n	800971a <interp1+0x222>
        k = (nx + 1) >> 1;
 8009662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009664:	3301      	adds	r3, #1
 8009666:	105b      	asrs	r3, r3, #1
 8009668:	643b      	str	r3, [r7, #64]	; 0x40
        for (b_j1 = 0; b_j1 < k; b_j1++) {
 800966a:	2300      	movs	r3, #0
 800966c:	647b      	str	r3, [r7, #68]	; 0x44
 800966e:	e022      	b.n	80096b6 <interp1+0x1be>
          xtmp = x_data[b_j1];
 8009670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009676:	4413      	add	r3, r2
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          nd2 = nx - b_j1;
 8009680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28
          x_data[b_j1] = x_data[nd2];
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800968e:	4413      	add	r3, r2
 8009690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009692:	00d2      	lsls	r2, r2, #3
 8009694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009696:	4411      	add	r1, r2
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	e9c1 2300 	strd	r2, r3, [r1]
          x_data[nd2] = xtmp;
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a6:	18d1      	adds	r1, r2, r3
 80096a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096ac:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_j1 = 0; b_j1 < k; b_j1++) {
 80096b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b2:	3301      	adds	r3, #1
 80096b4:	647b      	str	r3, [r7, #68]	; 0x44
 80096b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ba:	429a      	cmp	r2, r3
 80096bc:	dbd8      	blt.n	8009670 <interp1+0x178>
        }
        nd2 = varargin_2->size[1] >> 1;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	3304      	adds	r3, #4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	105b      	asrs	r3, r3, #1
 80096c8:	62bb      	str	r3, [r7, #40]	; 0x28
        for (b_j1 = 0; b_j1 < nd2; b_j1++) {
 80096ca:	2300      	movs	r3, #0
 80096cc:	647b      	str	r3, [r7, #68]	; 0x44
 80096ce:	e020      	b.n	8009712 <interp1+0x21a>
          float b_xtmp;
          nx = (varargin_2->size[1] - b_j1) - 1;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	3304      	adds	r3, #4
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	63fb      	str	r3, [r7, #60]	; 0x3c
          b_xtmp = y_data[b_j1];
 80096e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e6:	4413      	add	r3, r2
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	623b      	str	r3, [r7, #32]
          y_data[b_j1] = y_data[nx];
 80096ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096f2:	441a      	add	r2, r3
 80096f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096fa:	440b      	add	r3, r1
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	601a      	str	r2, [r3, #0]
          y_data[nx] = b_xtmp;
 8009700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009706:	4413      	add	r3, r2
 8009708:	6a3a      	ldr	r2, [r7, #32]
 800970a:	601a      	str	r2, [r3, #0]
        for (b_j1 = 0; b_j1 < nd2; b_j1++) {
 800970c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800970e:	3301      	adds	r3, #1
 8009710:	647b      	str	r3, [r7, #68]	; 0x44
 8009712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	429a      	cmp	r2, r3
 8009718:	dbda      	blt.n	80096d0 <interp1+0x1d8>
        }
      }
      for (k = 0; k < 42; k++) {
 800971a:	2300      	movs	r3, #0
 800971c:	643b      	str	r3, [r7, #64]	; 0x40
 800971e:	e0eb      	b.n	80098f8 <interp1+0x400>
        Vq[k] = rtNaNF;
 8009720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	4413      	add	r3, r2
 8009728:	4a80      	ldr	r2, [pc, #512]	; (800992c <interp1+0x434>)
 800972a:	6812      	ldr	r2, [r2, #0]
 800972c:	601a      	str	r2, [r3, #0]
        xtmp = dv[k];
 800972e:	4a80      	ldr	r2, [pc, #512]	; (8009930 <interp1+0x438>)
 8009730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	4413      	add	r3, r2
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        if ((!(xtmp > x_data[x->size[1] - 1])) && (!(xtmp < x_data[0]))) {
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800974a:	3b01      	subs	r3, #1
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009750:	4413      	add	r3, r2
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	2101      	movs	r1, #1
 8009758:	460c      	mov	r4, r1
 800975a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800975e:	f7f7 fb01 	bl	8000d64 <__aeabi_dcmpgt>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <interp1+0x274>
 8009768:	2300      	movs	r3, #0
 800976a:	461c      	mov	r4, r3
 800976c:	b2e3      	uxtb	r3, r4
 800976e:	f083 0301 	eor.w	r3, r3, #1
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80bc 	beq.w	80098f2 <interp1+0x3fa>
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	2101      	movs	r1, #1
 8009782:	460c      	mov	r4, r1
 8009784:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009788:	f7f7 face 	bl	8000d28 <__aeabi_dcmplt>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <interp1+0x29e>
 8009792:	2300      	movs	r3, #0
 8009794:	461c      	mov	r4, r3
 8009796:	b2e3      	uxtb	r3, r4
 8009798:	f083 0301 	eor.w	r3, r3, #1
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 80a7 	beq.w	80098f2 <interp1+0x3fa>
          nd2 = b_bsearch(x, xtmp) - 1;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	ed97 0b06 	vldr	d0, [r7, #24]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff f855 	bl	800885a <b_bsearch>
 80097b0:	4603      	mov	r3, r0
 80097b2:	3b01      	subs	r3, #1
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
          xtmp = (xtmp - x_data[nd2]) / (x_data[nd2 + 1] - x_data[nd2]);
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097bc:	4413      	add	r3, r2
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097c6:	f7f6 fe85 	bl	80004d4 <__aeabi_dsub>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4614      	mov	r4, r2
 80097d0:	461d      	mov	r5, r3
 80097d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d4:	3301      	adds	r3, #1
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097da:	4413      	add	r3, r2
 80097dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e6:	4413      	add	r3, r2
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	f7f6 fe72 	bl	80004d4 <__aeabi_dsub>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f7 f94e 	bl	8000a98 <__aeabi_ddiv>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	e9c7 2306 	strd	r2, r3, [r7, #24]
          if (xtmp == 0.0) {
 8009804:	f04f 0200 	mov.w	r2, #0
 8009808:	f04f 0300 	mov.w	r3, #0
 800980c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009810:	f7f7 fa80 	bl	8000d14 <__aeabi_dcmpeq>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <interp1+0x338>
            Vq[k] = y_data[nd2];
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009820:	441a      	add	r2, r3
 8009822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	440b      	add	r3, r1
 800982a:	6812      	ldr	r2, [r2, #0]
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e060      	b.n	80098f2 <interp1+0x3fa>
          } else if (xtmp == 1.0) {
 8009830:	f04f 0200 	mov.w	r2, #0
 8009834:	4b3f      	ldr	r3, [pc, #252]	; (8009934 <interp1+0x43c>)
 8009836:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800983a:	f7f7 fa6b 	bl	8000d14 <__aeabi_dcmpeq>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <interp1+0x364>
            Vq[k] = y_data[nd2 + 1];
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	3301      	adds	r3, #1
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800984c:	441a      	add	r2, r3
 800984e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	440b      	add	r3, r1
 8009856:	6812      	ldr	r2, [r2, #0]
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e04a      	b.n	80098f2 <interp1+0x3fa>
          } else if (y_data[nd2] == y_data[nd2 + 1]) {
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009862:	4413      	add	r3, r2
 8009864:	ed93 7a00 	vldr	s14, [r3]
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	3301      	adds	r3, #1
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009870:	4413      	add	r3, r2
 8009872:	edd3 7a00 	vldr	s15, [r3]
 8009876:	eeb4 7a67 	vcmp.f32	s14, s15
 800987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987e:	d10a      	bne.n	8009896 <interp1+0x39e>
            Vq[k] = y_data[nd2];
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009886:	441a      	add	r2, r3
 8009888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	6879      	ldr	r1, [r7, #4]
 800988e:	440b      	add	r3, r1
 8009890:	6812      	ldr	r2, [r2, #0]
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	e02d      	b.n	80098f2 <interp1+0x3fa>
          } else {
            Vq[k] = (float)(1.0 - xtmp) * y_data[nd2] +
 8009896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800989a:	f04f 0000 	mov.w	r0, #0
 800989e:	4925      	ldr	r1, [pc, #148]	; (8009934 <interp1+0x43c>)
 80098a0:	f7f6 fe18 	bl	80004d4 <__aeabi_dsub>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4610      	mov	r0, r2
 80098aa:	4619      	mov	r1, r3
 80098ac:	f7f7 fac2 	bl	8000e34 <__aeabi_d2f>
 80098b0:	ee07 0a10 	vmov	s14, r0
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ba:	4413      	add	r3, r2
 80098bc:	edd3 7a00 	vldr	s15, [r3]
 80098c0:	ee27 8a27 	vmul.f32	s16, s14, s15
                    (float)xtmp * y_data[nd2 + 1];
 80098c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80098c8:	f7f7 fab4 	bl	8000e34 <__aeabi_d2f>
 80098cc:	ee07 0a10 	vmov	s14, r0
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	3301      	adds	r3, #1
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098d8:	4413      	add	r3, r2
 80098da:	edd3 7a00 	vldr	s15, [r3]
 80098de:	ee67 7a27 	vmul.f32	s15, s14, s15
            Vq[k] = (float)(1.0 - xtmp) * y_data[nd2] +
 80098e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4413      	add	r3, r2
 80098ea:	ee78 7a27 	vadd.f32	s15, s16, s15
 80098ee:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < 42; k++) {
 80098f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f4:	3301      	adds	r3, #1
 80098f6:	643b      	str	r3, [r7, #64]	; 0x40
 80098f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098fa:	2b29      	cmp	r3, #41	; 0x29
 80098fc:	f77f af10 	ble.w	8009720 <interp1+0x228>
          }
        }
      }
      exitg1 = 1;
 8009900:	2301      	movs	r3, #1
 8009902:	63bb      	str	r3, [r7, #56]	; 0x38
    }
  } while (exitg1 == 0);
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	2b00      	cmp	r3, #0
 8009908:	f43f ae83 	beq.w	8009612 <interp1+0x11a>
  emxFree_real_T(&x);
 800990c:	f107 0310 	add.w	r3, r7, #16
 8009910:	4618      	mov	r0, r3
 8009912:	f7fe fe68 	bl	80085e6 <emxFree_real_T>
  emxFree_real32_T(&y);
 8009916:	f107 0314 	add.w	r3, r7, #20
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fe39 	bl	8008592 <emxFree_real32_T>
}
 8009920:	bf00      	nop
 8009922:	3748      	adds	r7, #72	; 0x48
 8009924:	46bd      	mov	sp, r7
 8009926:	ecbd 8b02 	vpop	{d8}
 800992a:	bdb0      	pop	{r4, r5, r7, pc}
 800992c:	20000000 	.word	0x20000000
 8009930:	080238f0 	.word	0x080238f0
 8009934:	3ff00000 	.word	0x3ff00000

08009938 <mean>:
/*
 * Arguments    : const emxArray_real32_T *x
 * Return Type  : float
 */
float mean(const emxArray_real32_T *x)
{
 8009938:	b480      	push	{r7}
 800993a:	b08d      	sub	sp, #52	; 0x34
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  const float *x_data;
  float b_x;
  int ib;
  int k;
  x_data = x->data;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60fb      	str	r3, [r7, #12]
  if (x->size[1] == 0) {
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	3304      	adds	r3, #4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d103      	bne.n	800995a <mean+0x22>
    b_x = 0.0F;
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009958:	e08b      	b.n	8009a72 <mean+0x13a>
  } else {
    int firstBlockLength;
    int lastBlockLength;
    int nblocks;
    if (x->size[1] <= 1024) {
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	3304      	adds	r3, #4
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009966:	dc08      	bgt.n	800997a <mean+0x42>
      firstBlockLength = x->size[1];
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	623b      	str	r3, [r7, #32]
      lastBlockLength = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	61fb      	str	r3, [r7, #28]
      nblocks = 1;
 8009974:	2301      	movs	r3, #1
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	e01e      	b.n	80099b8 <mean+0x80>
    } else {
      firstBlockLength = 1024;
 800997a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800997e:	623b      	str	r3, [r7, #32]
      nblocks = x->size[1] / 1024;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	3304      	adds	r3, #4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	da01      	bge.n	8009990 <mean+0x58>
 800998c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009990:	129b      	asrs	r3, r3, #10
 8009992:	61bb      	str	r3, [r7, #24]
      lastBlockLength = x->size[1] - (nblocks << 10);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	029b      	lsls	r3, r3, #10
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	61fb      	str	r3, [r7, #28]
      if (lastBlockLength > 0) {
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dd03      	ble.n	80099b2 <mean+0x7a>
        nblocks++;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	3301      	adds	r3, #1
 80099ae:	61bb      	str	r3, [r7, #24]
 80099b0:	e002      	b.n	80099b8 <mean+0x80>
      } else {
        lastBlockLength = 1024;
 80099b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b6:	61fb      	str	r3, [r7, #28]
      }
    }
    b_x = x_data[0];
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (k = 2; k <= firstBlockLength; k++) {
 80099be:	2302      	movs	r3, #2
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
 80099c2:	e011      	b.n	80099e8 <mean+0xb0>
      b_x += x_data[k - 1];
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099ca:	3b01      	subs	r3, #1
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4413      	add	r3, r2
 80099d2:	edd3 7a00 	vldr	s15, [r3]
 80099d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80099da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (k = 2; k <= firstBlockLength; k++) {
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	3301      	adds	r3, #1
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
 80099e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	dde9      	ble.n	80099c4 <mean+0x8c>
    }
    for (ib = 2; ib <= nblocks; ib++) {
 80099f0:	2302      	movs	r3, #2
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f4:	e039      	b.n	8009a6a <mean+0x132>
      float bsum;
      int hi;
      firstBlockLength = (ib - 1) << 10;
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	3b01      	subs	r3, #1
 80099fa:	029b      	lsls	r3, r3, #10
 80099fc:	623b      	str	r3, [r7, #32]
      bsum = x_data[firstBlockLength];
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	4413      	add	r3, r2
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	617b      	str	r3, [r7, #20]
      if (ib == nblocks) {
 8009a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d102      	bne.n	8009a18 <mean+0xe0>
        hi = lastBlockLength;
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	e002      	b.n	8009a1e <mean+0xe6>
      } else {
        hi = 1024;
 8009a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a1c:	613b      	str	r3, [r7, #16]
      }
      for (k = 2; k <= hi; k++) {
 8009a1e:	2302      	movs	r3, #2
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
 8009a22:	e013      	b.n	8009a4c <mean+0x114>
        bsum += x_data[(firstBlockLength + k) - 1];
 8009a24:	6a3a      	ldr	r2, [r7, #32]
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	4413      	add	r3, r2
 8009a2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	4413      	add	r3, r2
 8009a36:	edd3 7a00 	vldr	s15, [r3]
 8009a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8009a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a42:	edc7 7a05 	vstr	s15, [r7, #20]
      for (k = 2; k <= hi; k++) {
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	3301      	adds	r3, #1
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	dde7      	ble.n	8009a24 <mean+0xec>
      }
      b_x += bsum;
 8009a54:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009a58:	edd7 7a05 	vldr	s15, [r7, #20]
 8009a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (ib = 2; ib <= nblocks; ib++) {
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	3301      	adds	r3, #1
 8009a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	ddc1      	ble.n	80099f6 <mean+0xbe>
    }
  }
  return b_x / (float)x->size[1];
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	3304      	adds	r3, #4
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a82:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009a86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009a8a:	eef0 7a66 	vmov.f32	s15, s13
}
 8009a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a92:	3734      	adds	r7, #52	; 0x34
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <waves_memory_pool_init>:


TX_BYTE_POOL* memory_pool;

void waves_memory_pool_init(TX_BYTE_POOL* pool)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	memory_pool = pool;
 8009aa4:	4a04      	ldr	r2, [pc, #16]	; (8009ab8 <waves_memory_pool_init+0x1c>)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6013      	str	r3, [r2, #0]
}
 8009aaa:	bf00      	nop
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	200234fc 	.word	0x200234fc

08009abc <waves_memory_pool_create>:

UINT waves_memory_pool_create(VOID* pool_start, size_t pool_size)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af02      	add	r7, sp, #8
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
	UINT ret = tx_byte_pool_create(memory_pool, "waves mem pool", pool_start, pool_size);
 8009ac6:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <waves_memory_pool_create+0x28>)
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	2334      	movs	r3, #52	; 0x34
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	4905      	ldr	r1, [pc, #20]	; (8009ae8 <waves_memory_pool_create+0x2c>)
 8009ad4:	f014 f972 	bl	801ddbc <_txe_byte_pool_create>
 8009ad8:	60f8      	str	r0, [r7, #12]

	return ret;
 8009ada:	68fb      	ldr	r3, [r7, #12]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	200234fc 	.word	0x200234fc
 8009ae8:	080234fc 	.word	0x080234fc

08009aec <waves_memory_pool_delete>:

UINT waves_memory_pool_delete()
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
	UINT ret = tx_byte_pool_delete(memory_pool);
 8009af2:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <waves_memory_pool_delete+0x1c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f014 fa00 	bl	801defc <_txe_byte_pool_delete>
 8009afc:	6078      	str	r0, [r7, #4]

	return ret;
 8009afe:	687b      	ldr	r3, [r7, #4]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	200234fc 	.word	0x200234fc

08009b0c <malloc_replacement>:
{
	return (float*) calloc_replacement(config->samples_per_window, sizeof(float));
}

void* malloc_replacement(size_t size)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	CHAR *pointer = TX_NULL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60bb      	str	r3, [r7, #8]
	if (size > 0) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00d      	beq.n	8009b3a <malloc_replacement+0x2e>
		UINT ret = tx_byte_allocate(memory_pool, (VOID**) &pointer, (ULONG)size, TX_NO_WAIT);
 8009b1e:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <malloc_replacement+0x38>)
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f107 0108 	add.w	r1, r7, #8
 8009b26:	2300      	movs	r3, #0
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	f014 f8d3 	bl	801dcd4 <_txe_byte_allocate>
 8009b2e:	60f8      	str	r0, [r7, #12]
		if (ret != TX_SUCCESS){
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <malloc_replacement+0x2e>
		  return NULL;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e000      	b.n	8009b3c <malloc_replacement+0x30>
		}
	}
	return (void*)pointer;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200234fc 	.word	0x200234fc

08009b48 <calloc_replacement>:


void* calloc_replacement(size_t num, size_t size)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
	CHAR *pointer = TX_NULL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	60bb      	str	r3, [r7, #8]
	if (size > 0) {
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d019      	beq.n	8009b90 <calloc_replacement+0x48>
		UINT ret = tx_byte_allocate(memory_pool, (VOID**) &pointer, (ULONG)(num * size), TX_NO_WAIT);
 8009b5c:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <calloc_replacement+0x54>)
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	fb03 f202 	mul.w	r2, r3, r2
 8009b68:	f107 0108 	add.w	r1, r7, #8
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f014 f8b1 	bl	801dcd4 <_txe_byte_allocate>
 8009b72:	60f8      	str	r0, [r7, #12]
		if (ret != TX_SUCCESS){
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <calloc_replacement+0x36>
		  return NULL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e009      	b.n	8009b92 <calloc_replacement+0x4a>
		}

		memset(pointer, 0, (num * size));
 8009b7e:	68b8      	ldr	r0, [r7, #8]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	fb02 f303 	mul.w	r3, r2, r3
 8009b88:	461a      	mov	r2, r3
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	f016 fcf1 	bl	8020572 <memset>
	}
	return (void*)pointer;
 8009b90:	68bb      	ldr	r3, [r7, #8]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200234fc 	.word	0x200234fc

08009ba0 <free_replacement>:


void free_replacement(VOID* ptr)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
	tx_byte_release(ptr);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f014 f9e5 	bl	801df78 <_txe_byte_release>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <argInit_1xUnbounded_real32_T>:


emxArray_real32_T *argInit_1xUnbounded_real32_T(microSWIFT_configuration* config)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
	emxArray_real32_T *result;
	result = emxCreate_real32_T(1, config->samples_per_window);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	f7fe fa31 	bl	800802c <emxCreate_real32_T>
 8009bca:	60f8      	str	r0, [r7, #12]
	return result;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <b_nullAssignment>:
 * Arguments    : emxArray_creal32_T *x
 *                const emxArray_boolean_T *idx
 * Return Type  : void
 */
void b_nullAssignment(emxArray_creal32_T *x, const emxArray_boolean_T *idx)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b08a      	sub	sp, #40	; 0x28
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  int k;
  int k0;
  int nxin;
  int nxout;
  const bool *idx_data;
  idx_data = idx->data;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	61fb      	str	r3, [r7, #28]
  x_data = x->data;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	61bb      	str	r3, [r7, #24]
  nxin = x->size[1];
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	617b      	str	r3, [r7, #20]
  k0 = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	623b      	str	r3, [r7, #32]
  i = idx->size[1];
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	613b      	str	r3, [r7, #16]
  for (k = 0; k < i; k++) {
 8009c00:	2300      	movs	r3, #0
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
 8009c04:	e00a      	b.n	8009c1c <b_nullAssignment+0x46>
    k0 += idx_data[k];
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	4413      	add	r3, r2
 8009c14:	623b      	str	r3, [r7, #32]
  for (k = 0; k < i; k++) {
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	3301      	adds	r3, #1
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	dbf0      	blt.n	8009c06 <b_nullAssignment+0x30>
  }
  nxout = x->size[1] - k0;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	60fb      	str	r3, [r7, #12]
  k0 = -1;
 8009c32:	f04f 33ff 	mov.w	r3, #4294967295
 8009c36:	623b      	str	r3, [r7, #32]
  for (k = 0; k < nxin; k++) {
 8009c38:	2300      	movs	r3, #0
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3c:	e022      	b.n	8009c84 <b_nullAssignment+0xae>
    if ((k + 1 > idx->size[1]) || (!idx_data[k])) {
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	3304      	adds	r3, #4
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	da08      	bge.n	8009c5e <b_nullAssignment+0x88>
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	69fa      	ldr	r2, [r7, #28]
 8009c50:	4413      	add	r3, r2
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	f083 0301 	eor.w	r3, r3, #1
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00f      	beq.n	8009c7e <b_nullAssignment+0xa8>
      k0++;
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	3301      	adds	r3, #1
 8009c62:	623b      	str	r3, [r7, #32]
      x_data[k0] = x_data[k];
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	18d1      	adds	r1, r2, r3
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	4413      	add	r3, r2
 8009c74:	460a      	mov	r2, r1
 8009c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c7a:	e883 0003 	stmia.w	r3, {r0, r1}
  for (k = 0; k < nxin; k++) {
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	3301      	adds	r3, #1
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
 8009c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	dbd8      	blt.n	8009c3e <b_nullAssignment+0x68>
    }
  }
  i = x->size[0] * x->size[1];
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6852      	ldr	r2, [r2, #4]
 8009c96:	3204      	adds	r2, #4
 8009c98:	6812      	ldr	r2, [r2, #0]
 8009c9a:	fb02 f303 	mul.w	r3, r2, r3
 8009c9e:	613b      	str	r3, [r7, #16]
  if (nxout < 1) {
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dc05      	bgt.n	8009cb2 <b_nullAssignment+0xdc>
    x->size[1] = 0;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	3304      	adds	r3, #4
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	e004      	b.n	8009cbc <b_nullAssignment+0xe6>
  } else {
    x->size[1] = nxout;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	601a      	str	r2, [r3, #0]
  }
  emxEnsureCapacity_creal32_T(x, i);
 8009cbc:	6939      	ldr	r1, [r7, #16]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7fe fa51 	bl	8008166 <emxEnsureCapacity_creal32_T>
}
 8009cc4:	bf00      	nop
 8009cc6:	3728      	adds	r7, #40	; 0x28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <nullAssignment>:
 * Arguments    : emxArray_creal32_T *x
 *                const emxArray_int32_T *idx
 * Return Type  : void
 */
void nullAssignment(emxArray_creal32_T *x, const emxArray_int32_T *idx)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08c      	sub	sp, #48	; 0x30
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  int k;
  int k0;
  int nxin;
  int nxout;
  bool *b_data;
  idx_data = idx->data;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	623b      	str	r3, [r7, #32]
  x_data = x->data;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	61fb      	str	r3, [r7, #28]
  emxInit_boolean_T(&b);
 8009ce2:	f107 030c 	add.w	r3, r7, #12
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fca7 	bl	800863a <emxInit_boolean_T>
  nxin = x->size[1];
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	61bb      	str	r3, [r7, #24]
  i = b->size[0] * b->size[1];
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	6852      	ldr	r2, [r2, #4]
 8009cfe:	3204      	adds	r2, #4
 8009d00:	6812      	ldr	r2, [r2, #0]
 8009d02:	fb02 f303 	mul.w	r3, r2, r3
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  b->size[0] = 1;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]
  b->size[1] = x->size[1];
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	6852      	ldr	r2, [r2, #4]
 8009d1c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b, i);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe f9ba 	bl	800809c <emxEnsureCapacity_boolean_T>
  b_data = b->data;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	617b      	str	r3, [r7, #20]
  k0 = x->size[1];
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < k0; i++) {
 8009d36:	2300      	movs	r3, #0
 8009d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d3a:	e007      	b.n	8009d4c <nullAssignment+0x80>
    b_data[i] = false;
 8009d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	4413      	add	r3, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < k0; i++) {
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	3301      	adds	r3, #1
 8009d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	429a      	cmp	r2, r3
 8009d52:	dbf3      	blt.n	8009d3c <nullAssignment+0x70>
  }
  i = idx->size[1];
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (k = 0; k < i; k++) {
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d60:	e00c      	b.n	8009d7c <nullAssignment+0xb0>
    b_data[idx_data[k] - 1] = true;
 8009d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	6a3a      	ldr	r2, [r7, #32]
 8009d68:	4413      	add	r3, r2
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	4413      	add	r3, r2
 8009d72:	2201      	movs	r2, #1
 8009d74:	701a      	strb	r2, [r3, #0]
  for (k = 0; k < i; k++) {
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	3301      	adds	r3, #1
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	429a      	cmp	r2, r3
 8009d82:	dbee      	blt.n	8009d62 <nullAssignment+0x96>
  }
  k0 = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
  i = b->size[1];
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (k = 0; k < i; k++) {
 8009d90:	2300      	movs	r3, #0
 8009d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d94:	e00a      	b.n	8009dac <nullAssignment+0xe0>
    k0 += b_data[k];
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	4413      	add	r3, r2
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
  for (k = 0; k < i; k++) {
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	3301      	adds	r3, #1
 8009daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db0:	429a      	cmp	r2, r3
 8009db2:	dbf0      	blt.n	8009d96 <nullAssignment+0xca>
  }
  nxout = x->size[1] - k0;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	3304      	adds	r3, #4
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	613b      	str	r3, [r7, #16]
  k0 = -1;
 8009dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (k = 0; k < nxin; k++) {
 8009dc8:	2300      	movs	r3, #0
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dcc:	e022      	b.n	8009e14 <nullAssignment+0x148>
    if ((k + 1 > b->size[1]) || (!b_data[k])) {
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	da08      	bge.n	8009dee <nullAssignment+0x122>
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4413      	add	r3, r2
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f083 0301 	eor.w	r3, r3, #1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00f      	beq.n	8009e0e <nullAssignment+0x142>
      k0++;
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	3301      	adds	r3, #1
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
      x_data[k0] = x_data[k];
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	00db      	lsls	r3, r3, #3
 8009df8:	69fa      	ldr	r2, [r7, #28]
 8009dfa:	18d1      	adds	r1, r2, r3
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	4413      	add	r3, r2
 8009e04:	460a      	mov	r2, r1
 8009e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e0a:	e883 0003 	stmia.w	r3, {r0, r1}
  for (k = 0; k < nxin; k++) {
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	3301      	adds	r3, #1
 8009e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	dbd8      	blt.n	8009dce <nullAssignment+0x102>
    }
  }
  emxFree_boolean_T(&b);
 8009e1c:	f107 030c 	add.w	r3, r7, #12
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fe fb38 	bl	8008496 <emxFree_boolean_T>
  i = x->size[0] * x->size[1];
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6852      	ldr	r2, [r2, #4]
 8009e30:	3204      	adds	r2, #4
 8009e32:	6812      	ldr	r2, [r2, #0]
 8009e34:	fb02 f303 	mul.w	r3, r2, r3
 8009e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (nxout < 1) {
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dc05      	bgt.n	8009e4c <nullAssignment+0x180>
    x->size[1] = 0;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	3304      	adds	r3, #4
 8009e46:	2200      	movs	r2, #0
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	e004      	b.n	8009e56 <nullAssignment+0x18a>
  } else {
    x->size[1] = nxout;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	3304      	adds	r3, #4
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	601a      	str	r2, [r3, #0]
  }
  emxEnsureCapacity_creal32_T(x, i);
 8009e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7fe f984 	bl	8008166 <emxEnsureCapacity_creal32_T>
}
 8009e5e:	bf00      	nop
 8009e60:	3730      	adds	r7, #48	; 0x30
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <rtIsInfF>:
 * Function: rtIsInfF =================================================
 *  Abstract:
 *  Test if single-precision value is infinite
 */
boolean_T rtIsInfF(real32_T value)
{
 8009e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	ed87 0a01 	vstr	s0, [r7, #4]
  return (isinf((real_T)value) != 0U);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7f6 fc8e 	bl	8000794 <__aeabi_f2d>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009e82:	2301      	movs	r3, #1
 8009e84:	461e      	mov	r6, r3
 8009e86:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <rtIsInfF+0x6c>)
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f7f6 ff72 	bl	8000d78 <__aeabi_dcmpun>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <rtIsInfF+0x4a>
 8009e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9e:	4b0d      	ldr	r3, [pc, #52]	; (8009ed4 <rtIsInfF+0x6c>)
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	f7f6 ff4a 	bl	8000d3c <__aeabi_dcmple>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <rtIsInfF+0x4a>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	461e      	mov	r6, r3
 8009eb2:	b2f3      	uxtb	r3, r6
 8009eb4:	f083 0301 	eor.w	r3, r3, #1
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <rtIsInfF+0x60>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e000      	b.n	8009eca <rtIsInfF+0x62>
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	7fefffff 	.word	0x7fefffff

08009ed8 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 8009ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eea:	f7f6 ff45 	bl	8000d78 <__aeabi_dcmpun>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <rtIsNaN+0x20>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e000      	b.n	8009efa <rtIsNaN+0x22>
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <rtIsNaNF>:
 * Function: rtIsNaNF =================================================
 *  Abstract:
 *  Test if single-precision value is not a number
 */
boolean_T rtIsNaNF(real32_T value)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	ed87 0a01 	vstr	s0, [r7, #4]
  return (isnan((real_T)value) != 0U);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7f6 fc41 	bl	8000794 <__aeabi_f2d>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	f7f6 ff2f 	bl	8000d78 <__aeabi_dcmpun>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <rtIsNaNF+0x22>
 8009f20:	2301      	movs	r3, #1
 8009f22:	e000      	b.n	8009f26 <rtIsNaNF+0x24>
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <getBitfieldFromFloat>:
  out.bitPattern = a;
  return out;
}

uint32_T getBitfieldFromFloat(float a)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	ed87 0a01 	vstr	s0, [r7, #4]
 8009f38:	687b      	ldr	r3, [r7, #4]
  uint32_T bitfield;
  memcpy(&bitfield, &a, sizeof(float));
 8009f3a:	60fb      	str	r3, [r7, #12]
  return bitfield;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <getFloatFromBitfield>:

float getFloatFromBitfield(uint32_T a)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b085      	sub	sp, #20
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
  float value;
  memcpy(&value, &a, sizeof(float));
 8009f54:	60fb      	str	r3, [r7, #12]
  return value;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	ee07 3a90 	vmov	s15, r3
}
 8009f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
	...

08009f6c <halfToFloat>:

/* Convert half to float */
float halfToFloat(real16_T a)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b08a      	sub	sp, #40	; 0x28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	80b8      	strh	r0, [r7, #4]
  uint32_T outSign;
  uint32_T outExpMant;
  float eExp;
  float ans;

  aExpComp = ((~a.bitPattern) & 0x7C00U);
 8009f74:	88bb      	ldrh	r3, [r7, #4]
 8009f76:	43db      	mvns	r3, r3
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8009f7e:	847b      	strh	r3, [r7, #34]	; 0x22
  outSign = ((((uint32_T)a.bitPattern) & 0x8000U) << 16);
 8009f80:	88bb      	ldrh	r3, [r7, #4]
 8009f82:	041b      	lsls	r3, r3, #16
 8009f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f88:	61fb      	str	r3, [r7, #28]
  outExpMant = ((((uint32_T)a.bitPattern) & 0x7FFFU) << 13);
 8009f8a:	88bb      	ldrh	r3, [r7, #4]
 8009f8c:	035a      	lsls	r2, r3, #13
 8009f8e:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <halfToFloat+0x7c>)
 8009f90:	4013      	ands	r3, r2
 8009f92:	61bb      	str	r3, [r7, #24]
  eExp = 5.192296858534828e+33f; /* 2^112 */
 8009f94:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 8009f98:	617b      	str	r3, [r7, #20]

  if (aExpComp != 0U) {
 8009f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00f      	beq.n	8009fc0 <halfToFloat+0x54>
    /* Input is finite */
    uint32_T out = (outSign | outExpMant);
 8009fa0:	69fa      	ldr	r2, [r7, #28]
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
    ans = (getFloatFromBitfield(out) * eExp);
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7ff ffce 	bl	8009f4a <getFloatFromBitfield>
 8009fae:	eeb0 7a40 	vmov.f32	s14, s0
 8009fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8009fbe:	e00a      	b.n	8009fd6 <halfToFloat+0x6a>
  } else {
    uint32_T out = (outSign | outExpMant | 0x7F800000U);
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8009fca:	613b      	str	r3, [r7, #16]
    ans = getFloatFromBitfield(out);
 8009fcc:	6938      	ldr	r0, [r7, #16]
 8009fce:	f7ff ffbc 	bl	8009f4a <getFloatFromBitfield>
 8009fd2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  }

  return ans;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	ee07 3a90 	vmov	s15, r3
}
 8009fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8009fe0:	3728      	adds	r7, #40	; 0x28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0fffe000 	.word	0x0fffe000

08009fec <floatToHalf>:
/* Convert float to half */
real16_T floatToHalf(float a)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	; 0x28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	ed87 0a01 	vstr	s0, [r7, #4]
  real16_T out;

  uint32_T input = getBitfieldFromFloat(a);
 8009ff6:	ed97 0a01 	vldr	s0, [r7, #4]
 8009ffa:	f7ff ff98 	bl	8009f2e <getBitfieldFromFloat>
 8009ffe:	61f8      	str	r0, [r7, #28]
  uint32_T aExponent = (input & 0x7F800000U) >>
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	0ddb      	lsrs	r3, r3, #23
 800a004:	b2db      	uxtb	r3, r3
 800a006:	61bb      	str	r3, [r7, #24]
                       23; /* Move exponent to the unit place so that it is
                              easier to compute other exponent values */
  uint32_T aMantissa = (input & 0x007FFFFFU);
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a00e:	617b      	str	r3, [r7, #20]

  uint16_T outSign = ((input & 0x80000000U) >> 16);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	0c1b      	lsrs	r3, r3, #16
 800a014:	b29b      	uxth	r3, r3
 800a016:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a01a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a01e:	827b      	strh	r3, [r7, #18]
  uint16_T outExponent;
  uint16_T outMantissa;

  if (aExponent == 0x7F800000U >> 23) { /* Inf or NaN input */
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	2bff      	cmp	r3, #255	; 0xff
 800a024:	d10b      	bne.n	800a03e <floatToHalf+0x52>
    outExponent = 0x7C00U;
 800a026:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800a02a:	84fb      	strh	r3, [r7, #38]	; 0x26
    outMantissa = (aMantissa == 0) ? 0 : 0x0200U;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <floatToHalf+0x4a>
 800a032:	2300      	movs	r3, #0
 800a034:	e001      	b.n	800a03a <floatToHalf+0x4e>
 800a036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a03a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a03c:	e074      	b.n	800a128 <floatToHalf+0x13c>
  } else if (aExponent < 102U) { /* Smaller that 1/2 of the smallest denormal
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b65      	cmp	r3, #101	; 0x65
 800a042:	d804      	bhi.n	800a04e <floatToHalf+0x62>
                                    number in half precision */
    outExponent = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	84fb      	strh	r3, [r7, #38]	; 0x26
    outMantissa = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a04c:	e06c      	b.n	800a128 <floatToHalf+0x13c>
  } else if (aExponent > 142U) { /* Largest exponent in half precision is
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	2b8e      	cmp	r3, #142	; 0x8e
 800a052:	d905      	bls.n	800a060 <floatToHalf+0x74>
                                    2^(15). (142 = 15 + 127) */
    outExponent = 0x7C00U;
 800a054:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800a058:	84fb      	strh	r3, [r7, #38]	; 0x26
    outMantissa = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a05e:	e063      	b.n	800a128 <floatToHalf+0x13c>
  } else {
    /* Get sticky and round bit */
    boolean_T sticky;
    boolean_T round;

    if (aExponent < 113U) { /* Answer is denormal */
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2b70      	cmp	r3, #112	; 0x70
 800a064:	d829      	bhi.n	800a0ba <floatToHalf+0xce>
      uint32_T shift_length;
      aMantissa |= 0x00800000U; /* Add hidden bit */
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a06c:	617b      	str	r3, [r7, #20]

      shift_length = 113U - aExponent;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800a074:	60fb      	str	r3, [r7, #12]
      sticky = ((aMantissa << (20 - shift_length)) !=
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f1c3 0314 	rsb	r3, r3, #20
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	fa02 f303 	lsl.w	r3, r2, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	bf14      	ite	ne
 800a086:	2301      	movne	r3, #1
 800a088:	2300      	moveq	r3, #0
 800a08a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                0); /* 32 bit - (12 + shift_length) */
      round = ((aMantissa >> (12 + shift_length) & 0x00000001U) != 0);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	330c      	adds	r3, #12
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	fa22 f303 	lsr.w	r3, r2, r3
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bf14      	ite	ne
 800a0a0:	2301      	movne	r3, #1
 800a0a2:	2300      	moveq	r3, #0
 800a0a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

      outExponent = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      outMantissa = (uint16_T)((aMantissa >> (13 + shift_length)));
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	330d      	adds	r3, #13
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0b8:	e01a      	b.n	800a0f0 <floatToHalf+0x104>
    } else {
      sticky = ((aMantissa & 0x00000FFFU) != 0);
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bf14      	ite	ne
 800a0c4:	2301      	movne	r3, #1
 800a0c6:	2300      	moveq	r3, #0
 800a0c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      round = ((aMantissa & 0x00001000U) != 0);
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bf14      	ite	ne
 800a0d6:	2301      	movne	r3, #1
 800a0d8:	2300      	moveq	r3, #0
 800a0da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

      outExponent = (uint16_T)(aExponent - 112);
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3b70      	subs	r3, #112	; 0x70
 800a0e4:	84fb      	strh	r3, [r7, #38]	; 0x26
      outMantissa = (uint16_T)(aMantissa >>= 13);
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	0b5b      	lsrs	r3, r3, #13
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Perform rounding to nearest even */
    if (round && (sticky || ((outMantissa & 0x0001U) != 0))) {
 800a0f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <floatToHalf+0x124>
 800a0f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <floatToHalf+0x11e>
 800a100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <floatToHalf+0x124>
      outMantissa++;
 800a10a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a10c:	3301      	adds	r3, #1
 800a10e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    if (outMantissa > 0x03FFU) { /* Rounding cause overflow */
 800a110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a116:	d304      	bcc.n	800a122 <floatToHalf+0x136>
      outExponent++;
 800a118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a11a:	3301      	adds	r3, #1
 800a11c:	84fb      	strh	r3, [r7, #38]	; 0x26
      outMantissa = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    outExponent <<= 10;
 800a122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a124:	029b      	lsls	r3, r3, #10
 800a126:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  out.bitPattern = (outSign | outExponent | outMantissa);
 800a128:	8a7a      	ldrh	r2, [r7, #18]
 800a12a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a12c:	4313      	orrs	r3, r2
 800a12e:	b29a      	uxth	r2, r3
 800a130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a132:	4313      	orrs	r3, r2
 800a134:	b29b      	uxth	r3, r3
 800a136:	813b      	strh	r3, [r7, #8]
  return out;
 800a138:	893b      	ldrh	r3, [r7, #8]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3728      	adds	r7, #40	; 0x28
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <doubleToHalf>:
}

/* Convert double to half */

real16_T doubleToHalf(double a)
{
 800a144:	b480      	push	{r7}
 800a146:	b08f      	sub	sp, #60	; 0x3c
 800a148:	af00      	add	r7, sp, #0
 800a14a:	ed87 0b00 	vstr	d0, [r7]
  uint32_T aMantissaSecondChunk;
  uint16_T aExponent;
  uint16_T outSign;
  uint16_T outExponent;
  uint16_T outMantissa;
  real64_T one = 1.0;
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	4b73      	ldr	r3, [pc, #460]	; (800a320 <doubleToHalf+0x1dc>)
 800a154:	e9c7 2302 	strd	r2, r3, [r7, #8]
  uint32_T endianAdjustment = *((uint32_T *)&one);
 800a158:	f107 0308 	add.w	r3, r7, #8
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24
  aBitsPointer = (uint32_T *)&a;
 800a160:	463b      	mov	r3, r7
 800a162:	623b      	str	r3, [r7, #32]
  if (endianAdjustment) {
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	2b00      	cmp	r3, #0
 800a168:	d008      	beq.n	800a17c <doubleToHalf+0x38>
    mostSignificantChunk = *(aBitsPointer++);
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	1d1a      	adds	r2, r3, #4
 800a16e:	623a      	str	r2, [r7, #32]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	637b      	str	r3, [r7, #52]	; 0x34
    aMantissaSecondChunk = *aBitsPointer;
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	633b      	str	r3, [r7, #48]	; 0x30
 800a17a:	e007      	b.n	800a18c <doubleToHalf+0x48>
  } else {
    aMantissaSecondChunk = *(aBitsPointer++);
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	1d1a      	adds	r2, r3, #4
 800a180:	623a      	str	r2, [r7, #32]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	633b      	str	r3, [r7, #48]	; 0x30
    mostSignificantChunk = *aBitsPointer;
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Move exponent to the unit place so that it is easier to compute other
   * exponent values */
  aExponent = (uint16_T)((mostSignificantChunk & 0x7FF00000UL) >> (52 - 32));
 800a18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18e:	0d1b      	lsrs	r3, r3, #20
 800a190:	b29b      	uxth	r3, r3
 800a192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a196:	83fb      	strh	r3, [r7, #30]
  aMantissaFirstChunk = (mostSignificantChunk & 0x000FFFFFUL);
 800a198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a19e:	61bb      	str	r3, [r7, #24]
  outSign = (uint16_T)((mostSignificantChunk & 0x80000000UL) >> (48 - 32));
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	0c1b      	lsrs	r3, r3, #16
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a1aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1ae:	82fb      	strh	r3, [r7, #22]
  if (aExponent ==
 800a1b0:	8bfb      	ldrh	r3, [r7, #30]
 800a1b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d10e      	bne.n	800a1d8 <doubleToHalf+0x94>
      (uint16_T)(0x7FF00000UL >> (52 - 32))) { /* Inf or NaN input */
    outExponent = 0x7C00U;
 800a1ba:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800a1be:	85fb      	strh	r3, [r7, #46]	; 0x2e
    outMantissa =
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d104      	bne.n	800a1d0 <doubleToHalf+0x8c>
        (aMantissaFirstChunk == 0 && aMantissaSecondChunk == 0) ? 0 : 0x0200U;
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d101      	bne.n	800a1d0 <doubleToHalf+0x8c>
    outMantissa =
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	e001      	b.n	800a1d4 <doubleToHalf+0x90>
 800a1d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a1d6:	e093      	b.n	800a300 <doubleToHalf+0x1bc>
  } else if (aExponent < 998U) { /* Smaller than 1/2 of the smallest denormal
 800a1d8:	8bfb      	ldrh	r3, [r7, #30]
 800a1da:	f240 32e5 	movw	r2, #997	; 0x3e5
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d804      	bhi.n	800a1ec <doubleToHalf+0xa8>
                                    number in half precision */
    outExponent = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    outMantissa = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a1ea:	e089      	b.n	800a300 <doubleToHalf+0x1bc>
  } else if (aExponent > 1038U) { /* Largest exponent in half precision is
 800a1ec:	8bfb      	ldrh	r3, [r7, #30]
 800a1ee:	f240 420e 	movw	r2, #1038	; 0x40e
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d905      	bls.n	800a202 <doubleToHalf+0xbe>
                                     2^(15). (1038 = 15 + 1023) */
    outExponent = 0x7C00U;
 800a1f6:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800a1fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    outMantissa = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a200:	e07e      	b.n	800a300 <doubleToHalf+0x1bc>
  } else {
    /* Get sticky and round bit */
    boolean_T sticky;
    boolean_T round;

    if (aExponent < 1009U) { /* Answer is denormal */
 800a202:	8bfb      	ldrh	r3, [r7, #30]
 800a204:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 800a208:	d839      	bhi.n	800a27e <doubleToHalf+0x13a>
      uint16_T shift_length;
      aMantissaFirstChunk |= 0x00100000UL; /* Add hidden bit */
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a210:	61bb      	str	r3, [r7, #24]
      shift_length = 1009U - aExponent;
 800a212:	8bfb      	ldrh	r3, [r7, #30]
 800a214:	f5c3 737c 	rsb	r3, r3, #1008	; 0x3f0
 800a218:	3301      	adds	r3, #1
 800a21a:	82bb      	strh	r3, [r7, #20]
      sticky = ((aMantissaFirstChunk << (23 - shift_length)) != 0) &&
 800a21c:	8abb      	ldrh	r3, [r7, #20]
 800a21e:	f1c3 0317 	rsb	r3, r3, #23
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	fa02 f303 	lsl.w	r3, r2, r3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d009      	beq.n	800a240 <doubleToHalf+0xfc>
               ((aMantissaSecondChunk >> (23 - shift_length)) != 0);
 800a22c:	8abb      	ldrh	r3, [r7, #20]
 800a22e:	f1c3 0317 	rsb	r3, r3, #23
 800a232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a234:	fa22 f303 	lsr.w	r3, r2, r3
      sticky = ((aMantissaFirstChunk << (23 - shift_length)) != 0) &&
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <doubleToHalf+0xfc>
 800a23c:	2301      	movs	r3, #1
 800a23e:	e000      	b.n	800a242 <doubleToHalf+0xfe>
 800a240:	2300      	movs	r3, #0
 800a242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a246:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      round = ((aMantissaFirstChunk >> (41 - 32 + shift_length) &
 800a252:	8abb      	ldrh	r3, [r7, #20]
 800a254:	3309      	adds	r3, #9
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	fa22 f303 	lsr.w	r3, r2, r3
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	bf14      	ite	ne
 800a264:	2301      	movne	r3, #1
 800a266:	2300      	moveq	r3, #0
 800a268:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                0x00000001UL) != 0);
      outExponent = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      outMantissa =
          (uint16_T)((aMantissaFirstChunk >> (42 - 32 + shift_length)));
 800a270:	8abb      	ldrh	r3, [r7, #20]
 800a272:	330a      	adds	r3, #10
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	fa22 f303 	lsr.w	r3, r2, r3
      outMantissa =
 800a27a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a27c:	e024      	b.n	800a2c8 <doubleToHalf+0x184>
    } else {
      sticky = ((aMantissaFirstChunk & 0x000001FFUL) != 0 ||
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <doubleToHalf+0x14a>
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <doubleToHalf+0x14e>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <doubleToHalf+0x150>
 800a292:	2300      	movs	r3, #0
 800a294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                aMantissaSecondChunk != 0);
      round = ((aMantissaFirstChunk & 0x00000200UL) != 0);
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	bf14      	ite	ne
 800a2ae:	2301      	movne	r3, #1
 800a2b0:	2300      	moveq	r3, #0
 800a2b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      outExponent = (uint16_T)(aExponent - 1008);
 800a2b6:	8bfb      	ldrh	r3, [r7, #30]
 800a2b8:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800a2bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      outMantissa = (uint16_T)(aMantissaFirstChunk >>= (42 - 32));
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	0a9b      	lsrs	r3, r3, #10
 800a2c2:	61bb      	str	r3, [r7, #24]
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    /* Perform rounding to nearest even */
    if (round && (sticky || ((outMantissa & 0x0001U) != 0))) {
 800a2c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00b      	beq.n	800a2e8 <doubleToHalf+0x1a4>
 800a2d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <doubleToHalf+0x19e>
 800a2d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <doubleToHalf+0x1a4>
      outMantissa++;
 800a2e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    if (outMantissa > 0x03FFU) { /* Rounding cause overflow */
 800a2e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2ee:	d304      	bcc.n	800a2fa <doubleToHalf+0x1b6>
      outExponent++;
 800a2f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      outMantissa = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    outExponent <<= 10;
 800a2fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2fc:	029b      	lsls	r3, r3, #10
 800a2fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  out.bitPattern = (outSign | outExponent | outMantissa);
 800a300:	8afa      	ldrh	r2, [r7, #22]
 800a302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a304:	4313      	orrs	r3, r2
 800a306:	b29a      	uxth	r2, r3
 800a308:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a30a:	4313      	orrs	r3, r2
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	823b      	strh	r3, [r7, #16]
  return out;
 800a310:	8a3b      	ldrh	r3, [r7, #16]
}
 800a312:	4618      	mov	r0, r3
 800a314:	373c      	adds	r7, #60	; 0x3c
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	3ff00000 	.word	0x3ff00000

0800a324 <var>:
/*
 * Arguments    : const emxArray_real32_T *x
 * Return Type  : float
 */
float var(const emxArray_real32_T *x)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08e      	sub	sp, #56	; 0x38
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  const float *x_data;
  float y;
  int ib;
  int k;
  int n;
  x_data = x->data;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	613b      	str	r3, [r7, #16]
  n = x->size[1];
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	60fb      	str	r3, [r7, #12]
  if (x->size[1] == 0) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	3304      	adds	r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d103      	bne.n	800a34e <var+0x2a>
    y = rtNaNF;
 800a346:	4b80      	ldr	r3, [pc, #512]	; (800a548 <var+0x224>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	637b      	str	r3, [r7, #52]	; 0x34
 800a34c:	e0f3      	b.n	800a536 <var+0x212>
  } else if (x->size[1] == 1) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	3304      	adds	r3, #4
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d121      	bne.n	800a39e <var+0x7a>
    if ((!rtIsInfF(x_data[0])) && (!rtIsNaNF(x_data[0]))) {
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	edd3 7a00 	vldr	s15, [r3]
 800a360:	eeb0 0a67 	vmov.f32	s0, s15
 800a364:	f7ff fd80 	bl	8009e68 <rtIsInfF>
 800a368:	4603      	mov	r3, r0
 800a36a:	f083 0301 	eor.w	r3, r3, #1
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	d010      	beq.n	800a396 <var+0x72>
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	edd3 7a00 	vldr	s15, [r3]
 800a37a:	eeb0 0a67 	vmov.f32	s0, s15
 800a37e:	f7ff fdc0 	bl	8009f02 <rtIsNaNF>
 800a382:	4603      	mov	r3, r0
 800a384:	f083 0301 	eor.w	r3, r3, #1
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <var+0x72>
      y = 0.0F;
 800a38e:	f04f 0300 	mov.w	r3, #0
 800a392:	637b      	str	r3, [r7, #52]	; 0x34
 800a394:	e0cf      	b.n	800a536 <var+0x212>
    } else {
      y = rtNaNF;
 800a396:	4b6c      	ldr	r3, [pc, #432]	; (800a548 <var+0x224>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	637b      	str	r3, [r7, #52]	; 0x34
 800a39c:	e0cb      	b.n	800a536 <var+0x212>
    float bsum;
    float xbar;
    int firstBlockLength;
    int lastBlockLength;
    int nblocks;
    if (x->size[1] <= 1024) {
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3aa:	dc08      	bgt.n	800a3be <var+0x9a>
      firstBlockLength = x->size[1];
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	623b      	str	r3, [r7, #32]
      lastBlockLength = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	61fb      	str	r3, [r7, #28]
      nblocks = 1;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	61bb      	str	r3, [r7, #24]
 800a3bc:	e01e      	b.n	800a3fc <var+0xd8>
    } else {
      firstBlockLength = 1024;
 800a3be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c2:	623b      	str	r3, [r7, #32]
      nblocks = x->size[1] / 1024;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	da01      	bge.n	800a3d4 <var+0xb0>
 800a3d0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a3d4:	129b      	asrs	r3, r3, #10
 800a3d6:	61bb      	str	r3, [r7, #24]
      lastBlockLength = x->size[1] - (nblocks << 10);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	029b      	lsls	r3, r3, #10
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	61fb      	str	r3, [r7, #28]
      if (lastBlockLength > 0) {
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	dd03      	ble.n	800a3f6 <var+0xd2>
        nblocks++;
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	61bb      	str	r3, [r7, #24]
 800a3f4:	e002      	b.n	800a3fc <var+0xd8>
      } else {
        lastBlockLength = 1024;
 800a3f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3fa:	61fb      	str	r3, [r7, #28]
      }
    }
    xbar = x_data[0];
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
    for (k = 2; k <= firstBlockLength; k++) {
 800a402:	2302      	movs	r3, #2
 800a404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a406:	e011      	b.n	800a42c <var+0x108>
      xbar += x_data[k - 1];
 800a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a40e:	3b01      	subs	r3, #1
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	4413      	add	r3, r2
 800a416:	edd3 7a00 	vldr	s15, [r3]
 800a41a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a41e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a422:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (k = 2; k <= firstBlockLength; k++) {
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	3301      	adds	r3, #1
 800a42a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a42c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	429a      	cmp	r2, r3
 800a432:	dde9      	ble.n	800a408 <var+0xe4>
    }
    for (ib = 2; ib <= nblocks; ib++) {
 800a434:	2302      	movs	r3, #2
 800a436:	633b      	str	r3, [r7, #48]	; 0x30
 800a438:	e039      	b.n	800a4ae <var+0x18a>
      int hi;
      firstBlockLength = (ib - 1) << 10;
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	3b01      	subs	r3, #1
 800a43e:	029b      	lsls	r3, r3, #10
 800a440:	623b      	str	r3, [r7, #32]
      bsum = x_data[firstBlockLength];
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	4413      	add	r3, r2
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28
      if (ib == nblocks) {
 800a44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	429a      	cmp	r2, r3
 800a454:	d102      	bne.n	800a45c <var+0x138>
        hi = lastBlockLength;
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	617b      	str	r3, [r7, #20]
 800a45a:	e002      	b.n	800a462 <var+0x13e>
      } else {
        hi = 1024;
 800a45c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a460:	617b      	str	r3, [r7, #20]
      }
      for (k = 2; k <= hi; k++) {
 800a462:	2302      	movs	r3, #2
 800a464:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a466:	e013      	b.n	800a490 <var+0x16c>
        bsum += x_data[(firstBlockLength + k) - 1];
 800a468:	6a3a      	ldr	r2, [r7, #32]
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	4413      	add	r3, r2
 800a46e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a472:	3b01      	subs	r3, #1
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	4413      	add	r3, r2
 800a47a:	edd3 7a00 	vldr	s15, [r3]
 800a47e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a482:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a486:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      for (k = 2; k <= hi; k++) {
 800a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48c:	3301      	adds	r3, #1
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	429a      	cmp	r2, r3
 800a496:	dde7      	ble.n	800a468 <var+0x144>
      }
      xbar += bsum;
 800a498:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a49c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (ib = 2; ib <= nblocks; ib++) {
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	633b      	str	r3, [r7, #48]	; 0x30
 800a4ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	ddc1      	ble.n	800a43a <var+0x116>
    }
    xbar /= (float)x->size[1];
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a4c6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a4ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    y = 0.0F;
 800a4d2:	f04f 0300 	mov.w	r3, #0
 800a4d6:	637b      	str	r3, [r7, #52]	; 0x34
    for (k = 0; k < n; k++) {
 800a4d8:	2300      	movs	r3, #0
 800a4da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4dc:	e018      	b.n	800a510 <var+0x1ec>
      bsum = x_data[k] - xbar;
 800a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	ed93 7a00 	vldr	s14, [r3]
 800a4ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a4ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4f2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      y += bsum * bsum;
 800a4f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a4fe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a506:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    for (k = 0; k < n; k++) {
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	3301      	adds	r3, #1
 800a50e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	429a      	cmp	r2, r3
 800a516:	dbe2      	blt.n	800a4de <var+0x1ba>
    }
    y /= (float)(x->size[1] - 1);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	3304      	adds	r3, #4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3b01      	subs	r3, #1
 800a522:	ee07 3a90 	vmov	s15, r3
 800a526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a52a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a52e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a532:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  }
  return y;
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	ee07 3a90 	vmov	s15, r3
}
 800a53c:	eeb0 0a67 	vmov.f32	s0, s15
 800a540:	3738      	adds	r7, #56	; 0x38
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20000000 	.word	0x20000000

0800a54c <LL_DMA_ResetChannel>:
  *         @arg @ref LL_DMA_CHANNEL_14
  *         @arg @ref LL_DMA_CHANNEL_15
  * @retval None.
  */
__STATIC_INLINE void LL_DMA_ResetChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_RESET);
 800a55a:	4a0b      	ldr	r2, [pc, #44]	; (800a588 <LL_DMA_ResetChannel+0x3c>)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	4413      	add	r3, r2
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	4907      	ldr	r1, [pc, #28]	; (800a588 <LL_DMA_ResetChannel+0x3c>)
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	440a      	add	r2, r1
 800a574:	f043 0302 	orr.w	r3, r3, #2
 800a578:	6153      	str	r3, [r2, #20]
}
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	08023a40 	.word	0x08023a40

0800a58c <ct_init>:
 * @return void
 */
void ct_init(CT* self, microSWIFT_configuration* global_config, UART_HandleTypeDef* ct_uart_handle,
		DMA_HandleTypeDef* ct_dma_handle, TX_EVENT_FLAGS_GROUP* control_flags,
		TX_EVENT_FLAGS_GROUP* error_flags, char* data_buf, ct_samples* samples_buf)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
//	for (int i = 0; i < global_config->total_ct_samples; i++) {
//		self->samples_buf[i].conductivity = 0.0;
//		self->samples_buf[i].temp = 0.0;
//	}
	reset_ct_struct_fields(self);
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 fad0 	bl	800ab40 <reset_ct_struct_fields>
	self->global_config = global_config;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	601a      	str	r2, [r3, #0]
	self->ct_uart_handle = ct_uart_handle;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	605a      	str	r2, [r3, #4]
	self->ct_dma_handle = ct_dma_handle;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	609a      	str	r2, [r3, #8]
	self->control_flags = control_flags;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	60da      	str	r2, [r3, #12]
	self->error_flags = error_flags;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	611a      	str	r2, [r3, #16]
	self->data_buf = data_buf;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6a3a      	ldr	r2, [r7, #32]
 800a5c2:	615a      	str	r2, [r3, #20]
	self->samples_buf = samples_buf;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5c8:	619a      	str	r2, [r3, #24]
	self->parse_sample = ct_parse_sample;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	4a11      	ldr	r2, [pc, #68]	; (800a614 <ct_init+0x88>)
 800a5ce:	635a      	str	r2, [r3, #52]	; 0x34
	self->get_averages = ct_get_averages;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4a11      	ldr	r2, [pc, #68]	; (800a618 <ct_init+0x8c>)
 800a5d4:	639a      	str	r2, [r3, #56]	; 0x38
	self->on_off = ct_on_off;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4a10      	ldr	r2, [pc, #64]	; (800a61c <ct_init+0x90>)
 800a5da:	63da      	str	r2, [r3, #60]	; 0x3c
	self->self_test = ct_self_test;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4a10      	ldr	r2, [pc, #64]	; (800a620 <ct_init+0x94>)
 800a5e0:	641a      	str	r2, [r3, #64]	; 0x40
	self->reset_ct_uart = reset_ct_uart;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	4a0f      	ldr	r2, [pc, #60]	; (800a624 <ct_init+0x98>)
 800a5e6:	645a      	str	r2, [r3, #68]	; 0x44
	// zero out the buffer
	memset(&(self->data_buf[0]), 0, CT_DATA_ARRAY_SIZE);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	f240 1223 	movw	r2, #291	; 0x123
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f015 ffbd 	bl	8020572 <memset>
	memset(&(self->samples_buf[0]), 0, self->global_config->total_ct_samples * sizeof(ct_samples));
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6998      	ldr	r0, [r3, #24]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	011b      	lsls	r3, r3, #4
 800a604:	461a      	mov	r2, r3
 800a606:	2100      	movs	r1, #0
 800a608:	f015 ffb3 	bl	8020572 <memset>
}
 800a60c:	bf00      	nop
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	0800a629 	.word	0x0800a629
 800a618:	0800a7b1 	.word	0x0800a7b1
 800a61c:	0800a881 	.word	0x0800a881
 800a620:	0800a8a5 	.word	0x0800a8a5
 800a624:	0800aa51 	.word	0x0800aa51

0800a628 <ct_parse_sample>:
 *
 *
 * @return ct_error_code_t
 */
ct_error_code_t ct_parse_sample(CT* self)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b090      	sub	sp, #64	; 0x40
 800a62c:	af02      	add	r7, sp, #8
 800a62e:	6078      	str	r0, [r7, #4]
	ULONG actual_flags;
	ct_error_code_t return_code = CT_SUCCESS;
 800a630:	2300      	movs	r3, #0
 800a632:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int fail_counter = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	633b      	str	r3, [r7, #48]	; 0x30
	double temperature, salinity;
	char* index;
	// Sensor sends a message every 2 seconds @ 9600 baud, takes 0.245 seconds to get it out
	int required_ticks_to_get_message = TX_TIMER_TICKS_PER_SECOND * 3;
 800a63a:	231e      	movs	r3, #30
 800a63c:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Samples array overflow safety check
	if (self->total_samples >= self->global_config->total_ct_samples) {
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	429a      	cmp	r2, r3
 800a64a:	f0c0 809f 	bcc.w	800a78c <ct_parse_sample+0x164>
		return_code = CT_DONE_SAMPLING;
 800a64e:	23fb      	movs	r3, #251	; 0xfb
 800a650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return return_code;
 800a654:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a658:	e0a1      	b.n	800a79e <ct_parse_sample+0x176>
	}

	while(++fail_counter < MAX_RETRIES) {
		reset_ct_uart(self, CT_DEFAULT_BAUD_RATE);
 800a65a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f9f6 	bl	800aa50 <reset_ct_uart>
		HAL_Delay(1);
 800a664:	2001      	movs	r0, #1
 800a666:	f003 ffcf 	bl	800e608 <HAL_Delay>
		HAL_UART_Receive_DMA(self->ct_uart_handle,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6858      	ldr	r0, [r3, #4]
			(uint8_t*)&(self->data_buf[0]), CT_DATA_ARRAY_SIZE);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	695b      	ldr	r3, [r3, #20]
		HAL_UART_Receive_DMA(self->ct_uart_handle,
 800a672:	f240 1223 	movw	r2, #291	; 0x123
 800a676:	4619      	mov	r1, r3
 800a678:	f00f fd9a 	bl	801a1b0 <HAL_UART_Receive_DMA>
		// Disable half transfer interrupt
		__HAL_DMA_DISABLE_IT(self->ct_dma_handle, DMA_IT_HT);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	695a      	ldr	r2, [r3, #20]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a68e:	615a      	str	r2, [r3, #20]
		// See if we got the message, otherwise retry
		if (tx_event_flags_get(self->control_flags, CT_MSG_RECVD, TX_OR_CLEAR,
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68d8      	ldr	r0, [r3, #12]
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	f107 020c 	add.w	r2, r7, #12
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	4613      	mov	r3, r2
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6a4:	f013 fd36 	bl	801e114 <_txe_event_flags_get>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d003      	beq.n	800a6b6 <ct_parse_sample+0x8e>
				&actual_flags, required_ticks_to_get_message) != TX_SUCCESS)
		{
			// If we didn't get a sample inside of required_ticks_to_get_message
			// time, then something is wrong with the sensor. We'll still try again.
			return_code = CT_UART_ERROR;
 800a6ae:	23ff      	movs	r3, #255	; 0xff
 800a6b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			continue;
 800a6b4:	e06a      	b.n	800a78c <ct_parse_sample+0x164>
		}

		index = strstr(self->data_buf, temp_units);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	4a3b      	ldr	r2, [pc, #236]	; (800a7a8 <ct_parse_sample+0x180>)
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f015 ff6d 	bl	80205a0 <strstr>
 800a6c6:	62b8      	str	r0, [r7, #40]	; 0x28
		// Make the message was received in the right alignment
		if (index == NULL || index > &(self->data_buf[0]) + TEMP_MEASUREMENT_START_INDEX){
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <ct_parse_sample+0xb2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	3346      	adds	r3, #70	; 0x46
 800a6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d906      	bls.n	800a6e8 <ct_parse_sample+0xc0>
			// If this evaluates to true, we're out of sync. Insert a short delay
			return_code = CT_PARSING_ERROR;
 800a6da:	23fe      	movs	r3, #254	; 0xfe
 800a6dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			HAL_Delay(250);
 800a6e0:	20fa      	movs	r0, #250	; 0xfa
 800a6e2:	f003 ff91 	bl	800e608 <HAL_Delay>
			continue;
 800a6e6:	e051      	b.n	800a78c <ct_parse_sample+0x164>
		}
		index += TEMP_OFFSET_FROM_UNITS;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	3306      	adds	r3, #6
 800a6ec:	62bb      	str	r3, [r7, #40]	; 0x28
		temperature = atof(index);
 800a6ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f0:	f015 fee6 	bl	80204c0 <atof>
 800a6f4:	ed87 0b08 	vstr	d0, [r7, #32]
		// error return of atof() is 0.0
		if (temperature == 0.0){
 800a6f8:	f04f 0200 	mov.w	r2, #0
 800a6fc:	f04f 0300 	mov.w	r3, #0
 800a700:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a704:	f7f6 fb06 	bl	8000d14 <__aeabi_dcmpeq>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d000      	beq.n	800a710 <ct_parse_sample+0xe8>
			continue;
 800a70e:	e03d      	b.n	800a78c <ct_parse_sample+0x164>
		}

		char* index = strstr(self->data_buf, salinity_units);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	4a25      	ldr	r2, [pc, #148]	; (800a7ac <ct_parse_sample+0x184>)
 800a716:	6812      	ldr	r2, [r2, #0]
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f015 ff40 	bl	80205a0 <strstr>
 800a720:	61f8      	str	r0, [r7, #28]
		if (index == NULL){
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d100      	bne.n	800a72a <ct_parse_sample+0x102>
			continue;
 800a728:	e030      	b.n	800a78c <ct_parse_sample+0x164>
		}

		index += SALINITY_OFFSET_FROM_UNITS;
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	3304      	adds	r3, #4
 800a72e:	61fb      	str	r3, [r7, #28]
		salinity = atof(index);
 800a730:	69f8      	ldr	r0, [r7, #28]
 800a732:	f015 fec5 	bl	80204c0 <atof>
 800a736:	ed87 0b04 	vstr	d0, [r7, #16]

		if (salinity == 0.0){
 800a73a:	f04f 0200 	mov.w	r2, #0
 800a73e:	f04f 0300 	mov.w	r3, #0
 800a742:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a746:	f7f6 fae5 	bl	8000d14 <__aeabi_dcmpeq>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d000      	beq.n	800a752 <ct_parse_sample+0x12a>
			continue;
 800a750:	e01c      	b.n	800a78c <ct_parse_sample+0x164>
		}

		self->samples_buf[self->total_samples].salinity = salinity;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75a:	011b      	lsls	r3, r3, #4
 800a75c:	18d1      	adds	r1, r2, r3
 800a75e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a762:	e9c1 2300 	strd	r2, r3, [r1]
		self->samples_buf[self->total_samples].temp = temperature;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	699a      	ldr	r2, [r3, #24]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	18d1      	adds	r1, r2, r3
 800a772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a776:	e9c1 2302 	strd	r2, r3, [r1, #8]
		self->total_samples++;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	631a      	str	r2, [r3, #48]	; 0x30

		return_code = CT_SUCCESS;
 800a784:	2300      	movs	r3, #0
 800a786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800a78a:	e006      	b.n	800a79a <ct_parse_sample+0x172>
	while(++fail_counter < MAX_RETRIES) {
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	3301      	adds	r3, #1
 800a790:	633b      	str	r3, [r7, #48]	; 0x30
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	2b09      	cmp	r3, #9
 800a796:	f77f af60 	ble.w	800a65a <ct_parse_sample+0x32>
	}

	return return_code;
 800a79a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3738      	adds	r7, #56	; 0x38
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000004 	.word	0x20000004
 800a7ac:	20000008 	.word	0x20000008

0800a7b0 <ct_get_averages>:
 *
 * @return ct_samples struct containing the averages conductivity
 *         and temperature values
 */
ct_error_code_t ct_get_averages(CT* self)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b088      	sub	sp, #32
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	double temp_sum = 0.0;
 800a7b8:	f04f 0200 	mov.w	r2, #0
 800a7bc:	f04f 0300 	mov.w	r3, #0
 800a7c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double salinity_sum = 0.0;
 800a7c4:	f04f 0200 	mov.w	r2, #0
 800a7c8:	f04f 0300 	mov.w	r3, #0
 800a7cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (self->total_samples < self->global_config->total_ct_samples) {
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d202      	bcs.n	800a7e4 <ct_get_averages+0x34>
		return CT_NOT_ENOUGH_SAMPLES;
 800a7de:	f06f 0303 	mvn.w	r3, #3
 800a7e2:	e049      	b.n	800a878 <ct_get_averages+0xc8>
	}

	for (int i = 0; i < self->total_samples; i++) {
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	e020      	b.n	800a82c <ct_get_averages+0x7c>
		temp_sum += self->samples_buf[i].temp;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	011b      	lsls	r3, r3, #4
 800a7f2:	4413      	add	r3, r2
 800a7f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a7f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a7fc:	f7f5 fe6c 	bl	80004d8 <__adddf3>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	e9c7 2306 	strd	r2, r3, [r7, #24]
		salinity_sum += self->samples_buf[i].salinity;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	699a      	ldr	r2, [r3, #24]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	011b      	lsls	r3, r3, #4
 800a810:	4413      	add	r3, r2
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a81a:	f7f5 fe5d 	bl	80004d8 <__adddf3>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < self->total_samples; i++) {
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3301      	adds	r3, #1
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	429a      	cmp	r2, r3
 800a834:	d8d9      	bhi.n	800a7ea <ct_get_averages+0x3a>
	}

	self->averages.temp = temp_sum / ((double)self->total_samples);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7f5 ff88 	bl	8000750 <__aeabi_ui2d>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a848:	f7f6 f926 	bl	8000a98 <__aeabi_ddiv>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	self->averages.salinity = salinity_sum / ((double)self->total_samples);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f5 ff78 	bl	8000750 <__aeabi_ui2d>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a868:	f7f6 f916 	bl	8000a98 <__aeabi_ddiv>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	e9c1 2308 	strd	r2, r3, [r1, #32]

	return CT_SUCCESS;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3720      	adds	r7, #32
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <ct_on_off>:
 *
 *
 * @return ct_error_code_t
 */
void ct_on_off(CT* self, GPIO_PinState pin_state)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOG, CT_FET_Pin, pin_state);
 800a88c:	78fb      	ldrb	r3, [r7, #3]
 800a88e:	461a      	mov	r2, r3
 800a890:	2108      	movs	r1, #8
 800a892:	4803      	ldr	r0, [pc, #12]	; (800a8a0 <ct_on_off+0x20>)
 800a894:	f009 fc9c 	bl	80141d0 <HAL_GPIO_WritePin>
}
 800a898:	bf00      	nop
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	42021800 	.word	0x42021800

0800a8a4 <ct_self_test>:
 *
 *
 * @return ct_error_code_t
 */
ct_error_code_t ct_self_test(CT* self, bool add_warmup_time)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b094      	sub	sp, #80	; 0x50
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
	ULONG actual_flags;
	ct_error_code_t return_code = CT_SELF_TEST_FAIL;
 800a8b0:	23fd      	movs	r3, #253	; 0xfd
 800a8b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t elapsed_time, start_time;
	double temperature, salinity;
	char* index;
	// Sensor sends a message every 2 seconds @ 9600 baud, takes 0.245 seconds to get it out
	int required_ticks_to_get_message = TX_TIMER_TICKS_PER_SECOND * 3;
 800a8b6:	231e      	movs	r3, #30
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c

	self->on_off(self, GPIO_PIN_SET);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8be:	2101      	movs	r1, #1
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	4798      	blx	r3
	self->reset_ct_uart(self, CT_DEFAULT_BAUD_RATE);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3

	start_time = HAL_GetTick();
 800a8d0:	f005 fe4a 	bl	8010568 <HAL_GetTick>
 800a8d4:	63b8      	str	r0, [r7, #56]	; 0x38

	int fail_counter = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	643b      	str	r3, [r7, #64]	; 0x40
	while(fail_counter++ < 15) {
 800a8da:	e0a8      	b.n	800aa2e <ct_self_test+0x18a>

		if (HAL_UART_Receive_DMA(self->ct_uart_handle,
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6858      	ldr	r0, [r3, #4]
			(uint8_t*)&(self->data_buf[0]), CT_DATA_ARRAY_SIZE) != HAL_OK) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	695b      	ldr	r3, [r3, #20]
		if (HAL_UART_Receive_DMA(self->ct_uart_handle,
 800a8e4:	f240 1223 	movw	r2, #291	; 0x123
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	f00f fc61 	bl	801a1b0 <HAL_UART_Receive_DMA>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d008      	beq.n	800a906 <ct_self_test+0x62>
			reset_ct_uart(self, CT_DEFAULT_BAUD_RATE);
 800a8f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f8a9 	bl	800aa50 <reset_ct_uart>
			HAL_Delay(100);
 800a8fe:	2064      	movs	r0, #100	; 0x64
 800a900:	f003 fe82 	bl	800e608 <HAL_Delay>
			continue;
 800a904:	e093      	b.n	800aa2e <ct_self_test+0x18a>

		}
		// Disable half-transfer interrupt
		__HAL_DMA_DISABLE_IT(self->ct_dma_handle, DMA_IT_HT);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	695a      	ldr	r2, [r3, #20]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a918:	615a      	str	r2, [r3, #20]

		if (tx_event_flags_get(self->control_flags, CT_MSG_RECVD, TX_OR_CLEAR,
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68d8      	ldr	r0, [r3, #12]
 800a91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a920:	f107 020c 	add.w	r2, r7, #12
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	4613      	mov	r3, r2
 800a928:	2201      	movs	r2, #1
 800a92a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a92e:	f013 fbf1 	bl	801e114 <_txe_event_flags_get>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00d      	beq.n	800a954 <ct_self_test+0xb0>
				&actual_flags, required_ticks_to_get_message) != TX_SUCCESS) {

			HAL_UART_DMAStop(self->ct_uart_handle);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f00f fc95 	bl	801a26c <HAL_UART_DMAStop>
			reset_ct_uart(self, CT_DEFAULT_BAUD_RATE);
 800a942:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f882 	bl	800aa50 <reset_ct_uart>
			HAL_Delay(103);
 800a94c:	2067      	movs	r0, #103	; 0x67
 800a94e:	f003 fe5b 	bl	800e608 <HAL_Delay>
			continue;
 800a952:	e06c      	b.n	800aa2e <ct_self_test+0x18a>
		}

		index = strstr(self->data_buf, temp_units);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	4a3b      	ldr	r2, [pc, #236]	; (800aa48 <ct_self_test+0x1a4>)
 800a95a:	6812      	ldr	r2, [r2, #0]
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f015 fe1e 	bl	80205a0 <strstr>
 800a964:	6378      	str	r0, [r7, #52]	; 0x34
		// Make the message was received in the right alignment
		if (index == NULL || index > &(self->data_buf[0]) + TEMP_MEASUREMENT_START_INDEX){
 800a966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d005      	beq.n	800a978 <ct_self_test+0xd4>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	3346      	adds	r3, #70	; 0x46
 800a972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a974:	429a      	cmp	r2, r3
 800a976:	d903      	bls.n	800a980 <ct_self_test+0xdc>
			HAL_Delay(103);
 800a978:	2067      	movs	r0, #103	; 0x67
 800a97a:	f003 fe45 	bl	800e608 <HAL_Delay>
			continue;
 800a97e:	e056      	b.n	800aa2e <ct_self_test+0x18a>
		}
		index += TEMP_OFFSET_FROM_UNITS;
 800a980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a982:	3306      	adds	r3, #6
 800a984:	637b      	str	r3, [r7, #52]	; 0x34
		temperature = atof(index);
 800a986:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a988:	f015 fd9a 	bl	80204c0 <atof>
 800a98c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
		// error return of atof() is 0.0
		if (temperature == 0.0){
 800a990:	f04f 0200 	mov.w	r2, #0
 800a994:	f04f 0300 	mov.w	r3, #0
 800a998:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a99c:	f7f6 f9ba 	bl	8000d14 <__aeabi_dcmpeq>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <ct_self_test+0x10a>
			HAL_Delay(103);
 800a9a6:	2067      	movs	r0, #103	; 0x67
 800a9a8:	f003 fe2e 	bl	800e608 <HAL_Delay>
			continue;
 800a9ac:	e03f      	b.n	800aa2e <ct_self_test+0x18a>
		}

		char* index = strstr(self->data_buf, salinity_units);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	4a26      	ldr	r2, [pc, #152]	; (800aa4c <ct_self_test+0x1a8>)
 800a9b4:	6812      	ldr	r2, [r2, #0]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f015 fdf1 	bl	80205a0 <strstr>
 800a9be:	6278      	str	r0, [r7, #36]	; 0x24
		if (index == NULL){
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d103      	bne.n	800a9ce <ct_self_test+0x12a>
			HAL_Delay(103);
 800a9c6:	2067      	movs	r0, #103	; 0x67
 800a9c8:	f003 fe1e 	bl	800e608 <HAL_Delay>
			continue;
 800a9cc:	e02f      	b.n	800aa2e <ct_self_test+0x18a>
		}

		index += SALINITY_OFFSET_FROM_UNITS;
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
		salinity = atof(index);
 800a9d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9d6:	f015 fd73 	bl	80204c0 <atof>
 800a9da:	ed87 0b06 	vstr	d0, [r7, #24]

		if (salinity == 0.0){
 800a9de:	f04f 0200 	mov.w	r2, #0
 800a9e2:	f04f 0300 	mov.w	r3, #0
 800a9e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a9ea:	f7f6 f993 	bl	8000d14 <__aeabi_dcmpeq>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <ct_self_test+0x158>
			HAL_Delay(103);
 800a9f4:	2067      	movs	r0, #103	; 0x67
 800a9f6:	f003 fe07 	bl	800e608 <HAL_Delay>
			continue;
 800a9fa:	e018      	b.n	800aa2e <ct_self_test+0x18a>
		}

		if (add_warmup_time) {
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d011      	beq.n	800aa26 <ct_self_test+0x182>
			// Handle the warmup delay
			elapsed_time = HAL_GetTick() - start_time;
 800aa02:	f005 fdb1 	bl	8010568 <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	617b      	str	r3, [r7, #20]
			int32_t required_delay = WARMUP_TIME - elapsed_time;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 800aa14:	3320      	adds	r3, #32
 800aa16:	613b      	str	r3, [r7, #16]
			if (required_delay > 0) {
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	dd03      	ble.n	800aa26 <ct_self_test+0x182>
				HAL_Delay(required_delay);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f003 fdf1 	bl	800e608 <HAL_Delay>
			}
		}

		return_code = CT_SUCCESS;
 800aa26:	2300      	movs	r3, #0
 800aa28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 800aa2c:	e005      	b.n	800aa3a <ct_self_test+0x196>
	while(fail_counter++ < 15) {
 800aa2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	643a      	str	r2, [r7, #64]	; 0x40
 800aa34:	2b0e      	cmp	r3, #14
 800aa36:	f77f af51 	ble.w	800a8dc <ct_self_test+0x38>
	}

	return return_code;
 800aa3a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3748      	adds	r7, #72	; 0x48
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000004 	.word	0x20000004
 800aa4c:	20000008 	.word	0x20000008

0800aa50 <reset_ct_uart>:
 *
 * @param self - GNSS struct
 * @param baud_rate - baud rate to set port to
 */
ct_error_code_t reset_ct_uart(CT* self, uint16_t baud_rate)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	807b      	strh	r3, [r7, #2]

	if (HAL_UART_DeInit(self->ct_uart_handle) != HAL_OK) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f00f f9d3 	bl	8019e0c <HAL_UART_DeInit>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <reset_ct_uart+0x22>
		return CT_UART_ERROR;
 800aa6c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa70:	e060      	b.n	800ab34 <reset_ct_uart+0xe4>
	}

	self->ct_uart_handle->Instance = self->ct_uart_handle->Instance;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	6812      	ldr	r2, [r2, #0]
 800aa7c:	601a      	str	r2, [r3, #0]
	self->ct_uart_handle->Init.BaudRate = baud_rate;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	887a      	ldrh	r2, [r7, #2]
 800aa84:	605a      	str	r2, [r3, #4]
	self->ct_uart_handle->Init.WordLength = UART_WORDLENGTH_8B;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	609a      	str	r2, [r3, #8]
	self->ct_uart_handle->Init.StopBits = UART_STOPBITS_1;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	60da      	str	r2, [r3, #12]
	self->ct_uart_handle->Init.Parity = UART_PARITY_NONE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	611a      	str	r2, [r3, #16]
	self->ct_uart_handle->Init.Mode = UART_MODE_TX_RX;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	220c      	movs	r2, #12
 800aaa4:	615a      	str	r2, [r3, #20]
	self->ct_uart_handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	619a      	str	r2, [r3, #24]
	self->ct_uart_handle->Init.OverSampling = UART_OVERSAMPLING_16;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	61da      	str	r2, [r3, #28]
	self->ct_uart_handle->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	621a      	str	r2, [r3, #32]
	self->ct_uart_handle->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	625a      	str	r2, [r3, #36]	; 0x24
	self->ct_uart_handle->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(self->ct_uart_handle) != HAL_OK)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f00f f93a 	bl	8019d4c <HAL_UART_Init>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d002      	beq.n	800aae4 <reset_ct_uart+0x94>
	{
		return CT_UART_ERROR;
 800aade:	f04f 33ff 	mov.w	r3, #4294967295
 800aae2:	e027      	b.n	800ab34 <reset_ct_uart+0xe4>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(self->ct_uart_handle, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	2100      	movs	r1, #0
 800aaea:	4618      	mov	r0, r3
 800aaec:	f010 fe0f 	bl	801b70e <HAL_UARTEx_SetTxFifoThreshold>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <reset_ct_uart+0xac>
	{
		return CT_UART_ERROR;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800aafa:	e01b      	b.n	800ab34 <reset_ct_uart+0xe4>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(self->ct_uart_handle, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2100      	movs	r1, #0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f010 fe41 	bl	801b78a <HAL_UARTEx_SetRxFifoThreshold>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <reset_ct_uart+0xc4>
	{
		return CT_UART_ERROR;
 800ab0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab12:	e00f      	b.n	800ab34 <reset_ct_uart+0xe4>
	}
	if (HAL_UARTEx_DisableFifoMode(self->ct_uart_handle) != HAL_OK)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f010 fdbf 	bl	801b69c <HAL_UARTEx_DisableFifoMode>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <reset_ct_uart+0xda>
	{
		return CT_UART_ERROR;
 800ab24:	f04f 33ff 	mov.w	r3, #4294967295
 800ab28:	e004      	b.n	800ab34 <reset_ct_uart+0xe4>
	}

	LL_DMA_ResetChannel(GPDMA1, LL_DMA_CHANNEL_1);
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	4803      	ldr	r0, [pc, #12]	; (800ab3c <reset_ct_uart+0xec>)
 800ab2e:	f7ff fd0d 	bl	800a54c <LL_DMA_ResetChannel>

	return CT_SUCCESS;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	40020000 	.word	0x40020000

0800ab40 <reset_ct_struct_fields>:

static void reset_ct_struct_fields(CT* self)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	// We will know if the CT sensor fails by the value 9999 in the
	// iridium message
	self->averages.salinity = CT_AVERAGED_VALUE_ERROR_CODE;
 800ab48:	6879      	ldr	r1, [r7, #4]
 800ab4a:	a30b      	add	r3, pc, #44	; (adr r3, 800ab78 <reset_ct_struct_fields+0x38>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->averages.temp = CT_AVERAGED_VALUE_ERROR_CODE;
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	a308      	add	r3, pc, #32	; (adr r3, 800ab78 <reset_ct_struct_fields+0x38>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	self->total_samples = 0;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab66:	bf00      	nop
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	f3af 8000 	nop.w
 800ab78:	00000000 	.word	0x00000000
 800ab7c:	40dc3880 	.word	0x40dc3880

0800ab80 <LL_DMA_ResetChannel>:
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_RESET);
 800ab8e:	4a0b      	ldr	r2, [pc, #44]	; (800abbc <LL_DMA_ResetChannel+0x3c>)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4413      	add	r3, r2
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	4907      	ldr	r1, [pc, #28]	; (800abbc <LL_DMA_ResetChannel+0x3c>)
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	440a      	add	r2, r1
 800aba8:	f043 0302 	orr.w	r3, r3, #2
 800abac:	6153      	str	r3, [r2, #20]
}
 800abae:	bf00      	nop
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	08023a80 	.word	0x08023a80

0800abc0 <gnss_init>:
void gnss_init(GNSS* self, microSWIFT_configuration* global_config,
		UART_HandleTypeDef* gnss_uart_handle, DMA_HandleTypeDef* gnss_dma_handle,
		TX_EVENT_FLAGS_GROUP* control_flags, TX_EVENT_FLAGS_GROUP* error_flags,
		TIM_HandleTypeDef* timer, uint8_t* ubx_process_buf, RTC_HandleTypeDef* rtc_handle,
		float* GNSS_N_Array, float* GNSS_E_Array, float* GNSS_D_Array)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
	// initialize everything
	self->global_config = global_config;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	601a      	str	r2, [r3, #0]
	self->gnss_uart_handle = gnss_uart_handle;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	605a      	str	r2, [r3, #4]
	self->gnss_dma_handle = gnss_dma_handle;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	609a      	str	r2, [r3, #8]
	self->rtc_handle = rtc_handle;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abe4:	60da      	str	r2, [r3, #12]
	self->GNSS_N_Array = GNSS_N_Array;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abea:	621a      	str	r2, [r3, #32]
	self->GNSS_E_Array = GNSS_E_Array;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf0:	625a      	str	r2, [r3, #36]	; 0x24
	self->GNSS_D_Array = GNSS_D_Array;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abf6:	629a      	str	r2, [r3, #40]	; 0x28
	reset_struct_fields(self);
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f001 f975 	bl	800bee8 <reset_struct_fields>
	self->control_flags = control_flags;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	69ba      	ldr	r2, [r7, #24]
 800ac02:	611a      	str	r2, [r3, #16]
	self->error_flags = error_flags;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	69fa      	ldr	r2, [r7, #28]
 800ac08:	615a      	str	r2, [r3, #20]
	self->minutes_timer = timer;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6a3a      	ldr	r2, [r7, #32]
 800ac0e:	619a      	str	r2, [r3, #24]
	self->ubx_process_buf = ubx_process_buf;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac14:	61da      	str	r2, [r3, #28]
	self->config = gnss_config;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4a14      	ldr	r2, [pc, #80]	; (800ac6c <gnss_init+0xac>)
 800ac1a:	669a      	str	r2, [r3, #104]	; 0x68
	self->sync_and_start_reception = gnss_sync_and_start_reception;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4a14      	ldr	r2, [pc, #80]	; (800ac70 <gnss_init+0xb0>)
 800ac20:	66da      	str	r2, [r3, #108]	; 0x6c
	self->get_location = gnss_get_location;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4a13      	ldr	r2, [pc, #76]	; (800ac74 <gnss_init+0xb4>)
 800ac26:	671a      	str	r2, [r3, #112]	; 0x70
	self->get_running_average_velocities = gnss_get_running_average_velocities;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4a13      	ldr	r2, [pc, #76]	; (800ac78 <gnss_init+0xb8>)
 800ac2c:	675a      	str	r2, [r3, #116]	; 0x74
	self->process_message = gnss_process_message;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	4a12      	ldr	r2, [pc, #72]	; (800ac7c <gnss_init+0xbc>)
 800ac32:	679a      	str	r2, [r3, #120]	; 0x78
	self->sleep = gnss_sleep;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	4a12      	ldr	r2, [pc, #72]	; (800ac80 <gnss_init+0xc0>)
 800ac38:	67da      	str	r2, [r3, #124]	; 0x7c
	self->on_off = gnss_on_off;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4a11      	ldr	r2, [pc, #68]	; (800ac84 <gnss_init+0xc4>)
 800ac3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	self->cycle_power = gnss_cycle_power;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <gnss_init+0xc8>)
 800ac46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	self->set_rtc = gnss_set_rtc;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	4a0f      	ldr	r2, [pc, #60]	; (800ac8c <gnss_init+0xcc>)
 800ac4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	self->reset_uart = gnss_reset_uart;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4a0e      	ldr	r2, [pc, #56]	; (800ac90 <gnss_init+0xd0>)
 800ac56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	self->reset_timer = gnss_reset_timer;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4a0d      	ldr	r2, [pc, #52]	; (800ac94 <gnss_init+0xd4>)
 800ac5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800ac62:	bf00      	nop
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	0800ac99 	.word	0x0800ac99
 800ac70:	0800ad45 	.word	0x0800ad45
 800ac74:	0800b37d 	.word	0x0800b37d
 800ac78:	0800b3e9 	.word	0x0800b3e9
 800ac7c:	0800afbd 	.word	0x0800afbd
 800ac80:	0800b575 	.word	0x0800b575
 800ac84:	0800b595 	.word	0x0800b595
 800ac88:	0800b5b9 	.word	0x0800b5b9
 800ac8c:	0800b77d 	.word	0x0800b77d
 800ac90:	0800b5ed 	.word	0x0800b5ed
 800ac94:	0800b6d5 	.word	0x0800b6d5

0800ac98 <gnss_config>:
 * Configure the MAX-M10S chip by sending a series of UBX_CFG_VALSET messages
 *
 * @return GNSS_SUCCESS or
 * 		   GNSS_CONFIG_ERROR if response was not received
 */
gnss_error_code_t gnss_config(GNSS* self){
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b0a8      	sub	sp, #160	; 0xa0
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
	int fail_counter = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	gnss_error_code_t return_code = GNSS_CONFIG_ERROR;
 800aca6:	23f7      	movs	r3, #247	; 0xf7
 800aca8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	// The configuration message, type UBX_CFG_VALSET
	// !!!! This is output from U-Center 2 software, do not change !!!
	uint8_t config[144] =
 800acac:	4a24      	ldr	r2, [pc, #144]	; (800ad40 <gnss_config+0xa8>)
 800acae:	f107 0308 	add.w	r3, r7, #8
 800acb2:	4611      	mov	r1, r2
 800acb4:	2290      	movs	r2, #144	; 0x90
 800acb6:	4618      	mov	r0, r3
 800acb8:	f015 fc4e 	bl	8020558 <memcpy>
	 0xB4,0x00,0x91,0x20,0x00,0xB1,0x00,0x91,0x20,0x00,0x07,0x00,0x91,0x20,0x01,
	 0x21,0x00,0x11,0x20,0x08,0x04,0x00,0x93,0x10,0x00,0x01,0x00,0x21,0x30,0xC8,
	 0x00,0x02,0x00,0x21,0x30,0x01,0x00,0x07,0x00,0x92,0x20,0x00,0x06,0x00,0x92,
	 0x20,0x00,0x0A,0x00,0x92,0x20,0x00,0x22,0x04};

	while (fail_counter++ < 10) {
 800acbc:	e032      	b.n	800ad24 <gnss_config+0x8c>

		// Send over the configuration settings for RAM
		if (send_config(self, &(config[0]), sizeof(config)) == GNSS_CONFIG_ERROR) {
 800acbe:	f107 0308 	add.w	r3, r7, #8
 800acc2:	2290      	movs	r2, #144	; 0x90
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fdf3 	bl	800b8b2 <send_config>
 800accc:	4603      	mov	r3, r0
 800acce:	f113 0f09 	cmn.w	r3, #9
 800acd2:	d100      	bne.n	800acd6 <gnss_config+0x3e>
			continue;
 800acd4:	e026      	b.n	800ad24 <gnss_config+0x8c>
		}

		// Only one value (configuration layer) and the checksum change between RAM
		// and Battery-backed-RAM, so we'll adjust that now
		config[7] = 0x02;
 800acd6:	2302      	movs	r3, #2
 800acd8:	73fb      	strb	r3, [r7, #15]
		config[142] = 0x23;
 800acda:	2323      	movs	r3, #35	; 0x23
 800acdc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		config[143] = 0x8B;
 800ace0:	238b      	movs	r3, #139	; 0x8b
 800ace2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		// Send over the BBR config settings
		if (send_config(self, &(config[0]), sizeof(config)) == GNSS_SUCCESS) {
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	2290      	movs	r2, #144	; 0x90
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fddf 	bl	800b8b2 <send_config>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10a      	bne.n	800ad10 <gnss_config+0x78>
			return_code = GNSS_SUCCESS;
 800acfa:	2300      	movs	r3, #0
 800acfc:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad06:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4798      	blx	r3
			break;
 800ad0e:	e010      	b.n	800ad32 <gnss_config+0x9a>
		}

		HAL_Delay(100);
 800ad10:	2064      	movs	r0, #100	; 0x64
 800ad12:	f003 fc79 	bl	800e608 <HAL_Delay>
		self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad1c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
	while (fail_counter++ < 10) {
 800ad24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800ad2e:	2b09      	cmp	r3, #9
 800ad30:	ddc5      	ble.n	800acbe <gnss_config+0x26>
	}

	return return_code;
 800ad32:	f997 309b 	ldrsb.w	r3, [r7, #155]	; 0x9b
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	37a0      	adds	r7, #160	; 0xa0
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	08023518 	.word	0x08023518

0800ad44 <gnss_sync_and_start_reception>:
 *
 * @return gnss_error_code_t
 */
gnss_error_code_t gnss_sync_and_start_reception(GNSS* self, gnss_error_code_t (*start_dma)(GNSS*, uint8_t*, size_t),
		uint8_t* buffer, size_t msg_size)
{
 800ad44:	b590      	push	{r4, r7, lr}
 800ad46:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800ad4a:	af02      	add	r7, sp, #8
 800ad4c:	f507 7404 	add.w	r4, r7, #528	; 0x210
 800ad50:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 800ad54:	6020      	str	r0, [r4, #0]
 800ad56:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800ad5a:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 800ad5e:	6001      	str	r1, [r0, #0]
 800ad60:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800ad64:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800ad68:	600a      	str	r2, [r1, #0]
 800ad6a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800ad6e:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800ad72:	6013      	str	r3, [r2, #0]
	gnss_error_code_t return_code = GNSS_SELF_TEST_FAILED;
 800ad74:	23f6      	movs	r3, #246	; 0xf6
 800ad76:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t fail_counter = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	uint32_t max_fails = self->global_config->gnss_max_acquisition_wait_time * 60; // max acquisition time in seconds
 800ad80:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ad84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689a      	ldr	r2, [r3, #8]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	1a9b      	subs	r3, r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	ULONG actual_flags;
	uint8_t msg_buf[INITIAL_STAGES_BUFFER_SIZE];
	memset(&(msg_buf[0]), 0, INITIAL_STAGES_BUFFER_SIZE);
 800ad9a:	f107 0310 	add.w	r3, r7, #16
 800ad9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ada2:	2100      	movs	r1, #0
 800ada4:	4618      	mov	r0, r3
 800ada6:	f015 fbe4 	bl	8020572 <memset>

    // Grabbing and processing 5 samples takes ~ 1 second, so we'll keep trying until we hit
	// the gnss_max_acquisition_wait_time
	while (!self->timer_timeout) {
 800adaa:	e084      	b.n	800aeb6 <gnss_sync_and_start_reception+0x172>
		// Grab 5 UBX_NAV_PVT messages
		self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800adac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800adb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adba:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800adbe:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 800adc2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800adc6:	6810      	ldr	r0, [r2, #0]
 800adc8:	4798      	blx	r3
		// Put a short delay between resetting UART and starting a DMA transfer
		HAL_Delay(1);
 800adca:	2001      	movs	r0, #1
 800adcc:	f003 fc1c 	bl	800e608 <HAL_Delay>
		HAL_UART_Receive_DMA(self->gnss_uart_handle, &(msg_buf[0]),
 800add0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800add4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	f107 0110 	add.w	r1, r7, #16
 800ade0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ade4:	4618      	mov	r0, r3
 800ade6:	f00f f9e3 	bl	801a1b0 <HAL_UART_Receive_DMA>
				INITIAL_STAGES_BUFFER_SIZE);
		__HAL_DMA_DISABLE_IT(self->gnss_dma_handle, DMA_IT_HT);
 800adea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800adee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	695a      	ldr	r2, [r3, #20]
 800adfa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800adfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ae0c:	615a      	str	r2, [r3, #20]

		if (tx_event_flags_get(self->control_flags, GNSS_CONFIG_RECVD, TX_OR_CLEAR,
 800ae0e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ae12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6918      	ldr	r0, [r3, #16]
 800ae1a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800ae1e:	220c      	movs	r2, #12
 800ae20:	9200      	str	r2, [sp, #0]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae28:	f013 f974 	bl	801e114 <_txe_event_flags_get>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d019      	beq.n	800ae66 <gnss_sync_and_start_reception+0x122>
				&actual_flags, MAX_THREADX_WAIT_TICKS_FOR_CONFIG) != TX_SUCCESS) {
			// If we didn't receive the needed messaged in time, cycle the GNSS sensor
			self->cycle_power(self);
 800ae32:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ae36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae40:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800ae44:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 800ae48:	6810      	ldr	r0, [r2, #0]
 800ae4a:	4798      	blx	r3
			HAL_UART_DMAStop(self->gnss_uart_handle);
 800ae4c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ae50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f00f fa07 	bl	801a26c <HAL_UART_DMAStop>
			// Insert a short, prime number delay to sync up UART reception
			HAL_Delay(13);
 800ae5e:	200d      	movs	r0, #13
 800ae60:	f003 fbd2 	bl	800e608 <HAL_Delay>
			continue;
 800ae64:	e027      	b.n	800aeb6 <gnss_sync_and_start_reception+0x172>
		}

		process__frame_sync_messages(self, msg_buf);
 800ae66:	f107 0210 	add.w	r2, r7, #16
 800ae6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ae6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ae72:	4611      	mov	r1, r2
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	f000 feab 	bl	800bbd0 <process__frame_sync_messages>
		// this both ensures we have frame sync'd with the GNSS sensor and are safe
		// to kick off circular DMA receive
		if (self->messages_processed == 5 &&
 800ae7a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ae7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae86:	2b05      	cmp	r3, #5
 800ae88:	d115      	bne.n	800aeb6 <gnss_sync_and_start_reception+0x172>
				self->number_cycles_without_data == 0 &&
 800ae8a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ae8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
		if (self->messages_processed == 5 &&
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10c      	bne.n	800aeb6 <gnss_sync_and_start_reception+0x172>
				self->total_samples == 5)
 800ae9c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800aea0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
				self->number_cycles_without_data == 0 &&
 800aeaa:	2b05      	cmp	r3, #5
 800aeac:	d103      	bne.n	800aeb6 <gnss_sync_and_start_reception+0x172>
		{
			return_code = GNSS_SUCCESS;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			break;
 800aeb4:	e00c      	b.n	800aed0 <gnss_sync_and_start_reception+0x18c>
	while (!self->timer_timeout) {
 800aeb6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800aeba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800aec4:	f083 0301 	eor.w	r3, r3, #1
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f47f af6e 	bne.w	800adac <gnss_sync_and_start_reception+0x68>
		}
	}

	// Just to be overly sure we're starting the sampling window from a fresh slate
	reset_struct_fields(self);
 800aed0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800aed4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	f001 f805 	bl	800bee8 <reset_struct_fields>
	self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800aede:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800aee2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeec:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800aef0:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 800aef4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800aef8:	6810      	ldr	r0, [r2, #0]
 800aefa:	4798      	blx	r3

	if (self->timer_timeout) {
 800aefc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <gnss_sync_and_start_reception+0x1d0>
		return GNSS_TIME_RESOLUTION_ERROR;
 800af0e:	f06f 030d 	mvn.w	r3, #13
 800af12:	e04e      	b.n	800afb2 <gnss_sync_and_start_reception+0x26e>
	}

	return_code = start_dma(self, &(buffer[0]), msg_size);
 800af14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af18:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800af1c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af20:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 800af24:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af28:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 800af2c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af30:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	6812      	ldr	r2, [r2, #0]
 800af38:	6809      	ldr	r1, [r1, #0]
 800af3a:	6800      	ldr	r0, [r0, #0]
 800af3c:	4798      	blx	r3
 800af3e:	4603      	mov	r3, r0
 800af40:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	// Make sure we start right next time around in case there was an issue starting DMA
	if (return_code == GNSS_UART_ERROR) {
 800af44:	f997 320f 	ldrsb.w	r3, [r7, #527]	; 0x20f
 800af48:	f113 0f08 	cmn.w	r3, #8
 800af4c:	d12f      	bne.n	800afae <gnss_sync_and_start_reception+0x26a>
		HAL_UART_DMAStop(self->gnss_uart_handle);
 800af4e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f00f f986 	bl	801a26c <HAL_UART_DMAStop>
		self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800af60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af6e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800af72:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 800af76:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800af7a:	6810      	ldr	r0, [r2, #0]
 800af7c:	4798      	blx	r3
		memset(&(buffer[0]), 0, msg_size);
 800af7e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af82:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800af86:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af8a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800af8e:	6812      	ldr	r2, [r2, #0]
 800af90:	2100      	movs	r1, #0
 800af92:	6818      	ldr	r0, [r3, #0]
 800af94:	f015 faed 	bl	8020572 <memset>

		tx_event_flags_set(self->error_flags, GNSS_ERROR, TX_OR);
 800af98:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800af9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	2200      	movs	r2, #0
 800afa6:	2102      	movs	r1, #2
 800afa8:	4618      	mov	r0, r3
 800afaa:	f013 f909 	bl	801e1c0 <_txe_event_flags_set>
	}

	return return_code;
 800afae:	f997 320f 	ldrsb.w	r3, [r7, #527]	; 0x20f
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd90      	pop	{r4, r7, pc}

0800afbc <gnss_process_message>:
 * Process the messages in the buffer.
 *
 * @return gnss_error_code_t
 */
void gnss_process_message(GNSS* self)
{
 800afbc:	b5b0      	push	{r4, r5, r7, lr}
 800afbe:	b0ac      	sub	sp, #176	; 0xb0
 800afc0:	af04      	add	r7, sp, #16
 800afc2:	6078      	str	r0, [r7, #4]
	uint8_t payload[UBX_NAV_PVT_PAYLOAD_LENGTH];
	const char* buf_start = (const char*)&(self->ubx_process_buf[0]);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	const char* buf_end = buf_start;
 800afcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afd0:	613b      	str	r3, [r7, #16]
	// Our input buffer is a message off the queue, 10 UBX_NAV_PVT msgs
	size_t buf_length = UBX_MESSAGE_SIZE * 2;
 800afd2:	23c8      	movs	r3, #200	; 0xc8
 800afd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	int32_t message_class = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
	int32_t message_id = 0;
 800afdc:	2300      	movs	r3, #0
 800afde:	60bb      	str	r3, [r7, #8]
	int32_t num_payload_bytes = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int32_t lat, lon, sAcc, vnorth, veast, vdown;
	int16_t pDOP;
	bool is_ubx_nav_pvt_msg, velocities_exceed_max, sAcc_exceeded_max;

	// Really gross for loop that processes msgs in each iteration
	for (num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800afe6:	f107 0108 	add.w	r1, r7, #8
 800afea:	f107 020c 	add.w	r2, r7, #12
 800afee:	f107 0310 	add.w	r3, r7, #16
 800aff2:	9302      	str	r3, [sp, #8]
 800aff4:	235c      	movs	r3, #92	; 0x5c
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	f107 0314 	add.w	r3, r7, #20
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	460b      	mov	r3, r1
 800b000:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800b004:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800b008:	f002 f90e 	bl	800d228 <uUbxProtocolDecode>
 800b00c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800b010:	e1aa      	b.n	800b368 <gnss_process_message+0x3ac>
				 &message_class, &message_id, (char*)payload, sizeof(payload), &buf_end))
	{

		// UBX_NAV_PVT payload is 92 bytes, message class is 0x01, message ID is 0x07
		is_ubx_nav_pvt_msg = (num_payload_bytes == UBX_NAV_PVT_PAYLOAD_LENGTH) ||
							 (message_class == UBX_NAV_PVT_MESSAGE_CLASS)  ||
 800b012:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b016:	2b5c      	cmp	r3, #92	; 0x5c
 800b018:	d005      	beq.n	800b026 <gnss_process_message+0x6a>
 800b01a:	68fb      	ldr	r3, [r7, #12]
		is_ubx_nav_pvt_msg = (num_payload_bytes == UBX_NAV_PVT_PAYLOAD_LENGTH) ||
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d002      	beq.n	800b026 <gnss_process_message+0x6a>
							 (message_id == UBX_NAV_PVT_MESSAGE_ID);
 800b020:	68bb      	ldr	r3, [r7, #8]
							 (message_class == UBX_NAV_PVT_MESSAGE_CLASS)  ||
 800b022:	2b07      	cmp	r3, #7
 800b024:	d101      	bne.n	800b02a <gnss_process_message+0x6e>
 800b026:	2301      	movs	r3, #1
 800b028:	e000      	b.n	800b02c <gnss_process_message+0x70>
 800b02a:	2300      	movs	r3, #0
		is_ubx_nav_pvt_msg = (num_payload_bytes == UBX_NAV_PVT_PAYLOAD_LENGTH) ||
 800b02c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800b030:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800b034:	f003 0301 	and.w	r3, r3, #1
 800b038:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		if (!is_ubx_nav_pvt_msg)
 800b03c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800b040:	f083 0301 	eor.w	r3, r3, #1
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d019      	beq.n	800b07e <gnss_process_message+0xc2>
		{
			self->get_running_average_velocities(self);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
			self->number_cycles_without_data++;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b058:	3301      	adds	r3, #1
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			buf_length -= buf_end - buf_start;
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	461a      	mov	r2, r3
 800b06c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b070:	1a9b      	subs	r3, r3, r2
 800b072:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			buf_start = buf_end;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			continue;
 800b07c:	e15f      	b.n	800b33e <gnss_process_message+0x382>
		}

		// Even if we don't end up using the values, we did get a valid message
		self->messages_processed++;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	62da      	str	r2, [r3, #44]	; 0x2c

		// Grab a bunch of things from the message
		lon 	= (int32_t) get_four_bytes(payload, UBX_NAV_PVT_LON_INDEX, AS_LITTLE_ENDIAN);
 800b088:	f107 0314 	add.w	r3, r7, #20
 800b08c:	2200      	movs	r2, #0
 800b08e:	2118      	movs	r1, #24
 800b090:	4618      	mov	r0, r3
 800b092:	f003 fdf3 	bl	800ec7c <get_four_bytes>
 800b096:	4603      	mov	r3, r0
 800b098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		lat 	= (int32_t) get_four_bytes(payload, UBX_NAV_PVT_LAT_INDEX, AS_LITTLE_ENDIAN);
 800b09c:	f107 0314 	add.w	r3, r7, #20
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	211c      	movs	r1, #28
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f003 fde9 	bl	800ec7c <get_four_bytes>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		pDOP 	= (int16_t) get_two_bytes(payload, UBX_NAV_PVT_PDOP_INDEX, AS_LITTLE_ENDIAN);
 800b0b0:	f107 0314 	add.w	r3, r7, #20
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	214c      	movs	r1, #76	; 0x4c
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f003 fdad 	bl	800ec18 <get_two_bytes>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		sAcc 	= (int32_t) get_four_bytes(payload, UBX_NAV_PVT_SACC_INDEX, AS_LITTLE_ENDIAN);
 800b0c4:	f107 0314 	add.w	r3, r7, #20
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2144      	movs	r1, #68	; 0x44
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f003 fdd5 	bl	800ec7c <get_four_bytes>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		vnorth 	= (int32_t) get_four_bytes(payload, UBX_NAV_PVT_V_NORTH_INDEX, AS_LITTLE_ENDIAN);
 800b0d8:	f107 0314 	add.w	r3, r7, #20
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2130      	movs	r1, #48	; 0x30
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f003 fdcb 	bl	800ec7c <get_four_bytes>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	67fb      	str	r3, [r7, #124]	; 0x7c
		veast 	= (int32_t) get_four_bytes(payload, UBX_NAV_PVT_V_EAST_INDEX, AS_LITTLE_ENDIAN);
 800b0ea:	f107 0314 	add.w	r3, r7, #20
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	2134      	movs	r1, #52	; 0x34
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f003 fdc2 	bl	800ec7c <get_four_bytes>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	67bb      	str	r3, [r7, #120]	; 0x78
		vdown 	= (int32_t) get_four_bytes(payload, UBX_NAV_PVT_V_DOWN_INDEX, AS_LITTLE_ENDIAN);
 800b0fc:	f107 0314 	add.w	r3, r7, #20
 800b100:	2200      	movs	r2, #0
 800b102:	2138      	movs	r1, #56	; 0x38
 800b104:	4618      	mov	r0, r3
 800b106:	f003 fdb9 	bl	800ec7c <get_four_bytes>
 800b10a:	4603      	mov	r3, r0
 800b10c:	677b      	str	r3, [r7, #116]	; 0x74

		// This allows us to make sure we're not in the sampling window if time has not been resolved
		if (!self->is_clock_set) {
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b114:	f083 0301 	eor.w	r3, r3, #1
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <gnss_process_message+0x17a>
			if (self->set_rtc(self, (uint8_t*)payload) != GNSS_SUCCESS){
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b124:	f107 0214 	add.w	r2, r7, #20
 800b128:	4611      	mov	r1, r2
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	4798      	blx	r3
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	f040 8103 	bne.w	800b33c <gnss_process_message+0x380>
				continue;
			}
		}

		// We'll always retain the lat/lon and use a flag to indicate if it is any good
		self->current_fix_is_good = (pDOP < MAX_ACCEPTABLE_PDOP);
 800b136:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800b13a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b13e:	4293      	cmp	r3, r2
 800b140:	bfd4      	ite	le
 800b142:	2301      	movle	r3, #1
 800b144:	2300      	movgt	r3, #0
 800b146:	b2da      	uxtb	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		self->current_latitude = lat;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b154:	63da      	str	r2, [r3, #60]	; 0x3c
		self->current_longitude = lon;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b15c:	641a      	str	r2, [r3, #64]	; 0x40

		// vAcc was within acceptable range, still need to check
		// individual velocities are less than MAX_POSSIBLE_VELOCITY
		velocities_exceed_max = (vnorth > MAX_POSSIBLE_VELOCITY) ||
								(veast > MAX_POSSIBLE_VELOCITY) ||
 800b15e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b160:	f242 7210 	movw	r2, #10000	; 0x2710
 800b164:	4293      	cmp	r3, r2
 800b166:	dc09      	bgt.n	800b17c <gnss_process_message+0x1c0>
		velocities_exceed_max = (vnorth > MAX_POSSIBLE_VELOCITY) ||
 800b168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b16a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b16e:	4293      	cmp	r3, r2
 800b170:	dc04      	bgt.n	800b17c <gnss_process_message+0x1c0>
								(veast > MAX_POSSIBLE_VELOCITY) ||
 800b172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b174:	f242 7210 	movw	r2, #10000	; 0x2710
 800b178:	4293      	cmp	r3, r2
 800b17a:	dd01      	ble.n	800b180 <gnss_process_message+0x1c4>
 800b17c:	2301      	movs	r3, #1
 800b17e:	e000      	b.n	800b182 <gnss_process_message+0x1c6>
 800b180:	2300      	movs	r3, #0
		velocities_exceed_max = (vnorth > MAX_POSSIBLE_VELOCITY) ||
 800b182:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800b186:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
								(vdown > MAX_POSSIBLE_VELOCITY);

		sAcc_exceeded_max = sAcc > MAX_ACCEPTABLE_SACC;
 800b192:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b196:	2bfa      	cmp	r3, #250	; 0xfa
 800b198:	bfcc      	ite	gt
 800b19a:	2301      	movgt	r3, #1
 800b19c:	2300      	movle	r3, #0
 800b19e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

		// Did we have at least 1 good sample?
		if ((self->total_samples == 0) && (!velocities_exceed_max) && (!sAcc_exceeded_max)) {
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d117      	bne.n	800b1dc <gnss_process_message+0x220>
 800b1ac:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800b1b0:	f083 0301 	eor.w	r3, r3, #1
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d010      	beq.n	800b1dc <gnss_process_message+0x220>
 800b1ba:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800b1be:	f083 0301 	eor.w	r3, r3, #1
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d009      	beq.n	800b1dc <gnss_process_message+0x220>
			self->all_resolution_stages_complete = true;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			self->sample_window_start_time = get_timestamp(self);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fd7d 	bl	800bcd0 <get_timestamp>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	645a      	str	r2, [r3, #68]	; 0x44
		}

		// Make sure we don't overflow our arrays
		if (self->total_samples >= self->global_config->samples_per_window) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d32a      	bcc.n	800b244 <gnss_process_message+0x288>
			HAL_UART_DMAStop(self->gnss_uart_handle);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f00f f83a 	bl	801a26c <HAL_UART_DMAStop>
			self->sample_window_stop_time = get_timestamp(self);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fd69 	bl	800bcd0 <get_timestamp>
 800b1fe:	4602      	mov	r2, r0
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	649a      	str	r2, [r3, #72]	; 0x48
			self->all_samples_processed = true;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			self->sample_window_freq = (double)(((double)self->global_config->samples_per_window) /
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4618      	mov	r0, r3
 800b214:	f7f5 fa9c 	bl	8000750 <__aeabi_ui2d>
 800b218:	4604      	mov	r4, r0
 800b21a:	460d      	mov	r5, r1
					(((double)(self->sample_window_stop_time - self->sample_window_start_time))));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	4618      	mov	r0, r3
 800b228:	f7f5 fa92 	bl	8000750 <__aeabi_ui2d>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
			self->sample_window_freq = (double)(((double)self->global_config->samples_per_window) /
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 fc30 	bl	8000a98 <__aeabi_ddiv>
 800b238:	4602      	mov	r2, r0
 800b23a:	460b      	mov	r3, r1
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800b242:	e096      	b.n	800b372 <gnss_process_message+0x3b6>

			return;
		}

		// Check if the velocity values are any good
		if (sAcc_exceeded_max | velocities_exceed_max) {
 800b244:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800b248:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800b24c:	4313      	orrs	r3, r2
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d011      	beq.n	800b278 <gnss_process_message+0x2bc>
			// This message was not within acceptable parameters,
			self->get_running_average_velocities(self);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	4798      	blx	r3
			buf_length -= buf_end - buf_start;
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	461a      	mov	r2, r3
 800b266:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b26a:	1a9b      	subs	r3, r3, r2
 800b26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			buf_start = buf_end;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			continue;
 800b276:	e062      	b.n	800b33e <gnss_process_message+0x382>
		}

		// All velocity values are good to go
		self->v_north_sum += vnorth;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b27c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b27e:	441a      	add	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	631a      	str	r2, [r3, #48]	; 0x30
		self->v_east_sum += veast;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b28a:	441a      	add	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	635a      	str	r2, [r3, #52]	; 0x34
		self->v_down_sum += vdown;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b296:	441a      	add	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38

		self->GNSS_N_Array[self->total_samples] = ((float)((float)vnorth)/MM_PER_METER);
 800b29c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a1a      	ldr	r2, [r3, #32]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b378 <gnss_process_message+0x3bc>
 800b2b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2bc:	edc3 7a00 	vstr	s15, [r3]
		self->GNSS_E_Array[self->total_samples] = ((float)((float)veast)/MM_PER_METER);
 800b2c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b378 <gnss_process_message+0x3bc>
 800b2dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2e0:	edc3 7a00 	vstr	s15, [r3]
		self->GNSS_D_Array[self->total_samples] = ((float)((float)vdown)/MM_PER_METER);
 800b2e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b378 <gnss_process_message+0x3bc>
 800b300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b304:	edc3 7a00 	vstr	s15, [r3]

		self->number_cycles_without_data = 0;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		self->total_samples++;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b316:	3301      	adds	r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

		buf_length -= buf_end - buf_start;
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	461a      	mov	r2, r3
 800b32a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b32e:	1a9b      	subs	r3, r3, r2
 800b330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		buf_start = buf_end;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b33a:	e000      	b.n	800b33e <gnss_process_message+0x382>
				continue;
 800b33c:	bf00      	nop
			num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800b33e:	f107 0108 	add.w	r1, r7, #8
 800b342:	f107 020c 	add.w	r2, r7, #12
 800b346:	f107 0310 	add.w	r3, r7, #16
 800b34a:	9302      	str	r3, [sp, #8]
 800b34c:	235c      	movs	r3, #92	; 0x5c
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	f107 0314 	add.w	r3, r7, #20
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	460b      	mov	r3, r1
 800b358:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800b35c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800b360:	f001 ff62 	bl	800d228 <uUbxProtocolDecode>
 800b364:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	for (num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800b368:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f73f ae50 	bgt.w	800b012 <gnss_process_message+0x56>
	}
}
 800b372:	37a0      	adds	r7, #160	; 0xa0
 800b374:	46bd      	mov	sp, r7
 800b376:	bdb0      	pop	{r4, r5, r7, pc}
 800b378:	447a0000 	.word	0x447a0000

0800b37c <gnss_get_location>:
 * @param latitude - return parameter for latitude
 * @param longitude - return parameter for longitude
 * @return gnss_error_code_t
 */
gnss_error_code_t gnss_get_location(GNSS* self, float* latitude, float* longitude)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
	gnss_error_code_t return_code = GNSS_SUCCESS;
 800b388:	2300      	movs	r3, #0
 800b38a:	75fb      	strb	r3, [r7, #23]

	if (!self->current_fix_is_good) {
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800b392:	f083 0301 	eor.w	r3, r3, #1
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d001      	beq.n	800b3a0 <gnss_get_location+0x24>
		return_code = GNSS_LOCATION_INVALID;
 800b39c:	23fe      	movs	r3, #254	; 0xfe
 800b39e:	75fb      	strb	r3, [r7, #23]
	}

	*latitude = ((float)self->current_latitude)/((float)LAT_LON_CONVERSION_FACTOR);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a4:	ee07 3a90 	vmov	s15, r3
 800b3a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3ac:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b3e4 <gnss_get_location+0x68>
 800b3b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	edc3 7a00 	vstr	s15, [r3]
	*longitude = ((float)self->current_longitude)/((float)LAT_LON_CONVERSION_FACTOR);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3c6:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b3e4 <gnss_get_location+0x68>
 800b3ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	edc3 7a00 	vstr	s15, [r3]

	return return_code;
 800b3d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	371c      	adds	r7, #28
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	4b189680 	.word	0x4b189680

0800b3e8 <gnss_get_running_average_velocities>:
 * @param returnEast - return parameter for the running average East value
 * @param returnDown - return parameter for the running average Down value
 * @return GPS error code (marcos defined in gps_error_codes.h)
 */
gnss_error_code_t gnss_get_running_average_velocities(GNSS* self)
{
 800b3e8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
	gnss_error_code_t return_code = GNSS_SUCCESS;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	75fb      	strb	r3, [r7, #23]
	float substitute_north, substitute_east, substitute_down;
	// avoid a divide by zero error
	if (self->total_samples > 0) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 80b0 	beq.w	800b560 <gnss_get_running_average_velocities+0x178>
		substitute_north = (((float)self->v_north_sum) / MM_PER_METER) /
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b404:	ee07 3a90 	vmov	s15, r3
 800b408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b40c:	ee17 0a90 	vmov	r0, s15
 800b410:	f7f5 f9c0 	bl	8000794 <__aeabi_f2d>
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	4b55      	ldr	r3, [pc, #340]	; (800b570 <gnss_get_running_average_velocities+0x188>)
 800b41a:	f7f5 fb3d 	bl	8000a98 <__aeabi_ddiv>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4614      	mov	r4, r2
 800b424:	461d      	mov	r5, r3
				((float)self->total_samples);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b42c:	ee07 3a90 	vmov	s15, r3
 800b430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b434:	ee17 0a90 	vmov	r0, s15
 800b438:	f7f5 f9ac 	bl	8000794 <__aeabi_f2d>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
		substitute_north = (((float)self->v_north_sum) / MM_PER_METER) /
 800b440:	4620      	mov	r0, r4
 800b442:	4629      	mov	r1, r5
 800b444:	f7f5 fb28 	bl	8000a98 <__aeabi_ddiv>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4610      	mov	r0, r2
 800b44e:	4619      	mov	r1, r3
 800b450:	f7f5 fcf0 	bl	8000e34 <__aeabi_d2f>
 800b454:	4603      	mov	r3, r0
 800b456:	613b      	str	r3, [r7, #16]
		substitute_east = (((float)self->v_east_sum) / MM_PER_METER) /
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45c:	ee07 3a90 	vmov	s15, r3
 800b460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b464:	ee17 0a90 	vmov	r0, s15
 800b468:	f7f5 f994 	bl	8000794 <__aeabi_f2d>
 800b46c:	f04f 0200 	mov.w	r2, #0
 800b470:	4b3f      	ldr	r3, [pc, #252]	; (800b570 <gnss_get_running_average_velocities+0x188>)
 800b472:	f7f5 fb11 	bl	8000a98 <__aeabi_ddiv>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4614      	mov	r4, r2
 800b47c:	461d      	mov	r5, r3
				((float)self->total_samples);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b484:	ee07 3a90 	vmov	s15, r3
 800b488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48c:	ee17 0a90 	vmov	r0, s15
 800b490:	f7f5 f980 	bl	8000794 <__aeabi_f2d>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
		substitute_east = (((float)self->v_east_sum) / MM_PER_METER) /
 800b498:	4620      	mov	r0, r4
 800b49a:	4629      	mov	r1, r5
 800b49c:	f7f5 fafc 	bl	8000a98 <__aeabi_ddiv>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	f7f5 fcc4 	bl	8000e34 <__aeabi_d2f>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	60fb      	str	r3, [r7, #12]
		substitute_down = (((float)self->v_down_sum) / MM_PER_METER) /
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b4:	ee07 3a90 	vmov	s15, r3
 800b4b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4bc:	ee17 0a90 	vmov	r0, s15
 800b4c0:	f7f5 f968 	bl	8000794 <__aeabi_f2d>
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	4b29      	ldr	r3, [pc, #164]	; (800b570 <gnss_get_running_average_velocities+0x188>)
 800b4ca:	f7f5 fae5 	bl	8000a98 <__aeabi_ddiv>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4614      	mov	r4, r2
 800b4d4:	461d      	mov	r5, r3
				((float)self->total_samples);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b4dc:	ee07 3a90 	vmov	s15, r3
 800b4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e4:	ee17 0a90 	vmov	r0, s15
 800b4e8:	f7f5 f954 	bl	8000794 <__aeabi_f2d>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
		substitute_down = (((float)self->v_down_sum) / MM_PER_METER) /
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	f7f5 fad0 	bl	8000a98 <__aeabi_ddiv>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	4619      	mov	r1, r3
 800b500:	f7f5 fc98 	bl	8000e34 <__aeabi_d2f>
 800b504:	4603      	mov	r3, r0
 800b506:	60bb      	str	r3, [r7, #8]

		self->GNSS_N_Array[self->total_samples] = substitute_north;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a1a      	ldr	r2, [r3, #32]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	601a      	str	r2, [r3, #0]
		self->GNSS_E_Array[self->total_samples] = substitute_east;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	601a      	str	r2, [r3, #0]
		self->GNSS_D_Array[self->total_samples] = substitute_down;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	4413      	add	r3, r2
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	601a      	str	r2, [r3, #0]

		self->total_samples++;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b544:	3301      	adds	r3, #1
 800b546:	b29a      	uxth	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		self->total_samples_averaged++;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b554:	3301      	adds	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800b55e:	e001      	b.n	800b564 <gnss_get_running_average_velocities+0x17c>
	}
	else {
		// No valid samples yet, avoid divide by zero error
		return_code = GNSS_NO_SAMPLES_ERROR;
 800b560:	23fc      	movs	r3, #252	; 0xfc
 800b562:	75fb      	strb	r3, [r7, #23]
	}

	return return_code;
 800b564:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bdb0      	pop	{r4, r5, r7, pc}
 800b570:	408f4000 	.word	0x408f4000

0800b574 <gnss_sleep>:
 *
 * @return GNSS_CONFIG_ERROR - command failed
 * 		   GNSS_SUCCESS - command succeeded
 */
gnss_error_code_t gnss_sleep(GNSS* self, bool put_to_sleep)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
	return stop_start_gnss(self, put_to_sleep);
 800b580:	78fb      	ldrb	r3, [r7, #3]
 800b582:	4619      	mov	r1, r3
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 faec 	bl	800bb62 <stop_start_gnss>
 800b58a:	4603      	mov	r3, r0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <gnss_on_off>:
 * @param on - true for tuen on, false for turn off
 *
 * @return void
 */
void gnss_on_off(GNSS* self, GPIO_PinState pin_state)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOG, GNSS_FET_Pin, pin_state);
 800b5a0:	78fb      	ldrb	r3, [r7, #3]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	2110      	movs	r1, #16
 800b5a6:	4803      	ldr	r0, [pc, #12]	; (800b5b4 <gnss_on_off+0x20>)
 800b5a8:	f008 fe12 	bl	80141d0 <HAL_GPIO_WritePin>
}
 800b5ac:	bf00      	nop
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	42021800 	.word	0x42021800

0800b5b8 <gnss_cycle_power>:
 * @param self - GNSS struct
 *
 * @return void
 */
void gnss_cycle_power(GNSS* self)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	self->on_off(self, GPIO_PIN_RESET);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	4798      	blx	r3
	HAL_Delay(25);
 800b5cc:	2019      	movs	r0, #25
 800b5ce:	f003 f81b 	bl	800e608 <HAL_Delay>
	self->on_off(self, GPIO_PIN_SET);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5d8:	2101      	movs	r1, #1
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	4798      	blx	r3
	HAL_Delay(25);
 800b5de:	2019      	movs	r0, #25
 800b5e0:	f003 f812 	bl	800e608 <HAL_Delay>
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <gnss_reset_uart>:
 *
 * @param self - GNSS struct
 * @param baud_rate - baud rate to set port to
 */
gnss_error_code_t gnss_reset_uart(GNSS* self, uint16_t baud_rate)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	807b      	strh	r3, [r7, #2]

	if (HAL_UART_DeInit(self->gnss_uart_handle) != HAL_OK) {
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f00e fc05 	bl	8019e0c <HAL_UART_DeInit>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <gnss_reset_uart+0x22>
		return GNSS_UART_ERROR;
 800b608:	f06f 0307 	mvn.w	r3, #7
 800b60c:	e05c      	b.n	800b6c8 <gnss_reset_uart+0xdc>
	}

	self->gnss_uart_handle->Instance = self->gnss_uart_handle->Instance;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	6812      	ldr	r2, [r2, #0]
 800b618:	601a      	str	r2, [r3, #0]
	self->gnss_uart_handle->Init.BaudRate = baud_rate;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	887a      	ldrh	r2, [r7, #2]
 800b620:	605a      	str	r2, [r3, #4]
	self->gnss_uart_handle->Init.WordLength = UART_WORDLENGTH_8B;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	609a      	str	r2, [r3, #8]
	self->gnss_uart_handle->Init.StopBits = UART_STOPBITS_1;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	60da      	str	r2, [r3, #12]
	self->gnss_uart_handle->Init.Parity = UART_PARITY_NONE;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	611a      	str	r2, [r3, #16]
	self->gnss_uart_handle->Init.Mode = UART_MODE_TX_RX;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	220c      	movs	r2, #12
 800b640:	615a      	str	r2, [r3, #20]
	self->gnss_uart_handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	619a      	str	r2, [r3, #24]
	self->gnss_uart_handle->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	621a      	str	r2, [r3, #32]
	self->gnss_uart_handle->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	629a      	str	r2, [r3, #40]	; 0x28
	self->gnss_uart_handle->FifoMode = UART_FIFOMODE_DISABLE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(self->gnss_uart_handle) != HAL_OK)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	4618      	mov	r0, r3
 800b668:	f00e fb70 	bl	8019d4c <HAL_UART_Init>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <gnss_reset_uart+0x8c>
	{
		return GNSS_UART_ERROR;
 800b672:	f06f 0307 	mvn.w	r3, #7
 800b676:	e027      	b.n	800b6c8 <gnss_reset_uart+0xdc>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(self->gnss_uart_handle, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	2100      	movs	r1, #0
 800b67e:	4618      	mov	r0, r3
 800b680:	f010 f845 	bl	801b70e <HAL_UARTEx_SetTxFifoThreshold>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d002      	beq.n	800b690 <gnss_reset_uart+0xa4>
	{
		return GNSS_UART_ERROR;
 800b68a:	f06f 0307 	mvn.w	r3, #7
 800b68e:	e01b      	b.n	800b6c8 <gnss_reset_uart+0xdc>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(self->gnss_uart_handle, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2100      	movs	r1, #0
 800b696:	4618      	mov	r0, r3
 800b698:	f010 f877 	bl	801b78a <HAL_UARTEx_SetRxFifoThreshold>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <gnss_reset_uart+0xbc>
	{
		return GNSS_UART_ERROR;
 800b6a2:	f06f 0307 	mvn.w	r3, #7
 800b6a6:	e00f      	b.n	800b6c8 <gnss_reset_uart+0xdc>
	}
	if (HAL_UARTEx_DisableFifoMode(self->gnss_uart_handle) != HAL_OK)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f00f fff5 	bl	801b69c <HAL_UARTEx_DisableFifoMode>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <gnss_reset_uart+0xd2>
	{
		return GNSS_UART_ERROR;
 800b6b8:	f06f 0307 	mvn.w	r3, #7
 800b6bc:	e004      	b.n	800b6c8 <gnss_reset_uart+0xdc>
	}

	LL_DMA_ResetChannel(GPDMA1, LL_DMA_CHANNEL_0);
 800b6be:	2100      	movs	r1, #0
 800b6c0:	4803      	ldr	r0, [pc, #12]	; (800b6d0 <gnss_reset_uart+0xe4>)
 800b6c2:	f7ff fa5d 	bl	800ab80 <LL_DMA_ResetChannel>

	return GNSS_SUCCESS;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	40020000 	.word	0x40020000

0800b6d4 <gnss_reset_timer>:
 *
 * @param self - GNSS struct
 * @param timeout_in_minutes - timeout in minutes
 */
gnss_error_code_t gnss_reset_timer(GNSS* self, uint8_t timeout_in_minutes)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
	if (HAL_TIM_Base_DeInit(self->minutes_timer) != HAL_OK) {
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f00d fe39 	bl	801935c <HAL_TIM_Base_DeInit>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <gnss_reset_timer+0x22>
		return GNSS_TIMER_ERROR;
 800b6f0:	f06f 030c 	mvn.w	r3, #12
 800b6f4:	e03c      	b.n	800b770 <gnss_reset_timer+0x9c>
	}
	// For debugging, not practical to set the timeout to 0
	if (timeout_in_minutes <= 0) {
 800b6f6:	78fb      	ldrb	r3, [r7, #3]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d108      	bne.n	800b70e <gnss_reset_timer+0x3a>
		self->minutes_timer->Init.Period = 1;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	2201      	movs	r2, #1
 800b702:	60da      	str	r2, [r3, #12]
		self->minutes_timer->Init.RepetitionCounter = 0;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2200      	movs	r2, #0
 800b70a:	615a      	str	r2, [r3, #20]
 800b70c:	e009      	b.n	800b722 <gnss_reset_timer+0x4e>
	}
	else {
		self->minutes_timer->Init.Period = 59999;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800b716:	60da      	str	r2, [r3, #12]
		self->minutes_timer->Init.RepetitionCounter = timeout_in_minutes - 1;
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	1e5a      	subs	r2, r3, #1
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	615a      	str	r2, [r3, #20]
	}

	self->minutes_timer->Instance = GNSS_TIMER_INSTANCE;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	4a14      	ldr	r2, [pc, #80]	; (800b778 <gnss_reset_timer+0xa4>)
 800b728:	601a      	str	r2, [r3, #0]
	self->minutes_timer->Init.Prescaler = 12000;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800b732:	605a      	str	r2, [r3, #4]
	self->minutes_timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	2200      	movs	r2, #0
 800b73a:	609a      	str	r2, [r3, #8]
	self->minutes_timer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	2200      	movs	r2, #0
 800b742:	611a      	str	r2, [r3, #16]
	self->minutes_timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	2200      	movs	r2, #0
 800b74a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(self->minutes_timer) != HAL_OK) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	4618      	mov	r0, r3
 800b752:	f00d fd9f 	bl	8019294 <HAL_TIM_Base_Init>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <gnss_reset_timer+0x8e>
		return GNSS_TIMER_ERROR;
 800b75c:	f06f 030c 	mvn.w	r3, #12
 800b760:	e006      	b.n	800b770 <gnss_reset_timer+0x9c>
	}

	__HAL_TIM_CLEAR_FLAG(self->minutes_timer, TIM_FLAG_UPDATE);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f06f 0201 	mvn.w	r2, #1
 800b76c:	611a      	str	r2, [r3, #16]

	return GNSS_SUCCESS;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	40014400 	.word	0x40014400

0800b77c <gnss_set_rtc>:
 *
 * @return GNSS_SUCCESS or
 * 		   GNSS_RTC_ERROR - if setting RTC returned an error
 */
gnss_error_code_t gnss_set_rtc(GNSS* self, uint8_t* msg_payload)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08c      	sub	sp, #48	; 0x30
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
	gnss_error_code_t return_code = GNSS_SUCCESS;
 800b786:	2300      	movs	r3, #0
 800b788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	uint16_t year = (int16_t) get_two_bytes(msg_payload, UBX_NAV_PVT_YEAR_INDEX,
 800b78c:	2200      	movs	r2, #0
 800b78e:	2104      	movs	r1, #4
 800b790:	6838      	ldr	r0, [r7, #0]
 800b792:	f003 fa41 	bl	800ec18 <get_two_bytes>
 800b796:	4603      	mov	r3, r0
 800b798:	85bb      	strh	r3, [r7, #44]	; 0x2c
			AS_LITTLE_ENDIAN);
	uint8_t month = msg_payload[UBX_NAV_PVT_MONTH_INDEX];
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	799b      	ldrb	r3, [r3, #6]
 800b79e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t day = msg_payload[UBX_NAV_PVT_DAY_INDEX];
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	79db      	ldrb	r3, [r3, #7]
 800b7a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t hour = msg_payload[UBX_NAV_PVT_HOUR_INDEX];
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	7a1b      	ldrb	r3, [r3, #8]
 800b7ae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t min = msg_payload[UBX_NAV_PVT_MINUTE_INDEX];
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	7a5b      	ldrb	r3, [r3, #9]
 800b7b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t sec = msg_payload[UBX_NAV_PVT_SECONDS_INDEX];
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	7a9b      	ldrb	r3, [r3, #10]
 800b7be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t time_flags = msg_payload[UBX_NAV_PVT_VALID_FLAGS_INDEX];
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	7adb      	ldrb	r3, [r3, #11]
 800b7c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	time_flags &= LOWER_4_BITS_MASK;
 800b7ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7ce:	f003 030f 	and.w	r3, r3, #15
 800b7d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	if (time_flags != FULLY_RESOLVED_AND_VALID_TIME) {
 800b7d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7da:	2b07      	cmp	r3, #7
 800b7dc:	d005      	beq.n	800b7ea <gnss_set_rtc+0x6e>
		return_code = GNSS_TIME_RESOLUTION_ERROR;
 800b7de:	23f2      	movs	r3, #242	; 0xf2
 800b7e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		return return_code;
 800b7e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b7e8:	e05f      	b.n	800b8aa <gnss_set_rtc+0x12e>
	}

	// Set the date
	rtc_date.Date = day;
 800b7ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b7ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	rtc_date.Month = month;
 800b7f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	rtc_date.Year = year - 2000; // RTC takes a 2 digit year
 800b7fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	3330      	adds	r3, #48	; 0x30
 800b800:	b2db      	uxtb	r3, r3
 800b802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// We are not using weekday, but the time will be set incorrectly if this field is not initialized
	// Value for WeekDay will not have any effect on time/date
	rtc_date.WeekDay = RTC_WEEKDAY_MONDAY;
 800b806:	2301      	movs	r3, #1
 800b808:	f887 3020 	strb.w	r3, [r7, #32]
	if (HAL_RTC_SetDate(self->rtc_handle, &rtc_date, RTC_FORMAT_BIN) != HAL_OK) {
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	f107 0120 	add.w	r1, r7, #32
 800b814:	2200      	movs	r2, #0
 800b816:	4618      	mov	r0, r3
 800b818:	f00d f9c0 	bl	8018b9c <HAL_RTC_SetDate>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d011      	beq.n	800b846 <gnss_set_rtc+0xca>
		return_code = GNSS_RTC_ERROR;
 800b822:	23f4      	movs	r3, #244	; 0xf4
 800b824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		self->rtc_error = true;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		tx_event_flags_set(self->error_flags, RTC_ERROR, TX_OR);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	695b      	ldr	r3, [r3, #20]
 800b834:	2200      	movs	r2, #0
 800b836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b83a:	4618      	mov	r0, r3
 800b83c:	f012 fcc0 	bl	801e1c0 <_txe_event_flags_set>
		return return_code;
 800b840:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b844:	e031      	b.n	800b8aa <gnss_set_rtc+0x12e>
	}
	// Set the time
	rtc_time.Hours = hour;
 800b846:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b84a:	733b      	strb	r3, [r7, #12]
	rtc_time.Minutes = min;
 800b84c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b850:	737b      	strb	r3, [r7, #13]
	rtc_time.Seconds = sec;
 800b852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b856:	73bb      	strb	r3, [r7, #14]
	rtc_time.SecondFraction = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(self->rtc_handle, &rtc_time, RTC_FORMAT_BIN) != HAL_OK) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	f107 010c 	add.w	r1, r7, #12
 800b864:	2200      	movs	r2, #0
 800b866:	4618      	mov	r0, r3
 800b868:	f00d f89a 	bl	80189a0 <HAL_RTC_SetTime>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d011      	beq.n	800b896 <gnss_set_rtc+0x11a>
		return_code = GNSS_RTC_ERROR;
 800b872:	23f4      	movs	r3, #244	; 0xf4
 800b874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		self->rtc_error = true;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		tx_event_flags_set(self->error_flags, RTC_ERROR, TX_OR);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	2200      	movs	r2, #0
 800b886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b88a:	4618      	mov	r0, r3
 800b88c:	f012 fc98 	bl	801e1c0 <_txe_event_flags_set>
		return return_code;
 800b890:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b894:	e009      	b.n	800b8aa <gnss_set_rtc+0x12e>
	}

	self->is_clock_set = true;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2201      	movs	r2, #1
 800b89a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	self->rtc_error = false;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

	return return_code;
 800b8a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3730      	adds	r7, #48	; 0x30
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <send_config>:
 * @param config_array - byte array containing a UBX_CFG_VALSET msg with up to
 * 		  64 keys
 */
static gnss_error_code_t send_config(GNSS* self, uint8_t* config_array,
		size_t message_size)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 800b8b8:	af04      	add	r7, sp, #16
 800b8ba:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b8be:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b8c2:	6018      	str	r0, [r3, #0]
 800b8c4:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b8c8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b8cc:	6019      	str	r1, [r3, #0]
 800b8ce:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b8d2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800b8d6:	601a      	str	r2, [r3, #0]
	uint8_t fail_counter = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f887 32e7 	strb.w	r3, [r7, #743]	; 0x2e7
	ULONG actual_flags;
	uint8_t msg_buf[CONFIG_BUFFER_SIZE];
	char payload[UBX_NAV_PVT_PAYLOAD_LENGTH];
	const char* buf_start = (const char*)&(msg_buf[0]);
 800b8de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b8e2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
	const char* buf_end = buf_start;
 800b8e6:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b8ea:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800b8ee:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800b8f2:	601a      	str	r2, [r3, #0]
	size_t buf_length = 600;
 800b8f4:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b8f8:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    int32_t message_class = 0;
 800b8fc:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b900:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800b904:	2200      	movs	r2, #0
 800b906:	601a      	str	r2, [r3, #0]
    int32_t message_id = 0;
 800b908:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b90c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]
    int32_t num_payload_bytes = 0;
 800b914:	2300      	movs	r3, #0
 800b916:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
    uint8_t response_msg_class;
    uint8_t response_msg_id;
	// The configuration message, type UBX_CFG_VALSET

    while (fail_counter++ < 10) {
 800b91a:	e104      	b.n	800bb26 <send_config+0x274>
		// Start with a blank msg_buf -- this will short cycle the for loop
		// below if a message was not received in 10 tries
		memset(&(msg_buf[0]),0,sizeof(msg_buf));
 800b91c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b920:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b924:	2100      	movs	r1, #0
 800b926:	4618      	mov	r0, r3
 800b928:	f014 fe23 	bl	8020572 <memset>
		// Send over the configuration settings
		HAL_UART_Transmit(self->gnss_uart_handle, &(config_array[0]),
 800b92c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b930:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6858      	ldr	r0, [r3, #4]
 800b938:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b93c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	b29a      	uxth	r2, r3
 800b944:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b948:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 800b94c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b950:	6809      	ldr	r1, [r1, #0]
 800b952:	f00e faa5 	bl	8019ea0 <HAL_UART_Transmit>
				message_size, ONE_SECOND);

		// Grab the acknowledgment message
		HAL_UART_Receive_DMA(self->gnss_uart_handle, &(msg_buf[0]),
 800b956:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b95a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800b966:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b96a:	4618      	mov	r0, r3
 800b96c:	f00e fc20 	bl	801a1b0 <HAL_UART_Receive_DMA>
			sizeof(msg_buf));
		__HAL_DMA_DISABLE_IT(self->gnss_dma_handle, DMA_IT_HT);
 800b970:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b974:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	695a      	ldr	r2, [r3, #20]
 800b980:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b984:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b992:	615a      	str	r2, [r3, #20]
		if (tx_event_flags_get(self->control_flags, GNSS_CONFIG_RECVD, TX_OR_CLEAR,
 800b994:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b998:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6918      	ldr	r0, [r3, #16]
 800b9a0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800b9a4:	220c      	movs	r2, #12
 800b9a6:	9200      	str	r2, [sp, #0]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b9ae:	f012 fbb1 	bl	801e114 <_txe_event_flags_get>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d012      	beq.n	800b9de <send_config+0x12c>
				&actual_flags, TX_TIMER_TICKS_PER_SECOND + 2) != TX_SUCCESS) {
			self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800b9b8:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800b9bc:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9c6:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800b9ca:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800b9ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800b9d2:	6810      	ldr	r0, [r2, #0]
 800b9d4:	4798      	blx	r3
			HAL_Delay(10);
 800b9d6:	200a      	movs	r0, #10
 800b9d8:	f002 fe16 	bl	800e608 <HAL_Delay>
			continue;
 800b9dc:	e0a3      	b.n	800bb26 <send_config+0x274>


		/* The ack/nak message is guaranteed to be sent within one second, but
		 * we may receive a few navigation messages before the ack is received,
		 * so we have to sift through at least one second worth of messages */
		for (num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800b9de:	f107 0110 	add.w	r1, r7, #16
 800b9e2:	f107 0214 	add.w	r2, r7, #20
 800b9e6:	f107 0318 	add.w	r3, r7, #24
 800b9ea:	9302      	str	r3, [sp, #8]
 800b9ec:	235c      	movs	r3, #92	; 0x5c
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	f107 031c 	add.w	r3, r7, #28
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	f8d7 12dc 	ldr.w	r1, [r7, #732]	; 0x2dc
 800b9fc:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 800ba00:	f001 fc12 	bl	800d228 <uUbxProtocolDecode>
 800ba04:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8
 800ba08:	e065      	b.n	800bad6 <send_config+0x224>
				&message_class, &message_id, payload, sizeof(payload), &buf_end);
				num_payload_bytes > 0;
				num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
				&message_class, &message_id, payload, sizeof(payload), &buf_end))
		{
			if (message_class == 0x05) {
 800ba0a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800ba0e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b05      	cmp	r3, #5
 800ba16:	d134      	bne.n	800ba82 <send_config+0x1d0>
				// Msg class 0x05 is either an ACK or NAK
				if (message_id == 0x00) {
 800ba18:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800ba1c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d05c      	beq.n	800bae0 <send_config+0x22e>
					// This is a NAK msg, the config did not go through properly
					break;
				}

				if (message_id == 0x01) {
 800ba26:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800ba2a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d126      	bne.n	800ba82 <send_config+0x1d0>
					// This is an ACK message
					response_msg_class = payload[UBX_ACK_ACK_CLSID_INDEX];
 800ba34:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800ba38:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	f887 32d7 	strb.w	r3, [r7, #727]	; 0x2d7
					response_msg_id = payload[UBX_ACK_ACK_MSGID_INDEX];
 800ba42:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800ba46:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800ba4a:	785b      	ldrb	r3, [r3, #1]
 800ba4c:	f887 32d6 	strb.w	r3, [r7, #726]	; 0x2d6

					// Make sure this is an ack for the CFG_VALSET message type
					if (response_msg_class == UBX_CFG_VALSET_CLASS &&
 800ba50:	f897 32d7 	ldrb.w	r3, [r7, #727]	; 0x2d7
 800ba54:	2b06      	cmp	r3, #6
 800ba56:	d114      	bne.n	800ba82 <send_config+0x1d0>
 800ba58:	f897 32d6 	ldrb.w	r3, [r7, #726]	; 0x2d6
 800ba5c:	2b8a      	cmp	r3, #138	; 0x8a
 800ba5e:	d110      	bne.n	800ba82 <send_config+0x1d0>
							response_msg_id == UBX_CFG_VALSET_ID) {
						// This is an acknowledgement of our configuration message
						self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800ba60:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800ba64:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba6e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800ba72:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800ba76:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800ba7a:	6810      	ldr	r0, [r2, #0]
 800ba7c:	4798      	blx	r3
						return GNSS_SUCCESS;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e06a      	b.n	800bb58 <send_config+0x2a6>
					}
				}
			}
			// Adjust pointers to continue searching the buffer
			buf_length -= buf_end - buf_start;
 800ba82:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800ba86:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800ba98:	1a9b      	subs	r3, r3, r2
 800ba9a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
			buf_start = buf_end;
 800ba9e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800baa2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
				num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800baac:	f107 0110 	add.w	r1, r7, #16
 800bab0:	f107 0214 	add.w	r2, r7, #20
 800bab4:	f107 0318 	add.w	r3, r7, #24
 800bab8:	9302      	str	r3, [sp, #8]
 800baba:	235c      	movs	r3, #92	; 0x5c
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	f107 031c 	add.w	r3, r7, #28
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	460b      	mov	r3, r1
 800bac6:	f8d7 12dc 	ldr.w	r1, [r7, #732]	; 0x2dc
 800baca:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 800bace:	f001 fbab 	bl	800d228 <uUbxProtocolDecode>
 800bad2:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8
		for (num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800bad6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800bada:	2b00      	cmp	r3, #0
 800badc:	dc95      	bgt.n	800ba0a <send_config+0x158>
 800bade:	e000      	b.n	800bae2 <send_config+0x230>
					break;
 800bae0:	bf00      	nop
		}

		// Reinitialize the UART port and restart DMA receive
		self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800bae2:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800bae6:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf0:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800baf4:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800baf8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800bafc:	6810      	ldr	r0, [r2, #0]
 800bafe:	4798      	blx	r3
		// Zero out the buffer to prevent reading old values
		memset(&(msg_buf[0]),0,sizeof(msg_buf));
 800bb00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb04:	f44f 7216 	mov.w	r2, #600	; 0x258
 800bb08:	2100      	movs	r1, #0
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f014 fd31 	bl	8020572 <memset>
		buf_start = (const char*)&(msg_buf[0]);
 800bb10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb14:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
		buf_end = buf_start;
 800bb18:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800bb1c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800bb20:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800bb24:	601a      	str	r2, [r3, #0]
    while (fail_counter++ < 10) {
 800bb26:	f897 32e7 	ldrb.w	r3, [r7, #743]	; 0x2e7
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	f887 22e7 	strb.w	r2, [r7, #743]	; 0x2e7
 800bb30:	2b09      	cmp	r3, #9
 800bb32:	f67f aef3 	bls.w	800b91c <send_config+0x6a>
	}
	// If we made it here, config failed 10 attempts
    self->reset_uart(self, GNSS_DEFAULT_BAUD_RATE);
 800bb36:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800bb3a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb44:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800bb48:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800bb4c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800bb50:	6810      	ldr	r0, [r2, #0]
 800bb52:	4798      	blx	r3
	return GNSS_CONFIG_ERROR;
 800bb54:	f06f 0308 	mvn.w	r3, #8
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f507 773a 	add.w	r7, r7, #744	; 0x2e8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <stop_start_gnss>:
 *
 * @param self- GNSS struct
 * @param send_stop - true: send a stop message; false: sent a start message.
 */
static gnss_error_code_t stop_start_gnss(GNSS* self, bool send_stop)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b088      	sub	sp, #32
 800bb66:	af02      	add	r7, sp, #8
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	70fb      	strb	r3, [r7, #3]
	// 3rd byte -- 0x08 = Controlled GNSS stop, 0x09 = Controlled GNSS start
	uint8_t message_payload[4] = {0x00, 0x00, (send_stop) ? 0x08 : 0x09, 0x00};
 800bb6e:	2300      	movs	r3, #0
 800bb70:	753b      	strb	r3, [r7, #20]
 800bb72:	2300      	movs	r3, #0
 800bb74:	757b      	strb	r3, [r7, #21]
 800bb76:	78fb      	ldrb	r3, [r7, #3]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <stop_start_gnss+0x1e>
 800bb7c:	2308      	movs	r3, #8
 800bb7e:	e000      	b.n	800bb82 <stop_start_gnss+0x20>
 800bb80:	2309      	movs	r3, #9
 800bb82:	75bb      	strb	r3, [r7, #22]
 800bb84:	2300      	movs	r3, #0
 800bb86:	75fb      	strb	r3, [r7, #23]
	char cfg_rst_message[sizeof(message_payload) +
						 U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES];

	if ((uUbxProtocolEncode(0x06, 0x04, (const char*)&(message_payload[0]),
 800bb88:	f107 0214 	add.w	r2, r7, #20
 800bb8c:	f107 0308 	add.w	r3, r7, #8
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	2304      	movs	r3, #4
 800bb94:	2104      	movs	r1, #4
 800bb96:	2006      	movs	r0, #6
 800bb98:	f001 fad0 	bl	800d13c <uUbxProtocolEncode>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	da02      	bge.n	800bba8 <stop_start_gnss+0x46>
			sizeof(message_payload),cfg_rst_message)) < 0)
	{
		return GNSS_CONFIG_ERROR;
 800bba2:	f06f 0308 	mvn.w	r3, #8
 800bba6:	e00f      	b.n	800bbc8 <stop_start_gnss+0x66>
	}

	if ((HAL_UART_Transmit(self->gnss_uart_handle, (uint8_t*)&(cfg_rst_message[0]),
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6858      	ldr	r0, [r3, #4]
 800bbac:	f107 0108 	add.w	r1, r7, #8
 800bbb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bbb4:	220c      	movs	r2, #12
 800bbb6:	f00e f973 	bl	8019ea0 <HAL_UART_Transmit>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <stop_start_gnss+0x64>
					sizeof(cfg_rst_message), 1000)) != HAL_OK)
	{
		return GNSS_CONFIG_ERROR;
 800bbc0:	f06f 0308 	mvn.w	r3, #8
 800bbc4:	e000      	b.n	800bbc8 <stop_start_gnss+0x66>
	}

	return GNSS_SUCCESS;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <process__frame_sync_messages>:
 *
 * @param self- GNSS struct
 * @param
 */
static void process__frame_sync_messages(GNSS* self, uint8_t* process_buf)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b0a4      	sub	sp, #144	; 0x90
 800bbd4:	af04      	add	r7, sp, #16
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
	char payload[UBX_NAV_PVT_PAYLOAD_LENGTH];
	const char* buf_start = (const char*)&(process_buf[0]);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const char* buf_end = buf_start;
 800bbde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbe0:	617b      	str	r3, [r7, #20]

	size_t buf_length = INITIAL_STAGES_BUFFER_SIZE;
 800bbe2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bbe6:	67bb      	str	r3, [r7, #120]	; 0x78
	int32_t message_class = 0;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	613b      	str	r3, [r7, #16]
	int32_t message_id = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	60fb      	str	r3, [r7, #12]
	int32_t num_payload_bytes = 0;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	677b      	str	r3, [r7, #116]	; 0x74
	// Reset the counters
	self->messages_processed = 0;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	62da      	str	r2, [r3, #44]	; 0x2c
	self->number_cycles_without_data = 0;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	self->total_samples = 0;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	// Really gross for loop that processes msgs in each iteration
	for (num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800bc0a:	f107 010c 	add.w	r1, r7, #12
 800bc0e:	f107 0210 	add.w	r2, r7, #16
 800bc12:	f107 0314 	add.w	r3, r7, #20
 800bc16:	9302      	str	r3, [sp, #8]
 800bc18:	235c      	movs	r3, #92	; 0x5c
 800bc1a:	9301      	str	r3, [sp, #4]
 800bc1c:	f107 0318 	add.w	r3, r7, #24
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	460b      	mov	r3, r1
 800bc24:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bc26:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800bc28:	f001 fafe 	bl	800d228 <uUbxProtocolDecode>
 800bc2c:	6778      	str	r0, [r7, #116]	; 0x74
 800bc2e:	e046      	b.n	800bcbe <process__frame_sync_messages+0xee>
			num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
				 &message_class, &message_id, payload, sizeof(payload), &buf_end))
	{
		// UBX_NAV_PVT payload is 92 bytes, message class is 0x01,
		// message ID is 0x07
		if (num_payload_bytes != UBX_NAV_PVT_PAYLOAD_LENGTH ||
 800bc30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc32:	2b5c      	cmp	r3, #92	; 0x5c
 800bc34:	d105      	bne.n	800bc42 <process__frame_sync_messages+0x72>
				message_class != UBX_NAV_PVT_MESSAGE_CLASS  ||
 800bc36:	693b      	ldr	r3, [r7, #16]
		if (num_payload_bytes != UBX_NAV_PVT_PAYLOAD_LENGTH ||
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d102      	bne.n	800bc42 <process__frame_sync_messages+0x72>
				message_id    != UBX_NAV_PVT_MESSAGE_ID)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
				message_class != UBX_NAV_PVT_MESSAGE_CLASS  ||
 800bc3e:	2b07      	cmp	r3, #7
 800bc40:	d011      	beq.n	800bc66 <process__frame_sync_messages+0x96>
		{
			self->number_cycles_without_data++;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc48:	3301      	adds	r3, #1
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			buf_length -= buf_end - buf_start;
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	461a      	mov	r2, r3
 800bc5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc5c:	1a9b      	subs	r3, r3, r2
 800bc5e:	67bb      	str	r3, [r7, #120]	; 0x78
			buf_start = buf_end;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	67fb      	str	r3, [r7, #124]	; 0x7c
			continue;
 800bc64:	e019      	b.n	800bc9a <process__frame_sync_messages+0xca>
		}

		// need to keep track of how many messages were processed in the buffer
		self->messages_processed++;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6a:	1c5a      	adds	r2, r3, #1
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	62da      	str	r2, [r3, #44]	; 0x2c
		self->number_cycles_without_data = 0;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		self->total_samples++;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bc7e:	3301      	adds	r3, #1
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

		buf_length -= buf_end - buf_start;
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	461a      	mov	r2, r3
 800bc90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc92:	1a9b      	subs	r3, r3, r2
 800bc94:	67bb      	str	r3, [r7, #120]	; 0x78
		buf_start = buf_end;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	67fb      	str	r3, [r7, #124]	; 0x7c
			num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800bc9a:	f107 010c 	add.w	r1, r7, #12
 800bc9e:	f107 0210 	add.w	r2, r7, #16
 800bca2:	f107 0314 	add.w	r3, r7, #20
 800bca6:	9302      	str	r3, [sp, #8]
 800bca8:	235c      	movs	r3, #92	; 0x5c
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	f107 0318 	add.w	r3, r7, #24
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bcb6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800bcb8:	f001 fab6 	bl	800d228 <uUbxProtocolDecode>
 800bcbc:	6778      	str	r0, [r7, #116]	; 0x74
	for (num_payload_bytes = uUbxProtocolDecode(buf_start, buf_length,
 800bcbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	dcb5      	bgt.n	800bc30 <process__frame_sync_messages+0x60>
	}
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop
 800bcc8:	3780      	adds	r7, #128	; 0x80
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
	...

0800bcd0 <get_timestamp>:
 *
 * @param self - GNSS struct
 * @return timestamp as uint32_t
 */
static uint32_t get_timestamp(GNSS* self)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08c      	sub	sp, #48	; 0x30
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
	uint32_t timestamp = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	62bb      	str	r3, [r7, #40]	; 0x28
	bool is_leap_year = false;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t num_leap_years_since_2000 = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint16_t julian_date_first_of_month = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	85fb      	strh	r3, [r7, #46]	; 0x2e
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	// Get the date and time
	HAL_RTC_GetTime(self->rtc_handle, &rtc_time, RTC_FORMAT_BIN);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f107 010c 	add.w	r1, r7, #12
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f00c feee 	bl	8018ad8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(self->rtc_handle, &rtc_date, RTC_FORMAT_BIN);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	f107 0120 	add.w	r1, r7, #32
 800bd04:	2200      	movs	r2, #0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f00c ffce 	bl	8018ca8 <HAL_RTC_GetDate>

	// Let's make a timestamp (yay...)
	// Years first
	timestamp += SECONDS_1970_TO_2000;
 800bd0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd0e:	4b73      	ldr	r3, [pc, #460]	; (800bedc <get_timestamp+0x20c>)
 800bd10:	4413      	add	r3, r2
 800bd12:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += rtc_date.Year * SECONDS_IN_YEAR;
 800bd14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd18:	461a      	mov	r2, r3
 800bd1a:	4b71      	ldr	r3, [pc, #452]	; (800bee0 <get_timestamp+0x210>)
 800bd1c:	fb02 f303 	mul.w	r3, r2, r3
 800bd20:	461a      	mov	r2, r3
 800bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd24:	4413      	add	r3, r2
 800bd26:	62bb      	str	r3, [r7, #40]	; 0x28
	num_leap_years_since_2000 = rtc_date.Year / 4;
 800bd28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd2c:	089b      	lsrs	r3, r3, #2
 800bd2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	timestamp += num_leap_years_since_2000 * SECONDS_IN_DAY;
 800bd32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd36:	4a6b      	ldr	r2, [pc, #428]	; (800bee4 <get_timestamp+0x214>)
 800bd38:	fb02 f303 	mul.w	r3, r2, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	4413      	add	r3, r2
 800bd42:	62bb      	str	r3, [r7, #40]	; 0x28

	// Years are only represented with 2 digits. We'll set 0 as the year 2000, so anything
	// evenly divisible by 4 is a leap year (2000, 2004, 2008, etc)
	is_leap_year = rtc_date.Year % 4 == 0;
 800bd44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd48:	f003 0303 	and.w	r3, r3, #3
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	bf0c      	ite	eq
 800bd52:	2301      	moveq	r3, #1
 800bd54:	2300      	movne	r3, #0
 800bd56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch (rtc_date.Month) {
 800bd5a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	2b11      	cmp	r3, #17
 800bd62:	f200 808a 	bhi.w	800be7a <get_timestamp+0x1aa>
 800bd66:	a201      	add	r2, pc, #4	; (adr r2, 800bd6c <get_timestamp+0x9c>)
 800bd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6c:	0800be7b 	.word	0x0800be7b
 800bd70:	0800bdb5 	.word	0x0800bdb5
 800bd74:	0800bdbb 	.word	0x0800bdbb
 800bd78:	0800bdcd 	.word	0x0800bdcd
 800bd7c:	0800bddf 	.word	0x0800bddf
 800bd80:	0800bdf1 	.word	0x0800bdf1
 800bd84:	0800be03 	.word	0x0800be03
 800bd88:	0800be15 	.word	0x0800be15
 800bd8c:	0800be27 	.word	0x0800be27
 800bd90:	0800be7b 	.word	0x0800be7b
 800bd94:	0800be7b 	.word	0x0800be7b
 800bd98:	0800be7b 	.word	0x0800be7b
 800bd9c:	0800be7b 	.word	0x0800be7b
 800bda0:	0800be7b 	.word	0x0800be7b
 800bda4:	0800be7b 	.word	0x0800be7b
 800bda8:	0800be39 	.word	0x0800be39
 800bdac:	0800be4f 	.word	0x0800be4f
 800bdb0:	0800be65 	.word	0x0800be65
		case RTC_MONTH_JANUARY:
			// No months to account for!!!
			break;

		case RTC_MONTH_FEBRUARY:
			julian_date_first_of_month = 32;
 800bdb4:	2320      	movs	r3, #32
 800bdb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800bdb8:	e060      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_MARCH:
			julian_date_first_of_month = (is_leap_year) ? 61 : 60;
 800bdba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <get_timestamp+0xf6>
 800bdc2:	233d      	movs	r3, #61	; 0x3d
 800bdc4:	e000      	b.n	800bdc8 <get_timestamp+0xf8>
 800bdc6:	233c      	movs	r3, #60	; 0x3c
 800bdc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800bdca:	e057      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_APRIL:
			julian_date_first_of_month = (is_leap_year) ? 92 : 91;
 800bdcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <get_timestamp+0x108>
 800bdd4:	235c      	movs	r3, #92	; 0x5c
 800bdd6:	e000      	b.n	800bdda <get_timestamp+0x10a>
 800bdd8:	235b      	movs	r3, #91	; 0x5b
 800bdda:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800bddc:	e04e      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_MAY:
			julian_date_first_of_month = (is_leap_year) ? 122 : 121;
 800bdde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <get_timestamp+0x11a>
 800bde6:	237a      	movs	r3, #122	; 0x7a
 800bde8:	e000      	b.n	800bdec <get_timestamp+0x11c>
 800bdea:	2379      	movs	r3, #121	; 0x79
 800bdec:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800bdee:	e045      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_JUNE:
			julian_date_first_of_month = (is_leap_year) ? 153 : 152;
 800bdf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <get_timestamp+0x12c>
 800bdf8:	2399      	movs	r3, #153	; 0x99
 800bdfa:	e000      	b.n	800bdfe <get_timestamp+0x12e>
 800bdfc:	2398      	movs	r3, #152	; 0x98
 800bdfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800be00:	e03c      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_JULY:
			julian_date_first_of_month = (is_leap_year) ? 183 : 182;
 800be02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <get_timestamp+0x13e>
 800be0a:	23b7      	movs	r3, #183	; 0xb7
 800be0c:	e000      	b.n	800be10 <get_timestamp+0x140>
 800be0e:	23b6      	movs	r3, #182	; 0xb6
 800be10:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800be12:	e033      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_AUGUST:
			julian_date_first_of_month = (is_leap_year) ? 214 : 213;
 800be14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <get_timestamp+0x150>
 800be1c:	23d6      	movs	r3, #214	; 0xd6
 800be1e:	e000      	b.n	800be22 <get_timestamp+0x152>
 800be20:	23d5      	movs	r3, #213	; 0xd5
 800be22:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800be24:	e02a      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_SEPTEMBER:
			julian_date_first_of_month = (is_leap_year) ? 245 : 244;
 800be26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <get_timestamp+0x162>
 800be2e:	23f5      	movs	r3, #245	; 0xf5
 800be30:	e000      	b.n	800be34 <get_timestamp+0x164>
 800be32:	23f4      	movs	r3, #244	; 0xf4
 800be34:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800be36:	e021      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_OCTOBER:
			julian_date_first_of_month = (is_leap_year) ? 275 : 274;
 800be38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <get_timestamp+0x176>
 800be40:	f240 1313 	movw	r3, #275	; 0x113
 800be44:	e001      	b.n	800be4a <get_timestamp+0x17a>
 800be46:	f44f 7389 	mov.w	r3, #274	; 0x112
 800be4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800be4c:	e016      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_NOVEMBER:
			julian_date_first_of_month = (is_leap_year) ? 306 : 305;
 800be4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <get_timestamp+0x18c>
 800be56:	f44f 7399 	mov.w	r3, #306	; 0x132
 800be5a:	e001      	b.n	800be60 <get_timestamp+0x190>
 800be5c:	f240 1331 	movw	r3, #305	; 0x131
 800be60:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800be62:	e00b      	b.n	800be7c <get_timestamp+0x1ac>

		case RTC_MONTH_DECEMBER:
			julian_date_first_of_month = (is_leap_year) ? 336 : 335;
 800be64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <get_timestamp+0x1a2>
 800be6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800be70:	e001      	b.n	800be76 <get_timestamp+0x1a6>
 800be72:	f240 134f 	movw	r3, #335	; 0x14f
 800be76:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800be78:	e000      	b.n	800be7c <get_timestamp+0x1ac>

		default:
			break;
 800be7a:	bf00      	nop
	}
	timestamp += julian_date_first_of_month * SECONDS_IN_DAY;
 800be7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be7e:	4a19      	ldr	r2, [pc, #100]	; (800bee4 <get_timestamp+0x214>)
 800be80:	fb02 f303 	mul.w	r3, r2, r3
 800be84:	461a      	mov	r2, r3
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	4413      	add	r3, r2
 800be8a:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += (rtc_date.Date - 1) * SECONDS_IN_DAY;
 800be8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800be90:	3b01      	subs	r3, #1
 800be92:	4a14      	ldr	r2, [pc, #80]	; (800bee4 <get_timestamp+0x214>)
 800be94:	fb02 f303 	mul.w	r3, r2, r3
 800be98:	461a      	mov	r2, r3
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	4413      	add	r3, r2
 800be9e:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += rtc_time.Hours * SECONDS_IN_HOUR;
 800bea0:	7b3b      	ldrb	r3, [r7, #12]
 800bea2:	461a      	mov	r2, r3
 800bea4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bea8:	fb02 f303 	mul.w	r3, r2, r3
 800beac:	461a      	mov	r2, r3
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	4413      	add	r3, r2
 800beb2:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += rtc_time.Minutes * SECONDS_IN_MIN;
 800beb4:	7b7b      	ldrb	r3, [r7, #13]
 800beb6:	461a      	mov	r2, r3
 800beb8:	4613      	mov	r3, r2
 800beba:	011b      	lsls	r3, r3, #4
 800bebc:	1a9b      	subs	r3, r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	461a      	mov	r2, r3
 800bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec4:	4413      	add	r3, r2
 800bec6:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += rtc_time.Seconds;
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	461a      	mov	r2, r3
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	4413      	add	r3, r2
 800bed0:	62bb      	str	r3, [r7, #40]	; 0x28
	// Not including fractions of a second
	return timestamp;
 800bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3730      	adds	r7, #48	; 0x30
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	386d4380 	.word	0x386d4380
 800bee0:	01e13380 	.word	0x01e13380
 800bee4:	00015180 	.word	0x00015180

0800bee8 <reset_struct_fields>:
 *
 * @param self- GNSS struct
 * @param
 */
static void reset_struct_fields(GNSS* self)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	self->messages_processed = 0;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	62da      	str	r2, [r3, #44]	; 0x2c
	self->v_north_sum = 0;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	631a      	str	r2, [r3, #48]	; 0x30
	self->v_east_sum = 0;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	635a      	str	r2, [r3, #52]	; 0x34
	self->v_down_sum = 0;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	639a      	str	r2, [r3, #56]	; 0x38
	self->current_latitude = 0;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	63da      	str	r2, [r3, #60]	; 0x3c
	self->current_longitude = 0;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	641a      	str	r2, [r3, #64]	; 0x40
	self->sample_window_start_time = 0;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	645a      	str	r2, [r3, #68]	; 0x44
	self->sample_window_stop_time = 0;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	649a      	str	r2, [r3, #72]	; 0x48
	self->sample_window_freq = 0.0;
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	f04f 0200 	mov.w	r2, #0
 800bf26:	f04f 0300 	mov.w	r3, #0
 800bf2a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	self->total_samples = 0;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	self->total_samples_averaged = 0;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	self->number_cycles_without_data = 0;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	self->current_fix_is_good = false;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	self->all_resolution_stages_complete = false;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	self->is_configured = false;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	self->is_clock_set = false;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	self->rtc_error = false;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	self->all_samples_processed = false;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	self->timer_timeout = false;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 800bf7e:	bf00      	nop
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
	...

0800bf8c <LL_DMA_ResetChannel>:
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + LL_DMA_CH_OFFSET_TAB[Channel]))->CCR, DMA_CCR_RESET);
 800bf9a:	4a0b      	ldr	r2, [pc, #44]	; (800bfc8 <LL_DMA_ResetChannel+0x3c>)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	4907      	ldr	r1, [pc, #28]	; (800bfc8 <LL_DMA_ResetChannel+0x3c>)
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	440a      	add	r2, r1
 800bfb4:	f043 0302 	orr.w	r3, r3, #2
 800bfb8:	6153      	str	r3, [r2, #20]
}
 800bfba:	bf00      	nop
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	08023ac0 	.word	0x08023ac0

0800bfcc <iridium_init>:
		TIM_HandleTypeDef* timer, DMA_HandleTypeDef* iridium_tx_dma_handle,
		TX_EVENT_FLAGS_GROUP* control_flags, TX_EVENT_FLAGS_GROUP* error_flags,
		RTC_HandleTypeDef* rtc_handle, sbd_message_type_52* current_message,
		uint8_t* error_message_buffer, uint8_t* response_buffer,
		Iridium_message_storage* storage_queue)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	603b      	str	r3, [r7, #0]
	self->global_config = global_config;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	601a      	str	r2, [r3, #0]
	self->iridium_uart_handle = iridium_uart_handle;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	605a      	str	r2, [r3, #4]
	self->iridium_rx_dma_handle = iridium_rx_dma_handle;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	609a      	str	r2, [r3, #8]
	self->iridium_tx_dma_handle = iridium_tx_dma_handle;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	69fa      	ldr	r2, [r7, #28]
 800bff0:	60da      	str	r2, [r3, #12]
	self->timer = timer;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	611a      	str	r2, [r3, #16]
	self->control_flags = control_flags;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6a3a      	ldr	r2, [r7, #32]
 800bffc:	615a      	str	r2, [r3, #20]
	self->error_flags = error_flags;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c002:	619a      	str	r2, [r3, #24]
	self->rtc_handle = rtc_handle;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c008:	61da      	str	r2, [r3, #28]
	self->current_message = current_message;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c00e:	621a      	str	r2, [r3, #32]
	self->error_message_buffer = error_message_buffer;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c014:	625a      	str	r2, [r3, #36]	; 0x24
	self->response_buffer = response_buffer;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c01a:	629a      	str	r2, [r3, #40]	; 0x28
	self->storage_queue = storage_queue;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c020:	62da      	str	r2, [r3, #44]	; 0x2c
	self->current_lat = 0.0;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f04f 0200 	mov.w	r2, #0
 800c028:	631a      	str	r2, [r3, #48]	; 0x30
	self->current_lon = 0.0;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f04f 0200 	mov.w	r2, #0
 800c030:	635a      	str	r2, [r3, #52]	; 0x34
	self->timer_timeout = false;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	self->config = iridium_config;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	4a18      	ldr	r2, [pc, #96]	; (800c0a0 <iridium_init+0xd4>)
 800c03e:	639a      	str	r2, [r3, #56]	; 0x38
	self->self_test = iridium_self_test;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	4a18      	ldr	r2, [pc, #96]	; (800c0a4 <iridium_init+0xd8>)
 800c044:	63da      	str	r2, [r3, #60]	; 0x3c
	self->transmit_message = iridium_transmit_message;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	4a17      	ldr	r2, [pc, #92]	; (800c0a8 <iridium_init+0xdc>)
 800c04a:	641a      	str	r2, [r3, #64]	; 0x40
	self->transmit_error_message = iridium_transmit_error_message;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4a17      	ldr	r2, [pc, #92]	; (800c0ac <iridium_init+0xe0>)
 800c050:	645a      	str	r2, [r3, #68]	; 0x44
	self->get_timestamp = iridium_get_timestamp;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	4a16      	ldr	r2, [pc, #88]	; (800c0b0 <iridium_init+0xe4>)
 800c056:	649a      	str	r2, [r3, #72]	; 0x48
	self->sleep = iridium_sleep;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4a16      	ldr	r2, [pc, #88]	; (800c0b4 <iridium_init+0xe8>)
 800c05c:	64da      	str	r2, [r3, #76]	; 0x4c
	self->on_off = iridium_on_off;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	4a15      	ldr	r2, [pc, #84]	; (800c0b8 <iridium_init+0xec>)
 800c062:	651a      	str	r2, [r3, #80]	; 0x50
	self->store_in_flash = iridium_store_in_flash;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	4a15      	ldr	r2, [pc, #84]	; (800c0bc <iridium_init+0xf0>)
 800c068:	655a      	str	r2, [r3, #84]	; 0x54
	self->reset_uart = iridium_reset_iridium_uart;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	4a14      	ldr	r2, [pc, #80]	; (800c0c0 <iridium_init+0xf4>)
 800c06e:	659a      	str	r2, [r3, #88]	; 0x58
	self->reset_timer = iridium_reset_timer;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	4a14      	ldr	r2, [pc, #80]	; (800c0c4 <iridium_init+0xf8>)
 800c074:	65da      	str	r2, [r3, #92]	; 0x5c
	self->queue_add = iridium_storage_queue_add;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	4a13      	ldr	r2, [pc, #76]	; (800c0c8 <iridium_init+0xfc>)
 800c07a:	661a      	str	r2, [r3, #96]	; 0x60
	self->queue_get = iridium_storage_queue_get;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	4a13      	ldr	r2, [pc, #76]	; (800c0cc <iridium_init+0x100>)
 800c080:	665a      	str	r2, [r3, #100]	; 0x64
	self->queue_flush = iridium_storage_queue_flush;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	4a12      	ldr	r2, [pc, #72]	; (800c0d0 <iridium_init+0x104>)
 800c086:	669a      	str	r2, [r3, #104]	; 0x68

	memset(&(self->response_buffer[0]), 0, IRIDIUM_MAX_RESPONSE_SIZE);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08c:	2240      	movs	r2, #64	; 0x40
 800c08e:	2100      	movs	r1, #0
 800c090:	4618      	mov	r0, r3
 800c092:	f014 fa6e 	bl	8020572 <memset>
}
 800c096:	bf00      	nop
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	0800c0d5 	.word	0x0800c0d5
 800c0a4:	0800c1dd 	.word	0x0800c1dd
 800c0a8:	0800c801 	.word	0x0800c801
 800c0ac:	0800cc6d 	.word	0x0800cc6d
 800c0b0:	0800ce19 	.word	0x0800ce19
 800c0b4:	0800c289 	.word	0x0800c289
 800c0b8:	0800c2ad 	.word	0x0800c2ad
 800c0bc:	0800c30d 	.word	0x0800c30d
 800c0c0:	0800c32d 	.word	0x0800c32d
 800c0c4:	0800c425 	.word	0x0800c425
 800c0c8:	0800c4cd 	.word	0x0800c4cd
 800c0cc:	0800c577 	.word	0x0800c577
 800c0d0:	0800c62b 	.word	0x0800c62b

0800c0d4 <iridium_config>:
 *
 *
 * @return iridium_error_code_t
 */
iridium_error_code_t iridium_config(Iridium* self)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
	int fail_counter;
	iridium_error_code_t return_code = IRIDIUM_SUCCESS;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	72fb      	strb	r3, [r7, #11]

	for (fail_counter = 0; fail_counter < MAX_RETRIES; fail_counter++) {
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	e052      	b.n	800c18c <iridium_config+0xb8>
		// Get an ack message
		if (send_basic_command_message(self, ack, ACK_MESSAGE_SIZE, ONE_SECOND)
 800c0e6:	4b38      	ldr	r3, [pc, #224]	; (800c1c8 <iridium_config+0xf4>)
 800c0e8:	6819      	ldr	r1, [r3, #0]
 800c0ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c0ee:	2209      	movs	r2, #9
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fb3f 	bl	800c774 <send_basic_command_message>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	f113 0f04 	cmn.w	r3, #4
 800c0fc:	d103      	bne.n	800c106 <iridium_config+0x32>
				== IRIDIUM_COMMAND_RESPONSE_ERROR) {
			cycle_power(self);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fe70 	bl	800cde4 <cycle_power>
			continue;
 800c104:	e03f      	b.n	800c186 <iridium_config+0xb2>
		}
		// disable flow control
		if (send_basic_command_message(self, disable_flow_control, DISABLE_FLOW_CTRL_SIZE,
 800c106:	4b31      	ldr	r3, [pc, #196]	; (800c1cc <iridium_config+0xf8>)
 800c108:	6819      	ldr	r1, [r3, #0]
 800c10a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c10e:	220c      	movs	r2, #12
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fb2f 	bl	800c774 <send_basic_command_message>
 800c116:	4603      	mov	r3, r0
 800c118:	f113 0f04 	cmn.w	r3, #4
 800c11c:	d103      	bne.n	800c126 <iridium_config+0x52>
				ONE_SECOND) == IRIDIUM_COMMAND_RESPONSE_ERROR) {
			cycle_power(self);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fe60 	bl	800cde4 <cycle_power>
			continue;
 800c124:	e02f      	b.n	800c186 <iridium_config+0xb2>
		}
		// enable SBD ring indications
		if (send_basic_command_message(self, enable_ring_indications, ENABLE_RI_SIZE,
 800c126:	4b2a      	ldr	r3, [pc, #168]	; (800c1d0 <iridium_config+0xfc>)
 800c128:	6819      	ldr	r1, [r3, #0]
 800c12a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c12e:	2212      	movs	r2, #18
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fb1f 	bl	800c774 <send_basic_command_message>
 800c136:	4603      	mov	r3, r0
 800c138:	f113 0f04 	cmn.w	r3, #4
 800c13c:	d103      	bne.n	800c146 <iridium_config+0x72>
				ONE_SECOND) == IRIDIUM_COMMAND_RESPONSE_ERROR) {
			cycle_power(self);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 fe50 	bl	800cde4 <cycle_power>
			continue;
 800c144:	e01f      	b.n	800c186 <iridium_config+0xb2>
		}
		// Store this configuration as profile 0
		if (send_basic_command_message(self, store_config, STORE_CONFIG_SIZE, ONE_SECOND)
 800c146:	4b23      	ldr	r3, [pc, #140]	; (800c1d4 <iridium_config+0x100>)
 800c148:	6819      	ldr	r1, [r3, #0]
 800c14a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c14e:	220c      	movs	r2, #12
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fb0f 	bl	800c774 <send_basic_command_message>
 800c156:	4603      	mov	r3, r0
 800c158:	f113 0f04 	cmn.w	r3, #4
 800c15c:	d103      	bne.n	800c166 <iridium_config+0x92>
				== IRIDIUM_COMMAND_RESPONSE_ERROR) {
			cycle_power(self);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fe40 	bl	800cde4 <cycle_power>
			continue;
 800c164:	e00f      	b.n	800c186 <iridium_config+0xb2>
		}
		// set profile 0 as the power-up profile
		if (send_basic_command_message(self, select_power_up_profile, SELECT_PWR_UP_SIZE,
 800c166:	4b1c      	ldr	r3, [pc, #112]	; (800c1d8 <iridium_config+0x104>)
 800c168:	6819      	ldr	r1, [r3, #0]
 800c16a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c16e:	220c      	movs	r2, #12
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 faff 	bl	800c774 <send_basic_command_message>
 800c176:	4603      	mov	r3, r0
 800c178:	f113 0f04 	cmn.w	r3, #4
 800c17c:	d10a      	bne.n	800c194 <iridium_config+0xc0>
				ONE_SECOND) == IRIDIUM_COMMAND_RESPONSE_ERROR) {
			cycle_power(self);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fe30 	bl	800cde4 <cycle_power>
			continue;
 800c184:	bf00      	nop
	for (fail_counter = 0; fail_counter < MAX_RETRIES; fail_counter++) {
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3301      	adds	r3, #1
 800c18a:	60fb      	str	r3, [r7, #12]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b09      	cmp	r3, #9
 800c190:	dda9      	ble.n	800c0e6 <iridium_config+0x12>
 800c192:	e000      	b.n	800c196 <iridium_config+0xc2>
		} else {
			break;
 800c194:	bf00      	nop
		}
	}

	self->reset_uart(self, IRIDIUM_DEFAULT_BAUD_RATE);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19a:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	4798      	blx	r3

	if (fail_counter == MAX_RETRIES) {
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b0a      	cmp	r3, #10
 800c1a6:	d108      	bne.n	800c1ba <iridium_config+0xe6>
		return_code = IRIDIUM_UART_ERROR;
 800c1a8:	23fe      	movs	r3, #254	; 0xfe
 800c1aa:	72fb      	strb	r3, [r7, #11]
		tx_event_flags_set(self->error_flags, MODEM_ERROR, TX_OR);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2110      	movs	r1, #16
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f012 f803 	bl	801e1c0 <_txe_event_flags_set>
	}

	return return_code;
 800c1ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	2000000c 	.word	0x2000000c
 800c1cc:	20000010 	.word	0x20000010
 800c1d0:	20000014 	.word	0x20000014
 800c1d4:	20000018 	.word	0x20000018
 800c1d8:	2000001c 	.word	0x2000001c

0800c1dc <iridium_self_test>:
 *
 *
 * @return iridium_error_code_t
 */
iridium_error_code_t iridium_self_test(Iridium* self, uint32_t warmup_time)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
	int fail_counter;
	uint32_t start_time = 0, elapsed_time = 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60bb      	str	r3, [r7, #8]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	613b      	str	r3, [r7, #16]
	iridium_error_code_t return_code = IRIDIUM_SUCCESS;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
	// Power the unit by pulling the sleep pin to ground.
	self->on_off(self, GPIO_PIN_SET);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	4798      	blx	r3
	self->sleep(self, GPIO_PIN_SET);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c200:	2101      	movs	r1, #1
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	4798      	blx	r3

	start_time = HAL_GetTick();
 800c206:	f004 f9af 	bl	8010568 <HAL_GetTick>
 800c20a:	60b8      	str	r0, [r7, #8]
	// Wait an appropriate amount of time for the caps to charge
	while (elapsed_time < warmup_time) {
 800c20c:	e009      	b.n	800c222 <iridium_self_test+0x46>
		HAL_Delay(1000);
 800c20e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c212:	f002 f9f9 	bl	800e608 <HAL_Delay>
		elapsed_time = HAL_GetTick() - start_time;
 800c216:	f004 f9a7 	bl	8010568 <HAL_GetTick>
 800c21a:	4602      	mov	r2, r0
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	613b      	str	r3, [r7, #16]
	while (elapsed_time < warmup_time) {
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	429a      	cmp	r2, r3
 800c228:	d3f1      	bcc.n	800c20e <iridium_self_test+0x32>
	}

	for (fail_counter = 0; fail_counter < MAX_RETRIES; fail_counter++) {
 800c22a:	2300      	movs	r3, #0
 800c22c:	617b      	str	r3, [r7, #20]
 800c22e:	e011      	b.n	800c254 <iridium_self_test+0x78>
		// Get an ack message
		if (send_basic_command_message(self, ack, ACK_MESSAGE_SIZE, ONE_SECOND)
 800c230:	4b14      	ldr	r3, [pc, #80]	; (800c284 <iridium_self_test+0xa8>)
 800c232:	6819      	ldr	r1, [r3, #0]
 800c234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c238:	2209      	movs	r2, #9
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fa9a 	bl	800c774 <send_basic_command_message>
 800c240:	4603      	mov	r3, r0
 800c242:	f113 0f04 	cmn.w	r3, #4
 800c246:	d109      	bne.n	800c25c <iridium_self_test+0x80>
				== IRIDIUM_COMMAND_RESPONSE_ERROR) {
			cycle_power(self);
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fdcb 	bl	800cde4 <cycle_power>
	for (fail_counter = 0; fail_counter < MAX_RETRIES; fail_counter++) {
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	3301      	adds	r3, #1
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	2b09      	cmp	r3, #9
 800c258:	ddea      	ble.n	800c230 <iridium_self_test+0x54>
 800c25a:	e000      	b.n	800c25e <iridium_self_test+0x82>
		} else {
			break;
 800c25c:	bf00      	nop
		}
	}

	if (fail_counter == MAX_RETRIES) {
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2b0a      	cmp	r3, #10
 800c262:	d108      	bne.n	800c276 <iridium_self_test+0x9a>
		return_code = IRIDIUM_UART_ERROR;
 800c264:	23fe      	movs	r3, #254	; 0xfe
 800c266:	73fb      	strb	r3, [r7, #15]
		tx_event_flags_set(self->error_flags, MODEM_ERROR, TX_OR);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	2200      	movs	r2, #0
 800c26e:	2110      	movs	r1, #16
 800c270:	4618      	mov	r0, r3
 800c272:	f011 ffa5 	bl	801e1c0 <_txe_event_flags_set>
	}

	return return_code;
 800c276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	2000000c 	.word	0x2000000c

0800c288 <iridium_sleep>:
 * 					  GPIO_PIN_RESET for off
 *
 * @return void
 */
void iridium_sleep(Iridium* self, GPIO_PinState pin_state)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOD, IRIDIUM_OnOff_Pin, pin_state);
 800c294:	78fb      	ldrb	r3, [r7, #3]
 800c296:	461a      	mov	r2, r3
 800c298:	2180      	movs	r1, #128	; 0x80
 800c29a:	4803      	ldr	r0, [pc, #12]	; (800c2a8 <iridium_sleep+0x20>)
 800c29c:	f007 ff98 	bl	80141d0 <HAL_GPIO_WritePin>
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	42020c00 	.word	0x42020c00

0800c2ac <iridium_on_off>:
 * 					  GPIO_PIN_RESET for off
 *
 * @return void
 */
void iridium_on_off(Iridium* self, GPIO_PinState pin_state)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
	if (pin_state == GPIO_PIN_SET) {
 800c2b8:	78fb      	ldrb	r3, [r7, #3]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d10f      	bne.n	800c2de <iridium_on_off+0x32>
		HAL_GPIO_WritePin(GPIOF, BUS_5V_FET_Pin, pin_state);
 800c2be:	78fb      	ldrb	r3, [r7, #3]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	2104      	movs	r1, #4
 800c2c4:	480f      	ldr	r0, [pc, #60]	; (800c304 <iridium_on_off+0x58>)
 800c2c6:	f007 ff83 	bl	80141d0 <HAL_GPIO_WritePin>
		// Wait 10ms between powering 5V bus FET and the Iridium power FET
		HAL_Delay(10);
 800c2ca:	200a      	movs	r0, #10
 800c2cc:	f002 f99c 	bl	800e608 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, IRIDIUM_FET_Pin, pin_state);
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	2102      	movs	r1, #2
 800c2d6:	480c      	ldr	r0, [pc, #48]	; (800c308 <iridium_on_off+0x5c>)
 800c2d8:	f007 ff7a 	bl	80141d0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOD, IRIDIUM_FET_Pin, pin_state);
		HAL_Delay(10);
		HAL_GPIO_WritePin(GPIOF, BUS_5V_FET_Pin, pin_state);
	}
}
 800c2dc:	e00e      	b.n	800c2fc <iridium_on_off+0x50>
		HAL_GPIO_WritePin(GPIOD, IRIDIUM_FET_Pin, pin_state);
 800c2de:	78fb      	ldrb	r3, [r7, #3]
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	2102      	movs	r1, #2
 800c2e4:	4808      	ldr	r0, [pc, #32]	; (800c308 <iridium_on_off+0x5c>)
 800c2e6:	f007 ff73 	bl	80141d0 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800c2ea:	200a      	movs	r0, #10
 800c2ec:	f002 f98c 	bl	800e608 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, BUS_5V_FET_Pin, pin_state);
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	2104      	movs	r1, #4
 800c2f6:	4803      	ldr	r0, [pc, #12]	; (800c304 <iridium_on_off+0x58>)
 800c2f8:	f007 ff6a 	bl	80141d0 <HAL_GPIO_WritePin>
}
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	42021400 	.word	0x42021400
 800c308:	42020c00 	.word	0x42020c00

0800c30c <iridium_store_in_flash>:
 *
 *
 * @return iridium_error_code_t
 */
iridium_error_code_t iridium_store_in_flash(Iridium* self)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
	iridium_error_code_t return_code = IRIDIUM_SUCCESS;
 800c314:	2300      	movs	r3, #0
 800c316:	73fb      	strb	r3, [r7, #15]

	HAL_FLASH_Unlock();
 800c318:	f007 fc68 	bl	8013bec <HAL_FLASH_Unlock>

	// TODO: This will get implimented later to take the contents of the
	//       storage queue and stuff it in flash at some high page(s)

	HAL_FLASH_Lock();
 800c31c:	f007 fc88 	bl	8013c30 <HAL_FLASH_Lock>
	return return_code;
 800c320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <iridium_reset_iridium_uart>:
 *
 *
 * @return iridium_error_code_t
 */
iridium_error_code_t iridium_reset_iridium_uart(Iridium* self, uint16_t baud_rate)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	460b      	mov	r3, r1
 800c336:	807b      	strh	r3, [r7, #2]

	if (HAL_UART_DeInit(self->iridium_uart_handle) != HAL_OK) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f00d fd65 	bl	8019e0c <HAL_UART_DeInit>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <iridium_reset_iridium_uart+0x22>
		return IRIDIUM_UART_ERROR;
 800c348:	f06f 0301 	mvn.w	r3, #1
 800c34c:	e062      	b.n	800c414 <iridium_reset_iridium_uart+0xe8>
	}
	self->iridium_uart_handle->Instance = IRIDIUM_UART_INSTANCE;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	4a32      	ldr	r2, [pc, #200]	; (800c41c <iridium_reset_iridium_uart+0xf0>)
 800c354:	601a      	str	r2, [r3, #0]
	self->iridium_uart_handle->Init.BaudRate = baud_rate;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	887a      	ldrh	r2, [r7, #2]
 800c35c:	605a      	str	r2, [r3, #4]
	self->iridium_uart_handle->Init.WordLength = UART_WORDLENGTH_8B;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	609a      	str	r2, [r3, #8]
	self->iridium_uart_handle->Init.StopBits = UART_STOPBITS_1;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	60da      	str	r2, [r3, #12]
	self->iridium_uart_handle->Init.Parity = UART_PARITY_NONE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	611a      	str	r2, [r3, #16]
	self->iridium_uart_handle->Init.Mode = UART_MODE_TX_RX;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	220c      	movs	r2, #12
 800c37c:	615a      	str	r2, [r3, #20]
	self->iridium_uart_handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	619a      	str	r2, [r3, #24]
	self->iridium_uart_handle->Init.OverSampling = UART_OVERSAMPLING_16;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	61da      	str	r2, [r3, #28]
	self->iridium_uart_handle->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	621a      	str	r2, [r3, #32]
	self->iridium_uart_handle->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	625a      	str	r2, [r3, #36]	; 0x24
	self->iridium_uart_handle->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(self->iridium_uart_handle) != HAL_OK)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f00d fcce 	bl	8019d4c <HAL_UART_Init>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d002      	beq.n	800c3bc <iridium_reset_iridium_uart+0x90>
	{
	  return IRIDIUM_UART_ERROR;
 800c3b6:	f06f 0301 	mvn.w	r3, #1
 800c3ba:	e02b      	b.n	800c414 <iridium_reset_iridium_uart+0xe8>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(self->iridium_uart_handle, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f00f f9a3 	bl	801b70e <HAL_UARTEx_SetTxFifoThreshold>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <iridium_reset_iridium_uart+0xa8>
	{
	  return IRIDIUM_UART_ERROR;
 800c3ce:	f06f 0301 	mvn.w	r3, #1
 800c3d2:	e01f      	b.n	800c414 <iridium_reset_iridium_uart+0xe8>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(self->iridium_uart_handle, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	2100      	movs	r1, #0
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f00f f9d5 	bl	801b78a <HAL_UARTEx_SetRxFifoThreshold>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <iridium_reset_iridium_uart+0xc0>
	{
	  return IRIDIUM_UART_ERROR;
 800c3e6:	f06f 0301 	mvn.w	r3, #1
 800c3ea:	e013      	b.n	800c414 <iridium_reset_iridium_uart+0xe8>
	}
	if (HAL_UARTEx_DisableFifoMode(self->iridium_uart_handle) != HAL_OK)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f00f f953 	bl	801b69c <HAL_UARTEx_DisableFifoMode>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <iridium_reset_iridium_uart+0xd6>
	{
	  return IRIDIUM_UART_ERROR;
 800c3fc:	f06f 0301 	mvn.w	r3, #1
 800c400:	e008      	b.n	800c414 <iridium_reset_iridium_uart+0xe8>
	}

	LL_DMA_ResetChannel(GPDMA1, IRIDIUM_LL_TX_DMA_HANDLE);
 800c402:	2102      	movs	r1, #2
 800c404:	4806      	ldr	r0, [pc, #24]	; (800c420 <iridium_reset_iridium_uart+0xf4>)
 800c406:	f7ff fdc1 	bl	800bf8c <LL_DMA_ResetChannel>
	LL_DMA_ResetChannel(GPDMA1, IRIDIUM_LL_RX_DMA_HANDLE);
 800c40a:	2103      	movs	r1, #3
 800c40c:	4804      	ldr	r0, [pc, #16]	; (800c420 <iridium_reset_iridium_uart+0xf4>)
 800c40e:	f7ff fdbd 	bl	800bf8c <LL_DMA_ResetChannel>

	return IRIDIUM_SUCCESS;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	40005000 	.word	0x40005000
 800c420:	40020000 	.word	0x40020000

0800c424 <iridium_reset_timer>:
 *
 *
 * @return iridium_error_code_t
 */
iridium_error_code_t iridium_reset_timer(Iridium* self, uint8_t timeout_in_minutes)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	70fb      	strb	r3, [r7, #3]
	if (HAL_TIM_Base_DeInit(self->timer) != HAL_OK) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	4618      	mov	r0, r3
 800c436:	f00c ff91 	bl	801935c <HAL_TIM_Base_DeInit>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <iridium_reset_timer+0x22>
		return IRIDIUM_TIMER_ERROR;
 800c440:	f06f 0309 	mvn.w	r3, #9
 800c444:	e03c      	b.n	800c4c0 <iridium_reset_timer+0x9c>
	}
	// For debugging, not practical to set the timeout to 0
	if (timeout_in_minutes <= 0) {
 800c446:	78fb      	ldrb	r3, [r7, #3]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d108      	bne.n	800c45e <iridium_reset_timer+0x3a>
		self->timer->Init.Period = 1;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	2201      	movs	r2, #1
 800c452:	60da      	str	r2, [r3, #12]
		self->timer->Init.RepetitionCounter = 0;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	2200      	movs	r2, #0
 800c45a:	615a      	str	r2, [r3, #20]
 800c45c:	e009      	b.n	800c472 <iridium_reset_timer+0x4e>
	}
	else {
		self->timer->Init.Period = 59999;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800c466:	60da      	str	r2, [r3, #12]
		self->timer->Init.RepetitionCounter = timeout_in_minutes - 1;
 800c468:	78fb      	ldrb	r3, [r7, #3]
 800c46a:	1e5a      	subs	r2, r3, #1
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	615a      	str	r2, [r3, #20]
	}

	self->timer->Instance = IRIDIUM_TIMER_INSTANCE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	4a14      	ldr	r2, [pc, #80]	; (800c4c8 <iridium_reset_timer+0xa4>)
 800c478:	601a      	str	r2, [r3, #0]
	self->timer->Init.Prescaler = 12000;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800c482:	605a      	str	r2, [r3, #4]
	self->timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	2200      	movs	r2, #0
 800c48a:	609a      	str	r2, [r3, #8]
	self->timer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	2200      	movs	r2, #0
 800c492:	611a      	str	r2, [r3, #16]
	self->timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	2200      	movs	r2, #0
 800c49a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(self->timer) != HAL_OK) {
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f00c fef7 	bl	8019294 <HAL_TIM_Base_Init>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d002      	beq.n	800c4b2 <iridium_reset_timer+0x8e>
		return IRIDIUM_TIMER_ERROR;
 800c4ac:	f06f 0309 	mvn.w	r3, #9
 800c4b0:	e006      	b.n	800c4c0 <iridium_reset_timer+0x9c>
	}

	__HAL_TIM_CLEAR_FLAG(self->timer, TIM_FLAG_UPDATE);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f06f 0201 	mvn.w	r2, #1
 800c4bc:	611a      	str	r2, [r3, #16]

	return IRIDIUM_SUCCESS;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	40014800 	.word	0x40014800

0800c4cc <iridium_storage_queue_add>:
 *
 *
 * @return iridium_error_code_t
 */
iridium_error_code_t iridium_storage_queue_add(Iridium* self, sbd_message_type_52* payload)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
	if (self->storage_queue->num_msgs_enqueued == MAX_NUM_MSGS_STORED) {
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4da:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c4de:	f893 3890 	ldrb.w	r3, [r3, #2192]	; 0x890
 800c4e2:	2ba8      	cmp	r3, #168	; 0xa8
 800c4e4:	d102      	bne.n	800c4ec <iridium_storage_queue_add+0x20>
		return IRIDIUM_STORAGE_QUEUE_FULL;
 800c4e6:	f06f 0307 	mvn.w	r3, #7
 800c4ea:	e040      	b.n	800c56e <iridium_storage_queue_add+0xa2>
	}

	for (int i = 0; i < MAX_NUM_MSGS_STORED; i ++) {
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	60fb      	str	r3, [r7, #12]
 800c4f0:	e039      	b.n	800c566 <iridium_storage_queue_add+0x9a>
		if (!self->storage_queue->msg_queue[i].valid) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800c4fc:	fb01 f303 	mul.w	r3, r1, r3
 800c500:	4413      	add	r3, r2
 800c502:	f203 1349 	addw	r3, r3, #329	; 0x149
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	f083 0301 	eor.w	r3, r3, #1
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d026      	beq.n	800c560 <iridium_storage_queue_add+0x94>
			// copy the message over
			memcpy(&(self->storage_queue->msg_queue[i].payload), payload,
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800c51c:	fb01 f303 	mul.w	r3, r1, r3
 800c520:	4413      	add	r3, r2
 800c522:	f240 1249 	movw	r2, #329	; 0x149
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f014 f815 	bl	8020558 <memcpy>
					sizeof(sbd_message_type_52));
			// Make the entry valid
			self->storage_queue->msg_queue[i].valid = true;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800c538:	fb01 f303 	mul.w	r3, r1, r3
 800c53c:	4413      	add	r3, r2
 800c53e:	f203 1349 	addw	r3, r3, #329	; 0x149
 800c542:	2201      	movs	r2, #1
 800c544:	701a      	strb	r2, [r3, #0]
			self->storage_queue->num_msgs_enqueued++;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54a:	f503 4250 	add.w	r2, r3, #53248	; 0xd000
 800c54e:	f892 2890 	ldrb.w	r2, [r2, #2192]	; 0x890
 800c552:	3201      	adds	r2, #1
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c55a:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
			break;
 800c55e:	e005      	b.n	800c56c <iridium_storage_queue_add+0xa0>
	for (int i = 0; i < MAX_NUM_MSGS_STORED; i ++) {
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3301      	adds	r3, #1
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2ba7      	cmp	r3, #167	; 0xa7
 800c56a:	ddc2      	ble.n	800c4f2 <iridium_storage_queue_add+0x26>
		}
	}

	return IRIDIUM_SUCCESS;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <iridium_storage_queue_get>:
 * @param self- Iridium struct
 * @param msg_index - return parameter for next message index
 * @return iridium_error_code_t - either IRIDIUM_STORAGE_QUEUE_EMPTY or IRIDIUM_SUCCESS
 */
iridium_error_code_t iridium_storage_queue_get(Iridium* self, uint8_t* msg_index)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b086      	sub	sp, #24
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	6039      	str	r1, [r7, #0]
	float significant_wave_height = 0.0;
 800c580:	f04f 0300 	mov.w	r3, #0
 800c584:	617b      	str	r3, [r7, #20]
	float msg_wave_float = 0.0;
 800c586:	f04f 0300 	mov.w	r3, #0
 800c58a:	60fb      	str	r3, [r7, #12]
	real16_T msg_wave_height;
	msg_wave_height.bitPattern = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	813b      	strh	r3, [r7, #8]

	if (self->storage_queue->num_msgs_enqueued == 0) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c594:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c598:	f893 3890 	ldrb.w	r3, [r3, #2192]	; 0x890
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <iridium_storage_queue_get+0x30>
		return IRIDIUM_STORAGE_QUEUE_EMPTY;
 800c5a0:	f06f 0308 	mvn.w	r3, #8
 800c5a4:	e03d      	b.n	800c622 <iridium_storage_queue_get+0xac>
	}

	for (int i = 0; i < MAX_NUM_MSGS_STORED; i++) {
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	613b      	str	r3, [r7, #16]
 800c5aa:	e036      	b.n	800c61a <iridium_storage_queue_get+0xa4>
		if (self->storage_queue->msg_queue[i].valid) {
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800c5b6:	fb01 f303 	mul.w	r3, r1, r3
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f203 1349 	addw	r3, r3, #329	; 0x149
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d026      	beq.n	800c614 <iridium_storage_queue_get+0x9e>
			msg_wave_height = self->storage_queue->msg_queue[i].payload.Hs;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800c5d0:	fb01 f303 	mul.w	r3, r1, r3
 800c5d4:	4413      	add	r3, r2
 800c5d6:	795a      	ldrb	r2, [r3, #5]
 800c5d8:	799b      	ldrb	r3, [r3, #6]
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	041b      	lsls	r3, r3, #16
 800c5e0:	141b      	asrs	r3, r3, #16
 800c5e2:	813b      	strh	r3, [r7, #8]
			// Try following that! Gets the absolute value of msg_wave_height
			msg_wave_float = (float)fabs((double)halfToFloat(msg_wave_height));
 800c5e4:	8938      	ldrh	r0, [r7, #8]
 800c5e6:	f7fd fcc1 	bl	8009f6c <halfToFloat>
 800c5ea:	eef0 7a40 	vmov.f32	s15, s0
 800c5ee:	eef0 7ae7 	vabs.f32	s15, s15
 800c5f2:	edc7 7a03 	vstr	s15, [r7, #12]

			if (msg_wave_float >= significant_wave_height) {
 800c5f6:	ed97 7a03 	vldr	s14, [r7, #12]
 800c5fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c606:	db05      	blt.n	800c614 <iridium_storage_queue_get+0x9e>
				significant_wave_height = msg_wave_float;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	617b      	str	r3, [r7, #20]
				*msg_index = i;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_NUM_MSGS_STORED; i++) {
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	3301      	adds	r3, #1
 800c618:	613b      	str	r3, [r7, #16]
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2ba7      	cmp	r3, #167	; 0xa7
 800c61e:	ddc5      	ble.n	800c5ac <iridium_storage_queue_get+0x36>
			}
		}
	}

	return IRIDIUM_SUCCESS;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3718      	adds	r7, #24
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <iridium_storage_queue_flush>:
 *
 * @param self- Iridium struct
 * @return void
 */
void iridium_storage_queue_flush(Iridium* self)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b085      	sub	sp, #20
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
	// Zero out the whole thing
	for (int i = 0; i < MAX_NUM_MSGS_STORED; i++) {
 800c632:	2300      	movs	r3, #0
 800c634:	60fb      	str	r3, [r7, #12]
 800c636:	e00e      	b.n	800c656 <iridium_storage_queue_flush+0x2c>
		self->storage_queue->msg_queue[i].valid = false;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800c642:	fb01 f303 	mul.w	r3, r1, r3
 800c646:	4413      	add	r3, r2
 800c648:	f203 1349 	addw	r3, r3, #329	; 0x149
 800c64c:	2200      	movs	r2, #0
 800c64e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_NUM_MSGS_STORED; i++) {
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3301      	adds	r3, #1
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2ba7      	cmp	r3, #167	; 0xa7
 800c65a:	dded      	ble.n	800c638 <iridium_storage_queue_flush+0xe>
	}
	self->storage_queue->num_msgs_enqueued = 0;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
}
 800c66a:	bf00      	nop
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <send_msg_from_queue>:
 *
 * @param self- Iridium struct
 * @return iridium_error_code_t
 */
static iridium_error_code_t send_msg_from_queue(Iridium* self)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
	iridium_error_code_t return_code;
	uint8_t payload_index = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	73bb      	strb	r3, [r7, #14]
	return_code = self->queue_get(self, &payload_index);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c686:	f107 020e 	add.w	r2, r7, #14
 800c68a:	4611      	mov	r1, r2
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	4798      	blx	r3
 800c690:	4603      	mov	r3, r0
 800c692:	73fb      	strb	r3, [r7, #15]
	if (return_code == IRIDIUM_STORAGE_QUEUE_EMPTY) {
 800c694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c698:	f113 0f09 	cmn.w	r3, #9
 800c69c:	d102      	bne.n	800c6a4 <send_msg_from_queue+0x2e>
		return return_code;
 800c69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a2:	e02f      	b.n	800c704 <send_msg_from_queue+0x8e>
	}
	// try transmitting the message
	return_code = internal_transmit_message(self,
			(uint8_t*)&(self->storage_queue->msg_queue[payload_index].payload),
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800c6b0:	fb01 f303 	mul.w	r3, r1, r3
 800c6b4:	4413      	add	r3, r2
	return_code = internal_transmit_message(self,
 800c6b6:	f240 1249 	movw	r2, #329	; 0x149
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f98f 	bl	800c9e0 <internal_transmit_message>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	73fb      	strb	r3, [r7, #15]
			sizeof(sbd_message_type_52));
	// If the message successfully transmitted, mark it as invalid
	if (return_code == IRIDIUM_SUCCESS) {
 800c6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d118      	bne.n	800c700 <send_msg_from_queue+0x8a>
		self->storage_queue->msg_queue[payload_index].valid = false;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800c6da:	fb01 f303 	mul.w	r3, r1, r3
 800c6de:	4413      	add	r3, r2
 800c6e0:	f203 1349 	addw	r3, r3, #329	; 0x149
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
		self->storage_queue->num_msgs_enqueued--;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ec:	f503 4250 	add.w	r2, r3, #53248	; 0xd000
 800c6f0:	f892 2890 	ldrb.w	r2, [r2, #2192]	; 0x890
 800c6f4:	3a01      	subs	r2, #1
 800c6f6:	b2d2      	uxtb	r2, r2
 800c6f8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c6fc:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
	}
	return return_code;
 800c700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <get_checksum>:
 *
 *
 * @return iridium_error_code_t
 */
static void get_checksum(uint8_t* payload, size_t payload_size)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	uint16_t checksum = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	81fb      	strh	r3, [r7, #14]
	uint8_t* checksum_ptr = (uint8_t*)&checksum;
 800c71a:	f107 030e 	add.w	r3, r7, #14
 800c71e:	613b      	str	r3, [r7, #16]
	// calculate checksum
	for (int i = 0; i < payload_size; i++) {
 800c720:	2300      	movs	r3, #0
 800c722:	617b      	str	r3, [r7, #20]
 800c724:	e00b      	b.n	800c73e <get_checksum+0x32>
		checksum += payload[i];
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	4413      	add	r3, r2
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	b29a      	uxth	r2, r3
 800c730:	89fb      	ldrh	r3, [r7, #14]
 800c732:	4413      	add	r3, r2
 800c734:	b29b      	uxth	r3, r3
 800c736:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < payload_size; i++) {
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	3301      	adds	r3, #1
 800c73c:	617b      	str	r3, [r7, #20]
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	429a      	cmp	r2, r3
 800c744:	d8ef      	bhi.n	800c726 <get_checksum+0x1a>
	}
	// place checksum in the last two bytes of the payload array
	payload[payload_size + 1] = ((uint8_t)*checksum_ptr);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	4413      	add	r3, r2
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	7812      	ldrb	r2, [r2, #0]
 800c752:	701a      	strb	r2, [r3, #0]
	checksum_ptr++;
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	3301      	adds	r3, #1
 800c758:	613b      	str	r3, [r7, #16]
	payload[payload_size] = ((uint8_t)*checksum_ptr);
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	4413      	add	r3, r2
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	7812      	ldrb	r2, [r2, #0]
 800c764:	701a      	strb	r2, [r3, #0]
}
 800c766:	bf00      	nop
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
	...

0800c774 <send_basic_command_message>:
 *
 * @return iridium_error_code_t
 */
static iridium_error_code_t send_basic_command_message(Iridium* self,
		const char* command, uint8_t response_size, uint32_t wait_time)
{
 800c774:	b590      	push	{r4, r7, lr}
 800c776:	b087      	sub	sp, #28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	603b      	str	r3, [r7, #0]
 800c780:	4613      	mov	r3, r2
 800c782:	71fb      	strb	r3, [r7, #7]
	char * needle;

	self->reset_uart(self, IRIDIUM_DEFAULT_BAUD_RATE);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c788:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	4798      	blx	r3
	memset(&(self->response_buffer[0]), 0, IRIDIUM_MAX_RESPONSE_SIZE);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c794:	2240      	movs	r2, #64	; 0x40
 800c796:	2100      	movs	r1, #0
 800c798:	4618      	mov	r0, r3
 800c79a:	f013 feea 	bl	8020572 <memset>

	HAL_UART_Transmit(self->iridium_uart_handle, (uint8_t*)&(command[0]),
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	685c      	ldr	r4, [r3, #4]
			strlen(command), wait_time);
 800c7a2:	68b8      	ldr	r0, [r7, #8]
 800c7a4:	f7f3 fe8a 	bl	80004bc <strlen>
 800c7a8:	4603      	mov	r3, r0
	HAL_UART_Transmit(self->iridium_uart_handle, (uint8_t*)&(command[0]),
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	68b9      	ldr	r1, [r7, #8]
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f00d fb75 	bl	8019ea0 <HAL_UART_Transmit>
	HAL_UART_Receive(self->iridium_uart_handle, &(self->response_buffer[0]),
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6858      	ldr	r0, [r3, #4]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	f00d fc11 	bl	8019fea <HAL_UART_Receive>
			response_size, wait_time);

	needle = strstr((char*)&(self->response_buffer[0]), "OK");
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7cc:	490b      	ldr	r1, [pc, #44]	; (800c7fc <send_basic_command_message+0x88>)
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f013 fee6 	bl	80205a0 <strstr>
 800c7d4:	6178      	str	r0, [r7, #20]
	memset(&(self->response_buffer[0]), 0, IRIDIUM_MAX_RESPONSE_SIZE);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7da:	2240      	movs	r2, #64	; 0x40
 800c7dc:	2100      	movs	r1, #0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f013 fec7 	bl	8020572 <memset>
	return (needle == NULL) ? IRIDIUM_COMMAND_RESPONSE_ERROR : IRIDIUM_SUCCESS;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <send_basic_command_message+0x7c>
 800c7ea:	f06f 0303 	mvn.w	r3, #3
 800c7ee:	e000      	b.n	800c7f2 <send_basic_command_message+0x7e>
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	371c      	adds	r7, #28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd90      	pop	{r4, r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	080235ec 	.word	0x080235ec

0800c800 <iridium_transmit_message>:
 *
 *
 * @return iridium_error_code_t
 */
iridium_error_code_t iridium_transmit_message(Iridium* self)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b088      	sub	sp, #32
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	iridium_error_code_t return_code = IRIDIUM_SUCCESS;
 800c808:	2300      	movs	r3, #0
 800c80a:	77fb      	strb	r3, [r7, #31]
	iridium_error_code_t queue_return_code __attribute__((unused));
	int fail_counter;
	bool message_tx_success = false;
 800c80c:	2300      	movs	r3, #0
 800c80e:	75fb      	strb	r3, [r7, #23]
	bool all_messages_sent = false;
 800c810:	2300      	movs	r3, #0
 800c812:	75bb      	strb	r3, [r7, #22]
	uint32_t timer_minutes = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	613b      	str	r3, [r7, #16]

	// Make sure we can get an acknowledgment from the modem
	for (fail_counter = 0; fail_counter < MAX_RETRIES; fail_counter++) {
 800c818:	2300      	movs	r3, #0
 800c81a:	61bb      	str	r3, [r7, #24]
 800c81c:	e011      	b.n	800c842 <iridium_transmit_message+0x42>
		if (send_basic_command_message(self, ack, ACK_MESSAGE_SIZE, ONE_SECOND)
 800c81e:	4b6f      	ldr	r3, [pc, #444]	; (800c9dc <iridium_transmit_message+0x1dc>)
 800c820:	6819      	ldr	r1, [r3, #0]
 800c822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c826:	2209      	movs	r2, #9
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ffa3 	bl	800c774 <send_basic_command_message>
 800c82e:	4603      	mov	r3, r0
 800c830:	f113 0f04 	cmn.w	r3, #4
 800c834:	d109      	bne.n	800c84a <iridium_transmit_message+0x4a>
				== IRIDIUM_COMMAND_RESPONSE_ERROR) {
			cycle_power(self);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fad4 	bl	800cde4 <cycle_power>
	for (fail_counter = 0; fail_counter < MAX_RETRIES; fail_counter++) {
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	3301      	adds	r3, #1
 800c840:	61bb      	str	r3, [r7, #24]
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	2b09      	cmp	r3, #9
 800c846:	ddea      	ble.n	800c81e <iridium_transmit_message+0x1e>
 800c848:	e000      	b.n	800c84c <iridium_transmit_message+0x4c>
		} else {
			break;
 800c84a:	bf00      	nop
		}
	}
	// If we were unable to get an ack from the modem, return IRIDIUM_UART_ERROR
	if (fail_counter == MAX_RETRIES) {
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	2b0a      	cmp	r3, #10
 800c850:	d102      	bne.n	800c858 <iridium_transmit_message+0x58>
		return IRIDIUM_UART_ERROR;
 800c852:	f06f 0301 	mvn.w	r3, #1
 800c856:	e0bd      	b.n	800c9d4 <iridium_transmit_message+0x1d4>
	}

	// We'll add extra time to the transmit window if there are a bunch of messages in the queue
	if (self->storage_queue->num_msgs_enqueued >= 5 && self->storage_queue->num_msgs_enqueued < 10) {
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c860:	f893 3890 	ldrb.w	r3, [r3, #2192]	; 0x890
 800c864:	2b04      	cmp	r3, #4
 800c866:	d90d      	bls.n	800c884 <iridium_transmit_message+0x84>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c870:	f893 3890 	ldrb.w	r3, [r3, #2192]	; 0x890
 800c874:	2b09      	cmp	r3, #9
 800c876:	d805      	bhi.n	800c884 <iridium_transmit_message+0x84>
		timer_minutes = self->global_config->iridium_max_transmit_time + 5;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	3305      	adds	r3, #5
 800c880:	613b      	str	r3, [r7, #16]
 800c882:	e011      	b.n	800c8a8 <iridium_transmit_message+0xa8>
	}
	else if (self->storage_queue->num_msgs_enqueued >= 10) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c888:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c88c:	f893 3890 	ldrb.w	r3, [r3, #2192]	; 0x890
 800c890:	2b09      	cmp	r3, #9
 800c892:	d905      	bls.n	800c8a0 <iridium_transmit_message+0xa0>
		timer_minutes = self->global_config->iridium_max_transmit_time + 10;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	330a      	adds	r3, #10
 800c89c:	613b      	str	r3, [r7, #16]
 800c89e:	e003      	b.n	800c8a8 <iridium_transmit_message+0xa8>
	} else {
		timer_minutes = self->global_config->iridium_max_transmit_time;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	613b      	str	r3, [r7, #16]
	}

	// reset the timer and clear the interrupt flag
	self->timer_timeout = false;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	self->reset_timer(self, timer_minutes);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	b2d2      	uxtb	r2, r2
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	4798      	blx	r3
	// Start the timer in interrupt mode
	HAL_TIM_Base_Start_IT(self->timer);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f00c fdb0 	bl	8019428 <HAL_TIM_Base_Start_IT>
	// Send the message that was just generated
	while (!self->timer_timeout && !message_tx_success) {
 800c8c8:	e018      	b.n	800c8fc <iridium_transmit_message+0xfc>
		return_code = internal_transmit_message(self, (uint8_t*)self->current_message,
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	f240 1247 	movw	r2, #327	; 0x147
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f883 	bl	800c9e0 <internal_transmit_message>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	77fb      	strb	r3, [r7, #31]
				sizeof(sbd_message_type_52) - IRIDIUM_CHECKSUM_LENGTH);

		if (return_code == IRIDIUM_UART_ERROR) {
 800c8de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8e2:	f113 0f02 	cmn.w	r3, #2
 800c8e6:	d102      	bne.n	800c8ee <iridium_transmit_message+0xee>
			cycle_power(self);
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 fa7b 	bl	800cde4 <cycle_power>
		}
		message_tx_success = return_code == IRIDIUM_SUCCESS;
 800c8ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	bf0c      	ite	eq
 800c8f6:	2301      	moveq	r3, #1
 800c8f8:	2300      	movne	r3, #0
 800c8fa:	75fb      	strb	r3, [r7, #23]
	while (!self->timer_timeout && !message_tx_success) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c902:	f083 0301 	eor.w	r3, r3, #1
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d005      	beq.n	800c918 <iridium_transmit_message+0x118>
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	f083 0301 	eor.w	r3, r3, #1
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1d8      	bne.n	800c8ca <iridium_transmit_message+0xca>
	}

	// If we made it here, there's still time left, try sending a queued message
	// First, make sure we actually have messages in the queue
	all_messages_sent = self->storage_queue->num_msgs_enqueued == 0;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c920:	f893 3890 	ldrb.w	r3, [r3, #2192]	; 0x890
 800c924:	2b00      	cmp	r3, #0
 800c926:	bf0c      	ite	eq
 800c928:	2301      	moveq	r3, #1
 800c92a:	2300      	movne	r3, #0
 800c92c:	75bb      	strb	r3, [r7, #22]
	// If we have time, send messages from the queue
	while (!self->timer_timeout && !all_messages_sent) {
 800c92e:	e00f      	b.n	800c950 <iridium_transmit_message+0x150>
		queue_return_code = send_msg_from_queue(self);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff fea0 	bl	800c676 <send_msg_from_queue>
 800c936:	4603      	mov	r3, r0
 800c938:	73fb      	strb	r3, [r7, #15]
		all_messages_sent = self->storage_queue->num_msgs_enqueued == 0;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c942:	f893 3890 	ldrb.w	r3, [r3, #2192]	; 0x890
 800c946:	2b00      	cmp	r3, #0
 800c948:	bf0c      	ite	eq
 800c94a:	2301      	moveq	r3, #1
 800c94c:	2300      	movne	r3, #0
 800c94e:	75bb      	strb	r3, [r7, #22]
	while (!self->timer_timeout && !all_messages_sent) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c956:	f083 0301 	eor.w	r3, r3, #1
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <iridium_transmit_message+0x16c>
 800c960:	7dbb      	ldrb	r3, [r7, #22]
 800c962:	f083 0301 	eor.w	r3, r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e1      	bne.n	800c930 <iridium_transmit_message+0x130>
	}

	// Message failed to send. If there is space in the queue, store it,
	// otherwise return IRIDIUM_STORAGE_QUEUE_FULL
	if (self->timer_timeout && !message_tx_success) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c972:	2b00      	cmp	r3, #0
 800c974:	d01d      	beq.n	800c9b2 <iridium_transmit_message+0x1b2>
 800c976:	7dfb      	ldrb	r3, [r7, #23]
 800c978:	f083 0301 	eor.w	r3, r3, #1
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d017      	beq.n	800c9b2 <iridium_transmit_message+0x1b2>
		// reset the timer and clear the flag for the next time
		HAL_TIM_Base_Stop_IT(self->timer);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	4618      	mov	r0, r3
 800c988:	f00c fdee 	bl	8019568 <HAL_TIM_Base_Stop_IT>
		self->timer_timeout = false;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		__HAL_TIM_CLEAR_FLAG(self->timer, TIM_FLAG_UPDATE);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f06f 0201 	mvn.w	r2, #1
 800c99e:	611a      	str	r2, [r3, #16]

		return self->queue_add(self, self->current_message);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	6a12      	ldr	r2, [r2, #32]
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	4798      	blx	r3
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	e010      	b.n	800c9d4 <iridium_transmit_message+0x1d4>
	}



	// reset the timer and clear the flag for the next time
	HAL_TIM_Base_Stop_IT(self->timer);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f00c fdd6 	bl	8019568 <HAL_TIM_Base_Stop_IT>
	self->timer_timeout = false;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	__HAL_TIM_CLEAR_FLAG(self->timer, TIM_FLAG_UPDATE);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f06f 0201 	mvn.w	r2, #1
 800c9ce:	611a      	str	r2, [r3, #16]
	return return_code;
 800c9d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3720      	adds	r7, #32
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	2000000c 	.word	0x2000000c

0800c9e0 <internal_transmit_message>:
 * 		   IRIDIUM_TRANSMIT_ERROR if it didn't send
 * 		   IRIDIUM_UART_ERROR if something went wrong trying to talk to the modem
 */
static iridium_error_code_t internal_transmit_message(Iridium* self,
		uint8_t* payload, uint16_t payload_size)
{
 800c9e0:	b5b0      	push	{r4, r5, r7, lr}
 800c9e2:	b090      	sub	sp, #64	; 0x40
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	80fb      	strh	r3, [r7, #6]
	iridium_error_code_t return_code = IRIDIUM_TRANSMIT_TIMEOUT;
 800c9ee:	23f5      	movs	r3, #245	; 0xf5
 800c9f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	char* needle;
	char payload_size_str[4];
	char load_sbd[15] = "AT+SBDWB=";
 800c9f4:	4a99      	ldr	r2, [pc, #612]	; (800cc5c <internal_transmit_message+0x27c>)
 800c9f6:	f107 0314 	add.w	r3, r7, #20
 800c9fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800c9fc:	c303      	stmia	r3!, {r0, r1}
 800c9fe:	801a      	strh	r2, [r3, #0]
 800ca00:	f107 031e 	add.w	r3, r7, #30
 800ca04:	2200      	movs	r2, #0
 800ca06:	601a      	str	r2, [r3, #0]
 800ca08:	711a      	strb	r2, [r3, #4]
//	int delay_time;
//	bool sleep_break;
	bool checksum_match;

	// Assemble the load_sbd string
	itoa(payload_size, payload_size_str, 10);
 800ca0a:	88fb      	ldrh	r3, [r7, #6]
 800ca0c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800ca10:	220a      	movs	r2, #10
 800ca12:	4618      	mov	r0, r3
 800ca14:	f013 fd9e 	bl	8020554 <itoa>
	strcat(load_sbd, payload_size_str);
 800ca18:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ca1c:	f107 0314 	add.w	r3, r7, #20
 800ca20:	4611      	mov	r1, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f013 fdad 	bl	8020582 <strcat>
	load_sbd[12] = '\r';
 800ca28:	230d      	movs	r3, #13
 800ca2a:	f887 3020 	strb.w	r3, [r7, #32]

	while (!self->timer_timeout) {
 800ca2e:	e106      	b.n	800cc3e <internal_transmit_message+0x25e>
		// get the checksum
		get_checksum((uint8_t*)payload, payload_size);
 800ca30:	88fb      	ldrh	r3, [r7, #6]
 800ca32:	4619      	mov	r1, r3
 800ca34:	68b8      	ldr	r0, [r7, #8]
 800ca36:	f7ff fe69 	bl	800c70c <get_checksum>
		// reset flags
//		sleep_break = false;
		checksum_match = true;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		// Tell the modem we want to send a message
		for (fail_counter = 0; fail_counter < MAX_RETRIES && !self->timer_timeout; fail_counter++) {
 800ca40:	2300      	movs	r3, #0
 800ca42:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca44:	e040      	b.n	800cac8 <internal_transmit_message+0xe8>
			HAL_UART_Transmit(self->iridium_uart_handle, (uint8_t*)&(load_sbd[0]),
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	685c      	ldr	r4, [r3, #4]
					strlen(load_sbd), ONE_SECOND);
 800ca4a:	f107 0314 	add.w	r3, r7, #20
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7f3 fd34 	bl	80004bc <strlen>
 800ca54:	4603      	mov	r3, r0
			HAL_UART_Transmit(self->iridium_uart_handle, (uint8_t*)&(load_sbd[0]),
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	f107 0114 	add.w	r1, r7, #20
 800ca5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca60:	4620      	mov	r0, r4
 800ca62:	f00d fa1d 	bl	8019ea0 <HAL_UART_Transmit>

			HAL_UART_Receive(self->iridium_uart_handle,
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6858      	ldr	r0, [r3, #4]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800ca6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca72:	2216      	movs	r2, #22
 800ca74:	f00d fab9 	bl	8019fea <HAL_UART_Receive>
					&(self->response_buffer[0]), SBDWB_READY_RESPONSE_SIZE, ONE_SECOND);

			needle = strstr((char*)&(self->response_buffer[0]), "READY");
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7c:	4978      	ldr	r1, [pc, #480]	; (800cc60 <internal_transmit_message+0x280>)
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f013 fd8e 	bl	80205a0 <strstr>
 800ca84:	6338      	str	r0, [r7, #48]	; 0x30
			// Success case
			if (needle != NULL) {
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00d      	beq.n	800caa8 <internal_transmit_message+0xc8>
				memset(&(self->response_buffer[0]), 0, IRIDIUM_MAX_RESPONSE_SIZE);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca90:	2240      	movs	r2, #64	; 0x40
 800ca92:	2100      	movs	r1, #0
 800ca94:	4618      	mov	r0, r3
 800ca96:	f013 fd6c 	bl	8020572 <memset>
				self->reset_uart(self, IRIDIUM_DEFAULT_BAUD_RATE);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca9e:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	4798      	blx	r3
				break;
 800caa6:	e01a      	b.n	800cade <internal_transmit_message+0xfe>
			}
			// Clear the response buffer and reset UART for the next step
			memset(&(self->response_buffer[0]), 0, IRIDIUM_MAX_RESPONSE_SIZE);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caac:	2240      	movs	r2, #64	; 0x40
 800caae:	2100      	movs	r1, #0
 800cab0:	4618      	mov	r0, r3
 800cab2:	f013 fd5e 	bl	8020572 <memset>
			self->reset_uart(self, IRIDIUM_DEFAULT_BAUD_RATE);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caba:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	4798      	blx	r3
		for (fail_counter = 0; fail_counter < MAX_RETRIES && !self->timer_timeout; fail_counter++) {
 800cac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac4:	3301      	adds	r3, #1
 800cac6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	2b09      	cmp	r3, #9
 800cacc:	dc07      	bgt.n	800cade <internal_transmit_message+0xfe>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cad4:	f083 0301 	eor.w	r3, r3, #1
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1b3      	bne.n	800ca46 <internal_transmit_message+0x66>
		}

		if (fail_counter == MAX_RETRIES) {
 800cade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae0:	2b0a      	cmp	r3, #10
 800cae2:	d146      	bne.n	800cb72 <internal_transmit_message+0x192>
			return_code = IRIDIUM_UART_ERROR;
 800cae4:	23fe      	movs	r3, #254	; 0xfe
 800cae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			continue;
 800caea:	e0a8      	b.n	800cc3e <internal_transmit_message+0x25e>
		}

		// Send over the payload + checksum
		while (!self->timer_timeout) {
			HAL_UART_Transmit(self->iridium_uart_handle, (uint8_t*)&(payload[0]),
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6858      	ldr	r0, [r3, #4]
 800caf0:	88fb      	ldrh	r3, [r7, #6]
 800caf2:	3302      	adds	r3, #2
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cafa:	68b9      	ldr	r1, [r7, #8]
 800cafc:	f00d f9d0 	bl	8019ea0 <HAL_UART_Transmit>
					payload_size + IRIDIUM_CHECKSUM_LENGTH, ONE_SECOND * 2);

			HAL_UART_Receive(self->iridium_uart_handle,
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6858      	ldr	r0, [r3, #4]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800cb08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb0c:	220b      	movs	r2, #11
 800cb0e:	f00d fa6c 	bl	8019fea <HAL_UART_Receive>
					&(self->response_buffer[0]), SBDWB_LOAD_RESPONSE_SIZE, ONE_SECOND);

			SBDWB_response_code = self->response_buffer[SBDWB_RESPONSE_CODE_INDEX];
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb16:	3302      	adds	r3, #2
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			// Success case
			if (SBDWB_response_code == '0') {
 800cb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb22:	2b30      	cmp	r3, #48	; 0x30
 800cb24:	d110      	bne.n	800cb48 <internal_transmit_message+0x168>
				memset(&(self->response_buffer[0]), 0, IRIDIUM_MAX_RESPONSE_SIZE);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2a:	2240      	movs	r2, #64	; 0x40
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f013 fd1f 	bl	8020572 <memset>
				self->reset_uart(self, IRIDIUM_DEFAULT_BAUD_RATE);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb38:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	4798      	blx	r3
				checksum_match = true;
 800cb40:	2301      	movs	r3, #1
 800cb42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800cb46:	e01c      	b.n	800cb82 <internal_transmit_message+0x1a2>
			}

			// Response of 2 means checksum didn't match, loop around and try again
			if (SBDWB_response_code == '2') {
 800cb48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb4c:	2b32      	cmp	r3, #50	; 0x32
 800cb4e:	d103      	bne.n	800cb58 <internal_transmit_message+0x178>
				checksum_match = false;
 800cb50:	2300      	movs	r3, #0
 800cb52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800cb56:	e014      	b.n	800cb82 <internal_transmit_message+0x1a2>
			}
			// Clear the response buffer and reset UART for the next step
			memset(&(self->response_buffer[0]), 0, IRIDIUM_MAX_RESPONSE_SIZE);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5c:	2240      	movs	r2, #64	; 0x40
 800cb5e:	2100      	movs	r1, #0
 800cb60:	4618      	mov	r0, r3
 800cb62:	f013 fd06 	bl	8020572 <memset>
			self->reset_uart(self, IRIDIUM_DEFAULT_BAUD_RATE);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb6a:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	4798      	blx	r3
		while (!self->timer_timeout) {
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cb78:	f083 0301 	eor.w	r3, r3, #1
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1b4      	bne.n	800caec <internal_transmit_message+0x10c>
		}

		if ((fail_counter == MAX_RETRIES) || (!checksum_match)) {
 800cb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb84:	2b0a      	cmp	r3, #10
 800cb86:	d006      	beq.n	800cb96 <internal_transmit_message+0x1b6>
 800cb88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb8c:	f083 0301 	eor.w	r3, r3, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d04a      	beq.n	800cc2c <internal_transmit_message+0x24c>
			return_code = IRIDIUM_UART_ERROR;
 800cb96:	23fe      	movs	r3, #254	; 0xfe
 800cb98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			continue;
 800cb9c:	e04f      	b.n	800cc3e <internal_transmit_message+0x25e>
		}

		// Tell the modem to send the message
		while(!self->timer_timeout) {
			HAL_UART_Transmit(self->iridium_uart_handle, (uint8_t*)&(send_sbd[0]),
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	685c      	ldr	r4, [r3, #4]
 800cba2:	4b30      	ldr	r3, [pc, #192]	; (800cc64 <internal_transmit_message+0x284>)
 800cba4:	681d      	ldr	r5, [r3, #0]
					strlen(send_sbd), ONE_SECOND);
 800cba6:	4b2f      	ldr	r3, [pc, #188]	; (800cc64 <internal_transmit_message+0x284>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7f3 fc86 	bl	80004bc <strlen>
 800cbb0:	4603      	mov	r3, r0
			HAL_UART_Transmit(self->iridium_uart_handle, (uint8_t*)&(send_sbd[0]),
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f00d f970 	bl	8019ea0 <HAL_UART_Transmit>
			// We will only grab the response up to and including MO status
			HAL_UART_Receive(self->iridium_uart_handle,
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6858      	ldr	r0, [r3, #4]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800cbc8:	f648 03b8 	movw	r3, #35000	; 0x88b8
 800cbcc:	2213      	movs	r2, #19
 800cbce:	f00d fa0c 	bl	8019fea <HAL_UART_Receive>
					&(self->response_buffer[0]), SBDI_RESPONSE_SIZE, ONE_SECOND * 35);
			// Grab the MO status
			SBDI_response_code = atoi((char*)&(self->response_buffer[SBDI_RESPONSE_CODE_INDEX]));
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd6:	3310      	adds	r3, #16
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f013 fc74 	bl	80204c6 <atoi>
 800cbde:	62b8      	str	r0, [r7, #40]	; 0x28

			HAL_Delay(ONE_SECOND * 15);
 800cbe0:	f643 2098 	movw	r0, #15000	; 0x3a98
 800cbe4:	f001 fd10 	bl	800e608 <HAL_Delay>

			if (SBDI_response_code == 1) {
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d110      	bne.n	800cc10 <internal_transmit_message+0x230>
				if (send_basic_command_message(self, clear_MO, SBDD_RESPONSE_SIZE, ONE_SECOND * 10) ==
 800cbee:	4b1e      	ldr	r3, [pc, #120]	; (800cc68 <internal_transmit_message+0x288>)
 800cbf0:	6819      	ldr	r1, [r3, #0]
 800cbf2:	f242 7310 	movw	r3, #10000	; 0x2710
 800cbf6:	2214      	movs	r2, #20
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f7ff fdbb 	bl	800c774 <send_basic_command_message>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	f113 0f04 	cmn.w	r3, #4
 800cc04:	d102      	bne.n	800cc0c <internal_transmit_message+0x22c>
											IRIDIUM_COMMAND_RESPONSE_ERROR) {
					cycle_power(self);
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 f8ec 	bl	800cde4 <cycle_power>
				}
				return IRIDIUM_SUCCESS;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e021      	b.n	800cc54 <internal_transmit_message+0x274>
			}

			memset(&(self->response_buffer[0]), 0, IRIDIUM_MAX_RESPONSE_SIZE);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc14:	2240      	movs	r2, #64	; 0x40
 800cc16:	2100      	movs	r1, #0
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f013 fcaa 	bl	8020572 <memset>
			self->reset_uart(self, IRIDIUM_DEFAULT_BAUD_RATE);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc22:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	4798      	blx	r3
			break;
 800cc2a:	e008      	b.n	800cc3e <internal_transmit_message+0x25e>
		while(!self->timer_timeout) {
 800cc2c:	bf00      	nop
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cc34:	f083 0301 	eor.w	r3, r3, #1
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1af      	bne.n	800cb9e <internal_transmit_message+0x1be>
	while (!self->timer_timeout) {
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cc44:	f083 0301 	eor.w	r3, r3, #1
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f47f aef0 	bne.w	800ca30 <internal_transmit_message+0x50>
		}
	}

	return return_code;
 800cc50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3740      	adds	r7, #64	; 0x40
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bdb0      	pop	{r4, r5, r7, pc}
 800cc5c:	080235f8 	.word	0x080235f8
 800cc60:	080235f0 	.word	0x080235f0
 800cc64:	20000024 	.word	0x20000024
 800cc68:	20000020 	.word	0x20000020

0800cc6c <iridium_transmit_error_message>:
 * @return IRIDIUM_SUCCESS to indicate message was sent
 * 		   IRIDIUM_TRANSMIT_ERROR if it didn't send
 * 		   IRIDIUM_UART_ERROR if something went wrong trying to talk to the modem
 */
iridium_error_code_t iridium_transmit_error_message(Iridium* self, char* error_message)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
	iridium_error_code_t return_code = IRIDIUM_SUCCESS;
 800cc76:	2300      	movs	r3, #0
 800cc78:	77fb      	strb	r3, [r7, #31]
	uint16_t error_msg_str_length = strlen(error_message);
 800cc7a:	6838      	ldr	r0, [r7, #0]
 800cc7c:	f7f3 fc1e 	bl	80004bc <strlen>
 800cc80:	4603      	mov	r3, r0
 800cc82:	83bb      	strh	r3, [r7, #28]
	uint16_t payload_iterator = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	833b      	strh	r3, [r7, #24]
//	char error_message_payload[IRIDIUM_ERROR_MESSAGE_PAYLOAD_SIZE + IRIDIUM_CHECKSUM_LENGTH];
	float timestamp;
	float* timestamp_ptr = &timestamp;
 800cc88:	f107 0308 	add.w	r3, r7, #8
 800cc8c:	617b      	str	r3, [r7, #20]
	float* lat_ptr = &self->current_lat;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3330      	adds	r3, #48	; 0x30
 800cc92:	613b      	str	r3, [r7, #16]
	float* lon_ptr = &self->current_lon;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3334      	adds	r3, #52	; 0x34
 800cc98:	60fb      	str	r3, [r7, #12]
	bool message_tx_success = false;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	76fb      	strb	r3, [r7, #27]

	// If the error message is too long, we'll just cut it off
	if (error_msg_str_length > ERROR_MESSAGE_MAX_LENGTH - 1) {
 800cc9e:	8bbb      	ldrh	r3, [r7, #28]
 800cca0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800cca4:	d307      	bcc.n	800ccb6 <iridium_transmit_error_message+0x4a>
		error_message[ERROR_MESSAGE_MAX_LENGTH - 1] = 0;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	f203 133f 	addw	r3, r3, #319	; 0x13f
 800ccac:	2200      	movs	r2, #0
 800ccae:	701a      	strb	r2, [r3, #0]
		error_msg_str_length = ERROR_MESSAGE_MAX_LENGTH - 1;
 800ccb0:	f240 133f 	movw	r3, #319	; 0x13f
 800ccb4:	83bb      	strh	r3, [r7, #28]
	}

	// Assemble the error message payload, start by clearing the whole thing out
	memset(&(self->error_message_buffer[0]), 0, IRIDIUM_ERROR_MESSAGE_PAYLOAD_SIZE + IRIDIUM_CHECKSUM_LENGTH);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccba:	f240 124f 	movw	r2, #335	; 0x14f
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f013 fc56 	bl	8020572 <memset>
	// First byte is message type (99)
	self->error_message_buffer[payload_iterator] = ERROR_MESSAGE_TYPE;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccca:	8b3b      	ldrh	r3, [r7, #24]
 800cccc:	4413      	add	r3, r2
 800ccce:	2263      	movs	r2, #99	; 0x63
 800ccd0:	701a      	strb	r2, [r3, #0]
	payload_iterator++;
 800ccd2:	8b3b      	ldrh	r3, [r7, #24]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	833b      	strh	r3, [r7, #24]
	memcpy(&(self->error_message_buffer[payload_iterator]), error_message, error_msg_str_length);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccdc:	8b3b      	ldrh	r3, [r7, #24]
 800ccde:	4413      	add	r3, r2
 800cce0:	8bba      	ldrh	r2, [r7, #28]
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f013 fc37 	bl	8020558 <memcpy>
	// Set the iterator to the index after the string
	payload_iterator += ERROR_MESSAGE_MAX_LENGTH;
 800ccea:	8b3b      	ldrh	r3, [r7, #24]
 800ccec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ccf0:	833b      	strh	r3, [r7, #24]
	memcpy(&(self->error_message_buffer[payload_iterator]), lat_ptr,
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccf6:	8b3b      	ldrh	r3, [r7, #24]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	693a      	ldr	r2, [r7, #16]
 800ccfc:	6812      	ldr	r2, [r2, #0]
 800ccfe:	601a      	str	r2, [r3, #0]
			sizeof(self->current_lat));
	payload_iterator += sizeof(self->current_lat);
 800cd00:	8b3b      	ldrh	r3, [r7, #24]
 800cd02:	3304      	adds	r3, #4
 800cd04:	833b      	strh	r3, [r7, #24]
	memcpy(&(self->error_message_buffer[payload_iterator]), lon_ptr,
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd0a:	8b3b      	ldrh	r3, [r7, #24]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	6812      	ldr	r2, [r2, #0]
 800cd12:	601a      	str	r2, [r3, #0]
				sizeof(self->current_lon));
	payload_iterator += sizeof(self->current_lon);
 800cd14:	8b3b      	ldrh	r3, [r7, #24]
 800cd16:	3304      	adds	r3, #4
 800cd18:	833b      	strh	r3, [r7, #24]
	timestamp = self->get_timestamp(self);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	4798      	blx	r3
 800cd22:	eef0 7a40 	vmov.f32	s15, s0
 800cd26:	edc7 7a02 	vstr	s15, [r7, #8]
	memcpy(&(self->error_message_buffer[payload_iterator]), timestamp_ptr,
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd2e:	8b3b      	ldrh	r3, [r7, #24]
 800cd30:	4413      	add	r3, r2
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	6812      	ldr	r2, [r2, #0]
 800cd36:	601a      	str	r2, [r3, #0]
			sizeof(float));

	// reset the timer and clear the interrupt flag
	self->reset_timer(self, self->global_config->iridium_max_transmit_time);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6812      	ldr	r2, [r2, #0]
 800cd40:	6852      	ldr	r2, [r2, #4]
 800cd42:	b2d2      	uxtb	r2, r2
 800cd44:	4611      	mov	r1, r2
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	4798      	blx	r3
	// Start the timer in interrupt mode
	HAL_TIM_Base_Start_IT(self->timer);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f00c fb6a 	bl	8019428 <HAL_TIM_Base_Start_IT>
	// Send the message that was just generated
	while (!self->timer_timeout && !message_tx_success) {
 800cd54:	e018      	b.n	800cd88 <iridium_transmit_error_message+0x11c>
		return_code = internal_transmit_message(self, (uint8_t*)&(self->error_message_buffer[0]),
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5a:	f240 124d 	movw	r2, #333	; 0x14d
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7ff fe3d 	bl	800c9e0 <internal_transmit_message>
 800cd66:	4603      	mov	r3, r0
 800cd68:	77fb      	strb	r3, [r7, #31]
				IRIDIUM_ERROR_MESSAGE_PAYLOAD_SIZE);
		if (return_code == IRIDIUM_UART_ERROR) {
 800cd6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd6e:	f113 0f02 	cmn.w	r3, #2
 800cd72:	d102      	bne.n	800cd7a <iridium_transmit_error_message+0x10e>
			cycle_power(self);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f835 	bl	800cde4 <cycle_power>
		}
		message_tx_success = return_code == IRIDIUM_SUCCESS;
 800cd7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	bf0c      	ite	eq
 800cd82:	2301      	moveq	r3, #1
 800cd84:	2300      	movne	r3, #0
 800cd86:	76fb      	strb	r3, [r7, #27]
	while (!self->timer_timeout && !message_tx_success) {
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cd8e:	f083 0301 	eor.w	r3, r3, #1
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d005      	beq.n	800cda4 <iridium_transmit_error_message+0x138>
 800cd98:	7efb      	ldrb	r3, [r7, #27]
 800cd9a:	f083 0301 	eor.w	r3, r3, #1
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1d8      	bne.n	800cd56 <iridium_transmit_error_message+0xea>
	}

	// Message failed to send.
	if (self->timer_timeout && !message_tx_success) {
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d014      	beq.n	800cdd8 <iridium_transmit_error_message+0x16c>
 800cdae:	7efb      	ldrb	r3, [r7, #27]
 800cdb0:	f083 0301 	eor.w	r3, r3, #1
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00e      	beq.n	800cdd8 <iridium_transmit_error_message+0x16c>
			// reset the timer and clear the flag for the next time
			HAL_TIM_Base_Stop_IT(self->timer);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f00c fbd2 	bl	8019568 <HAL_TIM_Base_Stop_IT>
			self->timer_timeout = false;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			__HAL_TIM_CLEAR_FLAG(self->timer, TIM_FLAG_UPDATE);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f06f 0201 	mvn.w	r2, #1
 800cdd6:	611a      	str	r2, [r3, #16]
	}

	return return_code;
 800cdd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3720      	adds	r7, #32
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <cycle_power>:
 *
 * @param self - Iridium struct
 * @return void
 */
static void cycle_power(Iridium* self)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
	self->sleep(self, GPIO_PIN_RESET);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	4798      	blx	r3
	HAL_Delay(2100);
 800cdf6:	f640 0034 	movw	r0, #2100	; 0x834
 800cdfa:	f001 fc05 	bl	800e608 <HAL_Delay>
	self->sleep(self, GPIO_PIN_SET);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce02:	2101      	movs	r1, #1
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	4798      	blx	r3
	HAL_Delay(2100);
 800ce08:	f640 0034 	movw	r0, #2100	; 0x834
 800ce0c:	f001 fbfc 	bl	800e608 <HAL_Delay>
}
 800ce10:	bf00      	nop
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <iridium_get_timestamp>:
 *
 * @param self - Iridium struct
 * @return timestamp as a float
 */
float iridium_get_timestamp(Iridium* self)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08c      	sub	sp, #48	; 0x30
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
	uint32_t timestamp = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	62bb      	str	r3, [r7, #40]	; 0x28
	bool is_leap_year = false;
 800ce24:	2300      	movs	r3, #0
 800ce26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t num_leap_years_since_2000 = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint16_t julian_date_first_of_month = 0;
 800ce30:	2300      	movs	r3, #0
 800ce32:	85fb      	strh	r3, [r7, #46]	; 0x2e
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	// Get the date and time
	HAL_RTC_GetTime(self->rtc_handle, &rtc_time, RTC_FORMAT_BIN);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	f107 010c 	add.w	r1, r7, #12
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f00b fe4a 	bl	8018ad8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(self->rtc_handle, &rtc_date, RTC_FORMAT_BIN);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	f107 0120 	add.w	r1, r7, #32
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f00b ff2a 	bl	8018ca8 <HAL_RTC_GetDate>

	// Let's make a timestamp (yay...)
	// Years first
	timestamp += SECONDS_1970_TO_2000;
 800ce54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce56:	4b76      	ldr	r3, [pc, #472]	; (800d030 <iridium_get_timestamp+0x218>)
 800ce58:	4413      	add	r3, r2
 800ce5a:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += rtc_date.Year * SECONDS_IN_YEAR;
 800ce5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce60:	461a      	mov	r2, r3
 800ce62:	4b74      	ldr	r3, [pc, #464]	; (800d034 <iridium_get_timestamp+0x21c>)
 800ce64:	fb02 f303 	mul.w	r3, r2, r3
 800ce68:	461a      	mov	r2, r3
 800ce6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6c:	4413      	add	r3, r2
 800ce6e:	62bb      	str	r3, [r7, #40]	; 0x28
	num_leap_years_since_2000 = rtc_date.Year / 4;
 800ce70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce74:	089b      	lsrs	r3, r3, #2
 800ce76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	timestamp += num_leap_years_since_2000 * SECONDS_IN_DAY;
 800ce7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce7e:	4a6e      	ldr	r2, [pc, #440]	; (800d038 <iridium_get_timestamp+0x220>)
 800ce80:	fb02 f303 	mul.w	r3, r2, r3
 800ce84:	461a      	mov	r2, r3
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	4413      	add	r3, r2
 800ce8a:	62bb      	str	r3, [r7, #40]	; 0x28

	// Years are only represented with 2 digits. We'll set 0 as the year 2000, so anything
	// evenly divisible by 4 is a leap year (2000, 2004, 2008, etc)
	is_leap_year = rtc_date.Year % 4 == 0;
 800ce8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce90:	f003 0303 	and.w	r3, r3, #3
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	bf0c      	ite	eq
 800ce9a:	2301      	moveq	r3, #1
 800ce9c:	2300      	movne	r3, #0
 800ce9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch (rtc_date.Month) {
 800cea2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cea6:	3b01      	subs	r3, #1
 800cea8:	2b11      	cmp	r3, #17
 800ceaa:	f200 808a 	bhi.w	800cfc2 <iridium_get_timestamp+0x1aa>
 800ceae:	a201      	add	r2, pc, #4	; (adr r2, 800ceb4 <iridium_get_timestamp+0x9c>)
 800ceb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb4:	0800cfc3 	.word	0x0800cfc3
 800ceb8:	0800cefd 	.word	0x0800cefd
 800cebc:	0800cf03 	.word	0x0800cf03
 800cec0:	0800cf15 	.word	0x0800cf15
 800cec4:	0800cf27 	.word	0x0800cf27
 800cec8:	0800cf39 	.word	0x0800cf39
 800cecc:	0800cf4b 	.word	0x0800cf4b
 800ced0:	0800cf5d 	.word	0x0800cf5d
 800ced4:	0800cf6f 	.word	0x0800cf6f
 800ced8:	0800cfc3 	.word	0x0800cfc3
 800cedc:	0800cfc3 	.word	0x0800cfc3
 800cee0:	0800cfc3 	.word	0x0800cfc3
 800cee4:	0800cfc3 	.word	0x0800cfc3
 800cee8:	0800cfc3 	.word	0x0800cfc3
 800ceec:	0800cfc3 	.word	0x0800cfc3
 800cef0:	0800cf81 	.word	0x0800cf81
 800cef4:	0800cf97 	.word	0x0800cf97
 800cef8:	0800cfad 	.word	0x0800cfad
		case RTC_MONTH_JANUARY:
			// No months to account for!!!
			break;

		case RTC_MONTH_FEBRUARY:
			julian_date_first_of_month = 32;
 800cefc:	2320      	movs	r3, #32
 800cefe:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf00:	e060      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_MARCH:
			julian_date_first_of_month = (is_leap_year) ? 61 : 60;
 800cf02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <iridium_get_timestamp+0xf6>
 800cf0a:	233d      	movs	r3, #61	; 0x3d
 800cf0c:	e000      	b.n	800cf10 <iridium_get_timestamp+0xf8>
 800cf0e:	233c      	movs	r3, #60	; 0x3c
 800cf10:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf12:	e057      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_APRIL:
			julian_date_first_of_month = (is_leap_year) ? 92 : 91;
 800cf14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d001      	beq.n	800cf20 <iridium_get_timestamp+0x108>
 800cf1c:	235c      	movs	r3, #92	; 0x5c
 800cf1e:	e000      	b.n	800cf22 <iridium_get_timestamp+0x10a>
 800cf20:	235b      	movs	r3, #91	; 0x5b
 800cf22:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf24:	e04e      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_MAY:
			julian_date_first_of_month = (is_leap_year) ? 122 : 121;
 800cf26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d001      	beq.n	800cf32 <iridium_get_timestamp+0x11a>
 800cf2e:	237a      	movs	r3, #122	; 0x7a
 800cf30:	e000      	b.n	800cf34 <iridium_get_timestamp+0x11c>
 800cf32:	2379      	movs	r3, #121	; 0x79
 800cf34:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf36:	e045      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_JUNE:
			julian_date_first_of_month = (is_leap_year) ? 153 : 152;
 800cf38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <iridium_get_timestamp+0x12c>
 800cf40:	2399      	movs	r3, #153	; 0x99
 800cf42:	e000      	b.n	800cf46 <iridium_get_timestamp+0x12e>
 800cf44:	2398      	movs	r3, #152	; 0x98
 800cf46:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf48:	e03c      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_JULY:
			julian_date_first_of_month = (is_leap_year) ? 183 : 182;
 800cf4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <iridium_get_timestamp+0x13e>
 800cf52:	23b7      	movs	r3, #183	; 0xb7
 800cf54:	e000      	b.n	800cf58 <iridium_get_timestamp+0x140>
 800cf56:	23b6      	movs	r3, #182	; 0xb6
 800cf58:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf5a:	e033      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_AUGUST:
			julian_date_first_of_month = (is_leap_year) ? 214 : 213;
 800cf5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <iridium_get_timestamp+0x150>
 800cf64:	23d6      	movs	r3, #214	; 0xd6
 800cf66:	e000      	b.n	800cf6a <iridium_get_timestamp+0x152>
 800cf68:	23d5      	movs	r3, #213	; 0xd5
 800cf6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf6c:	e02a      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_SEPTEMBER:
			julian_date_first_of_month = (is_leap_year) ? 245 : 244;
 800cf6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <iridium_get_timestamp+0x162>
 800cf76:	23f5      	movs	r3, #245	; 0xf5
 800cf78:	e000      	b.n	800cf7c <iridium_get_timestamp+0x164>
 800cf7a:	23f4      	movs	r3, #244	; 0xf4
 800cf7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf7e:	e021      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_OCTOBER:
			julian_date_first_of_month = (is_leap_year) ? 275 : 274;
 800cf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <iridium_get_timestamp+0x176>
 800cf88:	f240 1313 	movw	r3, #275	; 0x113
 800cf8c:	e001      	b.n	800cf92 <iridium_get_timestamp+0x17a>
 800cf8e:	f44f 7389 	mov.w	r3, #274	; 0x112
 800cf92:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cf94:	e016      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_NOVEMBER:
			julian_date_first_of_month = (is_leap_year) ? 306 : 305;
 800cf96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <iridium_get_timestamp+0x18c>
 800cf9e:	f44f 7399 	mov.w	r3, #306	; 0x132
 800cfa2:	e001      	b.n	800cfa8 <iridium_get_timestamp+0x190>
 800cfa4:	f240 1331 	movw	r3, #305	; 0x131
 800cfa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cfaa:	e00b      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		case RTC_MONTH_DECEMBER:
			julian_date_first_of_month = (is_leap_year) ? 336 : 335;
 800cfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <iridium_get_timestamp+0x1a2>
 800cfb4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800cfb8:	e001      	b.n	800cfbe <iridium_get_timestamp+0x1a6>
 800cfba:	f240 134f 	movw	r3, #335	; 0x14f
 800cfbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800cfc0:	e000      	b.n	800cfc4 <iridium_get_timestamp+0x1ac>

		default:
			break;
 800cfc2:	bf00      	nop
	}
	timestamp += (julian_date_first_of_month) * SECONDS_IN_DAY;
 800cfc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cfc6:	4a1c      	ldr	r2, [pc, #112]	; (800d038 <iridium_get_timestamp+0x220>)
 800cfc8:	fb02 f303 	mul.w	r3, r2, r3
 800cfcc:	461a      	mov	r2, r3
 800cfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd0:	4413      	add	r3, r2
 800cfd2:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += (rtc_date.Date - 1) * SECONDS_IN_DAY;
 800cfd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	4a17      	ldr	r2, [pc, #92]	; (800d038 <iridium_get_timestamp+0x220>)
 800cfdc:	fb02 f303 	mul.w	r3, r2, r3
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe4:	4413      	add	r3, r2
 800cfe6:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += rtc_time.Hours * SECONDS_IN_HOUR;
 800cfe8:	7b3b      	ldrb	r3, [r7, #12]
 800cfea:	461a      	mov	r2, r3
 800cfec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800cff0:	fb02 f303 	mul.w	r3, r2, r3
 800cff4:	461a      	mov	r2, r3
 800cff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff8:	4413      	add	r3, r2
 800cffa:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += rtc_time.Minutes * SECONDS_IN_MIN;
 800cffc:	7b7b      	ldrb	r3, [r7, #13]
 800cffe:	461a      	mov	r2, r3
 800d000:	4613      	mov	r3, r2
 800d002:	011b      	lsls	r3, r3, #4
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	461a      	mov	r2, r3
 800d00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00c:	4413      	add	r3, r2
 800d00e:	62bb      	str	r3, [r7, #40]	; 0x28
	timestamp += rtc_time.Seconds;
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	461a      	mov	r2, r3
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d016:	4413      	add	r3, r2
 800d018:	62bb      	str	r3, [r7, #40]	; 0x28
	// Not including fractions of a second
	return (float)timestamp;
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	ee07 3a90 	vmov	s15, r3
 800d020:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800d024:	eeb0 0a67 	vmov.f32	s0, s15
 800d028:	3730      	adds	r7, #48	; 0x30
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	386d4380 	.word	0x386d4380
 800d034:	01e13380 	.word	0x01e13380
 800d038:	00015180 	.word	0x00015180

0800d03c <rf_switch_init>:
 * Initialize the RF switch struct. RF switch will initialize to the GNSS port.
 *
 * @return gnss_error_code_t
 */
void rf_switch_init(RF_Switch* self)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	self->en_gpio_group = GPIOD;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a0e      	ldr	r2, [pc, #56]	; (800d080 <rf_switch_init+0x44>)
 800d048:	601a      	str	r2, [r3, #0]
	self->vctl_gpio_group = GPIOD;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a0c      	ldr	r2, [pc, #48]	; (800d080 <rf_switch_init+0x44>)
 800d04e:	605a      	str	r2, [r3, #4]
	self->en_gpio_pin = RF_SWITCH_EN_Pin;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2210      	movs	r2, #16
 800d054:	811a      	strh	r2, [r3, #8]
	self->vctl_gpio_pin = RF_SWITCH_VCTL_Pin;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2208      	movs	r2, #8
 800d05a:	815a      	strh	r2, [r3, #10]

	self->power_on = rf_switch_power_on;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a09      	ldr	r2, [pc, #36]	; (800d084 <rf_switch_init+0x48>)
 800d060:	611a      	str	r2, [r3, #16]
	self->power_off = rf_switch_power_off;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a08      	ldr	r2, [pc, #32]	; (800d088 <rf_switch_init+0x4c>)
 800d066:	615a      	str	r2, [r3, #20]
	self->set_gnss_port = rf_switch_set_gnss_port;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a08      	ldr	r2, [pc, #32]	; (800d08c <rf_switch_init+0x50>)
 800d06c:	619a      	str	r2, [r3, #24]
	self->set_iridium_port = rf_switch_set_iridium_port;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a07      	ldr	r2, [pc, #28]	; (800d090 <rf_switch_init+0x54>)
 800d072:	61da      	str	r2, [r3, #28]
}
 800d074:	bf00      	nop
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr
 800d080:	42020c00 	.word	0x42020c00
 800d084:	0800d095 	.word	0x0800d095
 800d088:	0800d0b5 	.word	0x0800d0b5
 800d08c:	0800d0d5 	.word	0x0800d0d5
 800d090:	0800d109 	.word	0x0800d109

0800d094 <rf_switch_power_on>:
 * @brief	Turn on the rf switch FET
 *
 * @return 	void
 */
void rf_switch_power_on(RF_Switch* self)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->en_gpio_group, self->en_gpio_pin,
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6818      	ldr	r0, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	891b      	ldrh	r3, [r3, #8]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	f007 f892 	bl	80141d0 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
}
 800d0ac:	bf00      	nop
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <rf_switch_power_off>:
 * @brief	Turn off the rf switch FET
 *
 * @return 	void
 */
void rf_switch_power_off(RF_Switch* self)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->en_gpio_group, self->en_gpio_pin,
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6818      	ldr	r0, [r3, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	891b      	ldrh	r3, [r3, #8]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	f007 f882 	bl	80141d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
}
 800d0cc:	bf00      	nop
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <rf_switch_set_gnss_port>:
 * @brief	Command the RF switch to RF1 (GNSS) port
 *
 * @return 	void
 */
void rf_switch_set_gnss_port(RF_Switch* self)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	self->vctl_pin_current_state = GPIO_PIN_SET;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	735a      	strb	r2, [r3, #13]

	HAL_GPIO_WritePin(self->vctl_gpio_group, self->vctl_gpio_pin,
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6858      	ldr	r0, [r3, #4]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	8959      	ldrh	r1, [r3, #10]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7b5b      	ldrb	r3, [r3, #13]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	f007 f86e 	bl	80141d0 <HAL_GPIO_WritePin>
			self->vctl_pin_current_state);
	HAL_Delay(1);
 800d0f4:	2001      	movs	r0, #1
 800d0f6:	f001 fa87 	bl	800e608 <HAL_Delay>

	self->current_port = RF_GNSS_PORT;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	739a      	strb	r2, [r3, #14]
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <rf_switch_set_iridium_port>:
 * @brief	Command the RF switch to RF2 (Iridium) port
 *
 * @return 	void
 */
void rf_switch_set_iridium_port(RF_Switch* self)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	self->vctl_pin_current_state = GPIO_PIN_RESET;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	735a      	strb	r2, [r3, #13]

	HAL_GPIO_WritePin(self->vctl_gpio_group, self->vctl_gpio_pin,
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6858      	ldr	r0, [r3, #4]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	8959      	ldrh	r1, [r3, #10]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	7b5b      	ldrb	r3, [r3, #13]
 800d122:	461a      	mov	r2, r3
 800d124:	f007 f854 	bl	80141d0 <HAL_GPIO_WritePin>
			self->vctl_pin_current_state);
	HAL_Delay(1);
 800d128:	2001      	movs	r0, #1
 800d12a:	f001 fa6d 	bl	800e608 <HAL_Delay>

	self->current_port = RF_IRIDIUM_PORT;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2202      	movs	r2, #2
 800d132:	739a      	strb	r2, [r3, #14]
}
 800d134:	bf00      	nop
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <uUbxProtocolEncode>:

// Encode a UBX protocol message.
int32_t uUbxProtocolEncode(int32_t messageClass, int32_t messageId,
                           const char *pMessage, size_t messageBodyLengthBytes,
                           char *pBuffer)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08a      	sub	sp, #40	; 0x28
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
    int32_t errorCodeOrLength = (int32_t) U_ERROR_COMMON_INVALID_PARAMETER;
 800d14a:	f06f 0304 	mvn.w	r3, #4
 800d14e:	627b      	str	r3, [r7, #36]	; 0x24
    // Use a uint8_t pointer for maths, more certain of its behaviour than char
    uint8_t *pWrite = (uint8_t *) pBuffer;
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	623b      	str	r3, [r7, #32]
    int32_t ca = 0;
 800d154:	2300      	movs	r3, #0
 800d156:	61fb      	str	r3, [r7, #28]
    int32_t cb = 0;
 800d158:	2300      	movs	r3, #0
 800d15a:	61bb      	str	r3, [r7, #24]

    if (((messageBodyLengthBytes == 0) || (pMessage != NULL)) &&
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d002      	beq.n	800d168 <uUbxProtocolEncode+0x2c>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d059      	beq.n	800d21c <uUbxProtocolEncode+0xe0>
 800d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d056      	beq.n	800d21c <uUbxProtocolEncode+0xe0>
        (pBuffer != NULL)) {

        // Complete the header
        *pWrite++ = 0xb5;
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	623a      	str	r2, [r7, #32]
 800d174:	22b5      	movs	r2, #181	; 0xb5
 800d176:	701a      	strb	r2, [r3, #0]
        *pWrite++ = 0x62;
 800d178:	6a3b      	ldr	r3, [r7, #32]
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	623a      	str	r2, [r7, #32]
 800d17e:	2262      	movs	r2, #98	; 0x62
 800d180:	701a      	strb	r2, [r3, #0]
        *pWrite++ = (uint8_t) messageClass;
 800d182:	6a3b      	ldr	r3, [r7, #32]
 800d184:	1c5a      	adds	r2, r3, #1
 800d186:	623a      	str	r2, [r7, #32]
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	b2d2      	uxtb	r2, r2
 800d18c:	701a      	strb	r2, [r3, #0]
        *pWrite++ = (uint8_t) messageId;
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	623a      	str	r2, [r7, #32]
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	b2d2      	uxtb	r2, r2
 800d198:	701a      	strb	r2, [r3, #0]
        *pWrite++ = (uint8_t) (messageBodyLengthBytes & (uint8_t) 0xff);
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	1c5a      	adds	r2, r3, #1
 800d19e:	623a      	str	r2, [r7, #32]
 800d1a0:	683a      	ldr	r2, [r7, #0]
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	701a      	strb	r2, [r3, #0]
        *pWrite++ = (uint8_t) (messageBodyLengthBytes >> 8);
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	0a19      	lsrs	r1, r3, #8
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	623a      	str	r2, [r7, #32]
 800d1b0:	b2ca      	uxtb	r2, r1
 800d1b2:	701a      	strb	r2, [r3, #0]

        if (pMessage != NULL) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d008      	beq.n	800d1cc <uUbxProtocolEncode+0x90>
            // Copy in the message body
            memcpy(pWrite, pMessage, messageBodyLengthBytes);
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	6879      	ldr	r1, [r7, #4]
 800d1be:	6a38      	ldr	r0, [r7, #32]
 800d1c0:	f013 f9ca 	bl	8020558 <memcpy>
            pWrite += messageBodyLengthBytes;
 800d1c4:	6a3a      	ldr	r2, [r7, #32]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	623b      	str	r3, [r7, #32]
        }

        // Work out the CRC over the variable elements of the
        // header and the body
        pBuffer += 2;
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	3302      	adds	r3, #2
 800d1d0:	633b      	str	r3, [r7, #48]	; 0x30
        for (size_t x = 0; x < messageBodyLengthBytes + 4; x++) {
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	617b      	str	r3, [r7, #20]
 800d1d6:	e00f      	b.n	800d1f8 <uUbxProtocolEncode+0xbc>
            ca += (uint8_t) *pBuffer; // *NOPAD*
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	61fb      	str	r3, [r7, #28]
            cb += ca;
 800d1e4:	69ba      	ldr	r2, [r7, #24]
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	61bb      	str	r3, [r7, #24]
            pBuffer++;
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	633b      	str	r3, [r7, #48]	; 0x30
        for (size_t x = 0; x < messageBodyLengthBytes + 4; x++) {
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d3ea      	bcc.n	800d1d8 <uUbxProtocolEncode+0x9c>
        }

        // Write in the CRC
        *pWrite++ = (uint8_t) (ca & (uint8_t) 0xff);
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	623a      	str	r2, [r7, #32]
 800d208:	69fa      	ldr	r2, [r7, #28]
 800d20a:	b2d2      	uxtb	r2, r2
 800d20c:	701a      	strb	r2, [r3, #0]
        *pWrite = (uint8_t) (cb & (uint8_t) 0xff);
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	b2da      	uxtb	r2, r3
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	701a      	strb	r2, [r3, #0]

        errorCodeOrLength = (int32_t) (U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES + messageBodyLengthBytes);
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	3308      	adds	r3, #8
 800d21a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return errorCodeOrLength;
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3728      	adds	r7, #40	; 0x28
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <uUbxProtocolDecode>:
// Decode a UBX protocol message.
int32_t uUbxProtocolDecode(const char *pBufferIn, size_t bufferLengthBytes,
                           int32_t *pMessageClass, int32_t *pMessageId,
                           char *pMessage, size_t maxMessageLengthBytes,
                           const char **ppBufferOut)
{
 800d228:	b480      	push	{r7}
 800d22a:	b08f      	sub	sp, #60	; 0x3c
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
 800d234:	603b      	str	r3, [r7, #0]
    int32_t sizeOrErrorCode = (int32_t) U_ERROR_COMMON_NOT_FOUND;
 800d236:	f06f 030a 	mvn.w	r3, #10
 800d23a:	637b      	str	r3, [r7, #52]	; 0x34
    // Use a uint8_t pointer for maths, more certain of its behaviour than char
    const uint8_t *pInput = (const uint8_t *) pBufferIn;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t overheadByteCount = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool updateCrc = false;
 800d244:	2300      	movs	r3, #0
 800d246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    size_t expectedMessageByteCount = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t messageByteCount = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	623b      	str	r3, [r7, #32]
    int32_t ca = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	61fb      	str	r3, [r7, #28]
    int32_t cb = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	61bb      	str	r3, [r7, #24]

    for (size_t x = 0; (x < bufferLengthBytes) &&
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	e0b9      	b.n	800d3d4 <uUbxProtocolDecode+0x1ac>
         (overheadByteCount < U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES); x++) {
        switch (overheadByteCount) {
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	2b07      	cmp	r3, #7
 800d264:	f200 809b 	bhi.w	800d39e <uUbxProtocolDecode+0x176>
 800d268:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <uUbxProtocolDecode+0x48>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d291 	.word	0x0800d291
 800d274:	0800d2a3 	.word	0x0800d2a3
 800d278:	0800d2b9 	.word	0x0800d2b9
 800d27c:	0800d2df 	.word	0x0800d2df
 800d280:	0800d2fd 	.word	0x0800d2fd
 800d284:	0800d311 	.word	0x0800d311
 800d288:	0800d32f 	.word	0x0800d32f
 800d28c:	0800d37f 	.word	0x0800d37f
            case 0:
                //lint -e{650} Suppress warning about 0xb5 being out of range for char
                if (*pInput == 0xb5) {
 800d290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	2bb5      	cmp	r3, #181	; 0xb5
 800d296:	f040 8085 	bne.w	800d3a4 <uUbxProtocolDecode+0x17c>
                    // Got first byte of header, increment count
                    overheadByteCount++;
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	3301      	adds	r3, #1
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                break;
 800d2a0:	e080      	b.n	800d3a4 <uUbxProtocolDecode+0x17c>
            case 1:
                if (*pInput == 0x62) {
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b62      	cmp	r3, #98	; 0x62
 800d2a8:	d103      	bne.n	800d2b2 <uUbxProtocolDecode+0x8a>
                    // Got second byte of header, increment count
                    overheadByteCount++;
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                } else {
                    // Not a valid message, start again
                    overheadByteCount = 0;
                }
                break;
 800d2b0:	e079      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
                    overheadByteCount = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d2b6:	e076      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
            case 2:
                // Got message class, store it, start CRC
                // calculation and increment count
                if (pMessageClass != NULL) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d004      	beq.n	800d2c8 <uUbxProtocolDecode+0xa0>
                    *pMessageClass = *pInput;
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	601a      	str	r2, [r3, #0]
                }
                ca = 0;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	61fb      	str	r3, [r7, #28]
                cb = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	61bb      	str	r3, [r7, #24]
                updateCrc = true;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	3301      	adds	r3, #1
 800d2da:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d2dc:	e063      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
            case 3:
                // Got message ID, store it, update CRC and
                // increment count
                if (pMessageId != NULL) {
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d004      	beq.n	800d2ee <uUbxProtocolDecode+0xc6>
                    *pMessageId = *pInput;
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	601a      	str	r2, [r3, #0]
                }
                updateCrc = true;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d2fa:	e054      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
            case 4:
                // Got first byte of length, store it, update
                // CRC and increment count
                expectedMessageByteCount = *pInput;
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	627b      	str	r3, [r7, #36]	; 0x24
                updateCrc = true;
 800d302:	2301      	movs	r3, #1
 800d304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	3301      	adds	r3, #1
 800d30c:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d30e:	e04a      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
            case 5:
                // Got second byte of length, add it to the first,
                // updat CRC, increment count and reset the
                // message byte count ready for the body to come next.
                // Cast twice to keep Lint happy
                expectedMessageByteCount += ((size_t) *pInput) << 8; // *NOPAD*
 800d310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	021b      	lsls	r3, r3, #8
 800d316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d318:	4413      	add	r3, r2
 800d31a:	627b      	str	r3, [r7, #36]	; 0x24
                messageByteCount = 0;
 800d31c:	2300      	movs	r3, #0
 800d31e:	623b      	str	r3, [r7, #32]
                updateCrc = true;
 800d320:	2301      	movs	r3, #1
 800d322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                overheadByteCount++;
 800d326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d328:	3301      	adds	r3, #1
 800d32a:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d32c:	e03b      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
            case 6:
                if (messageByteCount < expectedMessageByteCount) {
 800d32e:	6a3a      	ldr	r2, [r7, #32]
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	429a      	cmp	r2, r3
 800d334:	d213      	bcs.n	800d35e <uUbxProtocolDecode+0x136>
                    // Store the next byte of the message and
                    // update CRC
                    if ((pMessage != NULL) && (messageByteCount < maxMessageLengthBytes)) {
 800d336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d009      	beq.n	800d350 <uUbxProtocolDecode+0x128>
 800d33c:	6a3a      	ldr	r2, [r7, #32]
 800d33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d340:	429a      	cmp	r2, r3
 800d342:	d205      	bcs.n	800d350 <uUbxProtocolDecode+0x128>
                        *pMessage++ = (char) *pInput; // *NOPAD*
 800d344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d346:	1c5a      	adds	r2, r3, #1
 800d348:	643a      	str	r2, [r7, #64]	; 0x40
 800d34a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d34c:	7812      	ldrb	r2, [r2, #0]
 800d34e:	701a      	strb	r2, [r3, #0]
                    }
                    updateCrc = true;
 800d350:	2301      	movs	r3, #1
 800d352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    messageByteCount++;
 800d356:	6a3b      	ldr	r3, [r7, #32]
 800d358:	3301      	adds	r3, #1
 800d35a:	623b      	str	r3, [r7, #32]
                    } else {
                        // Not a valid message, start again
                        overheadByteCount = 0;
                    }
                }
                break;
 800d35c:	e023      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
                    ca &= 0xff;
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	b2db      	uxtb	r3, r3
 800d362:	61fb      	str	r3, [r7, #28]
                    if ((uint8_t) ca == *pInput) {
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	b2da      	uxtb	r2, r3
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d103      	bne.n	800d378 <uUbxProtocolDecode+0x150>
                        overheadByteCount++;
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	3301      	adds	r3, #1
 800d374:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d376:	e016      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
                        overheadByteCount = 0;
 800d378:	2300      	movs	r3, #0
 800d37a:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d37c:	e013      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
            case 7:
                // Second byte of CRC, check it
                cb &= 0xff;
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	b2db      	uxtb	r3, r3
 800d382:	61bb      	str	r3, [r7, #24]
                if ((uint8_t) cb == *pInput) {
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	b2da      	uxtb	r2, r3
 800d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d103      	bne.n	800d398 <uUbxProtocolDecode+0x170>
                    overheadByteCount++;
 800d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d392:	3301      	adds	r3, #1
 800d394:	62fb      	str	r3, [r7, #44]	; 0x2c
                } else {
                    // Not a valid message, start again
                    overheadByteCount = 0;
                }
                break;
 800d396:	e006      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
                    overheadByteCount = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d39c:	e003      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
            default:
                overheadByteCount = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d3a2:	e000      	b.n	800d3a6 <uUbxProtocolDecode+0x17e>
                break;
 800d3a4:	bf00      	nop
        }

        if (updateCrc) {
 800d3a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00c      	beq.n	800d3c8 <uUbxProtocolDecode+0x1a0>
            ca += *pInput;
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	61fb      	str	r3, [r7, #28]
            cb += ca;
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	4413      	add	r3, r2
 800d3c0:	61bb      	str	r3, [r7, #24]
            updateCrc = false;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        // Next byte
        pInput++;
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	633b      	str	r3, [r7, #48]	; 0x30
         (overheadByteCount < U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES); x++) {
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	617b      	str	r3, [r7, #20]
    for (size_t x = 0; (x < bufferLengthBytes) &&
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d203      	bcs.n	800d3e4 <uUbxProtocolDecode+0x1bc>
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	2b07      	cmp	r3, #7
 800d3e0:	f77f af3e 	ble.w	800d260 <uUbxProtocolDecode+0x38>
    }

    if (overheadByteCount > 0) {
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	dd07      	ble.n	800d3fa <uUbxProtocolDecode+0x1d2>
        // We got some parts of the message overhead, so
        // could be a message
        sizeOrErrorCode = (int32_t) U_ERROR_COMMON_TIMEOUT;
 800d3ea:	f06f 0308 	mvn.w	r3, #8
 800d3ee:	637b      	str	r3, [r7, #52]	; 0x34
        if (overheadByteCount == U_UBX_PROTOCOL_OVERHEAD_LENGTH_BYTES) {
 800d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f2:	2b08      	cmp	r3, #8
 800d3f4:	d101      	bne.n	800d3fa <uUbxProtocolDecode+0x1d2>
            // We got all the overhead bytes, this is a complete message
            sizeOrErrorCode = (int32_t) messageByteCount;
 800d3f6:	6a3b      	ldr	r3, [r7, #32]
 800d3f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    if (ppBufferOut != NULL) {
 800d3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <uUbxProtocolDecode+0x1de>
        *ppBufferOut =  (const char *) pInput;
 800d400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d404:	601a      	str	r2, [r3, #0]
    }

    return sizeOrErrorCode;
 800d406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d408:	4618      	mov	r0, r3
 800d40a:	373c      	adds	r7, #60	; 0x3c
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b08e      	sub	sp, #56	; 0x38
 800d418:	af08      	add	r7, sp, #32
 800d41a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800d41c:	2300      	movs	r3, #0
 800d41e:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
	(void)byte_pool;
	CHAR *pointer = TX_NULL;
 800d424:	2300      	movs	r3, #0
 800d426:	60fb      	str	r3, [r7, #12]
	//
	// Allocate stack for the startup thread
	ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_EXTRA_LARGE_STACK_SIZE, TX_NO_WAIT);
 800d428:	f107 010c 	add.w	r1, r7, #12
 800d42c:	2300      	movs	r3, #0
 800d42e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d432:	6938      	ldr	r0, [r7, #16]
 800d434:	f010 fc4e 	bl	801dcd4 <_txe_byte_allocate>
 800d438:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <App_ThreadX_Init+0x30>
	  return ret;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	e1cd      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	// Create the startup thread. HIGHEST priority level and no preemption possible
	ret = tx_thread_create(&startup_thread, "startup thread", startup_thread_entry, 0, pointer,
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	22b0      	movs	r2, #176	; 0xb0
 800d448:	9206      	str	r2, [sp, #24]
 800d44a:	2201      	movs	r2, #1
 800d44c:	9205      	str	r2, [sp, #20]
 800d44e:	2200      	movs	r2, #0
 800d450:	9204      	str	r2, [sp, #16]
 800d452:	2202      	movs	r2, #2
 800d454:	9203      	str	r2, [sp, #12]
 800d456:	2202      	movs	r2, #2
 800d458:	9202      	str	r2, [sp, #8]
 800d45a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d45e:	9201      	str	r2, [sp, #4]
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	2300      	movs	r3, #0
 800d464:	4a9a      	ldr	r2, [pc, #616]	; (800d6d0 <App_ThreadX_Init+0x2bc>)
 800d466:	499b      	ldr	r1, [pc, #620]	; (800d6d4 <App_ThreadX_Init+0x2c0>)
 800d468:	489b      	ldr	r0, [pc, #620]	; (800d6d8 <App_ThreadX_Init+0x2c4>)
 800d46a:	f010 fed7 	bl	801e21c <_txe_thread_create>
 800d46e:	6178      	str	r0, [r7, #20]
			THREAD_EXTRA_LARGE_STACK_SIZE, HIGH, HIGH, TX_NO_TIME_SLICE, TX_AUTO_START);
	if (ret != TX_SUCCESS){
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <App_ThreadX_Init+0x66>
	  return ret;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	e1b2      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// Allocate stack for the gnss thread
	ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_EXTRA_LARGE_STACK_SIZE, TX_NO_WAIT);
 800d47a:	f107 010c 	add.w	r1, r7, #12
 800d47e:	2300      	movs	r3, #0
 800d480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d484:	6938      	ldr	r0, [r7, #16]
 800d486:	f010 fc25 	bl	801dcd4 <_txe_byte_allocate>
 800d48a:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <App_ThreadX_Init+0x82>
	  return ret;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	e1a4      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	// Create the gnss thread. VERY_HIGH priority, no preemption-threshold
	ret = tx_thread_create(&gnss_thread, "gnss thread", gnss_thread_entry, 0, pointer,
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	22b0      	movs	r2, #176	; 0xb0
 800d49a:	9206      	str	r2, [sp, #24]
 800d49c:	2200      	movs	r2, #0
 800d49e:	9205      	str	r2, [sp, #20]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	9204      	str	r2, [sp, #16]
 800d4a4:	2203      	movs	r2, #3
 800d4a6:	9203      	str	r2, [sp, #12]
 800d4a8:	2203      	movs	r2, #3
 800d4aa:	9202      	str	r2, [sp, #8]
 800d4ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d4b0:	9201      	str	r2, [sp, #4]
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4a89      	ldr	r2, [pc, #548]	; (800d6dc <App_ThreadX_Init+0x2c8>)
 800d4b8:	4989      	ldr	r1, [pc, #548]	; (800d6e0 <App_ThreadX_Init+0x2cc>)
 800d4ba:	488a      	ldr	r0, [pc, #552]	; (800d6e4 <App_ThreadX_Init+0x2d0>)
 800d4bc:	f010 feae 	bl	801e21c <_txe_thread_create>
 800d4c0:	6178      	str	r0, [r7, #20]
		  THREAD_EXTRA_LARGE_STACK_SIZE, MID, MID, TX_NO_TIME_SLICE, TX_DONT_START);
	if (ret != TX_SUCCESS){
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <App_ThreadX_Init+0xb8>
	  return ret;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	e189      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// Allocate stack for the waves thread
	ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_EXTRA_LARGE_STACK_SIZE, TX_NO_WAIT);
 800d4cc:	f107 010c 	add.w	r1, r7, #12
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d4d6:	6938      	ldr	r0, [r7, #16]
 800d4d8:	f010 fbfc 	bl	801dcd4 <_txe_byte_allocate>
 800d4dc:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d001      	beq.n	800d4e8 <App_ThreadX_Init+0xd4>
	  return ret;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	e17b      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	// Create the waves thread. MID priority, no preemption-threshold
	ret = tx_thread_create(&waves_thread, "waves thread", waves_thread_entry, 0, pointer,
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	22b0      	movs	r2, #176	; 0xb0
 800d4ec:	9206      	str	r2, [sp, #24]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	9205      	str	r2, [sp, #20]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	9204      	str	r2, [sp, #16]
 800d4f6:	2203      	movs	r2, #3
 800d4f8:	9203      	str	r2, [sp, #12]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	9202      	str	r2, [sp, #8]
 800d4fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d502:	9201      	str	r2, [sp, #4]
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	2300      	movs	r3, #0
 800d508:	4a77      	ldr	r2, [pc, #476]	; (800d6e8 <App_ThreadX_Init+0x2d4>)
 800d50a:	4978      	ldr	r1, [pc, #480]	; (800d6ec <App_ThreadX_Init+0x2d8>)
 800d50c:	4878      	ldr	r0, [pc, #480]	; (800d6f0 <App_ThreadX_Init+0x2dc>)
 800d50e:	f010 fe85 	bl	801e21c <_txe_thread_create>
 800d512:	6178      	str	r0, [r7, #20]
			THREAD_EXTRA_LARGE_STACK_SIZE, MID, MID, TX_NO_TIME_SLICE, TX_DONT_START);
	if (ret != TX_SUCCESS){
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <App_ThreadX_Init+0x10a>
	  return ret;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	e160      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// Allocate stack for the Iridium thread
	ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_EXTRA_LARGE_STACK_SIZE, TX_NO_WAIT);
 800d51e:	f107 010c 	add.w	r1, r7, #12
 800d522:	2300      	movs	r3, #0
 800d524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d528:	6938      	ldr	r0, [r7, #16]
 800d52a:	f010 fbd3 	bl	801dcd4 <_txe_byte_allocate>
 800d52e:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <App_ThreadX_Init+0x126>
	  return ret;
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	e152      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	// Create the Iridium thread. VERY_HIGH priority, no preemption-threshold
	ret = tx_thread_create(&iridium_thread, "iridium thread", iridium_thread_entry, 0, pointer,
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	22b0      	movs	r2, #176	; 0xb0
 800d53e:	9206      	str	r2, [sp, #24]
 800d540:	2200      	movs	r2, #0
 800d542:	9205      	str	r2, [sp, #20]
 800d544:	2200      	movs	r2, #0
 800d546:	9204      	str	r2, [sp, #16]
 800d548:	2203      	movs	r2, #3
 800d54a:	9203      	str	r2, [sp, #12]
 800d54c:	2203      	movs	r2, #3
 800d54e:	9202      	str	r2, [sp, #8]
 800d550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d554:	9201      	str	r2, [sp, #4]
 800d556:	9300      	str	r3, [sp, #0]
 800d558:	2300      	movs	r3, #0
 800d55a:	4a66      	ldr	r2, [pc, #408]	; (800d6f4 <App_ThreadX_Init+0x2e0>)
 800d55c:	4966      	ldr	r1, [pc, #408]	; (800d6f8 <App_ThreadX_Init+0x2e4>)
 800d55e:	4867      	ldr	r0, [pc, #412]	; (800d6fc <App_ThreadX_Init+0x2e8>)
 800d560:	f010 fe5c 	bl	801e21c <_txe_thread_create>
 800d564:	6178      	str	r0, [r7, #20]
			THREAD_EXTRA_LARGE_STACK_SIZE, MID, MID, TX_NO_TIME_SLICE, TX_DONT_START);
	if (ret != TX_SUCCESS){
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d001      	beq.n	800d570 <App_ThreadX_Init+0x15c>
	  return ret;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	e137      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// Allocate stack for the teardown thread
	ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_EXTRA_LARGE_STACK_SIZE, TX_NO_WAIT);
 800d570:	f107 010c 	add.w	r1, r7, #12
 800d574:	2300      	movs	r3, #0
 800d576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d57a:	6938      	ldr	r0, [r7, #16]
 800d57c:	f010 fbaa 	bl	801dcd4 <_txe_byte_allocate>
 800d580:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <App_ThreadX_Init+0x178>
	  return ret;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	e129      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	// Create the end of cycle thread. Priority and preemption is low to allow no preemption
	ret = tx_thread_create(&end_of_cycle_thread, "end of cycle thread", end_of_cycle_thread_entry,
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	22b0      	movs	r2, #176	; 0xb0
 800d590:	9206      	str	r2, [sp, #24]
 800d592:	2200      	movs	r2, #0
 800d594:	9205      	str	r2, [sp, #20]
 800d596:	2200      	movs	r2, #0
 800d598:	9204      	str	r2, [sp, #16]
 800d59a:	2201      	movs	r2, #1
 800d59c:	9203      	str	r2, [sp, #12]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	9202      	str	r2, [sp, #8]
 800d5a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d5a6:	9201      	str	r2, [sp, #4]
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4a54      	ldr	r2, [pc, #336]	; (800d700 <App_ThreadX_Init+0x2ec>)
 800d5ae:	4955      	ldr	r1, [pc, #340]	; (800d704 <App_ThreadX_Init+0x2f0>)
 800d5b0:	4855      	ldr	r0, [pc, #340]	; (800d708 <App_ThreadX_Init+0x2f4>)
 800d5b2:	f010 fe33 	bl	801e21c <_txe_thread_create>
 800d5b6:	6178      	str	r0, [r7, #20]
			0, pointer, THREAD_EXTRA_LARGE_STACK_SIZE, VERY_HIGH, VERY_HIGH, TX_NO_TIME_SLICE, TX_DONT_START);
	if (ret != TX_SUCCESS){
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <App_ThreadX_Init+0x1ae>
	  return ret;
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	e10e      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// Create the event flags we'll use for triggering threads
	ret = tx_event_flags_create(&thread_control_flags, "thread flags");
 800d5c2:	2224      	movs	r2, #36	; 0x24
 800d5c4:	4951      	ldr	r1, [pc, #324]	; (800d70c <App_ThreadX_Init+0x2f8>)
 800d5c6:	4852      	ldr	r0, [pc, #328]	; (800d710 <App_ThreadX_Init+0x2fc>)
 800d5c8:	f010 fd12 	bl	801dff0 <_txe_event_flags_create>
 800d5cc:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS) {
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <App_ThreadX_Init+0x1c4>
	  return ret;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	e103      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// Create the error flags we'll use for tracking errors
	ret = tx_event_flags_create(&error_flags, "error flags");
 800d5d8:	2224      	movs	r2, #36	; 0x24
 800d5da:	494e      	ldr	r1, [pc, #312]	; (800d714 <App_ThreadX_Init+0x300>)
 800d5dc:	484e      	ldr	r0, [pc, #312]	; (800d718 <App_ThreadX_Init+0x304>)
 800d5de:	f010 fd07 	bl	801dff0 <_txe_event_flags_create>
 800d5e2:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS) {
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d001      	beq.n	800d5ee <App_ThreadX_Init+0x1da>
	  return ret;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	e0f8      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The rf switch struct
	ret = tx_byte_allocate(byte_pool, (VOID**) &rf_switch, sizeof(RF_Switch) + 100, TX_NO_WAIT);
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	2284      	movs	r2, #132	; 0x84
 800d5f2:	494a      	ldr	r1, [pc, #296]	; (800d71c <App_ThreadX_Init+0x308>)
 800d5f4:	6938      	ldr	r0, [r7, #16]
 800d5f6:	f010 fb6d 	bl	801dcd4 <_txe_byte_allocate>
 800d5fa:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <App_ThreadX_Init+0x1f2>
		return ret;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	e0ec      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The UBX message array
	ret = tx_byte_allocate(byte_pool, (VOID**) &ubx_DMA_message_buf, (UBX_MESSAGE_SIZE * 2) + 100, TX_NO_WAIT);
 800d606:	2300      	movs	r3, #0
 800d608:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d60c:	4944      	ldr	r1, [pc, #272]	; (800d720 <App_ThreadX_Init+0x30c>)
 800d60e:	6938      	ldr	r0, [r7, #16]
 800d610:	f010 fb60 	bl	801dcd4 <_txe_byte_allocate>
 800d614:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <App_ThreadX_Init+0x20c>
	  return ret;
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	e0df      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The UBX process buffer
	ret = tx_byte_allocate(byte_pool, (VOID**) &ubx_message_process_buf, (UBX_MESSAGE_SIZE * 2) + 100, TX_NO_WAIT);
 800d620:	2300      	movs	r3, #0
 800d622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d626:	493f      	ldr	r1, [pc, #252]	; (800d724 <App_ThreadX_Init+0x310>)
 800d628:	6938      	ldr	r0, [r7, #16]
 800d62a:	f010 fb53 	bl	801dcd4 <_txe_byte_allocate>
 800d62e:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d001      	beq.n	800d63a <App_ThreadX_Init+0x226>
	  return ret;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	e0d2      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The gnss struct
	ret = tx_byte_allocate(byte_pool, (VOID**) &gnss, sizeof(GNSS) + 100, TX_NO_WAIT);
 800d63a:	2300      	movs	r3, #0
 800d63c:	22fc      	movs	r2, #252	; 0xfc
 800d63e:	493a      	ldr	r1, [pc, #232]	; (800d728 <App_ThreadX_Init+0x314>)
 800d640:	6938      	ldr	r0, [r7, #16]
 800d642:	f010 fb47 	bl	801dcd4 <_txe_byte_allocate>
 800d646:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <App_ThreadX_Init+0x23e>
		return ret;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	e0c6      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The Iridium error message payload array
	ret = tx_byte_allocate(byte_pool, (VOID**) &iridium_error_message, IRIDIUM_ERROR_MESSAGE_PAYLOAD_SIZE + 100
 800d652:	2300      	movs	r3, #0
 800d654:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d658:	4934      	ldr	r1, [pc, #208]	; (800d72c <App_ThreadX_Init+0x318>)
 800d65a:	6938      	ldr	r0, [r7, #16]
 800d65c:	f010 fb3a 	bl	801dcd4 <_txe_byte_allocate>
 800d660:	6178      	str	r0, [r7, #20]
			+ IRIDIUM_CHECKSUM_LENGTH, TX_NO_WAIT);
	if (ret != TX_SUCCESS){
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <App_ThreadX_Init+0x258>
	  return ret;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	e0b9      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The Iridium response message array
	ret = tx_byte_allocate(byte_pool, (VOID**) &iridium_response_message, IRIDIUM_MAX_RESPONSE_SIZE + 100,
 800d66c:	2300      	movs	r3, #0
 800d66e:	22a4      	movs	r2, #164	; 0xa4
 800d670:	492f      	ldr	r1, [pc, #188]	; (800d730 <App_ThreadX_Init+0x31c>)
 800d672:	6938      	ldr	r0, [r7, #16]
 800d674:	f010 fb2e 	bl	801dcd4 <_txe_byte_allocate>
 800d678:	6178      	str	r0, [r7, #20]
			TX_NO_WAIT);
	if (ret != TX_SUCCESS){
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <App_ThreadX_Init+0x270>
	  return ret;
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	e0ad      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The Iridium message storage
	ret = tx_byte_allocate(byte_pool, (VOID**) &sbd_message_queue, sizeof(Iridium_message_storage) + 100,
 800d684:	2300      	movs	r3, #0
 800d686:	f64d 02f5 	movw	r2, #55541	; 0xd8f5
 800d68a:	492a      	ldr	r1, [pc, #168]	; (800d734 <App_ThreadX_Init+0x320>)
 800d68c:	6938      	ldr	r0, [r7, #16]
 800d68e:	f010 fb21 	bl	801dcd4 <_txe_byte_allocate>
 800d692:	6178      	str	r0, [r7, #20]
			TX_NO_WAIT);
	if (ret != TX_SUCCESS){
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <App_ThreadX_Init+0x28a>
	  return ret;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	e0a0      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The iridium struct
	ret = tx_byte_allocate(byte_pool, (VOID**) &iridium, sizeof(Iridium) + 100, TX_NO_WAIT);
 800d69e:	2300      	movs	r3, #0
 800d6a0:	22d4      	movs	r2, #212	; 0xd4
 800d6a2:	4925      	ldr	r1, [pc, #148]	; (800d738 <App_ThreadX_Init+0x324>)
 800d6a4:	6938      	ldr	r0, [r7, #16]
 800d6a6:	f010 fb15 	bl	801dcd4 <_txe_byte_allocate>
 800d6aa:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <App_ThreadX_Init+0x2a2>
		return ret;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	e094      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The current window SBD message
	ret = tx_byte_allocate(byte_pool, (VOID**) &sbd_message, sizeof(sbd_message_type_52) + 100,
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f240 12ad 	movw	r2, #429	; 0x1ad
 800d6bc:	491f      	ldr	r1, [pc, #124]	; (800d73c <App_ThreadX_Init+0x328>)
 800d6be:	6938      	ldr	r0, [r7, #16]
 800d6c0:	f010 fb08 	bl	801dcd4 <_txe_byte_allocate>
 800d6c4:	6178      	str	r0, [r7, #20]
			TX_NO_WAIT);
	if (ret != TX_SUCCESS){
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d039      	beq.n	800d740 <App_ThreadX_Init+0x32c>
	  return ret;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	e087      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
 800d6d0:	0800d845 	.word	0x0800d845
 800d6d4:	08023608 	.word	0x08023608
 800d6d8:	20023660 	.word	0x20023660
 800d6dc:	0800dbe5 	.word	0x0800dbe5
 800d6e0:	08023618 	.word	0x08023618
 800d6e4:	20023710 	.word	0x20023710
 800d6e8:	0800df99 	.word	0x0800df99
 800d6ec:	08023624 	.word	0x08023624
 800d6f0:	200237c0 	.word	0x200237c0
 800d6f4:	0800e119 	.word	0x0800e119
 800d6f8:	08023634 	.word	0x08023634
 800d6fc:	20023870 	.word	0x20023870
 800d700:	0800e23d 	.word	0x0800e23d
 800d704:	08023644 	.word	0x08023644
 800d708:	20023920 	.word	0x20023920
 800d70c:	08023658 	.word	0x08023658
 800d710:	200239d0 	.word	0x200239d0
 800d714:	08023668 	.word	0x08023668
 800d718:	200239f4 	.word	0x200239f4
 800d71c:	20023a40 	.word	0x20023a40
 800d720:	20023a24 	.word	0x20023a24
 800d724:	20023a28 	.word	0x20023a28
 800d728:	20023a38 	.word	0x20023a38
 800d72c:	20023a30 	.word	0x20023a30
 800d730:	20023a2c 	.word	0x20023a2c
 800d734:	20023a34 	.word	0x20023a34
 800d738:	20023a3c 	.word	0x20023a3c
 800d73c:	20023514 	.word	0x20023514
#endif
// Only is there is a CT sensor present
#if CT_ENABLED
	//
	// Allocate stack for the CT thread
	ret = tx_byte_allocate(byte_pool, (VOID**) &pointer, THREAD_EXTRA_LARGE_STACK_SIZE, TX_NO_WAIT);
 800d740:	f107 010c 	add.w	r1, r7, #12
 800d744:	2300      	movs	r3, #0
 800d746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d74a:	6938      	ldr	r0, [r7, #16]
 800d74c:	f010 fac2 	bl	801dcd4 <_txe_byte_allocate>
 800d750:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <App_ThreadX_Init+0x348>
	  return ret;
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	e041      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	// Create the CT thread. VERY_HIGH priority, no preemption-threshold
	ret = tx_thread_create(&ct_thread, "ct thread", ct_thread_entry, 0, pointer,
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	22b0      	movs	r2, #176	; 0xb0
 800d760:	9206      	str	r2, [sp, #24]
 800d762:	2200      	movs	r2, #0
 800d764:	9205      	str	r2, [sp, #20]
 800d766:	2200      	movs	r2, #0
 800d768:	9204      	str	r2, [sp, #16]
 800d76a:	2202      	movs	r2, #2
 800d76c:	9203      	str	r2, [sp, #12]
 800d76e:	2202      	movs	r2, #2
 800d770:	9202      	str	r2, [sp, #8]
 800d772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d776:	9201      	str	r2, [sp, #4]
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	2300      	movs	r3, #0
 800d77c:	4a1a      	ldr	r2, [pc, #104]	; (800d7e8 <App_ThreadX_Init+0x3d4>)
 800d77e:	491b      	ldr	r1, [pc, #108]	; (800d7ec <App_ThreadX_Init+0x3d8>)
 800d780:	481b      	ldr	r0, [pc, #108]	; (800d7f0 <App_ThreadX_Init+0x3dc>)
 800d782:	f010 fd4b 	bl	801e21c <_txe_thread_create>
 800d786:	6178      	str	r0, [r7, #20]
			THREAD_EXTRA_LARGE_STACK_SIZE, HIGH, HIGH, TX_NO_TIME_SLICE, TX_DONT_START);
	if (ret != TX_SUCCESS){
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <App_ThreadX_Init+0x37e>
	  return ret;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	e026      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	//
	// The ct struct
	ret = tx_byte_allocate(byte_pool, (VOID**) &ct, sizeof(CT) + 100, TX_NO_WAIT);
 800d792:	2300      	movs	r3, #0
 800d794:	22ac      	movs	r2, #172	; 0xac
 800d796:	4917      	ldr	r1, [pc, #92]	; (800d7f4 <App_ThreadX_Init+0x3e0>)
 800d798:	6938      	ldr	r0, [r7, #16]
 800d79a:	f010 fa9b 	bl	801dcd4 <_txe_byte_allocate>
 800d79e:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <App_ThreadX_Init+0x396>
		return ret;
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	e01a      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	// The CT input data buffer array
	ret = tx_byte_allocate(byte_pool, (VOID**) &ct_data, CT_DATA_ARRAY_SIZE + 100, TX_NO_WAIT);
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f240 1287 	movw	r2, #391	; 0x187
 800d7b0:	4911      	ldr	r1, [pc, #68]	; (800d7f8 <App_ThreadX_Init+0x3e4>)
 800d7b2:	6938      	ldr	r0, [r7, #16]
 800d7b4:	f010 fa8e 	bl	801dcd4 <_txe_byte_allocate>
 800d7b8:	6178      	str	r0, [r7, #20]
	if (ret != TX_SUCCESS){
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d001      	beq.n	800d7c4 <App_ThreadX_Init+0x3b0>
	  return ret;
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	e00d      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
	}
	// The CT samples array
	ret = tx_byte_allocate(byte_pool, (VOID**) &samples_buf, TOTAL_CT_SAMPLES * sizeof(ct_samples) + 100,
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d7ca:	490c      	ldr	r1, [pc, #48]	; (800d7fc <App_ThreadX_Init+0x3e8>)
 800d7cc:	6938      	ldr	r0, [r7, #16]
 800d7ce:	f010 fa81 	bl	801dcd4 <_txe_byte_allocate>
 800d7d2:	6178      	str	r0, [r7, #20]
			TX_NO_WAIT);
	if (ret != TX_SUCCESS){
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <App_ThreadX_Init+0x3ca>
	  return ret;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	e000      	b.n	800d7e0 <App_ThreadX_Init+0x3cc>
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800d7de:	697b      	ldr	r3, [r7, #20]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3718      	adds	r7, #24
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	0800de3d 	.word	0x0800de3d
 800d7ec:	08023674 	.word	0x08023674
 800d7f0:	20023a48 	.word	0x20023a48
 800d7f4:	20023af8 	.word	0x20023af8
 800d7f8:	20023afc 	.word	0x20023afc
 800d7fc:	20023b00 	.word	0x20023b00

0800d800 <MX_ThreadX_Init>:
  * @param  None
  * @retval None
  */
  /* USER CODE BEGIN  Before_Kernel_Start */
void MX_ThreadX_Init(device_handles_t *handles)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  device_handles = handles;
 800d808:	4a0c      	ldr	r2, [pc, #48]	; (800d83c <MX_ThreadX_Init+0x3c>)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6013      	str	r3, [r2, #0]
  configuration.samples_per_window = TOTAL_SAMPLES_PER_WINDOW;
 800d80e:	4b0c      	ldr	r3, [pc, #48]	; (800d840 <MX_ThreadX_Init+0x40>)
 800d810:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d814:	601a      	str	r2, [r3, #0]
  configuration.iridium_max_transmit_time = IRIDIUM_MAX_TRANSMIT_TIME;
 800d816:	4b0a      	ldr	r3, [pc, #40]	; (800d840 <MX_ThreadX_Init+0x40>)
 800d818:	220a      	movs	r2, #10
 800d81a:	605a      	str	r2, [r3, #4]
  configuration.gnss_max_acquisition_wait_time = GNSS_MAX_ACQUISITION_WAIT_TIME;
 800d81c:	4b08      	ldr	r3, [pc, #32]	; (800d840 <MX_ThreadX_Init+0x40>)
 800d81e:	220f      	movs	r2, #15
 800d820:	609a      	str	r2, [r3, #8]
  configuration.gnss_sampling_rate = GNSS_SAMPLING_RATE;
 800d822:	4b07      	ldr	r3, [pc, #28]	; (800d840 <MX_ThreadX_Init+0x40>)
 800d824:	2205      	movs	r2, #5
 800d826:	60da      	str	r2, [r3, #12]
  configuration.total_ct_samples = TOTAL_CT_SAMPLES;
 800d828:	4b05      	ldr	r3, [pc, #20]	; (800d840 <MX_ThreadX_Init+0x40>)
 800d82a:	220a      	movs	r2, #10
 800d82c:	611a      	str	r2, [r3, #16]

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800d82e:	f00f f8df 	bl	801c9f0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800d832:	bf00      	nop
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	20023a44 	.word	0x20023a44
 800d840:	20023500 	.word	0x20023500

0800d844 <startup_thread_entry>:
  *         This thread will start all peripherals and do a systems check to
  *         make sure we're good to start the processing cycle
  * @param  ULONG thread_input - unused
  * @retval void
  */
void startup_thread_entry(ULONG thread_input){
 800d844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d846:	b093      	sub	sp, #76	; 0x4c
 800d848:	af0a      	add	r7, sp, #40	; 0x28
 800d84a:	60f8      	str	r0, [r7, #12]
	self_test_status_t self_test_status;
	ULONG actual_flags = 0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	613b      	str	r3, [r7, #16]
	UINT tx_return;
	int fail_counter = 0;
 800d850:	2300      	movs	r3, #0
 800d852:	61fb      	str	r3, [r7, #28]

	// Zero out the sbd message struct
	memset(&sbd_message, 0, sizeof(sbd_message));
 800d854:	f240 1249 	movw	r2, #329	; 0x149
 800d858:	2100      	movs	r1, #0
 800d85a:	488e      	ldr	r0, [pc, #568]	; (800da94 <startup_thread_entry+0x250>)
 800d85c:	f012 fe89 	bl	8020572 <memset>

	// Set the watchdog reset or software reset flags
	if (device_handles->reset_reason & RCC_RESET_FLAG_IWDG){
 800d860:	4b8d      	ldr	r3, [pc, #564]	; (800da98 <startup_thread_entry+0x254>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d005      	beq.n	800d87a <startup_thread_entry+0x36>
		tx_event_flags_set(&error_flags, WATCHDOG_RESET, TX_OR);
 800d86e:	2200      	movs	r2, #0
 800d870:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d874:	4889      	ldr	r0, [pc, #548]	; (800da9c <startup_thread_entry+0x258>)
 800d876:	f010 fca3 	bl	801e1c0 <_txe_event_flags_set>
	}

	if (device_handles->reset_reason & RCC_RESET_FLAG_SW){
 800d87a:	4b87      	ldr	r3, [pc, #540]	; (800da98 <startup_thread_entry+0x254>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d005      	beq.n	800d894 <startup_thread_entry+0x50>
		tx_event_flags_set(&error_flags, SOFTWARE_RESET, TX_OR);
 800d888:	2200      	movs	r2, #0
 800d88a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d88e:	4883      	ldr	r0, [pc, #524]	; (800da9c <startup_thread_entry+0x258>)
 800d890:	f010 fc96 	bl	801e1c0 <_txe_event_flags_set>
	}

	waves_memory_pool_init(&waves_byte_pool);
 800d894:	4882      	ldr	r0, [pc, #520]	; (800daa0 <startup_thread_entry+0x25c>)
 800d896:	f7fc f901 	bl	8009a9c <waves_memory_pool_init>

	if (waves_memory_pool_create(&(waves_byte_pool_buffer[0]), WAVES_MEM_POOL_SIZE) != TX_SUCCESS){
 800d89a:	4982      	ldr	r1, [pc, #520]	; (800daa4 <startup_thread_entry+0x260>)
 800d89c:	4882      	ldr	r0, [pc, #520]	; (800daa8 <startup_thread_entry+0x264>)
 800d89e:	f7fc f90d 	bl	8009abc <waves_memory_pool_create>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <startup_thread_entry+0x6c>
		shut_it_all_down();
 800d8a8:	f000 ffee 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800d8ac:	f004 fafb 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	// These structs are being allocated to the waves_byte_pool, and have no overlap with tx_app_byte_pool
	// Each struct has a float array written to by GNSS. These are freed after processing in waves thread.
	north = argInit_1xUnbounded_real32_T(&configuration);
 800d8b0:	487e      	ldr	r0, [pc, #504]	; (800daac <startup_thread_entry+0x268>)
 800d8b2:	f7fc f980 	bl	8009bb6 <argInit_1xUnbounded_real32_T>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	4a7d      	ldr	r2, [pc, #500]	; (800dab0 <startup_thread_entry+0x26c>)
 800d8ba:	6013      	str	r3, [r2, #0]
	east  = argInit_1xUnbounded_real32_T(&configuration);
 800d8bc:	487b      	ldr	r0, [pc, #492]	; (800daac <startup_thread_entry+0x268>)
 800d8be:	f7fc f97a 	bl	8009bb6 <argInit_1xUnbounded_real32_T>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4a7b      	ldr	r2, [pc, #492]	; (800dab4 <startup_thread_entry+0x270>)
 800d8c6:	6013      	str	r3, [r2, #0]
	down  = argInit_1xUnbounded_real32_T(&configuration);
 800d8c8:	4878      	ldr	r0, [pc, #480]	; (800daac <startup_thread_entry+0x268>)
 800d8ca:	f7fc f974 	bl	8009bb6 <argInit_1xUnbounded_real32_T>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4a79      	ldr	r2, [pc, #484]	; (800dab8 <startup_thread_entry+0x274>)
 800d8d2:	6013      	str	r3, [r2, #0]

	// Initialize the structs
	gnss_init(gnss, &configuration, device_handles->GNSS_uart, device_handles->GNSS_dma_handle,
 800d8d4:	4b79      	ldr	r3, [pc, #484]	; (800dabc <startup_thread_entry+0x278>)
 800d8d6:	681e      	ldr	r6, [r3, #0]
 800d8d8:	4b6f      	ldr	r3, [pc, #444]	; (800da98 <startup_thread_entry+0x254>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	60bb      	str	r3, [r7, #8]
 800d8e0:	4b6d      	ldr	r3, [pc, #436]	; (800da98 <startup_thread_entry+0x254>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6959      	ldr	r1, [r3, #20]
 800d8e6:	6079      	str	r1, [r7, #4]
			&thread_control_flags, &error_flags, device_handles->gnss_timer, &(ubx_message_process_buf[0]), device_handles->hrtc,
 800d8e8:	4b6b      	ldr	r3, [pc, #428]	; (800da98 <startup_thread_entry+0x254>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
	gnss_init(gnss, &configuration, device_handles->GNSS_uart, device_handles->GNSS_dma_handle,
 800d8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ee:	4a74      	ldr	r2, [pc, #464]	; (800dac0 <startup_thread_entry+0x27c>)
 800d8f0:	6812      	ldr	r2, [r2, #0]
			&thread_control_flags, &error_flags, device_handles->gnss_timer, &(ubx_message_process_buf[0]), device_handles->hrtc,
 800d8f2:	4969      	ldr	r1, [pc, #420]	; (800da98 <startup_thread_entry+0x254>)
 800d8f4:	6809      	ldr	r1, [r1, #0]
	gnss_init(gnss, &configuration, device_handles->GNSS_uart, device_handles->GNSS_dma_handle,
 800d8f6:	6809      	ldr	r1, [r1, #0]
			north->data, east->data, down->data);
 800d8f8:	486d      	ldr	r0, [pc, #436]	; (800dab0 <startup_thread_entry+0x26c>)
 800d8fa:	6800      	ldr	r0, [r0, #0]
	gnss_init(gnss, &configuration, device_handles->GNSS_uart, device_handles->GNSS_dma_handle,
 800d8fc:	6800      	ldr	r0, [r0, #0]
			north->data, east->data, down->data);
 800d8fe:	4c6d      	ldr	r4, [pc, #436]	; (800dab4 <startup_thread_entry+0x270>)
 800d900:	6824      	ldr	r4, [r4, #0]
	gnss_init(gnss, &configuration, device_handles->GNSS_uart, device_handles->GNSS_dma_handle,
 800d902:	6824      	ldr	r4, [r4, #0]
			north->data, east->data, down->data);
 800d904:	4d6c      	ldr	r5, [pc, #432]	; (800dab8 <startup_thread_entry+0x274>)
 800d906:	682d      	ldr	r5, [r5, #0]
	gnss_init(gnss, &configuration, device_handles->GNSS_uart, device_handles->GNSS_dma_handle,
 800d908:	682d      	ldr	r5, [r5, #0]
 800d90a:	9507      	str	r5, [sp, #28]
 800d90c:	9406      	str	r4, [sp, #24]
 800d90e:	9005      	str	r0, [sp, #20]
 800d910:	9104      	str	r1, [sp, #16]
 800d912:	9203      	str	r2, [sp, #12]
 800d914:	9302      	str	r3, [sp, #8]
 800d916:	4b61      	ldr	r3, [pc, #388]	; (800da9c <startup_thread_entry+0x258>)
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	4b6a      	ldr	r3, [pc, #424]	; (800dac4 <startup_thread_entry+0x280>)
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	4962      	ldr	r1, [pc, #392]	; (800daac <startup_thread_entry+0x268>)
 800d924:	4630      	mov	r0, r6
 800d926:	f7fd f94b 	bl	800abc0 <gnss_init>
	iridium_init(iridium, &configuration, device_handles->Iridium_uart,
 800d92a:	4b67      	ldr	r3, [pc, #412]	; (800dac8 <startup_thread_entry+0x284>)
 800d92c:	681e      	ldr	r6, [r3, #0]
 800d92e:	4b5a      	ldr	r3, [pc, #360]	; (800da98 <startup_thread_entry+0x254>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	689b      	ldr	r3, [r3, #8]
 800d934:	60bb      	str	r3, [r7, #8]
					device_handles->Iridium_rx_dma_handle, device_handles->iridium_timer,
 800d936:	4b58      	ldr	r3, [pc, #352]	; (800da98 <startup_thread_entry+0x254>)
 800d938:	681b      	ldr	r3, [r3, #0]
	iridium_init(iridium, &configuration, device_handles->Iridium_uart,
 800d93a:	69d9      	ldr	r1, [r3, #28]
 800d93c:	6079      	str	r1, [r7, #4]
					device_handles->Iridium_rx_dma_handle, device_handles->iridium_timer,
 800d93e:	4b56      	ldr	r3, [pc, #344]	; (800da98 <startup_thread_entry+0x254>)
 800d940:	681b      	ldr	r3, [r3, #0]
	iridium_init(iridium, &configuration, device_handles->Iridium_uart,
 800d942:	6a1b      	ldr	r3, [r3, #32]
					device_handles->Iridium_tx_dma_handle, &thread_control_flags, &error_flags,
 800d944:	4a54      	ldr	r2, [pc, #336]	; (800da98 <startup_thread_entry+0x254>)
 800d946:	6812      	ldr	r2, [r2, #0]
	iridium_init(iridium, &configuration, device_handles->Iridium_uart,
 800d948:	6992      	ldr	r2, [r2, #24]
					device_handles->hrtc, &sbd_message, iridium_error_message,
 800d94a:	4953      	ldr	r1, [pc, #332]	; (800da98 <startup_thread_entry+0x254>)
 800d94c:	6809      	ldr	r1, [r1, #0]
	iridium_init(iridium, &configuration, device_handles->Iridium_uart,
 800d94e:	6809      	ldr	r1, [r1, #0]
 800d950:	485e      	ldr	r0, [pc, #376]	; (800dacc <startup_thread_entry+0x288>)
 800d952:	6800      	ldr	r0, [r0, #0]
 800d954:	4c5e      	ldr	r4, [pc, #376]	; (800dad0 <startup_thread_entry+0x28c>)
 800d956:	6824      	ldr	r4, [r4, #0]
 800d958:	4d5e      	ldr	r5, [pc, #376]	; (800dad4 <startup_thread_entry+0x290>)
 800d95a:	682d      	ldr	r5, [r5, #0]
 800d95c:	9508      	str	r5, [sp, #32]
 800d95e:	9407      	str	r4, [sp, #28]
 800d960:	9006      	str	r0, [sp, #24]
 800d962:	484c      	ldr	r0, [pc, #304]	; (800da94 <startup_thread_entry+0x250>)
 800d964:	9005      	str	r0, [sp, #20]
 800d966:	9104      	str	r1, [sp, #16]
 800d968:	494c      	ldr	r1, [pc, #304]	; (800da9c <startup_thread_entry+0x258>)
 800d96a:	9103      	str	r1, [sp, #12]
 800d96c:	4955      	ldr	r1, [pc, #340]	; (800dac4 <startup_thread_entry+0x280>)
 800d96e:	9102      	str	r1, [sp, #8]
 800d970:	9201      	str	r2, [sp, #4]
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	494c      	ldr	r1, [pc, #304]	; (800daac <startup_thread_entry+0x268>)
 800d97a:	4630      	mov	r0, r6
 800d97c:	f7fe fb26 	bl	800bfcc <iridium_init>
					iridium_response_message, sbd_message_queue);
#if CT_ENABLED
	ct_init(ct, &configuration, device_handles->CT_uart, device_handles->CT_dma_handle,
 800d980:	4b55      	ldr	r3, [pc, #340]	; (800dad8 <startup_thread_entry+0x294>)
 800d982:	6818      	ldr	r0, [r3, #0]
 800d984:	4b44      	ldr	r3, [pc, #272]	; (800da98 <startup_thread_entry+0x254>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6859      	ldr	r1, [r3, #4]
 800d98a:	4b43      	ldr	r3, [pc, #268]	; (800da98 <startup_thread_entry+0x254>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	691c      	ldr	r4, [r3, #16]
 800d990:	4b52      	ldr	r3, [pc, #328]	; (800dadc <startup_thread_entry+0x298>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a52      	ldr	r2, [pc, #328]	; (800dae0 <startup_thread_entry+0x29c>)
 800d996:	6812      	ldr	r2, [r2, #0]
 800d998:	9203      	str	r2, [sp, #12]
 800d99a:	9302      	str	r3, [sp, #8]
 800d99c:	4b3f      	ldr	r3, [pc, #252]	; (800da9c <startup_thread_entry+0x258>)
 800d99e:	9301      	str	r3, [sp, #4]
 800d9a0:	4b48      	ldr	r3, [pc, #288]	; (800dac4 <startup_thread_entry+0x280>)
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	4623      	mov	r3, r4
 800d9a6:	460a      	mov	r2, r1
 800d9a8:	4940      	ldr	r1, [pc, #256]	; (800daac <startup_thread_entry+0x268>)
 800d9aa:	f7fc fdef 	bl	800a58c <ct_init>
					&thread_control_flags, &error_flags, ct_data, samples_buf);
#endif
	// Initialize the RF switch and set it to the GNSS port
	rf_switch_init(rf_switch);
 800d9ae:	4b4d      	ldr	r3, [pc, #308]	; (800dae4 <startup_thread_entry+0x2a0>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7ff fb42 	bl	800d03c <rf_switch_init>

	tx_return = tx_event_flags_get(&thread_control_flags, FULL_CYCLE_COMPLETE, TX_OR_CLEAR,
 800d9b8:	f107 0310 	add.w	r3, r7, #16
 800d9bc:	2200      	movs	r2, #0
 800d9be:	9200      	str	r2, [sp, #0]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d9c6:	483f      	ldr	r0, [pc, #252]	; (800dac4 <startup_thread_entry+0x280>)
 800d9c8:	f010 fba4 	bl	801e114 <_txe_event_flags_get>
 800d9cc:	61b8      	str	r0, [r7, #24]
			&actual_flags, TX_NO_WAIT);
	// If this is a subsequent window, just setup the GNSS, skip the rest
	if (tx_return == TX_SUCCESS) {
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f040 80c1 	bne.w	800db58 <startup_thread_entry+0x314>

		HAL_GPIO_WritePin(GPIOF, EXT_LED_GREEN_Pin, GPIO_PIN_SET);
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	2102      	movs	r1, #2
 800d9da:	4843      	ldr	r0, [pc, #268]	; (800dae8 <startup_thread_entry+0x2a4>)
 800d9dc:	f006 fbf8 	bl	80141d0 <HAL_GPIO_WritePin>

		// Reset all threads
		tx_return = tx_thread_reset(&gnss_thread);
 800d9e0:	4842      	ldr	r0, [pc, #264]	; (800daec <startup_thread_entry+0x2a8>)
 800d9e2:	f010 fd0f 	bl	801e404 <_txe_thread_reset>
 800d9e6:	61b8      	str	r0, [r7, #24]
		if (tx_return == TX_NOT_DONE){
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	2b20      	cmp	r3, #32
 800d9ec:	d105      	bne.n	800d9fa <startup_thread_entry+0x1b6>
			tx_thread_terminate(&gnss_thread);
 800d9ee:	483f      	ldr	r0, [pc, #252]	; (800daec <startup_thread_entry+0x2a8>)
 800d9f0:	f010 fd62 	bl	801e4b8 <_txe_thread_terminate>
			tx_thread_reset(&gnss_thread);
 800d9f4:	483d      	ldr	r0, [pc, #244]	; (800daec <startup_thread_entry+0x2a8>)
 800d9f6:	f010 fd05 	bl	801e404 <_txe_thread_reset>
		}
#if CT_ENABLED
		tx_return = tx_thread_reset(&ct_thread);
 800d9fa:	483d      	ldr	r0, [pc, #244]	; (800daf0 <startup_thread_entry+0x2ac>)
 800d9fc:	f010 fd02 	bl	801e404 <_txe_thread_reset>
 800da00:	61b8      	str	r0, [r7, #24]
		if (tx_return == TX_NOT_DONE){
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	2b20      	cmp	r3, #32
 800da06:	d105      	bne.n	800da14 <startup_thread_entry+0x1d0>
			tx_thread_terminate(&ct_thread);
 800da08:	4839      	ldr	r0, [pc, #228]	; (800daf0 <startup_thread_entry+0x2ac>)
 800da0a:	f010 fd55 	bl	801e4b8 <_txe_thread_terminate>
			tx_thread_reset(&ct_thread);
 800da0e:	4838      	ldr	r0, [pc, #224]	; (800daf0 <startup_thread_entry+0x2ac>)
 800da10:	f010 fcf8 	bl	801e404 <_txe_thread_reset>
		}
#endif
		tx_return = tx_thread_reset(&waves_thread);
 800da14:	4837      	ldr	r0, [pc, #220]	; (800daf4 <startup_thread_entry+0x2b0>)
 800da16:	f010 fcf5 	bl	801e404 <_txe_thread_reset>
 800da1a:	61b8      	str	r0, [r7, #24]
		if (tx_return == TX_NOT_DONE){
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	2b20      	cmp	r3, #32
 800da20:	d105      	bne.n	800da2e <startup_thread_entry+0x1ea>
			tx_thread_terminate(&waves_thread);
 800da22:	4834      	ldr	r0, [pc, #208]	; (800daf4 <startup_thread_entry+0x2b0>)
 800da24:	f010 fd48 	bl	801e4b8 <_txe_thread_terminate>
			tx_thread_reset(&waves_thread);
 800da28:	4832      	ldr	r0, [pc, #200]	; (800daf4 <startup_thread_entry+0x2b0>)
 800da2a:	f010 fceb 	bl	801e404 <_txe_thread_reset>
		}
		tx_return = tx_thread_reset(&iridium_thread);
 800da2e:	4832      	ldr	r0, [pc, #200]	; (800daf8 <startup_thread_entry+0x2b4>)
 800da30:	f010 fce8 	bl	801e404 <_txe_thread_reset>
 800da34:	61b8      	str	r0, [r7, #24]
		if (tx_return == TX_NOT_DONE){
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	2b20      	cmp	r3, #32
 800da3a:	d105      	bne.n	800da48 <startup_thread_entry+0x204>
			tx_thread_terminate(&iridium_thread);
 800da3c:	482e      	ldr	r0, [pc, #184]	; (800daf8 <startup_thread_entry+0x2b4>)
 800da3e:	f010 fd3b 	bl	801e4b8 <_txe_thread_terminate>
			tx_thread_reset(&iridium_thread);
 800da42:	482d      	ldr	r0, [pc, #180]	; (800daf8 <startup_thread_entry+0x2b4>)
 800da44:	f010 fcde 	bl	801e404 <_txe_thread_reset>
		}
		tx_return = tx_thread_reset(&end_of_cycle_thread);
 800da48:	482c      	ldr	r0, [pc, #176]	; (800dafc <startup_thread_entry+0x2b8>)
 800da4a:	f010 fcdb 	bl	801e404 <_txe_thread_reset>
 800da4e:	61b8      	str	r0, [r7, #24]
		if (tx_return == TX_NOT_DONE){
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	2b20      	cmp	r3, #32
 800da54:	d105      	bne.n	800da62 <startup_thread_entry+0x21e>
			tx_thread_terminate(&end_of_cycle_thread);
 800da56:	4829      	ldr	r0, [pc, #164]	; (800dafc <startup_thread_entry+0x2b8>)
 800da58:	f010 fd2e 	bl	801e4b8 <_txe_thread_terminate>
			tx_thread_reset(&end_of_cycle_thread);
 800da5c:	4827      	ldr	r0, [pc, #156]	; (800dafc <startup_thread_entry+0x2b8>)
 800da5e:	f010 fcd1 	bl	801e404 <_txe_thread_reset>
		}

		// Power up the RF switch
		rf_switch->power_on(rf_switch);
 800da62:	4b20      	ldr	r3, [pc, #128]	; (800dae4 <startup_thread_entry+0x2a0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	4a1e      	ldr	r2, [pc, #120]	; (800dae4 <startup_thread_entry+0x2a0>)
 800da6a:	6812      	ldr	r2, [r2, #0]
 800da6c:	4610      	mov	r0, r2
 800da6e:	4798      	blx	r3

		// Check if there was a GNSS error. If so, reconfigure device
		tx_return = tx_event_flags_get(&thread_control_flags, GNSS_CONFIG_REQUIRED,
 800da70:	f107 0310 	add.w	r3, r7, #16
 800da74:	2200      	movs	r2, #0
 800da76:	9200      	str	r2, [sp, #0]
 800da78:	2201      	movs	r2, #1
 800da7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800da7e:	4811      	ldr	r0, [pc, #68]	; (800dac4 <startup_thread_entry+0x280>)
 800da80:	f010 fb48 	bl	801e114 <_txe_event_flags_get>
 800da84:	61b8      	str	r0, [r7, #24]
				TX_OR_CLEAR, &actual_flags, TX_NO_WAIT);
		if (tx_return == TX_SUCCESS) {
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d153      	bne.n	800db34 <startup_thread_entry+0x2f0>
			fail_counter = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	61fb      	str	r3, [r7, #28]
			while (fail_counter < MAX_SELF_TEST_RETRIES) {
 800da90:	e04b      	b.n	800db2a <startup_thread_entry+0x2e6>
 800da92:	bf00      	nop
 800da94:	20023514 	.word	0x20023514
 800da98:	20023a44 	.word	0x20023a44
 800da9c:	200239f4 	.word	0x200239f4
 800daa0:	200b62c4 	.word	0x200b62c4
 800daa4:	000927c0 	.word	0x000927c0
 800daa8:	20023b04 	.word	0x20023b04
 800daac:	20023500 	.word	0x20023500
 800dab0:	20023a18 	.word	0x20023a18
 800dab4:	20023a1c 	.word	0x20023a1c
 800dab8:	20023a20 	.word	0x20023a20
 800dabc:	20023a38 	.word	0x20023a38
 800dac0:	20023a28 	.word	0x20023a28
 800dac4:	200239d0 	.word	0x200239d0
 800dac8:	20023a3c 	.word	0x20023a3c
 800dacc:	20023a30 	.word	0x20023a30
 800dad0:	20023a2c 	.word	0x20023a2c
 800dad4:	20023a34 	.word	0x20023a34
 800dad8:	20023af8 	.word	0x20023af8
 800dadc:	20023afc 	.word	0x20023afc
 800dae0:	20023b00 	.word	0x20023b00
 800dae4:	20023a40 	.word	0x20023a40
 800dae8:	42021400 	.word	0x42021400
 800daec:	20023710 	.word	0x20023710
 800daf0:	20023a48 	.word	0x20023a48
 800daf4:	200237c0 	.word	0x200237c0
 800daf8:	20023870 	.word	0x20023870
 800dafc:	20023920 	.word	0x20023920
				if (gnss->config(gnss) != GNSS_SUCCESS) {
 800db00:	4b34      	ldr	r3, [pc, #208]	; (800dbd4 <startup_thread_entry+0x390>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db06:	4a33      	ldr	r2, [pc, #204]	; (800dbd4 <startup_thread_entry+0x390>)
 800db08:	6812      	ldr	r2, [r2, #0]
 800db0a:	4610      	mov	r0, r2
 800db0c:	4798      	blx	r3
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00e      	beq.n	800db32 <startup_thread_entry+0x2ee>
					// Config didn't work, cycle power and try again
					gnss->cycle_power(gnss);
 800db14:	4b2f      	ldr	r3, [pc, #188]	; (800dbd4 <startup_thread_entry+0x390>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db1c:	4a2d      	ldr	r2, [pc, #180]	; (800dbd4 <startup_thread_entry+0x390>)
 800db1e:	6812      	ldr	r2, [r2, #0]
 800db20:	4610      	mov	r0, r2
 800db22:	4798      	blx	r3
					fail_counter++;
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	3301      	adds	r3, #1
 800db28:	61fb      	str	r3, [r7, #28]
			while (fail_counter < MAX_SELF_TEST_RETRIES) {
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	2b04      	cmp	r3, #4
 800db2e:	dde7      	ble.n	800db00 <startup_thread_entry+0x2bc>
 800db30:	e000      	b.n	800db34 <startup_thread_entry+0x2f0>
				} else {
					break;
 800db32:	bf00      	nop
				}
			}
		}
		// If we couldn't configure the GNSS, send a reset vector
		if (fail_counter == MAX_SELF_TEST_RETRIES) {
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	2b05      	cmp	r3, #5
 800db38:	d103      	bne.n	800db42 <startup_thread_entry+0x2fe>
			shut_it_all_down();
 800db3a:	f000 fea5 	bl	800e888 <shut_it_all_down>
			HAL_NVIC_SystemReset();
 800db3e:	f004 f9b2 	bl	8011ea6 <HAL_NVIC_SystemReset>
		}

		// Kick off the GNSS thread
		if (tx_thread_resume(&gnss_thread) != TX_SUCCESS){
 800db42:	4825      	ldr	r0, [pc, #148]	; (800dbd8 <startup_thread_entry+0x394>)
 800db44:	f010 fc9a 	bl	801e47c <_txe_thread_resume>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d03a      	beq.n	800dbc4 <startup_thread_entry+0x380>
			shut_it_all_down();
 800db4e:	f000 fe9b 	bl	800e888 <shut_it_all_down>
			HAL_NVIC_SystemReset();
 800db52:	f004 f9a8 	bl	8011ea6 <HAL_NVIC_SystemReset>
 800db56:	e035      	b.n	800dbc4 <startup_thread_entry+0x380>

	// This is first time power up, test everything and flash LED sequence
	else
	{
		// Flash some lights to let the user know its on and working
		led_sequence(INITIAL_LED_SEQUENCE);
 800db58:	2001      	movs	r0, #1
 800db5a:	f000 fd79 	bl	800e650 <led_sequence>

		rf_switch->power_on(rf_switch);
 800db5e:	4b1f      	ldr	r3, [pc, #124]	; (800dbdc <startup_thread_entry+0x398>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	4a1d      	ldr	r2, [pc, #116]	; (800dbdc <startup_thread_entry+0x398>)
 800db66:	6812      	ldr	r2, [r2, #0]
 800db68:	4610      	mov	r0, r2
 800db6a:	4798      	blx	r3

		self_test_status = initial_power_on_self_test();
 800db6c:	f000 feba 	bl	800e8e4 <initial_power_on_self_test>
 800db70:	4603      	mov	r3, r0
 800db72:	75fb      	strb	r3, [r7, #23]

		switch (self_test_status){
 800db74:	7dfb      	ldrb	r3, [r7, #23]
 800db76:	2b02      	cmp	r3, #2
 800db78:	d00e      	beq.n	800db98 <startup_thread_entry+0x354>
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	dc12      	bgt.n	800dba4 <startup_thread_entry+0x360>
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <startup_thread_entry+0x344>
 800db82:	2b01      	cmp	r3, #1
 800db84:	d004      	beq.n	800db90 <startup_thread_entry+0x34c>
 800db86:	e00d      	b.n	800dba4 <startup_thread_entry+0x360>
			case SELF_TEST_PASSED:
				led_sequence(TEST_PASSED_LED_SEQUENCE);
 800db88:	2002      	movs	r0, #2
 800db8a:	f000 fd61 	bl	800e650 <led_sequence>
				break;
 800db8e:	e00f      	b.n	800dbb0 <startup_thread_entry+0x36c>

			case SELF_TEST_NON_CRITICAL_FAULT:
				led_sequence(TEST_NON_CRITICAL_FAULT_LED_SEQUENCE);
 800db90:	2003      	movs	r0, #3
 800db92:	f000 fd5d 	bl	800e650 <led_sequence>
				break;
 800db96:	e00b      	b.n	800dbb0 <startup_thread_entry+0x36c>

			case SELF_TEST_CRITICAL_FAULT:
				shut_it_all_down();
 800db98:	f000 fe76 	bl	800e888 <shut_it_all_down>
				// Stay stuck here
				while (1) {
					led_sequence(SELF_TEST_CRITICAL_FAULT);
 800db9c:	2002      	movs	r0, #2
 800db9e:	f000 fd57 	bl	800e650 <led_sequence>
 800dba2:	e7fb      	b.n	800db9c <startup_thread_entry+0x358>
				}

			default:
				// If we got here, there's probably a memory corruption
				shut_it_all_down();
 800dba4:	f000 fe70 	bl	800e888 <shut_it_all_down>
				// Stay stuck here
				while (1) {
					led_sequence(SELF_TEST_CRITICAL_FAULT);
 800dba8:	2002      	movs	r0, #2
 800dbaa:	f000 fd51 	bl	800e650 <led_sequence>
 800dbae:	e7fb      	b.n	800dba8 <startup_thread_entry+0x364>
				}
		}
		// Kick off the GNSS thread
		if (tx_thread_resume(&gnss_thread) != TX_SUCCESS){
 800dbb0:	4809      	ldr	r0, [pc, #36]	; (800dbd8 <startup_thread_entry+0x394>)
 800dbb2:	f010 fc63 	bl	801e47c <_txe_thread_resume>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d003      	beq.n	800dbc4 <startup_thread_entry+0x380>
			shut_it_all_down();
 800dbbc:	f000 fe64 	bl	800e888 <shut_it_all_down>
			HAL_NVIC_SystemReset();
 800dbc0:	f004 f971 	bl	8011ea6 <HAL_NVIC_SystemReset>
		}
	}

	// We're done, terminate this thread
	tx_thread_terminate(&startup_thread);
 800dbc4:	4806      	ldr	r0, [pc, #24]	; (800dbe0 <startup_thread_entry+0x39c>)
 800dbc6:	f010 fc77 	bl	801e4b8 <_txe_thread_terminate>
}
 800dbca:	bf00      	nop
 800dbcc:	3724      	adds	r7, #36	; 0x24
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	20023a38 	.word	0x20023a38
 800dbd8:	20023710 	.word	0x20023710
 800dbdc:	20023a40 	.word	0x20023a40
 800dbe0:	20023660 	.word	0x20023660

0800dbe4 <gnss_thread_entry>:
  *         happens in interrupt context, so this thread is just acting as the traffic cop.
  *
  * @param  ULONG thread_input - unused
  * @retval void
  */
void gnss_thread_entry(ULONG thread_input){
 800dbe4:	b590      	push	{r4, r7, lr}
 800dbe6:	b08d      	sub	sp, #52	; 0x34
 800dbe8:	af02      	add	r7, sp, #8
 800dbea:	6078      	str	r0, [r7, #4]

	float last_lat = 0;
 800dbec:	f04f 0300 	mov.w	r3, #0
 800dbf0:	61bb      	str	r3, [r7, #24]
	float last_lon = 0;
 800dbf2:	f04f 0300 	mov.w	r3, #0
 800dbf6:	617b      	str	r3, [r7, #20]
	uint8_t sbd_port;
	UINT tx_return;
	ULONG actual_flags;
	int timer_ticks_to_get_message = (TX_TIMER_TICKS_PER_SECOND / configuration.gnss_sampling_rate) + 2;
 800dbf8:	4b86      	ldr	r3, [pc, #536]	; (800de14 <gnss_thread_entry+0x230>)
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	220a      	movs	r2, #10
 800dbfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc02:	3302      	adds	r3, #2
 800dc04:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t sample_window_timeout = ((configuration.samples_per_window / configuration.gnss_sampling_rate)
 800dc06:	4b83      	ldr	r3, [pc, #524]	; (800de14 <gnss_thread_entry+0x230>)
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	4b82      	ldr	r3, [pc, #520]	; (800de14 <gnss_thread_entry+0x230>)
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	fbb2 f3f3 	udiv	r3, r2, r3
			/ 60) + 1;
 800dc12:	4a81      	ldr	r2, [pc, #516]	; (800de18 <gnss_thread_entry+0x234>)
 800dc14:	fba2 2303 	umull	r2, r3, r2, r3
 800dc18:	095b      	lsrs	r3, r3, #5
 800dc1a:	b2db      	uxtb	r3, r3
	uint8_t sample_window_timeout = ((configuration.samples_per_window / configuration.gnss_sampling_rate)
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	// Grab the RF switch
	rf_switch->set_gnss_port(rf_switch);
 800dc22:	4b7e      	ldr	r3, [pc, #504]	; (800de1c <gnss_thread_entry+0x238>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	4a7c      	ldr	r2, [pc, #496]	; (800de1c <gnss_thread_entry+0x238>)
 800dc2a:	6812      	ldr	r2, [r2, #0]
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	4798      	blx	r3

	// Start the timer for resolution stages
	gnss->reset_timer(gnss, configuration.gnss_max_acquisition_wait_time);
 800dc30:	4b7b      	ldr	r3, [pc, #492]	; (800de20 <gnss_thread_entry+0x23c>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc38:	4a79      	ldr	r2, [pc, #484]	; (800de20 <gnss_thread_entry+0x23c>)
 800dc3a:	6812      	ldr	r2, [r2, #0]
 800dc3c:	4975      	ldr	r1, [pc, #468]	; (800de14 <gnss_thread_entry+0x230>)
 800dc3e:	6889      	ldr	r1, [r1, #8]
 800dc40:	b2c9      	uxtb	r1, r1
 800dc42:	4610      	mov	r0, r2
 800dc44:	4798      	blx	r3
	HAL_TIM_Base_Start_IT(gnss->minutes_timer);
 800dc46:	4b76      	ldr	r3, [pc, #472]	; (800de20 <gnss_thread_entry+0x23c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f00b fbeb 	bl	8019428 <HAL_TIM_Base_Start_IT>

	// Wait until we get a series of good UBX_NAV_PVT messages and are
	// tracking a good number of satellites before moving on
	if (gnss->sync_and_start_reception(gnss, start_GNSS_UART_DMA, ubx_DMA_message_buf, UBX_MESSAGE_SIZE)
 800dc52:	4b73      	ldr	r3, [pc, #460]	; (800de20 <gnss_thread_entry+0x23c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800dc58:	4b71      	ldr	r3, [pc, #452]	; (800de20 <gnss_thread_entry+0x23c>)
 800dc5a:	6818      	ldr	r0, [r3, #0]
 800dc5c:	4b71      	ldr	r3, [pc, #452]	; (800de24 <gnss_thread_entry+0x240>)
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	2364      	movs	r3, #100	; 0x64
 800dc62:	4971      	ldr	r1, [pc, #452]	; (800de28 <gnss_thread_entry+0x244>)
 800dc64:	47a0      	blx	r4
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d003      	beq.n	800dc74 <gnss_thread_entry+0x90>
				!= GNSS_SUCCESS)
	{
		// If we were unable to get good GNSS reception and start the DMA transfer loop, then
		// go to sleep until the top of the next hour. Sleep will be handled in end_of_cycle_thread
		jump_to_end_of_window(GNSS_ERROR);
 800dc6c:	2002      	movs	r0, #2
 800dc6e:	f000 fedf 	bl	800ea30 <jump_to_end_of_window>
 800dc72:	e01e      	b.n	800dcb2 <gnss_thread_entry+0xce>
	}
	else
	{
		gnss->is_configured = true;
 800dc74:	4b6a      	ldr	r3, [pc, #424]	; (800de20 <gnss_thread_entry+0x23c>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}

	while (!(gnss->all_resolution_stages_complete || gnss->timer_timeout)) {
 800dc7e:	e018      	b.n	800dcb2 <gnss_thread_entry+0xce>
		tx_return = tx_event_flags_get(&thread_control_flags, GNSS_MESSAGE_RECEIVED, TX_OR_CLEAR,
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	f107 020c 	add.w	r2, r7, #12
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dc90:	4866      	ldr	r0, [pc, #408]	; (800de2c <gnss_thread_entry+0x248>)
 800dc92:	f010 fa3f 	bl	801e114 <_txe_event_flags_get>
 800dc96:	61f8      	str	r0, [r7, #28]
				&actual_flags, timer_ticks_to_get_message);

		if (tx_return != TX_SUCCESS){
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d002      	beq.n	800dca4 <gnss_thread_entry+0xc0>
			jump_to_end_of_window(GNSS_ERROR);
 800dc9e:	2002      	movs	r0, #2
 800dca0:	f000 fec6 	bl	800ea30 <jump_to_end_of_window>
		}

		gnss->process_message(gnss);
 800dca4:	4b5e      	ldr	r3, [pc, #376]	; (800de20 <gnss_thread_entry+0x23c>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcaa:	4a5d      	ldr	r2, [pc, #372]	; (800de20 <gnss_thread_entry+0x23c>)
 800dcac:	6812      	ldr	r2, [r2, #0]
 800dcae:	4610      	mov	r0, r2
 800dcb0:	4798      	blx	r3
	while (!(gnss->all_resolution_stages_complete || gnss->timer_timeout)) {
 800dcb2:	4b5b      	ldr	r3, [pc, #364]	; (800de20 <gnss_thread_entry+0x23c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800dcba:	f083 0301 	eor.w	r3, r3, #1
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d008      	beq.n	800dcd6 <gnss_thread_entry+0xf2>
 800dcc4:	4b56      	ldr	r3, [pc, #344]	; (800de20 <gnss_thread_entry+0x23c>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800dccc:	f083 0301 	eor.w	r3, r3, #1
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1d4      	bne.n	800dc80 <gnss_thread_entry+0x9c>
	}

	// If this evaluates to true, we were unable to get adequate GNSS reception to
	// resolve time and get at least 1 good sample. Go to sleep until the top of the next hour.
	// Sleep will be handled in end_of_cycle_thread
	if (gnss->timer_timeout) {
 800dcd6:	4b52      	ldr	r3, [pc, #328]	; (800de20 <gnss_thread_entry+0x23c>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <gnss_thread_entry+0x106>
		jump_to_end_of_window(GNSS_RESOLUTION_ERROR);
 800dce2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dce6:	f000 fea3 	bl	800ea30 <jump_to_end_of_window>
	}

	// We were able to resolve time within the given window of time. Now start the timer to ensure
	// the sample window doesn't take too long
	HAL_TIM_Base_Stop_IT(gnss->minutes_timer);
 800dcea:	4b4d      	ldr	r3, [pc, #308]	; (800de20 <gnss_thread_entry+0x23c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f00b fc39 	bl	8019568 <HAL_TIM_Base_Stop_IT>
	gnss->reset_timer(gnss, sample_window_timeout);
 800dcf6:	4b4a      	ldr	r3, [pc, #296]	; (800de20 <gnss_thread_entry+0x23c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcfe:	4a48      	ldr	r2, [pc, #288]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd00:	6812      	ldr	r2, [r2, #0]
 800dd02:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800dd06:	4610      	mov	r0, r2
 800dd08:	4798      	blx	r3
	HAL_TIM_Base_Start_IT(gnss->minutes_timer);
 800dd0a:	4b45      	ldr	r3, [pc, #276]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	699b      	ldr	r3, [r3, #24]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f00b fb89 	bl	8019428 <HAL_TIM_Base_Start_IT>

	// Wait until all the samples have been processed
	while (!gnss->all_samples_processed){
 800dd16:	e021      	b.n	800dd5c <gnss_thread_entry+0x178>

		tx_return = tx_event_flags_get(&thread_control_flags, GNSS_MESSAGE_RECEIVED, TX_OR_CLEAR,
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	f107 020c 	add.w	r2, r7, #12
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	4613      	mov	r3, r2
 800dd22:	2201      	movs	r2, #1
 800dd24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dd28:	4840      	ldr	r0, [pc, #256]	; (800de2c <gnss_thread_entry+0x248>)
 800dd2a:	f010 f9f3 	bl	801e114 <_txe_event_flags_get>
 800dd2e:	61f8      	str	r0, [r7, #28]
				&actual_flags, timer_ticks_to_get_message);

		if (tx_return != TX_SUCCESS){
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d002      	beq.n	800dd3c <gnss_thread_entry+0x158>
			jump_to_end_of_window(GNSS_ERROR);
 800dd36:	2002      	movs	r0, #2
 800dd38:	f000 fe7a 	bl	800ea30 <jump_to_end_of_window>
		}

		gnss->process_message(gnss);
 800dd3c:	4b38      	ldr	r3, [pc, #224]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd42:	4a37      	ldr	r2, [pc, #220]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd44:	6812      	ldr	r2, [r2, #0]
 800dd46:	4610      	mov	r0, r2
 800dd48:	4798      	blx	r3

		// If this evaluates to true, something hung up with GNSS sampling. End the sample window
		if (gnss->timer_timeout) {
 800dd4a:	4b35      	ldr	r3, [pc, #212]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d002      	beq.n	800dd5c <gnss_thread_entry+0x178>
			jump_to_end_of_window(GNSS_ERROR);
 800dd56:	2002      	movs	r0, #2
 800dd58:	f000 fe6a 	bl	800ea30 <jump_to_end_of_window>
	while (!gnss->all_samples_processed){
 800dd5c:	4b30      	ldr	r3, [pc, #192]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800dd64:	f083 0301 	eor.w	r3, r3, #1
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1d4      	bne.n	800dd18 <gnss_thread_entry+0x134>
		}
	}

	// Stop the timer
	HAL_TIM_Base_Stop_IT(gnss->minutes_timer);
 800dd6e:	4b2c      	ldr	r3, [pc, #176]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	699b      	ldr	r3, [r3, #24]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f00b fbf7 	bl	8019568 <HAL_TIM_Base_Stop_IT>
	// turn off the GNSS sensor
	gnss->on_off(gnss, GPIO_PIN_RESET);
 800dd7a:	4b29      	ldr	r3, [pc, #164]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd82:	4a27      	ldr	r2, [pc, #156]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd84:	6812      	ldr	r2, [r2, #0]
 800dd86:	2100      	movs	r1, #0
 800dd88:	4610      	mov	r0, r2
 800dd8a:	4798      	blx	r3
	// Deinit UART and DMA to prevent spurious interrupts
	HAL_UART_DeInit(gnss->gnss_uart_handle);
 800dd8c:	4b24      	ldr	r3, [pc, #144]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f00c f83a 	bl	8019e0c <HAL_UART_DeInit>
	HAL_DMA_DeInit(gnss->gnss_dma_handle);
 800dd98:	4b21      	ldr	r3, [pc, #132]	; (800de20 <gnss_thread_entry+0x23c>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f004 f9b8 	bl	8012114 <HAL_DMA_DeInit>

	gnss->get_location(gnss, &last_lat, &last_lon);
 800dda4:	4b1e      	ldr	r3, [pc, #120]	; (800de20 <gnss_thread_entry+0x23c>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddaa:	4a1d      	ldr	r2, [pc, #116]	; (800de20 <gnss_thread_entry+0x23c>)
 800ddac:	6810      	ldr	r0, [r2, #0]
 800ddae:	f107 0214 	add.w	r2, r7, #20
 800ddb2:	f107 0118 	add.w	r1, r7, #24
 800ddb6:	4798      	blx	r3
 800ddb8:	69bb      	ldr	r3, [r7, #24]
	// Just to be overly sure about alignment
	memcpy(&sbd_message.Lat, &last_lat, sizeof(float));
 800ddba:	4a1d      	ldr	r2, [pc, #116]	; (800de30 <gnss_thread_entry+0x24c>)
 800ddbc:	f8c2 3135 	str.w	r3, [r2, #309]	; 0x135
 800ddc0:	697b      	ldr	r3, [r7, #20]
	memcpy(&sbd_message.Lon, &last_lon, sizeof(float));
 800ddc2:	4a1b      	ldr	r2, [pc, #108]	; (800de30 <gnss_thread_entry+0x24c>)
 800ddc4:	f8c2 3139 	str.w	r3, [r2, #313]	; 0x139
	// We're using the "port" field to encode how many samples were averaged. If the number
	// is >= 255, then you just get 255.
	sbd_port = (gnss->total_samples_averaged > 255) ? 255 : gnss->total_samples_averaged;
 800ddc8:	4b15      	ldr	r3, [pc, #84]	; (800de20 <gnss_thread_entry+0x23c>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ddd0:	2bff      	cmp	r3, #255	; 0xff
 800ddd2:	bf28      	it	cs
 800ddd4:	23ff      	movcs	r3, #255	; 0xff
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	74fb      	strb	r3, [r7, #19]
 800dddc:	7cfa      	ldrb	r2, [r7, #19]
	memcpy(&sbd_message.port, &sbd_port, sizeof(uint8_t));
 800ddde:	4b14      	ldr	r3, [pc, #80]	; (800de30 <gnss_thread_entry+0x24c>)
 800dde0:	709a      	strb	r2, [r3, #2]

	// Port the RF switch to the modem
	rf_switch->set_iridium_port(rf_switch);
 800dde2:	4b0e      	ldr	r3, [pc, #56]	; (800de1c <gnss_thread_entry+0x238>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	69db      	ldr	r3, [r3, #28]
 800dde8:	4a0c      	ldr	r2, [pc, #48]	; (800de1c <gnss_thread_entry+0x238>)
 800ddea:	6812      	ldr	r2, [r2, #0]
 800ddec:	4610      	mov	r0, r2
 800ddee:	4798      	blx	r3

#if CT_ENABLED

	if (tx_thread_resume(&ct_thread) != TX_SUCCESS){
 800ddf0:	4810      	ldr	r0, [pc, #64]	; (800de34 <gnss_thread_entry+0x250>)
 800ddf2:	f010 fb43 	bl	801e47c <_txe_thread_resume>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d003      	beq.n	800de04 <gnss_thread_entry+0x220>
		shut_it_all_down();
 800ddfc:	f000 fd44 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800de00:	f004 f851 	bl	8011ea6 <HAL_NVIC_SystemReset>
		HAL_NVIC_SystemReset();
	}

#endif

	tx_thread_terminate(&gnss_thread);
 800de04:	480c      	ldr	r0, [pc, #48]	; (800de38 <gnss_thread_entry+0x254>)
 800de06:	f010 fb57 	bl	801e4b8 <_txe_thread_terminate>
}
 800de0a:	bf00      	nop
 800de0c:	372c      	adds	r7, #44	; 0x2c
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd90      	pop	{r4, r7, pc}
 800de12:	bf00      	nop
 800de14:	20023500 	.word	0x20023500
 800de18:	88888889 	.word	0x88888889
 800de1c:	20023a40 	.word	0x20023a40
 800de20:	20023a38 	.word	0x20023a38
 800de24:	20023a24 	.word	0x20023a24
 800de28:	0800e785 	.word	0x0800e785
 800de2c:	200239d0 	.word	0x200239d0
 800de30:	20023514 	.word	0x20023514
 800de34:	20023a48 	.word	0x20023a48
 800de38:	20023710 	.word	0x20023710

0800de3c <ct_thread_entry>:
  *         This thread will handle the CT sensor, capture readings, and getting averages..
  *
  * @param  ULONG thread_input - unused
  * @retval void
  */
void ct_thread_entry(ULONG thread_input){
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
//	ULONG actual_flags;
	ct_error_code_t return_code;
	uint32_t ct_parsing_error_counter = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	617b      	str	r3, [r7, #20]
	real16_T half_salinity;
	real16_T half_temp;

	// Set the mean salinity and temp values to error values in the event the sensor fails
	half_salinity.bitPattern = CT_AVERAGED_VALUE_ERROR_CODE;
 800de48:	f247 03e2 	movw	r3, #28898	; 0x70e2
 800de4c:	823b      	strh	r3, [r7, #16]
	half_temp.bitPattern = CT_AVERAGED_VALUE_ERROR_CODE;
 800de4e:	f247 03e2 	movw	r3, #28898	; 0x70e2
 800de52:	81bb      	strh	r3, [r7, #12]
 800de54:	8a3b      	ldrh	r3, [r7, #16]

	memcpy(&sbd_message.mean_salinity, &half_salinity, sizeof(real16_T));
 800de56:	4a4b      	ldr	r2, [pc, #300]	; (800df84 <ct_thread_entry+0x148>)
 800de58:	f8a2 313f 	strh.w	r3, [r2, #319]	; 0x13f
 800de5c:	89bb      	ldrh	r3, [r7, #12]
	memcpy(&sbd_message.mean_temp, &half_temp, sizeof(real16_T));
 800de5e:	4a49      	ldr	r2, [pc, #292]	; (800df84 <ct_thread_entry+0x148>)
 800de60:	f8a2 313d 	strh.w	r3, [r2, #317]	; 0x13d

	// If the CT sensor doesn't respond, set the error flag and quit
	if (ct->self_test(ct, true) != CT_SUCCESS) {
 800de64:	4b48      	ldr	r3, [pc, #288]	; (800df88 <ct_thread_entry+0x14c>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de6a:	4a47      	ldr	r2, [pc, #284]	; (800df88 <ct_thread_entry+0x14c>)
 800de6c:	6812      	ldr	r2, [r2, #0]
 800de6e:	2101      	movs	r1, #1
 800de70:	4610      	mov	r0, r2
 800de72:	4798      	blx	r3
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d020      	beq.n	800debc <ct_thread_entry+0x80>
		jump_to_waves();
 800de7a:	f000 fe1f 	bl	800eabc <jump_to_waves>
	}

	// Take our samples
	while (ct->total_samples < configuration.total_ct_samples) {
 800de7e:	e01d      	b.n	800debc <ct_thread_entry+0x80>
		return_code = ct_parse_sample(ct);
 800de80:	4b41      	ldr	r3, [pc, #260]	; (800df88 <ct_thread_entry+0x14c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4618      	mov	r0, r3
 800de86:	f7fc fbcf 	bl	800a628 <ct_parse_sample>
 800de8a:	4603      	mov	r3, r0
 800de8c:	74fb      	strb	r3, [r7, #19]

		if (return_code == CT_PARSING_ERROR) {
 800de8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de92:	f113 0f02 	cmn.w	r3, #2
 800de96:	d102      	bne.n	800de9e <ct_thread_entry+0x62>
			ct_parsing_error_counter++;
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	3301      	adds	r3, #1
 800de9c:	617b      	str	r3, [r7, #20]
		}

		if ((ct_parsing_error_counter >= 10) || (return_code == CT_UART_ERROR)) {
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	2b09      	cmp	r3, #9
 800dea2:	d804      	bhi.n	800deae <ct_thread_entry+0x72>
 800dea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deac:	d101      	bne.n	800deb2 <ct_thread_entry+0x76>
			// If there are too many parsing errors or a UART error occurs, then
			// stop trying and
			jump_to_waves();
 800deae:	f000 fe05 	bl	800eabc <jump_to_waves>
		}

		if (return_code == CT_DONE_SAMPLING) {
 800deb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800deb6:	f113 0f05 	cmn.w	r3, #5
 800deba:	d007      	beq.n	800decc <ct_thread_entry+0x90>
	while (ct->total_samples < configuration.total_ct_samples) {
 800debc:	4b32      	ldr	r3, [pc, #200]	; (800df88 <ct_thread_entry+0x14c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dec2:	4b32      	ldr	r3, [pc, #200]	; (800df8c <ct_thread_entry+0x150>)
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d3da      	bcc.n	800de80 <ct_thread_entry+0x44>
 800deca:	e000      	b.n	800dece <ct_thread_entry+0x92>
			break;
 800decc:	bf00      	nop
		}
	}

	// Turn off the CT sensor
	ct->on_off(ct, GPIO_PIN_RESET);
 800dece:	4b2e      	ldr	r3, [pc, #184]	; (800df88 <ct_thread_entry+0x14c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ded4:	4a2c      	ldr	r2, [pc, #176]	; (800df88 <ct_thread_entry+0x14c>)
 800ded6:	6812      	ldr	r2, [r2, #0]
 800ded8:	2100      	movs	r1, #0
 800deda:	4610      	mov	r0, r2
 800dedc:	4798      	blx	r3
	// Deinit UART and DMA to prevent spurious interrupts
	HAL_UART_DeInit(ct->ct_uart_handle);
 800dede:	4b2a      	ldr	r3, [pc, #168]	; (800df88 <ct_thread_entry+0x14c>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f00b ff91 	bl	8019e0c <HAL_UART_DeInit>
	HAL_DMA_DeInit(ct->ct_dma_handle);
 800deea:	4b27      	ldr	r3, [pc, #156]	; (800df88 <ct_thread_entry+0x14c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	4618      	mov	r0, r3
 800def2:	f004 f90f 	bl	8012114 <HAL_DMA_DeInit>

	// Got our samples, now average them
	return_code = ct->get_averages(ct);
 800def6:	4b24      	ldr	r3, [pc, #144]	; (800df88 <ct_thread_entry+0x14c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defc:	4a22      	ldr	r2, [pc, #136]	; (800df88 <ct_thread_entry+0x14c>)
 800defe:	6812      	ldr	r2, [r2, #0]
 800df00:	4610      	mov	r0, r2
 800df02:	4798      	blx	r3
 800df04:	4603      	mov	r3, r0
 800df06:	74fb      	strb	r3, [r7, #19]
	// Make sure something didn't go terribly wrong
	if (return_code == CT_NOT_ENOUGH_SAMPLES) {
 800df08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df0c:	f113 0f04 	cmn.w	r3, #4
 800df10:	d101      	bne.n	800df16 <ct_thread_entry+0xda>
		jump_to_waves();
 800df12:	f000 fdd3 	bl	800eabc <jump_to_waves>
	}

	// Now set the mean salinity and temp values to the real ones
	half_salinity = floatToHalf((float)ct->averages.salinity);
 800df16:	4b1c      	ldr	r3, [pc, #112]	; (800df88 <ct_thread_entry+0x14c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df1e:	4610      	mov	r0, r2
 800df20:	4619      	mov	r1, r3
 800df22:	f7f2 ff87 	bl	8000e34 <__aeabi_d2f>
 800df26:	4603      	mov	r3, r0
 800df28:	ee00 3a10 	vmov	s0, r3
 800df2c:	f7fc f85e 	bl	8009fec <floatToHalf>
 800df30:	4603      	mov	r3, r0
 800df32:	823b      	strh	r3, [r7, #16]
	half_temp = floatToHalf((float)ct->averages.temp);
 800df34:	4b14      	ldr	r3, [pc, #80]	; (800df88 <ct_thread_entry+0x14c>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800df3c:	4610      	mov	r0, r2
 800df3e:	4619      	mov	r1, r3
 800df40:	f7f2 ff78 	bl	8000e34 <__aeabi_d2f>
 800df44:	4603      	mov	r3, r0
 800df46:	ee00 3a10 	vmov	s0, r3
 800df4a:	f7fc f84f 	bl	8009fec <floatToHalf>
 800df4e:	4603      	mov	r3, r0
 800df50:	81bb      	strh	r3, [r7, #12]
 800df52:	8a3b      	ldrh	r3, [r7, #16]

	memcpy(&sbd_message.mean_salinity, &half_salinity, sizeof(real16_T));
 800df54:	4a0b      	ldr	r2, [pc, #44]	; (800df84 <ct_thread_entry+0x148>)
 800df56:	f8a2 313f 	strh.w	r3, [r2, #319]	; 0x13f
 800df5a:	89bb      	ldrh	r3, [r7, #12]
	memcpy(&sbd_message.mean_temp, &half_temp, sizeof(real16_T));
 800df5c:	4a09      	ldr	r2, [pc, #36]	; (800df84 <ct_thread_entry+0x148>)
 800df5e:	f8a2 313d 	strh.w	r3, [r2, #317]	; 0x13d

	if (tx_thread_resume(&waves_thread) != TX_SUCCESS){
 800df62:	480b      	ldr	r0, [pc, #44]	; (800df90 <ct_thread_entry+0x154>)
 800df64:	f010 fa8a 	bl	801e47c <_txe_thread_resume>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d003      	beq.n	800df76 <ct_thread_entry+0x13a>
		shut_it_all_down();
 800df6e:	f000 fc8b 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800df72:	f003 ff98 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	tx_thread_terminate(&ct_thread);
 800df76:	4807      	ldr	r0, [pc, #28]	; (800df94 <ct_thread_entry+0x158>)
 800df78:	f010 fa9e 	bl	801e4b8 <_txe_thread_terminate>
}
 800df7c:	bf00      	nop
 800df7e:	3718      	adds	r7, #24
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20023514 	.word	0x20023514
 800df88:	20023af8 	.word	0x20023af8
 800df8c:	20023500 	.word	0x20023500
 800df90:	200237c0 	.word	0x200237c0
 800df94:	20023a48 	.word	0x20023a48

0800df98 <waves_thread_entry>:
  *         This thread will run the GPSWaves algorithm.
  *
  * @param  ULONG thread_input - unused
  * @retval void
  */
void waves_thread_entry(ULONG thread_input){
 800df98:	b590      	push	{r4, r7, lr}
 800df9a:	b0df      	sub	sp, #380	; 0x17c
 800df9c:	af0a      	add	r7, sp, #40	; 0x28
 800df9e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800dfa2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800dfa6:	6018      	str	r0, [r3, #0]
	signed char b1[42];
	signed char b2[42];
	unsigned char check[42];

	/* Call the entry-point 'NEDwaves_memlight'. */
	NEDwaves_memlight(north, east, down, gnss->sample_window_freq, &Hs, &Tp, &Dp, E,
 800dfa8:	4b4e      	ldr	r3, [pc, #312]	; (800e0e4 <waves_thread_entry+0x14c>)
 800dfaa:	6818      	ldr	r0, [r3, #0]
 800dfac:	4b4e      	ldr	r3, [pc, #312]	; (800e0e8 <waves_thread_entry+0x150>)
 800dfae:	6819      	ldr	r1, [r3, #0]
 800dfb0:	4b4e      	ldr	r3, [pc, #312]	; (800e0ec <waves_thread_entry+0x154>)
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	4b4e      	ldr	r3, [pc, #312]	; (800e0f0 <waves_thread_entry+0x158>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800dfbc:	f107 04f4 	add.w	r4, r7, #244	; 0xf4
 800dfc0:	f107 030c 	add.w	r3, r7, #12
 800dfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dfca:	9308      	str	r3, [sp, #32]
 800dfcc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dfd0:	9307      	str	r3, [sp, #28]
 800dfd2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dfd6:	9306      	str	r3, [sp, #24]
 800dfd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800dfdc:	9305      	str	r3, [sp, #20]
 800dfde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800dfe2:	9304      	str	r3, [sp, #16]
 800dfe4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800dfe8:	9303      	str	r3, [sp, #12]
 800dfea:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800dfee:	9302      	str	r3, [sp, #8]
 800dff0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800dff4:	9301      	str	r3, [sp, #4]
 800dff6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	4623      	mov	r3, r4
 800dffe:	eeb0 0a47 	vmov.f32	s0, s14
 800e002:	eef0 0a67 	vmov.f32	s1, s15
 800e006:	f7f6 ff83 	bl	8004f10 <NEDwaves_memlight>
					&b_fmin, &b_fmax, a1, b1, a2, b2, check);

	emxDestroyArray_real32_T(down);
 800e00a:	4b38      	ldr	r3, [pc, #224]	; (800e0ec <waves_thread_entry+0x154>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fa f838 	bl	8008084 <emxDestroyArray_real32_T>
	emxDestroyArray_real32_T(east);
 800e014:	4b34      	ldr	r3, [pc, #208]	; (800e0e8 <waves_thread_entry+0x150>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fa f833 	bl	8008084 <emxDestroyArray_real32_T>
	emxDestroyArray_real32_T(north);
 800e01e:	4b31      	ldr	r3, [pc, #196]	; (800e0e4 <waves_thread_entry+0x14c>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4618      	mov	r0, r3
 800e024:	f7fa f82e 	bl	8008084 <emxDestroyArray_real32_T>

	// Delete the memory pool to fix the memory leak in NEDwaves_memlight
	if (waves_memory_pool_delete() != TX_SUCCESS) {
 800e028:	f7fb fd60 	bl	8009aec <waves_memory_pool_delete>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d003      	beq.n	800e03a <waves_thread_entry+0xa2>
		shut_it_all_down();
 800e032:	f000 fc29 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800e036:	f003 ff36 	bl	8011ea6 <HAL_NVIC_SystemReset>
 800e03a:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
	}

	memcpy(&sbd_message.Hs, &Hs, sizeof(real16_T));
 800e03e:	4a2d      	ldr	r2, [pc, #180]	; (800e0f4 <waves_thread_entry+0x15c>)
 800e040:	f8a2 3005 	strh.w	r3, [r2, #5]
 800e044:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
	memcpy(&sbd_message.Tp, &Tp, sizeof(real16_T));
 800e048:	4a2a      	ldr	r2, [pc, #168]	; (800e0f4 <waves_thread_entry+0x15c>)
 800e04a:	f8a2 3007 	strh.w	r3, [r2, #7]
 800e04e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
	memcpy(&sbd_message.Dp, &Dp, sizeof(real16_T));
 800e052:	4a28      	ldr	r2, [pc, #160]	; (800e0f4 <waves_thread_entry+0x15c>)
 800e054:	f8a2 3009 	strh.w	r3, [r2, #9]
	memcpy(&(sbd_message.E_array[0]), &(E[0]), 42 * sizeof(real16_T));
 800e058:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800e05c:	2254      	movs	r2, #84	; 0x54
 800e05e:	4619      	mov	r1, r3
 800e060:	4825      	ldr	r0, [pc, #148]	; (800e0f8 <waves_thread_entry+0x160>)
 800e062:	f012 fa79 	bl	8020558 <memcpy>
 800e066:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
	memcpy(&sbd_message.f_min, &b_fmin, sizeof(real16_T));
 800e06a:	4a22      	ldr	r2, [pc, #136]	; (800e0f4 <waves_thread_entry+0x15c>)
 800e06c:	f8a2 305f 	strh.w	r3, [r2, #95]	; 0x5f
 800e070:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
	memcpy(&sbd_message.f_max, &b_fmax, sizeof(real16_T));
 800e074:	4a1f      	ldr	r2, [pc, #124]	; (800e0f4 <waves_thread_entry+0x15c>)
 800e076:	f8a2 3061 	strh.w	r3, [r2, #97]	; 0x61
	memcpy(&(sbd_message.a1_array[0]), &(a1[0]), 42 * sizeof(signed char));
 800e07a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800e07e:	222a      	movs	r2, #42	; 0x2a
 800e080:	4619      	mov	r1, r3
 800e082:	481e      	ldr	r0, [pc, #120]	; (800e0fc <waves_thread_entry+0x164>)
 800e084:	f012 fa68 	bl	8020558 <memcpy>
	memcpy(&(sbd_message.b1_array[0]), &(b1[0]), 42 * sizeof(signed char));
 800e088:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e08c:	222a      	movs	r2, #42	; 0x2a
 800e08e:	4619      	mov	r1, r3
 800e090:	481b      	ldr	r0, [pc, #108]	; (800e100 <waves_thread_entry+0x168>)
 800e092:	f012 fa61 	bl	8020558 <memcpy>
	memcpy(&(sbd_message.a2_array[0]), &(a2[0]), 42 * sizeof(signed char));
 800e096:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e09a:	222a      	movs	r2, #42	; 0x2a
 800e09c:	4619      	mov	r1, r3
 800e09e:	4819      	ldr	r0, [pc, #100]	; (800e104 <waves_thread_entry+0x16c>)
 800e0a0:	f012 fa5a 	bl	8020558 <memcpy>
	memcpy(&(sbd_message.b2_array[0]), &(b2[0]), 42 * sizeof(signed char));
 800e0a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e0a8:	222a      	movs	r2, #42	; 0x2a
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4816      	ldr	r0, [pc, #88]	; (800e108 <waves_thread_entry+0x170>)
 800e0ae:	f012 fa53 	bl	8020558 <memcpy>
	memcpy(&(sbd_message.cf_array[0]), &(check[0]), 42 * sizeof(unsigned char));
 800e0b2:	f107 030c 	add.w	r3, r7, #12
 800e0b6:	222a      	movs	r2, #42	; 0x2a
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4814      	ldr	r0, [pc, #80]	; (800e10c <waves_thread_entry+0x174>)
 800e0bc:	f012 fa4c 	bl	8020558 <memcpy>

	if (tx_thread_resume(&iridium_thread) != TX_SUCCESS){
 800e0c0:	4813      	ldr	r0, [pc, #76]	; (800e110 <waves_thread_entry+0x178>)
 800e0c2:	f010 f9db 	bl	801e47c <_txe_thread_resume>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <waves_thread_entry+0x13c>
		shut_it_all_down();
 800e0cc:	f000 fbdc 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800e0d0:	f003 fee9 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	tx_thread_terminate(&waves_thread);
 800e0d4:	480f      	ldr	r0, [pc, #60]	; (800e114 <waves_thread_entry+0x17c>)
 800e0d6:	f010 f9ef 	bl	801e4b8 <_txe_thread_terminate>
}
 800e0da:	bf00      	nop
 800e0dc:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd90      	pop	{r4, r7, pc}
 800e0e4:	20023a18 	.word	0x20023a18
 800e0e8:	20023a1c 	.word	0x20023a1c
 800e0ec:	20023a20 	.word	0x20023a20
 800e0f0:	20023a38 	.word	0x20023a38
 800e0f4:	20023514 	.word	0x20023514
 800e0f8:	2002351f 	.word	0x2002351f
 800e0fc:	20023577 	.word	0x20023577
 800e100:	200235a1 	.word	0x200235a1
 800e104:	200235cb 	.word	0x200235cb
 800e108:	200235f5 	.word	0x200235f5
 800e10c:	2002361f 	.word	0x2002361f
 800e110:	20023870 	.word	0x20023870
 800e114:	200237c0 	.word	0x200237c0

0800e118 <iridium_thread_entry>:
  *         This thread will handle message sending via Iridium modem.
  *
  * @param  ULONG thread_input - unused
  * @retval void
  */
void iridium_thread_entry(ULONG thread_input){
 800e118:	b580      	push	{r7, lr}
 800e11a:	b086      	sub	sp, #24
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
	iridium_error_code_t return_code __attribute__((unused));

	// Port the RF switch to the modem
	rf_switch->set_iridium_port(rf_switch);
 800e120:	4b40      	ldr	r3, [pc, #256]	; (800e224 <iridium_thread_entry+0x10c>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	4a3f      	ldr	r2, [pc, #252]	; (800e224 <iridium_thread_entry+0x10c>)
 800e128:	6812      	ldr	r2, [r2, #0]
 800e12a:	4610      	mov	r0, r2
 800e12c:	4798      	blx	r3

	char ascii_7 = '7';
 800e12e:	2337      	movs	r3, #55	; 0x37
 800e130:	75fb      	strb	r3, [r7, #23]
	uint8_t sbd_type = 52;
 800e132:	2334      	movs	r3, #52	; 0x34
 800e134:	75bb      	strb	r3, [r7, #22]
	uint16_t sbd_size = 327;
 800e136:	f240 1347 	movw	r3, #327	; 0x147
 800e13a:	82bb      	strh	r3, [r7, #20]
	real16_T sbd_voltage = floatToHalf(6.2);
 800e13c:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800e228 <iridium_thread_entry+0x110>
 800e140:	f7fb ff54 	bl	8009fec <floatToHalf>
 800e144:	4603      	mov	r3, r0
 800e146:	823b      	strh	r3, [r7, #16]
	float sbd_timestamp = iridium->get_timestamp(iridium);
 800e148:	4b38      	ldr	r3, [pc, #224]	; (800e22c <iridium_thread_entry+0x114>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e14e:	4a37      	ldr	r2, [pc, #220]	; (800e22c <iridium_thread_entry+0x114>)
 800e150:	6812      	ldr	r2, [r2, #0]
 800e152:	4610      	mov	r0, r2
 800e154:	4798      	blx	r3
 800e156:	eef0 7a40 	vmov.f32	s15, s0
 800e15a:	edc7 7a03 	vstr	s15, [r7, #12]
 800e15e:	7dfa      	ldrb	r2, [r7, #23]
	// finish filling out the SBD message
	memcpy(&sbd_message.legacy_number_7, &ascii_7, sizeof(char));
 800e160:	4b33      	ldr	r3, [pc, #204]	; (800e230 <iridium_thread_entry+0x118>)
 800e162:	701a      	strb	r2, [r3, #0]
 800e164:	7dba      	ldrb	r2, [r7, #22]
	memcpy(&sbd_message.type, &sbd_type, sizeof(uint8_t));
 800e166:	4b32      	ldr	r3, [pc, #200]	; (800e230 <iridium_thread_entry+0x118>)
 800e168:	705a      	strb	r2, [r3, #1]
 800e16a:	8abb      	ldrh	r3, [r7, #20]
	memcpy(&sbd_message.size, &sbd_size, sizeof(uint16_t));
 800e16c:	4a30      	ldr	r2, [pc, #192]	; (800e230 <iridium_thread_entry+0x118>)
 800e16e:	f8a2 3003 	strh.w	r3, [r2, #3]
 800e172:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(&sbd_message.mean_voltage, &sbd_voltage, sizeof(real16_T));
 800e174:	4a2e      	ldr	r2, [pc, #184]	; (800e230 <iridium_thread_entry+0x118>)
 800e176:	f8a2 3141 	strh.w	r3, [r2, #321]	; 0x141
 800e17a:	68fb      	ldr	r3, [r7, #12]
	memcpy(&sbd_message.timestamp, &sbd_timestamp, sizeof(float));
 800e17c:	4a2c      	ldr	r2, [pc, #176]	; (800e230 <iridium_thread_entry+0x118>)
 800e17e:	f8c2 3143 	str.w	r3, [r2, #323]	; 0x143

	// This will turn on the modem and make sure the caps are charged
	iridium->self_test(iridium, IRIDIUM_TOP_UP_CAP_CHARGE_TIME);
 800e182:	4b2a      	ldr	r3, [pc, #168]	; (800e22c <iridium_thread_entry+0x114>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e188:	4a28      	ldr	r2, [pc, #160]	; (800e22c <iridium_thread_entry+0x114>)
 800e18a:	6812      	ldr	r2, [r2, #0]
 800e18c:	f242 7110 	movw	r1, #10000	; 0x2710
 800e190:	4610      	mov	r0, r2
 800e192:	4798      	blx	r3

	// Copy the last location from GNSS (previously placed in SBD message) to
	// the Lat/Lon fields in Iridium struct
	memcpy(&iridium->current_lat, &sbd_message.Lat, sizeof(float));
 800e194:	4b25      	ldr	r3, [pc, #148]	; (800e22c <iridium_thread_entry+0x114>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	3330      	adds	r3, #48	; 0x30
 800e19a:	4a25      	ldr	r2, [pc, #148]	; (800e230 <iridium_thread_entry+0x118>)
 800e19c:	f8d2 2135 	ldr.w	r2, [r2, #309]	; 0x135
 800e1a0:	601a      	str	r2, [r3, #0]
	memcpy(&iridium->current_lon, &sbd_message.Lon, sizeof(float));
 800e1a2:	4b22      	ldr	r3, [pc, #136]	; (800e22c <iridium_thread_entry+0x114>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	3334      	adds	r3, #52	; 0x34
 800e1a8:	4a21      	ldr	r2, [pc, #132]	; (800e230 <iridium_thread_entry+0x118>)
 800e1aa:	f8d2 2139 	ldr.w	r2, [r2, #313]	; 0x139
 800e1ae:	601a      	str	r2, [r3, #0]

	iridium->transmit_message(iridium);
 800e1b0:	4b1e      	ldr	r3, [pc, #120]	; (800e22c <iridium_thread_entry+0x114>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b6:	4a1d      	ldr	r2, [pc, #116]	; (800e22c <iridium_thread_entry+0x114>)
 800e1b8:	6812      	ldr	r2, [r2, #0]
 800e1ba:	4610      	mov	r0, r2
 800e1bc:	4798      	blx	r3

	// Turn off the modem
	iridium->sleep(iridium, GPIO_PIN_RESET);
 800e1be:	4b1b      	ldr	r3, [pc, #108]	; (800e22c <iridium_thread_entry+0x114>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1c4:	4a19      	ldr	r2, [pc, #100]	; (800e22c <iridium_thread_entry+0x114>)
 800e1c6:	6812      	ldr	r2, [r2, #0]
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	4798      	blx	r3
	iridium->on_off(iridium, GPIO_PIN_RESET);
 800e1ce:	4b17      	ldr	r3, [pc, #92]	; (800e22c <iridium_thread_entry+0x114>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1d4:	4a15      	ldr	r2, [pc, #84]	; (800e22c <iridium_thread_entry+0x114>)
 800e1d6:	6812      	ldr	r2, [r2, #0]
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4610      	mov	r0, r2
 800e1dc:	4798      	blx	r3
	// Deinit UART and DMA to prevent spurious interrupts
	HAL_UART_DeInit(iridium->iridium_uart_handle);
 800e1de:	4b13      	ldr	r3, [pc, #76]	; (800e22c <iridium_thread_entry+0x114>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f00b fe11 	bl	8019e0c <HAL_UART_DeInit>
	HAL_DMA_DeInit(iridium->iridium_rx_dma_handle);
 800e1ea:	4b10      	ldr	r3, [pc, #64]	; (800e22c <iridium_thread_entry+0x114>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f003 ff8f 	bl	8012114 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(iridium->iridium_tx_dma_handle);
 800e1f6:	4b0d      	ldr	r3, [pc, #52]	; (800e22c <iridium_thread_entry+0x114>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f003 ff89 	bl	8012114 <HAL_DMA_DeInit>

	if (tx_thread_resume(&end_of_cycle_thread) != TX_SUCCESS){
 800e202:	480c      	ldr	r0, [pc, #48]	; (800e234 <iridium_thread_entry+0x11c>)
 800e204:	f010 f93a 	bl	801e47c <_txe_thread_resume>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d003      	beq.n	800e216 <iridium_thread_entry+0xfe>
		shut_it_all_down();
 800e20e:	f000 fb3b 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800e212:	f003 fe48 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	tx_thread_terminate(&iridium_thread);
 800e216:	4808      	ldr	r0, [pc, #32]	; (800e238 <iridium_thread_entry+0x120>)
 800e218:	f010 f94e 	bl	801e4b8 <_txe_thread_terminate>
}
 800e21c:	bf00      	nop
 800e21e:	3718      	adds	r7, #24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	20023a40 	.word	0x20023a40
 800e228:	40c66666 	.word	0x40c66666
 800e22c:	20023a3c 	.word	0x20023a3c
 800e230:	20023514 	.word	0x20023514
 800e234:	20023920 	.word	0x20023920
 800e238:	20023870 	.word	0x20023870

0800e23c <end_of_cycle_thread_entry>:
  *         the done flags are set, indicating we are ready to shutdown until
  *         the next window.
  * @param  ULONG thread_input - unused
  * @retval void
  */
void end_of_cycle_thread_entry(ULONG thread_input){
 800e23c:	b5b0      	push	{r4, r5, r7, lr}
 800e23e:	b0a0      	sub	sp, #128	; 0x80
 800e240:	af02      	add	r7, sp, #8
 800e242:	6078      	str	r0, [r7, #4]
	ULONG actual_error_flags = 0;
 800e244:	2300      	movs	r3, #0
 800e246:	66bb      	str	r3, [r7, #104]	; 0x68
	ULONG error_occured_flags = GNSS_ERROR | MODEM_ERROR | MEMORY_ALLOC_ERROR |
 800e248:	f640 73f2 	movw	r3, #4082	; 0xff2
 800e24c:	677b      	str	r3, [r7, #116]	; 0x74
			DMA_ERROR | UART_ERROR | RTC_ERROR | WATCHDOG_RESET | SOFTWARE_RESET |
			GNSS_RESOLUTION_ERROR;
	RTC_AlarmTypeDef alarm = {0};
 800e24e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e252:	2230      	movs	r2, #48	; 0x30
 800e254:	2100      	movs	r1, #0
 800e256:	4618      	mov	r0, r3
 800e258:	f012 f98b 	bl	8020572 <memset>
	RTC_DateTypeDef rtc_date;
	uint32_t wake_up_minute;
	UINT tx_return;

#if CT_ENABLED
	error_occured_flags |= CT_ERROR;
 800e25c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e25e:	f043 0308 	orr.w	r3, r3, #8
 800e262:	677b      	str	r3, [r7, #116]	; 0x74
#if IMU_ENABLED
	error_flags |= IMU_ERROR;
#endif

	// Must put this thread to sleep for a short while to allow other threads to terminate
	tx_thread_sleep(1);
 800e264:	2001      	movs	r0, #1
 800e266:	f00e fe1f 	bl	801cea8 <_tx_thread_sleep>

	// See if we had any errors along the way
	tx_event_flags_get(&error_flags, error_occured_flags, TX_OR_CLEAR, &actual_error_flags, TX_NO_WAIT);
 800e26a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e26e:	2200      	movs	r2, #0
 800e270:	9200      	str	r2, [sp, #0]
 800e272:	2201      	movs	r2, #1
 800e274:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e276:	4888      	ldr	r0, [pc, #544]	; (800e498 <end_of_cycle_thread_entry+0x25c>)
 800e278:	f00f ff4c 	bl	801e114 <_txe_event_flags_get>

	// If there was a GNSS error or it could not resolve in time, make sure to terminate the thread
	if ((actual_error_flags & GNSS_RESOLUTION_ERROR) || (actual_error_flags & GNSS_ERROR)){
 800e27c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e27e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e282:	2b00      	cmp	r3, #0
 800e284:	d104      	bne.n	800e290 <end_of_cycle_thread_entry+0x54>
 800e286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e288:	f003 0302 	and.w	r3, r3, #2
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d005      	beq.n	800e29c <end_of_cycle_thread_entry+0x60>
		// Set the event flag so we know to reconfigure in the next window
		tx_event_flags_set(&thread_control_flags, GNSS_CONFIG_REQUIRED, TX_OR);
 800e290:	2200      	movs	r2, #0
 800e292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e296:	4881      	ldr	r0, [pc, #516]	; (800e49c <end_of_cycle_thread_entry+0x260>)
 800e298:	f00f ff92 	bl	801e1c0 <_txe_event_flags_set>
	}

	// Just to be overly sure everything is off
	shut_it_all_down();
 800e29c:	f000 faf4 	bl	800e888 <shut_it_all_down>

	// If we have an error flag, send an error message
	if (actual_error_flags) {
 800e2a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d038      	beq.n	800e318 <end_of_cycle_thread_entry+0xdc>
		rf_switch->power_on(rf_switch);
 800e2a6:	4b7e      	ldr	r3, [pc, #504]	; (800e4a0 <end_of_cycle_thread_entry+0x264>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	4a7c      	ldr	r2, [pc, #496]	; (800e4a0 <end_of_cycle_thread_entry+0x264>)
 800e2ae:	6812      	ldr	r2, [r2, #0]
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	4798      	blx	r3
		rf_switch->set_iridium_port(rf_switch);
 800e2b4:	4b7a      	ldr	r3, [pc, #488]	; (800e4a0 <end_of_cycle_thread_entry+0x264>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	69db      	ldr	r3, [r3, #28]
 800e2ba:	4a79      	ldr	r2, [pc, #484]	; (800e4a0 <end_of_cycle_thread_entry+0x264>)
 800e2bc:	6812      	ldr	r2, [r2, #0]
 800e2be:	4610      	mov	r0, r2
 800e2c0:	4798      	blx	r3
		iridium->sleep(iridium, GPIO_PIN_SET);
 800e2c2:	4b78      	ldr	r3, [pc, #480]	; (800e4a4 <end_of_cycle_thread_entry+0x268>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2c8:	4a76      	ldr	r2, [pc, #472]	; (800e4a4 <end_of_cycle_thread_entry+0x268>)
 800e2ca:	6812      	ldr	r2, [r2, #0]
 800e2cc:	2101      	movs	r1, #1
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	4798      	blx	r3
		iridium->on_off(iridium, GPIO_PIN_SET);
 800e2d2:	4b74      	ldr	r3, [pc, #464]	; (800e4a4 <end_of_cycle_thread_entry+0x268>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2d8:	4a72      	ldr	r2, [pc, #456]	; (800e4a4 <end_of_cycle_thread_entry+0x268>)
 800e2da:	6812      	ldr	r2, [r2, #0]
 800e2dc:	2101      	movs	r1, #1
 800e2de:	4610      	mov	r0, r2
 800e2e0:	4798      	blx	r3
		send_error_message(actual_error_flags);
 800e2e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f000 fc15 	bl	800eb14 <send_error_message>

		iridium->sleep(iridium, GPIO_PIN_RESET);
 800e2ea:	4b6e      	ldr	r3, [pc, #440]	; (800e4a4 <end_of_cycle_thread_entry+0x268>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2f0:	4a6c      	ldr	r2, [pc, #432]	; (800e4a4 <end_of_cycle_thread_entry+0x268>)
 800e2f2:	6812      	ldr	r2, [r2, #0]
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	4798      	blx	r3
		iridium->on_off(iridium, GPIO_PIN_RESET);
 800e2fa:	4b6a      	ldr	r3, [pc, #424]	; (800e4a4 <end_of_cycle_thread_entry+0x268>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e300:	4a68      	ldr	r2, [pc, #416]	; (800e4a4 <end_of_cycle_thread_entry+0x268>)
 800e302:	6812      	ldr	r2, [r2, #0]
 800e304:	2100      	movs	r1, #0
 800e306:	4610      	mov	r0, r2
 800e308:	4798      	blx	r3
		rf_switch->power_off(rf_switch);
 800e30a:	4b65      	ldr	r3, [pc, #404]	; (800e4a0 <end_of_cycle_thread_entry+0x264>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	695b      	ldr	r3, [r3, #20]
 800e310:	4a63      	ldr	r2, [pc, #396]	; (800e4a0 <end_of_cycle_thread_entry+0x264>)
 800e312:	6812      	ldr	r2, [r2, #0]
 800e314:	4610      	mov	r0, r2
 800e316:	4798      	blx	r3
	}

	// If something went wrong with the RTC, we'll reset
	if (actual_error_flags & RTC_ERROR) {
 800e318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d003      	beq.n	800e32a <end_of_cycle_thread_entry+0xee>
		shut_it_all_down();
 800e322:	f000 fab1 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800e326:	f003 fdbe 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	// See Errata section 2.2.4
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e32a:	2200      	movs	r2, #0
 800e32c:	2100      	movs	r1, #0
 800e32e:	2002      	movs	r0, #2
 800e330:	f003 fd83 	bl	8011e3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e334:	2002      	movs	r0, #2
 800e336:	f003 fd9a 	bl	8011e6e <HAL_NVIC_EnableIRQ>
	// Only used for low power modes lower than stop2. Doesn't hurt anything to enable it for stop2
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN7_HIGH_3);
 800e33a:	485b      	ldr	r0, [pc, #364]	; (800e4a8 <end_of_cycle_thread_entry+0x26c>)
 800e33c:	f005 ffd0 	bl	80142e0 <HAL_PWR_EnableWakeUpPin>

	HAL_RTC_GetTime(device_handles->hrtc, &initial_rtc_time, RTC_FORMAT_BIN);
 800e340:	4b5a      	ldr	r3, [pc, #360]	; (800e4ac <end_of_cycle_thread_entry+0x270>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e34a:	2200      	movs	r2, #0
 800e34c:	4618      	mov	r0, r3
 800e34e:	f00a fbc3 	bl	8018ad8 <HAL_RTC_GetTime>
	// Must call GetDate to keep the RTC happy, even if you don't use it
	HAL_RTC_GetDate(device_handles->hrtc, &rtc_date, RTC_FORMAT_BIN);
 800e352:	4b56      	ldr	r3, [pc, #344]	; (800e4ac <end_of_cycle_thread_entry+0x270>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f107 010c 	add.w	r1, r7, #12
 800e35c:	2200      	movs	r2, #0
 800e35e:	4618      	mov	r0, r3
 800e360:	f00a fca2 	bl	8018ca8 <HAL_RTC_GetDate>

#ifdef SHORT_SLEEP
	wake_up_minute = initial_rtc_time.Minutes >= 59 ? (initial_rtc_time.Minutes + 1) - 60 :
			(initial_rtc_time.Minutes + 1);
#else
	wake_up_minute = 0;
 800e364:	2300      	movs	r3, #0
 800e366:	673b      	str	r3, [r7, #112]	; 0x70
#endif

	HAL_GPIO_WritePin(GPIOF, EXT_LED_GREEN_Pin, GPIO_PIN_RESET);
 800e368:	2200      	movs	r2, #0
 800e36a:	2102      	movs	r1, #2
 800e36c:	4850      	ldr	r0, [pc, #320]	; (800e4b0 <end_of_cycle_thread_entry+0x274>)
 800e36e:	f005 ff2f 	bl	80141d0 <HAL_GPIO_WritePin>

	while (rtc_time.Minutes != wake_up_minute) {
 800e372:	e060      	b.n	800e436 <end_of_cycle_thread_entry+0x1fa>
		// Get the date and time
		HAL_RTC_GetTime(device_handles->hrtc, &rtc_time, RTC_FORMAT_BIN);
 800e374:	4b4d      	ldr	r3, [pc, #308]	; (800e4ac <end_of_cycle_thread_entry+0x270>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f107 0110 	add.w	r1, r7, #16
 800e37e:	2200      	movs	r2, #0
 800e380:	4618      	mov	r0, r3
 800e382:	f00a fba9 	bl	8018ad8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(device_handles->hrtc, &rtc_date, RTC_FORMAT_BIN);
 800e386:	4b49      	ldr	r3, [pc, #292]	; (800e4ac <end_of_cycle_thread_entry+0x270>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f107 010c 	add.w	r1, r7, #12
 800e390:	2200      	movs	r2, #0
 800e392:	4618      	mov	r0, r3
 800e394:	f00a fc88 	bl	8018ca8 <HAL_RTC_GetDate>

		// We should be restarting the window at the top of the hour. If the initial time and just
		// checked time differ in hours, then we should start a new window. This should never occur,
		// but just as a second safety
		if (initial_rtc_time.Hours != rtc_time.Hours){
 800e398:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e39c:	7c3b      	ldrb	r3, [r7, #16]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d14f      	bne.n	800e442 <end_of_cycle_thread_entry+0x206>
			break;
		}

		// Set the alarm to wake up the processor in 30 seconds
		alarm.Alarm = RTC_ALARM_A;
 800e3a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3a6:	667b      	str	r3, [r7, #100]	; 0x64
		alarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		alarm.AlarmTime = rtc_time;
 800e3ae:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800e3b2:	f107 0510 	add.w	r5, r7, #16
 800e3b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3ba:	682b      	ldr	r3, [r5, #0]
 800e3bc:	6023      	str	r3, [r4, #0]
		alarm.AlarmTime.Seconds = (rtc_time.Seconds >= 30) ? ((rtc_time.Seconds + 30) - 60) : (rtc_time.Seconds + 30);
 800e3be:	7cbb      	ldrb	r3, [r7, #18]
 800e3c0:	2b1d      	cmp	r3, #29
 800e3c2:	d903      	bls.n	800e3cc <end_of_cycle_thread_entry+0x190>
 800e3c4:	7cbb      	ldrb	r3, [r7, #18]
 800e3c6:	3b1e      	subs	r3, #30
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	e002      	b.n	800e3d2 <end_of_cycle_thread_entry+0x196>
 800e3cc:	7cbb      	ldrb	r3, [r7, #18]
 800e3ce:	331e      	adds	r3, #30
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		alarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_MINUTES;
 800e3d6:	4b37      	ldr	r3, [pc, #220]	; (800e4b4 <end_of_cycle_thread_entry+0x278>)
 800e3d8:	64fb      	str	r3, [r7, #76]	; 0x4c
		alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	653b      	str	r3, [r7, #80]	; 0x50

		// If something goes wrong setting the alarm, force an RTC reset and go to the next window.
		// With luck, the RTC will get set again on the next window and everything will be cool.
		if (HAL_RTC_SetAlarm_IT(device_handles->hrtc, &alarm, RTC_FORMAT_BIN) != HAL_OK) {
 800e3de:	4b33      	ldr	r3, [pc, #204]	; (800e4ac <end_of_cycle_thread_entry+0x270>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f00a fcaa 	bl	8018d44 <HAL_RTC_SetAlarm_IT>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d003      	beq.n	800e3fe <end_of_cycle_thread_entry+0x1c2>
			shut_it_all_down();
 800e3f6:	f000 fa47 	bl	800e888 <shut_it_all_down>
			HAL_NVIC_SystemReset();
 800e3fa:	f003 fd54 	bl	8011ea6 <HAL_NVIC_SystemReset>
		}

		// See errata regarding ICACHE access on wakeup, section 2.2.11
		HAL_ICACHE_Disable();
 800e3fe:	f005 ff2f 	bl	8014260 <HAL_ICACHE_Disable>
		HAL_SuspendTick();
 800e402:	f001 fe9f 	bl	8010144 <HAL_SuspendTick>

		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800e406:	2001      	movs	r0, #1
 800e408:	f006 f88e 	bl	8014528 <HAL_PWREx_EnterSTOP2Mode>
		// Restore clocks to the same config as before stop2 mode
		SystemClock_Config();
 800e40c:	f000 fd42 	bl	800ee94 <SystemClock_Config>
		HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM4_FULL_STOP_RETENTION);
 800e410:	4829      	ldr	r0, [pc, #164]	; (800e4b8 <end_of_cycle_thread_entry+0x27c>)
 800e412:	f006 fa43 	bl	801489c <HAL_PWREx_DisableRAMsContentStopRetention>
		HAL_PWREx_DisableRAMsContentStopRetention(PWR_ICACHE_FULL_STOP_RETENTION);
 800e416:	4829      	ldr	r0, [pc, #164]	; (800e4bc <end_of_cycle_thread_entry+0x280>)
 800e418:	f006 fa40 	bl	801489c <HAL_PWREx_DisableRAMsContentStopRetention>
		HAL_PWREx_EnableRAMsContentStopRetention(PWR_SRAM1_FULL_STOP_RETENTION);
 800e41c:	4828      	ldr	r0, [pc, #160]	; (800e4c0 <end_of_cycle_thread_entry+0x284>)
 800e41e:	f006 f983 	bl	8014728 <HAL_PWREx_EnableRAMsContentStopRetention>
		HAL_PWREx_EnableRAMsContentStopRetention(PWR_SRAM2_FULL_STOP_RETENTION);
 800e422:	4828      	ldr	r0, [pc, #160]	; (800e4c4 <end_of_cycle_thread_entry+0x288>)
 800e424:	f006 f980 	bl	8014728 <HAL_PWREx_EnableRAMsContentStopRetention>
		HAL_PWREx_EnableRAMsContentStopRetention(PWR_SRAM3_FULL_STOP_RETENTION);
 800e428:	4827      	ldr	r0, [pc, #156]	; (800e4c8 <end_of_cycle_thread_entry+0x28c>)
 800e42a:	f006 f97d 	bl	8014728 <HAL_PWREx_EnableRAMsContentStopRetention>
		HAL_ResumeTick();
 800e42e:	f001 fe9b 	bl	8010168 <HAL_ResumeTick>
		HAL_ICACHE_Enable();
 800e432:	f005 ff05 	bl	8014240 <HAL_ICACHE_Enable>
	while (rtc_time.Minutes != wake_up_minute) {
 800e436:	7c7b      	ldrb	r3, [r7, #17]
 800e438:	461a      	mov	r2, r3
 800e43a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d199      	bne.n	800e374 <end_of_cycle_thread_entry+0x138>
 800e440:	e000      	b.n	800e444 <end_of_cycle_thread_entry+0x208>
			break;
 800e442:	bf00      	nop
	}

	// Disable the RTC interrupt again to prevent spurious triggers (See Errata section 2.2.4)
	HAL_NVIC_DisableIRQ(RTC_IRQn);
 800e444:	2002      	movs	r0, #2
 800e446:	f003 fd20 	bl	8011e8a <HAL_NVIC_DisableIRQ>
	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN7_HIGH_3);
 800e44a:	4817      	ldr	r0, [pc, #92]	; (800e4a8 <end_of_cycle_thread_entry+0x26c>)
 800e44c:	f005 ff86 	bl	801435c <HAL_PWR_DisableWakeUpPin>

	// Reset and resume the startup thread
	tx_return = tx_thread_reset(&startup_thread);
 800e450:	481e      	ldr	r0, [pc, #120]	; (800e4cc <end_of_cycle_thread_entry+0x290>)
 800e452:	f00f ffd7 	bl	801e404 <_txe_thread_reset>
 800e456:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (tx_return != TX_SUCCESS){
 800e458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d003      	beq.n	800e466 <end_of_cycle_thread_entry+0x22a>
		shut_it_all_down();
 800e45e:	f000 fa13 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800e462:	f003 fd20 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	tx_return = tx_thread_resume(&startup_thread);
 800e466:	4819      	ldr	r0, [pc, #100]	; (800e4cc <end_of_cycle_thread_entry+0x290>)
 800e468:	f010 f808 	bl	801e47c <_txe_thread_resume>
 800e46c:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (tx_return != TX_SUCCESS){
 800e46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e470:	2b00      	cmp	r3, #0
 800e472:	d003      	beq.n	800e47c <end_of_cycle_thread_entry+0x240>
		shut_it_all_down();
 800e474:	f000 fa08 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800e478:	f003 fd15 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	tx_event_flags_set(&thread_control_flags, FULL_CYCLE_COMPLETE, TX_OR);
 800e47c:	2200      	movs	r2, #0
 800e47e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e482:	4806      	ldr	r0, [pc, #24]	; (800e49c <end_of_cycle_thread_entry+0x260>)
 800e484:	f00f fe9c 	bl	801e1c0 <_txe_event_flags_set>
	tx_thread_terminate(&end_of_cycle_thread);
 800e488:	4811      	ldr	r0, [pc, #68]	; (800e4d0 <end_of_cycle_thread_entry+0x294>)
 800e48a:	f010 f815 	bl	801e4b8 <_txe_thread_terminate>
}
 800e48e:	bf00      	nop
 800e490:	3778      	adds	r7, #120	; 0x78
 800e492:	46bd      	mov	sp, r7
 800e494:	bdb0      	pop	{r4, r5, r7, pc}
 800e496:	bf00      	nop
 800e498:	200239f4 	.word	0x200239f4
 800e49c:	200239d0 	.word	0x200239d0
 800e4a0:	20023a40 	.word	0x20023a40
 800e4a4:	20023a3c 	.word	0x20023a3c
 800e4a8:	30000040 	.word	0x30000040
 800e4ac:	20023a44 	.word	0x20023a44
 800e4b0:	42021400 	.word	0x42021400
 800e4b4:	80808000 	.word	0x80808000
 800e4b8:	00080001 	.word	0x00080001
 800e4bc:	00100001 	.word	0x00100001
 800e4c0:	00010007 	.word	0x00010007
 800e4c4:	00020003 	.word	0x00020003
 800e4c8:	000400ff 	.word	0x000400ff
 800e4cc:	20023660 	.word	0x20023660
 800e4d0:	20023920 	.word	0x20023920

0800e4d4 <HAL_UART_RxCpltCallback>:
  * @param  UART_HandleTypeDef *huart - pointer to the UART handle

  * @retval void
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
	// Context is saved/restored in upstream Interrupt call chain
	if (huart->Instance == gnss->gnss_uart_handle->Instance) {
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	4b23      	ldr	r3, [pc, #140]	; (800e570 <HAL_UART_RxCpltCallback+0x9c>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d11f      	bne.n	800e52c <HAL_UART_RxCpltCallback+0x58>
		if (!gnss->is_configured) {
 800e4ec:	4b20      	ldr	r3, [pc, #128]	; (800e570 <HAL_UART_RxCpltCallback+0x9c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e4f4:	f083 0301 	eor.w	r3, r3, #1
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d006      	beq.n	800e50c <HAL_UART_RxCpltCallback+0x38>

			tx_event_flags_set(&thread_control_flags, GNSS_CONFIG_RECVD, TX_NO_WAIT);
 800e4fe:	2200      	movs	r2, #0
 800e500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e504:	481b      	ldr	r0, [pc, #108]	; (800e574 <HAL_UART_RxCpltCallback+0xa0>)
 800e506:	f00f fe5b 	bl	801e1c0 <_txe_event_flags_set>

	// Iridium modem
	else if (huart->Instance == iridium->iridium_uart_handle->Instance) {
		tx_event_flags_set(&thread_control_flags, IRIDIUM_MSG_RECVD, TX_OR);
	}
}
 800e50a:	e02c      	b.n	800e566 <HAL_UART_RxCpltCallback+0x92>
			memcpy(&(gnss->ubx_process_buf[0]), &(ubx_DMA_message_buf[0]), UBX_MESSAGE_SIZE);
 800e50c:	4b18      	ldr	r3, [pc, #96]	; (800e570 <HAL_UART_RxCpltCallback+0x9c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	69db      	ldr	r3, [r3, #28]
 800e512:	4a19      	ldr	r2, [pc, #100]	; (800e578 <HAL_UART_RxCpltCallback+0xa4>)
 800e514:	6811      	ldr	r1, [r2, #0]
 800e516:	2264      	movs	r2, #100	; 0x64
 800e518:	4618      	mov	r0, r3
 800e51a:	f012 f81d 	bl	8020558 <memcpy>
			tx_event_flags_set(&thread_control_flags, GNSS_MESSAGE_RECEIVED, TX_OR);
 800e51e:	2200      	movs	r2, #0
 800e520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e524:	4813      	ldr	r0, [pc, #76]	; (800e574 <HAL_UART_RxCpltCallback+0xa0>)
 800e526:	f00f fe4b 	bl	801e1c0 <_txe_event_flags_set>
}
 800e52a:	e01c      	b.n	800e566 <HAL_UART_RxCpltCallback+0x92>
	else if (huart->Instance == ct->ct_uart_handle->Instance) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	4b12      	ldr	r3, [pc, #72]	; (800e57c <HAL_UART_RxCpltCallback+0xa8>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d106      	bne.n	800e54a <HAL_UART_RxCpltCallback+0x76>
		tx_event_flags_set(&thread_control_flags, CT_MSG_RECVD, TX_OR);
 800e53c:	2200      	movs	r2, #0
 800e53e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e542:	480c      	ldr	r0, [pc, #48]	; (800e574 <HAL_UART_RxCpltCallback+0xa0>)
 800e544:	f00f fe3c 	bl	801e1c0 <_txe_event_flags_set>
}
 800e548:	e00d      	b.n	800e566 <HAL_UART_RxCpltCallback+0x92>
	else if (huart->Instance == iridium->iridium_uart_handle->Instance) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	4b0c      	ldr	r3, [pc, #48]	; (800e580 <HAL_UART_RxCpltCallback+0xac>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	429a      	cmp	r2, r3
 800e558:	d105      	bne.n	800e566 <HAL_UART_RxCpltCallback+0x92>
		tx_event_flags_set(&thread_control_flags, IRIDIUM_MSG_RECVD, TX_OR);
 800e55a:	2200      	movs	r2, #0
 800e55c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e560:	4804      	ldr	r0, [pc, #16]	; (800e574 <HAL_UART_RxCpltCallback+0xa0>)
 800e562:	f00f fe2d 	bl	801e1c0 <_txe_event_flags_set>
}
 800e566:	bf00      	nop
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	20023a38 	.word	0x20023a38
 800e574:	200239d0 	.word	0x200239d0
 800e578:	20023a24 	.word	0x20023a24
 800e57c:	20023af8 	.word	0x20023af8
 800e580:	20023a3c 	.word	0x20023a3c

0800e584 <HAL_TIM_PeriodElapsedCallback>:
  *
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
	// High frequency, low overhead ISR, no need to save/restore context
	if (htim->Instance == TIM4) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a0f      	ldr	r2, [pc, #60]	; (800e5d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d102      	bne.n	800e59c <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 800e596:	f001 ffd3 	bl	8010540 <HAL_IncTick>
		iridium->timer_timeout = true;
	}
	else if (htim->Instance == TIM16) {
		gnss->timer_timeout = true;
	}
}
 800e59a:	e014      	b.n	800e5c6 <HAL_TIM_PeriodElapsedCallback+0x42>
	else if (htim->Instance == TIM17) {
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a0c      	ldr	r2, [pc, #48]	; (800e5d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d105      	bne.n	800e5b2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		iridium->timer_timeout = true;
 800e5a6:	4b0c      	ldr	r3, [pc, #48]	; (800e5d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
}
 800e5b0:	e009      	b.n	800e5c6 <HAL_TIM_PeriodElapsedCallback+0x42>
	else if (htim->Instance == TIM16) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a09      	ldr	r2, [pc, #36]	; (800e5dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d104      	bne.n	800e5c6 <HAL_TIM_PeriodElapsedCallback+0x42>
		gnss->timer_timeout = true;
 800e5bc:	4b08      	ldr	r3, [pc, #32]	; (800e5e0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 800e5c6:	bf00      	nop
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	40000800 	.word	0x40000800
 800e5d4:	40014800 	.word	0x40014800
 800e5d8:	20023a3c 	.word	0x20023a3c
 800e5dc:	40014400 	.word	0x40014400
 800e5e0:	20023a38 	.word	0x20023a38

0800e5e4 <HAL_RTC_AlarmAEventCallback>:
  *
  * @param  hrtc : RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
	// Low overhead ISR does not require save/restore context
	// Clear the alarm flag, flash an LED in debug mode
	HAL_PWR_EnableBkUpAccess();
 800e5ec:	f005 fe68 	bl	80142c0 <HAL_PWR_EnableBkUpAccess>
	WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800e5f0:	4b04      	ldr	r3, [pc, #16]	; (800e604 <HAL_RTC_AlarmAEventCallback+0x20>)
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRAF);
 800e5f6:	4b03      	ldr	r3, [pc, #12]	; (800e604 <HAL_RTC_AlarmAEventCallback+0x20>)
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	65da      	str	r2, [r3, #92]	; 0x5c

}
 800e5fc:	bf00      	nop
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	46007800 	.word	0x46007800

0800e608 <HAL_Delay>:
  *
  * @param  Delay : Delay in milliseconds
  * @retval None
  */
void HAL_Delay(uint32_t Delay)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
	__IO int dummy_variable = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	60fb      	str	r3, [r7, #12]
	__IO int i;

	// Compiler cannot optimize any of this away.
	for (i = 0; i < Delay * 532; i++) {
 800e614:	2300      	movs	r3, #0
 800e616:	60bb      	str	r3, [r7, #8]
 800e618:	e00a      	b.n	800e630 <HAL_Delay+0x28>
		i++;
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	3301      	adds	r3, #1
 800e61e:	60bb      	str	r3, [r7, #8]
		dummy_variable = i;
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	60fb      	str	r3, [r7, #12]
		i--;
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	3b01      	subs	r3, #1
 800e628:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < Delay * 532; i++) {
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	3301      	adds	r3, #1
 800e62e:	60bb      	str	r3, [r7, #8]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f44f 7205 	mov.w	r2, #532	; 0x214
 800e636:	fb02 f303 	mul.w	r3, r2, r3
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d8ec      	bhi.n	800e61a <HAL_Delay+0x12>
	}
	i = dummy_variable;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	60bb      	str	r3, [r7, #8]
}
 800e644:	bf00      	nop
 800e646:	3714      	adds	r7, #20
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <led_sequence>:
  * 					TEST_CRITICAL_FAULT_LED_SEQUENCE
  *
  * @retval Void
  */
static void led_sequence(led_sequence_t sequence)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	4603      	mov	r3, r0
 800e658:	71fb      	strb	r3, [r7, #7]
	switch (sequence) {
 800e65a:	79fb      	ldrb	r3, [r7, #7]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	2b03      	cmp	r3, #3
 800e660:	f200 8088 	bhi.w	800e774 <led_sequence+0x124>
 800e664:	a201      	add	r2, pc, #4	; (adr r2, 800e66c <led_sequence+0x1c>)
 800e666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66a:	bf00      	nop
 800e66c:	0800e67d 	.word	0x0800e67d
 800e670:	0800e6d1 	.word	0x0800e6d1
 800e674:	0800e709 	.word	0x0800e709
 800e678:	0800e73d 	.word	0x0800e73d
		case INITIAL_LED_SEQUENCE:
			for (int i = 0; i < 10; i++){
 800e67c:	2300      	movs	r3, #0
 800e67e:	617b      	str	r3, [r7, #20]
 800e680:	e022      	b.n	800e6c8 <led_sequence+0x78>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_RED_Pin, GPIO_PIN_SET);
 800e682:	2201      	movs	r2, #1
 800e684:	2101      	movs	r1, #1
 800e686:	483e      	ldr	r0, [pc, #248]	; (800e780 <led_sequence+0x130>)
 800e688:	f005 fda2 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 800e68c:	20fa      	movs	r0, #250	; 0xfa
 800e68e:	f7ff ffbb 	bl	800e608 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_GREEN_Pin, GPIO_PIN_SET);
 800e692:	2201      	movs	r2, #1
 800e694:	2102      	movs	r1, #2
 800e696:	483a      	ldr	r0, [pc, #232]	; (800e780 <led_sequence+0x130>)
 800e698:	f005 fd9a 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 800e69c:	20fa      	movs	r0, #250	; 0xfa
 800e69e:	f7ff ffb3 	bl	800e608 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_RED_Pin, GPIO_PIN_RESET);
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	4836      	ldr	r0, [pc, #216]	; (800e780 <led_sequence+0x130>)
 800e6a8:	f005 fd92 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 800e6ac:	20fa      	movs	r0, #250	; 0xfa
 800e6ae:	f7ff ffab 	bl	800e608 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_GREEN_Pin, GPIO_PIN_RESET);
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	2102      	movs	r1, #2
 800e6b6:	4832      	ldr	r0, [pc, #200]	; (800e780 <led_sequence+0x130>)
 800e6b8:	f005 fd8a 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 800e6bc:	20fa      	movs	r0, #250	; 0xfa
 800e6be:	f7ff ffa3 	bl	800e608 <HAL_Delay>
			for (int i = 0; i < 10; i++){
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	617b      	str	r3, [r7, #20]
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	2b09      	cmp	r3, #9
 800e6cc:	ddd9      	ble.n	800e682 <led_sequence+0x32>
			}
			break;
 800e6ce:	e052      	b.n	800e776 <led_sequence+0x126>

		case TEST_PASSED_LED_SEQUENCE:
			for (int i = 0; i < 5; i++){
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	613b      	str	r3, [r7, #16]
 800e6d4:	e014      	b.n	800e700 <led_sequence+0xb0>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_GREEN_Pin, GPIO_PIN_RESET);
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	2102      	movs	r1, #2
 800e6da:	4829      	ldr	r0, [pc, #164]	; (800e780 <led_sequence+0x130>)
 800e6dc:	f005 fd78 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 800e6e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e6e4:	f7ff ff90 	bl	800e608 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_GREEN_Pin, GPIO_PIN_SET);
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	2102      	movs	r1, #2
 800e6ec:	4824      	ldr	r0, [pc, #144]	; (800e780 <led_sequence+0x130>)
 800e6ee:	f005 fd6f 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 800e6f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e6f6:	f7ff ff87 	bl	800e608 <HAL_Delay>
			for (int i = 0; i < 5; i++){
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	613b      	str	r3, [r7, #16]
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	2b04      	cmp	r3, #4
 800e704:	dde7      	ble.n	800e6d6 <led_sequence+0x86>
			}
			break;
 800e706:	e036      	b.n	800e776 <led_sequence+0x126>

		case TEST_NON_CRITICAL_FAULT_LED_SEQUENCE:
			for (int i = 0; i < 20; i++){
 800e708:	2300      	movs	r3, #0
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	e012      	b.n	800e734 <led_sequence+0xe4>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_GREEN_Pin, GPIO_PIN_RESET);
 800e70e:	2200      	movs	r2, #0
 800e710:	2102      	movs	r1, #2
 800e712:	481b      	ldr	r0, [pc, #108]	; (800e780 <led_sequence+0x130>)
 800e714:	f005 fd5c 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 800e718:	20fa      	movs	r0, #250	; 0xfa
 800e71a:	f7ff ff75 	bl	800e608 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_GREEN_Pin, GPIO_PIN_SET);
 800e71e:	2201      	movs	r2, #1
 800e720:	2102      	movs	r1, #2
 800e722:	4817      	ldr	r0, [pc, #92]	; (800e780 <led_sequence+0x130>)
 800e724:	f005 fd54 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 800e728:	20fa      	movs	r0, #250	; 0xfa
 800e72a:	f7ff ff6d 	bl	800e608 <HAL_Delay>
			for (int i = 0; i < 20; i++){
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	3301      	adds	r3, #1
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b13      	cmp	r3, #19
 800e738:	dde9      	ble.n	800e70e <led_sequence+0xbe>
			}
			break;
 800e73a:	e01c      	b.n	800e776 <led_sequence+0x126>

		case TEST_CRITICAL_FAULT_LED_SEQUENCE:
			for (int i = 0; i < 10; i++){
 800e73c:	2300      	movs	r3, #0
 800e73e:	60bb      	str	r3, [r7, #8]
 800e740:	e014      	b.n	800e76c <led_sequence+0x11c>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_RED_Pin, GPIO_PIN_RESET);
 800e742:	2200      	movs	r2, #0
 800e744:	2101      	movs	r1, #1
 800e746:	480e      	ldr	r0, [pc, #56]	; (800e780 <led_sequence+0x130>)
 800e748:	f005 fd42 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 800e74c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e750:	f7ff ff5a 	bl	800e608 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, EXT_LED_RED_Pin, GPIO_PIN_SET);
 800e754:	2201      	movs	r2, #1
 800e756:	2101      	movs	r1, #1
 800e758:	4809      	ldr	r0, [pc, #36]	; (800e780 <led_sequence+0x130>)
 800e75a:	f005 fd39 	bl	80141d0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 800e75e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e762:	f7ff ff51 	bl	800e608 <HAL_Delay>
			for (int i = 0; i < 10; i++){
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	3301      	adds	r3, #1
 800e76a:	60bb      	str	r3, [r7, #8]
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2b09      	cmp	r3, #9
 800e770:	dde7      	ble.n	800e742 <led_sequence+0xf2>
			}
			break;
 800e772:	e000      	b.n	800e776 <led_sequence+0x126>

		default:
			break;
 800e774:	bf00      	nop
	}
}
 800e776:	bf00      	nop
 800e778:	3718      	adds	r7, #24
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	42021400 	.word	0x42021400

0800e784 <start_GNSS_UART_DMA>:
  *
  * @retval GNSS_SUCCESS or
  * 	    GNS_UART_ERROR
  */
gnss_error_code_t start_GNSS_UART_DMA(GNSS* gnss_struct_ptr, uint8_t* buffer, size_t msg_size)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b086      	sub	sp, #24
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	607a      	str	r2, [r7, #4]
	gnss_error_code_t return_code = GNSS_SUCCESS;
 800e790:	2300      	movs	r3, #0
 800e792:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_return_code;

	gnss->reset_uart(gnss, GNSS_DEFAULT_BAUD_RATE);
 800e794:	4b3a      	ldr	r3, [pc, #232]	; (800e880 <start_GNSS_UART_DMA+0xfc>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e79c:	4a38      	ldr	r2, [pc, #224]	; (800e880 <start_GNSS_UART_DMA+0xfc>)
 800e79e:	6812      	ldr	r2, [r2, #0]
 800e7a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800e7a4:	4610      	mov	r0, r2
 800e7a6:	4798      	blx	r3

	memset(&(buffer[0]), 0, UBX_MESSAGE_SIZE * 2);
 800e7a8:	22c8      	movs	r2, #200	; 0xc8
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	68b8      	ldr	r0, [r7, #8]
 800e7ae:	f011 fee0 	bl	8020572 <memset>

	HAL_UART_DMAStop(gnss_struct_ptr->gnss_uart_handle);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f00b fd58 	bl	801a26c <HAL_UART_DMAStop>

	hal_return_code = MX_GNSS_LL_Queue_Config();
 800e7bc:	f000 faa8 	bl	800ed10 <MX_GNSS_LL_Queue_Config>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	75bb      	strb	r3, [r7, #22]

	if (hal_return_code != HAL_OK) {
 800e7c4:	7dbb      	ldrb	r3, [r7, #22]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <start_GNSS_UART_DMA+0x4a>
		return_code = GNSS_UART_ERROR;
 800e7ca:	23f8      	movs	r3, #248	; 0xf8
 800e7cc:	75fb      	strb	r3, [r7, #23]
	}

	gnss_struct_ptr->gnss_dma_handle->InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e7d6:	639a      	str	r2, [r3, #56]	; 0x38
	gnss_struct_ptr->gnss_dma_handle->InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	63da      	str	r2, [r3, #60]	; 0x3c
	gnss_struct_ptr->gnss_dma_handle->InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	641a      	str	r2, [r3, #64]	; 0x40
	gnss_struct_ptr->gnss_dma_handle->InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800e7f0:	645a      	str	r2, [r3, #68]	; 0x44
	gnss_struct_ptr->gnss_dma_handle->InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	2281      	movs	r2, #129	; 0x81
 800e7f8:	649a      	str	r2, [r3, #72]	; 0x48

	if (HAL_DMAEx_List_Init(gnss_struct_ptr->gnss_dma_handle) != HAL_OK)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f004 fac8 	bl	8012d94 <HAL_DMAEx_List_Init>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <start_GNSS_UART_DMA+0x8a>
	{
		return_code = GNSS_UART_ERROR;
 800e80a:	23f8      	movs	r3, #248	; 0xf8
 800e80c:	75fb      	strb	r3, [r7, #23]
	}

	__HAL_LINKDMA(gnss_struct_ptr->gnss_uart_handle, hdmarx, *gnss_struct_ptr->gnss_dma_handle);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	6892      	ldr	r2, [r2, #8]
 800e816:	67da      	str	r2, [r3, #124]	; 0x7c
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	6852      	ldr	r2, [r2, #4]
 800e820:	65da      	str	r2, [r3, #92]	; 0x5c

	hal_return_code = HAL_DMAEx_List_LinkQ(gnss_struct_ptr->gnss_dma_handle, &GNSS_LL_Queue);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	4917      	ldr	r1, [pc, #92]	; (800e884 <start_GNSS_UART_DMA+0x100>)
 800e828:	4618      	mov	r0, r3
 800e82a:	f004 fd63 	bl	80132f4 <HAL_DMAEx_List_LinkQ>
 800e82e:	4603      	mov	r3, r0
 800e830:	75bb      	strb	r3, [r7, #22]
	if (hal_return_code != HAL_OK) {
 800e832:	7dbb      	ldrb	r3, [r7, #22]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <start_GNSS_UART_DMA+0xb8>
		return_code = GNSS_UART_ERROR;
 800e838:	23f8      	movs	r3, #248	; 0xf8
 800e83a:	75fb      	strb	r3, [r7, #23]
	}

	hal_return_code = HAL_UART_Receive_DMA(gnss_struct_ptr->gnss_uart_handle,
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	b292      	uxth	r2, r2
 800e844:	68b9      	ldr	r1, [r7, #8]
 800e846:	4618      	mov	r0, r3
 800e848:	f00b fcb2 	bl	801a1b0 <HAL_UART_Receive_DMA>
 800e84c:	4603      	mov	r3, r0
 800e84e:	75bb      	strb	r3, [r7, #22]
			(uint8_t*)&(buffer[0]), msg_size);
		//  No need for the half-transfer complete interrupt, so disable it
	__HAL_DMA_DISABLE_IT(gnss->gnss_dma_handle, DMA_IT_HT);
 800e850:	4b0b      	ldr	r3, [pc, #44]	; (800e880 <start_GNSS_UART_DMA+0xfc>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	695a      	ldr	r2, [r3, #20]
 800e85a:	4b09      	ldr	r3, [pc, #36]	; (800e880 <start_GNSS_UART_DMA+0xfc>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e866:	615a      	str	r2, [r3, #20]

	if (hal_return_code != HAL_OK) {
 800e868:	7dbb      	ldrb	r3, [r7, #22]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d001      	beq.n	800e872 <start_GNSS_UART_DMA+0xee>
		return_code = GNSS_UART_ERROR;
 800e86e:	23f8      	movs	r3, #248	; 0xf8
 800e870:	75fb      	strb	r3, [r7, #23]
	}

	return return_code;
 800e872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e876:	4618      	mov	r0, r3
 800e878:	3718      	adds	r7, #24
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	20023a38 	.word	0x20023a38
 800e884:	200b631c 	.word	0x200b631c

0800e888 <shut_it_all_down>:
  * @param  void
  *
  * @retval void
  */
void shut_it_all_down(void)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	af00      	add	r7, sp, #0
	// Shut down Iridium modem
	HAL_GPIO_WritePin(GPIOD, IRIDIUM_OnOff_Pin, GPIO_PIN_RESET);
 800e88c:	2200      	movs	r2, #0
 800e88e:	2180      	movs	r1, #128	; 0x80
 800e890:	4811      	ldr	r0, [pc, #68]	; (800e8d8 <shut_it_all_down+0x50>)
 800e892:	f005 fc9d 	bl	80141d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, IRIDIUM_FET_Pin, GPIO_PIN_RESET);
 800e896:	2200      	movs	r2, #0
 800e898:	2102      	movs	r1, #2
 800e89a:	480f      	ldr	r0, [pc, #60]	; (800e8d8 <shut_it_all_down+0x50>)
 800e89c:	f005 fc98 	bl	80141d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, BUS_5V_FET_Pin, GPIO_PIN_RESET);
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	2104      	movs	r1, #4
 800e8a4:	480d      	ldr	r0, [pc, #52]	; (800e8dc <shut_it_all_down+0x54>)
 800e8a6:	f005 fc93 	bl	80141d0 <HAL_GPIO_WritePin>
	// Shut down GNSS
	HAL_GPIO_WritePin(GPIOG, GNSS_FET_Pin, GPIO_PIN_RESET);
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	2110      	movs	r1, #16
 800e8ae:	480c      	ldr	r0, [pc, #48]	; (800e8e0 <shut_it_all_down+0x58>)
 800e8b0:	f005 fc8e 	bl	80141d0 <HAL_GPIO_WritePin>
	// Reset RF switch GPIOs. This will set it to be ported to the modem (safe case)
	HAL_GPIO_WritePin(GPIOD, RF_SWITCH_VCTL_Pin, GPIO_PIN_RESET);
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	2108      	movs	r1, #8
 800e8b8:	4807      	ldr	r0, [pc, #28]	; (800e8d8 <shut_it_all_down+0x50>)
 800e8ba:	f005 fc89 	bl	80141d0 <HAL_GPIO_WritePin>
	// Turn off power to the RF switch
	HAL_GPIO_WritePin(GPIOD, RF_SWITCH_EN_Pin, GPIO_PIN_RESET);
 800e8be:	2200      	movs	r2, #0
 800e8c0:	2110      	movs	r1, #16
 800e8c2:	4805      	ldr	r0, [pc, #20]	; (800e8d8 <shut_it_all_down+0x50>)
 800e8c4:	f005 fc84 	bl	80141d0 <HAL_GPIO_WritePin>
	// Shut down CT sensor
	HAL_GPIO_WritePin(GPIOG, CT_FET_Pin, GPIO_PIN_RESET);
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	2108      	movs	r1, #8
 800e8cc:	4804      	ldr	r0, [pc, #16]	; (800e8e0 <shut_it_all_down+0x58>)
 800e8ce:	f005 fc7f 	bl	80141d0 <HAL_GPIO_WritePin>

}
 800e8d2:	bf00      	nop
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	42020c00 	.word	0x42020c00
 800e8dc:	42021400 	.word	0x42021400
 800e8e0:	42021800 	.word	0x42021800

0800e8e4 <initial_power_on_self_test>:
  * @retval SELF_TEST_PASSED
  * 		SELF_TEST_NON_CRITICAL_FAULT --> if CT or IMU failed
  * 		SELF_TEST_CRITICAL_FAULT --> if GNSS or Iridium modem
  */
static self_test_status_t initial_power_on_self_test(void)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
	self_test_status_t return_code = SELF_TEST_PASSED;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	71fb      	strb	r3, [r7, #7]
	int fail_counter;

	///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////// GNSS STARTUP SEQUENCE /////////////////////////////////////////////
	// turn on the GNSS FET
	gnss->on_off(gnss, GPIO_PIN_SET);
 800e8ee:	4b4b      	ldr	r3, [pc, #300]	; (800ea1c <initial_power_on_self_test+0x138>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8f6:	4a49      	ldr	r2, [pc, #292]	; (800ea1c <initial_power_on_self_test+0x138>)
 800e8f8:	6812      	ldr	r2, [r2, #0]
 800e8fa:	2101      	movs	r1, #1
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4798      	blx	r3
	// Send the configuration commands to the GNSS unit.
	fail_counter = 0;
 800e900:	2300      	movs	r3, #0
 800e902:	603b      	str	r3, [r7, #0]
	while (fail_counter < MAX_SELF_TEST_RETRIES) {
 800e904:	e014      	b.n	800e930 <initial_power_on_self_test+0x4c>
		if (gnss->config(gnss) != GNSS_SUCCESS) {
 800e906:	4b45      	ldr	r3, [pc, #276]	; (800ea1c <initial_power_on_self_test+0x138>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e90c:	4a43      	ldr	r2, [pc, #268]	; (800ea1c <initial_power_on_self_test+0x138>)
 800e90e:	6812      	ldr	r2, [r2, #0]
 800e910:	4610      	mov	r0, r2
 800e912:	4798      	blx	r3
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00e      	beq.n	800e938 <initial_power_on_self_test+0x54>
			// Config didn't work, cycle power and try again
			gnss->cycle_power(gnss);
 800e91a:	4b40      	ldr	r3, [pc, #256]	; (800ea1c <initial_power_on_self_test+0x138>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e922:	4a3e      	ldr	r2, [pc, #248]	; (800ea1c <initial_power_on_self_test+0x138>)
 800e924:	6812      	ldr	r2, [r2, #0]
 800e926:	4610      	mov	r0, r2
 800e928:	4798      	blx	r3
			fail_counter++;
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	3301      	adds	r3, #1
 800e92e:	603b      	str	r3, [r7, #0]
	while (fail_counter < MAX_SELF_TEST_RETRIES) {
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2b04      	cmp	r3, #4
 800e934:	dde7      	ble.n	800e906 <initial_power_on_self_test+0x22>
 800e936:	e000      	b.n	800e93a <initial_power_on_self_test+0x56>
		} else {
			break;
 800e938:	bf00      	nop
		}
	}

	if (fail_counter == MAX_SELF_TEST_RETRIES) {
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	2b05      	cmp	r3, #5
 800e93e:	d108      	bne.n	800e952 <initial_power_on_self_test+0x6e>
		return_code = SELF_TEST_CRITICAL_FAULT;
 800e940:	2302      	movs	r3, #2
 800e942:	71fb      	strb	r3, [r7, #7]
		tx_event_flags_set(&error_flags, GNSS_ERROR, TX_OR);
 800e944:	2200      	movs	r2, #0
 800e946:	2102      	movs	r1, #2
 800e948:	4835      	ldr	r0, [pc, #212]	; (800ea20 <initial_power_on_self_test+0x13c>)
 800e94a:	f00f fc39 	bl	801e1c0 <_txe_event_flags_set>
		return return_code;
 800e94e:	79fb      	ldrb	r3, [r7, #7]
 800e950:	e060      	b.n	800ea14 <initial_power_on_self_test+0x130>
	}

	// If we made it here, the self test passed and we're ready to process messages
	tx_event_flags_set(&thread_control_flags, GNSS_READY, TX_OR);
 800e952:	2200      	movs	r2, #0
 800e954:	2101      	movs	r1, #1
 800e956:	4833      	ldr	r0, [pc, #204]	; (800ea24 <initial_power_on_self_test+0x140>)
 800e958:	f00f fc32 	bl	801e1c0 <_txe_event_flags_set>

	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////IRIDIUM STARTUP SEQUENCE ///////////////////////////////////////////////
	// Only do this on initial power up, else leave it alone!
	iridium->queue_flush(iridium);
 800e95c:	4b32      	ldr	r3, [pc, #200]	; (800ea28 <initial_power_on_self_test+0x144>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e962:	4a31      	ldr	r2, [pc, #196]	; (800ea28 <initial_power_on_self_test+0x144>)
 800e964:	6812      	ldr	r2, [r2, #0]
 800e966:	4610      	mov	r0, r2
 800e968:	4798      	blx	r3
	// See if we can get an ack message from the modem
	if (iridium->self_test(iridium, IRIDIUM_INITIAL_CAP_CHARGE_TIME) != IRIDIUM_SUCCESS) {
 800e96a:	4b2f      	ldr	r3, [pc, #188]	; (800ea28 <initial_power_on_self_test+0x144>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e970:	4a2d      	ldr	r2, [pc, #180]	; (800ea28 <initial_power_on_self_test+0x144>)
 800e972:	6812      	ldr	r2, [r2, #0]
 800e974:	f247 5130 	movw	r1, #30000	; 0x7530
 800e978:	4610      	mov	r0, r2
 800e97a:	4798      	blx	r3
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d008      	beq.n	800e994 <initial_power_on_self_test+0xb0>
		return_code = SELF_TEST_CRITICAL_FAULT;
 800e982:	2302      	movs	r3, #2
 800e984:	71fb      	strb	r3, [r7, #7]
		tx_event_flags_set(&error_flags, MODEM_ERROR, TX_OR);
 800e986:	2200      	movs	r2, #0
 800e988:	2110      	movs	r1, #16
 800e98a:	4825      	ldr	r0, [pc, #148]	; (800ea20 <initial_power_on_self_test+0x13c>)
 800e98c:	f00f fc18 	bl	801e1c0 <_txe_event_flags_set>
		return return_code;
 800e990:	79fb      	ldrb	r3, [r7, #7]
 800e992:	e03f      	b.n	800ea14 <initial_power_on_self_test+0x130>
	}
	// Send the configuration settings to the modem
	if (iridium->config(iridium) != IRIDIUM_SUCCESS) {
 800e994:	4b24      	ldr	r3, [pc, #144]	; (800ea28 <initial_power_on_self_test+0x144>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e99a:	4a23      	ldr	r2, [pc, #140]	; (800ea28 <initial_power_on_self_test+0x144>)
 800e99c:	6812      	ldr	r2, [r2, #0]
 800e99e:	4610      	mov	r0, r2
 800e9a0:	4798      	blx	r3
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d008      	beq.n	800e9ba <initial_power_on_self_test+0xd6>
		return_code = SELF_TEST_CRITICAL_FAULT;
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	71fb      	strb	r3, [r7, #7]
		tx_event_flags_set(&error_flags, MODEM_ERROR, TX_OR);
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	2110      	movs	r1, #16
 800e9b0:	481b      	ldr	r0, [pc, #108]	; (800ea20 <initial_power_on_self_test+0x13c>)
 800e9b2:	f00f fc05 	bl	801e1c0 <_txe_event_flags_set>
		return return_code;
 800e9b6:	79fb      	ldrb	r3, [r7, #7]
 800e9b8:	e02c      	b.n	800ea14 <initial_power_on_self_test+0x130>
	}
	// We'll keep power to the modem but put it to sleep
	iridium->sleep(iridium, GPIO_PIN_RESET);
 800e9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ea28 <initial_power_on_self_test+0x144>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9c0:	4a19      	ldr	r2, [pc, #100]	; (800ea28 <initial_power_on_self_test+0x144>)
 800e9c2:	6812      	ldr	r2, [r2, #0]
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	4798      	blx	r3

	// We got an ack and were able to config the Iridium modem
	tx_event_flags_set(&thread_control_flags, IRIDIUM_READY, TX_OR);
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	2108      	movs	r1, #8
 800e9ce:	4815      	ldr	r0, [pc, #84]	; (800ea24 <initial_power_on_self_test+0x140>)
 800e9d0:	f00f fbf6 	bl	801e1c0 <_txe_event_flags_set>

#if CT_ENABLED
	///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////// CT STARTUP SEQUENCE ///////////////////////////////////////////////
	// Make sure we get good data from the CT sensor
	if (ct->self_test(ct, false) != CT_SUCCESS) {
 800e9d4:	4b15      	ldr	r3, [pc, #84]	; (800ea2c <initial_power_on_self_test+0x148>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9da:	4a14      	ldr	r2, [pc, #80]	; (800ea2c <initial_power_on_self_test+0x148>)
 800e9dc:	6812      	ldr	r2, [r2, #0]
 800e9de:	2100      	movs	r1, #0
 800e9e0:	4610      	mov	r0, r2
 800e9e2:	4798      	blx	r3
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d006      	beq.n	800e9f8 <initial_power_on_self_test+0x114>
		return_code = SELF_TEST_NON_CRITICAL_FAULT;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	71fb      	strb	r3, [r7, #7]
		tx_event_flags_set(&error_flags, CT_ERROR, TX_OR);
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	2108      	movs	r1, #8
 800e9f2:	480b      	ldr	r0, [pc, #44]	; (800ea20 <initial_power_on_self_test+0x13c>)
 800e9f4:	f00f fbe4 	bl	801e1c0 <_txe_event_flags_set>
	}
	// We can turn off the CT sensor for now
	ct->on_off(ct, GPIO_PIN_RESET);
 800e9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ea2c <initial_power_on_self_test+0x148>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fe:	4a0b      	ldr	r2, [pc, #44]	; (800ea2c <initial_power_on_self_test+0x148>)
 800ea00:	6812      	ldr	r2, [r2, #0]
 800ea02:	2100      	movs	r1, #0
 800ea04:	4610      	mov	r0, r2
 800ea06:	4798      	blx	r3

	// Regardless of if the self-test passed, we'll still set it as ready and try again
	// in the sample window
	tx_event_flags_set(&thread_control_flags, CT_READY, TX_OR);
 800ea08:	2200      	movs	r2, #0
 800ea0a:	2104      	movs	r1, #4
 800ea0c:	4805      	ldr	r0, [pc, #20]	; (800ea24 <initial_power_on_self_test+0x140>)
 800ea0e:	f00f fbd7 	bl	801e1c0 <_txe_event_flags_set>
#endif

	return return_code;
 800ea12:	79fb      	ldrb	r3, [r7, #7]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20023a38 	.word	0x20023a38
 800ea20:	200239f4 	.word	0x200239f4
 800ea24:	200239d0 	.word	0x200239d0
 800ea28:	20023a3c 	.word	0x20023a3c
 800ea2c:	20023af8 	.word	0x20023af8

0800ea30 <jump_to_end_of_window>:
  * @param  thread_to_terminate - thread which called this
  *
  * @retval void
  */
static void jump_to_end_of_window(ULONG error_bit_to_set)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
	gnss->on_off(gnss, GPIO_PIN_RESET);
 800ea38:	4b1c      	ldr	r3, [pc, #112]	; (800eaac <jump_to_end_of_window+0x7c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea40:	4a1a      	ldr	r2, [pc, #104]	; (800eaac <jump_to_end_of_window+0x7c>)
 800ea42:	6812      	ldr	r2, [r2, #0]
 800ea44:	2100      	movs	r1, #0
 800ea46:	4610      	mov	r0, r2
 800ea48:	4798      	blx	r3
	tx_event_flags_set(&error_flags, error_bit_to_set, TX_OR);
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	6879      	ldr	r1, [r7, #4]
 800ea4e:	4818      	ldr	r0, [pc, #96]	; (800eab0 <jump_to_end_of_window+0x80>)
 800ea50:	f00f fbb6 	bl	801e1c0 <_txe_event_flags_set>
	// Deinit UART and DMA to prevent spurious interrupts
	HAL_UART_DeInit(gnss->gnss_uart_handle);
 800ea54:	4b15      	ldr	r3, [pc, #84]	; (800eaac <jump_to_end_of_window+0x7c>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f00b f9d6 	bl	8019e0c <HAL_UART_DeInit>
	HAL_DMA_DeInit(gnss->gnss_dma_handle);
 800ea60:	4b12      	ldr	r3, [pc, #72]	; (800eaac <jump_to_end_of_window+0x7c>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	4618      	mov	r0, r3
 800ea68:	f003 fb54 	bl	8012114 <HAL_DMA_DeInit>
	HAL_TIM_Base_Stop_IT(gnss->minutes_timer);
 800ea6c:	4b0f      	ldr	r3, [pc, #60]	; (800eaac <jump_to_end_of_window+0x7c>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	699b      	ldr	r3, [r3, #24]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f00a fd78 	bl	8019568 <HAL_TIM_Base_Stop_IT>

	if (waves_memory_pool_delete() != TX_SUCCESS) {
 800ea78:	f7fb f838 	bl	8009aec <waves_memory_pool_delete>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <jump_to_end_of_window+0x5a>
		shut_it_all_down();
 800ea82:	f7ff ff01 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800ea86:	f003 fa0e 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	if (tx_thread_resume(&end_of_cycle_thread) != TX_SUCCESS){
 800ea8a:	480a      	ldr	r0, [pc, #40]	; (800eab4 <jump_to_end_of_window+0x84>)
 800ea8c:	f00f fcf6 	bl	801e47c <_txe_thread_resume>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d003      	beq.n	800ea9e <jump_to_end_of_window+0x6e>
		shut_it_all_down();
 800ea96:	f7ff fef7 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800ea9a:	f003 fa04 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	tx_thread_terminate(&gnss_thread);
 800ea9e:	4806      	ldr	r0, [pc, #24]	; (800eab8 <jump_to_end_of_window+0x88>)
 800eaa0:	f00f fd0a 	bl	801e4b8 <_txe_thread_terminate>
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	20023a38 	.word	0x20023a38
 800eab0:	200239f4 	.word	0x200239f4
 800eab4:	20023920 	.word	0x20023920
 800eab8:	20023710 	.word	0x20023710

0800eabc <jump_to_waves>:
  * @param  thread_to_terminate - thread which called this
  *
  * @retval void
  */
static void jump_to_waves(void)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	af00      	add	r7, sp, #0
	ct->on_off(ct, GPIO_PIN_RESET);
 800eac0:	4b11      	ldr	r3, [pc, #68]	; (800eb08 <jump_to_waves+0x4c>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac6:	4a10      	ldr	r2, [pc, #64]	; (800eb08 <jump_to_waves+0x4c>)
 800eac8:	6812      	ldr	r2, [r2, #0]
 800eaca:	2100      	movs	r1, #0
 800eacc:	4610      	mov	r0, r2
 800eace:	4798      	blx	r3
	// Deinit UART and DMA to prevent spurious interrupts
	HAL_UART_DeInit(ct->ct_uart_handle);
 800ead0:	4b0d      	ldr	r3, [pc, #52]	; (800eb08 <jump_to_waves+0x4c>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f00b f998 	bl	8019e0c <HAL_UART_DeInit>
	HAL_DMA_DeInit(ct->ct_dma_handle);
 800eadc:	4b0a      	ldr	r3, [pc, #40]	; (800eb08 <jump_to_waves+0x4c>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f003 fb16 	bl	8012114 <HAL_DMA_DeInit>

	if (tx_thread_resume(&waves_thread) != TX_SUCCESS){
 800eae8:	4808      	ldr	r0, [pc, #32]	; (800eb0c <jump_to_waves+0x50>)
 800eaea:	f00f fcc7 	bl	801e47c <_txe_thread_resume>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d003      	beq.n	800eafc <jump_to_waves+0x40>
		shut_it_all_down();
 800eaf4:	f7ff fec8 	bl	800e888 <shut_it_all_down>
		HAL_NVIC_SystemReset();
 800eaf8:	f003 f9d5 	bl	8011ea6 <HAL_NVIC_SystemReset>
	}

	tx_thread_terminate(&ct_thread);
 800eafc:	4804      	ldr	r0, [pc, #16]	; (800eb10 <jump_to_waves+0x54>)
 800eafe:	f00f fcdb 	bl	801e4b8 <_txe_thread_terminate>
}
 800eb02:	bf00      	nop
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	20023af8 	.word	0x20023af8
 800eb0c:	200237c0 	.word	0x200237c0
 800eb10:	20023a48 	.word	0x20023a48

0800eb14 <send_error_message>:
  * @param  error_flags - retreived error flags
  *
  * @retval void
  */
static void send_error_message(ULONG error_flags)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
	if (error_flags & WATCHDOG_RESET) {
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00f      	beq.n	800eb46 <send_error_message+0x32>
		if (iridium->transmit_error_message(iridium, "WATCHDOG RESET")
 800eb26:	4b33      	ldr	r3, [pc, #204]	; (800ebf4 <send_error_message+0xe0>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb2c:	4a31      	ldr	r2, [pc, #196]	; (800ebf4 <send_error_message+0xe0>)
 800eb2e:	6812      	ldr	r2, [r2, #0]
 800eb30:	4931      	ldr	r1, [pc, #196]	; (800ebf8 <send_error_message+0xe4>)
 800eb32:	4610      	mov	r0, r2
 800eb34:	4798      	blx	r3
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d156      	bne.n	800ebea <send_error_message+0xd6>
				== IRIDIUM_SUCCESS)
		{
			// Only want to send this message once, so clear reset_reason
			device_handles->reset_reason = 0;
 800eb3c:	4b2f      	ldr	r3, [pc, #188]	; (800ebfc <send_error_message+0xe8>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2200      	movs	r2, #0
 800eb42:	62da      	str	r2, [r3, #44]	; 0x2c

	else if (error_flags & RTC_ERROR)
	{
		iridium->transmit_error_message(iridium, "RTC FAILURE");
	}
}
 800eb44:	e051      	b.n	800ebea <send_error_message+0xd6>
	else if (error_flags & SOFTWARE_RESET) {
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00f      	beq.n	800eb70 <send_error_message+0x5c>
		if (iridium->transmit_error_message(iridium, "SOFTWARE RESET, FAULT CONDITION OCCURED")
 800eb50:	4b28      	ldr	r3, [pc, #160]	; (800ebf4 <send_error_message+0xe0>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb56:	4a27      	ldr	r2, [pc, #156]	; (800ebf4 <send_error_message+0xe0>)
 800eb58:	6812      	ldr	r2, [r2, #0]
 800eb5a:	4929      	ldr	r1, [pc, #164]	; (800ec00 <send_error_message+0xec>)
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	4798      	blx	r3
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d141      	bne.n	800ebea <send_error_message+0xd6>
			device_handles->reset_reason = 0;
 800eb66:	4b25      	ldr	r3, [pc, #148]	; (800ebfc <send_error_message+0xe8>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800eb6e:	e03c      	b.n	800ebea <send_error_message+0xd6>
	else if (error_flags & GNSS_ERROR)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f003 0302 	and.w	r3, r3, #2
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00e      	beq.n	800eb98 <send_error_message+0x84>
		iridium->transmit_error_message(iridium, "GNSS FAILURE");
 800eb7a:	4b1e      	ldr	r3, [pc, #120]	; (800ebf4 <send_error_message+0xe0>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb80:	4a1c      	ldr	r2, [pc, #112]	; (800ebf4 <send_error_message+0xe0>)
 800eb82:	6812      	ldr	r2, [r2, #0]
 800eb84:	491f      	ldr	r1, [pc, #124]	; (800ec04 <send_error_message+0xf0>)
 800eb86:	4610      	mov	r0, r2
 800eb88:	4798      	blx	r3
		tx_event_flags_set(&thread_control_flags, GNSS_CONFIG_REQUIRED, TX_OR);
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eb90:	481d      	ldr	r0, [pc, #116]	; (800ec08 <send_error_message+0xf4>)
 800eb92:	f00f fb15 	bl	801e1c0 <_txe_event_flags_set>
}
 800eb96:	e028      	b.n	800ebea <send_error_message+0xd6>
	else if (error_flags & DMA_ERROR)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d008      	beq.n	800ebb4 <send_error_message+0xa0>
		iridium->transmit_error_message(iridium, "DMA FAILURE");
 800eba2:	4b14      	ldr	r3, [pc, #80]	; (800ebf4 <send_error_message+0xe0>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eba8:	4a12      	ldr	r2, [pc, #72]	; (800ebf4 <send_error_message+0xe0>)
 800ebaa:	6812      	ldr	r2, [r2, #0]
 800ebac:	4917      	ldr	r1, [pc, #92]	; (800ec0c <send_error_message+0xf8>)
 800ebae:	4610      	mov	r0, r2
 800ebb0:	4798      	blx	r3
}
 800ebb2:	e01a      	b.n	800ebea <send_error_message+0xd6>
	else if (error_flags & UART_ERROR)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d008      	beq.n	800ebd0 <send_error_message+0xbc>
		iridium->transmit_error_message(iridium, "UART FAILURE");
 800ebbe:	4b0d      	ldr	r3, [pc, #52]	; (800ebf4 <send_error_message+0xe0>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebc4:	4a0b      	ldr	r2, [pc, #44]	; (800ebf4 <send_error_message+0xe0>)
 800ebc6:	6812      	ldr	r2, [r2, #0]
 800ebc8:	4911      	ldr	r1, [pc, #68]	; (800ec10 <send_error_message+0xfc>)
 800ebca:	4610      	mov	r0, r2
 800ebcc:	4798      	blx	r3
}
 800ebce:	e00c      	b.n	800ebea <send_error_message+0xd6>
	else if (error_flags & RTC_ERROR)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d007      	beq.n	800ebea <send_error_message+0xd6>
		iridium->transmit_error_message(iridium, "RTC FAILURE");
 800ebda:	4b06      	ldr	r3, [pc, #24]	; (800ebf4 <send_error_message+0xe0>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe0:	4a04      	ldr	r2, [pc, #16]	; (800ebf4 <send_error_message+0xe0>)
 800ebe2:	6812      	ldr	r2, [r2, #0]
 800ebe4:	490b      	ldr	r1, [pc, #44]	; (800ec14 <send_error_message+0x100>)
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	4798      	blx	r3
}
 800ebea:	bf00      	nop
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20023a3c 	.word	0x20023a3c
 800ebf8:	08023680 	.word	0x08023680
 800ebfc:	20023a44 	.word	0x20023a44
 800ec00:	08023690 	.word	0x08023690
 800ec04:	080236b8 	.word	0x080236b8
 800ec08:	200239d0 	.word	0x200239d0
 800ec0c:	080236c8 	.word	0x080236c8
 800ec10:	080236d4 	.word	0x080236d4
 800ec14:	080236e4 	.word	0x080236e4

0800ec18 <get_two_bytes>:
 * @param start_index - the start index of the bytes to extract
 *
 * @return The two bytes as a uint16_t -- can be cast to different formats
 */
uint16_t get_two_bytes(uint8_t* byte_array, uint32_t start_index, endian_t endianess)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b087      	sub	sp, #28
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	4613      	mov	r3, r2
 800ec24:	71fb      	strb	r3, [r7, #7]
	uint16_t return_val = 0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	82fb      	strh	r3, [r7, #22]

	if (endianess == AS_BIG_ENDIAN) {
 800ec2a:	79fb      	ldrb	r3, [r7, #7]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d10f      	bne.n	800ec50 <get_two_bytes+0x38>
		return_val =  ((byte_array[start_index] << 8) +
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	4413      	add	r3, r2
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	021b      	lsls	r3, r3, #8
 800ec3c:	b29a      	uxth	r2, r3
				(byte_array[start_index + 1]));
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	3301      	adds	r3, #1
 800ec42:	68f9      	ldr	r1, [r7, #12]
 800ec44:	440b      	add	r3, r1
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	b29b      	uxth	r3, r3
		return_val =  ((byte_array[start_index] << 8) +
 800ec4a:	4413      	add	r3, r2
 800ec4c:	82fb      	strh	r3, [r7, #22]
 800ec4e:	e00e      	b.n	800ec6e <get_two_bytes+0x56>
	} else {
		return_val =  (byte_array[start_index] +
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	4413      	add	r3, r2
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	b29a      	uxth	r2, r3
				(byte_array[start_index + 1] << 8));
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	68f9      	ldr	r1, [r7, #12]
 800ec60:	440b      	add	r3, r1
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	021b      	lsls	r3, r3, #8
 800ec68:	b29b      	uxth	r3, r3
		return_val =  (byte_array[start_index] +
 800ec6a:	4413      	add	r3, r2
 800ec6c:	82fb      	strh	r3, [r7, #22]
	}

	return return_val;
 800ec6e:	8afb      	ldrh	r3, [r7, #22]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	371c      	adds	r7, #28
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <get_four_bytes>:
 * @param endianess - either LITTLE_ENDIAN or BIG_ENDIAN
 *
 * @return The four bytes as a uint16_t -- can be cast to different formats
 */
uint32_t get_four_bytes(uint8_t* byte_array, uint32_t start_index, endian_t endianess)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b087      	sub	sp, #28
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	4613      	mov	r3, r2
 800ec88:	71fb      	strb	r3, [r7, #7]
	uint32_t return_val = 0;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	617b      	str	r3, [r7, #20]

	if (endianess == AS_BIG_ENDIAN) {
 800ec8e:	79fb      	ldrb	r3, [r7, #7]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d11a      	bne.n	800ecca <get_four_bytes+0x4e>
		return_val = ((byte_array[start_index] << 24) +
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	4413      	add	r3, r2
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	061a      	lsls	r2, r3, #24
				(byte_array[start_index + 1] << 16) +
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	3301      	adds	r3, #1
 800eca2:	68f9      	ldr	r1, [r7, #12]
 800eca4:	440b      	add	r3, r1
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	041b      	lsls	r3, r3, #16
		return_val = ((byte_array[start_index] << 24) +
 800ecaa:	441a      	add	r2, r3
				(byte_array[start_index + 2] << 8) +
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	3302      	adds	r3, #2
 800ecb0:	68f9      	ldr	r1, [r7, #12]
 800ecb2:	440b      	add	r3, r1
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	021b      	lsls	r3, r3, #8
				(byte_array[start_index + 1] << 16) +
 800ecb8:	4413      	add	r3, r2
				byte_array[start_index + 3]);
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	3203      	adds	r2, #3
 800ecbe:	68f9      	ldr	r1, [r7, #12]
 800ecc0:	440a      	add	r2, r1
 800ecc2:	7812      	ldrb	r2, [r2, #0]
				(byte_array[start_index + 2] << 8) +
 800ecc4:	4413      	add	r3, r2
		return_val = ((byte_array[start_index] << 24) +
 800ecc6:	617b      	str	r3, [r7, #20]
 800ecc8:	e01a      	b.n	800ed00 <get_four_bytes+0x84>
	} else {
		return_val = (byte_array[start_index] +
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	4413      	add	r3, r2
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	4619      	mov	r1, r3
				(byte_array[start_index + 1] << 8) +
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	68fa      	ldr	r2, [r7, #12]
 800ecda:	4413      	add	r3, r2
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	021b      	lsls	r3, r3, #8
		return_val = (byte_array[start_index] +
 800ece0:	18ca      	adds	r2, r1, r3
				(byte_array[start_index + 2] << 16) +
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	3302      	adds	r3, #2
 800ece6:	68f9      	ldr	r1, [r7, #12]
 800ece8:	440b      	add	r3, r1
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	041b      	lsls	r3, r3, #16
				(byte_array[start_index + 1] << 8) +
 800ecee:	441a      	add	r2, r3
				(byte_array[start_index + 3] << 24));
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	3303      	adds	r3, #3
 800ecf4:	68f9      	ldr	r1, [r7, #12]
 800ecf6:	440b      	add	r3, r1
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	061b      	lsls	r3, r3, #24
				(byte_array[start_index + 2] << 16) +
 800ecfc:	4413      	add	r3, r2
		return_val = (byte_array[start_index] +
 800ecfe:	617b      	str	r3, [r7, #20]
	}

	return return_val;
 800ed00:	697b      	ldr	r3, [r7, #20]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	371c      	adds	r7, #28
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
	...

0800ed10 <MX_GNSS_LL_Queue_Config>:
  * @brief  DMA Linked-list YourQueueName configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_GNSS_LL_Queue_Config(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b09c      	sub	sp, #112	; 0x70
 800ed14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  DMA_NodeConfTypeDef pNodeConfig;
//  DMA_HandleTypeDef handle_GPDMA1_Channel0 = handle_GPDMA1_Channel0;


  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800ed1c:	2321      	movs	r3, #33	; 0x21
 800ed1e:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_LPUART1_RX;
 800ed20:	2322      	movs	r3, #34	; 0x22
 800ed22:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800ed24:	2300      	movs	r3, #0
 800ed26:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800ed30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ed34:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800ed36:	2300      	movs	r3, #0
 800ed38:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 800ed42:	2301      	movs	r3, #1
 800ed44:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800ed46:	2300      	movs	r3, #0
 800ed48:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	633b      	str	r3, [r7, #48]	; 0x30
//  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
//  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
//  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
//  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
//  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800ed52:	2300      	movs	r3, #0
 800ed54:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800ed56:	2300      	movs	r3, #0
 800ed58:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 100;
 800ed62:	2364      	movs	r3, #100	; 0x64
 800ed64:	66bb      	str	r3, [r7, #104]	; 0x68

//  handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;

  /* Build GNSS_LL_Node Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &GNSS_LL_Node);
 800ed66:	463b      	mov	r3, r7
 800ed68:	4912      	ldr	r1, [pc, #72]	; (800edb4 <MX_GNSS_LL_Queue_Config+0xa4>)
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f004 f9d4 	bl	8013118 <HAL_DMAEx_List_BuildNode>
 800ed70:	4603      	mov	r3, r0
 800ed72:	461a      	mov	r2, r3
 800ed74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert GNSS_LL_Node to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&GNSS_LL_Queue, &GNSS_LL_Node);
 800ed7e:	490d      	ldr	r1, [pc, #52]	; (800edb4 <MX_GNSS_LL_Queue_Config+0xa4>)
 800ed80:	480d      	ldr	r0, [pc, #52]	; (800edb8 <MX_GNSS_LL_Queue_Config+0xa8>)
 800ed82:	f004 f9df 	bl	8013144 <HAL_DMAEx_List_InsertNode_Tail>
 800ed86:	4603      	mov	r3, r0
 800ed88:	461a      	mov	r2, r3
 800ed8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&GNSS_LL_Queue);
 800ed94:	4808      	ldr	r0, [pc, #32]	; (800edb8 <MX_GNSS_LL_Queue_Config+0xa8>)
 800ed96:	f004 fa4d 	bl	8013234 <HAL_DMAEx_List_SetCircularMode>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eda2:	4313      	orrs	r3, r2
 800eda4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  return ret;
 800eda8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800edac:	4618      	mov	r0, r3
 800edae:	3770      	adds	r7, #112	; 0x70
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	200b62f8 	.word	0x200b62f8
 800edb8:	200b631c 	.word	0x200b631c

0800edbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b08e      	sub	sp, #56	; 0x38
 800edc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800edc2:	f001 fb8f 	bl	80104e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Force the reset of the RTC and clear anything in the backup domain
  HAL_PWR_EnableBkUpAccess();
 800edc6:	f005 fa7b 	bl	80142c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_BACKUPRESET_FORCE();
 800edca:	4b27      	ldr	r3, [pc, #156]	; (800ee68 <main+0xac>)
 800edcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800edd0:	4a25      	ldr	r2, [pc, #148]	; (800ee68 <main+0xac>)
 800edd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  HAL_Delay(1);
 800edda:	2001      	movs	r0, #1
 800eddc:	f7ff fc14 	bl	800e608 <HAL_Delay>
  __HAL_RCC_BACKUPRESET_RELEASE();
 800ede0:	4b21      	ldr	r3, [pc, #132]	; (800ee68 <main+0xac>)
 800ede2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ede6:	4a20      	ldr	r2, [pc, #128]	; (800ee68 <main+0xac>)
 800ede8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800edec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800edf0:	f000 f850 	bl	800ee94 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800edf4:	f000 f8ac 	bl	800ef50 <SystemPower_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800edf8:	f000 fb4e 	bl	800f498 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800edfc:	f000 f94a 	bl	800f094 <MX_GPDMA1_Init>
  MX_RTC_Init();
 800ee00:	f000 fa76 	bl	800f2f0 <MX_RTC_Init>
  MX_ICACHE_Init();
 800ee04:	f000 f97e 	bl	800f104 <MX_ICACHE_Init>
#if CT_ENABLED
  MX_UART4_Init();
 800ee08:	f000 f9da 	bl	800f1c0 <MX_UART4_Init>
#endif
  MX_UART5_Init();
 800ee0c:	f000 fa24 	bl	800f258 <MX_UART5_Init>
  MX_ADC4_Init();
 800ee10:	f000 f8d0 	bl	800efb4 <MX_ADC4_Init>
  MX_TIM17_Init();
 800ee14:	f000 fb18 	bl	800f448 <MX_TIM17_Init>
  MX_LPUART1_UART_Init();
 800ee18:	f000 f988 	bl	800f12c <MX_LPUART1_UART_Init>
  MX_TIM16_Init();
 800ee1c:	f000 faec 	bl	800f3f8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  uint32_t reset_reason = HAL_RCC_GetResetSource();
 800ee20:	f007 f84a 	bl	8015eb8 <HAL_RCC_GetResetSource>
 800ee24:	6378      	str	r0, [r7, #52]	; 0x34

  device_handles_t handles;

  handles.hrtc = &hrtc;
 800ee26:	4b11      	ldr	r3, [pc, #68]	; (800ee6c <main+0xb0>)
 800ee28:	607b      	str	r3, [r7, #4]
  handles.CT_uart = &huart4;
 800ee2a:	4b11      	ldr	r3, [pc, #68]	; (800ee70 <main+0xb4>)
 800ee2c:	60bb      	str	r3, [r7, #8]
  handles.Iridium_uart = &huart5;
 800ee2e:	4b11      	ldr	r3, [pc, #68]	; (800ee74 <main+0xb8>)
 800ee30:	60fb      	str	r3, [r7, #12]
  handles.GNSS_uart = &hlpuart1;
 800ee32:	4b11      	ldr	r3, [pc, #68]	; (800ee78 <main+0xbc>)
 800ee34:	613b      	str	r3, [r7, #16]
  handles.CT_dma_handle = &handle_GPDMA1_Channel1;
 800ee36:	4b11      	ldr	r3, [pc, #68]	; (800ee7c <main+0xc0>)
 800ee38:	617b      	str	r3, [r7, #20]
  handles.GNSS_dma_handle = &handle_GPDMA1_Channel0;
 800ee3a:	4b11      	ldr	r3, [pc, #68]	; (800ee80 <main+0xc4>)
 800ee3c:	61bb      	str	r3, [r7, #24]
  handles.Iridium_tx_dma_handle = &handle_GPDMA1_Channel2;
 800ee3e:	4b11      	ldr	r3, [pc, #68]	; (800ee84 <main+0xc8>)
 800ee40:	61fb      	str	r3, [r7, #28]
  handles.Iridium_rx_dma_handle = &handle_GPDMA1_Channel3;
 800ee42:	4b11      	ldr	r3, [pc, #68]	; (800ee88 <main+0xcc>)
 800ee44:	623b      	str	r3, [r7, #32]
  handles.iridium_timer = &htim17;
 800ee46:	4b11      	ldr	r3, [pc, #68]	; (800ee8c <main+0xd0>)
 800ee48:	627b      	str	r3, [r7, #36]	; 0x24
  handles.gnss_timer = &htim16;
 800ee4a:	4b11      	ldr	r3, [pc, #68]	; (800ee90 <main+0xd4>)
 800ee4c:	62bb      	str	r3, [r7, #40]	; 0x28
  handles.watchdog_handle = 0; // watchdog unused
 800ee4e:	2300      	movs	r3, #0
 800ee50:	62fb      	str	r3, [r7, #44]	; 0x2c
  handles.reset_reason = reset_reason;
 800ee52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee54:	633b      	str	r3, [r7, #48]	; 0x30

  MX_ThreadX_Init(&handles);
 800ee56:	1d3b      	adds	r3, r7, #4
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fe fcd1 	bl	800d800 <MX_ThreadX_Init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  shut_it_all_down();
 800ee5e:	f7ff fd13 	bl	800e888 <shut_it_all_down>
	  HAL_NVIC_SystemReset();
 800ee62:	f003 f820 	bl	8011ea6 <HAL_NVIC_SystemReset>
	  shut_it_all_down();
 800ee66:	e7fa      	b.n	800ee5e <main+0xa2>
 800ee68:	46020c00 	.word	0x46020c00
 800ee6c:	200b67ec 	.word	0x200b67ec
 800ee70:	200b6484 	.word	0x200b6484
 800ee74:	200b6548 	.word	0x200b6548
 800ee78:	200b63c0 	.word	0x200b63c0
 800ee7c:	200b6684 	.word	0x200b6684
 800ee80:	200b660c 	.word	0x200b660c
 800ee84:	200b6774 	.word	0x200b6774
 800ee88:	200b66fc 	.word	0x200b66fc
 800ee8c:	200b68e8 	.word	0x200b68e8
 800ee90:	200b681c 	.word	0x200b681c

0800ee94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b09e      	sub	sp, #120	; 0x78
 800ee98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ee9a:	f107 0318 	add.w	r3, r7, #24
 800ee9e:	2260      	movs	r2, #96	; 0x60
 800eea0:	2100      	movs	r1, #0
 800eea2:	4618      	mov	r0, r3
 800eea4:	f011 fb65 	bl	8020572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800eea8:	463b      	mov	r3, r7
 800eeaa:	2200      	movs	r2, #0
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	605a      	str	r2, [r3, #4]
 800eeb0:	609a      	str	r2, [r3, #8]
 800eeb2:	60da      	str	r2, [r3, #12]
 800eeb4:	611a      	str	r2, [r3, #16]
 800eeb6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 800eeb8:	2000      	movs	r0, #0
 800eeba:	f005 fa63 	bl	8014384 <HAL_PWREx_ControlVoltageScaling>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800eec4:	f000 fc98 	bl	800f7f8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800eec8:	f005 f9fa 	bl	80142c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800eecc:	4b1f      	ldr	r3, [pc, #124]	; (800ef4c <SystemClock_Config+0xb8>)
 800eece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eed2:	4a1e      	ldr	r2, [pc, #120]	; (800ef4c <SystemClock_Config+0xb8>)
 800eed4:	f043 0318 	orr.w	r3, r3, #24
 800eed8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800eedc:	231c      	movs	r3, #28
 800eede:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800eee0:	2381      	movs	r3, #129	; 0x81
 800eee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800eee4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800eee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800eeea:	2301      	movs	r3, #1
 800eeec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800eeee:	2310      	movs	r3, #16
 800eef0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_3;
 800eef2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800eef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800eef8:	2300      	movs	r3, #0
 800eefa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800eefc:	2300      	movs	r3, #0
 800eefe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ef00:	f107 0318 	add.w	r3, r7, #24
 800ef04:	4618      	mov	r0, r3
 800ef06:	f005 fd79 	bl	80149fc <HAL_RCC_OscConfig>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800ef10:	f000 fc72 	bl	800f7f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ef14:	231f      	movs	r3, #31
 800ef16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ef20:	2300      	movs	r3, #0
 800ef22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ef24:	2300      	movs	r3, #0
 800ef26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800ef2c:	463b      	mov	r3, r7
 800ef2e:	2100      	movs	r1, #0
 800ef30:	4618      	mov	r0, r3
 800ef32:	f006 fc39 	bl	80157a8 <HAL_RCC_ClockConfig>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d001      	beq.n	800ef40 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800ef3c:	f000 fc5c 	bl	800f7f8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800ef40:	f009 fb74 	bl	801862c <HAL_RCCEx_EnableMSIPLLMode>
}
 800ef44:	bf00      	nop
 800ef46:	3778      	adds	r7, #120	; 0x78
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	46020c00 	.word	0x46020c00

0800ef50 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800ef54:	f005 fbc8 	bl	80146e8 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800ef58:	f005 fbd6 	bl	8014708 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * SRAM Power Down In Stop Mode Config
   */
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM4_FULL_STOP_RETENTION);
 800ef5c:	4810      	ldr	r0, [pc, #64]	; (800efa0 <SystemPower_Config+0x50>)
 800ef5e:	f005 fc9d 	bl	801489c <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_ICACHE_FULL_STOP_RETENTION);
 800ef62:	4810      	ldr	r0, [pc, #64]	; (800efa4 <SystemPower_Config+0x54>)
 800ef64:	f005 fc9a 	bl	801489c <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_EnableRAMsContentStopRetention(PWR_SRAM1_FULL_STOP_RETENTION);
 800ef68:	480f      	ldr	r0, [pc, #60]	; (800efa8 <SystemPower_Config+0x58>)
 800ef6a:	f005 fbdd 	bl	8014728 <HAL_PWREx_EnableRAMsContentStopRetention>
  HAL_PWREx_EnableRAMsContentStopRetention(PWR_SRAM2_FULL_STOP_RETENTION);
 800ef6e:	480f      	ldr	r0, [pc, #60]	; (800efac <SystemPower_Config+0x5c>)
 800ef70:	f005 fbda 	bl	8014728 <HAL_PWREx_EnableRAMsContentStopRetention>
  HAL_PWREx_EnableRAMsContentStopRetention(PWR_SRAM3_FULL_STOP_RETENTION);
 800ef74:	480e      	ldr	r0, [pc, #56]	; (800efb0 <SystemPower_Config+0x60>)
 800ef76:	f005 fbd7 	bl	8014728 <HAL_PWREx_EnableRAMsContentStopRetention>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800ef7a:	2002      	movs	r0, #2
 800ef7c:	f005 fa84 	bl	8014488 <HAL_PWREx_ConfigSupply>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d001      	beq.n	800ef8a <SystemPower_Config+0x3a>
  {
    Error_Handler();
 800ef86:	f000 fc37 	bl	800f7f8 <Error_Handler>
  }
  /* PWR_S3WU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_S3WU_IRQn, 0, 0);
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	204d      	movs	r0, #77	; 0x4d
 800ef90:	f002 ff53 	bl	8011e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_S3WU_IRQn);
 800ef94:	204d      	movs	r0, #77	; 0x4d
 800ef96:	f002 ff6a 	bl	8011e6e <HAL_NVIC_EnableIRQ>
}
 800ef9a:	bf00      	nop
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	00080001 	.word	0x00080001
 800efa4:	00100001 	.word	0x00100001
 800efa8:	00010007 	.word	0x00010007
 800efac:	00020003 	.word	0x00020003
 800efb0:	000400ff 	.word	0x000400ff

0800efb4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b088      	sub	sp, #32
 800efb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800efba:	463b      	mov	r3, r7
 800efbc:	2220      	movs	r2, #32
 800efbe:	2100      	movs	r1, #0
 800efc0:	4618      	mov	r0, r3
 800efc2:	f011 fad6 	bl	8020572 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800efc6:	4b30      	ldr	r3, [pc, #192]	; (800f088 <MX_ADC4_Init+0xd4>)
 800efc8:	4a30      	ldr	r2, [pc, #192]	; (800f08c <MX_ADC4_Init+0xd8>)
 800efca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800efcc:	4b2e      	ldr	r3, [pc, #184]	; (800f088 <MX_ADC4_Init+0xd4>)
 800efce:	2200      	movs	r2, #0
 800efd0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800efd2:	4b2d      	ldr	r3, [pc, #180]	; (800f088 <MX_ADC4_Init+0xd4>)
 800efd4:	2204      	movs	r2, #4
 800efd6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800efd8:	4b2b      	ldr	r3, [pc, #172]	; (800f088 <MX_ADC4_Init+0xd4>)
 800efda:	2200      	movs	r2, #0
 800efdc:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 800efde:	4b2a      	ldr	r3, [pc, #168]	; (800f088 <MX_ADC4_Init+0xd4>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800efe4:	4b28      	ldr	r3, [pc, #160]	; (800f088 <MX_ADC4_Init+0xd4>)
 800efe6:	2204      	movs	r2, #4
 800efe8:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 800efea:	4b27      	ldr	r3, [pc, #156]	; (800f088 <MX_ADC4_Init+0xd4>)
 800efec:	2200      	movs	r2, #0
 800efee:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800eff0:	4b25      	ldr	r3, [pc, #148]	; (800f088 <MX_ADC4_Init+0xd4>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800eff6:	4b24      	ldr	r3, [pc, #144]	; (800f088 <MX_ADC4_Init+0xd4>)
 800eff8:	2200      	movs	r2, #0
 800effa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfConversion = 1;
 800effe:	4b22      	ldr	r3, [pc, #136]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f000:	2201      	movs	r2, #1
 800f002:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800f004:	4b20      	ldr	r3, [pc, #128]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f006:	2200      	movs	r2, #0
 800f008:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f00c:	4b1e      	ldr	r3, [pc, #120]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f00e:	2200      	movs	r2, #0
 800f010:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f012:	4b1d      	ldr	r3, [pc, #116]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f014:	2200      	movs	r2, #0
 800f016:	639a      	str	r2, [r3, #56]	; 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800f018:	4b1b      	ldr	r3, [pc, #108]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800f020:	4b19      	ldr	r3, [pc, #100]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f022:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f026:	669a      	str	r2, [r3, #104]	; 0x68
  hadc4.Init.VrefProtection = ADC_VREF_PPROT_NONE;
 800f028:	4b17      	ldr	r3, [pc, #92]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f02a:	2200      	movs	r2, #0
 800f02c:	66da      	str	r2, [r3, #108]	; 0x6c
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800f02e:	4b16      	ldr	r3, [pc, #88]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f030:	2200      	movs	r2, #0
 800f032:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 800f034:	4b14      	ldr	r3, [pc, #80]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f036:	2200      	movs	r2, #0
 800f038:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 800f03a:	4b13      	ldr	r3, [pc, #76]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 800f040:	4b11      	ldr	r3, [pc, #68]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f042:	2200      	movs	r2, #0
 800f044:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800f048:	480f      	ldr	r0, [pc, #60]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f04a:	f001 fd9b 	bl	8010b84 <HAL_ADC_Init>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d001      	beq.n	800f058 <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 800f054:	f000 fbd0 	bl	800f7f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800f058:	4b0d      	ldr	r3, [pc, #52]	; (800f090 <MX_ADC4_Init+0xdc>)
 800f05a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 800f05c:	2300      	movs	r3, #0
 800f05e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 800f060:	2300      	movs	r3, #0
 800f062:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800f064:	2304      	movs	r3, #4
 800f066:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800f068:	2300      	movs	r3, #0
 800f06a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800f06c:	463b      	mov	r3, r7
 800f06e:	4619      	mov	r1, r3
 800f070:	4805      	ldr	r0, [pc, #20]	; (800f088 <MX_ADC4_Init+0xd4>)
 800f072:	f002 f881 	bl	8011178 <HAL_ADC_ConfigChannel>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <MX_ADC4_Init+0xcc>
  {
    Error_Handler();
 800f07c:	f000 fbbc 	bl	800f7f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800f080:	bf00      	nop
 800f082:	3720      	adds	r7, #32
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	200b6334 	.word	0x200b6334
 800f08c:	46021000 	.word	0x46021000
 800f090:	80000001 	.word	0x80000001

0800f094 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800f09a:	4b19      	ldr	r3, [pc, #100]	; (800f100 <MX_GPDMA1_Init+0x6c>)
 800f09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0a0:	4a17      	ldr	r2, [pc, #92]	; (800f100 <MX_GPDMA1_Init+0x6c>)
 800f0a2:	f043 0301 	orr.w	r3, r3, #1
 800f0a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800f0aa:	4b15      	ldr	r3, [pc, #84]	; (800f100 <MX_GPDMA1_Init+0x6c>)
 800f0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0b0:	f003 0301 	and.w	r3, r3, #1
 800f0b4:	607b      	str	r3, [r7, #4]
 800f0b6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	201d      	movs	r0, #29
 800f0be:	f002 febc 	bl	8011e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800f0c2:	201d      	movs	r0, #29
 800f0c4:	f002 fed3 	bl	8011e6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	201e      	movs	r0, #30
 800f0ce:	f002 feb4 	bl	8011e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800f0d2:	201e      	movs	r0, #30
 800f0d4:	f002 fecb 	bl	8011e6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2100      	movs	r1, #0
 800f0dc:	201f      	movs	r0, #31
 800f0de:	f002 feac 	bl	8011e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800f0e2:	201f      	movs	r0, #31
 800f0e4:	f002 fec3 	bl	8011e6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	2020      	movs	r0, #32
 800f0ee:	f002 fea4 	bl	8011e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 800f0f2:	2020      	movs	r0, #32
 800f0f4:	f002 febb 	bl	8011e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800f0f8:	bf00      	nop
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	46020c00 	.word	0x46020c00

0800f104 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800f108:	2000      	movs	r0, #0
 800f10a:	f005 f879 	bl	8014200 <HAL_ICACHE_ConfigAssociativityMode>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d001      	beq.n	800f118 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800f114:	f000 fb70 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800f118:	f005 f892 	bl	8014240 <HAL_ICACHE_Enable>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d001      	beq.n	800f126 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800f122:	f000 fb69 	bl	800f7f8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800f126:	bf00      	nop
 800f128:	bd80      	pop	{r7, pc}
	...

0800f12c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800f130:	4b21      	ldr	r3, [pc, #132]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f132:	4a22      	ldr	r2, [pc, #136]	; (800f1bc <MX_LPUART1_UART_Init+0x90>)
 800f134:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800f136:	4b20      	ldr	r3, [pc, #128]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f138:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800f13c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f13e:	4b1e      	ldr	r3, [pc, #120]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f140:	2200      	movs	r2, #0
 800f142:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800f144:	4b1c      	ldr	r3, [pc, #112]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f146:	2200      	movs	r2, #0
 800f148:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800f14a:	4b1b      	ldr	r3, [pc, #108]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800f150:	4b19      	ldr	r3, [pc, #100]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f152:	220c      	movs	r2, #12
 800f154:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f156:	4b18      	ldr	r3, [pc, #96]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f158:	2200      	movs	r2, #0
 800f15a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f15c:	4b16      	ldr	r3, [pc, #88]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f15e:	2200      	movs	r2, #0
 800f160:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f162:	4b15      	ldr	r3, [pc, #84]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f164:	2200      	movs	r2, #0
 800f166:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800f168:	4b13      	ldr	r3, [pc, #76]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800f16e:	4812      	ldr	r0, [pc, #72]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f170:	f00a fdec 	bl	8019d4c <HAL_UART_Init>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d001      	beq.n	800f17e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800f17a:	f000 fb3d 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f17e:	2100      	movs	r1, #0
 800f180:	480d      	ldr	r0, [pc, #52]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f182:	f00c fac4 	bl	801b70e <HAL_UARTEx_SetTxFifoThreshold>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800f18c:	f000 fb34 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f190:	2100      	movs	r1, #0
 800f192:	4809      	ldr	r0, [pc, #36]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f194:	f00c faf9 	bl	801b78a <HAL_UARTEx_SetRxFifoThreshold>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d001      	beq.n	800f1a2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800f19e:	f000 fb2b 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800f1a2:	4805      	ldr	r0, [pc, #20]	; (800f1b8 <MX_LPUART1_UART_Init+0x8c>)
 800f1a4:	f00c fa7a 	bl	801b69c <HAL_UARTEx_DisableFifoMode>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800f1ae:	f000 fb23 	bl	800f7f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800f1b2:	bf00      	nop
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	200b63c0 	.word	0x200b63c0
 800f1bc:	46002400 	.word	0x46002400

0800f1c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800f1c4:	4b22      	ldr	r3, [pc, #136]	; (800f250 <MX_UART4_Init+0x90>)
 800f1c6:	4a23      	ldr	r2, [pc, #140]	; (800f254 <MX_UART4_Init+0x94>)
 800f1c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800f1ca:	4b21      	ldr	r3, [pc, #132]	; (800f250 <MX_UART4_Init+0x90>)
 800f1cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800f1d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800f1d2:	4b1f      	ldr	r3, [pc, #124]	; (800f250 <MX_UART4_Init+0x90>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800f1d8:	4b1d      	ldr	r3, [pc, #116]	; (800f250 <MX_UART4_Init+0x90>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800f1de:	4b1c      	ldr	r3, [pc, #112]	; (800f250 <MX_UART4_Init+0x90>)
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800f1e4:	4b1a      	ldr	r3, [pc, #104]	; (800f250 <MX_UART4_Init+0x90>)
 800f1e6:	220c      	movs	r2, #12
 800f1e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f1ea:	4b19      	ldr	r3, [pc, #100]	; (800f250 <MX_UART4_Init+0x90>)
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800f1f0:	4b17      	ldr	r3, [pc, #92]	; (800f250 <MX_UART4_Init+0x90>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f1f6:	4b16      	ldr	r3, [pc, #88]	; (800f250 <MX_UART4_Init+0x90>)
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800f1fc:	4b14      	ldr	r3, [pc, #80]	; (800f250 <MX_UART4_Init+0x90>)
 800f1fe:	2200      	movs	r2, #0
 800f200:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f202:	4b13      	ldr	r3, [pc, #76]	; (800f250 <MX_UART4_Init+0x90>)
 800f204:	2200      	movs	r2, #0
 800f206:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800f208:	4811      	ldr	r0, [pc, #68]	; (800f250 <MX_UART4_Init+0x90>)
 800f20a:	f00a fd9f 	bl	8019d4c <HAL_UART_Init>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d001      	beq.n	800f218 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800f214:	f000 faf0 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f218:	2100      	movs	r1, #0
 800f21a:	480d      	ldr	r0, [pc, #52]	; (800f250 <MX_UART4_Init+0x90>)
 800f21c:	f00c fa77 	bl	801b70e <HAL_UARTEx_SetTxFifoThreshold>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d001      	beq.n	800f22a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800f226:	f000 fae7 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f22a:	2100      	movs	r1, #0
 800f22c:	4808      	ldr	r0, [pc, #32]	; (800f250 <MX_UART4_Init+0x90>)
 800f22e:	f00c faac 	bl	801b78a <HAL_UARTEx_SetRxFifoThreshold>
 800f232:	4603      	mov	r3, r0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d001      	beq.n	800f23c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800f238:	f000 fade 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800f23c:	4804      	ldr	r0, [pc, #16]	; (800f250 <MX_UART4_Init+0x90>)
 800f23e:	f00c fa2d 	bl	801b69c <HAL_UARTEx_DisableFifoMode>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800f248:	f000 fad6 	bl	800f7f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800f24c:	bf00      	nop
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	200b6484 	.word	0x200b6484
 800f254:	40004c00 	.word	0x40004c00

0800f258 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800f25c:	4b22      	ldr	r3, [pc, #136]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f25e:	4a23      	ldr	r2, [pc, #140]	; (800f2ec <MX_UART5_Init+0x94>)
 800f260:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 800f262:	4b21      	ldr	r3, [pc, #132]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f264:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800f268:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800f26a:	4b1f      	ldr	r3, [pc, #124]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f26c:	2200      	movs	r2, #0
 800f26e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800f270:	4b1d      	ldr	r3, [pc, #116]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f272:	2200      	movs	r2, #0
 800f274:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800f276:	4b1c      	ldr	r3, [pc, #112]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f278:	2200      	movs	r2, #0
 800f27a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800f27c:	4b1a      	ldr	r3, [pc, #104]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f27e:	220c      	movs	r2, #12
 800f280:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f282:	4b19      	ldr	r3, [pc, #100]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f284:	2200      	movs	r2, #0
 800f286:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800f288:	4b17      	ldr	r3, [pc, #92]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f28a:	2200      	movs	r2, #0
 800f28c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f28e:	4b16      	ldr	r3, [pc, #88]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f290:	2200      	movs	r2, #0
 800f292:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800f294:	4b14      	ldr	r3, [pc, #80]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f296:	2200      	movs	r2, #0
 800f298:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f29a:	4b13      	ldr	r3, [pc, #76]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800f2a0:	4811      	ldr	r0, [pc, #68]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f2a2:	f00a fd53 	bl	8019d4c <HAL_UART_Init>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d001      	beq.n	800f2b0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800f2ac:	f000 faa4 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	480d      	ldr	r0, [pc, #52]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f2b4:	f00c fa2b 	bl	801b70e <HAL_UARTEx_SetTxFifoThreshold>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800f2be:	f000 fa9b 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	4808      	ldr	r0, [pc, #32]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f2c6:	f00c fa60 	bl	801b78a <HAL_UARTEx_SetRxFifoThreshold>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d001      	beq.n	800f2d4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800f2d0:	f000 fa92 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800f2d4:	4804      	ldr	r0, [pc, #16]	; (800f2e8 <MX_UART5_Init+0x90>)
 800f2d6:	f00c f9e1 	bl	801b69c <HAL_UARTEx_DisableFifoMode>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d001      	beq.n	800f2e4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800f2e0:	f000 fa8a 	bl	800f7f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800f2e4:	bf00      	nop
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	200b6548 	.word	0x200b6548
 800f2ec:	40005000 	.word	0x40005000

0800f2f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08e      	sub	sp, #56	; 0x38
 800f2f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800f2f6:	f107 031c 	add.w	r3, r7, #28
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	601a      	str	r2, [r3, #0]
 800f2fe:	605a      	str	r2, [r3, #4]
 800f300:	609a      	str	r2, [r3, #8]
 800f302:	60da      	str	r2, [r3, #12]
 800f304:	611a      	str	r2, [r3, #16]
 800f306:	615a      	str	r2, [r3, #20]
 800f308:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef rtc_time;
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800f30a:	4b39      	ldr	r3, [pc, #228]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f30c:	4a39      	ldr	r2, [pc, #228]	; (800f3f4 <MX_RTC_Init+0x104>)
 800f30e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 800f310:	4b37      	ldr	r3, [pc, #220]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f312:	227f      	movs	r2, #127	; 0x7f
 800f314:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f316:	4b36      	ldr	r3, [pc, #216]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f318:	2200      	movs	r2, #0
 800f31a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800f31c:	4b34      	ldr	r3, [pc, #208]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f31e:	2200      	movs	r2, #0
 800f320:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f322:	4b33      	ldr	r3, [pc, #204]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f324:	2200      	movs	r2, #0
 800f326:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f328:	4b31      	ldr	r3, [pc, #196]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f32a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f32e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800f330:	4b2f      	ldr	r3, [pc, #188]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f332:	2200      	movs	r2, #0
 800f334:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_MIX;
 800f336:	4b2e      	ldr	r3, [pc, #184]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f33c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800f33e:	482c      	ldr	r0, [pc, #176]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f340:	f009 fab4 	bl	80188ac <HAL_RTC_Init>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800f34a:	f000 fa55 	bl	800f7f8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800f34e:	2300      	movs	r3, #0
 800f350:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800f352:	2300      	movs	r3, #0
 800f354:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800f356:	2300      	movs	r3, #0
 800f358:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800f35a:	2300      	movs	r3, #0
 800f35c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800f35e:	f107 031c 	add.w	r3, r7, #28
 800f362:	4619      	mov	r1, r3
 800f364:	4822      	ldr	r0, [pc, #136]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f366:	f009 ff67 	bl	8019238 <HAL_RTCEx_PrivilegeModeSet>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d001      	beq.n	800f374 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800f370:	f000 fa42 	bl	800f7f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800f374:	481e      	ldr	r0, [pc, #120]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f376:	f009 ff21 	bl	80191bc <HAL_RTCEx_SetSSRU_IT>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d001      	beq.n	800f384 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800f380:	f000 fa3a 	bl	800f7f8 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  // Set date/time to something arbitrary in the event GNSS can't resolve time
  // in the first window
  rtc_date.Date = 2;
 800f384:	2302      	movs	r3, #2
 800f386:	76bb      	strb	r3, [r7, #26]
  rtc_date.Month = 2;
 800f388:	2302      	movs	r3, #2
 800f38a:	767b      	strb	r3, [r7, #25]
  rtc_date.WeekDay = RTC_WEEKDAY_MONDAY;
 800f38c:	2301      	movs	r3, #1
 800f38e:	763b      	strb	r3, [r7, #24]
  rtc_date.Year = 23;
 800f390:	2317      	movs	r3, #23
 800f392:	76fb      	strb	r3, [r7, #27]
  rtc_time.Hours = 2;
 800f394:	2302      	movs	r3, #2
 800f396:	713b      	strb	r3, [r7, #4]
  rtc_time.Minutes = 2;
 800f398:	2302      	movs	r3, #2
 800f39a:	717b      	strb	r3, [r7, #5]
  rtc_time.Seconds = 2;
 800f39c:	2302      	movs	r3, #2
 800f39e:	71bb      	strb	r3, [r7, #6]
  rtc_time.SecondFraction = 0;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	60fb      	str	r3, [r7, #12]

  if (HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN) != HAL_OK) {
 800f3a4:	1d3b      	adds	r3, r7, #4
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	4811      	ldr	r0, [pc, #68]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f3ac:	f009 faf8 	bl	80189a0 <HAL_RTC_SetTime>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <MX_RTC_Init+0xca>
	  Error_Handler();
 800f3b6:	f000 fa1f 	bl	800f7f8 <Error_Handler>
  }
  if (HAL_RTC_SetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN) != HAL_OK) {
 800f3ba:	f107 0318 	add.w	r3, r7, #24
 800f3be:	2200      	movs	r2, #0
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	480b      	ldr	r0, [pc, #44]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f3c4:	f009 fbea 	bl	8018b9c <HAL_RTC_SetDate>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <MX_RTC_Init+0xe2>
	  Error_Handler();
 800f3ce:	f000 fa13 	bl	800f7f8 <Error_Handler>
  }
  // Enable RTC low power calibration
  if (HAL_RTCEx_SetLowPowerCalib(&hrtc, RTC_LPCAL_SET) != HAL_OK)
 800f3d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f3d6:	4806      	ldr	r0, [pc, #24]	; (800f3f0 <MX_RTC_Init+0x100>)
 800f3d8:	f009 feba 	bl	8019150 <HAL_RTCEx_SetLowPowerCalib>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d001      	beq.n	800f3e6 <MX_RTC_Init+0xf6>
  {
	  Error_Handler();
 800f3e2:	f000 fa09 	bl	800f7f8 <Error_Handler>
  }

  /* USER CODE END RTC_Init 2 */

}
 800f3e6:	bf00      	nop
 800f3e8:	3738      	adds	r7, #56	; 0x38
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	200b67ec 	.word	0x200b67ec
 800f3f4:	46007800 	.word	0x46007800

0800f3f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800f3fc:	4b10      	ldr	r3, [pc, #64]	; (800f440 <MX_TIM16_Init+0x48>)
 800f3fe:	4a11      	ldr	r2, [pc, #68]	; (800f444 <MX_TIM16_Init+0x4c>)
 800f400:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 12000;
 800f402:	4b0f      	ldr	r3, [pc, #60]	; (800f440 <MX_TIM16_Init+0x48>)
 800f404:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800f408:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f40a:	4b0d      	ldr	r3, [pc, #52]	; (800f440 <MX_TIM16_Init+0x48>)
 800f40c:	2200      	movs	r2, #0
 800f40e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 59999;
 800f410:	4b0b      	ldr	r3, [pc, #44]	; (800f440 <MX_TIM16_Init+0x48>)
 800f412:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f416:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f418:	4b09      	ldr	r3, [pc, #36]	; (800f440 <MX_TIM16_Init+0x48>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f41e:	4b08      	ldr	r3, [pc, #32]	; (800f440 <MX_TIM16_Init+0x48>)
 800f420:	2200      	movs	r2, #0
 800f422:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f424:	4b06      	ldr	r3, [pc, #24]	; (800f440 <MX_TIM16_Init+0x48>)
 800f426:	2200      	movs	r2, #0
 800f428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f42a:	4805      	ldr	r0, [pc, #20]	; (800f440 <MX_TIM16_Init+0x48>)
 800f42c:	f009 ff32 	bl	8019294 <HAL_TIM_Base_Init>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800f436:	f000 f9df 	bl	800f7f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800f43a:	bf00      	nop
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	200b681c 	.word	0x200b681c
 800f444:	40014400 	.word	0x40014400

0800f448 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800f44c:	4b10      	ldr	r3, [pc, #64]	; (800f490 <MX_TIM17_Init+0x48>)
 800f44e:	4a11      	ldr	r2, [pc, #68]	; (800f494 <MX_TIM17_Init+0x4c>)
 800f450:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 12000;
 800f452:	4b0f      	ldr	r3, [pc, #60]	; (800f490 <MX_TIM17_Init+0x48>)
 800f454:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800f458:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f45a:	4b0d      	ldr	r3, [pc, #52]	; (800f490 <MX_TIM17_Init+0x48>)
 800f45c:	2200      	movs	r2, #0
 800f45e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 59999;
 800f460:	4b0b      	ldr	r3, [pc, #44]	; (800f490 <MX_TIM17_Init+0x48>)
 800f462:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f466:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f468:	4b09      	ldr	r3, [pc, #36]	; (800f490 <MX_TIM17_Init+0x48>)
 800f46a:	2200      	movs	r2, #0
 800f46c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 10;
 800f46e:	4b08      	ldr	r3, [pc, #32]	; (800f490 <MX_TIM17_Init+0x48>)
 800f470:	220a      	movs	r2, #10
 800f472:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f474:	4b06      	ldr	r3, [pc, #24]	; (800f490 <MX_TIM17_Init+0x48>)
 800f476:	2200      	movs	r2, #0
 800f478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800f47a:	4805      	ldr	r0, [pc, #20]	; (800f490 <MX_TIM17_Init+0x48>)
 800f47c:	f009 ff0a 	bl	8019294 <HAL_TIM_Base_Init>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d001      	beq.n	800f48a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800f486:	f000 f9b7 	bl	800f7f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800f48a:	bf00      	nop
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	200b68e8 	.word	0x200b68e8
 800f494:	40014800 	.word	0x40014800

0800f498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b08e      	sub	sp, #56	; 0x38
 800f49c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f49e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	601a      	str	r2, [r3, #0]
 800f4a6:	605a      	str	r2, [r3, #4]
 800f4a8:	609a      	str	r2, [r3, #8]
 800f4aa:	60da      	str	r2, [r3, #12]
 800f4ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f4ae:	4bc0      	ldr	r3, [pc, #768]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4b4:	4abe      	ldr	r2, [pc, #760]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4b6:	f043 0310 	orr.w	r3, r3, #16
 800f4ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f4be:	4bbc      	ldr	r3, [pc, #752]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4c4:	f003 0310 	and.w	r3, r3, #16
 800f4c8:	623b      	str	r3, [r7, #32]
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f4cc:	4bb8      	ldr	r3, [pc, #736]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4d2:	4ab7      	ldr	r2, [pc, #732]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4d4:	f043 0304 	orr.w	r3, r3, #4
 800f4d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f4dc:	4bb4      	ldr	r3, [pc, #720]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4e2:	f003 0304 	and.w	r3, r3, #4
 800f4e6:	61fb      	str	r3, [r7, #28]
 800f4e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800f4ea:	4bb1      	ldr	r3, [pc, #708]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4f0:	4aaf      	ldr	r2, [pc, #700]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4f2:	f043 0320 	orr.w	r3, r3, #32
 800f4f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f4fa:	4bad      	ldr	r3, [pc, #692]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f4fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f500:	f003 0320 	and.w	r3, r3, #32
 800f504:	61bb      	str	r3, [r7, #24]
 800f506:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f508:	4ba9      	ldr	r3, [pc, #676]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f50e:	4aa8      	ldr	r2, [pc, #672]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f514:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f518:	4ba5      	ldr	r3, [pc, #660]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f522:	617b      	str	r3, [r7, #20]
 800f524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f526:	4ba2      	ldr	r3, [pc, #648]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f52c:	4aa0      	ldr	r2, [pc, #640]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f52e:	f043 0301 	orr.w	r3, r3, #1
 800f532:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f536:	4b9e      	ldr	r3, [pc, #632]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f53c:	f003 0301 	and.w	r3, r3, #1
 800f540:	613b      	str	r3, [r7, #16]
 800f542:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f544:	4b9a      	ldr	r3, [pc, #616]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f54a:	4a99      	ldr	r2, [pc, #612]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f54c:	f043 0302 	orr.w	r3, r3, #2
 800f550:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f554:	4b96      	ldr	r3, [pc, #600]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f55a:	f003 0302 	and.w	r3, r3, #2
 800f55e:	60fb      	str	r3, [r7, #12]
 800f560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f562:	4b93      	ldr	r3, [pc, #588]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f568:	4a91      	ldr	r2, [pc, #580]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f56e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f572:	4b8f      	ldr	r3, [pc, #572]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f57c:	60bb      	str	r3, [r7, #8]
 800f57e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f580:	4b8b      	ldr	r3, [pc, #556]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f586:	4a8a      	ldr	r2, [pc, #552]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f588:	f043 0308 	orr.w	r3, r3, #8
 800f58c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f590:	4b87      	ldr	r3, [pc, #540]	; (800f7b0 <MX_GPIO_Init+0x318>)
 800f592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f596:	f003 0308 	and.w	r3, r3, #8
 800f59a:	607b      	str	r3, [r7, #4]
 800f59c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, EXT_LED_RED_Pin|EXT_LED_GREEN_Pin|BUS_5V_FET_Pin, GPIO_PIN_RESET);
 800f59e:	2200      	movs	r2, #0
 800f5a0:	2107      	movs	r1, #7
 800f5a2:	4884      	ldr	r0, [pc, #528]	; (800f7b4 <MX_GPIO_Init+0x31c>)
 800f5a4:	f004 fe14 	bl	80141d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_RED_Pin|CT_FET_Pin|GNSS_FET_Pin|GNSS_EXTINT_Pin
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f241 611c 	movw	r1, #5660	; 0x161c
 800f5ae:	4882      	ldr	r0, [pc, #520]	; (800f7b8 <MX_GPIO_Init+0x320>)
 800f5b0:	f004 fe0e 	bl	80141d0 <HAL_GPIO_WritePin>
                          |IMU_INT_Pin|IMU_nRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	2180      	movs	r1, #128	; 0x80
 800f5b8:	4880      	ldr	r0, [pc, #512]	; (800f7bc <MX_GPIO_Init+0x324>)
 800f5ba:	f004 fe09 	bl	80141d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IMU_FET_Pin|IRIDIUM_FET_Pin|RF_SWITCH_VCTL_Pin|RF_SWITCH_EN_Pin
 800f5be:	2200      	movs	r2, #0
 800f5c0:	219b      	movs	r1, #155	; 0x9b
 800f5c2:	487f      	ldr	r0, [pc, #508]	; (800f7c0 <MX_GPIO_Init+0x328>)
 800f5c4:	f004 fe04 	bl	80141d0 <HAL_GPIO_WritePin>
                          |IRIDIUM_OnOff_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	21a0      	movs	r1, #160	; 0xa0
 800f5cc:	487d      	ldr	r0, [pc, #500]	; (800f7c4 <MX_GPIO_Init+0x32c>)
 800f5ce:	f004 fdff 	bl	80141d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800f5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5d8:	2303      	movs	r3, #3
 800f5da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f5e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	4878      	ldr	r0, [pc, #480]	; (800f7c8 <MX_GPIO_Init+0x330>)
 800f5e8:	f004 fb3c 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800f5ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f5f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f5f2:	4b76      	ldr	r3, [pc, #472]	; (800f7cc <MX_GPIO_Init+0x334>)
 800f5f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800f5fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5fe:	4619      	mov	r1, r3
 800f600:	486e      	ldr	r0, [pc, #440]	; (800f7bc <MX_GPIO_Init+0x324>)
 800f602:	f004 fb2f 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_LED_RED_Pin EXT_LED_GREEN_Pin BUS_5V_FET_Pin */
  GPIO_InitStruct.Pin = EXT_LED_RED_Pin|EXT_LED_GREEN_Pin|BUS_5V_FET_Pin;
 800f606:	2307      	movs	r3, #7
 800f608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f60a:	2301      	movs	r3, #1
 800f60c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f60e:	2300      	movs	r3, #0
 800f610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f612:	2300      	movs	r3, #0
 800f614:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f61a:	4619      	mov	r1, r3
 800f61c:	4865      	ldr	r0, [pc, #404]	; (800f7b4 <MX_GPIO_Init+0x31c>)
 800f61e:	f004 fb21 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF6
                           PF7 PF8 PF9 PF10
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800f622:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800f626:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f628:	2303      	movs	r3, #3
 800f62a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f62c:	2300      	movs	r3, #0
 800f62e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f634:	4619      	mov	r1, r3
 800f636:	485f      	ldr	r0, [pc, #380]	; (800f7b4 <MX_GPIO_Init+0x31c>)
 800f638:	f004 fb14 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800f63c:	230b      	movs	r3, #11
 800f63e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f640:	2303      	movs	r3, #3
 800f642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f644:	2300      	movs	r3, #0
 800f646:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f64c:	4619      	mov	r1, r3
 800f64e:	4860      	ldr	r0, [pc, #384]	; (800f7d0 <MX_GPIO_Init+0x338>)
 800f650:	f004 fb08 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800f654:	f240 334f 	movw	r3, #847	; 0x34f
 800f658:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f65a:	2303      	movs	r3, #3
 800f65c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f65e:	2300      	movs	r3, #0
 800f660:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f666:	4619      	mov	r1, r3
 800f668:	4854      	ldr	r0, [pc, #336]	; (800f7bc <MX_GPIO_Init+0x324>)
 800f66a:	f004 fafb 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA7 PA8 UCPD1_CC1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800f66e:	f248 13b3 	movw	r3, #33203	; 0x81b3
 800f672:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|UCPD1_CC1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f674:	2303      	movs	r3, #3
 800f676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f678:	2300      	movs	r3, #0
 800f67a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f67c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f680:	4619      	mov	r1, r3
 800f682:	4854      	ldr	r0, [pc, #336]	; (800f7d4 <MX_GPIO_Init+0x33c>)
 800f684:	f004 faee 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 UCPD1_CC2_Pin PB4
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800f688:	f64a 7357 	movw	r3, #44887	; 0xaf57
 800f68c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_13|UCPD1_CC2_Pin|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f68e:	2303      	movs	r3, #3
 800f690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f692:	2300      	movs	r3, #0
 800f694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f69a:	4619      	mov	r1, r3
 800f69c:	4849      	ldr	r0, [pc, #292]	; (800f7c4 <MX_GPIO_Init+0x32c>)
 800f69e:	f004 fae1 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG5 PG6
                           PG7 PG8 PG13 PG14
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 800f6a2:	f24e 13e3 	movw	r3, #57827	; 0xe1e3
 800f6a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f6a8:	2303      	movs	r3, #3
 800f6aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f6b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4840      	ldr	r0, [pc, #256]	; (800f7b8 <MX_GPIO_Init+0x320>)
 800f6b8:	f004 fad4 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800f6bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f6c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800f6ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	483c      	ldr	r0, [pc, #240]	; (800f7c4 <MX_GPIO_Init+0x32c>)
 800f6d2:	f004 fac7 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800f6d6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800f6da:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f6e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	4835      	ldr	r0, [pc, #212]	; (800f7c0 <MX_GPIO_Init+0x328>)
 800f6ec:	f004 faba 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin CT_FET_Pin GNSS_FET_Pin GNSS_EXTINT_Pin
                           IMU_INT_Pin IMU_nRESET_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|CT_FET_Pin|GNSS_FET_Pin|GNSS_EXTINT_Pin
 800f6f0:	f241 631c 	movw	r3, #5660	; 0x161c
 800f6f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |IMU_INT_Pin|IMU_nRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6fe:	2300      	movs	r3, #0
 800f700:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f706:	4619      	mov	r1, r3
 800f708:	482b      	ldr	r0, [pc, #172]	; (800f7b8 <MX_GPIO_Init+0x320>)
 800f70a:	f004 faab 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800f70e:	2380      	movs	r3, #128	; 0x80
 800f710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f712:	2301      	movs	r3, #1
 800f714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f716:	2301      	movs	r3, #1
 800f718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f71a:	2302      	movs	r3, #2
 800f71c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800f71e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f722:	4619      	mov	r1, r3
 800f724:	4825      	ldr	r0, [pc, #148]	; (800f7bc <MX_GPIO_Init+0x324>)
 800f726:	f004 fa9d 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_TX_Pin USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800f72a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f72e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f730:	2302      	movs	r3, #2
 800f732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f734:	2302      	movs	r3, #2
 800f736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f738:	2303      	movs	r3, #3
 800f73a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f73c:	2307      	movs	r3, #7
 800f73e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f744:	4619      	mov	r1, r3
 800f746:	4823      	ldr	r0, [pc, #140]	; (800f7d4 <MX_GPIO_Init+0x33c>)
 800f748:	f004 fa8c 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800f74c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f752:	2302      	movs	r3, #2
 800f754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f756:	2300      	movs	r3, #0
 800f758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f75a:	2303      	movs	r3, #3
 800f75c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800f75e:	230a      	movs	r3, #10
 800f760:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f766:	4619      	mov	r1, r3
 800f768:	481a      	ldr	r0, [pc, #104]	; (800f7d4 <MX_GPIO_Init+0x33c>)
 800f76a:	f004 fa7b 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_FET_Pin IRIDIUM_FET_Pin RF_SWITCH_VCTL_Pin RF_SWITCH_EN_Pin
                           IRIDIUM_OnOff_Pin */
  GPIO_InitStruct.Pin = IMU_FET_Pin|IRIDIUM_FET_Pin|RF_SWITCH_VCTL_Pin|RF_SWITCH_EN_Pin
 800f76e:	239b      	movs	r3, #155	; 0x9b
 800f770:	627b      	str	r3, [r7, #36]	; 0x24
                          |IRIDIUM_OnOff_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f772:	2301      	movs	r3, #1
 800f774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f776:	2300      	movs	r3, #0
 800f778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f77a:	2300      	movs	r3, #0
 800f77c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f782:	4619      	mov	r1, r3
 800f784:	480e      	ldr	r0, [pc, #56]	; (800f7c0 <MX_GPIO_Init+0x328>)
 800f786:	f004 fa6d 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRIDIUM_NetAv_Pin IRIDIUM_RI_Pin */
  GPIO_InitStruct.Pin = IRIDIUM_NetAv_Pin|IRIDIUM_RI_Pin;
 800f78a:	2360      	movs	r3, #96	; 0x60
 800f78c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f78e:	2300      	movs	r3, #0
 800f790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f792:	2300      	movs	r3, #0
 800f794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f79a:	4619      	mov	r1, r3
 800f79c:	4808      	ldr	r0, [pc, #32]	; (800f7c0 <MX_GPIO_Init+0x328>)
 800f79e:	f004 fa61 	bl	8013c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 800f7a2:	23a0      	movs	r3, #160	; 0xa0
 800f7a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	e014      	b.n	800f7d8 <MX_GPIO_Init+0x340>
 800f7ae:	bf00      	nop
 800f7b0:	46020c00 	.word	0x46020c00
 800f7b4:	42021400 	.word	0x42021400
 800f7b8:	42021800 	.word	0x42021800
 800f7bc:	42020800 	.word	0x42020800
 800f7c0:	42020c00 	.word	0x42020c00
 800f7c4:	42020400 	.word	0x42020400
 800f7c8:	42021000 	.word	0x42021000
 800f7cc:	10210000 	.word	0x10210000
 800f7d0:	42021c00 	.word	0x42021c00
 800f7d4:	42020000 	.word	0x42020000
 800f7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f7de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	4803      	ldr	r0, [pc, #12]	; (800f7f4 <MX_GPIO_Init+0x35c>)
 800f7e6:	f004 fa3d 	bl	8013c64 <HAL_GPIO_Init>

}
 800f7ea:	bf00      	nop
 800f7ec:	3738      	adds	r7, #56	; 0x38
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	42020400 	.word	0x42020400

0800f7f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f7fc:	b672      	cpsid	i
}
 800f7fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 800f800:	f002 fb51 	bl	8011ea6 <HAL_NVIC_SystemReset>
  while (1)
  {
	  shut_it_all_down();
 800f804:	f7ff f840 	bl	800e888 <shut_it_all_down>
	  HAL_NVIC_SystemReset();
 800f808:	f002 fb4d 	bl	8011ea6 <HAL_NVIC_SystemReset>
	  shut_it_all_down();
 800f80c:	e7fa      	b.n	800f804 <Error_Handler+0xc>
	...

0800f810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800f816:	4b1a      	ldr	r3, [pc, #104]	; (800f880 <HAL_MspInit+0x70>)
 800f818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f81c:	4a18      	ldr	r2, [pc, #96]	; (800f880 <HAL_MspInit+0x70>)
 800f81e:	f043 0304 	orr.w	r3, r3, #4
 800f822:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800f826:	4b16      	ldr	r3, [pc, #88]	; (800f880 <HAL_MspInit+0x70>)
 800f828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f82c:	f003 0304 	and.w	r3, r3, #4
 800f830:	607b      	str	r3, [r7, #4]
 800f832:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800f834:	2004      	movs	r0, #4
 800f836:	f002 faf5 	bl	8011e24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* IWDG_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(IWDG_IRQn, 0, 0);
 800f83a:	2200      	movs	r2, #0
 800f83c:	2100      	movs	r1, #0
 800f83e:	201b      	movs	r0, #27
 800f840:	f002 fafb 	bl	8011e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(IWDG_IRQn);
 800f844:	201b      	movs	r0, #27
 800f846:	f002 fb12 	bl	8011e6e <HAL_NVIC_EnableIRQ>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800f84a:	4b0d      	ldr	r3, [pc, #52]	; (800f880 <HAL_MspInit+0x70>)
 800f84c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f850:	4a0b      	ldr	r2, [pc, #44]	; (800f880 <HAL_MspInit+0x70>)
 800f852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f856:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800f85a:	4b09      	ldr	r3, [pc, #36]	; (800f880 <HAL_MspInit+0x70>)
 800f85c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f864:	603b      	str	r3, [r7, #0]
 800f866:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800f868:	2000      	movs	r0, #0
 800f86a:	f000 fe97 	bl	801059c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800f86e:	f000 febd 	bl	80105ec <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800f872:	2000      	movs	r0, #0
 800f874:	f000 fea6 	bl	80105c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f878:	bf00      	nop
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	46020c00 	.word	0x46020c00

0800f884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b0b6      	sub	sp, #216	; 0xd8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f88c:	f107 0310 	add.w	r3, r7, #16
 800f890:	22c8      	movs	r2, #200	; 0xc8
 800f892:	2100      	movs	r1, #0
 800f894:	4618      	mov	r0, r3
 800f896:	f010 fe6c 	bl	8020572 <memset>
  if(hadc->Instance==ADC4)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4a15      	ldr	r2, [pc, #84]	; (800f8f4 <HAL_ADC_MspInit+0x70>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d122      	bne.n	800f8ea <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800f8a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f8a8:	f04f 0300 	mov.w	r3, #0
 800f8ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 800f8b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f8b8:	f107 0310 	add.w	r3, r7, #16
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f006 fb9b 	bl	8015ff8 <HAL_RCCEx_PeriphCLKConfig>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d001      	beq.n	800f8cc <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 800f8c8:	f7ff ff96 	bl	800f7f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 800f8cc:	4b0a      	ldr	r3, [pc, #40]	; (800f8f8 <HAL_ADC_MspInit+0x74>)
 800f8ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8d2:	4a09      	ldr	r2, [pc, #36]	; (800f8f8 <HAL_ADC_MspInit+0x74>)
 800f8d4:	f043 0320 	orr.w	r3, r3, #32
 800f8d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800f8dc:	4b06      	ldr	r3, [pc, #24]	; (800f8f8 <HAL_ADC_MspInit+0x74>)
 800f8de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8e2:	f003 0320 	and.w	r3, r3, #32
 800f8e6:	60fb      	str	r3, [r7, #12]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800f8ea:	bf00      	nop
 800f8ec:	37d8      	adds	r7, #216	; 0xd8
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	46021000 	.word	0x46021000
 800f8f8:	46020c00 	.word	0x46020c00

0800f8fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b0c2      	sub	sp, #264	; 0x108
 800f900:	af00      	add	r7, sp, #0
 800f902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f90a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f90c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800f910:	2200      	movs	r2, #0
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	605a      	str	r2, [r3, #4]
 800f916:	609a      	str	r2, [r3, #8]
 800f918:	60da      	str	r2, [r3, #12]
 800f91a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f91c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f920:	22c8      	movs	r2, #200	; 0xc8
 800f922:	2100      	movs	r1, #0
 800f924:	4618      	mov	r0, r3
 800f926:	f010 fe24 	bl	8020572 <memset>
  if(huart->Instance==LPUART1)
 800f92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f92e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4a9d      	ldr	r2, [pc, #628]	; (800fbac <HAL_UART_MspInit+0x2b0>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	f040 8099 	bne.w	800fa70 <HAL_UART_MspInit+0x174>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800f93e:	f04f 0220 	mov.w	r2, #32
 800f942:	f04f 0300 	mov.w	r3, #0
 800f946:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 800f94a:	2301      	movs	r3, #1
 800f94c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f954:	4618      	mov	r0, r3
 800f956:	f006 fb4f 	bl	8015ff8 <HAL_RCCEx_PeriphCLKConfig>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d001      	beq.n	800f964 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 800f960:	f7ff ff4a 	bl	800f7f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800f964:	4b92      	ldr	r3, [pc, #584]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800f966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f96a:	4a91      	ldr	r2, [pc, #580]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800f96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f970:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800f974:	4b8e      	ldr	r3, [pc, #568]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800f976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f97e:	627b      	str	r3, [r7, #36]	; 0x24
 800f980:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f982:	4b8b      	ldr	r3, [pc, #556]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800f984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f988:	4a89      	ldr	r2, [pc, #548]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800f98a:	f043 0301 	orr.w	r3, r3, #1
 800f98e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f992:	4b87      	ldr	r3, [pc, #540]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800f994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f998:	f003 0301 	and.w	r3, r3, #1
 800f99c:	623b      	str	r3, [r7, #32]
 800f99e:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GNSS_UART_TX_Pin|GNSS_UART_RX_Pin;
 800f9a0:	230c      	movs	r3, #12
 800f9a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9a6:	2302      	movs	r3, #2
 800f9a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800f9b8:	2308      	movs	r3, #8
 800f9ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9be:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	487b      	ldr	r0, [pc, #492]	; (800fbb4 <HAL_UART_MspInit+0x2b8>)
 800f9c6:	f004 f94d 	bl	8013c64 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* GPDMA1_REQUEST_LPUART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800f9ca:	4b7b      	ldr	r3, [pc, #492]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9cc:	4a7b      	ldr	r2, [pc, #492]	; (800fbbc <HAL_UART_MspInit+0x2c0>)
 800f9ce:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_LPUART1_RX;
 800f9d0:	4b79      	ldr	r3, [pc, #484]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9d2:	2222      	movs	r2, #34	; 0x22
 800f9d4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800f9d6:	4b78      	ldr	r3, [pc, #480]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f9dc:	4b76      	ldr	r3, [pc, #472]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 800f9e2:	4b75      	ldr	r3, [pc, #468]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 800f9e8:	4b73      	ldr	r3, [pc, #460]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f9ee:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800f9f0:	4b71      	ldr	r3, [pc, #452]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800f9f6:	4b70      	ldr	r3, [pc, #448]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800f9fc:	4b6e      	ldr	r3, [pc, #440]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800f9fe:	2200      	movs	r2, #0
 800fa00:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 800fa02:	4b6d      	ldr	r3, [pc, #436]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa04:	2201      	movs	r2, #1
 800fa06:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800fa08:	4b6b      	ldr	r3, [pc, #428]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800fa0e:	4b6a      	ldr	r3, [pc, #424]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa10:	2200      	movs	r2, #0
 800fa12:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800fa14:	4b68      	ldr	r3, [pc, #416]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa16:	2200      	movs	r2, #0
 800fa18:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800fa1a:	4b67      	ldr	r3, [pc, #412]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800fa20:	4865      	ldr	r0, [pc, #404]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa22:	f002 fa45 	bl	8011eb0 <HAL_DMA_Init>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d001      	beq.n	800fa30 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 800fa2c:	f7ff fee4 	bl	800f7f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel0);
 800fa30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4a5f      	ldr	r2, [pc, #380]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa3c:	67da      	str	r2, [r3, #124]	; 0x7c
 800fa3e:	4a5e      	ldr	r2, [pc, #376]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_PRIV) != HAL_OK)
 800fa4c:	2111      	movs	r1, #17
 800fa4e:	485a      	ldr	r0, [pc, #360]	; (800fbb8 <HAL_UART_MspInit+0x2bc>)
 800fa50:	f002 febf 	bl	80127d2 <HAL_DMA_ConfigChannelAttributes>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d001      	beq.n	800fa5e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800fa5a:	f7ff fecd 	bl	800f7f8 <Error_Handler>
    }

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800fa5e:	2200      	movs	r2, #0
 800fa60:	2100      	movs	r1, #0
 800fa62:	2042      	movs	r0, #66	; 0x42
 800fa64:	f002 f9e9 	bl	8011e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800fa68:	2042      	movs	r0, #66	; 0x42
 800fa6a:	f002 fa00 	bl	8011e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800fa6e:	e1bb      	b.n	800fde8 <HAL_UART_MspInit+0x4ec>
  else if(huart->Instance==UART4)
 800fa70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4a50      	ldr	r2, [pc, #320]	; (800fbc0 <HAL_UART_MspInit+0x2c4>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	f040 80a6 	bne.w	800fbd0 <HAL_UART_MspInit+0x2d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800fa84:	f04f 0208 	mov.w	r2, #8
 800fa88:	f04f 0300 	mov.w	r3, #0
 800fa8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800fa90:	2340      	movs	r3, #64	; 0x40
 800fa92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fa96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f006 faac 	bl	8015ff8 <HAL_RCCEx_PeriphCLKConfig>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 800faa6:	f7ff fea7 	bl	800f7f8 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800faaa:	4b41      	ldr	r3, [pc, #260]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800faac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fab0:	4a3f      	ldr	r2, [pc, #252]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800fab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fab6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800faba:	4b3d      	ldr	r3, [pc, #244]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800fabc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fac4:	61fb      	str	r3, [r7, #28]
 800fac6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fac8:	4b39      	ldr	r3, [pc, #228]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800faca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800face:	4a38      	ldr	r2, [pc, #224]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800fad0:	f043 0304 	orr.w	r3, r3, #4
 800fad4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800fad8:	4b35      	ldr	r3, [pc, #212]	; (800fbb0 <HAL_UART_MspInit+0x2b4>)
 800fada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fade:	f003 0304 	and.w	r3, r3, #4
 800fae2:	61bb      	str	r3, [r7, #24]
 800fae4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CT_UART_TX_Pin|CT_UART_RX_Pin;
 800fae6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800faea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800faee:	2302      	movs	r3, #2
 800faf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800faf4:	2300      	movs	r3, #0
 800faf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fafa:	2300      	movs	r3, #0
 800fafc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800fb00:	2308      	movs	r3, #8
 800fb02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fb06:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	482d      	ldr	r0, [pc, #180]	; (800fbc4 <HAL_UART_MspInit+0x2c8>)
 800fb0e:	f004 f8a9 	bl	8013c64 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800fb12:	4b2d      	ldr	r3, [pc, #180]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb14:	4a2d      	ldr	r2, [pc, #180]	; (800fbcc <HAL_UART_MspInit+0x2d0>)
 800fb16:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_UART4_RX;
 800fb18:	4b2b      	ldr	r3, [pc, #172]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb1a:	221e      	movs	r2, #30
 800fb1c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800fb1e:	4b2a      	ldr	r3, [pc, #168]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fb24:	4b28      	ldr	r3, [pc, #160]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb26:	2200      	movs	r2, #0
 800fb28:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 800fb2a:	4b27      	ldr	r3, [pc, #156]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 800fb30:	4b25      	ldr	r3, [pc, #148]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fb36:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800fb38:	4b23      	ldr	r3, [pc, #140]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800fb3e:	4b22      	ldr	r3, [pc, #136]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb40:	2200      	movs	r2, #0
 800fb42:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800fb44:	4b20      	ldr	r3, [pc, #128]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800fb4a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 800fb4c:	4b1e      	ldr	r3, [pc, #120]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb4e:	2201      	movs	r2, #1
 800fb50:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 800fb52:	4b1d      	ldr	r3, [pc, #116]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb54:	2201      	movs	r2, #1
 800fb56:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800fb58:	4b1b      	ldr	r3, [pc, #108]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800fb5e:	4b1a      	ldr	r3, [pc, #104]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 800fb64:	4b18      	ldr	r3, [pc, #96]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800fb6a:	4817      	ldr	r0, [pc, #92]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb6c:	f002 f9a0 	bl	8011eb0 <HAL_DMA_Init>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <HAL_UART_MspInit+0x27e>
      Error_Handler();
 800fb76:	f7ff fe3f 	bl	800f7f8 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel1);
 800fb7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a10      	ldr	r2, [pc, #64]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb86:	67da      	str	r2, [r3, #124]	; 0x7c
 800fb88:	4a0f      	ldr	r2, [pc, #60]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800fb96:	2110      	movs	r1, #16
 800fb98:	480b      	ldr	r0, [pc, #44]	; (800fbc8 <HAL_UART_MspInit+0x2cc>)
 800fb9a:	f002 fe1a 	bl	80127d2 <HAL_DMA_ConfigChannelAttributes>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	f000 8121 	beq.w	800fde8 <HAL_UART_MspInit+0x4ec>
      Error_Handler();
 800fba6:	f7ff fe27 	bl	800f7f8 <Error_Handler>
}
 800fbaa:	e11d      	b.n	800fde8 <HAL_UART_MspInit+0x4ec>
 800fbac:	46002400 	.word	0x46002400
 800fbb0:	46020c00 	.word	0x46020c00
 800fbb4:	42020000 	.word	0x42020000
 800fbb8:	200b660c 	.word	0x200b660c
 800fbbc:	40020050 	.word	0x40020050
 800fbc0:	40004c00 	.word	0x40004c00
 800fbc4:	42020800 	.word	0x42020800
 800fbc8:	200b6684 	.word	0x200b6684
 800fbcc:	400200d0 	.word	0x400200d0
  else if(huart->Instance==UART5)
 800fbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a85      	ldr	r2, [pc, #532]	; (800fdf4 <HAL_UART_MspInit+0x4f8>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	f040 8102 	bne.w	800fde8 <HAL_UART_MspInit+0x4ec>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800fbe4:	f04f 0210 	mov.w	r2, #16
 800fbe8:	f04f 0300 	mov.w	r3, #0
 800fbec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_SYSCLK;
 800fbf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fbf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f006 f9fb 	bl	8015ff8 <HAL_RCCEx_PeriphCLKConfig>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d001      	beq.n	800fc0c <HAL_UART_MspInit+0x310>
      Error_Handler();
 800fc08:	f7ff fdf6 	bl	800f7f8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800fc0c:	4b7a      	ldr	r3, [pc, #488]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fc12:	4a79      	ldr	r2, [pc, #484]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc18:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800fc1c:	4b76      	ldr	r3, [pc, #472]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fc22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fc26:	617b      	str	r3, [r7, #20]
 800fc28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fc2a:	4b73      	ldr	r3, [pc, #460]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc30:	4a71      	ldr	r2, [pc, #452]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc32:	f043 0304 	orr.w	r3, r3, #4
 800fc36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800fc3a:	4b6f      	ldr	r3, [pc, #444]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc40:	f003 0304 	and.w	r3, r3, #4
 800fc44:	613b      	str	r3, [r7, #16]
 800fc46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800fc48:	4b6b      	ldr	r3, [pc, #428]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc4e:	4a6a      	ldr	r2, [pc, #424]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc50:	f043 0308 	orr.w	r3, r3, #8
 800fc54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800fc58:	4b67      	ldr	r3, [pc, #412]	; (800fdf8 <HAL_UART_MspInit+0x4fc>)
 800fc5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc5e:	f003 0308 	and.w	r3, r3, #8
 800fc62:	60fb      	str	r3, [r7, #12]
 800fc64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IRIDIUM_UART_TX_Pin;
 800fc66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc6e:	2302      	movs	r3, #2
 800fc70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc74:	2300      	movs	r3, #0
 800fc76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800fc80:	2308      	movs	r3, #8
 800fc82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(IRIDIUM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 800fc86:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	485b      	ldr	r0, [pc, #364]	; (800fdfc <HAL_UART_MspInit+0x500>)
 800fc8e:	f003 ffe9 	bl	8013c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IRIDIUM_UART_RX_Pin;
 800fc92:	2304      	movs	r3, #4
 800fc94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc98:	2302      	movs	r3, #2
 800fc9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fca4:	2300      	movs	r3, #0
 800fca6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800fcaa:	2308      	movs	r3, #8
 800fcac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(IRIDIUM_UART_RX_GPIO_Port, &GPIO_InitStruct);
 800fcb0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	4852      	ldr	r0, [pc, #328]	; (800fe00 <HAL_UART_MspInit+0x504>)
 800fcb8:	f003 ffd4 	bl	8013c64 <HAL_GPIO_Init>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800fcbc:	4b51      	ldr	r3, [pc, #324]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcbe:	4a52      	ldr	r2, [pc, #328]	; (800fe08 <HAL_UART_MspInit+0x50c>)
 800fcc0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART5_RX;
 800fcc2:	4b50      	ldr	r3, [pc, #320]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcc4:	2220      	movs	r2, #32
 800fcc6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800fcc8:	4b4e      	ldr	r3, [pc, #312]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fcce:	4b4d      	ldr	r3, [pc, #308]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_FIXED;
 800fcd4:	4b4b      	ldr	r3, [pc, #300]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_INCREMENTED;
 800fcda:	4b4a      	ldr	r3, [pc, #296]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fce0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800fce2:	4b48      	ldr	r3, [pc, #288]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fce4:	2200      	movs	r2, #0
 800fce6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800fce8:	4b46      	ldr	r3, [pc, #280]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800fcee:	4b45      	ldr	r3, [pc, #276]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcf0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800fcf4:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 800fcf6:	4b43      	ldr	r3, [pc, #268]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 800fcfc:	4b41      	ldr	r3, [pc, #260]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fcfe:	2201      	movs	r2, #1
 800fd00:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800fd02:	4b40      	ldr	r3, [pc, #256]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800fd08:	4b3e      	ldr	r3, [pc, #248]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 800fd0e:	4b3d      	ldr	r3, [pc, #244]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 800fd14:	483b      	ldr	r0, [pc, #236]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fd16:	f002 f8cb 	bl	8011eb0 <HAL_DMA_Init>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d001      	beq.n	800fd24 <HAL_UART_MspInit+0x428>
      Error_Handler();
 800fd20:	f7ff fd6a 	bl	800f7f8 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel3);
 800fd24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4a35      	ldr	r2, [pc, #212]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fd30:	67da      	str	r2, [r3, #124]	; 0x7c
 800fd32:	4a34      	ldr	r2, [pc, #208]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fd34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 800fd40:	2110      	movs	r1, #16
 800fd42:	4830      	ldr	r0, [pc, #192]	; (800fe04 <HAL_UART_MspInit+0x508>)
 800fd44:	f002 fd45 	bl	80127d2 <HAL_DMA_ConfigChannelAttributes>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <HAL_UART_MspInit+0x456>
      Error_Handler();
 800fd4e:	f7ff fd53 	bl	800f7f8 <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800fd52:	4b2e      	ldr	r3, [pc, #184]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd54:	4a2e      	ldr	r2, [pc, #184]	; (800fe10 <HAL_UART_MspInit+0x514>)
 800fd56:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_UART5_TX;
 800fd58:	4b2c      	ldr	r3, [pc, #176]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd5a:	2221      	movs	r2, #33	; 0x21
 800fd5c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800fd5e:	4b2b      	ldr	r3, [pc, #172]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fd64:	4b29      	ldr	r3, [pc, #164]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fd6a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_INCREMENTED;
 800fd6c:	4b27      	ldr	r3, [pc, #156]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd6e:	2208      	movs	r2, #8
 800fd70:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_FIXED;
 800fd72:	4b26      	ldr	r3, [pc, #152]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd74:	2200      	movs	r2, #0
 800fd76:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800fd78:	4b24      	ldr	r3, [pc, #144]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800fd7e:	4b23      	ldr	r3, [pc, #140]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_HIGH_PRIORITY;
 800fd84:	4b21      	ldr	r3, [pc, #132]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd86:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800fd8a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 800fd8c:	4b1f      	ldr	r3, [pc, #124]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd8e:	2201      	movs	r2, #1
 800fd90:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800fd92:	4b1e      	ldr	r3, [pc, #120]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd94:	2201      	movs	r2, #1
 800fd96:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800fd98:	4b1c      	ldr	r3, [pc, #112]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800fd9e:	4b1b      	ldr	r3, [pc, #108]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fda0:	2200      	movs	r2, #0
 800fda2:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 800fda4:	4b19      	ldr	r3, [pc, #100]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fda6:	2200      	movs	r2, #0
 800fda8:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800fdaa:	4818      	ldr	r0, [pc, #96]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fdac:	f002 f880 	bl	8011eb0 <HAL_DMA_Init>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d001      	beq.n	800fdba <HAL_UART_MspInit+0x4be>
      Error_Handler();
 800fdb6:	f7ff fd1f 	bl	800f7f8 <Error_Handler>
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel2);
 800fdba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a11      	ldr	r2, [pc, #68]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fdc6:	679a      	str	r2, [r3, #120]	; 0x78
 800fdc8:	4a10      	ldr	r2, [pc, #64]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fdca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800fdd6:	2110      	movs	r1, #16
 800fdd8:	480c      	ldr	r0, [pc, #48]	; (800fe0c <HAL_UART_MspInit+0x510>)
 800fdda:	f002 fcfa 	bl	80127d2 <HAL_DMA_ConfigChannelAttributes>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d001      	beq.n	800fde8 <HAL_UART_MspInit+0x4ec>
      Error_Handler();
 800fde4:	f7ff fd08 	bl	800f7f8 <Error_Handler>
}
 800fde8:	bf00      	nop
 800fdea:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	40005000 	.word	0x40005000
 800fdf8:	46020c00 	.word	0x46020c00
 800fdfc:	42020800 	.word	0x42020800
 800fe00:	42020c00 	.word	0x42020c00
 800fe04:	200b66fc 	.word	0x200b66fc
 800fe08:	400201d0 	.word	0x400201d0
 800fe0c:	200b6774 	.word	0x200b6774
 800fe10:	40020150 	.word	0x40020150

0800fe14 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4a29      	ldr	r2, [pc, #164]	; (800fec8 <HAL_UART_MspDeInit+0xb4>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d114      	bne.n	800fe50 <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800fe26:	4b29      	ldr	r3, [pc, #164]	; (800fecc <HAL_UART_MspDeInit+0xb8>)
 800fe28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fe2c:	4a27      	ldr	r2, [pc, #156]	; (800fecc <HAL_UART_MspDeInit+0xb8>)
 800fe2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe32:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GNSS_UART_TX_Pin|GNSS_UART_RX_Pin);
 800fe36:	210c      	movs	r1, #12
 800fe38:	4825      	ldr	r0, [pc, #148]	; (800fed0 <HAL_UART_MspDeInit+0xbc>)
 800fe3a:	f004 f8eb 	bl	8014014 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe42:	4618      	mov	r0, r3
 800fe44:	f002 f966 	bl	8012114 <HAL_DMA_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800fe48:	2042      	movs	r0, #66	; 0x42
 800fe4a:	f002 f81e 	bl	8011e8a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }

}
 800fe4e:	e037      	b.n	800fec0 <HAL_UART_MspDeInit+0xac>
  else if(huart->Instance==UART4)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4a1f      	ldr	r2, [pc, #124]	; (800fed4 <HAL_UART_MspDeInit+0xc0>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d112      	bne.n	800fe80 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_UART4_CLK_DISABLE();
 800fe5a:	4b1c      	ldr	r3, [pc, #112]	; (800fecc <HAL_UART_MspDeInit+0xb8>)
 800fe5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fe60:	4a1a      	ldr	r2, [pc, #104]	; (800fecc <HAL_UART_MspDeInit+0xb8>)
 800fe62:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800fe66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOC, CT_UART_TX_Pin|CT_UART_RX_Pin);
 800fe6a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800fe6e:	481a      	ldr	r0, [pc, #104]	; (800fed8 <HAL_UART_MspDeInit+0xc4>)
 800fe70:	f004 f8d0 	bl	8014014 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f002 f94b 	bl	8012114 <HAL_DMA_DeInit>
}
 800fe7e:	e01f      	b.n	800fec0 <HAL_UART_MspDeInit+0xac>
  else if(huart->Instance==UART5)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a15      	ldr	r2, [pc, #84]	; (800fedc <HAL_UART_MspDeInit+0xc8>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d11a      	bne.n	800fec0 <HAL_UART_MspDeInit+0xac>
    __HAL_RCC_UART5_CLK_DISABLE();
 800fe8a:	4b10      	ldr	r3, [pc, #64]	; (800fecc <HAL_UART_MspDeInit+0xb8>)
 800fe8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fe90:	4a0e      	ldr	r2, [pc, #56]	; (800fecc <HAL_UART_MspDeInit+0xb8>)
 800fe92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fe96:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(IRIDIUM_UART_TX_GPIO_Port, IRIDIUM_UART_TX_Pin);
 800fe9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fe9e:	480e      	ldr	r0, [pc, #56]	; (800fed8 <HAL_UART_MspDeInit+0xc4>)
 800fea0:	f004 f8b8 	bl	8014014 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(IRIDIUM_UART_RX_GPIO_Port, IRIDIUM_UART_RX_Pin);
 800fea4:	2104      	movs	r1, #4
 800fea6:	480e      	ldr	r0, [pc, #56]	; (800fee0 <HAL_UART_MspDeInit+0xcc>)
 800fea8:	f004 f8b4 	bl	8014014 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800feb0:	4618      	mov	r0, r3
 800feb2:	f002 f92f 	bl	8012114 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feba:	4618      	mov	r0, r3
 800febc:	f002 f92a 	bl	8012114 <HAL_DMA_DeInit>
}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	46002400 	.word	0x46002400
 800fecc:	46020c00 	.word	0x46020c00
 800fed0:	42020000 	.word	0x42020000
 800fed4:	40004c00 	.word	0x40004c00
 800fed8:	42020800 	.word	0x42020800
 800fedc:	40005000 	.word	0x40005000
 800fee0:	42020c00 	.word	0x42020c00

0800fee4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b0b6      	sub	sp, #216	; 0xd8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800feec:	f107 0310 	add.w	r3, r7, #16
 800fef0:	22c8      	movs	r2, #200	; 0xc8
 800fef2:	2100      	movs	r1, #0
 800fef4:	4618      	mov	r0, r3
 800fef6:	f010 fb3c 	bl	8020572 <memset>
  if(hrtc->Instance==RTC)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	4a21      	ldr	r2, [pc, #132]	; (800ff84 <HAL_RTC_MspInit+0xa0>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d13a      	bne.n	800ff7a <HAL_RTC_MspInit+0x96>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ff04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ff08:	f04f 0300 	mov.w	r3, #0
 800ff0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800ff10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ff18:	f107 0310 	add.w	r3, r7, #16
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f006 f86b 	bl	8015ff8 <HAL_RCCEx_PeriphCLKConfig>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d001      	beq.n	800ff2c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800ff28:	f7ff fc66 	bl	800f7f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ff2c:	4b16      	ldr	r3, [pc, #88]	; (800ff88 <HAL_RTC_MspInit+0xa4>)
 800ff2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ff32:	4a15      	ldr	r2, [pc, #84]	; (800ff88 <HAL_RTC_MspInit+0xa4>)
 800ff34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800ff3c:	4b12      	ldr	r3, [pc, #72]	; (800ff88 <HAL_RTC_MspInit+0xa4>)
 800ff3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ff42:	4a11      	ldr	r2, [pc, #68]	; (800ff88 <HAL_RTC_MspInit+0xa4>)
 800ff44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ff48:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800ff4c:	4b0e      	ldr	r3, [pc, #56]	; (800ff88 <HAL_RTC_MspInit+0xa4>)
 800ff4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ff52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ff56:	60fb      	str	r3, [r7, #12]
 800ff58:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	2002      	movs	r0, #2
 800ff60:	f001 ff6b 	bl	8011e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800ff64:	2002      	movs	r0, #2
 800ff66:	f001 ff82 	bl	8011e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800ff6a:	4b07      	ldr	r3, [pc, #28]	; (800ff88 <HAL_RTC_MspInit+0xa4>)
 800ff6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ff70:	4a05      	ldr	r2, [pc, #20]	; (800ff88 <HAL_RTC_MspInit+0xa4>)
 800ff72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ff76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ff7a:	bf00      	nop
 800ff7c:	37d8      	adds	r7, #216	; 0xd8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	46007800 	.word	0x46007800
 800ff88:	46020c00 	.word	0x46020c00

0800ff8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4a19      	ldr	r2, [pc, #100]	; (8010000 <HAL_TIM_Base_MspInit+0x74>)
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d10f      	bne.n	800ffbe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800ff9e:	4b19      	ldr	r3, [pc, #100]	; (8010004 <HAL_TIM_Base_MspInit+0x78>)
 800ffa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ffa4:	4a17      	ldr	r2, [pc, #92]	; (8010004 <HAL_TIM_Base_MspInit+0x78>)
 800ffa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ffaa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800ffae:	4b15      	ldr	r3, [pc, #84]	; (8010004 <HAL_TIM_Base_MspInit+0x78>)
 800ffb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ffb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffb8:	60fb      	str	r3, [r7, #12]
 800ffba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800ffbc:	e01b      	b.n	800fff6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4a11      	ldr	r2, [pc, #68]	; (8010008 <HAL_TIM_Base_MspInit+0x7c>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d116      	bne.n	800fff6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800ffc8:	4b0e      	ldr	r3, [pc, #56]	; (8010004 <HAL_TIM_Base_MspInit+0x78>)
 800ffca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ffce:	4a0d      	ldr	r2, [pc, #52]	; (8010004 <HAL_TIM_Base_MspInit+0x78>)
 800ffd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ffd4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800ffd8:	4b0a      	ldr	r3, [pc, #40]	; (8010004 <HAL_TIM_Base_MspInit+0x78>)
 800ffda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ffde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ffe2:	60bb      	str	r3, [r7, #8]
 800ffe4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	2100      	movs	r1, #0
 800ffea:	2047      	movs	r0, #71	; 0x47
 800ffec:	f001 ff25 	bl	8011e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800fff0:	2047      	movs	r0, #71	; 0x47
 800fff2:	f001 ff3c 	bl	8011e6e <HAL_NVIC_EnableIRQ>
}
 800fff6:	bf00      	nop
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	40014400 	.word	0x40014400
 8010004:	46020c00 	.word	0x46020c00
 8010008:	40014800 	.word	0x40014800

0801000c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a0f      	ldr	r2, [pc, #60]	; (8010058 <HAL_TIM_Base_MspDeInit+0x4c>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d108      	bne.n	8010030 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM16_MspDeInit 0 */

  /* USER CODE END TIM16_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM16_CLK_DISABLE();
 801001e:	4b0f      	ldr	r3, [pc, #60]	; (801005c <HAL_TIM_Base_MspDeInit+0x50>)
 8010020:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010024:	4a0d      	ldr	r2, [pc, #52]	; (801005c <HAL_TIM_Base_MspDeInit+0x50>)
 8010026:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801002a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  /* USER CODE BEGIN TIM17_MspDeInit 1 */

  /* USER CODE END TIM17_MspDeInit 1 */
  }

}
 801002e:	e00f      	b.n	8010050 <HAL_TIM_Base_MspDeInit+0x44>
  else if(htim_base->Instance==TIM17)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a0a      	ldr	r2, [pc, #40]	; (8010060 <HAL_TIM_Base_MspDeInit+0x54>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d10a      	bne.n	8010050 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM17_CLK_DISABLE();
 801003a:	4b08      	ldr	r3, [pc, #32]	; (801005c <HAL_TIM_Base_MspDeInit+0x50>)
 801003c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010040:	4a06      	ldr	r2, [pc, #24]	; (801005c <HAL_TIM_Base_MspDeInit+0x50>)
 8010042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010046:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    HAL_NVIC_DisableIRQ(TIM17_IRQn);
 801004a:	2047      	movs	r0, #71	; 0x47
 801004c:	f001 ff1d 	bl	8011e8a <HAL_NVIC_DisableIRQ>
}
 8010050:	bf00      	nop
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	40014400 	.word	0x40014400
 801005c:	46020c00 	.word	0x46020c00
 8010060:	40014800 	.word	0x40014800

08010064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b08e      	sub	sp, #56	; 0x38
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801006c:	2300      	movs	r3, #0
 801006e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8010070:	2300      	movs	r3, #0
 8010072:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8010074:	4b2e      	ldr	r3, [pc, #184]	; (8010130 <HAL_InitTick+0xcc>)
 8010076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801007a:	4a2d      	ldr	r2, [pc, #180]	; (8010130 <HAL_InitTick+0xcc>)
 801007c:	f043 0304 	orr.w	r3, r3, #4
 8010080:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8010084:	4b2a      	ldr	r3, [pc, #168]	; (8010130 <HAL_InitTick+0xcc>)
 8010086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801008a:	f003 0304 	and.w	r3, r3, #4
 801008e:	60fb      	str	r3, [r7, #12]
 8010090:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010092:	f107 0210 	add.w	r2, r7, #16
 8010096:	f107 0314 	add.w	r3, r7, #20
 801009a:	4611      	mov	r1, r2
 801009c:	4618      	mov	r0, r3
 801009e:	f005 fed3 	bl	8015e48 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80100a2:	f005 fe95 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 80100a6:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80100a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100aa:	4a22      	ldr	r2, [pc, #136]	; (8010134 <HAL_InitTick+0xd0>)
 80100ac:	fba2 2303 	umull	r2, r3, r2, r3
 80100b0:	0c9b      	lsrs	r3, r3, #18
 80100b2:	3b01      	subs	r3, #1
 80100b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80100b6:	4b20      	ldr	r3, [pc, #128]	; (8010138 <HAL_InitTick+0xd4>)
 80100b8:	4a20      	ldr	r2, [pc, #128]	; (801013c <HAL_InitTick+0xd8>)
 80100ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80100bc:	4b1e      	ldr	r3, [pc, #120]	; (8010138 <HAL_InitTick+0xd4>)
 80100be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80100c2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80100c4:	4a1c      	ldr	r2, [pc, #112]	; (8010138 <HAL_InitTick+0xd4>)
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80100ca:	4b1b      	ldr	r3, [pc, #108]	; (8010138 <HAL_InitTick+0xd4>)
 80100cc:	2200      	movs	r2, #0
 80100ce:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80100d0:	4b19      	ldr	r3, [pc, #100]	; (8010138 <HAL_InitTick+0xd4>)
 80100d2:	2200      	movs	r2, #0
 80100d4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim4);
 80100d6:	4818      	ldr	r0, [pc, #96]	; (8010138 <HAL_InitTick+0xd4>)
 80100d8:	f009 f8dc 	bl	8019294 <HAL_TIM_Base_Init>
 80100dc:	4603      	mov	r3, r0
 80100de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80100e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d118      	bne.n	801011c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80100ea:	4813      	ldr	r0, [pc, #76]	; (8010138 <HAL_InitTick+0xd4>)
 80100ec:	f009 f99c 	bl	8019428 <HAL_TIM_Base_Start_IT>
 80100f0:	4603      	mov	r3, r0
 80100f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80100f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d10e      	bne.n	801011c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b0f      	cmp	r3, #15
 8010102:	d808      	bhi.n	8010116 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM4 global Interrupt */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8010104:	2200      	movs	r2, #0
 8010106:	6879      	ldr	r1, [r7, #4]
 8010108:	202f      	movs	r0, #47	; 0x2f
 801010a:	f001 fe96 	bl	8011e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801010e:	4a0c      	ldr	r2, [pc, #48]	; (8010140 <HAL_InitTick+0xdc>)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6013      	str	r3, [r2, #0]
 8010114:	e002      	b.n	801011c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8010116:	2301      	movs	r3, #1
 8010118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801011c:	202f      	movs	r0, #47	; 0x2f
 801011e:	f001 fea6 	bl	8011e6e <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8010122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8010126:	4618      	mov	r0, r3
 8010128:	3738      	adds	r7, #56	; 0x38
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	46020c00 	.word	0x46020c00
 8010134:	431bde83 	.word	0x431bde83
 8010138:	200b69b4 	.word	0x200b69b4
 801013c:	40000800 	.word	0x40000800
 8010140:	2000002c 	.word	0x2000002c

08010144 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM4 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8010144:	b480      	push	{r7}
 8010146:	af00      	add	r7, sp, #0
  /* Disable TIM4 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 8010148:	4b06      	ldr	r3, [pc, #24]	; (8010164 <HAL_SuspendTick+0x20>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	68da      	ldr	r2, [r3, #12]
 801014e:	4b05      	ldr	r3, [pc, #20]	; (8010164 <HAL_SuspendTick+0x20>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f022 0201 	bic.w	r2, r2, #1
 8010156:	60da      	str	r2, [r3, #12]
}
 8010158:	bf00      	nop
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	200b69b4 	.word	0x200b69b4

08010168 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM4 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8010168:	b480      	push	{r7}
 801016a:	af00      	add	r7, sp, #0
  /* Enable TIM4 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 801016c:	4b06      	ldr	r3, [pc, #24]	; (8010188 <HAL_ResumeTick+0x20>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	68da      	ldr	r2, [r3, #12]
 8010172:	4b05      	ldr	r3, [pc, #20]	; (8010188 <HAL_ResumeTick+0x20>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f042 0201 	orr.w	r2, r2, #1
 801017a:	60da      	str	r2, [r3, #12]
}
 801017c:	bf00      	nop
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr
 8010186:	bf00      	nop
 8010188:	200b69b4 	.word	0x200b69b4

0801018c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  shut_it_all_down();
 8010190:	f7fe fb7a 	bl	800e888 <shut_it_all_down>
  HAL_NVIC_SystemReset();
 8010194:	f001 fe87 	bl	8011ea6 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010198:	e7fe      	b.n	8010198 <NMI_Handler+0xc>

0801019a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  shut_it_all_down();
 801019e:	f7fe fb73 	bl	800e888 <shut_it_all_down>
	  HAL_NVIC_SystemReset();
 80101a2:	f001 fe80 	bl	8011ea6 <HAL_NVIC_SystemReset>
	  shut_it_all_down();
 80101a6:	e7fa      	b.n	801019e <HardFault_Handler+0x4>

080101a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  shut_it_all_down();
 80101ac:	f7fe fb6c 	bl	800e888 <shut_it_all_down>
	  HAL_NVIC_SystemReset();
 80101b0:	f001 fe79 	bl	8011ea6 <HAL_NVIC_SystemReset>
	  shut_it_all_down();
 80101b4:	e7fa      	b.n	80101ac <MemManage_Handler+0x4>

080101b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  shut_it_all_down();
 80101ba:	f7fe fb65 	bl	800e888 <shut_it_all_down>
	  HAL_NVIC_SystemReset();
 80101be:	f001 fe72 	bl	8011ea6 <HAL_NVIC_SystemReset>
	  shut_it_all_down();
 80101c2:	e7fa      	b.n	80101ba <BusFault_Handler+0x4>

080101c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  shut_it_all_down();
 80101c8:	f7fe fb5e 	bl	800e888 <shut_it_all_down>
	  HAL_NVIC_SystemReset();
 80101cc:	f001 fe6b 	bl	8011ea6 <HAL_NVIC_SystemReset>
	  shut_it_all_down();
 80101d0:	e7fa      	b.n	80101c8 <UsageFault_Handler+0x4>

080101d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80101d2:	b480      	push	{r7}
 80101d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80101d6:	bf00      	nop
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80101e4:	4802      	ldr	r0, [pc, #8]	; (80101f0 <RTC_IRQHandler+0x10>)
 80101e6:	f008 feb7 	bl	8018f58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80101ea:	bf00      	nop
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	200b67ec 	.word	0x200b67ec

080101f4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */
  _tx_thread_context_save();
 80101f8:	f7f0 f87c 	bl	80002f4 <_tx_thread_context_save>
  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80101fc:	4803      	ldr	r0, [pc, #12]	; (801020c <GPDMA1_Channel0_IRQHandler+0x18>)
 80101fe:	f002 f968 	bl	80124d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */
  _tx_thread_context_restore();
 8010202:	f7f0 f875 	bl	80002f0 <_tx_thread_context_restore>
  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8010206:	bf00      	nop
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	200b660c 	.word	0x200b660c

08010210 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8010214:	4802      	ldr	r0, [pc, #8]	; (8010220 <GPDMA1_Channel1_IRQHandler+0x10>)
 8010216:	f002 f95c 	bl	80124d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 801021a:	bf00      	nop
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	200b6684 	.word	0x200b6684

08010224 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8010228:	4802      	ldr	r0, [pc, #8]	; (8010234 <GPDMA1_Channel2_IRQHandler+0x10>)
 801022a:	f002 f952 	bl	80124d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 801022e:	bf00      	nop
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	200b6774 	.word	0x200b6774

08010238 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 801023c:	4802      	ldr	r0, [pc, #8]	; (8010248 <GPDMA1_Channel3_IRQHandler+0x10>)
 801023e:	f002 f948 	bl	80124d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8010242:	bf00      	nop
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	200b66fc 	.word	0x200b66fc

0801024c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8010250:	4802      	ldr	r0, [pc, #8]	; (801025c <TIM4_IRQHandler+0x10>)
 8010252:	f009 f9b8 	bl	80195c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8010256:	bf00      	nop
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	200b69b4 	.word	0x200b69b4

08010260 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8010264:	4802      	ldr	r0, [pc, #8]	; (8010270 <LPUART1_IRQHandler+0x10>)
 8010266:	f00a f895 	bl	801a394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 801026a:	bf00      	nop
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	200b63c0 	.word	0x200b63c0

08010274 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8010278:	4802      	ldr	r0, [pc, #8]	; (8010284 <TIM17_IRQHandler+0x10>)
 801027a:	f009 f9a4 	bl	80195c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 801027e:	bf00      	nop
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	200b68e8 	.word	0x200b68e8

08010288 <PWR_S3WU_IRQHandler>:

/**
  * @brief This function handles PWR wake up from Stop3 interrupt.
  */
void PWR_S3WU_IRQHandler(void)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_S3WU_IRQn 0 */

  /* USER CODE END PWR_S3WU_IRQn 0 */
  HAL_PWREx_S3WU_IRQHandler(PWR_WAKEUP_PIN7);
 801028c:	2040      	movs	r0, #64	; 0x40
 801028e:	f004 f977 	bl	8014580 <HAL_PWREx_S3WU_IRQHandler>
  /* USER CODE BEGIN PWR_S3WU_IRQn 1 */

  /* USER CODE END PWR_S3WU_IRQn 1 */
}
 8010292:	bf00      	nop
 8010294:	bd80      	pop	{r7, pc}

08010296 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010296:	b480      	push	{r7}
 8010298:	af00      	add	r7, sp, #0
	return 1;
 801029a:	2301      	movs	r3, #1
}
 801029c:	4618      	mov	r0, r3
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr

080102a6 <_kill>:

int _kill(int pid, int sig)
{
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b082      	sub	sp, #8
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
 80102ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80102b0:	f010 f90e 	bl	80204d0 <__errno>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2216      	movs	r2, #22
 80102b8:	601a      	str	r2, [r3, #0]
	return -1;
 80102ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3708      	adds	r7, #8
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <_exit>:

void _exit (int status)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b082      	sub	sp, #8
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80102ce:	f04f 31ff 	mov.w	r1, #4294967295
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff ffe7 	bl	80102a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80102d8:	e7fe      	b.n	80102d8 <_exit+0x12>

080102da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b086      	sub	sp, #24
 80102de:	af00      	add	r7, sp, #0
 80102e0:	60f8      	str	r0, [r7, #12]
 80102e2:	60b9      	str	r1, [r7, #8]
 80102e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80102e6:	2300      	movs	r3, #0
 80102e8:	617b      	str	r3, [r7, #20]
 80102ea:	e00a      	b.n	8010302 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80102ec:	e000      	b.n	80102f0 <_read+0x16>
 80102ee:	bf00      	nop
 80102f0:	4601      	mov	r1, r0
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	1c5a      	adds	r2, r3, #1
 80102f6:	60ba      	str	r2, [r7, #8]
 80102f8:	b2ca      	uxtb	r2, r1
 80102fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	3301      	adds	r3, #1
 8010300:	617b      	str	r3, [r7, #20]
 8010302:	697a      	ldr	r2, [r7, #20]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	429a      	cmp	r2, r3
 8010308:	dbf0      	blt.n	80102ec <_read+0x12>
	}

return len;
 801030a:	687b      	ldr	r3, [r7, #4]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3718      	adds	r7, #24
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b086      	sub	sp, #24
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010320:	2300      	movs	r3, #0
 8010322:	617b      	str	r3, [r7, #20]
 8010324:	e009      	b.n	801033a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	1c5a      	adds	r2, r3, #1
 801032a:	60ba      	str	r2, [r7, #8]
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	4618      	mov	r0, r3
 8010330:	e000      	b.n	8010334 <_write+0x20>
 8010332:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	3301      	adds	r3, #1
 8010338:	617b      	str	r3, [r7, #20]
 801033a:	697a      	ldr	r2, [r7, #20]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	429a      	cmp	r2, r3
 8010340:	dbf1      	blt.n	8010326 <_write+0x12>
	}
	return len;
 8010342:	687b      	ldr	r3, [r7, #4]
}
 8010344:	4618      	mov	r0, r3
 8010346:	3718      	adds	r7, #24
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <_close>:

int _close(int file)
{
 801034c:	b480      	push	{r7}
 801034e:	b083      	sub	sp, #12
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
	return -1;
 8010354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010358:	4618      	mov	r0, r3
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010374:	605a      	str	r2, [r3, #4]
	return 0;
 8010376:	2300      	movs	r3, #0
}
 8010378:	4618      	mov	r0, r3
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <_isatty>:

int _isatty(int file)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
	return 1;
 801038c:	2301      	movs	r3, #1
}
 801038e:	4618      	mov	r0, r3
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr

0801039a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801039a:	b480      	push	{r7}
 801039c:	b085      	sub	sp, #20
 801039e:	af00      	add	r7, sp, #0
 80103a0:	60f8      	str	r0, [r7, #12]
 80103a2:	60b9      	str	r1, [r7, #8]
 80103a4:	607a      	str	r2, [r7, #4]
	return 0;
 80103a6:	2300      	movs	r3, #0
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3714      	adds	r7, #20
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80103bc:	4a14      	ldr	r2, [pc, #80]	; (8010410 <_sbrk+0x5c>)
 80103be:	4b15      	ldr	r3, [pc, #84]	; (8010414 <_sbrk+0x60>)
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80103c8:	4b13      	ldr	r3, [pc, #76]	; (8010418 <_sbrk+0x64>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d102      	bne.n	80103d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80103d0:	4b11      	ldr	r3, [pc, #68]	; (8010418 <_sbrk+0x64>)
 80103d2:	4a12      	ldr	r2, [pc, #72]	; (801041c <_sbrk+0x68>)
 80103d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80103d6:	4b10      	ldr	r3, [pc, #64]	; (8010418 <_sbrk+0x64>)
 80103d8:	681a      	ldr	r2, [r3, #0]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	693a      	ldr	r2, [r7, #16]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d207      	bcs.n	80103f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80103e4:	f010 f874 	bl	80204d0 <__errno>
 80103e8:	4603      	mov	r3, r0
 80103ea:	220c      	movs	r2, #12
 80103ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80103ee:	f04f 33ff 	mov.w	r3, #4294967295
 80103f2:	e009      	b.n	8010408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80103f4:	4b08      	ldr	r3, [pc, #32]	; (8010418 <_sbrk+0x64>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80103fa:	4b07      	ldr	r3, [pc, #28]	; (8010418 <_sbrk+0x64>)
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4413      	add	r3, r2
 8010402:	4a05      	ldr	r2, [pc, #20]	; (8010418 <_sbrk+0x64>)
 8010404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010406:	68fb      	ldr	r3, [r7, #12]
}
 8010408:	4618      	mov	r0, r3
 801040a:	3718      	adds	r7, #24
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	200c0000 	.word	0x200c0000
 8010414:	00000400 	.word	0x00000400
 8010418:	200b6a80 	.word	0x200b6a80
 801041c:	200b70d8 	.word	0x200b70d8

08010420 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8010420:	b480      	push	{r7}
 8010422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8010424:	4b18      	ldr	r3, [pc, #96]	; (8010488 <SystemInit+0x68>)
 8010426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801042a:	4a17      	ldr	r2, [pc, #92]	; (8010488 <SystemInit+0x68>)
 801042c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8010434:	4b15      	ldr	r3, [pc, #84]	; (801048c <SystemInit+0x6c>)
 8010436:	2201      	movs	r2, #1
 8010438:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 801043a:	4b14      	ldr	r3, [pc, #80]	; (801048c <SystemInit+0x6c>)
 801043c:	2200      	movs	r2, #0
 801043e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8010440:	4b12      	ldr	r3, [pc, #72]	; (801048c <SystemInit+0x6c>)
 8010442:	2200      	movs	r2, #0
 8010444:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8010446:	4b11      	ldr	r3, [pc, #68]	; (801048c <SystemInit+0x6c>)
 8010448:	2200      	movs	r2, #0
 801044a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 801044c:	4b0f      	ldr	r3, [pc, #60]	; (801048c <SystemInit+0x6c>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4a0e      	ldr	r2, [pc, #56]	; (801048c <SystemInit+0x6c>)
 8010452:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8010456:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 801045a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 801045c:	4b0b      	ldr	r3, [pc, #44]	; (801048c <SystemInit+0x6c>)
 801045e:	2200      	movs	r2, #0
 8010460:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8010462:	4b0a      	ldr	r3, [pc, #40]	; (801048c <SystemInit+0x6c>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4a09      	ldr	r2, [pc, #36]	; (801048c <SystemInit+0x6c>)
 8010468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801046c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 801046e:	4b07      	ldr	r3, [pc, #28]	; (801048c <SystemInit+0x6c>)
 8010470:	2200      	movs	r2, #0
 8010472:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010474:	4b04      	ldr	r3, [pc, #16]	; (8010488 <SystemInit+0x68>)
 8010476:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801047a:	609a      	str	r2, [r3, #8]
  #endif
}
 801047c:	bf00      	nop
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop
 8010488:	e000ed00 	.word	0xe000ed00
 801048c:	46020c00 	.word	0x46020c00

08010490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8010490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80104c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8010494:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8010496:	e003      	b.n	80104a0 <LoopCopyDataInit>

08010498 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8010498:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801049a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801049c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801049e:	3104      	adds	r1, #4

080104a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80104a0:	480b      	ldr	r0, [pc, #44]	; (80104d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80104a2:	4b0c      	ldr	r3, [pc, #48]	; (80104d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80104a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80104a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80104a8:	d3f6      	bcc.n	8010498 <CopyDataInit>
	ldr	r2, =_sbss
 80104aa:	4a0b      	ldr	r2, [pc, #44]	; (80104d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80104ac:	e002      	b.n	80104b4 <LoopFillZerobss>

080104ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80104ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80104b0:	f842 3b04 	str.w	r3, [r2], #4

080104b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80104b4:	4b09      	ldr	r3, [pc, #36]	; (80104dc <LoopForever+0x16>)
	cmp	r2, r3
 80104b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80104b8:	d3f9      	bcc.n	80104ae <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80104ba:	f7ff ffb1 	bl	8010420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80104be:	f010 f80d 	bl	80204dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80104c2:	f7fe fc7b 	bl	800edbc <main>

080104c6 <LoopForever>:

LoopForever:
    b LoopForever
 80104c6:	e7fe      	b.n	80104c6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80104c8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80104cc:	08024644 	.word	0x08024644
	ldr	r0, =_sdata
 80104d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80104d4:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 80104d8:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 80104dc:	200b70d7 	.word	0x200b70d7

080104e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80104e0:	e7fe      	b.n	80104e0 <ADC1_IRQHandler>
	...

080104e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80104e8:	4b11      	ldr	r3, [pc, #68]	; (8010530 <HAL_Init+0x4c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a10      	ldr	r2, [pc, #64]	; (8010530 <HAL_Init+0x4c>)
 80104ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80104f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80104f4:	2003      	movs	r0, #3
 80104f6:	f001 fc95 	bl	8011e24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80104fa:	f005 fb47 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 80104fe:	4602      	mov	r2, r0
 8010500:	4b0c      	ldr	r3, [pc, #48]	; (8010534 <HAL_Init+0x50>)
 8010502:	6a1b      	ldr	r3, [r3, #32]
 8010504:	f003 030f 	and.w	r3, r3, #15
 8010508:	490b      	ldr	r1, [pc, #44]	; (8010538 <HAL_Init+0x54>)
 801050a:	5ccb      	ldrb	r3, [r1, r3]
 801050c:	fa22 f303 	lsr.w	r3, r2, r3
 8010510:	4a0a      	ldr	r2, [pc, #40]	; (801053c <HAL_Init+0x58>)
 8010512:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010514:	2007      	movs	r0, #7
 8010516:	f7ff fda5 	bl	8010064 <HAL_InitTick>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d001      	beq.n	8010524 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8010520:	2301      	movs	r3, #1
 8010522:	e002      	b.n	801052a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8010524:	f7ff f974 	bl	800f810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010528:	2300      	movs	r3, #0
}
 801052a:	4618      	mov	r0, r3
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	40022000 	.word	0x40022000
 8010534:	46020c00 	.word	0x46020c00
 8010538:	08023b00 	.word	0x08023b00
 801053c:	20000028 	.word	0x20000028

08010540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010540:	b480      	push	{r7}
 8010542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010544:	4b06      	ldr	r3, [pc, #24]	; (8010560 <HAL_IncTick+0x20>)
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	461a      	mov	r2, r3
 801054a:	4b06      	ldr	r3, [pc, #24]	; (8010564 <HAL_IncTick+0x24>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4413      	add	r3, r2
 8010550:	4a04      	ldr	r2, [pc, #16]	; (8010564 <HAL_IncTick+0x24>)
 8010552:	6013      	str	r3, [r2, #0]
}
 8010554:	bf00      	nop
 8010556:	46bd      	mov	sp, r7
 8010558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop
 8010560:	20000030 	.word	0x20000030
 8010564:	200b6a84 	.word	0x200b6a84

08010568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010568:	b480      	push	{r7}
 801056a:	af00      	add	r7, sp, #0
  return uwTick;
 801056c:	4b03      	ldr	r3, [pc, #12]	; (801057c <HAL_GetTick+0x14>)
 801056e:	681b      	ldr	r3, [r3, #0]
}
 8010570:	4618      	mov	r0, r3
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	200b6a84 	.word	0x200b6a84

08010580 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8010580:	b480      	push	{r7}
 8010582:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8010584:	4b04      	ldr	r3, [pc, #16]	; (8010598 <HAL_GetREVID+0x18>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	0c1b      	lsrs	r3, r3, #16
 801058a:	b29b      	uxth	r3, r3
}
 801058c:	4618      	mov	r0, r3
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop
 8010598:	e0044000 	.word	0xe0044000

0801059c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80105a4:	4b06      	ldr	r3, [pc, #24]	; (80105c0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80105ac:	4904      	ldr	r1, [pc, #16]	; (80105c0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4313      	orrs	r3, r2
 80105b2:	600b      	str	r3, [r1, #0]
}
 80105b4:	bf00      	nop
 80105b6:	370c      	adds	r7, #12
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr
 80105c0:	46007400 	.word	0x46007400

080105c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80105cc:	4b06      	ldr	r3, [pc, #24]	; (80105e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f023 0202 	bic.w	r2, r3, #2
 80105d4:	4904      	ldr	r1, [pc, #16]	; (80105e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4313      	orrs	r3, r2
 80105da:	600b      	str	r3, [r1, #0]
}
 80105dc:	bf00      	nop
 80105de:	370c      	adds	r7, #12
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr
 80105e8:	46007400 	.word	0x46007400

080105ec <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80105f2:	4b0f      	ldr	r3, [pc, #60]	; (8010630 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	4a0e      	ldr	r2, [pc, #56]	; (8010630 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80105f8:	f043 0301 	orr.w	r3, r3, #1
 80105fc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80105fe:	f7ff ffb3 	bl	8010568 <HAL_GetTick>
 8010602:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8010604:	e008      	b.n	8010618 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8010606:	f7ff ffaf 	bl	8010568 <HAL_GetTick>
 801060a:	4602      	mov	r2, r0
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	2b0a      	cmp	r3, #10
 8010612:	d901      	bls.n	8010618 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8010614:	2303      	movs	r3, #3
 8010616:	e006      	b.n	8010626 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8010618:	4b05      	ldr	r3, [pc, #20]	; (8010630 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f003 0308 	and.w	r3, r3, #8
 8010620:	2b00      	cmp	r3, #0
 8010622:	d0f0      	beq.n	8010606 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3708      	adds	r7, #8
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	46007400 	.word	0x46007400

08010634 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	431a      	orrs	r2, r3
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	601a      	str	r2, [r3, #0]
}
 801064e:	bf00      	nop
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr

0801065a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801065a:	b480      	push	{r7}
 801065c:	b083      	sub	sp, #12
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
 8010662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	431a      	orrs	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	601a      	str	r2, [r3, #0]
}
 8010674:	bf00      	nop
 8010676:	370c      	adds	r7, #12
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8010690:	4618      	mov	r0, r3
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 801069c:	b480      	push	{r7}
 801069e:	b087      	sub	sp, #28
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	607a      	str	r2, [r7, #4]
 80106a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	3360      	adds	r3, #96	; 0x60
 80106ae:	461a      	mov	r2, r3
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	4413      	add	r3, r2
 80106b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	005b      	lsls	r3, r3, #1
 80106c4:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	430b      	orrs	r3, r1
 80106cc:	431a      	orrs	r2, r3
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80106d2:	bf00      	nop
 80106d4:	371c      	adds	r7, #28
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80106de:	b480      	push	{r7}
 80106e0:	b087      	sub	sp, #28
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	60f8      	str	r0, [r7, #12]
 80106e6:	60b9      	str	r1, [r7, #8]
 80106e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3360      	adds	r3, #96	; 0x60
 80106ee:	461a      	mov	r2, r3
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	4413      	add	r3, r2
 80106f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	431a      	orrs	r2, r3
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	601a      	str	r2, [r3, #0]
}
 8010708:	bf00      	nop
 801070a:	371c      	adds	r7, #28
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8010714:	b480      	push	{r7}
 8010716:	b087      	sub	sp, #28
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	3360      	adds	r3, #96	; 0x60
 8010724:	461a      	mov	r2, r3
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	4413      	add	r3, r2
 801072c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	431a      	orrs	r2, r3
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	601a      	str	r2, [r3, #0]
}
 801073e:	bf00      	nop
 8010740:	371c      	adds	r7, #28
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr

0801074a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 801074a:	b480      	push	{r7}
 801074c:	b083      	sub	sp, #12
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010758:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801075c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010760:	683a      	ldr	r2, [r7, #0]
 8010762:	431a      	orrs	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801076c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010770:	683a      	ldr	r2, [r7, #0]
 8010772:	2a00      	cmp	r2, #0
 8010774:	d002      	beq.n	801077c <LL_ADC_SetGainCompensation+0x32>
 8010776:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801077a:	e000      	b.n	801077e <LL_ADC_SetGainCompensation+0x34>
 801077c:	2200      	movs	r2, #0
 801077e:	431a      	orrs	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010784:	bf00      	nop
 8010786:	370c      	adds	r7, #12
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8010790:	b480      	push	{r7}
 8010792:	b085      	sub	sp, #20
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	695a      	ldr	r2, [r3, #20]
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	f003 0304 	and.w	r3, r3, #4
 80107a6:	2107      	movs	r1, #7
 80107a8:	fa01 f303 	lsl.w	r3, r1, r3
 80107ac:	43db      	mvns	r3, r3
 80107ae:	401a      	ands	r2, r3
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	f003 0304 	and.w	r3, r3, #4
 80107b6:	6879      	ldr	r1, [r7, #4]
 80107b8:	fa01 f303 	lsl.w	r3, r1, r3
 80107bc:	431a      	orrs	r2, r3
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80107c2:	bf00      	nop
 80107c4:	3714      	adds	r7, #20
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
	...

080107d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b089      	sub	sp, #36	; 0x24
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	4a2b      	ldr	r2, [pc, #172]	; (801088c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d020      	beq.n	8010826 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	3330      	adds	r3, #48	; 0x30
 80107e8:	461a      	mov	r2, r3
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	0a1b      	lsrs	r3, r3, #8
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	f003 030c 	and.w	r3, r3, #12
 80107f4:	4413      	add	r3, r2
 80107f6:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	f003 031f 	and.w	r3, r3, #31
 8010802:	211f      	movs	r1, #31
 8010804:	fa01 f303 	lsl.w	r3, r1, r3
 8010808:	43db      	mvns	r3, r3
 801080a:	401a      	ands	r2, r3
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	0e9b      	lsrs	r3, r3, #26
 8010810:	f003 011f 	and.w	r1, r3, #31
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	f003 031f 	and.w	r3, r3, #31
 801081a:	fa01 f303 	lsl.w	r3, r1, r3
 801081e:	431a      	orrs	r2, r3
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8010824:	e02b      	b.n	801087e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	f003 031f 	and.w	r3, r3, #31
 8010830:	210f      	movs	r1, #15
 8010832:	fa01 f303 	lsl.w	r3, r1, r3
 8010836:	43db      	mvns	r3, r3
 8010838:	401a      	ands	r2, r3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010840:	2b00      	cmp	r3, #0
 8010842:	d104      	bne.n	801084e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	0e9b      	lsrs	r3, r3, #26
 8010848:	f003 031f 	and.w	r3, r3, #31
 801084c:	e010      	b.n	8010870 <LL_ADC_REG_SetSequencerRanks+0xa0>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	fa93 f3a3 	rbit	r3, r3
 8010858:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d101      	bne.n	8010868 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8010864:	2320      	movs	r3, #32
 8010866:	e003      	b.n	8010870 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8010868:	69bb      	ldr	r3, [r7, #24]
 801086a:	fab3 f383 	clz	r3, r3
 801086e:	b2db      	uxtb	r3, r3
 8010870:	68b9      	ldr	r1, [r7, #8]
 8010872:	f001 011f 	and.w	r1, r1, #31
 8010876:	408b      	lsls	r3, r1
 8010878:	431a      	orrs	r2, r3
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801087e:	bf00      	nop
 8010880:	3724      	adds	r7, #36	; 0x24
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	46021000 	.word	0x46021000

08010890 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8010890:	b480      	push	{r7}
 8010892:	b087      	sub	sp, #28
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d107      	bne.n	80108b4 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	0e9b      	lsrs	r3, r3, #26
 80108a8:	f003 031f 	and.w	r3, r3, #31
 80108ac:	2201      	movs	r2, #1
 80108ae:	fa02 f303 	lsl.w	r3, r2, r3
 80108b2:	e015      	b.n	80108e0 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	fa93 f3a3 	rbit	r3, r3
 80108be:	60fb      	str	r3, [r7, #12]
  return result;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d101      	bne.n	80108ce <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80108ca:	2320      	movs	r3, #32
 80108cc:	e003      	b.n	80108d6 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	fab3 f383 	clz	r3, r3
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	f003 031f 	and.w	r3, r3, #31
 80108da:	2201      	movs	r2, #1
 80108dc:	fa02 f303 	lsl.w	r3, r2, r3
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80108e4:	431a      	orrs	r2, r3
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80108ea:	bf00      	nop
 80108ec:	371c      	adds	r7, #28
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr

080108f6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80108f6:	b480      	push	{r7}
 80108f8:	b083      	sub	sp, #12
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	0e9b      	lsrs	r3, r3, #26
 8010908:	f003 031f 	and.w	r3, r3, #31
 801090c:	2101      	movs	r1, #1
 801090e:	fa01 f303 	lsl.w	r3, r1, r3
 8010912:	43db      	mvns	r3, r3
 8010914:	401a      	ands	r2, r3
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	629a      	str	r2, [r3, #40]	; 0x28
}
 801091a:	bf00      	nop
 801091c:	370c      	adds	r7, #12
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr
	...

08010928 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8010928:	b480      	push	{r7}
 801092a:	b08d      	sub	sp, #52	; 0x34
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	4a3c      	ldr	r2, [pc, #240]	; (8010a28 <LL_ADC_SetChannelSamplingTime+0x100>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d042      	beq.n	80109c2 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010942:	2b00      	cmp	r3, #0
 8010944:	d104      	bne.n	8010950 <LL_ADC_SetChannelSamplingTime+0x28>
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	0e9b      	lsrs	r3, r3, #26
 801094a:	f003 021f 	and.w	r2, r3, #31
 801094e:	e011      	b.n	8010974 <LL_ADC_SetChannelSamplingTime+0x4c>
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	fa93 f3a3 	rbit	r3, r3
 801095a:	61fb      	str	r3, [r7, #28]
  return result;
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8010966:	2320      	movs	r3, #32
 8010968:	e003      	b.n	8010972 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 801096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096c:	fab3 f383 	clz	r3, r3
 8010970:	b2db      	uxtb	r3, r3
 8010972:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	0e5b      	lsrs	r3, r3, #25
 8010978:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 801097c:	460b      	mov	r3, r1
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	440b      	add	r3, r1
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	1ad2      	subs	r2, r2, r3
 8010986:	4613      	mov	r3, r2
 8010988:	005b      	lsls	r3, r3, #1
 801098a:	4413      	add	r3, r2
 801098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	3314      	adds	r3, #20
 8010992:	461a      	mov	r2, r3
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	0e5b      	lsrs	r3, r3, #25
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	f003 0304 	and.w	r3, r3, #4
 801099e:	4413      	add	r3, r2
 80109a0:	62bb      	str	r3, [r7, #40]	; 0x28
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80109a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	2107      	movs	r1, #7
 80109a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109aa:	fa01 f303 	lsl.w	r3, r1, r3
 80109ae:	43db      	mvns	r3, r3
 80109b0:	401a      	ands	r2, r3
 80109b2:	6879      	ldr	r1, [r7, #4]
 80109b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b6:	fa01 f303 	lsl.w	r3, r1, r3
 80109ba:	431a      	orrs	r2, r3
 80109bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109be:	601a      	str	r2, [r3, #0]
               ADC4_SAMPLING_TIME_CH_MASK,
               ((1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel)) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)                  \
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80109c0:	e02c      	b.n	8010a1c <LL_ADC_SetChannelSamplingTime+0xf4>
    MODIFY_REG(ADCx->SMPR1,
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	695b      	ldr	r3, [r3, #20]
 80109c6:	b2da      	uxtb	r2, r3
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d108      	bne.n	80109e4 <LL_ADC_SetChannelSamplingTime+0xbc>
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	0e9b      	lsrs	r3, r3, #26
 80109d6:	f003 031f 	and.w	r3, r3, #31
 80109da:	2101      	movs	r1, #1
 80109dc:	fa01 f303 	lsl.w	r3, r1, r3
 80109e0:	021b      	lsls	r3, r3, #8
 80109e2:	e014      	b.n	8010a0e <LL_ADC_SetChannelSamplingTime+0xe6>
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	fa93 f3a3 	rbit	r3, r3
 80109ee:	613b      	str	r3, [r7, #16]
  return result;
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80109f4:	69bb      	ldr	r3, [r7, #24]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d101      	bne.n	80109fe <LL_ADC_SetChannelSamplingTime+0xd6>
    return 32U;
 80109fa:	2320      	movs	r3, #32
 80109fc:	e003      	b.n	8010a06 <LL_ADC_SetChannelSamplingTime+0xde>
  return __builtin_clz(value);
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	fab3 f383 	clz	r3, r3
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	4619      	mov	r1, r3
 8010a08:	2301      	movs	r3, #1
 8010a0a:	408b      	lsls	r3, r1
 8010a0c:	021b      	lsls	r3, r3, #8
 8010a0e:	6879      	ldr	r1, [r7, #4]
 8010a10:	400b      	ands	r3, r1
 8010a12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010a16:	431a      	orrs	r2, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	615a      	str	r2, [r3, #20]
}
 8010a1c:	bf00      	nop
 8010a1e:	3734      	adds	r7, #52	; 0x34
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr
 8010a28:	46021000 	.word	0x46021000

08010a2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b085      	sub	sp, #20
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010a44:	43db      	mvns	r3, r3
 8010a46:	401a      	ands	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f003 0318 	and.w	r3, r3, #24
 8010a4e:	4908      	ldr	r1, [pc, #32]	; (8010a70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8010a50:	40d9      	lsrs	r1, r3
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	400b      	ands	r3, r1
 8010a56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010a5a:	431a      	orrs	r2, r3
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8010a62:	bf00      	nop
 8010a64:	3714      	adds	r7, #20
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	000fffff 	.word	0x000fffff

08010a74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b083      	sub	sp, #12
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8010a84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	6093      	str	r3, [r2, #8]
}
 8010a8c:	bf00      	nop
 8010a8e:	370c      	adds	r7, #12
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	689b      	ldr	r3, [r3, #8]
 8010aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010aac:	d101      	bne.n	8010ab2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e000      	b.n	8010ab4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8010ab2:	2300      	movs	r3, #0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	370c      	adds	r7, #12
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr

08010ac0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8010ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010ad4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	609a      	str	r2, [r3, #8]
}
 8010adc:	bf00      	nop
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010afc:	d101      	bne.n	8010b02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8010afe:	2301      	movs	r3, #1
 8010b00:	e000      	b.n	8010b04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8010b02:	2300      	movs	r3, #0
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8010b10:	b480      	push	{r7}
 8010b12:	b083      	sub	sp, #12
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d101      	bne.n	8010b28 <LL_ADC_IsEnabled+0x18>
 8010b24:	2301      	movs	r3, #1
 8010b26:	e000      	b.n	8010b2a <LL_ADC_IsEnabled+0x1a>
 8010b28:	2300      	movs	r3, #0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	370c      	adds	r7, #12
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr

08010b36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8010b36:	b480      	push	{r7}
 8010b38:	b083      	sub	sp, #12
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	689b      	ldr	r3, [r3, #8]
 8010b42:	f003 0304 	and.w	r3, r3, #4
 8010b46:	2b04      	cmp	r3, #4
 8010b48:	d101      	bne.n	8010b4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	e000      	b.n	8010b50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	370c      	adds	r7, #12
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	689b      	ldr	r3, [r3, #8]
 8010b68:	f003 0308 	and.w	r3, r3, #8
 8010b6c:	2b08      	cmp	r3, #8
 8010b6e:	d101      	bne.n	8010b74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8010b70:	2301      	movs	r3, #1
 8010b72:	e000      	b.n	8010b76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
	...

08010b84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b08a      	sub	sp, #40	; 0x28
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8010b92:	2300      	movs	r3, #0
 8010b94:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8010b96:	2300      	movs	r3, #0
 8010b98:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d101      	bne.n	8010ba4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e2e3      	b.n	801116c <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	691b      	ldr	r3, [r3, #16]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d003      	beq.n	8010bb4 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4a92      	ldr	r2, [pc, #584]	; (8010dfc <HAL_ADC_Init+0x278>)
 8010bb2:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d109      	bne.n	8010bd0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7fe fe61 	bl	800f884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff ff5f 	bl	8010a98 <LL_ADC_IsDeepPowerDownEnabled>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d004      	beq.n	8010bea <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7ff ff45 	bl	8010a74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7ff ff7a 	bl	8010ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d115      	bne.n	8010c26 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff ff5e 	bl	8010ac0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8010c04:	4b7e      	ldr	r3, [pc, #504]	; (8010e00 <HAL_ADC_Init+0x27c>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	099b      	lsrs	r3, r3, #6
 8010c0a:	4a7e      	ldr	r2, [pc, #504]	; (8010e04 <HAL_ADC_Init+0x280>)
 8010c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8010c10:	099b      	lsrs	r3, r3, #6
 8010c12:	3301      	adds	r3, #1
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8010c18:	e002      	b.n	8010c20 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1f9      	bne.n	8010c1a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7ff ff5c 	bl	8010ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d10e      	bne.n	8010c54 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c3a:	f043 0210 	orr.w	r2, r3, #16
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c46:	f043 0201 	orr.w	r2, r3, #1
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8010c4e:	2301      	movs	r3, #1
 8010c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7ff ff6c 	bl	8010b36 <LL_ADC_REG_IsConversionOngoing>
 8010c5e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c64:	f003 0310 	and.w	r3, r3, #16
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f040 8274 	bne.w	8011156 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f040 8270 	bne.w	8011156 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c7a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8010c7e:	f043 0202 	orr.w	r2, r3, #2
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7ff ff40 	bl	8010b10 <LL_ADC_IsEnabled>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d14e      	bne.n	8010d34 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a58      	ldr	r2, [pc, #352]	; (8010dfc <HAL_ADC_Init+0x278>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d028      	beq.n	8010cf2 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a58      	ldr	r2, [pc, #352]	; (8010e08 <HAL_ADC_Init+0x284>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d109      	bne.n	8010cbe <HAL_ADC_Init+0x13a>
 8010caa:	4857      	ldr	r0, [pc, #348]	; (8010e08 <HAL_ADC_Init+0x284>)
 8010cac:	f7ff ff30 	bl	8010b10 <LL_ADC_IsEnabled>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	bf0c      	ite	eq
 8010cb6:	2301      	moveq	r3, #1
 8010cb8:	2300      	movne	r3, #0
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	e008      	b.n	8010cd0 <HAL_ADC_Init+0x14c>
 8010cbe:	484f      	ldr	r0, [pc, #316]	; (8010dfc <HAL_ADC_Init+0x278>)
 8010cc0:	f7ff ff26 	bl	8010b10 <LL_ADC_IsEnabled>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	bf0c      	ite	eq
 8010cca:	2301      	moveq	r3, #1
 8010ccc:	2300      	movne	r3, #0
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d02f      	beq.n	8010d34 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4a4b      	ldr	r2, [pc, #300]	; (8010e08 <HAL_ADC_Init+0x284>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d101      	bne.n	8010ce2 <HAL_ADC_Init+0x15e>
 8010cde:	4a4b      	ldr	r2, [pc, #300]	; (8010e0c <HAL_ADC_Init+0x288>)
 8010ce0:	e000      	b.n	8010ce4 <HAL_ADC_Init+0x160>
 8010ce2:	4a4b      	ldr	r2, [pc, #300]	; (8010e10 <HAL_ADC_Init+0x28c>)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	4619      	mov	r1, r3
 8010cea:	4610      	mov	r0, r2
 8010cec:	f7ff fca2 	bl	8010634 <LL_ADC_SetCommonClock>
 8010cf0:	e020      	b.n	8010d34 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	f023 010c 	bic.w	r1, r3, #12
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	689b      	ldr	r3, [r3, #8]
 8010d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d005      	beq.n	8010d14 <HAL_ADC_Init+0x190>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	f003 030c 	and.w	r3, r3, #12
 8010d12:	e000      	b.n	8010d16 <HAL_ADC_Init+0x192>
 8010d14:	230c      	movs	r3, #12
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	6812      	ldr	r2, [r2, #0]
 8010d1a:	430b      	orrs	r3, r1
 8010d1c:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8010d1e:	4b3c      	ldr	r3, [pc, #240]	; (8010e10 <HAL_ADC_Init+0x28c>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8010d2e:	4938      	ldr	r1, [pc, #224]	; (8010e10 <HAL_ADC_Init+0x28c>)
 8010d30:	4313      	orrs	r3, r2
 8010d32:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4a30      	ldr	r2, [pc, #192]	; (8010dfc <HAL_ADC_Init+0x278>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d010      	beq.n	8010d60 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010d44:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8010d4a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8010d50:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010d58:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	623b      	str	r3, [r7, #32]
 8010d5e:	e030      	b.n	8010dc2 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	7f1b      	ldrb	r3, [r3, #28]
 8010d64:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010d6c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010d6e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8010d74:	2a00      	cmp	r2, #0
 8010d76:	d002      	beq.n	8010d7e <HAL_ADC_Init+0x1fa>
 8010d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010d7c:	e000      	b.n	8010d80 <HAL_ADC_Init+0x1fc>
 8010d7e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8010d80:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8010d86:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	691b      	ldr	r3, [r3, #16]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	da04      	bge.n	8010d9a <HAL_ADC_Init+0x216>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d98:	e001      	b.n	8010d9e <HAL_ADC_Init+0x21a>
 8010d9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8010d9e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4918      	ldr	r1, [pc, #96]	; (8010e08 <HAL_ADC_Init+0x284>)
 8010da6:	428b      	cmp	r3, r1
 8010da8:	d103      	bne.n	8010db2 <HAL_ADC_Init+0x22e>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010db0:	e003      	b.n	8010dba <HAL_ADC_Init+0x236>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010db8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8010dba:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010dbc:	6a3a      	ldr	r2, [r7, #32]
 8010dbe:	4313      	orrs	r3, r2
 8010dc0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d12f      	bne.n	8010e2c <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a0a      	ldr	r2, [pc, #40]	; (8010dfc <HAL_ADC_Init+0x278>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d007      	beq.n	8010de6 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dda:	3b01      	subs	r3, #1
 8010ddc:	045b      	lsls	r3, r3, #17
 8010dde:	6a3a      	ldr	r2, [r7, #32]
 8010de0:	4313      	orrs	r3, r2
 8010de2:	623b      	str	r3, [r7, #32]
 8010de4:	e022      	b.n	8010e2c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d111      	bne.n	8010e14 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010df0:	6a3b      	ldr	r3, [r7, #32]
 8010df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010df6:	623b      	str	r3, [r7, #32]
 8010df8:	e018      	b.n	8010e2c <HAL_ADC_Init+0x2a8>
 8010dfa:	bf00      	nop
 8010dfc:	46021000 	.word	0x46021000
 8010e00:	20000028 	.word	0x20000028
 8010e04:	053e2d63 	.word	0x053e2d63
 8010e08:	42028000 	.word	0x42028000
 8010e0c:	42028308 	.word	0x42028308
 8010e10:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e18:	f043 0220 	orr.w	r2, r3, #32
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e24:	f043 0201 	orr.w	r2, r3, #1
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4a93      	ldr	r2, [pc, #588]	; (8011080 <HAL_ADC_Init+0x4fc>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d018      	beq.n	8010e68 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d009      	beq.n	8010e52 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e42:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	6a3a      	ldr	r2, [r7, #32]
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	68da      	ldr	r2, [r3, #12]
 8010e58:	4b8a      	ldr	r3, [pc, #552]	; (8011084 <HAL_ADC_Init+0x500>)
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	6812      	ldr	r2, [r2, #0]
 8010e60:	6a39      	ldr	r1, [r7, #32]
 8010e62:	430b      	orrs	r3, r1
 8010e64:	60d3      	str	r3, [r2, #12]
 8010e66:	e033      	b.n	8010ed0 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d009      	beq.n	8010e84 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e74:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	6a3a      	ldr	r2, [r7, #32]
 8010e80:	4313      	orrs	r3, r2
 8010e82:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8010e8e:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	6812      	ldr	r2, [r2, #0]
 8010e96:	6a39      	ldr	r1, [r7, #32]
 8010e98:	430b      	orrs	r3, r1
 8010e9a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6a1b      	ldr	r3, [r3, #32]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d008      	beq.n	8010eb6 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6a1a      	ldr	r2, [r3, #32]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	430a      	orrs	r2, r1
 8010eb4:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d008      	beq.n	8010ed0 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	430a      	orrs	r2, r1
 8010ece:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4a6a      	ldr	r2, [pc, #424]	; (8011080 <HAL_ADC_Init+0x4fc>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	f000 8093 	beq.w	8011002 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fe28 	bl	8010b36 <LL_ADC_REG_IsConversionOngoing>
 8010ee6:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7ff fe35 	bl	8010b5c <LL_ADC_INJ_IsConversionOngoing>
 8010ef2:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d161      	bne.n	8010fbe <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d15e      	bne.n	8010fbe <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	7f1b      	ldrb	r3, [r3, #28]
 8010f04:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	495f      	ldr	r1, [pc, #380]	; (8011088 <HAL_ADC_Init+0x504>)
 8010f0c:	428b      	cmp	r3, r1
 8010f0e:	d102      	bne.n	8010f16 <HAL_ADC_Init+0x392>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f14:	e002      	b.n	8010f1c <HAL_ADC_Init+0x398>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f1a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f2a:	f023 0303 	bic.w	r3, r3, #3
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	6812      	ldr	r2, [r2, #0]
 8010f32:	6a39      	ldr	r1, [r7, #32]
 8010f34:	430b      	orrs	r3, r1
 8010f36:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d007      	beq.n	8010f50 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681a      	ldr	r2, [r3, #0]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	4610      	mov	r0, r2
 8010f4c:	f7ff fbfd 	bl	801074a <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d11e      	bne.n	8010f98 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f5e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	691a      	ldr	r2, [r3, #16]
 8010f66:	4b49      	ldr	r3, [pc, #292]	; (801108c <HAL_ADC_Init+0x508>)
 8010f68:	4013      	ands	r3, r2
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8010f6e:	0411      	lsls	r1, r2, #16
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010f74:	4311      	orrs	r1, r2
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8010f7a:	4311      	orrs	r1, r2
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010f80:	4311      	orrs	r1, r2
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010f86:	0892      	lsrs	r2, r2, #2
 8010f88:	430a      	orrs	r2, r1
 8010f8a:	431a      	orrs	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f042 0201 	orr.w	r2, r2, #1
 8010f94:	611a      	str	r2, [r3, #16]
 8010f96:	e007      	b.n	8010fa8 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	691a      	ldr	r2, [r3, #16]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f022 0201 	bic.w	r2, r2, #1
 8010fa6:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	691b      	ldr	r3, [r3, #16]
 8010fae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	430a      	orrs	r2, r1
 8010fbc:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	691b      	ldr	r3, [r3, #16]
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d10c      	bne.n	8010fe0 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fcc:	f023 010f 	bic.w	r1, r3, #15
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fd4:	1e5a      	subs	r2, r3, #1
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	430a      	orrs	r2, r1
 8010fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8010fde:	e007      	b.n	8010ff0 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	f022 020f 	bic.w	r2, r2, #15
 8010fee:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ff4:	f023 0303 	bic.w	r3, r3, #3
 8010ff8:	f043 0201 	orr.w	r2, r3, #1
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8011000:	e0b2      	b.n	8011168 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 801100a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8011010:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8011016:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8011018:	69fa      	ldr	r2, [r7, #28]
 801101a:	4313      	orrs	r3, r2
 801101c:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011024:	2b01      	cmp	r3, #1
 8011026:	d103      	bne.n	8011030 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	f043 0301 	orr.w	r3, r3, #1
 801102e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	691a      	ldr	r2, [r3, #16]
 8011036:	4b16      	ldr	r3, [pc, #88]	; (8011090 <HAL_ADC_Init+0x50c>)
 8011038:	4013      	ands	r3, r2
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	6812      	ldr	r2, [r2, #0]
 801103e:	69f9      	ldr	r1, [r7, #28]
 8011040:	430b      	orrs	r3, r1
 8011042:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6818      	ldr	r0, [r3, #0]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801104c:	461a      	mov	r2, r3
 801104e:	2100      	movs	r1, #0
 8011050:	f7ff fb9e 	bl	8010790 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6818      	ldr	r0, [r3, #0]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801105c:	461a      	mov	r2, r3
 801105e:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8011062:	f7ff fb95 	bl	8010790 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	691b      	ldr	r3, [r3, #16]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d112      	bne.n	8011094 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f062 020f 	orn	r2, r2, #15
 801107c:	629a      	str	r2, [r3, #40]	; 0x28
 801107e:	e044      	b.n	801110a <HAL_ADC_Init+0x586>
 8011080:	46021000 	.word	0x46021000
 8011084:	fff0c013 	.word	0xfff0c013
 8011088:	42028000 	.word	0x42028000
 801108c:	fc00f81e 	.word	0xfc00f81e
 8011090:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	691b      	ldr	r3, [r3, #16]
 8011098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801109c:	d135      	bne.n	801110a <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 801109e:	2300      	movs	r3, #0
 80110a0:	61bb      	str	r3, [r7, #24]
 80110a2:	e00d      	b.n	80110c0 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	fa22 f303 	lsr.w	r3, r2, r3
 80110b2:	f003 030f 	and.w	r3, r3, #15
 80110b6:	2b0f      	cmp	r3, #15
 80110b8:	d006      	beq.n	80110c8 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	3301      	adds	r3, #1
 80110be:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	2b07      	cmp	r3, #7
 80110c4:	d9ee      	bls.n	80110a4 <HAL_ADC_Init+0x520>
 80110c6:	e000      	b.n	80110ca <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 80110c8:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d108      	bne.n	80110e2 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f062 020f 	orn	r2, r2, #15
 80110de:	629a      	str	r2, [r3, #40]	; 0x28
 80110e0:	e013      	b.n	801110a <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ec:	3b01      	subs	r3, #1
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	f003 031c 	and.w	r3, r3, #28
 80110f4:	f06f 020f 	mvn.w	r2, #15
 80110f8:	fa02 f103 	lsl.w	r1, r2, r3
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	430a      	orrs	r2, r1
 8011108:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	68da      	ldr	r2, [r3, #12]
 8011110:	4b18      	ldr	r3, [pc, #96]	; (8011174 <HAL_ADC_Init+0x5f0>)
 8011112:	4013      	ands	r3, r2
 8011114:	6a3a      	ldr	r2, [r7, #32]
 8011116:	429a      	cmp	r2, r3
 8011118:	d10b      	bne.n	8011132 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2200      	movs	r2, #0
 801111e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011124:	f023 0303 	bic.w	r3, r3, #3
 8011128:	f043 0201 	orr.w	r2, r3, #1
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8011130:	e01a      	b.n	8011168 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011136:	f023 0312 	bic.w	r3, r3, #18
 801113a:	f043 0210 	orr.w	r2, r3, #16
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011146:	f043 0201 	orr.w	r2, r3, #1
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 801114e:	2301      	movs	r3, #1
 8011150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8011154:	e008      	b.n	8011168 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801115a:	f043 0210 	orr.w	r2, r3, #16
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8011162:	2301      	movs	r3, #1
 8011164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8011168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801116c:	4618      	mov	r0, r3
 801116e:	3728      	adds	r7, #40	; 0x28
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	833ffff3 	.word	0x833ffff3

08011178 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b0a4      	sub	sp, #144	; 0x90
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011182:	2300      	movs	r3, #0
 8011184:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a94      	ldr	r2, [pc, #592]	; (80113e4 <HAL_ADC_ConfigChannel+0x26c>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d103      	bne.n	801119e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	691b      	ldr	r3, [r3, #16]
 801119a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d102      	bne.n	80111ae <HAL_ADC_ConfigChannel+0x36>
 80111a8:	2302      	movs	r3, #2
 80111aa:	f000 bd4b 	b.w	8011c44 <HAL_ADC_ConfigChannel+0xacc>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2201      	movs	r2, #1
 80111b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7ff fcbb 	bl	8010b36 <LL_ADC_REG_IsConversionOngoing>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	f040 852b 	bne.w	8011c1e <HAL_ADC_ConfigChannel+0xaa6>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	4a85      	ldr	r2, [pc, #532]	; (80113e4 <HAL_ADC_ConfigChannel+0x26c>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	f000 827f 	beq.w	80116d2 <HAL_ADC_ConfigChannel+0x55a>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d108      	bne.n	80111f2 <HAL_ADC_ConfigChannel+0x7a>
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	0e9b      	lsrs	r3, r3, #26
 80111e6:	f003 031f 	and.w	r3, r3, #31
 80111ea:	2201      	movs	r2, #1
 80111ec:	fa02 f303 	lsl.w	r3, r2, r3
 80111f0:	e016      	b.n	8011220 <HAL_ADC_ConfigChannel+0xa8>
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80111f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80111fa:	fa93 f3a3 	rbit	r3, r3
 80111fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8011200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011202:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8011204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011206:	2b00      	cmp	r3, #0
 8011208:	d101      	bne.n	801120e <HAL_ADC_ConfigChannel+0x96>
    return 32U;
 801120a:	2320      	movs	r3, #32
 801120c:	e003      	b.n	8011216 <HAL_ADC_ConfigChannel+0x9e>
  return __builtin_clz(value);
 801120e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011210:	fab3 f383 	clz	r3, r3
 8011214:	b2db      	uxtb	r3, r3
 8011216:	f003 031f 	and.w	r3, r3, #31
 801121a:	2201      	movs	r2, #1
 801121c:	fa02 f303 	lsl.w	r3, r2, r3
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	6812      	ldr	r2, [r2, #0]
 8011224:	69d1      	ldr	r1, [r2, #28]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	6812      	ldr	r2, [r2, #0]
 801122a:	430b      	orrs	r3, r1
 801122c:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6818      	ldr	r0, [r3, #0]
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	6859      	ldr	r1, [r3, #4]
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	461a      	mov	r2, r3
 801123c:	f7ff fac8 	bl	80107d0 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4618      	mov	r0, r3
 8011246:	f7ff fc76 	bl	8010b36 <LL_ADC_REG_IsConversionOngoing>
 801124a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4618      	mov	r0, r3
 8011254:	f7ff fc82 	bl	8010b5c <LL_ADC_INJ_IsConversionOngoing>
 8011258:	67f8      	str	r0, [r7, #124]	; 0x7c
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801125a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801125e:	2b00      	cmp	r3, #0
 8011260:	f040 8087 	bne.w	8011372 <HAL_ADC_ConfigChannel+0x1fa>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8011264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011266:	2b00      	cmp	r3, #0
 8011268:	f040 8083 	bne.w	8011372 <HAL_ADC_ConfigChannel+0x1fa>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6818      	ldr	r0, [r3, #0]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	6819      	ldr	r1, [r3, #0]
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	461a      	mov	r2, r3
 801127a:	f7ff fb55 	bl	8010928 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	695a      	ldr	r2, [r3, #20]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	089b      	lsrs	r3, r3, #2
 801128a:	f003 0303 	and.w	r3, r3, #3
 801128e:	005b      	lsls	r3, r3, #1
 8011290:	fa02 f303 	lsl.w	r3, r2, r3
 8011294:	67bb      	str	r3, [r7, #120]	; 0x78

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	691b      	ldr	r3, [r3, #16]
 801129a:	2b04      	cmp	r3, #4
 801129c:	d021      	beq.n	80112e2 <HAL_ADC_ConfigChannel+0x16a>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6818      	ldr	r0, [r3, #0]
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	6919      	ldr	r1, [r3, #16]
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112ac:	f7ff f9f6 	bl	801069c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6818      	ldr	r0, [r3, #0]
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	6919      	ldr	r1, [r3, #16]
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	69db      	ldr	r3, [r3, #28]
 80112bc:	461a      	mov	r2, r3
 80112be:	f7ff fa0e 	bl	80106de <LL_ADC_SetOffsetSign>
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSignedSaturation == ENABLE)             \
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	7e5b      	ldrb	r3, [r3, #25]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d102      	bne.n	80112d8 <HAL_ADC_ConfigChannel+0x160>
 80112d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80112d6:	e000      	b.n	80112da <HAL_ADC_ConfigChannel+0x162>
 80112d8:	2300      	movs	r3, #0
 80112da:	461a      	mov	r2, r3
 80112dc:	f7ff fa1a 	bl	8010714 <LL_ADC_SetOffsetSignedSaturation>
 80112e0:	e047      	b.n	8011372 <HAL_ADC_ConfigChannel+0x1fa>
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
            If this is the case, offset OFRx is disabled since
            pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80112e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	06db      	lsls	r3, r3, #27
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d107      	bne.n	8011306 <HAL_ADC_ConfigChannel+0x18e>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSAT);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8011304:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801130c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	06db      	lsls	r3, r3, #27
 8011316:	429a      	cmp	r2, r3
 8011318:	d107      	bne.n	801132a <HAL_ADC_ConfigChannel+0x1b2>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSAT);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8011328:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011330:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	06db      	lsls	r3, r3, #27
 801133a:	429a      	cmp	r2, r3
 801133c:	d107      	bne.n	801134e <HAL_ADC_ConfigChannel+0x1d6>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSAT);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 801134c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011354:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	06db      	lsls	r3, r3, #27
 801135e:	429a      	cmp	r2, r3
 8011360:	d107      	bne.n	8011372 <HAL_ADC_ConfigChannel+0x1fa>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSAT);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8011370:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4618      	mov	r0, r3
 8011378:	f7ff fbca 	bl	8010b10 <LL_ADC_IsEnabled>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	f040 845a 	bne.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6818      	ldr	r0, [r3, #0]
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	6819      	ldr	r1, [r3, #0]
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	461a      	mov	r2, r3
 8011392:	f7ff fb4b 	bl	8010a2c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801139e:	f040 80d9 	bne.w	8011554 <HAL_ADC_ConfigChannel+0x3dc>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10b      	bne.n	80113c6 <HAL_ADC_ConfigChannel+0x24e>
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	0e9b      	lsrs	r3, r3, #26
 80113b4:	3301      	adds	r3, #1
 80113b6:	f003 031f 	and.w	r3, r3, #31
 80113ba:	2b09      	cmp	r3, #9
 80113bc:	bf94      	ite	ls
 80113be:	2301      	movls	r3, #1
 80113c0:	2300      	movhi	r3, #0
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	e01c      	b.n	8011400 <HAL_ADC_ConfigChannel+0x288>
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80113cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80113ce:	fa93 f3a3 	rbit	r3, r3
 80113d2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80113d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80113d6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80113d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d104      	bne.n	80113e8 <HAL_ADC_ConfigChannel+0x270>
    return 32U;
 80113de:	2320      	movs	r3, #32
 80113e0:	e006      	b.n	80113f0 <HAL_ADC_ConfigChannel+0x278>
 80113e2:	bf00      	nop
 80113e4:	46021000 	.word	0x46021000
  return __builtin_clz(value);
 80113e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80113ea:	fab3 f383 	clz	r3, r3
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	3301      	adds	r3, #1
 80113f2:	f003 031f 	and.w	r3, r3, #31
 80113f6:	2b09      	cmp	r3, #9
 80113f8:	bf94      	ite	ls
 80113fa:	2301      	movls	r3, #1
 80113fc:	2300      	movhi	r3, #0
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	2b00      	cmp	r3, #0
 8011402:	d04d      	beq.n	80114a0 <HAL_ADC_ConfigChannel+0x328>
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801140c:	2b00      	cmp	r3, #0
 801140e:	d107      	bne.n	8011420 <HAL_ADC_ConfigChannel+0x2a8>
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	0e9b      	lsrs	r3, r3, #26
 8011416:	3301      	adds	r3, #1
 8011418:	069b      	lsls	r3, r3, #26
 801141a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801141e:	e015      	b.n	801144c <HAL_ADC_ConfigChannel+0x2d4>
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011428:	fa93 f3a3 	rbit	r3, r3
 801142c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 801142e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011430:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8011432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011434:	2b00      	cmp	r3, #0
 8011436:	d101      	bne.n	801143c <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8011438:	2320      	movs	r3, #32
 801143a:	e003      	b.n	8011444 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 801143c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801143e:	fab3 f383 	clz	r3, r3
 8011442:	b2db      	uxtb	r3, r3
 8011444:	3301      	adds	r3, #1
 8011446:	069b      	lsls	r3, r3, #26
 8011448:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011454:	2b00      	cmp	r3, #0
 8011456:	d109      	bne.n	801146c <HAL_ADC_ConfigChannel+0x2f4>
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	0e9b      	lsrs	r3, r3, #26
 801145e:	3301      	adds	r3, #1
 8011460:	f003 031f 	and.w	r3, r3, #31
 8011464:	2101      	movs	r1, #1
 8011466:	fa01 f303 	lsl.w	r3, r1, r3
 801146a:	e017      	b.n	801149c <HAL_ADC_ConfigChannel+0x324>
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011474:	fa93 f3a3 	rbit	r3, r3
 8011478:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 801147a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801147c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 801147e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011480:	2b00      	cmp	r3, #0
 8011482:	d101      	bne.n	8011488 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8011484:	2320      	movs	r3, #32
 8011486:	e003      	b.n	8011490 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8011488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801148a:	fab3 f383 	clz	r3, r3
 801148e:	b2db      	uxtb	r3, r3
 8011490:	3301      	adds	r3, #1
 8011492:	f003 031f 	and.w	r3, r3, #31
 8011496:	2101      	movs	r1, #1
 8011498:	fa01 f303 	lsl.w	r3, r1, r3
 801149c:	4313      	orrs	r3, r2
 801149e:	e04e      	b.n	801153e <HAL_ADC_ConfigChannel+0x3c6>
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d107      	bne.n	80114bc <HAL_ADC_ConfigChannel+0x344>
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	0e9b      	lsrs	r3, r3, #26
 80114b2:	3301      	adds	r3, #1
 80114b4:	069b      	lsls	r3, r3, #26
 80114b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80114ba:	e015      	b.n	80114e8 <HAL_ADC_ConfigChannel+0x370>
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80114c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114c4:	fa93 f3a3 	rbit	r3, r3
 80114c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80114ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80114ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d101      	bne.n	80114d8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80114d4:	2320      	movs	r3, #32
 80114d6:	e003      	b.n	80114e0 <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 80114d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114da:	fab3 f383 	clz	r3, r3
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	3301      	adds	r3, #1
 80114e2:	069b      	lsls	r3, r3, #26
 80114e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d109      	bne.n	8011508 <HAL_ADC_ConfigChannel+0x390>
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	0e9b      	lsrs	r3, r3, #26
 80114fa:	3301      	adds	r3, #1
 80114fc:	f003 031f 	and.w	r3, r3, #31
 8011500:	2101      	movs	r1, #1
 8011502:	fa01 f303 	lsl.w	r3, r1, r3
 8011506:	e017      	b.n	8011538 <HAL_ADC_ConfigChannel+0x3c0>
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011510:	fa93 f3a3 	rbit	r3, r3
 8011514:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 801151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151c:	2b00      	cmp	r3, #0
 801151e:	d101      	bne.n	8011524 <HAL_ADC_ConfigChannel+0x3ac>
    return 32U;
 8011520:	2320      	movs	r3, #32
 8011522:	e003      	b.n	801152c <HAL_ADC_ConfigChannel+0x3b4>
  return __builtin_clz(value);
 8011524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011526:	fab3 f383 	clz	r3, r3
 801152a:	b2db      	uxtb	r3, r3
 801152c:	3301      	adds	r3, #1
 801152e:	f003 031f 	and.w	r3, r3, #31
 8011532:	2101      	movs	r1, #1
 8011534:	fa01 f303 	lsl.w	r3, r1, r3
 8011538:	4313      	orrs	r3, r2
 801153a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801153e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6818      	ldr	r0, [r3, #0]
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	461a      	mov	r2, r3
 801154c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011550:	f7ff f9ea 	bl	8010928 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	f280 836d 	bge.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4a98      	ldr	r2, [pc, #608]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 8011564:	4293      	cmp	r3, r2
 8011566:	d101      	bne.n	801156c <HAL_ADC_ConfigChannel+0x3f4>
 8011568:	4b97      	ldr	r3, [pc, #604]	; (80117c8 <HAL_ADC_ConfigChannel+0x650>)
 801156a:	e000      	b.n	801156e <HAL_ADC_ConfigChannel+0x3f6>
 801156c:	4b97      	ldr	r3, [pc, #604]	; (80117cc <HAL_ADC_ConfigChannel+0x654>)
 801156e:	4618      	mov	r0, r3
 8011570:	f7ff f886 	bl	8010680 <LL_ADC_GetCommonPathInternalCh>
 8011574:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a91      	ldr	r2, [pc, #580]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 801157e:	4293      	cmp	r3, r2
 8011580:	d109      	bne.n	8011596 <HAL_ADC_ConfigChannel+0x41e>
 8011582:	4890      	ldr	r0, [pc, #576]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 8011584:	f7ff fac4 	bl	8010b10 <LL_ADC_IsEnabled>
 8011588:	4603      	mov	r3, r0
 801158a:	2b00      	cmp	r3, #0
 801158c:	bf0c      	ite	eq
 801158e:	2301      	moveq	r3, #1
 8011590:	2300      	movne	r3, #0
 8011592:	b2db      	uxtb	r3, r3
 8011594:	e008      	b.n	80115a8 <HAL_ADC_ConfigChannel+0x430>
 8011596:	488e      	ldr	r0, [pc, #568]	; (80117d0 <HAL_ADC_ConfigChannel+0x658>)
 8011598:	f7ff faba 	bl	8010b10 <LL_ADC_IsEnabled>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	bf0c      	ite	eq
 80115a2:	2301      	moveq	r3, #1
 80115a4:	2300      	movne	r3, #0
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 8088 	beq.w	80116be <HAL_ADC_ConfigChannel+0x546>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	4a88      	ldr	r2, [pc, #544]	; (80117d4 <HAL_ADC_ConfigChannel+0x65c>)
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d132      	bne.n	801161e <HAL_ADC_ConfigChannel+0x4a6>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80115b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d12c      	bne.n	801161e <HAL_ADC_ConfigChannel+0x4a6>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a7e      	ldr	r2, [pc, #504]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d005      	beq.n	80115da <HAL_ADC_ConfigChannel+0x462>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	4a7f      	ldr	r2, [pc, #508]	; (80117d0 <HAL_ADC_ConfigChannel+0x658>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	f040 832c 	bne.w	8011c32 <HAL_ADC_ConfigChannel+0xaba>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	4a79      	ldr	r2, [pc, #484]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d101      	bne.n	80115e8 <HAL_ADC_ConfigChannel+0x470>
 80115e4:	4a78      	ldr	r2, [pc, #480]	; (80117c8 <HAL_ADC_ConfigChannel+0x650>)
 80115e6:	e000      	b.n	80115ea <HAL_ADC_ConfigChannel+0x472>
 80115e8:	4a78      	ldr	r2, [pc, #480]	; (80117cc <HAL_ADC_ConfigChannel+0x654>)
 80115ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80115f2:	4619      	mov	r1, r3
 80115f4:	4610      	mov	r0, r2
 80115f6:	f7ff f830 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80115fa:	4b77      	ldr	r3, [pc, #476]	; (80117d8 <HAL_ADC_ConfigChannel+0x660>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	099b      	lsrs	r3, r3, #6
 8011600:	4a76      	ldr	r2, [pc, #472]	; (80117dc <HAL_ADC_ConfigChannel+0x664>)
 8011602:	fba2 2303 	umull	r2, r3, r2, r3
 8011606:	099b      	lsrs	r3, r3, #6
 8011608:	3301      	adds	r3, #1
 801160a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 801160c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 801160e:	e002      	b.n	8011616 <HAL_ADC_ConfigChannel+0x49e>
                {
                  wait_loop_index--;
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	3b01      	subs	r3, #1
 8011614:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1f9      	bne.n	8011610 <HAL_ADC_ConfigChannel+0x498>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801161c:	e309      	b.n	8011c32 <HAL_ADC_ConfigChannel+0xaba>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	4a6f      	ldr	r2, [pc, #444]	; (80117e0 <HAL_ADC_ConfigChannel+0x668>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d121      	bne.n	801166c <HAL_ADC_ConfigChannel+0x4f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8011628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801162c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8011630:	2b00      	cmp	r3, #0
 8011632:	d11b      	bne.n	801166c <HAL_ADC_ConfigChannel+0x4f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4a62      	ldr	r2, [pc, #392]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 801163a:	4293      	cmp	r3, r2
 801163c:	d005      	beq.n	801164a <HAL_ADC_ConfigChannel+0x4d2>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	4a63      	ldr	r2, [pc, #396]	; (80117d0 <HAL_ADC_ConfigChannel+0x658>)
 8011644:	4293      	cmp	r3, r2
 8011646:	f040 82f6 	bne.w	8011c36 <HAL_ADC_ConfigChannel+0xabe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	4a5d      	ldr	r2, [pc, #372]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d101      	bne.n	8011658 <HAL_ADC_ConfigChannel+0x4e0>
 8011654:	4a5c      	ldr	r2, [pc, #368]	; (80117c8 <HAL_ADC_ConfigChannel+0x650>)
 8011656:	e000      	b.n	801165a <HAL_ADC_ConfigChannel+0x4e2>
 8011658:	4a5c      	ldr	r2, [pc, #368]	; (80117cc <HAL_ADC_ConfigChannel+0x654>)
 801165a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801165e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011662:	4619      	mov	r1, r3
 8011664:	4610      	mov	r0, r2
 8011666:	f7fe fff8 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801166a:	e2e4      	b.n	8011c36 <HAL_ADC_ConfigChannel+0xabe>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a5c      	ldr	r2, [pc, #368]	; (80117e4 <HAL_ADC_ConfigChannel+0x66c>)
 8011672:	4293      	cmp	r3, r2
 8011674:	f040 82e0 	bne.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8011678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801167c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011680:	2b00      	cmp	r3, #0
 8011682:	f040 82d9 	bne.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	4a4e      	ldr	r2, [pc, #312]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d005      	beq.n	801169c <HAL_ADC_ConfigChannel+0x524>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4a4e      	ldr	r2, [pc, #312]	; (80117d0 <HAL_ADC_ConfigChannel+0x658>)
 8011696:	4293      	cmp	r3, r2
 8011698:	f040 82ce 	bne.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4a48      	ldr	r2, [pc, #288]	; (80117c4 <HAL_ADC_ConfigChannel+0x64c>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d101      	bne.n	80116aa <HAL_ADC_ConfigChannel+0x532>
 80116a6:	4a48      	ldr	r2, [pc, #288]	; (80117c8 <HAL_ADC_ConfigChannel+0x650>)
 80116a8:	e000      	b.n	80116ac <HAL_ADC_ConfigChannel+0x534>
 80116aa:	4a48      	ldr	r2, [pc, #288]	; (80117cc <HAL_ADC_ConfigChannel+0x654>)
 80116ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80116b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80116b4:	4619      	mov	r1, r3
 80116b6:	4610      	mov	r0, r2
 80116b8:	f7fe ffcf 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
 80116bc:	e2bc      	b.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116c2:	f043 0220 	orr.w	r2, r3, #32
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 80116ca:	2301      	movs	r3, #1
 80116cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80116d0:	e2b2      	b.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
      }
    }
    else
    {
      /* Remap Internal Channels for Cut1 vs Cut2 (or 4M) */
      tmp_channel = pConfig->Channel;
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#if !defined (ADC2)
      if (HAL_GetREVID() == REV_ID_A) /* STM32U5 silicon Rev.A */
 80116da:	f7fe ff51 	bl	8010580 <HAL_GetREVID>
 80116de:	4603      	mov	r3, r0
 80116e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116e4:	d130      	bne.n	8011748 <HAL_ADC_ConfigChannel+0x5d0>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	4a3f      	ldr	r2, [pc, #252]	; (80117e8 <HAL_ADC_ConfigChannel+0x670>)
 80116ec:	4293      	cmp	r3, r2
 80116ee:	d103      	bne.n	80116f8 <HAL_ADC_ConfigChannel+0x580>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 80116f0:	4b3e      	ldr	r3, [pc, #248]	; (80117ec <HAL_ADC_ConfigChannel+0x674>)
 80116f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80116f6:	e027      	b.n	8011748 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	4a3c      	ldr	r2, [pc, #240]	; (80117f0 <HAL_ADC_ConfigChannel+0x678>)
 80116fe:	4293      	cmp	r3, r2
 8011700:	d103      	bne.n	801170a <HAL_ADC_ConfigChannel+0x592>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8011702:	4b3c      	ldr	r3, [pc, #240]	; (80117f4 <HAL_ADC_ConfigChannel+0x67c>)
 8011704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011708:	e01e      	b.n	8011748 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4a3a      	ldr	r2, [pc, #232]	; (80117f8 <HAL_ADC_ConfigChannel+0x680>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d103      	bne.n	801171c <HAL_ADC_ConfigChannel+0x5a4>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8011714:	4b39      	ldr	r3, [pc, #228]	; (80117fc <HAL_ADC_ConfigChannel+0x684>)
 8011716:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801171a:	e015      	b.n	8011748 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	4a37      	ldr	r2, [pc, #220]	; (8011800 <HAL_ADC_ConfigChannel+0x688>)
 8011722:	4293      	cmp	r3, r2
 8011724:	d103      	bne.n	801172e <HAL_ADC_ConfigChannel+0x5b6>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8011726:	4b37      	ldr	r3, [pc, #220]	; (8011804 <HAL_ADC_ConfigChannel+0x68c>)
 8011728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801172c:	e00c      	b.n	8011748 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	4a35      	ldr	r2, [pc, #212]	; (8011808 <HAL_ADC_ConfigChannel+0x690>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d103      	bne.n	8011740 <HAL_ADC_ConfigChannel+0x5c8>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8011738:	4b31      	ldr	r3, [pc, #196]	; (8011800 <HAL_ADC_ConfigChannel+0x688>)
 801173a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801173e:	e003      	b.n	8011748 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	2b02      	cmp	r3, #2
 801174e:	f000 81a3 	beq.w	8011a98 <HAL_ADC_ConfigChannel+0x920>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801175a:	d004      	beq.n	8011766 <HAL_ADC_ConfigChannel+0x5ee>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8011760:	4a2a      	ldr	r2, [pc, #168]	; (801180c <HAL_ADC_ConfigChannel+0x694>)
 8011762:	4293      	cmp	r3, r2
 8011764:	d107      	bne.n	8011776 <HAL_ADC_ConfigChannel+0x5fe>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801176e:	4618      	mov	r0, r3
 8011770:	f7ff f88e 	bl	8010890 <LL_ADC_REG_SetSequencerChAdd>
 8011774:	e0c2      	b.n	80118fc <HAL_ADC_ConfigChannel+0x784>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	f003 031f 	and.w	r3, r3, #31
 8011784:	210f      	movs	r1, #15
 8011786:	fa01 f303 	lsl.w	r3, r1, r3
 801178a:	43db      	mvns	r3, r3
 801178c:	401a      	ands	r2, r3
 801178e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011792:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011796:	2b00      	cmp	r3, #0
 8011798:	d105      	bne.n	80117a6 <HAL_ADC_ConfigChannel+0x62e>
 801179a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801179e:	0e9b      	lsrs	r3, r3, #26
 80117a0:	f003 031f 	and.w	r3, r3, #31
 80117a4:	e038      	b.n	8011818 <HAL_ADC_ConfigChannel+0x6a0>
 80117a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80117aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80117ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ae:	fa93 f3a3 	rbit	r3, r3
 80117b2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80117b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80117b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d128      	bne.n	8011810 <HAL_ADC_ConfigChannel+0x698>
    return 32U;
 80117be:	2320      	movs	r3, #32
 80117c0:	e02a      	b.n	8011818 <HAL_ADC_ConfigChannel+0x6a0>
 80117c2:	bf00      	nop
 80117c4:	42028000 	.word	0x42028000
 80117c8:	42028308 	.word	0x42028308
 80117cc:	46021308 	.word	0x46021308
 80117d0:	46021000 	.word	0x46021000
 80117d4:	ce080000 	.word	0xce080000
 80117d8:	20000028 	.word	0x20000028
 80117dc:	053e2d63 	.word	0x053e2d63
 80117e0:	ca040000 	.word	0xca040000
 80117e4:	80000001 	.word	0x80000001
 80117e8:	b6002000 	.word	0xb6002000
 80117ec:	da400000 	.word	0xda400000
 80117f0:	ba004000 	.word	0xba004000
 80117f4:	de800000 	.word	0xde800000
 80117f8:	b2001000 	.word	0xb2001000
 80117fc:	81000001 	.word	0x81000001
 8011800:	d6200000 	.word	0xd6200000
 8011804:	d2100000 	.word	0xd2100000
 8011808:	d7200000 	.word	0xd7200000
 801180c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	fab3 f383 	clz	r3, r3
 8011816:	b2db      	uxtb	r3, r3
 8011818:	6839      	ldr	r1, [r7, #0]
 801181a:	6849      	ldr	r1, [r1, #4]
 801181c:	f001 011f 	and.w	r1, r1, #31
 8011820:	408b      	lsls	r3, r1
 8011822:	431a      	orrs	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	089b      	lsrs	r3, r3, #2
 8011830:	1c5a      	adds	r2, r3, #1
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011836:	429a      	cmp	r2, r3
 8011838:	d860      	bhi.n	80118fc <HAL_ADC_ConfigChannel+0x784>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 801183a:	f7fe fea1 	bl	8010580 <HAL_GetREVID>
 801183e:	4603      	mov	r3, r0
 8011840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011844:	d851      	bhi.n	80118ea <HAL_ADC_ConfigChannel+0x772>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8011846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801184a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801184e:	2b00      	cmp	r3, #0
 8011850:	d10a      	bne.n	8011868 <HAL_ADC_ConfigChannel+0x6f0>
 8011852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011856:	0e9b      	lsrs	r3, r3, #26
 8011858:	f003 031f 	and.w	r3, r3, #31
 801185c:	2b13      	cmp	r3, #19
 801185e:	bf8c      	ite	hi
 8011860:	2301      	movhi	r3, #1
 8011862:	2300      	movls	r3, #0
 8011864:	b2db      	uxtb	r3, r3
 8011866:	e016      	b.n	8011896 <HAL_ADC_ConfigChannel+0x71e>
 8011868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801186c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	fa93 f3a3 	rbit	r3, r3
 8011874:	61bb      	str	r3, [r7, #24]
  return result;
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d101      	bne.n	8011884 <HAL_ADC_ConfigChannel+0x70c>
    return 32U;
 8011880:	2320      	movs	r3, #32
 8011882:	e003      	b.n	801188c <HAL_ADC_ConfigChannel+0x714>
  return __builtin_clz(value);
 8011884:	6a3b      	ldr	r3, [r7, #32]
 8011886:	fab3 f383 	clz	r3, r3
 801188a:	b2db      	uxtb	r3, r3
 801188c:	2b13      	cmp	r3, #19
 801188e:	bf8c      	ite	hi
 8011890:	2301      	movhi	r3, #1
 8011892:	2300      	movls	r3, #0
 8011894:	b2db      	uxtb	r3, r3
 8011896:	2b00      	cmp	r3, #0
 8011898:	d027      	beq.n	80118ea <HAL_ADC_ConfigChannel+0x772>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 801189a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801189e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d109      	bne.n	80118ba <HAL_ADC_ConfigChannel+0x742>
 80118a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80118aa:	0e9b      	lsrs	r3, r3, #26
 80118ac:	f003 031f 	and.w	r3, r3, #31
 80118b0:	3b09      	subs	r3, #9
 80118b2:	2201      	movs	r2, #1
 80118b4:	fa02 f303 	lsl.w	r3, r2, r3
 80118b8:	e015      	b.n	80118e6 <HAL_ADC_ConfigChannel+0x76e>
 80118ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80118be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	fa93 f3a3 	rbit	r3, r3
 80118c6:	60fb      	str	r3, [r7, #12]
  return result;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d101      	bne.n	80118d6 <HAL_ADC_ConfigChannel+0x75e>
    return 32U;
 80118d2:	2320      	movs	r3, #32
 80118d4:	e003      	b.n	80118de <HAL_ADC_ConfigChannel+0x766>
  return __builtin_clz(value);
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	fab3 f383 	clz	r3, r3
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	3b09      	subs	r3, #9
 80118e0:	2201      	movs	r2, #1
 80118e2:	fa02 f303 	lsl.w	r3, r2, r3
 80118e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6818      	ldr	r0, [r3, #0]
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80118f6:	4619      	mov	r1, r3
 80118f8:	f7fe ff6a 	bl	80107d0 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6818      	ldr	r0, [r3, #0]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	689b      	ldr	r3, [r3, #8]
 8011904:	461a      	mov	r2, r3
 8011906:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801190a:	f7ff f80d 	bl	8010928 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	f280 8190 	bge.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4a97      	ldr	r2, [pc, #604]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d101      	bne.n	8011926 <HAL_ADC_ConfigChannel+0x7ae>
 8011922:	4b97      	ldr	r3, [pc, #604]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 8011924:	e000      	b.n	8011928 <HAL_ADC_ConfigChannel+0x7b0>
 8011926:	4b97      	ldr	r3, [pc, #604]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 8011928:	4618      	mov	r0, r3
 801192a:	f7fe fea9 	bl	8010680 <LL_ADC_GetCommonPathInternalCh>
 801192e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4a94      	ldr	r2, [pc, #592]	; (8011b88 <HAL_ADC_ConfigChannel+0xa10>)
 8011938:	4293      	cmp	r3, r2
 801193a:	d126      	bne.n	801198a <HAL_ADC_ConfigChannel+0x812>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801193c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011944:	2b00      	cmp	r3, #0
 8011946:	d120      	bne.n	801198a <HAL_ADC_ConfigChannel+0x812>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	4a8b      	ldr	r2, [pc, #556]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d101      	bne.n	8011956 <HAL_ADC_ConfigChannel+0x7de>
 8011952:	4a8b      	ldr	r2, [pc, #556]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 8011954:	e000      	b.n	8011958 <HAL_ADC_ConfigChannel+0x7e0>
 8011956:	4a8b      	ldr	r2, [pc, #556]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 8011958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801195c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011960:	4619      	mov	r1, r3
 8011962:	4610      	mov	r0, r2
 8011964:	f7fe fe79 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8011968:	4b88      	ldr	r3, [pc, #544]	; (8011b8c <HAL_ADC_ConfigChannel+0xa14>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	099b      	lsrs	r3, r3, #6
 801196e:	4a88      	ldr	r2, [pc, #544]	; (8011b90 <HAL_ADC_ConfigChannel+0xa18>)
 8011970:	fba2 2303 	umull	r2, r3, r2, r3
 8011974:	099b      	lsrs	r3, r3, #6
 8011976:	005b      	lsls	r3, r3, #1
 8011978:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 801197a:	e002      	b.n	8011982 <HAL_ADC_ConfigChannel+0x80a>
            {
              wait_loop_index--;
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	3b01      	subs	r3, #1
 8011980:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1f9      	bne.n	801197c <HAL_ADC_ConfigChannel+0x804>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8011988:	e067      	b.n	8011a5a <HAL_ADC_ConfigChannel+0x8e2>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4a81      	ldr	r2, [pc, #516]	; (8011b94 <HAL_ADC_ConfigChannel+0xa1c>)
 8011990:	4293      	cmp	r3, r2
 8011992:	d116      	bne.n	80119c2 <HAL_ADC_ConfigChannel+0x84a>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8011994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 801199c:	2b00      	cmp	r3, #0
 801199e:	d110      	bne.n	80119c2 <HAL_ADC_ConfigChannel+0x84a>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	4a75      	ldr	r2, [pc, #468]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d101      	bne.n	80119ae <HAL_ADC_ConfigChannel+0x836>
 80119aa:	4a75      	ldr	r2, [pc, #468]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 80119ac:	e000      	b.n	80119b0 <HAL_ADC_ConfigChannel+0x838>
 80119ae:	4a75      	ldr	r2, [pc, #468]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 80119b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80119b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80119b8:	4619      	mov	r1, r3
 80119ba:	4610      	mov	r0, r2
 80119bc:	f7fe fe4d 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
 80119c0:	e04b      	b.n	8011a5a <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4a74      	ldr	r2, [pc, #464]	; (8011b98 <HAL_ADC_ConfigChannel+0xa20>)
 80119c8:	4293      	cmp	r3, r2
 80119ca:	d116      	bne.n	80119fa <HAL_ADC_ConfigChannel+0x882>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80119cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80119d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d110      	bne.n	80119fa <HAL_ADC_ConfigChannel+0x882>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4a67      	ldr	r2, [pc, #412]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d101      	bne.n	80119e6 <HAL_ADC_ConfigChannel+0x86e>
 80119e2:	4a67      	ldr	r2, [pc, #412]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 80119e4:	e000      	b.n	80119e8 <HAL_ADC_ConfigChannel+0x870>
 80119e6:	4a67      	ldr	r2, [pc, #412]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 80119e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80119ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80119f0:	4619      	mov	r1, r3
 80119f2:	4610      	mov	r0, r2
 80119f4:	f7fe fe31 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
 80119f8:	e02f      	b.n	8011a5a <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	4a67      	ldr	r2, [pc, #412]	; (8011b9c <HAL_ADC_ConfigChannel+0xa24>)
 8011a00:	4293      	cmp	r3, r2
 8011a02:	d12a      	bne.n	8011a5a <HAL_ADC_ConfigChannel+0x8e2>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8011a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d124      	bne.n	8011a5a <HAL_ADC_ConfigChannel+0x8e2>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	4a62      	ldr	r2, [pc, #392]	; (8011ba0 <HAL_ADC_ConfigChannel+0xa28>)
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d11f      	bne.n	8011a5a <HAL_ADC_ConfigChannel+0x8e2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4a57      	ldr	r2, [pc, #348]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d101      	bne.n	8011a28 <HAL_ADC_ConfigChannel+0x8b0>
 8011a24:	4a56      	ldr	r2, [pc, #344]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 8011a26:	e000      	b.n	8011a2a <HAL_ADC_ConfigChannel+0x8b2>
 8011a28:	4a56      	ldr	r2, [pc, #344]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 8011a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011a32:	4619      	mov	r1, r3
 8011a34:	4610      	mov	r0, r2
 8011a36:	f7fe fe10 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8011a3a:	f7fe fda1 	bl	8010580 <HAL_GetREVID>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a44:	d809      	bhi.n	8011a5a <HAL_ADC_ConfigChannel+0x8e2>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f042 0201 	orr.w	r2, r2, #1
 8011a56:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8011a5a:	f7fe fd91 	bl	8010580 <HAL_GetREVID>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a64:	f040 80e8 	bne.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4a4d      	ldr	r2, [pc, #308]	; (8011ba4 <HAL_ADC_ConfigChannel+0xa2c>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	f040 80e2 	bne.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8011a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f040 80db 	bne.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f042 0201 	orr.w	r2, r2, #1
 8011a92:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8011a96:	e0cf      	b.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	691b      	ldr	r3, [r3, #16]
 8011a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011aa0:	d004      	beq.n	8011aac <HAL_ADC_ConfigChannel+0x934>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8011aa6:	4a40      	ldr	r2, [pc, #256]	; (8011ba8 <HAL_ADC_ConfigChannel+0xa30>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d106      	bne.n	8011aba <HAL_ADC_ConfigChannel+0x942>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fe ff1e 	bl	80108f6 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	f280 80ba 	bge.w	8011c38 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	4a2c      	ldr	r2, [pc, #176]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 8011aca:	4293      	cmp	r3, r2
 8011acc:	d101      	bne.n	8011ad2 <HAL_ADC_ConfigChannel+0x95a>
 8011ace:	4b2c      	ldr	r3, [pc, #176]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 8011ad0:	e000      	b.n	8011ad4 <HAL_ADC_ConfigChannel+0x95c>
 8011ad2:	4b2c      	ldr	r3, [pc, #176]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7fe fdd3 	bl	8010680 <LL_ADC_GetCommonPathInternalCh>
 8011ada:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4a32      	ldr	r2, [pc, #200]	; (8011bac <HAL_ADC_ConfigChannel+0xa34>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d110      	bne.n	8011b0a <HAL_ADC_ConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	4a23      	ldr	r2, [pc, #140]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d101      	bne.n	8011af6 <HAL_ADC_ConfigChannel+0x97e>
 8011af2:	4a23      	ldr	r2, [pc, #140]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 8011af4:	e000      	b.n	8011af8 <HAL_ADC_ConfigChannel+0x980>
 8011af6:	4a23      	ldr	r2, [pc, #140]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 8011af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011afc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011b00:	4619      	mov	r1, r3
 8011b02:	4610      	mov	r0, r2
 8011b04:	f7fe fda9 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
 8011b08:	e06d      	b.n	8011be6 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	4a28      	ldr	r2, [pc, #160]	; (8011bb0 <HAL_ADC_ConfigChannel+0xa38>)
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d110      	bne.n	8011b36 <HAL_ADC_ConfigChannel+0x9be>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4a18      	ldr	r2, [pc, #96]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d101      	bne.n	8011b22 <HAL_ADC_ConfigChannel+0x9aa>
 8011b1e:	4a18      	ldr	r2, [pc, #96]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 8011b20:	e000      	b.n	8011b24 <HAL_ADC_ConfigChannel+0x9ac>
 8011b22:	4a18      	ldr	r2, [pc, #96]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 8011b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	4610      	mov	r0, r2
 8011b30:	f7fe fd93 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
 8011b34:	e057      	b.n	8011be6 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	4a17      	ldr	r2, [pc, #92]	; (8011b98 <HAL_ADC_ConfigChannel+0xa20>)
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d110      	bne.n	8011b62 <HAL_ADC_ConfigChannel+0x9ea>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4a0d      	ldr	r2, [pc, #52]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d101      	bne.n	8011b4e <HAL_ADC_ConfigChannel+0x9d6>
 8011b4a:	4a0d      	ldr	r2, [pc, #52]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 8011b4c:	e000      	b.n	8011b50 <HAL_ADC_ConfigChannel+0x9d8>
 8011b4e:	4a0d      	ldr	r2, [pc, #52]	; (8011b84 <HAL_ADC_ConfigChannel+0xa0c>)
 8011b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011b54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8011b58:	4619      	mov	r1, r3
 8011b5a:	4610      	mov	r0, r2
 8011b5c:	f7fe fd7d 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
 8011b60:	e041      	b.n	8011be6 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a0d      	ldr	r2, [pc, #52]	; (8011b9c <HAL_ADC_ConfigChannel+0xa24>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d13c      	bne.n	8011be6 <HAL_ADC_ConfigChannel+0xa6e>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a02      	ldr	r2, [pc, #8]	; (8011b7c <HAL_ADC_ConfigChannel+0xa04>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d11e      	bne.n	8011bb4 <HAL_ADC_ConfigChannel+0xa3c>
 8011b76:	4a02      	ldr	r2, [pc, #8]	; (8011b80 <HAL_ADC_ConfigChannel+0xa08>)
 8011b78:	e01d      	b.n	8011bb6 <HAL_ADC_ConfigChannel+0xa3e>
 8011b7a:	bf00      	nop
 8011b7c:	42028000 	.word	0x42028000
 8011b80:	42028308 	.word	0x42028308
 8011b84:	46021308 	.word	0x46021308
 8011b88:	b6002000 	.word	0xb6002000
 8011b8c:	20000028 	.word	0x20000028
 8011b90:	053e2d63 	.word	0x053e2d63
 8011b94:	ba004000 	.word	0xba004000
 8011b98:	80000001 	.word	0x80000001
 8011b9c:	b2001000 	.word	0xb2001000
 8011ba0:	46021000 	.word	0x46021000
 8011ba4:	d7200000 	.word	0xd7200000
 8011ba8:	80000010 	.word	0x80000010
 8011bac:	ce080000 	.word	0xce080000
 8011bb0:	ca040000 	.word	0xca040000
 8011bb4:	4a25      	ldr	r2, [pc, #148]	; (8011c4c <HAL_ADC_ConfigChannel+0xad4>)
 8011bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	4610      	mov	r0, r2
 8011bc2:	f7fe fd4a 	bl	801065a <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8011bc6:	f7fe fcdb 	bl	8010580 <HAL_GetREVID>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011bd0:	d809      	bhi.n	8011be6 <HAL_ADC_ConfigChannel+0xa6e>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f042 0201 	orr.w	r2, r2, #1
 8011be2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8011be6:	f7fe fccb 	bl	8010580 <HAL_GetREVID>
 8011bea:	4603      	mov	r3, r0
 8011bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011bf0:	d122      	bne.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4a16      	ldr	r2, [pc, #88]	; (8011c50 <HAL_ADC_ConfigChannel+0xad8>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d11d      	bne.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8011bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d117      	bne.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f042 0201 	orr.w	r2, r2, #1
 8011c18:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8011c1c:	e00c      	b.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c22:	f043 0220 	orr.w	r2, r3, #32
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8011c30:	e002      	b.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8011c32:	bf00      	nop
 8011c34:	e000      	b.n	8011c38 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8011c36:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8011c40:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3790      	adds	r7, #144	; 0x90
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	46021308 	.word	0x46021308
 8011c50:	d7200000 	.word	0xd7200000

08011c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b085      	sub	sp, #20
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f003 0307 	and.w	r3, r3, #7
 8011c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011c64:	4b0c      	ldr	r3, [pc, #48]	; (8011c98 <__NVIC_SetPriorityGrouping+0x44>)
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011c6a:	68ba      	ldr	r2, [r7, #8]
 8011c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011c70:	4013      	ands	r3, r2
 8011c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011c86:	4a04      	ldr	r2, [pc, #16]	; (8011c98 <__NVIC_SetPriorityGrouping+0x44>)
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	60d3      	str	r3, [r2, #12]
}
 8011c8c:	bf00      	nop
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr
 8011c98:	e000ed00 	.word	0xe000ed00

08011c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011ca0:	4b04      	ldr	r3, [pc, #16]	; (8011cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	0a1b      	lsrs	r3, r3, #8
 8011ca6:	f003 0307 	and.w	r3, r3, #7
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr
 8011cb4:	e000ed00 	.word	0xe000ed00

08011cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	db0b      	blt.n	8011ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011cca:	79fb      	ldrb	r3, [r7, #7]
 8011ccc:	f003 021f 	and.w	r2, r3, #31
 8011cd0:	4907      	ldr	r1, [pc, #28]	; (8011cf0 <__NVIC_EnableIRQ+0x38>)
 8011cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cd6:	095b      	lsrs	r3, r3, #5
 8011cd8:	2001      	movs	r0, #1
 8011cda:	fa00 f202 	lsl.w	r2, r0, r2
 8011cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8011ce2:	bf00      	nop
 8011ce4:	370c      	adds	r7, #12
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr
 8011cee:	bf00      	nop
 8011cf0:	e000e100 	.word	0xe000e100

08011cf4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b083      	sub	sp, #12
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	db12      	blt.n	8011d2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d06:	79fb      	ldrb	r3, [r7, #7]
 8011d08:	f003 021f 	and.w	r2, r3, #31
 8011d0c:	490a      	ldr	r1, [pc, #40]	; (8011d38 <__NVIC_DisableIRQ+0x44>)
 8011d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d12:	095b      	lsrs	r3, r3, #5
 8011d14:	2001      	movs	r0, #1
 8011d16:	fa00 f202 	lsl.w	r2, r0, r2
 8011d1a:	3320      	adds	r3, #32
 8011d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011d20:	f3bf 8f4f 	dsb	sy
}
 8011d24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d26:	f3bf 8f6f 	isb	sy
}
 8011d2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8011d2c:	bf00      	nop
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	e000e100 	.word	0xe000e100

08011d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	4603      	mov	r3, r0
 8011d44:	6039      	str	r1, [r7, #0]
 8011d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	db0a      	blt.n	8011d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	490c      	ldr	r1, [pc, #48]	; (8011d88 <__NVIC_SetPriority+0x4c>)
 8011d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d5a:	0112      	lsls	r2, r2, #4
 8011d5c:	b2d2      	uxtb	r2, r2
 8011d5e:	440b      	add	r3, r1
 8011d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011d64:	e00a      	b.n	8011d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	b2da      	uxtb	r2, r3
 8011d6a:	4908      	ldr	r1, [pc, #32]	; (8011d8c <__NVIC_SetPriority+0x50>)
 8011d6c:	79fb      	ldrb	r3, [r7, #7]
 8011d6e:	f003 030f 	and.w	r3, r3, #15
 8011d72:	3b04      	subs	r3, #4
 8011d74:	0112      	lsls	r2, r2, #4
 8011d76:	b2d2      	uxtb	r2, r2
 8011d78:	440b      	add	r3, r1
 8011d7a:	761a      	strb	r2, [r3, #24]
}
 8011d7c:	bf00      	nop
 8011d7e:	370c      	adds	r7, #12
 8011d80:	46bd      	mov	sp, r7
 8011d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d86:	4770      	bx	lr
 8011d88:	e000e100 	.word	0xe000e100
 8011d8c:	e000ed00 	.word	0xe000ed00

08011d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b089      	sub	sp, #36	; 0x24
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f003 0307 	and.w	r3, r3, #7
 8011da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	f1c3 0307 	rsb	r3, r3, #7
 8011daa:	2b04      	cmp	r3, #4
 8011dac:	bf28      	it	cs
 8011dae:	2304      	movcs	r3, #4
 8011db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011db2:	69fb      	ldr	r3, [r7, #28]
 8011db4:	3304      	adds	r3, #4
 8011db6:	2b06      	cmp	r3, #6
 8011db8:	d902      	bls.n	8011dc0 <NVIC_EncodePriority+0x30>
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	3b03      	subs	r3, #3
 8011dbe:	e000      	b.n	8011dc2 <NVIC_EncodePriority+0x32>
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	fa02 f303 	lsl.w	r3, r2, r3
 8011dce:	43da      	mvns	r2, r3
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	401a      	ands	r2, r3
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	fa01 f303 	lsl.w	r3, r1, r3
 8011de2:	43d9      	mvns	r1, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011de8:	4313      	orrs	r3, r2
         );
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3724      	adds	r7, #36	; 0x24
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr
	...

08011df8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011dfc:	f3bf 8f4f 	dsb	sy
}
 8011e00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8011e02:	4b06      	ldr	r3, [pc, #24]	; (8011e1c <__NVIC_SystemReset+0x24>)
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8011e0a:	4904      	ldr	r1, [pc, #16]	; (8011e1c <__NVIC_SystemReset+0x24>)
 8011e0c:	4b04      	ldr	r3, [pc, #16]	; (8011e20 <__NVIC_SystemReset+0x28>)
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011e12:	f3bf 8f4f 	dsb	sy
}
 8011e16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8011e18:	bf00      	nop
 8011e1a:	e7fd      	b.n	8011e18 <__NVIC_SystemReset+0x20>
 8011e1c:	e000ed00 	.word	0xe000ed00
 8011e20:	05fa0004 	.word	0x05fa0004

08011e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7ff ff11 	bl	8011c54 <__NVIC_SetPriorityGrouping>
}
 8011e32:	bf00      	nop
 8011e34:	3708      	adds	r7, #8
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}

08011e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b086      	sub	sp, #24
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	4603      	mov	r3, r0
 8011e42:	60b9      	str	r1, [r7, #8]
 8011e44:	607a      	str	r2, [r7, #4]
 8011e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011e48:	f7ff ff28 	bl	8011c9c <__NVIC_GetPriorityGrouping>
 8011e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	68b9      	ldr	r1, [r7, #8]
 8011e52:	6978      	ldr	r0, [r7, #20]
 8011e54:	f7ff ff9c 	bl	8011d90 <NVIC_EncodePriority>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e5e:	4611      	mov	r1, r2
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7ff ff6b 	bl	8011d3c <__NVIC_SetPriority>
}
 8011e66:	bf00      	nop
 8011e68:	3718      	adds	r7, #24
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011e6e:	b580      	push	{r7, lr}
 8011e70:	b082      	sub	sp, #8
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	4603      	mov	r3, r0
 8011e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7ff ff1b 	bl	8011cb8 <__NVIC_EnableIRQ>
}
 8011e82:	bf00      	nop
 8011e84:	3708      	adds	r7, #8
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	4603      	mov	r3, r0
 8011e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ff ff2b 	bl	8011cf4 <__NVIC_DisableIRQ>
}
 8011e9e:	bf00      	nop
 8011ea0:	3708      	adds	r7, #8
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}

08011ea6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8011ea6:	b580      	push	{r7, lr}
 8011ea8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8011eaa:	f7ff ffa5 	bl	8011df8 <__NVIC_SystemReset>
	...

08011eb0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8011eb8:	f7fe fb56 	bl	8010568 <HAL_GetTick>
 8011ebc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d101      	bne.n	8011ec8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e0e0      	b.n	801208a <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	4a6f      	ldr	r2, [pc, #444]	; (8012094 <HAL_DMA_Init+0x1e4>)
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	f000 809f 	beq.w	801201a <HAL_DMA_Init+0x16a>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	4a6d      	ldr	r2, [pc, #436]	; (8012098 <HAL_DMA_Init+0x1e8>)
 8011ee2:	4293      	cmp	r3, r2
 8011ee4:	f000 8099 	beq.w	801201a <HAL_DMA_Init+0x16a>
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	4a6b      	ldr	r2, [pc, #428]	; (801209c <HAL_DMA_Init+0x1ec>)
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	f000 8093 	beq.w	801201a <HAL_DMA_Init+0x16a>
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	4a69      	ldr	r2, [pc, #420]	; (80120a0 <HAL_DMA_Init+0x1f0>)
 8011efa:	4293      	cmp	r3, r2
 8011efc:	f000 808d 	beq.w	801201a <HAL_DMA_Init+0x16a>
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	4a67      	ldr	r2, [pc, #412]	; (80120a4 <HAL_DMA_Init+0x1f4>)
 8011f06:	4293      	cmp	r3, r2
 8011f08:	f000 8087 	beq.w	801201a <HAL_DMA_Init+0x16a>
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4a65      	ldr	r2, [pc, #404]	; (80120a8 <HAL_DMA_Init+0x1f8>)
 8011f12:	4293      	cmp	r3, r2
 8011f14:	f000 8081 	beq.w	801201a <HAL_DMA_Init+0x16a>
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	4a63      	ldr	r2, [pc, #396]	; (80120ac <HAL_DMA_Init+0x1fc>)
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d07b      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4a62      	ldr	r2, [pc, #392]	; (80120b0 <HAL_DMA_Init+0x200>)
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d076      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a60      	ldr	r2, [pc, #384]	; (80120b4 <HAL_DMA_Init+0x204>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d071      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4a5f      	ldr	r2, [pc, #380]	; (80120b8 <HAL_DMA_Init+0x208>)
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	d06c      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	4a5d      	ldr	r2, [pc, #372]	; (80120bc <HAL_DMA_Init+0x20c>)
 8011f46:	4293      	cmp	r3, r2
 8011f48:	d067      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	4a5c      	ldr	r2, [pc, #368]	; (80120c0 <HAL_DMA_Init+0x210>)
 8011f50:	4293      	cmp	r3, r2
 8011f52:	d062      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4a5a      	ldr	r2, [pc, #360]	; (80120c4 <HAL_DMA_Init+0x214>)
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	d05d      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	4a59      	ldr	r2, [pc, #356]	; (80120c8 <HAL_DMA_Init+0x218>)
 8011f64:	4293      	cmp	r3, r2
 8011f66:	d058      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a57      	ldr	r2, [pc, #348]	; (80120cc <HAL_DMA_Init+0x21c>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d053      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	4a56      	ldr	r2, [pc, #344]	; (80120d0 <HAL_DMA_Init+0x220>)
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	d04e      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	4a54      	ldr	r2, [pc, #336]	; (80120d4 <HAL_DMA_Init+0x224>)
 8011f82:	4293      	cmp	r3, r2
 8011f84:	d049      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4a53      	ldr	r2, [pc, #332]	; (80120d8 <HAL_DMA_Init+0x228>)
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	d044      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4a51      	ldr	r2, [pc, #324]	; (80120dc <HAL_DMA_Init+0x22c>)
 8011f96:	4293      	cmp	r3, r2
 8011f98:	d03f      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	4a50      	ldr	r2, [pc, #320]	; (80120e0 <HAL_DMA_Init+0x230>)
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d03a      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	4a4e      	ldr	r2, [pc, #312]	; (80120e4 <HAL_DMA_Init+0x234>)
 8011faa:	4293      	cmp	r3, r2
 8011fac:	d035      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a4d      	ldr	r2, [pc, #308]	; (80120e8 <HAL_DMA_Init+0x238>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d030      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4a4b      	ldr	r2, [pc, #300]	; (80120ec <HAL_DMA_Init+0x23c>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d02b      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	4a4a      	ldr	r2, [pc, #296]	; (80120f0 <HAL_DMA_Init+0x240>)
 8011fc8:	4293      	cmp	r3, r2
 8011fca:	d026      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4a48      	ldr	r2, [pc, #288]	; (80120f4 <HAL_DMA_Init+0x244>)
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d021      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4a47      	ldr	r2, [pc, #284]	; (80120f8 <HAL_DMA_Init+0x248>)
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d01c      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	4a45      	ldr	r2, [pc, #276]	; (80120fc <HAL_DMA_Init+0x24c>)
 8011fe6:	4293      	cmp	r3, r2
 8011fe8:	d017      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	4a44      	ldr	r2, [pc, #272]	; (8012100 <HAL_DMA_Init+0x250>)
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d012      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	4a42      	ldr	r2, [pc, #264]	; (8012104 <HAL_DMA_Init+0x254>)
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d00d      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	4a41      	ldr	r2, [pc, #260]	; (8012108 <HAL_DMA_Init+0x258>)
 8012004:	4293      	cmp	r3, r2
 8012006:	d008      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	4a3f      	ldr	r2, [pc, #252]	; (801210c <HAL_DMA_Init+0x25c>)
 801200e:	4293      	cmp	r3, r2
 8012010:	d003      	beq.n	801201a <HAL_DMA_Init+0x16a>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4a3e      	ldr	r2, [pc, #248]	; (8012110 <HAL_DMA_Init+0x260>)
 8012018:	4293      	cmp	r3, r2
 801201a:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2200      	movs	r2, #0
 8012020:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2202      	movs	r2, #2
 8012028:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	695a      	ldr	r2, [r3, #20]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f042 0206 	orr.w	r2, r2, #6
 801203a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 801203c:	e00f      	b.n	801205e <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801203e:	f7fe fa93 	bl	8010568 <HAL_GetTick>
 8012042:	4602      	mov	r2, r0
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	1ad3      	subs	r3, r2, r3
 8012048:	2b05      	cmp	r3, #5
 801204a:	d908      	bls.n	801205e <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2210      	movs	r2, #16
 8012050:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2203      	movs	r2, #3
 8012056:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 801205a:	2301      	movs	r3, #1
 801205c:	e015      	b.n	801208a <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	695b      	ldr	r3, [r3, #20]
 8012064:	f003 0301 	and.w	r3, r3, #1
 8012068:	2b00      	cmp	r3, #0
 801206a:	d1e8      	bne.n	801203e <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f000 fc11 	bl	8012894 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2200      	movs	r2, #0
 801207e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2201      	movs	r2, #1
 8012084:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8012088:	2300      	movs	r3, #0
}
 801208a:	4618      	mov	r0, r3
 801208c:	3710      	adds	r7, #16
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	40020050 	.word	0x40020050
 8012098:	50020050 	.word	0x50020050
 801209c:	400200d0 	.word	0x400200d0
 80120a0:	500200d0 	.word	0x500200d0
 80120a4:	40020150 	.word	0x40020150
 80120a8:	50020150 	.word	0x50020150
 80120ac:	400201d0 	.word	0x400201d0
 80120b0:	500201d0 	.word	0x500201d0
 80120b4:	40020250 	.word	0x40020250
 80120b8:	50020250 	.word	0x50020250
 80120bc:	400202d0 	.word	0x400202d0
 80120c0:	500202d0 	.word	0x500202d0
 80120c4:	40020350 	.word	0x40020350
 80120c8:	50020350 	.word	0x50020350
 80120cc:	400203d0 	.word	0x400203d0
 80120d0:	500203d0 	.word	0x500203d0
 80120d4:	40020450 	.word	0x40020450
 80120d8:	50020450 	.word	0x50020450
 80120dc:	400204d0 	.word	0x400204d0
 80120e0:	500204d0 	.word	0x500204d0
 80120e4:	40020550 	.word	0x40020550
 80120e8:	50020550 	.word	0x50020550
 80120ec:	400205d0 	.word	0x400205d0
 80120f0:	500205d0 	.word	0x500205d0
 80120f4:	40020650 	.word	0x40020650
 80120f8:	50020650 	.word	0x50020650
 80120fc:	400206d0 	.word	0x400206d0
 8012100:	500206d0 	.word	0x500206d0
 8012104:	40020750 	.word	0x40020750
 8012108:	50020750 	.word	0x50020750
 801210c:	400207d0 	.word	0x400207d0
 8012110:	500207d0 	.word	0x500207d0

08012114 <HAL_DMA_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *const hdma)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance;
  uint32_t tickstart = HAL_GetTick();
 801211c:	f7fe fa24 	bl	8010568 <HAL_GetTick>
 8012120:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d101      	bne.n	801212c <HAL_DMA_DeInit+0x18>
  {
    return HAL_ERROR;
 8012128:	2301      	movs	r3, #1
 801212a:	e0b9      	b.n	80122a0 <HAL_DMA_DeInit+0x18c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012134:	f023 030f 	bic.w	r3, r3, #15
 8012138:	60bb      	str	r3, [r7, #8]

  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	695a      	ldr	r2, [r3, #20]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	f042 0206 	orr.w	r2, r2, #6
 8012148:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 801214a:	e00f      	b.n	801216c <HAL_DMA_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801214c:	f7fe fa0c 	bl	8010568 <HAL_GetTick>
 8012150:	4602      	mov	r2, r0
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	1ad3      	subs	r3, r2, r3
 8012156:	2b05      	cmp	r3, #5
 8012158:	d908      	bls.n	801216c <HAL_DMA_DeInit+0x58>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2210      	movs	r2, #16
 801215e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2203      	movs	r2, #3
 8012164:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8012168:	2301      	movs	r3, #1
 801216a:	e099      	b.n	80122a0 <HAL_DMA_DeInit+0x18c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	695b      	ldr	r3, [r3, #20]
 8012172:	f003 0301 	and.w	r3, r3, #1
 8012176:	2b00      	cmp	r3, #0
 8012178:	d1e8      	bne.n	801214c <HAL_DMA_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CLBAR = 0U;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2200      	movs	r2, #0
 8012180:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	2200      	movs	r2, #0
 8012188:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	2200      	movs	r2, #0
 8012190:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->Instance->CTR2  = 0U;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	2200      	movs	r2, #0
 8012198:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->Instance->CBR1  = 0U;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2200      	movs	r2, #0
 80121a0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->Instance->CSAR  = 0U;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2200      	movs	r2, #0
 80121a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->Instance->CDAR  = 0U;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2200      	movs	r2, #0
 80121b0:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->Instance->CLLR  = 0U;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	2200      	movs	r2, #0
 80121b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	4a3a      	ldr	r2, [pc, #232]	; (80122a8 <HAL_DMA_DeInit+0x194>)
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d022      	beq.n	801220a <HAL_DMA_DeInit+0xf6>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	4a38      	ldr	r2, [pc, #224]	; (80122ac <HAL_DMA_DeInit+0x198>)
 80121ca:	4293      	cmp	r3, r2
 80121cc:	d01d      	beq.n	801220a <HAL_DMA_DeInit+0xf6>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	4a37      	ldr	r2, [pc, #220]	; (80122b0 <HAL_DMA_DeInit+0x19c>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d018      	beq.n	801220a <HAL_DMA_DeInit+0xf6>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4a35      	ldr	r2, [pc, #212]	; (80122b4 <HAL_DMA_DeInit+0x1a0>)
 80121de:	4293      	cmp	r3, r2
 80121e0:	d013      	beq.n	801220a <HAL_DMA_DeInit+0xf6>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4a34      	ldr	r2, [pc, #208]	; (80122b8 <HAL_DMA_DeInit+0x1a4>)
 80121e8:	4293      	cmp	r3, r2
 80121ea:	d00e      	beq.n	801220a <HAL_DMA_DeInit+0xf6>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4a32      	ldr	r2, [pc, #200]	; (80122bc <HAL_DMA_DeInit+0x1a8>)
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d009      	beq.n	801220a <HAL_DMA_DeInit+0xf6>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	4a31      	ldr	r2, [pc, #196]	; (80122c0 <HAL_DMA_DeInit+0x1ac>)
 80121fc:	4293      	cmp	r3, r2
 80121fe:	d004      	beq.n	801220a <HAL_DMA_DeInit+0xf6>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	4a2f      	ldr	r2, [pc, #188]	; (80122c4 <HAL_DMA_DeInit+0x1b0>)
 8012206:	4293      	cmp	r3, r2
 8012208:	d101      	bne.n	801220e <HAL_DMA_DeInit+0xfa>
 801220a:	2301      	movs	r3, #1
 801220c:	e000      	b.n	8012210 <HAL_DMA_DeInit+0xfc>
 801220e:	2300      	movs	r3, #0
 8012210:	2b00      	cmp	r3, #0
 8012212:	d007      	beq.n	8012224 <HAL_DMA_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2200      	movs	r2, #0
 801221a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->Instance->CBR2 = 0U;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2200      	movs	r2, #0
 8012222:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	685a      	ldr	r2, [r3, #4]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012230:	3b50      	subs	r3, #80	; 0x50
 8012232:	09db      	lsrs	r3, r3, #7
 8012234:	f003 031f 	and.w	r3, r3, #31
 8012238:	2101      	movs	r1, #1
 801223a:	fa01 f303 	lsl.w	r3, r1, r3
 801223e:	43db      	mvns	r3, r3
 8012240:	401a      	ands	r2, r3
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 801224e:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2200      	movs	r2, #0
 8012254:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->XferHalfCpltCallback = NULL;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->XferErrorCallback    = NULL;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2200      	movs	r2, #0
 8012260:	669a      	str	r2, [r3, #104]	; 0x68
  hdma->XferAbortCallback    = NULL;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2200      	movs	r2, #0
 8012266:	66da      	str	r2, [r3, #108]	; 0x6c
  hdma->XferSuspendCallback  = NULL;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2200      	movs	r2, #0
 801226c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Clean DMA queue */
  hdma->LinkedListQueue = NULL;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2200      	movs	r2, #0
 8012272:	675a      	str	r2, [r3, #116]	; 0x74

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012278:	2b00      	cmp	r3, #0
 801227a:	d002      	beq.n	8012282 <HAL_DMA_DeInit+0x16e>
  {
    hdma->Parent = NULL;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2200      	movs	r2, #0
 8012280:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2200      	movs	r2, #0
 8012286:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2200      	movs	r2, #0
 8012292:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 801229e:	2300      	movs	r3, #0
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	40020650 	.word	0x40020650
 80122ac:	50020650 	.word	0x50020650
 80122b0:	400206d0 	.word	0x400206d0
 80122b4:	500206d0 	.word	0x500206d0
 80122b8:	40020750 	.word	0x40020750
 80122bc:	50020750 	.word	0x50020750
 80122c0:	400207d0 	.word	0x400207d0
 80122c4:	500207d0 	.word	0x500207d0

080122c8 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	607a      	str	r2, [r7, #4]
 80122d4:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d101      	bne.n	80122e0 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80122dc:	2301      	movs	r3, #1
 80122de:	e04f      	b.n	8012380 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	d101      	bne.n	80122ee <HAL_DMA_Start_IT+0x26>
 80122ea:	2302      	movs	r3, #2
 80122ec:	e048      	b.n	8012380 <HAL_DMA_Start_IT+0xb8>
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	2201      	movs	r2, #1
 80122f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	2b01      	cmp	r3, #1
 8012300:	d136      	bne.n	8012370 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2202      	movs	r2, #2
 8012306:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2200      	movs	r2, #0
 801230e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	68b9      	ldr	r1, [r7, #8]
 8012316:	68f8      	ldr	r0, [r7, #12]
 8012318:	f000 fa97 	bl	801284a <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	695a      	ldr	r2, [r3, #20]
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 801232a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012330:	2b00      	cmp	r3, #0
 8012332:	d007      	beq.n	8012344 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	695a      	ldr	r2, [r3, #20]
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012342:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012348:	2b00      	cmp	r3, #0
 801234a:	d007      	beq.n	801235c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	695a      	ldr	r2, [r3, #20]
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801235a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	695a      	ldr	r2, [r3, #20]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f042 0201 	orr.w	r2, r2, #1
 801236a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 801236c:	2300      	movs	r3, #0
 801236e:	e007      	b.n	8012380 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2240      	movs	r2, #64	; 0x40
 8012374:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2200      	movs	r2, #0
 801237a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 801237e:	2301      	movs	r3, #1
}
 8012380:	4618      	mov	r0, r3
 8012382:	3710      	adds	r7, #16
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8012390:	f7fe f8ea 	bl	8010568 <HAL_GetTick>
 8012394:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d101      	bne.n	80123a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 801239c:	2301      	movs	r3, #1
 801239e:	e06b      	b.n	8012478 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	2b02      	cmp	r3, #2
 80123aa:	d008      	beq.n	80123be <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2220      	movs	r2, #32
 80123b0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2200      	movs	r2, #0
 80123b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80123ba:	2301      	movs	r3, #1
 80123bc:	e05c      	b.n	8012478 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	695a      	ldr	r2, [r3, #20]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	f042 0204 	orr.w	r2, r2, #4
 80123cc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2205      	movs	r2, #5
 80123d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80123d6:	e020      	b.n	801241a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80123d8:	f7fe f8c6 	bl	8010568 <HAL_GetTick>
 80123dc:	4602      	mov	r2, r0
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	1ad3      	subs	r3, r2, r3
 80123e2:	2b05      	cmp	r3, #5
 80123e4:	d919      	bls.n	801241a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123ea:	f043 0210 	orr.w	r2, r3, #16
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2203      	movs	r2, #3
 80123f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012402:	2b00      	cmp	r3, #0
 8012404:	d003      	beq.n	801240e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801240a:	2201      	movs	r2, #1
 801240c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2200      	movs	r2, #0
 8012412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8012416:	2301      	movs	r3, #1
 8012418:	e02e      	b.n	8012478 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	691b      	ldr	r3, [r3, #16]
 8012420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012424:	2b00      	cmp	r3, #0
 8012426:	d0d7      	beq.n	80123d8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	695a      	ldr	r2, [r3, #20]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f042 0202 	orr.w	r2, r2, #2
 8012436:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2204      	movs	r2, #4
 801243c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8012448:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2201      	movs	r2, #1
 801244e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801245a:	2b00      	cmp	r3, #0
 801245c:	d007      	beq.n	801246e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012462:	2201      	movs	r2, #1
 8012464:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2200      	movs	r2, #0
 801246c:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012476:	2300      	movs	r3, #0
}
 8012478:	4618      	mov	r0, r3
 801247a:	3710      	adds	r7, #16
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d101      	bne.n	8012492 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801248e:	2301      	movs	r3, #1
 8012490:	e019      	b.n	80124c6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012498:	b2db      	uxtb	r3, r3
 801249a:	2b02      	cmp	r3, #2
 801249c:	d004      	beq.n	80124a8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2220      	movs	r2, #32
 80124a2:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80124a4:	2301      	movs	r3, #1
 80124a6:	e00e      	b.n	80124c6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2204      	movs	r2, #4
 80124ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	695b      	ldr	r3, [r3, #20]
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	6812      	ldr	r2, [r2, #0]
 80124ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80124be:	f043 0304 	orr.w	r3, r3, #4
 80124c2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b084      	sub	sp, #16
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80124e2:	f023 030f 	bic.w	r3, r3, #15
 80124e6:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80124f0:	3b50      	subs	r3, #80	; 0x50
 80124f2:	09db      	lsrs	r3, r3, #7
 80124f4:	f003 031f 	and.w	r3, r3, #31
 80124f8:	2201      	movs	r2, #1
 80124fa:	fa02 f303 	lsl.w	r3, r2, r3
 80124fe:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	68da      	ldr	r2, [r3, #12]
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	4013      	ands	r3, r2
 8012508:	2b00      	cmp	r3, #0
 801250a:	f000 8150 	beq.w	80127ae <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	691b      	ldr	r3, [r3, #16]
 8012514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012518:	2b00      	cmp	r3, #0
 801251a:	d011      	beq.n	8012540 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	695b      	ldr	r3, [r3, #20]
 8012522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00a      	beq.n	8012540 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012532:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012538:	f043 0201 	orr.w	r2, r3, #1
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	691b      	ldr	r3, [r3, #16]
 8012546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801254a:	2b00      	cmp	r3, #0
 801254c:	d011      	beq.n	8012572 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	695b      	ldr	r3, [r3, #20]
 8012554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00a      	beq.n	8012572 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012564:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801256a:	f043 0202 	orr.w	r2, r3, #2
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	691b      	ldr	r3, [r3, #16]
 8012578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801257c:	2b00      	cmp	r3, #0
 801257e:	d011      	beq.n	80125a4 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	695b      	ldr	r3, [r3, #20]
 8012586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801258a:	2b00      	cmp	r3, #0
 801258c:	d00a      	beq.n	80125a4 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012596:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801259c:	f043 0204 	orr.w	r2, r3, #4
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	691b      	ldr	r3, [r3, #16]
 80125aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d011      	beq.n	80125d6 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	695b      	ldr	r3, [r3, #20]
 80125b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d00a      	beq.n	80125d6 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80125c8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125ce:	f043 0208 	orr.w	r2, r3, #8
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	691b      	ldr	r3, [r3, #16]
 80125dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d013      	beq.n	801260c <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	695b      	ldr	r3, [r3, #20]
 80125ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00c      	beq.n	801260c <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80125fa:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012600:	2b00      	cmp	r3, #0
 8012602:	d003      	beq.n	801260c <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	691b      	ldr	r3, [r3, #16]
 8012612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012616:	2b00      	cmp	r3, #0
 8012618:	d055      	beq.n	80126c6 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	695b      	ldr	r3, [r3, #20]
 8012620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012624:	2b00      	cmp	r3, #0
 8012626:	d04e      	beq.n	80126c6 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012630:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012638:	b2db      	uxtb	r3, r3
 801263a:	2b04      	cmp	r3, #4
 801263c:	d137      	bne.n	80126ae <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	695a      	ldr	r2, [r3, #20]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801264c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	695a      	ldr	r2, [r3, #20]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f042 0202 	orr.w	r2, r2, #2
 801265c:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	695b      	ldr	r3, [r3, #20]
 8012664:	f003 0301 	and.w	r3, r3, #1
 8012668:	2b00      	cmp	r3, #0
 801266a:	d004      	beq.n	8012676 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2203      	movs	r2, #3
 8012670:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012674:	e003      	b.n	801267e <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2201      	movs	r2, #1
 801267a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012686:	2b00      	cmp	r3, #0
 8012688:	d003      	beq.n	8012692 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801268e:	2201      	movs	r2, #1
 8012690:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2200      	movs	r2, #0
 8012696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801269e:	2b00      	cmp	r3, #0
 80126a0:	f000 8087 	beq.w	80127b2 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	4798      	blx	r3
        }

        return;
 80126ac:	e081      	b.n	80127b2 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2205      	movs	r2, #5
 80126b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d003      	beq.n	80126c6 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	691b      	ldr	r3, [r3, #16]
 80126cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d039      	beq.n	8012748 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	695b      	ldr	r3, [r3, #20]
 80126da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d032      	beq.n	8012748 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d012      	beq.n	8012714 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d116      	bne.n	8012726 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d111      	bne.n	8012726 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2201      	movs	r2, #1
 8012706:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801270e:	2201      	movs	r2, #1
 8012710:	731a      	strb	r2, [r3, #12]
 8012712:	e008      	b.n	8012726 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801271a:	2b00      	cmp	r3, #0
 801271c:	d103      	bne.n	8012726 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2201      	movs	r2, #1
 8012722:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f44f 7240 	mov.w	r2, #768	; 0x300
 801272e:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2200      	movs	r2, #0
 8012734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801273c:	2b00      	cmp	r3, #0
 801273e:	d003      	beq.n	8012748 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801274c:	2b00      	cmp	r3, #0
 801274e:	d031      	beq.n	80127b4 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	695a      	ldr	r2, [r3, #20]
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f042 0202 	orr.w	r2, r2, #2
 801275e:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	695b      	ldr	r3, [r3, #20]
 8012766:	f003 0301 	and.w	r3, r3, #1
 801276a:	2b00      	cmp	r3, #0
 801276c:	d004      	beq.n	8012778 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2203      	movs	r2, #3
 8012772:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012776:	e003      	b.n	8012780 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2201      	movs	r2, #1
 801277c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012788:	2b00      	cmp	r3, #0
 801278a:	d003      	beq.n	8012794 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012790:	2201      	movs	r2, #1
 8012792:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2200      	movs	r2, #0
 8012798:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d007      	beq.n	80127b4 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	4798      	blx	r3
 80127ac:	e002      	b.n	80127b4 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80127ae:	bf00      	nop
 80127b0:	e000      	b.n	80127b4 <HAL_DMA_IRQHandler+0x2e2>
        return;
 80127b2:	bf00      	nop
    }
  }
}
 80127b4:	3710      	adds	r7, #16
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 80127ba:	b480      	push	{r7}
 80127bc:	b083      	sub	sp, #12
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	370c      	adds	r7, #12
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr

080127d2 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80127d2:	b480      	push	{r7}
 80127d4:	b085      	sub	sp, #20
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
 80127da:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d101      	bne.n	80127e6 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80127e2:	2301      	movs	r3, #1
 80127e4:	e02b      	b.n	801283e <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80127ee:	f023 030f 	bic.w	r3, r3, #15
 80127f2:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80127fc:	3b50      	subs	r3, #80	; 0x50
 80127fe:	09db      	lsrs	r3, r3, #7
 8012800:	f003 031f 	and.w	r3, r3, #31
 8012804:	2201      	movs	r2, #1
 8012806:	fa02 f303 	lsl.w	r3, r2, r3
 801280a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	f003 0310 	and.w	r3, r3, #16
 8012812:	2b00      	cmp	r3, #0
 8012814:	d012      	beq.n	801283c <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	f003 0311 	and.w	r3, r3, #17
 801281c:	2b11      	cmp	r3, #17
 801281e:	d106      	bne.n	801282e <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	685a      	ldr	r2, [r3, #4]
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	431a      	orrs	r2, r3
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	605a      	str	r2, [r3, #4]
 801282c:	e006      	b.n	801283c <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	685a      	ldr	r2, [r3, #4]
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	43db      	mvns	r3, r3
 8012836:	401a      	ands	r2, r3
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 801283c:	2300      	movs	r3, #0
}
 801283e:	4618      	mov	r0, r3
 8012840:	3714      	adds	r7, #20
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr

0801284a <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 801284a:	b480      	push	{r7}
 801284c:	b085      	sub	sp, #20
 801284e:	af00      	add	r7, sp, #0
 8012850:	60f8      	str	r0, [r7, #12]
 8012852:	60b9      	str	r1, [r7, #8]
 8012854:	607a      	str	r2, [r7, #4]
 8012856:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801285e:	0c1b      	lsrs	r3, r3, #16
 8012860:	041b      	lsls	r3, r3, #16
 8012862:	683a      	ldr	r2, [r7, #0]
 8012864:	b291      	uxth	r1, r2
 8012866:	68fa      	ldr	r2, [r7, #12]
 8012868:	6812      	ldr	r2, [r2, #0]
 801286a:	430b      	orrs	r3, r1
 801286c:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8012876:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	68ba      	ldr	r2, [r7, #8]
 801287e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	651a      	str	r2, [r3, #80]	; 0x50
}
 8012888:	bf00      	nop
 801288a:	3714      	adds	r7, #20
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8012894:	b480      	push	{r7}
 8012896:	b085      	sub	sp, #20
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6a1b      	ldr	r3, [r3, #32]
 80128a0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	695b      	ldr	r3, [r3, #20]
 80128a8:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	68fa      	ldr	r2, [r7, #12]
 80128b2:	430a      	orrs	r2, r1
 80128b4:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	695a      	ldr	r2, [r3, #20]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	69db      	ldr	r3, [r3, #28]
 80128be:	431a      	orrs	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	431a      	orrs	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	699b      	ldr	r3, [r3, #24]
 80128ca:	4313      	orrs	r3, r2
 80128cc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	4a53      	ldr	r2, [pc, #332]	; (8012a20 <DMA_Init+0x18c>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	f000 80a0 	beq.w	8012a1a <DMA_Init+0x186>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	4a51      	ldr	r2, [pc, #324]	; (8012a24 <DMA_Init+0x190>)
 80128e0:	4293      	cmp	r3, r2
 80128e2:	f000 809a 	beq.w	8012a1a <DMA_Init+0x186>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4a4f      	ldr	r2, [pc, #316]	; (8012a28 <DMA_Init+0x194>)
 80128ec:	4293      	cmp	r3, r2
 80128ee:	f000 8094 	beq.w	8012a1a <DMA_Init+0x186>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a4d      	ldr	r2, [pc, #308]	; (8012a2c <DMA_Init+0x198>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	f000 808e 	beq.w	8012a1a <DMA_Init+0x186>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	4a4b      	ldr	r2, [pc, #300]	; (8012a30 <DMA_Init+0x19c>)
 8012904:	4293      	cmp	r3, r2
 8012906:	f000 8088 	beq.w	8012a1a <DMA_Init+0x186>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	4a49      	ldr	r2, [pc, #292]	; (8012a34 <DMA_Init+0x1a0>)
 8012910:	4293      	cmp	r3, r2
 8012912:	f000 8082 	beq.w	8012a1a <DMA_Init+0x186>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	4a47      	ldr	r2, [pc, #284]	; (8012a38 <DMA_Init+0x1a4>)
 801291c:	4293      	cmp	r3, r2
 801291e:	d07c      	beq.n	8012a1a <DMA_Init+0x186>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	4a45      	ldr	r2, [pc, #276]	; (8012a3c <DMA_Init+0x1a8>)
 8012926:	4293      	cmp	r3, r2
 8012928:	d077      	beq.n	8012a1a <DMA_Init+0x186>
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	4a44      	ldr	r2, [pc, #272]	; (8012a40 <DMA_Init+0x1ac>)
 8012930:	4293      	cmp	r3, r2
 8012932:	d072      	beq.n	8012a1a <DMA_Init+0x186>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4a42      	ldr	r2, [pc, #264]	; (8012a44 <DMA_Init+0x1b0>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d06d      	beq.n	8012a1a <DMA_Init+0x186>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	4a41      	ldr	r2, [pc, #260]	; (8012a48 <DMA_Init+0x1b4>)
 8012944:	4293      	cmp	r3, r2
 8012946:	d068      	beq.n	8012a1a <DMA_Init+0x186>
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	4a3f      	ldr	r2, [pc, #252]	; (8012a4c <DMA_Init+0x1b8>)
 801294e:	4293      	cmp	r3, r2
 8012950:	d063      	beq.n	8012a1a <DMA_Init+0x186>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a3e      	ldr	r2, [pc, #248]	; (8012a50 <DMA_Init+0x1bc>)
 8012958:	4293      	cmp	r3, r2
 801295a:	d05e      	beq.n	8012a1a <DMA_Init+0x186>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	4a3c      	ldr	r2, [pc, #240]	; (8012a54 <DMA_Init+0x1c0>)
 8012962:	4293      	cmp	r3, r2
 8012964:	d059      	beq.n	8012a1a <DMA_Init+0x186>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	4a3b      	ldr	r2, [pc, #236]	; (8012a58 <DMA_Init+0x1c4>)
 801296c:	4293      	cmp	r3, r2
 801296e:	d054      	beq.n	8012a1a <DMA_Init+0x186>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	4a39      	ldr	r2, [pc, #228]	; (8012a5c <DMA_Init+0x1c8>)
 8012976:	4293      	cmp	r3, r2
 8012978:	d04f      	beq.n	8012a1a <DMA_Init+0x186>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	4a38      	ldr	r2, [pc, #224]	; (8012a60 <DMA_Init+0x1cc>)
 8012980:	4293      	cmp	r3, r2
 8012982:	d04a      	beq.n	8012a1a <DMA_Init+0x186>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4a36      	ldr	r2, [pc, #216]	; (8012a64 <DMA_Init+0x1d0>)
 801298a:	4293      	cmp	r3, r2
 801298c:	d045      	beq.n	8012a1a <DMA_Init+0x186>
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4a35      	ldr	r2, [pc, #212]	; (8012a68 <DMA_Init+0x1d4>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d040      	beq.n	8012a1a <DMA_Init+0x186>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	4a33      	ldr	r2, [pc, #204]	; (8012a6c <DMA_Init+0x1d8>)
 801299e:	4293      	cmp	r3, r2
 80129a0:	d03b      	beq.n	8012a1a <DMA_Init+0x186>
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	4a32      	ldr	r2, [pc, #200]	; (8012a70 <DMA_Init+0x1dc>)
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d036      	beq.n	8012a1a <DMA_Init+0x186>
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4a30      	ldr	r2, [pc, #192]	; (8012a74 <DMA_Init+0x1e0>)
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d031      	beq.n	8012a1a <DMA_Init+0x186>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4a2f      	ldr	r2, [pc, #188]	; (8012a78 <DMA_Init+0x1e4>)
 80129bc:	4293      	cmp	r3, r2
 80129be:	d02c      	beq.n	8012a1a <DMA_Init+0x186>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	4a2d      	ldr	r2, [pc, #180]	; (8012a7c <DMA_Init+0x1e8>)
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d027      	beq.n	8012a1a <DMA_Init+0x186>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	4a2c      	ldr	r2, [pc, #176]	; (8012a80 <DMA_Init+0x1ec>)
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d022      	beq.n	8012a1a <DMA_Init+0x186>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	4a2a      	ldr	r2, [pc, #168]	; (8012a84 <DMA_Init+0x1f0>)
 80129da:	4293      	cmp	r3, r2
 80129dc:	d01d      	beq.n	8012a1a <DMA_Init+0x186>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4a29      	ldr	r2, [pc, #164]	; (8012a88 <DMA_Init+0x1f4>)
 80129e4:	4293      	cmp	r3, r2
 80129e6:	d018      	beq.n	8012a1a <DMA_Init+0x186>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4a27      	ldr	r2, [pc, #156]	; (8012a8c <DMA_Init+0x1f8>)
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d013      	beq.n	8012a1a <DMA_Init+0x186>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	4a26      	ldr	r2, [pc, #152]	; (8012a90 <DMA_Init+0x1fc>)
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d00e      	beq.n	8012a1a <DMA_Init+0x186>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	4a24      	ldr	r2, [pc, #144]	; (8012a94 <DMA_Init+0x200>)
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d009      	beq.n	8012a1a <DMA_Init+0x186>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4a23      	ldr	r2, [pc, #140]	; (8012a98 <DMA_Init+0x204>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d004      	beq.n	8012a1a <DMA_Init+0x186>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	4a21      	ldr	r2, [pc, #132]	; (8012a9c <DMA_Init+0x208>)
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d142      	bne.n	8012aa0 <DMA_Init+0x20c>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e041      	b.n	8012aa2 <DMA_Init+0x20e>
 8012a1e:	bf00      	nop
 8012a20:	40020050 	.word	0x40020050
 8012a24:	50020050 	.word	0x50020050
 8012a28:	400200d0 	.word	0x400200d0
 8012a2c:	500200d0 	.word	0x500200d0
 8012a30:	40020150 	.word	0x40020150
 8012a34:	50020150 	.word	0x50020150
 8012a38:	400201d0 	.word	0x400201d0
 8012a3c:	500201d0 	.word	0x500201d0
 8012a40:	40020250 	.word	0x40020250
 8012a44:	50020250 	.word	0x50020250
 8012a48:	400202d0 	.word	0x400202d0
 8012a4c:	500202d0 	.word	0x500202d0
 8012a50:	40020350 	.word	0x40020350
 8012a54:	50020350 	.word	0x50020350
 8012a58:	400203d0 	.word	0x400203d0
 8012a5c:	500203d0 	.word	0x500203d0
 8012a60:	40020450 	.word	0x40020450
 8012a64:	50020450 	.word	0x50020450
 8012a68:	400204d0 	.word	0x400204d0
 8012a6c:	500204d0 	.word	0x500204d0
 8012a70:	40020550 	.word	0x40020550
 8012a74:	50020550 	.word	0x50020550
 8012a78:	400205d0 	.word	0x400205d0
 8012a7c:	500205d0 	.word	0x500205d0
 8012a80:	40020650 	.word	0x40020650
 8012a84:	50020650 	.word	0x50020650
 8012a88:	400206d0 	.word	0x400206d0
 8012a8c:	500206d0 	.word	0x500206d0
 8012a90:	40020750 	.word	0x40020750
 8012a94:	50020750 	.word	0x50020750
 8012a98:	400207d0 	.word	0x400207d0
 8012a9c:	500207d0 	.word	0x500207d0
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d012      	beq.n	8012acc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	051b      	lsls	r3, r3, #20
 8012ab2:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8012ab6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012abc:	3b01      	subs	r3, #1
 8012abe:	011b      	lsls	r3, r3, #4
 8012ac0:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8012ac4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8012ac6:	68fa      	ldr	r2, [r7, #12]
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ad2:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	68fa      	ldr	r2, [r7, #12]
 8012adc:	430a      	orrs	r2, r1
 8012ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	689a      	ldr	r2, [r3, #8]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012aec:	431a      	orrs	r2, r3
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012af2:	4313      	orrs	r3, r2
 8012af4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012afe:	f040 80b0 	bne.w	8012c62 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	4a82      	ldr	r2, [pc, #520]	; (8012d10 <DMA_Init+0x47c>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	f000 80a0 	beq.w	8012c4e <DMA_Init+0x3ba>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4a80      	ldr	r2, [pc, #512]	; (8012d14 <DMA_Init+0x480>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	f000 809a 	beq.w	8012c4e <DMA_Init+0x3ba>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a7e      	ldr	r2, [pc, #504]	; (8012d18 <DMA_Init+0x484>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	f000 8094 	beq.w	8012c4e <DMA_Init+0x3ba>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	4a7c      	ldr	r2, [pc, #496]	; (8012d1c <DMA_Init+0x488>)
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	f000 808e 	beq.w	8012c4e <DMA_Init+0x3ba>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4a7a      	ldr	r2, [pc, #488]	; (8012d20 <DMA_Init+0x48c>)
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	f000 8088 	beq.w	8012c4e <DMA_Init+0x3ba>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	4a78      	ldr	r2, [pc, #480]	; (8012d24 <DMA_Init+0x490>)
 8012b44:	4293      	cmp	r3, r2
 8012b46:	f000 8082 	beq.w	8012c4e <DMA_Init+0x3ba>
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4a76      	ldr	r2, [pc, #472]	; (8012d28 <DMA_Init+0x494>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d07c      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4a74      	ldr	r2, [pc, #464]	; (8012d2c <DMA_Init+0x498>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d077      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	4a73      	ldr	r2, [pc, #460]	; (8012d30 <DMA_Init+0x49c>)
 8012b64:	4293      	cmp	r3, r2
 8012b66:	d072      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a71      	ldr	r2, [pc, #452]	; (8012d34 <DMA_Init+0x4a0>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d06d      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	4a70      	ldr	r2, [pc, #448]	; (8012d38 <DMA_Init+0x4a4>)
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d068      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	4a6e      	ldr	r2, [pc, #440]	; (8012d3c <DMA_Init+0x4a8>)
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d063      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4a6d      	ldr	r2, [pc, #436]	; (8012d40 <DMA_Init+0x4ac>)
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	d05e      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	4a6b      	ldr	r2, [pc, #428]	; (8012d44 <DMA_Init+0x4b0>)
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d059      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4a6a      	ldr	r2, [pc, #424]	; (8012d48 <DMA_Init+0x4b4>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d054      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4a68      	ldr	r2, [pc, #416]	; (8012d4c <DMA_Init+0x4b8>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d04f      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4a67      	ldr	r2, [pc, #412]	; (8012d50 <DMA_Init+0x4bc>)
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	d04a      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4a65      	ldr	r2, [pc, #404]	; (8012d54 <DMA_Init+0x4c0>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d045      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	4a64      	ldr	r2, [pc, #400]	; (8012d58 <DMA_Init+0x4c4>)
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d040      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	4a62      	ldr	r2, [pc, #392]	; (8012d5c <DMA_Init+0x4c8>)
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d03b      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	4a61      	ldr	r2, [pc, #388]	; (8012d60 <DMA_Init+0x4cc>)
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	d036      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	4a5f      	ldr	r2, [pc, #380]	; (8012d64 <DMA_Init+0x4d0>)
 8012be6:	4293      	cmp	r3, r2
 8012be8:	d031      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	4a5e      	ldr	r2, [pc, #376]	; (8012d68 <DMA_Init+0x4d4>)
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	d02c      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	4a5c      	ldr	r2, [pc, #368]	; (8012d6c <DMA_Init+0x4d8>)
 8012bfa:	4293      	cmp	r3, r2
 8012bfc:	d027      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	4a5b      	ldr	r2, [pc, #364]	; (8012d70 <DMA_Init+0x4dc>)
 8012c04:	4293      	cmp	r3, r2
 8012c06:	d022      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4a59      	ldr	r2, [pc, #356]	; (8012d74 <DMA_Init+0x4e0>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d01d      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	4a58      	ldr	r2, [pc, #352]	; (8012d78 <DMA_Init+0x4e4>)
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d018      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	4a56      	ldr	r2, [pc, #344]	; (8012d7c <DMA_Init+0x4e8>)
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d013      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4a55      	ldr	r2, [pc, #340]	; (8012d80 <DMA_Init+0x4ec>)
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d00e      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4a53      	ldr	r2, [pc, #332]	; (8012d84 <DMA_Init+0x4f0>)
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d009      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	4a52      	ldr	r2, [pc, #328]	; (8012d88 <DMA_Init+0x4f4>)
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d004      	beq.n	8012c4e <DMA_Init+0x3ba>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	4a50      	ldr	r2, [pc, #320]	; (8012d8c <DMA_Init+0x4f8>)
 8012c4a:	4293      	cmp	r3, r2
 8012c4c:	d101      	bne.n	8012c52 <DMA_Init+0x3be>
 8012c4e:	2301      	movs	r3, #1
 8012c50:	e000      	b.n	8012c54 <DMA_Init+0x3c0>
 8012c52:	2300      	movs	r3, #0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00d      	beq.n	8012c74 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012c5e:	60fb      	str	r3, [r7, #12]
 8012c60:	e008      	b.n	8012c74 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c6a:	d103      	bne.n	8012c74 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012c72:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c7a:	4b45      	ldr	r3, [pc, #276]	; (8012d90 <DMA_Init+0x4fc>)
 8012c7c:	4013      	ands	r3, r2
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	6812      	ldr	r2, [r2, #0]
 8012c82:	68f9      	ldr	r1, [r7, #12]
 8012c84:	430b      	orrs	r3, r1
 8012c86:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	4a36      	ldr	r2, [pc, #216]	; (8012d70 <DMA_Init+0x4dc>)
 8012c96:	4293      	cmp	r3, r2
 8012c98:	d022      	beq.n	8012ce0 <DMA_Init+0x44c>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	4a35      	ldr	r2, [pc, #212]	; (8012d74 <DMA_Init+0x4e0>)
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d01d      	beq.n	8012ce0 <DMA_Init+0x44c>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4a33      	ldr	r2, [pc, #204]	; (8012d78 <DMA_Init+0x4e4>)
 8012caa:	4293      	cmp	r3, r2
 8012cac:	d018      	beq.n	8012ce0 <DMA_Init+0x44c>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	4a32      	ldr	r2, [pc, #200]	; (8012d7c <DMA_Init+0x4e8>)
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d013      	beq.n	8012ce0 <DMA_Init+0x44c>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	4a30      	ldr	r2, [pc, #192]	; (8012d80 <DMA_Init+0x4ec>)
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d00e      	beq.n	8012ce0 <DMA_Init+0x44c>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	4a2f      	ldr	r2, [pc, #188]	; (8012d84 <DMA_Init+0x4f0>)
 8012cc8:	4293      	cmp	r3, r2
 8012cca:	d009      	beq.n	8012ce0 <DMA_Init+0x44c>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4a2d      	ldr	r2, [pc, #180]	; (8012d88 <DMA_Init+0x4f4>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d004      	beq.n	8012ce0 <DMA_Init+0x44c>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4a2c      	ldr	r2, [pc, #176]	; (8012d8c <DMA_Init+0x4f8>)
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	d101      	bne.n	8012ce4 <DMA_Init+0x450>
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e000      	b.n	8012ce6 <DMA_Init+0x452>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d007      	beq.n	8012cfa <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8012d02:	bf00      	nop
 8012d04:	3714      	adds	r7, #20
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop
 8012d10:	40020050 	.word	0x40020050
 8012d14:	50020050 	.word	0x50020050
 8012d18:	400200d0 	.word	0x400200d0
 8012d1c:	500200d0 	.word	0x500200d0
 8012d20:	40020150 	.word	0x40020150
 8012d24:	50020150 	.word	0x50020150
 8012d28:	400201d0 	.word	0x400201d0
 8012d2c:	500201d0 	.word	0x500201d0
 8012d30:	40020250 	.word	0x40020250
 8012d34:	50020250 	.word	0x50020250
 8012d38:	400202d0 	.word	0x400202d0
 8012d3c:	500202d0 	.word	0x500202d0
 8012d40:	40020350 	.word	0x40020350
 8012d44:	50020350 	.word	0x50020350
 8012d48:	400203d0 	.word	0x400203d0
 8012d4c:	500203d0 	.word	0x500203d0
 8012d50:	40020450 	.word	0x40020450
 8012d54:	50020450 	.word	0x50020450
 8012d58:	400204d0 	.word	0x400204d0
 8012d5c:	500204d0 	.word	0x500204d0
 8012d60:	40020550 	.word	0x40020550
 8012d64:	50020550 	.word	0x50020550
 8012d68:	400205d0 	.word	0x400205d0
 8012d6c:	500205d0 	.word	0x500205d0
 8012d70:	40020650 	.word	0x40020650
 8012d74:	50020650 	.word	0x50020650
 8012d78:	400206d0 	.word	0x400206d0
 8012d7c:	500206d0 	.word	0x500206d0
 8012d80:	40020750 	.word	0x40020750
 8012d84:	50020750 	.word	0x50020750
 8012d88:	400207d0 	.word	0x400207d0
 8012d8c:	500207d0 	.word	0x500207d0
 8012d90:	3cc03180 	.word	0x3cc03180

08012d94 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b084      	sub	sp, #16
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8012d9c:	f7fd fbe4 	bl	8010568 <HAL_GetTick>
 8012da0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d101      	bne.n	8012dac <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8012da8:	2301      	movs	r3, #1
 8012daa:	e0dc      	b.n	8012f66 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4a6f      	ldr	r2, [pc, #444]	; (8012f70 <HAL_DMAEx_List_Init+0x1dc>)
 8012db2:	4293      	cmp	r3, r2
 8012db4:	f000 809f 	beq.w	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	4a6d      	ldr	r2, [pc, #436]	; (8012f74 <HAL_DMAEx_List_Init+0x1e0>)
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	f000 8099 	beq.w	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	4a6b      	ldr	r2, [pc, #428]	; (8012f78 <HAL_DMAEx_List_Init+0x1e4>)
 8012dca:	4293      	cmp	r3, r2
 8012dcc:	f000 8093 	beq.w	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a69      	ldr	r2, [pc, #420]	; (8012f7c <HAL_DMAEx_List_Init+0x1e8>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	f000 808d 	beq.w	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	4a67      	ldr	r2, [pc, #412]	; (8012f80 <HAL_DMAEx_List_Init+0x1ec>)
 8012de2:	4293      	cmp	r3, r2
 8012de4:	f000 8087 	beq.w	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a65      	ldr	r2, [pc, #404]	; (8012f84 <HAL_DMAEx_List_Init+0x1f0>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	f000 8081 	beq.w	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	4a63      	ldr	r2, [pc, #396]	; (8012f88 <HAL_DMAEx_List_Init+0x1f4>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d07b      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	4a62      	ldr	r2, [pc, #392]	; (8012f8c <HAL_DMAEx_List_Init+0x1f8>)
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d076      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	4a60      	ldr	r2, [pc, #384]	; (8012f90 <HAL_DMAEx_List_Init+0x1fc>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d071      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	4a5f      	ldr	r2, [pc, #380]	; (8012f94 <HAL_DMAEx_List_Init+0x200>)
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d06c      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	4a5d      	ldr	r2, [pc, #372]	; (8012f98 <HAL_DMAEx_List_Init+0x204>)
 8012e22:	4293      	cmp	r3, r2
 8012e24:	d067      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	4a5c      	ldr	r2, [pc, #368]	; (8012f9c <HAL_DMAEx_List_Init+0x208>)
 8012e2c:	4293      	cmp	r3, r2
 8012e2e:	d062      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4a5a      	ldr	r2, [pc, #360]	; (8012fa0 <HAL_DMAEx_List_Init+0x20c>)
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d05d      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	4a59      	ldr	r2, [pc, #356]	; (8012fa4 <HAL_DMAEx_List_Init+0x210>)
 8012e40:	4293      	cmp	r3, r2
 8012e42:	d058      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	4a57      	ldr	r2, [pc, #348]	; (8012fa8 <HAL_DMAEx_List_Init+0x214>)
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	d053      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4a56      	ldr	r2, [pc, #344]	; (8012fac <HAL_DMAEx_List_Init+0x218>)
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d04e      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4a54      	ldr	r2, [pc, #336]	; (8012fb0 <HAL_DMAEx_List_Init+0x21c>)
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d049      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4a53      	ldr	r2, [pc, #332]	; (8012fb4 <HAL_DMAEx_List_Init+0x220>)
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d044      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4a51      	ldr	r2, [pc, #324]	; (8012fb8 <HAL_DMAEx_List_Init+0x224>)
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d03f      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4a50      	ldr	r2, [pc, #320]	; (8012fbc <HAL_DMAEx_List_Init+0x228>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d03a      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4a4e      	ldr	r2, [pc, #312]	; (8012fc0 <HAL_DMAEx_List_Init+0x22c>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d035      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	4a4d      	ldr	r2, [pc, #308]	; (8012fc4 <HAL_DMAEx_List_Init+0x230>)
 8012e90:	4293      	cmp	r3, r2
 8012e92:	d030      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4a4b      	ldr	r2, [pc, #300]	; (8012fc8 <HAL_DMAEx_List_Init+0x234>)
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	d02b      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4a4a      	ldr	r2, [pc, #296]	; (8012fcc <HAL_DMAEx_List_Init+0x238>)
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d026      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4a48      	ldr	r2, [pc, #288]	; (8012fd0 <HAL_DMAEx_List_Init+0x23c>)
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	d021      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4a47      	ldr	r2, [pc, #284]	; (8012fd4 <HAL_DMAEx_List_Init+0x240>)
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	d01c      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	4a45      	ldr	r2, [pc, #276]	; (8012fd8 <HAL_DMAEx_List_Init+0x244>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d017      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4a44      	ldr	r2, [pc, #272]	; (8012fdc <HAL_DMAEx_List_Init+0x248>)
 8012ecc:	4293      	cmp	r3, r2
 8012ece:	d012      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	4a42      	ldr	r2, [pc, #264]	; (8012fe0 <HAL_DMAEx_List_Init+0x24c>)
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d00d      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	4a41      	ldr	r2, [pc, #260]	; (8012fe4 <HAL_DMAEx_List_Init+0x250>)
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	d008      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	4a3f      	ldr	r2, [pc, #252]	; (8012fe8 <HAL_DMAEx_List_Init+0x254>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d003      	beq.n	8012ef6 <HAL_DMAEx_List_Init+0x162>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	4a3e      	ldr	r2, [pc, #248]	; (8012fec <HAL_DMAEx_List_Init+0x258>)
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2200      	movs	r2, #0
 8012efc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2202      	movs	r2, #2
 8012f04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	695a      	ldr	r2, [r3, #20]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f042 0206 	orr.w	r2, r2, #6
 8012f16:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8012f18:	e00f      	b.n	8012f3a <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8012f1a:	f7fd fb25 	bl	8010568 <HAL_GetTick>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	1ad3      	subs	r3, r2, r3
 8012f24:	2b05      	cmp	r3, #5
 8012f26:	d908      	bls.n	8012f3a <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2210      	movs	r2, #16
 8012f2c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2203      	movs	r2, #3
 8012f32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8012f36:	2301      	movs	r3, #1
 8012f38:	e015      	b.n	8012f66 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	695b      	ldr	r3, [r3, #20]
 8012f40:	f003 0301 	and.w	r3, r3, #1
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d1e8      	bne.n	8012f1a <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f000 fa69 	bl	8013420 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2201      	movs	r2, #1
 8012f60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3710      	adds	r7, #16
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	40020050 	.word	0x40020050
 8012f74:	50020050 	.word	0x50020050
 8012f78:	400200d0 	.word	0x400200d0
 8012f7c:	500200d0 	.word	0x500200d0
 8012f80:	40020150 	.word	0x40020150
 8012f84:	50020150 	.word	0x50020150
 8012f88:	400201d0 	.word	0x400201d0
 8012f8c:	500201d0 	.word	0x500201d0
 8012f90:	40020250 	.word	0x40020250
 8012f94:	50020250 	.word	0x50020250
 8012f98:	400202d0 	.word	0x400202d0
 8012f9c:	500202d0 	.word	0x500202d0
 8012fa0:	40020350 	.word	0x40020350
 8012fa4:	50020350 	.word	0x50020350
 8012fa8:	400203d0 	.word	0x400203d0
 8012fac:	500203d0 	.word	0x500203d0
 8012fb0:	40020450 	.word	0x40020450
 8012fb4:	50020450 	.word	0x50020450
 8012fb8:	400204d0 	.word	0x400204d0
 8012fbc:	500204d0 	.word	0x500204d0
 8012fc0:	40020550 	.word	0x40020550
 8012fc4:	50020550 	.word	0x50020550
 8012fc8:	400205d0 	.word	0x400205d0
 8012fcc:	500205d0 	.word	0x500205d0
 8012fd0:	40020650 	.word	0x40020650
 8012fd4:	50020650 	.word	0x50020650
 8012fd8:	400206d0 	.word	0x400206d0
 8012fdc:	500206d0 	.word	0x500206d0
 8012fe0:	40020750 	.word	0x40020750
 8012fe4:	50020750 	.word	0x50020750
 8012fe8:	400207d0 	.word	0x400207d0
 8012fec:	500207d0 	.word	0x500207d0

08012ff0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b086      	sub	sp, #24
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d003      	beq.n	8013006 <HAL_DMAEx_List_Start_IT+0x16>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013002:	2b00      	cmp	r3, #0
 8013004:	d101      	bne.n	801300a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8013006:	2301      	movs	r3, #1
 8013008:	e082      	b.n	8013110 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013010:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	695b      	ldr	r3, [r3, #20]
 8013018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801301c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 801301e:	7dfb      	ldrb	r3, [r7, #23]
 8013020:	2b01      	cmp	r3, #1
 8013022:	d005      	beq.n	8013030 <HAL_DMAEx_List_Start_IT+0x40>
 8013024:	7dfb      	ldrb	r3, [r7, #23]
 8013026:	2b02      	cmp	r3, #2
 8013028:	d16a      	bne.n	8013100 <HAL_DMAEx_List_Start_IT+0x110>
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d067      	beq.n	8013100 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013036:	b2db      	uxtb	r3, r3
 8013038:	2b01      	cmp	r3, #1
 801303a:	d157      	bne.n	80130ec <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013042:	2b01      	cmp	r3, #1
 8013044:	d101      	bne.n	801304a <HAL_DMAEx_List_Start_IT+0x5a>
 8013046:	2302      	movs	r3, #2
 8013048:	e062      	b.n	8013110 <HAL_DMAEx_List_Start_IT+0x120>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2201      	movs	r2, #1
 801304e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2202      	movs	r2, #2
 8013056:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801305e:	2202      	movs	r2, #2
 8013060:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2200      	movs	r2, #0
 8013066:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801306c:	2200      	movs	r2, #0
 801306e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	695a      	ldr	r2, [r3, #20]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 801307e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013084:	2b00      	cmp	r3, #0
 8013086:	d007      	beq.n	8013098 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	695a      	ldr	r2, [r3, #20]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013096:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801309c:	2b00      	cmp	r3, #0
 801309e:	d007      	beq.n	80130b0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	695a      	ldr	r2, [r3, #20]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80130ae:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	f107 010c 	add.w	r1, r7, #12
 80130ba:	2200      	movs	r2, #0
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 fcc5 	bl	8013a4c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4619      	mov	r1, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	0c0b      	lsrs	r3, r1, #16
 80130d0:	041b      	lsls	r3, r3, #16
 80130d2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	461a      	mov	r2, r3
 80130dc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80130e0:	4013      	ands	r3, r2
 80130e2:	68f9      	ldr	r1, [r7, #12]
 80130e4:	687a      	ldr	r2, [r7, #4]
 80130e6:	6812      	ldr	r2, [r2, #0]
 80130e8:	430b      	orrs	r3, r1
 80130ea:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	695a      	ldr	r2, [r3, #20]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	f042 0201 	orr.w	r2, r2, #1
 80130fa:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80130fc:	2300      	movs	r3, #0
 80130fe:	e007      	b.n	8013110 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2240      	movs	r2, #64	; 0x40
 8013104:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2200      	movs	r2, #0
 801310a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 801310e:	2301      	movs	r3, #1
}
 8013110:	4618      	mov	r0, r3
 8013112:	3718      	adds	r7, #24
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}

08013118 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d002      	beq.n	801312e <HAL_DMAEx_List_BuildNode+0x16>
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d101      	bne.n	8013132 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 801312e:	2301      	movs	r3, #1
 8013130:	e004      	b.n	801313c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8013132:	6839      	ldr	r1, [r7, #0]
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f000 facb 	bl	80136d0 <DMA_List_BuildNode>

  return HAL_OK;
 801313a:	2300      	movs	r3, #0
}
 801313c:	4618      	mov	r0, r3
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b08a      	sub	sp, #40	; 0x28
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d002      	beq.n	801315a <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d101      	bne.n	801315e <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 801315a:	2301      	movs	r3, #1
 801315c:	e066      	b.n	801322c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	695b      	ldr	r3, [r3, #20]
 8013162:	2b01      	cmp	r3, #1
 8013164:	d104      	bne.n	8013170 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2204      	movs	r2, #4
 801316a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 801316c:	2301      	movs	r3, #1
 801316e:	e05d      	b.n	801322c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2200      	movs	r2, #0
 8013176:	6839      	ldr	r1, [r7, #0]
 8013178:	4618      	mov	r0, r3
 801317a:	f000 fbfb 	bl	8013974 <DMA_List_CheckNodesBaseAddresses>
 801317e:	4603      	mov	r3, r0
 8013180:	2b00      	cmp	r3, #0
 8013182:	d004      	beq.n	801318e <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2205      	movs	r2, #5
 8013188:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 801318a:	2301      	movs	r3, #1
 801318c:	e04e      	b.n	801322c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2200      	movs	r2, #0
 8013194:	6839      	ldr	r1, [r7, #0]
 8013196:	4618      	mov	r0, r3
 8013198:	f000 fc1c 	bl	80139d4 <DMA_List_CheckNodesTypes>
 801319c:	4603      	mov	r3, r0
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d004      	beq.n	80131ac <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2204      	movs	r2, #4
 80131a6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80131a8:	2301      	movs	r3, #1
 80131aa:	e03f      	b.n	801322c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d103      	bne.n	80131bc <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	683a      	ldr	r2, [r7, #0]
 80131b8:	601a      	str	r2, [r3, #0]
 80131ba:	e02b      	b.n	8013214 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80131bc:	f107 0220 	add.w	r2, r7, #32
 80131c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80131c4:	4619      	mov	r1, r3
 80131c6:	6838      	ldr	r0, [r7, #0]
 80131c8:	f000 fc40 	bl	8013a4c <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80131cc:	6a3b      	ldr	r3, [r7, #32]
 80131ce:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80131d0:	f107 030c 	add.w	r3, r7, #12
 80131d4:	461a      	mov	r2, r3
 80131d6:	2100      	movs	r1, #0
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f000 fc67 	bl	8013aac <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d00b      	beq.n	80131fe <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	461a      	mov	r2, r3
 80131ec:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80131f0:	4013      	ands	r3, r2
 80131f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131f4:	6a3a      	ldr	r2, [r7, #32]
 80131f6:	4319      	orrs	r1, r3
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80131fe:	683a      	ldr	r2, [r7, #0]
 8013200:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013204:	4013      	ands	r3, r2
 8013206:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8013208:	69ba      	ldr	r2, [r7, #24]
 801320a:	4610      	mov	r0, r2
 801320c:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 801320e:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8013210:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	689b      	ldr	r3, [r3, #8]
 8013218:	1c5a      	adds	r2, r3, #1
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2200      	movs	r2, #0
 8013222:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2201      	movs	r2, #1
 8013228:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3728      	adds	r7, #40	; 0x28
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b08a      	sub	sp, #40	; 0x28
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d101      	bne.n	8013246 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8013242:	2301      	movs	r3, #1
 8013244:	e052      	b.n	80132ec <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d104      	bne.n	8013258 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2202      	movs	r2, #2
 8013252:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8013254:	2301      	movs	r3, #1
 8013256:	e049      	b.n	80132ec <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d00c      	beq.n	801327a <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	685a      	ldr	r2, [r3, #4]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	429a      	cmp	r2, r3
 801326a:	d101      	bne.n	8013270 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 801326c:	2300      	movs	r3, #0
 801326e:	e03d      	b.n	80132ec <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2204      	movs	r2, #4
 8013274:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8013276:	2301      	movs	r3, #1
 8013278:	e038      	b.n	80132ec <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	695b      	ldr	r3, [r3, #20]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d104      	bne.n	801328c <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2204      	movs	r2, #4
 8013286:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8013288:	2301      	movs	r3, #1
 801328a:	e02f      	b.n	80132ec <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2202      	movs	r2, #2
 8013290:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2200      	movs	r2, #0
 8013296:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	f107 0220 	add.w	r2, r7, #32
 80132a0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80132a4:	4618      	mov	r0, r3
 80132a6:	f000 fbd1 	bl	8013a4c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80132aa:	6a3b      	ldr	r3, [r7, #32]
 80132ac:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80132ae:	f107 030c 	add.w	r3, r7, #12
 80132b2:	461a      	mov	r2, r3
 80132b4:	2100      	movs	r1, #0
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f000 fbf8 	bl	8013aac <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	461a      	mov	r2, r3
 80132c2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80132c6:	4013      	ands	r3, r2
 80132c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80132ca:	69ba      	ldr	r2, [r7, #24]
 80132cc:	4610      	mov	r0, r2
 80132ce:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80132d0:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80132d2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681a      	ldr	r2, [r3, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2200      	movs	r2, #0
 80132e2:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2201      	movs	r2, #1
 80132e8:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80132ea:	2300      	movs	r3, #0
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3728      	adds	r7, #40	; 0x28
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b085      	sub	sp, #20
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d002      	beq.n	801330a <HAL_DMAEx_List_LinkQ+0x16>
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d101      	bne.n	801330e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 801330a:	2301      	movs	r3, #1
 801330c:	e072      	b.n	80133f4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013314:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801331c:	b2db      	uxtb	r3, r3
 801331e:	2b02      	cmp	r3, #2
 8013320:	d002      	beq.n	8013328 <HAL_DMAEx_List_LinkQ+0x34>
 8013322:	7bfb      	ldrb	r3, [r7, #15]
 8013324:	2b05      	cmp	r3, #5
 8013326:	d108      	bne.n	801333a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2240      	movs	r2, #64	; 0x40
 801332c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8013336:	2301      	movs	r3, #1
 8013338:	e05c      	b.n	80133f4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	7b1b      	ldrb	r3, [r3, #12]
 801333e:	b2db      	uxtb	r3, r3
 8013340:	2b02      	cmp	r3, #2
 8013342:	d104      	bne.n	801334e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	2201      	movs	r2, #1
 8013348:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 801334a:	2301      	movs	r3, #1
 801334c:	e052      	b.n	80133f4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	4a2b      	ldr	r2, [pc, #172]	; (8013400 <HAL_DMAEx_List_LinkQ+0x10c>)
 8013354:	4293      	cmp	r3, r2
 8013356:	d022      	beq.n	801339e <HAL_DMAEx_List_LinkQ+0xaa>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4a29      	ldr	r2, [pc, #164]	; (8013404 <HAL_DMAEx_List_LinkQ+0x110>)
 801335e:	4293      	cmp	r3, r2
 8013360:	d01d      	beq.n	801339e <HAL_DMAEx_List_LinkQ+0xaa>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4a28      	ldr	r2, [pc, #160]	; (8013408 <HAL_DMAEx_List_LinkQ+0x114>)
 8013368:	4293      	cmp	r3, r2
 801336a:	d018      	beq.n	801339e <HAL_DMAEx_List_LinkQ+0xaa>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4a26      	ldr	r2, [pc, #152]	; (801340c <HAL_DMAEx_List_LinkQ+0x118>)
 8013372:	4293      	cmp	r3, r2
 8013374:	d013      	beq.n	801339e <HAL_DMAEx_List_LinkQ+0xaa>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	4a25      	ldr	r2, [pc, #148]	; (8013410 <HAL_DMAEx_List_LinkQ+0x11c>)
 801337c:	4293      	cmp	r3, r2
 801337e:	d00e      	beq.n	801339e <HAL_DMAEx_List_LinkQ+0xaa>
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	4a23      	ldr	r2, [pc, #140]	; (8013414 <HAL_DMAEx_List_LinkQ+0x120>)
 8013386:	4293      	cmp	r3, r2
 8013388:	d009      	beq.n	801339e <HAL_DMAEx_List_LinkQ+0xaa>
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	4a22      	ldr	r2, [pc, #136]	; (8013418 <HAL_DMAEx_List_LinkQ+0x124>)
 8013390:	4293      	cmp	r3, r2
 8013392:	d004      	beq.n	801339e <HAL_DMAEx_List_LinkQ+0xaa>
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	4a20      	ldr	r2, [pc, #128]	; (801341c <HAL_DMAEx_List_LinkQ+0x128>)
 801339a:	4293      	cmp	r3, r2
 801339c:	d101      	bne.n	80133a2 <HAL_DMAEx_List_LinkQ+0xae>
 801339e:	2301      	movs	r3, #1
 80133a0:	e000      	b.n	80133a4 <HAL_DMAEx_List_LinkQ+0xb0>
 80133a2:	2300      	movs	r3, #0
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d10b      	bne.n	80133c0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	6a1b      	ldr	r3, [r3, #32]
 80133ae:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d004      	beq.n	80133c0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	2203      	movs	r2, #3
 80133ba:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80133bc:	2301      	movs	r3, #1
 80133be:	e019      	b.n	80133f4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133c4:	2b81      	cmp	r3, #129	; 0x81
 80133c6:	d108      	bne.n	80133da <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d10d      	bne.n	80133ec <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	2204      	movs	r2, #4
 80133d4:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80133d6:	2301      	movs	r3, #1
 80133d8:	e00c      	b.n	80133f4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d004      	beq.n	80133ec <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	2204      	movs	r2, #4
 80133e6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80133e8:	2301      	movs	r3, #1
 80133ea:	e003      	b.n	80133f4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	683a      	ldr	r2, [r7, #0]
 80133f0:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80133f2:	2300      	movs	r3, #0
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr
 8013400:	40020650 	.word	0x40020650
 8013404:	50020650 	.word	0x50020650
 8013408:	400206d0 	.word	0x400206d0
 801340c:	500206d0 	.word	0x500206d0
 8013410:	40020750 	.word	0x40020750
 8013414:	50020750 	.word	0x50020750
 8013418:	400207d0 	.word	0x400207d0
 801341c:	500207d0 	.word	0x500207d0

08013420 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8013420:	b480      	push	{r7}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013430:	4313      	orrs	r3, r2
 8013432:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	4a85      	ldr	r2, [pc, #532]	; (8013650 <DMA_List_Init+0x230>)
 801343a:	4293      	cmp	r3, r2
 801343c:	f000 80a0 	beq.w	8013580 <DMA_List_Init+0x160>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4a83      	ldr	r2, [pc, #524]	; (8013654 <DMA_List_Init+0x234>)
 8013446:	4293      	cmp	r3, r2
 8013448:	f000 809a 	beq.w	8013580 <DMA_List_Init+0x160>
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4a81      	ldr	r2, [pc, #516]	; (8013658 <DMA_List_Init+0x238>)
 8013452:	4293      	cmp	r3, r2
 8013454:	f000 8094 	beq.w	8013580 <DMA_List_Init+0x160>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	4a7f      	ldr	r2, [pc, #508]	; (801365c <DMA_List_Init+0x23c>)
 801345e:	4293      	cmp	r3, r2
 8013460:	f000 808e 	beq.w	8013580 <DMA_List_Init+0x160>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4a7d      	ldr	r2, [pc, #500]	; (8013660 <DMA_List_Init+0x240>)
 801346a:	4293      	cmp	r3, r2
 801346c:	f000 8088 	beq.w	8013580 <DMA_List_Init+0x160>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	4a7b      	ldr	r2, [pc, #492]	; (8013664 <DMA_List_Init+0x244>)
 8013476:	4293      	cmp	r3, r2
 8013478:	f000 8082 	beq.w	8013580 <DMA_List_Init+0x160>
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	4a79      	ldr	r2, [pc, #484]	; (8013668 <DMA_List_Init+0x248>)
 8013482:	4293      	cmp	r3, r2
 8013484:	d07c      	beq.n	8013580 <DMA_List_Init+0x160>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	4a78      	ldr	r2, [pc, #480]	; (801366c <DMA_List_Init+0x24c>)
 801348c:	4293      	cmp	r3, r2
 801348e:	d077      	beq.n	8013580 <DMA_List_Init+0x160>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	4a76      	ldr	r2, [pc, #472]	; (8013670 <DMA_List_Init+0x250>)
 8013496:	4293      	cmp	r3, r2
 8013498:	d072      	beq.n	8013580 <DMA_List_Init+0x160>
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	4a75      	ldr	r2, [pc, #468]	; (8013674 <DMA_List_Init+0x254>)
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d06d      	beq.n	8013580 <DMA_List_Init+0x160>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	4a73      	ldr	r2, [pc, #460]	; (8013678 <DMA_List_Init+0x258>)
 80134aa:	4293      	cmp	r3, r2
 80134ac:	d068      	beq.n	8013580 <DMA_List_Init+0x160>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	4a72      	ldr	r2, [pc, #456]	; (801367c <DMA_List_Init+0x25c>)
 80134b4:	4293      	cmp	r3, r2
 80134b6:	d063      	beq.n	8013580 <DMA_List_Init+0x160>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	4a70      	ldr	r2, [pc, #448]	; (8013680 <DMA_List_Init+0x260>)
 80134be:	4293      	cmp	r3, r2
 80134c0:	d05e      	beq.n	8013580 <DMA_List_Init+0x160>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	4a6f      	ldr	r2, [pc, #444]	; (8013684 <DMA_List_Init+0x264>)
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d059      	beq.n	8013580 <DMA_List_Init+0x160>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	4a6d      	ldr	r2, [pc, #436]	; (8013688 <DMA_List_Init+0x268>)
 80134d2:	4293      	cmp	r3, r2
 80134d4:	d054      	beq.n	8013580 <DMA_List_Init+0x160>
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4a6c      	ldr	r2, [pc, #432]	; (801368c <DMA_List_Init+0x26c>)
 80134dc:	4293      	cmp	r3, r2
 80134de:	d04f      	beq.n	8013580 <DMA_List_Init+0x160>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	4a6a      	ldr	r2, [pc, #424]	; (8013690 <DMA_List_Init+0x270>)
 80134e6:	4293      	cmp	r3, r2
 80134e8:	d04a      	beq.n	8013580 <DMA_List_Init+0x160>
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	4a69      	ldr	r2, [pc, #420]	; (8013694 <DMA_List_Init+0x274>)
 80134f0:	4293      	cmp	r3, r2
 80134f2:	d045      	beq.n	8013580 <DMA_List_Init+0x160>
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	4a67      	ldr	r2, [pc, #412]	; (8013698 <DMA_List_Init+0x278>)
 80134fa:	4293      	cmp	r3, r2
 80134fc:	d040      	beq.n	8013580 <DMA_List_Init+0x160>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	4a66      	ldr	r2, [pc, #408]	; (801369c <DMA_List_Init+0x27c>)
 8013504:	4293      	cmp	r3, r2
 8013506:	d03b      	beq.n	8013580 <DMA_List_Init+0x160>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	4a64      	ldr	r2, [pc, #400]	; (80136a0 <DMA_List_Init+0x280>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d036      	beq.n	8013580 <DMA_List_Init+0x160>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4a63      	ldr	r2, [pc, #396]	; (80136a4 <DMA_List_Init+0x284>)
 8013518:	4293      	cmp	r3, r2
 801351a:	d031      	beq.n	8013580 <DMA_List_Init+0x160>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	4a61      	ldr	r2, [pc, #388]	; (80136a8 <DMA_List_Init+0x288>)
 8013522:	4293      	cmp	r3, r2
 8013524:	d02c      	beq.n	8013580 <DMA_List_Init+0x160>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	4a60      	ldr	r2, [pc, #384]	; (80136ac <DMA_List_Init+0x28c>)
 801352c:	4293      	cmp	r3, r2
 801352e:	d027      	beq.n	8013580 <DMA_List_Init+0x160>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	4a5e      	ldr	r2, [pc, #376]	; (80136b0 <DMA_List_Init+0x290>)
 8013536:	4293      	cmp	r3, r2
 8013538:	d022      	beq.n	8013580 <DMA_List_Init+0x160>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	4a5d      	ldr	r2, [pc, #372]	; (80136b4 <DMA_List_Init+0x294>)
 8013540:	4293      	cmp	r3, r2
 8013542:	d01d      	beq.n	8013580 <DMA_List_Init+0x160>
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	4a5b      	ldr	r2, [pc, #364]	; (80136b8 <DMA_List_Init+0x298>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d018      	beq.n	8013580 <DMA_List_Init+0x160>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	4a5a      	ldr	r2, [pc, #360]	; (80136bc <DMA_List_Init+0x29c>)
 8013554:	4293      	cmp	r3, r2
 8013556:	d013      	beq.n	8013580 <DMA_List_Init+0x160>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	4a58      	ldr	r2, [pc, #352]	; (80136c0 <DMA_List_Init+0x2a0>)
 801355e:	4293      	cmp	r3, r2
 8013560:	d00e      	beq.n	8013580 <DMA_List_Init+0x160>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4a57      	ldr	r2, [pc, #348]	; (80136c4 <DMA_List_Init+0x2a4>)
 8013568:	4293      	cmp	r3, r2
 801356a:	d009      	beq.n	8013580 <DMA_List_Init+0x160>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	4a55      	ldr	r2, [pc, #340]	; (80136c8 <DMA_List_Init+0x2a8>)
 8013572:	4293      	cmp	r3, r2
 8013574:	d004      	beq.n	8013580 <DMA_List_Init+0x160>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	4a54      	ldr	r2, [pc, #336]	; (80136cc <DMA_List_Init+0x2ac>)
 801357c:	4293      	cmp	r3, r2
 801357e:	d101      	bne.n	8013584 <DMA_List_Init+0x164>
 8013580:	2301      	movs	r3, #1
 8013582:	e000      	b.n	8013586 <DMA_List_Init+0x166>
 8013584:	2300      	movs	r3, #0
 8013586:	2b00      	cmp	r3, #0
 8013588:	d004      	beq.n	8013594 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801358e:	68fa      	ldr	r2, [r7, #12]
 8013590:	4313      	orrs	r3, r2
 8013592:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	695b      	ldr	r3, [r3, #20]
 801359a:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	68fa      	ldr	r2, [r7, #12]
 80135a4:	430a      	orrs	r2, r1
 80135a6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2200      	movs	r2, #0
 80135ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	687a      	ldr	r2, [r7, #4]
 80135b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80135b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2200      	movs	r2, #0
 80135c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	2200      	movs	r2, #0
 80135c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	2200      	movs	r2, #0
 80135d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	4a36      	ldr	r2, [pc, #216]	; (80136b0 <DMA_List_Init+0x290>)
 80135d8:	4293      	cmp	r3, r2
 80135da:	d022      	beq.n	8013622 <DMA_List_Init+0x202>
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	4a34      	ldr	r2, [pc, #208]	; (80136b4 <DMA_List_Init+0x294>)
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d01d      	beq.n	8013622 <DMA_List_Init+0x202>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	4a33      	ldr	r2, [pc, #204]	; (80136b8 <DMA_List_Init+0x298>)
 80135ec:	4293      	cmp	r3, r2
 80135ee:	d018      	beq.n	8013622 <DMA_List_Init+0x202>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	4a31      	ldr	r2, [pc, #196]	; (80136bc <DMA_List_Init+0x29c>)
 80135f6:	4293      	cmp	r3, r2
 80135f8:	d013      	beq.n	8013622 <DMA_List_Init+0x202>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	4a30      	ldr	r2, [pc, #192]	; (80136c0 <DMA_List_Init+0x2a0>)
 8013600:	4293      	cmp	r3, r2
 8013602:	d00e      	beq.n	8013622 <DMA_List_Init+0x202>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	4a2e      	ldr	r2, [pc, #184]	; (80136c4 <DMA_List_Init+0x2a4>)
 801360a:	4293      	cmp	r3, r2
 801360c:	d009      	beq.n	8013622 <DMA_List_Init+0x202>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	4a2d      	ldr	r2, [pc, #180]	; (80136c8 <DMA_List_Init+0x2a8>)
 8013614:	4293      	cmp	r3, r2
 8013616:	d004      	beq.n	8013622 <DMA_List_Init+0x202>
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	4a2b      	ldr	r2, [pc, #172]	; (80136cc <DMA_List_Init+0x2ac>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d101      	bne.n	8013626 <DMA_List_Init+0x206>
 8013622:	2301      	movs	r3, #1
 8013624:	e000      	b.n	8013628 <DMA_List_Init+0x208>
 8013626:	2300      	movs	r3, #0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d007      	beq.n	801363c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2200      	movs	r2, #0
 8013632:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2200      	movs	r2, #0
 801363a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2200      	movs	r2, #0
 8013642:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8013644:	bf00      	nop
 8013646:	3714      	adds	r7, #20
 8013648:	46bd      	mov	sp, r7
 801364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364e:	4770      	bx	lr
 8013650:	40020050 	.word	0x40020050
 8013654:	50020050 	.word	0x50020050
 8013658:	400200d0 	.word	0x400200d0
 801365c:	500200d0 	.word	0x500200d0
 8013660:	40020150 	.word	0x40020150
 8013664:	50020150 	.word	0x50020150
 8013668:	400201d0 	.word	0x400201d0
 801366c:	500201d0 	.word	0x500201d0
 8013670:	40020250 	.word	0x40020250
 8013674:	50020250 	.word	0x50020250
 8013678:	400202d0 	.word	0x400202d0
 801367c:	500202d0 	.word	0x500202d0
 8013680:	40020350 	.word	0x40020350
 8013684:	50020350 	.word	0x50020350
 8013688:	400203d0 	.word	0x400203d0
 801368c:	500203d0 	.word	0x500203d0
 8013690:	40020450 	.word	0x40020450
 8013694:	50020450 	.word	0x50020450
 8013698:	400204d0 	.word	0x400204d0
 801369c:	500204d0 	.word	0x500204d0
 80136a0:	40020550 	.word	0x40020550
 80136a4:	50020550 	.word	0x50020550
 80136a8:	400205d0 	.word	0x400205d0
 80136ac:	500205d0 	.word	0x500205d0
 80136b0:	40020650 	.word	0x40020650
 80136b4:	50020650 	.word	0x50020650
 80136b8:	400206d0 	.word	0x400206d0
 80136bc:	500206d0 	.word	0x500206d0
 80136c0:	40020750 	.word	0x40020750
 80136c4:	50020750 	.word	0x50020750
 80136c8:	400207d0 	.word	0x400207d0
 80136cc:	500207d0 	.word	0x500207d0

080136d0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80136d0:	b480      	push	{r7}
 80136d2:	b085      	sub	sp, #20
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80136e2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80136e8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80136ee:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80136f4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	f003 0320 	and.w	r3, r3, #32
 8013702:	2b00      	cmp	r3, #0
 8013704:	d017      	beq.n	8013736 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013712:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013718:	3b01      	subs	r3, #1
 801371a:	051b      	lsls	r3, r3, #20
 801371c:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8013720:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013726:	3b01      	subs	r3, #1
 8013728:	011b      	lsls	r3, r3, #4
 801372a:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 801372e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8013730:	431a      	orrs	r2, r3
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6859      	ldr	r1, [r3, #4]
 801373e:	f240 237f 	movw	r3, #639	; 0x27f
 8013742:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8013744:	431a      	orrs	r2, r3
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	68db      	ldr	r3, [r3, #12]
 801374e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013752:	d10c      	bne.n	801376e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f003 0320 	and.w	r3, r3, #32
 801375c:	2b00      	cmp	r3, #0
 801375e:	d011      	beq.n	8013784 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	605a      	str	r2, [r3, #4]
 801376c:	e00a      	b.n	8013784 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	68db      	ldr	r3, [r3, #12]
 8013772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013776:	d105      	bne.n	8013784 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013788:	2b00      	cmp	r3, #0
 801378a:	d00f      	beq.n	80137ac <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013798:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801379e:	041b      	lsls	r3, r3, #16
 80137a0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80137a4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80137a6:	431a      	orrs	r2, r3
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137b0:	b29a      	uxth	r2, r3
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f003 0302 	and.w	r3, r3, #2
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d04e      	beq.n	8013860 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137ca:	3b01      	subs	r3, #1
 80137cc:	0419      	lsls	r1, r3, #16
 80137ce:	4b67      	ldr	r3, [pc, #412]	; (801396c <DMA_List_BuildNode+0x29c>)
 80137d0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80137d2:	431a      	orrs	r2, r3
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137dc:	2b00      	cmp	r3, #0
 80137de:	da06      	bge.n	80137ee <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	689b      	ldr	r3, [r3, #8]
 80137e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	609a      	str	r2, [r3, #8]
 80137ec:	e005      	b.n	80137fa <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	689b      	ldr	r3, [r3, #8]
 80137f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137fe:	2b00      	cmp	r3, #0
 8013800:	da06      	bge.n	8013810 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	689b      	ldr	r3, [r3, #8]
 8013806:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	609a      	str	r2, [r3, #8]
 801380e:	e005      	b.n	801381c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	689b      	ldr	r3, [r3, #8]
 8013814:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013820:	2b00      	cmp	r3, #0
 8013822:	da06      	bge.n	8013832 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	689b      	ldr	r3, [r3, #8]
 8013828:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	609a      	str	r2, [r3, #8]
 8013830:	e005      	b.n	801383e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	689b      	ldr	r3, [r3, #8]
 8013836:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013842:	2b00      	cmp	r3, #0
 8013844:	da06      	bge.n	8013854 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	689b      	ldr	r3, [r3, #8]
 801384a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	609a      	str	r2, [r3, #8]
 8013852:	e005      	b.n	8013860 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f003 0302 	and.w	r3, r3, #2
 8013878:	2b00      	cmp	r3, #0
 801387a:	d059      	beq.n	8013930 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013880:	2b00      	cmp	r3, #0
 8013882:	da09      	bge.n	8013898 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013888:	425b      	negs	r3, r3
 801388a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	615a      	str	r2, [r3, #20]
 8013896:	e005      	b.n	80138a4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801389c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	da0d      	bge.n	80138c8 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138b0:	425b      	negs	r3, r3
 80138b2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	695a      	ldr	r2, [r3, #20]
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	0419      	lsls	r1, r3, #16
 80138bc:	4b2c      	ldr	r3, [pc, #176]	; (8013970 <DMA_List_BuildNode+0x2a0>)
 80138be:	400b      	ands	r3, r1
 80138c0:	431a      	orrs	r2, r3
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	615a      	str	r2, [r3, #20]
 80138c6:	e009      	b.n	80138dc <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138d0:	0419      	lsls	r1, r3, #16
 80138d2:	4b27      	ldr	r3, [pc, #156]	; (8013970 <DMA_List_BuildNode+0x2a0>)
 80138d4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80138d6:	431a      	orrs	r2, r3
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	da08      	bge.n	80138f6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138e8:	425b      	negs	r3, r3
 80138ea:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	b29a      	uxth	r2, r3
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	619a      	str	r2, [r3, #24]
 80138f4:	e004      	b.n	8013900 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138fa:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013904:	2b00      	cmp	r3, #0
 8013906:	da0b      	bge.n	8013920 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801390c:	425b      	negs	r3, r3
 801390e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8013918:	431a      	orrs	r2, r3
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	619a      	str	r2, [r3, #24]
 801391e:	e007      	b.n	8013930 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013928:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 801392a:	431a      	orrs	r2, r3
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	f003 0302 	and.w	r3, r3, #2
 8013940:	2b00      	cmp	r3, #0
 8013942:	d006      	beq.n	8013952 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	6a1b      	ldr	r3, [r3, #32]
 8013948:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8013950:	e005      	b.n	801395e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	6a1b      	ldr	r3, [r3, #32]
 8013956:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	621a      	str	r2, [r3, #32]
}
 801395e:	bf00      	nop
 8013960:	3714      	adds	r7, #20
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop
 801396c:	07ff0000 	.word	0x07ff0000
 8013970:	1fff0000 	.word	0x1fff0000

08013974 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8013974:	b480      	push	{r7}
 8013976:	b087      	sub	sp, #28
 8013978:	af00      	add	r7, sp, #0
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	60b9      	str	r1, [r7, #8]
 801397e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8013980:	68fa      	ldr	r2, [r7, #12]
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	431a      	orrs	r2, r3
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4313      	orrs	r3, r2
 801398a:	0c1b      	lsrs	r3, r3, #16
 801398c:	041b      	lsls	r3, r3, #16
 801398e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8013990:	2300      	movs	r3, #0
 8013992:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d002      	beq.n	80139a0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	617b      	str	r3, [r7, #20]
 801399e:	e00a      	b.n	80139b6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d002      	beq.n	80139ac <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	617b      	str	r3, [r7, #20]
 80139aa:	e004      	b.n	80139b6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d001      	beq.n	80139b6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80139b6:	697b      	ldr	r3, [r7, #20]
 80139b8:	0c1b      	lsrs	r3, r3, #16
 80139ba:	041b      	lsls	r3, r3, #16
 80139bc:	693a      	ldr	r2, [r7, #16]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d001      	beq.n	80139c6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80139c2:	2301      	movs	r3, #1
 80139c4:	e000      	b.n	80139c8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80139c6:	2300      	movs	r3, #0
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	371c      	adds	r7, #28
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr

080139d4 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b087      	sub	sp, #28
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80139e0:	2300      	movs	r3, #0
 80139e2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d004      	beq.n	80139f4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6a1b      	ldr	r3, [r3, #32]
 80139ee:	b2db      	uxtb	r3, r3
 80139f0:	617b      	str	r3, [r7, #20]
 80139f2:	e00e      	b.n	8013a12 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d004      	beq.n	8013a04 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	6a1b      	ldr	r3, [r3, #32]
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	617b      	str	r3, [r7, #20]
 8013a02:	e006      	b.n	8013a12 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d003      	beq.n	8013a12 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6a1b      	ldr	r3, [r3, #32]
 8013a0e:	b2db      	uxtb	r3, r3
 8013a10:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d007      	beq.n	8013a28 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	6a1b      	ldr	r3, [r3, #32]
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	697a      	ldr	r2, [r7, #20]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d001      	beq.n	8013a28 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8013a24:	2302      	movs	r3, #2
 8013a26:	e00b      	b.n	8013a40 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d007      	beq.n	8013a3e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6a1b      	ldr	r3, [r3, #32]
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	697a      	ldr	r2, [r7, #20]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d001      	beq.n	8013a3e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8013a3a:	2303      	movs	r3, #3
 8013a3c:	e000      	b.n	8013a40 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8013a3e:	2300      	movs	r3, #0
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	371c      	adds	r7, #28
 8013a44:	46bd      	mov	sp, r7
 8013a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4a:	4770      	bx	lr

08013a4c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	60f8      	str	r0, [r7, #12]
 8013a54:	60b9      	str	r1, [r7, #8]
 8013a56:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	6a1b      	ldr	r3, [r3, #32]
 8013a5c:	f003 0302 	and.w	r3, r3, #2
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d00c      	beq.n	8013a7e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d002      	beq.n	8013a70 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	4a0d      	ldr	r2, [pc, #52]	; (8013aa4 <DMA_List_GetCLLRNodeInfo+0x58>)
 8013a6e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d00f      	beq.n	8013a96 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2207      	movs	r2, #7
 8013a7a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8013a7c:	e00b      	b.n	8013a96 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d002      	beq.n	8013a8a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	4a08      	ldr	r2, [pc, #32]	; (8013aa8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8013a88:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d002      	beq.n	8013a96 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2205      	movs	r2, #5
 8013a94:	601a      	str	r2, [r3, #0]
}
 8013a96:	bf00      	nop
 8013a98:	3714      	adds	r7, #20
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa0:	4770      	bx	lr
 8013aa2:	bf00      	nop
 8013aa4:	fe010000 	.word	0xfe010000
 8013aa8:	f8010000 	.word	0xf8010000

08013aac <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8013aac:	b480      	push	{r7}
 8013aae:	b089      	sub	sp, #36	; 0x24
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	60f8      	str	r0, [r7, #12]
 8013ab4:	60b9      	str	r1, [r7, #8]
 8013ab6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8013abc:	2300      	movs	r3, #0
 8013abe:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d142      	bne.n	8013b56 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8013ad0:	e01d      	b.n	8013b0e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8013ad2:	69fb      	ldr	r3, [r7, #28]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d107      	bne.n	8013ae8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	461a      	mov	r2, r3
 8013ade:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013ae2:	4013      	ands	r3, r2
 8013ae4:	61bb      	str	r3, [r7, #24]
 8013ae6:	e00f      	b.n	8013b08 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8013ae8:	69bb      	ldr	r3, [r7, #24]
 8013aea:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	0c1b      	lsrs	r3, r3, #16
 8013af2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8013af4:	69ba      	ldr	r2, [r7, #24]
 8013af6:	4413      	add	r3, r2
 8013af8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8013b00:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013b04:	4013      	ands	r3, r2
 8013b06:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	3301      	adds	r3, #1
 8013b0c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	689b      	ldr	r3, [r3, #8]
 8013b12:	69fa      	ldr	r2, [r7, #28]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d3dc      	bcc.n	8013ad2 <DMA_List_FindNode+0x26>
 8013b18:	e029      	b.n	8013b6e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d107      	bne.n	8013b30 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	461a      	mov	r2, r3
 8013b26:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013b2a:	4013      	ands	r3, r2
 8013b2c:	61bb      	str	r3, [r7, #24]
 8013b2e:	e00f      	b.n	8013b50 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8013b30:	69bb      	ldr	r3, [r7, #24]
 8013b32:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	0c1b      	lsrs	r3, r3, #16
 8013b3a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8013b3c:	69ba      	ldr	r2, [r7, #24]
 8013b3e:	4413      	add	r3, r2
 8013b40:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8013b48:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013b4c:	4013      	ands	r3, r2
 8013b4e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	3301      	adds	r3, #1
 8013b54:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	689b      	ldr	r3, [r3, #8]
 8013b5a:	69fa      	ldr	r2, [r7, #28]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d206      	bcs.n	8013b6e <DMA_List_FindNode+0xc2>
 8013b60:	68ba      	ldr	r2, [r7, #8]
 8013b62:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013b66:	4013      	ands	r3, r2
 8013b68:	69ba      	ldr	r2, [r7, #24]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d1d5      	bne.n	8013b1a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d008      	beq.n	8013b86 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8013b74:	68ba      	ldr	r2, [r7, #8]
 8013b76:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013b7a:	4013      	ands	r3, r2
 8013b7c:	69ba      	ldr	r2, [r7, #24]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d001      	beq.n	8013b86 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8013b82:	2301      	movs	r3, #1
 8013b84:	e02b      	b.n	8013bde <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	69fa      	ldr	r2, [r7, #28]
 8013b8a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	0c1b      	lsrs	r3, r3, #16
 8013b92:	041b      	lsls	r3, r3, #16
 8013b94:	697a      	ldr	r2, [r7, #20]
 8013b96:	431a      	orrs	r2, r3
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	0c1b      	lsrs	r3, r3, #16
 8013ba2:	041b      	lsls	r3, r3, #16
 8013ba4:	69ba      	ldr	r2, [r7, #24]
 8013ba6:	431a      	orrs	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	68db      	ldr	r3, [r3, #12]
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d00f      	beq.n	8013bdc <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bc8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013bcc:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	0c1b      	lsrs	r3, r3, #16
 8013bd4:	041b      	lsls	r3, r3, #16
 8013bd6:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8013bdc:	2300      	movs	r3, #0
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3724      	adds	r7, #36	; 0x24
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr
	...

08013bec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b083      	sub	sp, #12
 8013bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8013bf6:	4b0b      	ldr	r3, [pc, #44]	; (8013c24 <HAL_FLASH_Unlock+0x38>)
 8013bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	da0b      	bge.n	8013c16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8013bfe:	4b09      	ldr	r3, [pc, #36]	; (8013c24 <HAL_FLASH_Unlock+0x38>)
 8013c00:	4a09      	ldr	r2, [pc, #36]	; (8013c28 <HAL_FLASH_Unlock+0x3c>)
 8013c02:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8013c04:	4b07      	ldr	r3, [pc, #28]	; (8013c24 <HAL_FLASH_Unlock+0x38>)
 8013c06:	4a09      	ldr	r2, [pc, #36]	; (8013c2c <HAL_FLASH_Unlock+0x40>)
 8013c08:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8013c0a:	4b06      	ldr	r3, [pc, #24]	; (8013c24 <HAL_FLASH_Unlock+0x38>)
 8013c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	da01      	bge.n	8013c16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8013c12:	2301      	movs	r3, #1
 8013c14:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8013c16:	79fb      	ldrb	r3, [r7, #7]
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr
 8013c24:	40022000 	.word	0x40022000
 8013c28:	45670123 	.word	0x45670123
 8013c2c:	cdef89ab 	.word	0xcdef89ab

08013c30 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8013c30:	b480      	push	{r7}
 8013c32:	b083      	sub	sp, #12
 8013c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8013c36:	2301      	movs	r3, #1
 8013c38:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 8013c3a:	4b09      	ldr	r3, [pc, #36]	; (8013c60 <HAL_FLASH_Lock+0x30>)
 8013c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c3e:	4a08      	ldr	r2, [pc, #32]	; (8013c60 <HAL_FLASH_Lock+0x30>)
 8013c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013c44:	6293      	str	r3, [r2, #40]	; 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8013c46:	4b06      	ldr	r3, [pc, #24]	; (8013c60 <HAL_FLASH_Lock+0x30>)
 8013c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	da01      	bge.n	8013c52 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8013c52:	79fb      	ldrb	r3, [r7, #7]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	370c      	adds	r7, #12
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr
 8013c60:	40022000 	.word	0x40022000

08013c64 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b089      	sub	sp, #36	; 0x24
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8013c76:	e1ba      	b.n	8013fee <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	2101      	movs	r1, #1
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	fa01 f303 	lsl.w	r3, r1, r3
 8013c84:	4013      	ands	r3, r2
 8013c86:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	f000 81aa 	beq.w	8013fe8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	4a55      	ldr	r2, [pc, #340]	; (8013dec <HAL_GPIO_Init+0x188>)
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d15d      	bne.n	8013d58 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8013caa:	43db      	mvns	r3, r3
 8013cac:	69fa      	ldr	r2, [r7, #28]
 8013cae:	4013      	ands	r3, r2
 8013cb0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	685b      	ldr	r3, [r3, #4]
 8013cb6:	f003 0201 	and.w	r2, r3, #1
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8013cc0:	69fa      	ldr	r2, [r7, #28]
 8013cc2:	4313      	orrs	r3, r2
 8013cc4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	69fa      	ldr	r2, [r7, #28]
 8013cca:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8013ccc:	4a48      	ldr	r2, [pc, #288]	; (8013df0 <HAL_GPIO_Init+0x18c>)
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013cd4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8013cd6:	4a46      	ldr	r2, [pc, #280]	; (8013df0 <HAL_GPIO_Init+0x18c>)
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	00db      	lsls	r3, r3, #3
 8013cdc:	4413      	add	r3, r2
 8013cde:	685b      	ldr	r3, [r3, #4]
 8013ce0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8013ce2:	69bb      	ldr	r3, [r7, #24]
 8013ce4:	08da      	lsrs	r2, r3, #3
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	3208      	adds	r2, #8
 8013cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	f003 0307 	and.w	r3, r3, #7
 8013cf6:	009b      	lsls	r3, r3, #2
 8013cf8:	220f      	movs	r2, #15
 8013cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8013cfe:	43db      	mvns	r3, r3
 8013d00:	69fa      	ldr	r2, [r7, #28]
 8013d02:	4013      	ands	r3, r2
 8013d04:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	f003 0307 	and.w	r3, r3, #7
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	220b      	movs	r2, #11
 8013d10:	fa02 f303 	lsl.w	r3, r2, r3
 8013d14:	69fa      	ldr	r2, [r7, #28]
 8013d16:	4313      	orrs	r3, r2
 8013d18:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	08da      	lsrs	r2, r3, #3
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	3208      	adds	r2, #8
 8013d22:	69f9      	ldr	r1, [r7, #28]
 8013d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	005b      	lsls	r3, r3, #1
 8013d32:	2203      	movs	r2, #3
 8013d34:	fa02 f303 	lsl.w	r3, r2, r3
 8013d38:	43db      	mvns	r3, r3
 8013d3a:	69fa      	ldr	r2, [r7, #28]
 8013d3c:	4013      	ands	r3, r2
 8013d3e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8013d40:	69bb      	ldr	r3, [r7, #24]
 8013d42:	005b      	lsls	r3, r3, #1
 8013d44:	2202      	movs	r2, #2
 8013d46:	fa02 f303 	lsl.w	r3, r2, r3
 8013d4a:	69fa      	ldr	r2, [r7, #28]
 8013d4c:	4313      	orrs	r3, r2
 8013d4e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	69fa      	ldr	r2, [r7, #28]
 8013d54:	601a      	str	r2, [r3, #0]
 8013d56:	e067      	b.n	8013e28 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	2b02      	cmp	r3, #2
 8013d5e:	d003      	beq.n	8013d68 <HAL_GPIO_Init+0x104>
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	2b12      	cmp	r3, #18
 8013d66:	d145      	bne.n	8013df4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8013d68:	697b      	ldr	r3, [r7, #20]
 8013d6a:	08da      	lsrs	r2, r3, #3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	3208      	adds	r2, #8
 8013d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	f003 0307 	and.w	r3, r3, #7
 8013d7c:	009b      	lsls	r3, r3, #2
 8013d7e:	220f      	movs	r2, #15
 8013d80:	fa02 f303 	lsl.w	r3, r2, r3
 8013d84:	43db      	mvns	r3, r3
 8013d86:	69fa      	ldr	r2, [r7, #28]
 8013d88:	4013      	ands	r3, r2
 8013d8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	691b      	ldr	r3, [r3, #16]
 8013d90:	f003 020f 	and.w	r2, r3, #15
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	f003 0307 	and.w	r3, r3, #7
 8013d9a:	009b      	lsls	r3, r3, #2
 8013d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8013da0:	69fa      	ldr	r2, [r7, #28]
 8013da2:	4313      	orrs	r3, r2
 8013da4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	08da      	lsrs	r2, r3, #3
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	3208      	adds	r2, #8
 8013dae:	69f9      	ldr	r1, [r7, #28]
 8013db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	005b      	lsls	r3, r3, #1
 8013dbe:	2203      	movs	r2, #3
 8013dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8013dc4:	43db      	mvns	r3, r3
 8013dc6:	69fa      	ldr	r2, [r7, #28]
 8013dc8:	4013      	ands	r3, r2
 8013dca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	f003 0203 	and.w	r2, r3, #3
 8013dd4:	69bb      	ldr	r3, [r7, #24]
 8013dd6:	005b      	lsls	r3, r3, #1
 8013dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8013ddc:	69fa      	ldr	r2, [r7, #28]
 8013dde:	4313      	orrs	r3, r2
 8013de0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	69fa      	ldr	r2, [r7, #28]
 8013de6:	601a      	str	r2, [r3, #0]
 8013de8:	e01e      	b.n	8013e28 <HAL_GPIO_Init+0x1c4>
 8013dea:	bf00      	nop
 8013dec:	46020000 	.word	0x46020000
 8013df0:	08023b58 	.word	0x08023b58
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8013df4:	693b      	ldr	r3, [r7, #16]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8013dfa:	69bb      	ldr	r3, [r7, #24]
 8013dfc:	005b      	lsls	r3, r3, #1
 8013dfe:	2203      	movs	r2, #3
 8013e00:	fa02 f303 	lsl.w	r3, r2, r3
 8013e04:	43db      	mvns	r3, r3
 8013e06:	69fa      	ldr	r2, [r7, #28]
 8013e08:	4013      	ands	r3, r2
 8013e0a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	f003 0203 	and.w	r2, r3, #3
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	005b      	lsls	r3, r3, #1
 8013e18:	fa02 f303 	lsl.w	r3, r2, r3
 8013e1c:	69fa      	ldr	r2, [r7, #28]
 8013e1e:	4313      	orrs	r3, r2
 8013e20:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	69fa      	ldr	r2, [r7, #28]
 8013e26:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	685b      	ldr	r3, [r3, #4]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d00b      	beq.n	8013e48 <HAL_GPIO_Init+0x1e4>
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	2b02      	cmp	r3, #2
 8013e36:	d007      	beq.n	8013e48 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013e3c:	2b11      	cmp	r3, #17
 8013e3e:	d003      	beq.n	8013e48 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	685b      	ldr	r3, [r3, #4]
 8013e44:	2b12      	cmp	r3, #18
 8013e46:	d130      	bne.n	8013eaa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	689b      	ldr	r3, [r3, #8]
 8013e4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8013e4e:	69bb      	ldr	r3, [r7, #24]
 8013e50:	005b      	lsls	r3, r3, #1
 8013e52:	2203      	movs	r2, #3
 8013e54:	fa02 f303 	lsl.w	r3, r2, r3
 8013e58:	43db      	mvns	r3, r3
 8013e5a:	69fa      	ldr	r2, [r7, #28]
 8013e5c:	4013      	ands	r3, r2
 8013e5e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	68da      	ldr	r2, [r3, #12]
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	005b      	lsls	r3, r3, #1
 8013e68:	fa02 f303 	lsl.w	r3, r2, r3
 8013e6c:	69fa      	ldr	r2, [r7, #28]
 8013e6e:	4313      	orrs	r3, r2
 8013e70:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	69fa      	ldr	r2, [r7, #28]
 8013e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8013e7e:	2201      	movs	r2, #1
 8013e80:	69bb      	ldr	r3, [r7, #24]
 8013e82:	fa02 f303 	lsl.w	r3, r2, r3
 8013e86:	43db      	mvns	r3, r3
 8013e88:	69fa      	ldr	r2, [r7, #28]
 8013e8a:	4013      	ands	r3, r2
 8013e8c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	091b      	lsrs	r3, r3, #4
 8013e94:	f003 0201 	and.w	r2, r3, #1
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8013e9e:	69fa      	ldr	r2, [r7, #28]
 8013ea0:	4313      	orrs	r3, r2
 8013ea2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	69fa      	ldr	r2, [r7, #28]
 8013ea8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	2b03      	cmp	r3, #3
 8013eb0:	d017      	beq.n	8013ee2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	68db      	ldr	r3, [r3, #12]
 8013eb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8013eb8:	69bb      	ldr	r3, [r7, #24]
 8013eba:	005b      	lsls	r3, r3, #1
 8013ebc:	2203      	movs	r2, #3
 8013ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8013ec2:	43db      	mvns	r3, r3
 8013ec4:	69fa      	ldr	r2, [r7, #28]
 8013ec6:	4013      	ands	r3, r2
 8013ec8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	689a      	ldr	r2, [r3, #8]
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	005b      	lsls	r3, r3, #1
 8013ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ed6:	69fa      	ldr	r2, [r7, #28]
 8013ed8:	4313      	orrs	r3, r2
 8013eda:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	69fa      	ldr	r2, [r7, #28]
 8013ee0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d07c      	beq.n	8013fe8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8013eee:	4a47      	ldr	r2, [pc, #284]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	089b      	lsrs	r3, r3, #2
 8013ef4:	3318      	adds	r3, #24
 8013ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013efa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	f003 0303 	and.w	r3, r3, #3
 8013f02:	00db      	lsls	r3, r3, #3
 8013f04:	220f      	movs	r2, #15
 8013f06:	fa02 f303 	lsl.w	r3, r2, r3
 8013f0a:	43db      	mvns	r3, r3
 8013f0c:	69fa      	ldr	r2, [r7, #28]
 8013f0e:	4013      	ands	r3, r2
 8013f10:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	0a9a      	lsrs	r2, r3, #10
 8013f16:	4b3e      	ldr	r3, [pc, #248]	; (8014010 <HAL_GPIO_Init+0x3ac>)
 8013f18:	4013      	ands	r3, r2
 8013f1a:	697a      	ldr	r2, [r7, #20]
 8013f1c:	f002 0203 	and.w	r2, r2, #3
 8013f20:	00d2      	lsls	r2, r2, #3
 8013f22:	4093      	lsls	r3, r2
 8013f24:	69fa      	ldr	r2, [r7, #28]
 8013f26:	4313      	orrs	r3, r2
 8013f28:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8013f2a:	4938      	ldr	r1, [pc, #224]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	089b      	lsrs	r3, r3, #2
 8013f30:	3318      	adds	r3, #24
 8013f32:	69fa      	ldr	r2, [r7, #28]
 8013f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8013f38:	4b34      	ldr	r3, [pc, #208]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	43db      	mvns	r3, r3
 8013f42:	69fa      	ldr	r2, [r7, #28]
 8013f44:	4013      	ands	r3, r2
 8013f46:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d003      	beq.n	8013f5c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8013f54:	69fa      	ldr	r2, [r7, #28]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	4313      	orrs	r3, r2
 8013f5a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8013f5c:	4a2b      	ldr	r2, [pc, #172]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8013f62:	4b2a      	ldr	r3, [pc, #168]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013f64:	685b      	ldr	r3, [r3, #4]
 8013f66:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	43db      	mvns	r3, r3
 8013f6c:	69fa      	ldr	r2, [r7, #28]
 8013f6e:	4013      	ands	r3, r2
 8013f70:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d003      	beq.n	8013f86 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8013f7e:	69fa      	ldr	r2, [r7, #28]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	4313      	orrs	r3, r2
 8013f84:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8013f86:	4a21      	ldr	r2, [pc, #132]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013f88:	69fb      	ldr	r3, [r7, #28]
 8013f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8013f8c:	4b1f      	ldr	r3, [pc, #124]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f92:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	43db      	mvns	r3, r3
 8013f98:	69fa      	ldr	r2, [r7, #28]
 8013f9a:	4013      	ands	r3, r2
 8013f9c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d003      	beq.n	8013fb2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8013faa:	69fa      	ldr	r2, [r7, #28]
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	4313      	orrs	r3, r2
 8013fb0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8013fb2:	4a16      	ldr	r2, [pc, #88]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013fb4:	69fb      	ldr	r3, [r7, #28]
 8013fb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8013fba:	4b14      	ldr	r3, [pc, #80]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013fc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	43db      	mvns	r3, r3
 8013fc6:	69fa      	ldr	r2, [r7, #28]
 8013fc8:	4013      	ands	r3, r2
 8013fca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d003      	beq.n	8013fe0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8013fd8:	69fa      	ldr	r2, [r7, #28]
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	4313      	orrs	r3, r2
 8013fde:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8013fe0:	4a0a      	ldr	r2, [pc, #40]	; (801400c <HAL_GPIO_Init+0x3a8>)
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	3301      	adds	r3, #1
 8013fec:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	681a      	ldr	r2, [r3, #0]
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	f47f ae3d 	bne.w	8013c78 <HAL_GPIO_Init+0x14>
  }
}
 8013ffe:	bf00      	nop
 8014000:	bf00      	nop
 8014002:	3724      	adds	r7, #36	; 0x24
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr
 801400c:	46022000 	.word	0x46022000
 8014010:	002f7f7f 	.word	0x002f7f7f

08014014 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8014014:	b480      	push	{r7}
 8014016:	b089      	sub	sp, #36	; 0x24
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 801401e:	2300      	movs	r3, #0
 8014020:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8014026:	e0bc      	b.n	80141a2 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8014028:	2201      	movs	r2, #1
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	fa02 f303 	lsl.w	r3, r2, r3
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	4013      	ands	r3, r2
 8014034:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8014036:	69bb      	ldr	r3, [r7, #24]
 8014038:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	2b00      	cmp	r3, #0
 801403e:	f000 80ad 	beq.w	801419c <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	4a5e      	ldr	r2, [pc, #376]	; (80141c0 <HAL_GPIO_DeInit+0x1ac>)
 8014046:	4293      	cmp	r3, r2
 8014048:	d115      	bne.n	8014076 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 801404a:	4a5e      	ldr	r2, [pc, #376]	; (80141c4 <HAL_GPIO_DeInit+0x1b0>)
 801404c:	69fb      	ldr	r3, [r7, #28]
 801404e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014052:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8014054:	4a5b      	ldr	r2, [pc, #364]	; (80141c4 <HAL_GPIO_DeInit+0x1b0>)
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	00db      	lsls	r3, r3, #3
 801405a:	4413      	add	r3, r2
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8014060:	4b57      	ldr	r3, [pc, #348]	; (80141c0 <HAL_GPIO_DeInit+0x1ac>)
 8014062:	681a      	ldr	r2, [r3, #0]
 8014064:	2101      	movs	r1, #1
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	fa01 f303 	lsl.w	r3, r1, r3
 801406c:	43db      	mvns	r3, r3
 801406e:	4954      	ldr	r1, [pc, #336]	; (80141c0 <HAL_GPIO_DeInit+0x1ac>)
 8014070:	4013      	ands	r3, r2
 8014072:	600b      	str	r3, [r1, #0]
 8014074:	e053      	b.n	801411e <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8014076:	4a54      	ldr	r2, [pc, #336]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	089b      	lsrs	r3, r3, #2
 801407c:	3318      	adds	r3, #24
 801407e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014082:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	f003 0303 	and.w	r3, r3, #3
 801408a:	00db      	lsls	r3, r3, #3
 801408c:	220f      	movs	r2, #15
 801408e:	fa02 f303 	lsl.w	r3, r2, r3
 8014092:	68fa      	ldr	r2, [r7, #12]
 8014094:	4013      	ands	r3, r2
 8014096:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	0a9a      	lsrs	r2, r3, #10
 801409c:	4b4b      	ldr	r3, [pc, #300]	; (80141cc <HAL_GPIO_DeInit+0x1b8>)
 801409e:	4013      	ands	r3, r2
 80140a0:	69ba      	ldr	r2, [r7, #24]
 80140a2:	f002 0203 	and.w	r2, r2, #3
 80140a6:	00d2      	lsls	r2, r2, #3
 80140a8:	4093      	lsls	r3, r2
 80140aa:	68fa      	ldr	r2, [r7, #12]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d136      	bne.n	801411e <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 80140b0:	4b45      	ldr	r3, [pc, #276]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 80140b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	43db      	mvns	r3, r3
 80140ba:	4943      	ldr	r1, [pc, #268]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 80140bc:	4013      	ands	r3, r2
 80140be:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80140c2:	4b41      	ldr	r3, [pc, #260]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 80140c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	43db      	mvns	r3, r3
 80140cc:	493e      	ldr	r1, [pc, #248]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 80140ce:	4013      	ands	r3, r2
 80140d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 80140d4:	4b3c      	ldr	r3, [pc, #240]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	43db      	mvns	r3, r3
 80140dc:	493a      	ldr	r1, [pc, #232]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 80140de:	4013      	ands	r3, r2
 80140e0:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80140e2:	4b39      	ldr	r3, [pc, #228]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 80140e4:	685a      	ldr	r2, [r3, #4]
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	43db      	mvns	r3, r3
 80140ea:	4937      	ldr	r1, [pc, #220]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 80140ec:	4013      	ands	r3, r2
 80140ee:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	f003 0303 	and.w	r3, r3, #3
 80140f6:	00db      	lsls	r3, r3, #3
 80140f8:	220f      	movs	r2, #15
 80140fa:	fa02 f303 	lsl.w	r3, r2, r3
 80140fe:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8014100:	4a31      	ldr	r2, [pc, #196]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	089b      	lsrs	r3, r3, #2
 8014106:	3318      	adds	r3, #24
 8014108:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	43da      	mvns	r2, r3
 8014110:	482d      	ldr	r0, [pc, #180]	; (80141c8 <HAL_GPIO_DeInit+0x1b4>)
 8014112:	69bb      	ldr	r3, [r7, #24]
 8014114:	089b      	lsrs	r3, r3, #2
 8014116:	400a      	ands	r2, r1
 8014118:	3318      	adds	r3, #24
 801411a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	69fb      	ldr	r3, [r7, #28]
 8014124:	005b      	lsls	r3, r3, #1
 8014126:	2103      	movs	r1, #3
 8014128:	fa01 f303 	lsl.w	r3, r1, r3
 801412c:	431a      	orrs	r2, r3
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	08da      	lsrs	r2, r3, #3
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	3208      	adds	r2, #8
 801413a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801413e:	69fb      	ldr	r3, [r7, #28]
 8014140:	f003 0307 	and.w	r3, r3, #7
 8014144:	009b      	lsls	r3, r3, #2
 8014146:	220f      	movs	r2, #15
 8014148:	fa02 f303 	lsl.w	r3, r2, r3
 801414c:	43db      	mvns	r3, r3
 801414e:	69fa      	ldr	r2, [r7, #28]
 8014150:	08d2      	lsrs	r2, r2, #3
 8014152:	4019      	ands	r1, r3
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	3208      	adds	r2, #8
 8014158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	689a      	ldr	r2, [r3, #8]
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	005b      	lsls	r3, r3, #1
 8014164:	2103      	movs	r1, #3
 8014166:	fa01 f303 	lsl.w	r3, r1, r3
 801416a:	43db      	mvns	r3, r3
 801416c:	401a      	ands	r2, r3
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	685a      	ldr	r2, [r3, #4]
 8014176:	2101      	movs	r1, #1
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	fa01 f303 	lsl.w	r3, r1, r3
 801417e:	43db      	mvns	r3, r3
 8014180:	401a      	ands	r2, r3
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	68da      	ldr	r2, [r3, #12]
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	005b      	lsls	r3, r3, #1
 801418e:	2103      	movs	r1, #3
 8014190:	fa01 f303 	lsl.w	r3, r1, r3
 8014194:	43db      	mvns	r3, r3
 8014196:	401a      	ands	r2, r3
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	60da      	str	r2, [r3, #12]
    }

    position++;
 801419c:	69bb      	ldr	r3, [r7, #24]
 801419e:	3301      	adds	r3, #1
 80141a0:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80141a2:	683a      	ldr	r2, [r7, #0]
 80141a4:	69bb      	ldr	r3, [r7, #24]
 80141a6:	fa22 f303 	lsr.w	r3, r2, r3
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	f47f af3c 	bne.w	8014028 <HAL_GPIO_DeInit+0x14>
  }
}
 80141b0:	bf00      	nop
 80141b2:	bf00      	nop
 80141b4:	3724      	adds	r7, #36	; 0x24
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr
 80141be:	bf00      	nop
 80141c0:	46020000 	.word	0x46020000
 80141c4:	08023b58 	.word	0x08023b58
 80141c8:	46022000 	.word	0x46022000
 80141cc:	002f7f7f 	.word	0x002f7f7f

080141d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	460b      	mov	r3, r1
 80141da:	807b      	strh	r3, [r7, #2]
 80141dc:	4613      	mov	r3, r2
 80141de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80141e0:	787b      	ldrb	r3, [r7, #1]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d003      	beq.n	80141ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80141e6:	887a      	ldrh	r2, [r7, #2]
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80141ec:	e002      	b.n	80141f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80141ee:	887a      	ldrh	r2, [r7, #2]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80141f4:	bf00      	nop
 80141f6:	370c      	adds	r7, #12
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr

08014200 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8014200:	b480      	push	{r7}
 8014202:	b085      	sub	sp, #20
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014208:	2300      	movs	r3, #0
 801420a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 801420c:	4b0b      	ldr	r3, [pc, #44]	; (801423c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	f003 0301 	and.w	r3, r3, #1
 8014214:	2b00      	cmp	r3, #0
 8014216:	d002      	beq.n	801421e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8014218:	2301      	movs	r3, #1
 801421a:	73fb      	strb	r3, [r7, #15]
 801421c:	e007      	b.n	801422e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 801421e:	4b07      	ldr	r3, [pc, #28]	; (801423c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f023 0204 	bic.w	r2, r3, #4
 8014226:	4905      	ldr	r1, [pc, #20]	; (801423c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	4313      	orrs	r3, r2
 801422c:	600b      	str	r3, [r1, #0]
  }

  return status;
 801422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3714      	adds	r7, #20
 8014234:	46bd      	mov	sp, r7
 8014236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423a:	4770      	bx	lr
 801423c:	40030400 	.word	0x40030400

08014240 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8014240:	b480      	push	{r7}
 8014242:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8014244:	4b05      	ldr	r3, [pc, #20]	; (801425c <HAL_ICACHE_Enable+0x1c>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4a04      	ldr	r2, [pc, #16]	; (801425c <HAL_ICACHE_Enable+0x1c>)
 801424a:	f043 0301 	orr.w	r3, r3, #1
 801424e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8014250:	2300      	movs	r3, #0
}
 8014252:	4618      	mov	r0, r3
 8014254:	46bd      	mov	sp, r7
 8014256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425a:	4770      	bx	lr
 801425c:	40030400 	.word	0x40030400

08014260 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8014266:	2300      	movs	r3, #0
 8014268:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 801426a:	4b14      	ldr	r3, [pc, #80]	; (80142bc <HAL_ICACHE_Disable+0x5c>)
 801426c:	2202      	movs	r2, #2
 801426e:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8014270:	4b12      	ldr	r3, [pc, #72]	; (80142bc <HAL_ICACHE_Disable+0x5c>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	4a11      	ldr	r2, [pc, #68]	; (80142bc <HAL_ICACHE_Disable+0x5c>)
 8014276:	f023 0301 	bic.w	r3, r3, #1
 801427a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801427c:	f7fc f974 	bl	8010568 <HAL_GetTick>
 8014280:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8014282:	e00f      	b.n	80142a4 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8014284:	f7fc f970 	bl	8010568 <HAL_GetTick>
 8014288:	4602      	mov	r2, r0
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	1ad3      	subs	r3, r2, r3
 801428e:	2b01      	cmp	r3, #1
 8014290:	d908      	bls.n	80142a4 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8014292:	4b0a      	ldr	r3, [pc, #40]	; (80142bc <HAL_ICACHE_Disable+0x5c>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	f003 0301 	and.w	r3, r3, #1
 801429a:	2b00      	cmp	r3, #0
 801429c:	d002      	beq.n	80142a4 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 801429e:	2303      	movs	r3, #3
 80142a0:	71fb      	strb	r3, [r7, #7]
        break;
 80142a2:	e005      	b.n	80142b0 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80142a4:	4b05      	ldr	r3, [pc, #20]	; (80142bc <HAL_ICACHE_Disable+0x5c>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	f003 0301 	and.w	r3, r3, #1
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d1e9      	bne.n	8014284 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 80142b0:	79fb      	ldrb	r3, [r7, #7]
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3708      	adds	r7, #8
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	40030400 	.word	0x40030400

080142c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80142c0:	b480      	push	{r7}
 80142c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80142c4:	4b05      	ldr	r3, [pc, #20]	; (80142dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80142c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c8:	4a04      	ldr	r2, [pc, #16]	; (80142dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80142ca:	f043 0301 	orr.w	r3, r3, #1
 80142ce:	6293      	str	r3, [r2, #40]	; 0x28
}
 80142d0:	bf00      	nop
 80142d2:	46bd      	mov	sp, r7
 80142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop
 80142dc:	46020800 	.word	0x46020800

080142e0 <HAL_PWR_EnableWakeUpPin>:
  *                     the wake up line, the wake up source with
  *                     high polarity and the first wake up I/O.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b087      	sub	sp, #28
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));

  /* Specifies the wake up line polarity for the event detection (rising or falling edge) */
  MODIFY_REG(PWR->WUCR2, (PWR_EWUP_MASK & WakeUpPin), (WakeUpPin >> PWR_WUP_POLARITY_SHIFT));
 80142e8:	4b1b      	ldr	r3, [pc, #108]	; (8014358 <HAL_PWR_EnableWakeUpPin+0x78>)
 80142ea:	699a      	ldr	r2, [r3, #24]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	43db      	mvns	r3, r3
 80142f2:	401a      	ands	r2, r3
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	0a1b      	lsrs	r3, r3, #8
 80142f8:	4917      	ldr	r1, [pc, #92]	; (8014358 <HAL_PWR_EnableWakeUpPin+0x78>)
 80142fa:	4313      	orrs	r3, r2
 80142fc:	618b      	str	r3, [r1, #24]

  /* Specifies the wake up line I/O selection */
  MODIFY_REG(PWR->WUCR3, (3UL << (POSITION_VAL(PWR_EWUP_MASK & WakeUpPin) * 2U)),
 80142fe:	4b16      	ldr	r3, [pc, #88]	; (8014358 <HAL_PWR_EnableWakeUpPin+0x78>)
 8014300:	69da      	ldr	r2, [r3, #28]
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	b2db      	uxtb	r3, r3
 8014306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014308:	693b      	ldr	r3, [r7, #16]
 801430a:	fa93 f3a3 	rbit	r3, r3
 801430e:	60fb      	str	r3, [r7, #12]
  return result;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <HAL_PWR_EnableWakeUpPin+0x3e>
    return 32U;
 801431a:	2320      	movs	r3, #32
 801431c:	e003      	b.n	8014326 <HAL_PWR_EnableWakeUpPin+0x46>
  return __builtin_clz(value);
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	fab3 f383 	clz	r3, r3
 8014324:	b2db      	uxtb	r3, r3
 8014326:	005b      	lsls	r3, r3, #1
 8014328:	2103      	movs	r1, #3
 801432a:	fa01 f303 	lsl.w	r3, r1, r3
 801432e:	43db      	mvns	r3, r3
 8014330:	401a      	ands	r2, r3
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	0c1b      	lsrs	r3, r3, #16
 8014336:	4908      	ldr	r1, [pc, #32]	; (8014358 <HAL_PWR_EnableWakeUpPin+0x78>)
 8014338:	4313      	orrs	r3, r2
 801433a:	61cb      	str	r3, [r1, #28]
             (WakeUpPin >> PWR_WUP_SELECT_SIGNAL_SHIFT));

  /* Enable wake-up line */
  SET_BIT(PWR->WUCR1, (PWR_EWUP_MASK & WakeUpPin));
 801433c:	4b06      	ldr	r3, [pc, #24]	; (8014358 <HAL_PWR_EnableWakeUpPin+0x78>)
 801433e:	695a      	ldr	r2, [r3, #20]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	b2db      	uxtb	r3, r3
 8014344:	4904      	ldr	r1, [pc, #16]	; (8014358 <HAL_PWR_EnableWakeUpPin+0x78>)
 8014346:	4313      	orrs	r3, r2
 8014348:	614b      	str	r3, [r1, #20]
}
 801434a:	bf00      	nop
 801434c:	371c      	adds	r7, #28
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop
 8014358:	46020800 	.word	0x46020800

0801435c <HAL_PWR_DisableWakeUpPin>:
  *                     @arg @ref PWR_WAKEUP_PIN7
  *                     @arg @ref PWR_WAKEUP_PIN8
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
{
 801435c:	b480      	push	{r7}
 801435e:	b083      	sub	sp, #12
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));

  /* Disable wake-up pin */
  CLEAR_BIT(PWR->WUCR1, (PWR_EWUP_MASK & WakeUpPin));
 8014364:	4b06      	ldr	r3, [pc, #24]	; (8014380 <HAL_PWR_DisableWakeUpPin+0x24>)
 8014366:	695a      	ldr	r2, [r3, #20]
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	b2db      	uxtb	r3, r3
 801436c:	43db      	mvns	r3, r3
 801436e:	4904      	ldr	r1, [pc, #16]	; (8014380 <HAL_PWR_DisableWakeUpPin+0x24>)
 8014370:	4013      	ands	r3, r2
 8014372:	614b      	str	r3, [r1, #20]
}
 8014374:	bf00      	nop
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr
 8014380:	46020800 	.word	0x46020800

08014384 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 801438c:	4b34      	ldr	r3, [pc, #208]	; (8014460 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 801438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8014394:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8014396:	68ba      	ldr	r2, [r7, #8]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	429a      	cmp	r2, r3
 801439c:	d101      	bne.n	80143a2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 801439e:	2300      	movs	r3, #0
 80143a0:	e057      	b.n	8014452 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143a8:	d90a      	bls.n	80143c0 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80143aa:	4b2d      	ldr	r3, [pc, #180]	; (8014460 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80143ac:	68db      	ldr	r3, [r3, #12]
 80143ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	4313      	orrs	r3, r2
 80143b6:	4a2a      	ldr	r2, [pc, #168]	; (8014460 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80143b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80143bc:	60d3      	str	r3, [r2, #12]
 80143be:	e007      	b.n	80143d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80143c0:	4b27      	ldr	r3, [pc, #156]	; (8014460 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80143c2:	68db      	ldr	r3, [r3, #12]
 80143c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80143c8:	4925      	ldr	r1, [pc, #148]	; (8014460 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	4313      	orrs	r3, r2
 80143ce:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80143d0:	4b24      	ldr	r3, [pc, #144]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4a24      	ldr	r2, [pc, #144]	; (8014468 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80143d6:	fba2 2303 	umull	r2, r3, r2, r3
 80143da:	099b      	lsrs	r3, r3, #6
 80143dc:	2232      	movs	r2, #50	; 0x32
 80143de:	fb02 f303 	mul.w	r3, r2, r3
 80143e2:	4a21      	ldr	r2, [pc, #132]	; (8014468 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80143e4:	fba2 2303 	umull	r2, r3, r2, r3
 80143e8:	099b      	lsrs	r3, r3, #6
 80143ea:	3301      	adds	r3, #1
 80143ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80143ee:	e002      	b.n	80143f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	3b01      	subs	r3, #1
 80143f4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80143f6:	4b1a      	ldr	r3, [pc, #104]	; (8014460 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d102      	bne.n	8014408 <HAL_PWREx_ControlVoltageScaling+0x84>
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d1f3      	bne.n	80143f0 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d01b      	beq.n	8014446 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 801440e:	4b15      	ldr	r3, [pc, #84]	; (8014464 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4a15      	ldr	r2, [pc, #84]	; (8014468 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8014414:	fba2 2303 	umull	r2, r3, r2, r3
 8014418:	099b      	lsrs	r3, r3, #6
 801441a:	2232      	movs	r2, #50	; 0x32
 801441c:	fb02 f303 	mul.w	r3, r2, r3
 8014420:	4a11      	ldr	r2, [pc, #68]	; (8014468 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8014422:	fba2 2303 	umull	r2, r3, r2, r3
 8014426:	099b      	lsrs	r3, r3, #6
 8014428:	3301      	adds	r3, #1
 801442a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 801442c:	e002      	b.n	8014434 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	3b01      	subs	r3, #1
 8014432:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8014434:	4b0a      	ldr	r3, [pc, #40]	; (8014460 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8014436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801443c:	2b00      	cmp	r3, #0
 801443e:	d102      	bne.n	8014446 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d1f3      	bne.n	801442e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d101      	bne.n	8014450 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 801444c:	2303      	movs	r3, #3
 801444e:	e000      	b.n	8014452 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	3714      	adds	r7, #20
 8014456:	46bd      	mov	sp, r7
 8014458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445c:	4770      	bx	lr
 801445e:	bf00      	nop
 8014460:	46020800 	.word	0x46020800
 8014464:	20000028 	.word	0x20000028
 8014468:	10624dd3 	.word	0x10624dd3

0801446c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801446c:	b480      	push	{r7}
 801446e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8014470:	4b04      	ldr	r3, [pc, #16]	; (8014484 <HAL_PWREx_GetVoltageRange+0x18>)
 8014472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8014478:	4618      	mov	r0, r3
 801447a:	46bd      	mov	sp, r7
 801447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014480:	4770      	bx	lr
 8014482:	bf00      	nop
 8014484:	46020800 	.word	0x46020800

08014488 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8014488:	b480      	push	{r7}
 801448a:	b085      	sub	sp, #20
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8014490:	4b22      	ldr	r3, [pc, #136]	; (801451c <HAL_PWREx_ConfigSupply+0x94>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	4a22      	ldr	r2, [pc, #136]	; (8014520 <HAL_PWREx_ConfigSupply+0x98>)
 8014496:	fba2 2303 	umull	r2, r3, r2, r3
 801449a:	099b      	lsrs	r3, r3, #6
 801449c:	2232      	movs	r2, #50	; 0x32
 801449e:	fb02 f303 	mul.w	r3, r2, r3
 80144a2:	4a1f      	ldr	r2, [pc, #124]	; (8014520 <HAL_PWREx_ConfigSupply+0x98>)
 80144a4:	fba2 2303 	umull	r2, r3, r2, r3
 80144a8:	099b      	lsrs	r3, r3, #6
 80144aa:	3301      	adds	r3, #1
 80144ac:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d113      	bne.n	80144dc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80144b4:	4b1b      	ldr	r3, [pc, #108]	; (8014524 <HAL_PWREx_ConfigSupply+0x9c>)
 80144b6:	689b      	ldr	r3, [r3, #8]
 80144b8:	4a1a      	ldr	r2, [pc, #104]	; (8014524 <HAL_PWREx_ConfigSupply+0x9c>)
 80144ba:	f023 0302 	bic.w	r3, r3, #2
 80144be:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80144c0:	e002      	b.n	80144c8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	3b01      	subs	r3, #1
 80144c6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80144c8:	4b16      	ldr	r3, [pc, #88]	; (8014524 <HAL_PWREx_ConfigSupply+0x9c>)
 80144ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144cc:	f003 0302 	and.w	r3, r3, #2
 80144d0:	2b02      	cmp	r3, #2
 80144d2:	d116      	bne.n	8014502 <HAL_PWREx_ConfigSupply+0x7a>
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1f3      	bne.n	80144c2 <HAL_PWREx_ConfigSupply+0x3a>
 80144da:	e012      	b.n	8014502 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80144dc:	4b11      	ldr	r3, [pc, #68]	; (8014524 <HAL_PWREx_ConfigSupply+0x9c>)
 80144de:	689b      	ldr	r3, [r3, #8]
 80144e0:	4a10      	ldr	r2, [pc, #64]	; (8014524 <HAL_PWREx_ConfigSupply+0x9c>)
 80144e2:	f043 0302 	orr.w	r3, r3, #2
 80144e6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80144e8:	e002      	b.n	80144f0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	3b01      	subs	r3, #1
 80144ee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80144f0:	4b0c      	ldr	r3, [pc, #48]	; (8014524 <HAL_PWREx_ConfigSupply+0x9c>)
 80144f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144f4:	f003 0302 	and.w	r3, r3, #2
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d102      	bne.n	8014502 <HAL_PWREx_ConfigSupply+0x7a>
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d1f3      	bne.n	80144ea <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d101      	bne.n	801450c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8014508:	2303      	movs	r3, #3
 801450a:	e000      	b.n	801450e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 801450c:	2300      	movs	r3, #0
}
 801450e:	4618      	mov	r0, r3
 8014510:	3714      	adds	r7, #20
 8014512:	46bd      	mov	sp, r7
 8014514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	20000028 	.word	0x20000028
 8014520:	10624dd3 	.word	0x10624dd3
 8014524:	46020800 	.word	0x46020800

08014528 <HAL_PWREx_EnterSTOP2Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8014528:	b480      	push	{r7}
 801452a:	b083      	sub	sp, #12
 801452c:	af00      	add	r7, sp, #0
 801452e:	4603      	mov	r3, r0
 8014530:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 2 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8014532:	4b11      	ldr	r3, [pc, #68]	; (8014578 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	f023 0307 	bic.w	r3, r3, #7
 801453a:	4a0f      	ldr	r2, [pc, #60]	; (8014578 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 801453c:	f043 0302 	orr.w	r3, r3, #2
 8014540:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8014542:	4b0e      	ldr	r3, [pc, #56]	; (801457c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8014544:	691b      	ldr	r3, [r3, #16]
 8014546:	4a0d      	ldr	r2, [pc, #52]	; (801457c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8014548:	f043 0304 	orr.w	r3, r3, #4
 801454c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 801454e:	79fb      	ldrb	r3, [r7, #7]
 8014550:	2b01      	cmp	r3, #1
 8014552:	d101      	bne.n	8014558 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014554:	bf30      	wfi
 8014556:	e002      	b.n	801455e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014558:	bf40      	sev
    __WFE();
 801455a:	bf20      	wfe
    __WFE();
 801455c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801455e:	4b07      	ldr	r3, [pc, #28]	; (801457c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8014560:	691b      	ldr	r3, [r3, #16]
 8014562:	4a06      	ldr	r2, [pc, #24]	; (801457c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8014564:	f023 0304 	bic.w	r3, r3, #4
 8014568:	6113      	str	r3, [r2, #16]
}
 801456a:	bf00      	nop
 801456c:	370c      	adds	r7, #12
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr
 8014576:	bf00      	nop
 8014578:	46020800 	.word	0x46020800
 801457c:	e000ed00 	.word	0xe000ed00

08014580 <HAL_PWREx_S3WU_IRQHandler>:
  * @param  WakeUpPin : Specifies the wakeup pin interrupt to be handled.
  *                     This parameter can be a combination of @ref PWR_WakeUp_Pins.
  * @retval None.
  */
void HAL_PWREx_S3WU_IRQHandler(uint32_t WakeUpPin)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
  /* Check PWR wake up line 1 */
  if ((WakeUpPin & PWR_WAKEUP_PIN1) != 0U)
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f003 0301 	and.w	r3, r3, #1
 801458e:	2b00      	cmp	r3, #0
 8014590:	d00e      	beq.n	80145b0 <HAL_PWREx_S3WU_IRQHandler+0x30>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF1) != 0U)
 8014592:	4b4f      	ldr	r3, [pc, #316]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014596:	f003 0301 	and.w	r3, r3, #1
 801459a:	2b00      	cmp	r3, #0
 801459c:	d008      	beq.n	80145b0 <HAL_PWREx_S3WU_IRQHandler+0x30>
    {
      /* Clear PWR wake up flag line 1 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF1);
 801459e:	4b4c      	ldr	r3, [pc, #304]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80145a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145a2:	4a4b      	ldr	r2, [pc, #300]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80145a4:	f043 0301 	orr.w	r3, r3, #1
 80145a8:	6493      	str	r3, [r2, #72]	; 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f000 f892 	bl	80146d4 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 2 */
  if ((WakeUpPin & PWR_WAKEUP_PIN2) != 0U)
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f003 0302 	and.w	r3, r3, #2
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d00e      	beq.n	80145d8 <HAL_PWREx_S3WU_IRQHandler+0x58>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF2) != 0U)
 80145ba:	4b45      	ldr	r3, [pc, #276]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80145bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145be:	f003 0302 	and.w	r3, r3, #2
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d008      	beq.n	80145d8 <HAL_PWREx_S3WU_IRQHandler+0x58>
    {
      /* Clear PWR wake up flag line 2 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF2);
 80145c6:	4b42      	ldr	r3, [pc, #264]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80145c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145ca:	4a41      	ldr	r2, [pc, #260]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80145cc:	f043 0302 	orr.w	r3, r3, #2
 80145d0:	6493      	str	r3, [r2, #72]	; 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 f87e 	bl	80146d4 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 3 */
  if ((WakeUpPin & PWR_WAKEUP_PIN3) != 0U)
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f003 0304 	and.w	r3, r3, #4
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d00e      	beq.n	8014600 <HAL_PWREx_S3WU_IRQHandler+0x80>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF3) != 0U)
 80145e2:	4b3b      	ldr	r3, [pc, #236]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80145e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145e6:	f003 0304 	and.w	r3, r3, #4
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d008      	beq.n	8014600 <HAL_PWREx_S3WU_IRQHandler+0x80>
    {
      /* Clear PWR wake up flag line 3 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF3);
 80145ee:	4b38      	ldr	r3, [pc, #224]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80145f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145f2:	4a37      	ldr	r2, [pc, #220]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80145f4:	f043 0304 	orr.w	r3, r3, #4
 80145f8:	6493      	str	r3, [r2, #72]	; 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f000 f86a 	bl	80146d4 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 4 */
  if ((WakeUpPin & PWR_WAKEUP_PIN4) != 0U)
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f003 0308 	and.w	r3, r3, #8
 8014606:	2b00      	cmp	r3, #0
 8014608:	d00e      	beq.n	8014628 <HAL_PWREx_S3WU_IRQHandler+0xa8>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF4) != 0U)
 801460a:	4b31      	ldr	r3, [pc, #196]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 801460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801460e:	f003 0308 	and.w	r3, r3, #8
 8014612:	2b00      	cmp	r3, #0
 8014614:	d008      	beq.n	8014628 <HAL_PWREx_S3WU_IRQHandler+0xa8>
    {
      /* Clear PWR wake up flag line 4 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF4);
 8014616:	4b2e      	ldr	r3, [pc, #184]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801461a:	4a2d      	ldr	r2, [pc, #180]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 801461c:	f043 0308 	orr.w	r3, r3, #8
 8014620:	6493      	str	r3, [r2, #72]	; 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f000 f856 	bl	80146d4 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 5 */
  if ((WakeUpPin & PWR_WAKEUP_PIN5) != 0U)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f003 0310 	and.w	r3, r3, #16
 801462e:	2b00      	cmp	r3, #0
 8014630:	d00e      	beq.n	8014650 <HAL_PWREx_S3WU_IRQHandler+0xd0>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF5) != 0U)
 8014632:	4b27      	ldr	r3, [pc, #156]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014636:	f003 0310 	and.w	r3, r3, #16
 801463a:	2b00      	cmp	r3, #0
 801463c:	d008      	beq.n	8014650 <HAL_PWREx_S3WU_IRQHandler+0xd0>
    {
      /* Clear PWR wake up flag line 5 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF5);
 801463e:	4b24      	ldr	r3, [pc, #144]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014642:	4a23      	ldr	r2, [pc, #140]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014644:	f043 0310 	orr.w	r3, r3, #16
 8014648:	6493      	str	r3, [r2, #72]	; 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f000 f842 	bl	80146d4 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 6 */
  if ((WakeUpPin & PWR_WAKEUP_PIN6) != 0U)
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f003 0320 	and.w	r3, r3, #32
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00e      	beq.n	8014678 <HAL_PWREx_S3WU_IRQHandler+0xf8>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF6) != 0U)
 801465a:	4b1d      	ldr	r3, [pc, #116]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 801465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801465e:	f003 0320 	and.w	r3, r3, #32
 8014662:	2b00      	cmp	r3, #0
 8014664:	d008      	beq.n	8014678 <HAL_PWREx_S3WU_IRQHandler+0xf8>
    {
      /* Clear PWR wake up flag line 6 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF6);
 8014666:	4b1a      	ldr	r3, [pc, #104]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801466a:	4a19      	ldr	r2, [pc, #100]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 801466c:	f043 0320 	orr.w	r3, r3, #32
 8014670:	6493      	str	r3, [r2, #72]	; 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f000 f82e 	bl	80146d4 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 7 */
  if ((WakeUpPin & PWR_WAKEUP_PIN7) != 0U)
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00e      	beq.n	80146a0 <HAL_PWREx_S3WU_IRQHandler+0x120>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF7) != 0U)
 8014682:	4b13      	ldr	r3, [pc, #76]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801468a:	2b00      	cmp	r3, #0
 801468c:	d008      	beq.n	80146a0 <HAL_PWREx_S3WU_IRQHandler+0x120>
    {
      /* Clear PWR wake up flag line 7 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF7);
 801468e:	4b10      	ldr	r3, [pc, #64]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014692:	4a0f      	ldr	r2, [pc, #60]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 8014694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014698:	6493      	str	r3, [r2, #72]	; 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 f81a 	bl	80146d4 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 8 */
  if ((WakeUpPin & PWR_WAKEUP_PIN8) != 0U)
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d00e      	beq.n	80146c8 <HAL_PWREx_S3WU_IRQHandler+0x148>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF8) != 0U)
 80146aa:	4b09      	ldr	r3, [pc, #36]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80146ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d008      	beq.n	80146c8 <HAL_PWREx_S3WU_IRQHandler+0x148>
    {
      /* Clear PWR wake up flag line 8 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF8);
 80146b6:	4b06      	ldr	r3, [pc, #24]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80146b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146ba:	4a05      	ldr	r2, [pc, #20]	; (80146d0 <HAL_PWREx_S3WU_IRQHandler+0x150>)
 80146bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146c0:	6493      	str	r3, [r2, #72]	; 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f000 f806 	bl	80146d4 <HAL_PWREx_S3WUCallback>
    }
  }
}
 80146c8:	bf00      	nop
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	46020800 	.word	0x46020800

080146d4 <HAL_PWREx_S3WUCallback>:
  * @param  WakeUpPin : Specifies the wakeup pin interrupt to be handled.
  *                     This parameter can be a combination of @ref PWR_WakeUp_Pins.
  * @retval None.
  */
__weak void HAL_PWREx_S3WUCallback(uint32_t WakeUpPin)
{
 80146d4:	b480      	push	{r7}
 80146d6:	b083      	sub	sp, #12
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  UNUSED(WakeUpPin);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_S3WU_IRQHandler() API can be implemented in the user file
   */
}
 80146dc:	bf00      	nop
 80146de:	370c      	adds	r7, #12
 80146e0:	46bd      	mov	sp, r7
 80146e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e6:	4770      	bx	lr

080146e8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80146e8:	b480      	push	{r7}
 80146ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80146ec:	4b05      	ldr	r3, [pc, #20]	; (8014704 <HAL_PWREx_EnableVddIO2+0x1c>)
 80146ee:	691b      	ldr	r3, [r3, #16]
 80146f0:	4a04      	ldr	r2, [pc, #16]	; (8014704 <HAL_PWREx_EnableVddIO2+0x1c>)
 80146f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80146f6:	6113      	str	r3, [r2, #16]
}
 80146f8:	bf00      	nop
 80146fa:	46bd      	mov	sp, r7
 80146fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop
 8014704:	46020800 	.word	0x46020800

08014708 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8014708:	b480      	push	{r7}
 801470a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 801470c:	4b05      	ldr	r3, [pc, #20]	; (8014724 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014710:	4a04      	ldr	r2, [pc, #16]	; (8014724 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8014712:	f043 0301 	orr.w	r3, r3, #1
 8014716:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8014718:	bf00      	nop
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop
 8014724:	46020800 	.word	0x46020800

08014728 <HAL_PWREx_EnableRAMsContentStopRetention>:
  *                      This parameter can be one or a combination of the same
  *                      memory @ref PWREx_RAM_Contents_Stop_Retention.
  * @retval None.
  */
void HAL_PWREx_EnableRAMsContentStopRetention(uint32_t RAMSelection)
{
 8014728:	b480      	push	{r7}
 801472a:	b085      	sub	sp, #20
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  uint32_t dummy;

  /* Check RAM ID */
  switch (RAMSelection & SRAM_ID_MASK)
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	0c1b      	lsrs	r3, r3, #16
 8014734:	041b      	lsls	r3, r3, #16
 8014736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801473a:	f000 809a 	beq.w	8014872 <HAL_PWREx_EnableRAMsContentStopRetention+0x14a>
 801473e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014742:	f200 80a3 	bhi.w	801488c <HAL_PWREx_EnableRAMsContentStopRetention+0x164>
 8014746:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801474a:	f000 8085 	beq.w	8014858 <HAL_PWREx_EnableRAMsContentStopRetention+0x130>
 801474e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014752:	f200 809b 	bhi.w	801488c <HAL_PWREx_EnableRAMsContentStopRetention+0x164>
 8014756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801475a:	d070      	beq.n	801483e <HAL_PWREx_EnableRAMsContentStopRetention+0x116>
 801475c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014760:	f200 8094 	bhi.w	801488c <HAL_PWREx_EnableRAMsContentStopRetention+0x164>
 8014764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014768:	d05c      	beq.n	8014824 <HAL_PWREx_EnableRAMsContentStopRetention+0xfc>
 801476a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801476e:	f200 808d 	bhi.w	801488c <HAL_PWREx_EnableRAMsContentStopRetention+0x164>
 8014772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014776:	d048      	beq.n	801480a <HAL_PWREx_EnableRAMsContentStopRetention+0xe2>
 8014778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801477c:	f200 8086 	bhi.w	801488c <HAL_PWREx_EnableRAMsContentStopRetention+0x164>
 8014780:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8014784:	d034      	beq.n	80147f0 <HAL_PWREx_EnableRAMsContentStopRetention+0xc8>
 8014786:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801478a:	d87f      	bhi.n	801488c <HAL_PWREx_EnableRAMsContentStopRetention+0x164>
 801478c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014790:	d022      	beq.n	80147d8 <HAL_PWREx_EnableRAMsContentStopRetention+0xb0>
 8014792:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014796:	d879      	bhi.n	801488c <HAL_PWREx_EnableRAMsContentStopRetention+0x164>
 8014798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801479c:	d003      	beq.n	80147a6 <HAL_PWREx_EnableRAMsContentStopRetention+0x7e>
 801479e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80147a2:	d00c      	beq.n	80147be <HAL_PWREx_EnableRAMsContentStopRetention+0x96>
    }
#endif /* defined (PWR_CR4_SRAM5PDS1) */

    default:
    {
      return;
 80147a4:	e072      	b.n	801488c <HAL_PWREx_EnableRAMsContentStopRetention+0x164>
      dummy = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f003 0307 	and.w	r3, r3, #7
 80147ac:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, dummy);
 80147ae:	4b3a      	ldr	r3, [pc, #232]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 80147b0:	685a      	ldr	r2, [r3, #4]
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	43db      	mvns	r3, r3
 80147b6:	4938      	ldr	r1, [pc, #224]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 80147b8:	4013      	ands	r3, r2
 80147ba:	604b      	str	r3, [r1, #4]
      break;
 80147bc:	e067      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      dummy = (RAMSelection & PWR_SRAM2_FULL_STOP) & ~SRAM_ID_MASK;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f003 0303 	and.w	r3, r3, #3
 80147c4:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM2PDS1_Pos));
 80147c6:	4b34      	ldr	r3, [pc, #208]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 80147c8:	685a      	ldr	r2, [r3, #4]
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	011b      	lsls	r3, r3, #4
 80147ce:	43db      	mvns	r3, r3
 80147d0:	4931      	ldr	r1, [pc, #196]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 80147d2:	4013      	ands	r3, r2
 80147d4:	604b      	str	r3, [r1, #4]
      break;
 80147d6:	e05a      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      dummy = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID | PAGE04_ID |
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM3PDS1_Pos));
 80147de:	4b2e      	ldr	r3, [pc, #184]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 80147e0:	685a      	ldr	r2, [r3, #4]
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	041b      	lsls	r3, r3, #16
 80147e6:	43db      	mvns	r3, r3
 80147e8:	492b      	ldr	r1, [pc, #172]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 80147ea:	4013      	ands	r3, r2
 80147ec:	604b      	str	r3, [r1, #4]
      break;
 80147ee:	e04e      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      dummy = (RAMSelection & PWR_SRAM4_FULL_STOP) & ~SRAM_ID_MASK;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f003 0301 	and.w	r3, r3, #1
 80147f6:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM4PDS_Pos));
 80147f8:	4b27      	ldr	r3, [pc, #156]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 80147fa:	685a      	ldr	r2, [r3, #4]
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	019b      	lsls	r3, r3, #6
 8014800:	43db      	mvns	r3, r3
 8014802:	4925      	ldr	r1, [pc, #148]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 8014804:	4013      	ands	r3, r2
 8014806:	604b      	str	r3, [r1, #4]
      break;
 8014808:	e041      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      dummy = (RAMSelection & PWR_ICACHE_FULL_STOP) & ~SRAM_ID_MASK;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f003 0301 	and.w	r3, r3, #1
 8014810:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, dummy << PWR_CR2_ICRAMPDS_Pos);
 8014812:	4b21      	ldr	r3, [pc, #132]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 8014814:	685a      	ldr	r2, [r3, #4]
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	021b      	lsls	r3, r3, #8
 801481a:	43db      	mvns	r3, r3
 801481c:	491e      	ldr	r1, [pc, #120]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 801481e:	4013      	ands	r3, r2
 8014820:	604b      	str	r3, [r1, #4]
      break;
 8014822:	e034      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      dummy = (RAMSelection & PWR_DCACHE1_FULL_STOP) & ~SRAM_ID_MASK;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f003 0301 	and.w	r3, r3, #1
 801482a:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, dummy << PWR_CR2_DC1RAMPDS_Pos);
 801482c:	4b1a      	ldr	r3, [pc, #104]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 801482e:	685a      	ldr	r2, [r3, #4]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	025b      	lsls	r3, r3, #9
 8014834:	43db      	mvns	r3, r3
 8014836:	4918      	ldr	r1, [pc, #96]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 8014838:	4013      	ands	r3, r2
 801483a:	604b      	str	r3, [r1, #4]
      break;
 801483c:	e027      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      dummy = (RAMSelection & PWR_DMA2DRAM_FULL_STOP) & ~SRAM_ID_MASK;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	f003 0301 	and.w	r3, r3, #1
 8014844:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, (dummy << PWR_CR2_DMA2DRAMPDS_Pos));
 8014846:	4b14      	ldr	r3, [pc, #80]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 8014848:	685a      	ldr	r2, [r3, #4]
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	029b      	lsls	r3, r3, #10
 801484e:	43db      	mvns	r3, r3
 8014850:	4911      	ldr	r1, [pc, #68]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 8014852:	4013      	ands	r3, r2
 8014854:	604b      	str	r3, [r1, #4]
      break;
 8014856:	e01a      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      dummy = (RAMSelection & PWR_PERIPHRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f003 0301 	and.w	r3, r3, #1
 801485e:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, (dummy << PWR_CR2_PRAMPDS_Pos));
 8014860:	4b0d      	ldr	r3, [pc, #52]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 8014862:	685a      	ldr	r2, [r3, #4]
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	02db      	lsls	r3, r3, #11
 8014868:	43db      	mvns	r3, r3
 801486a:	490b      	ldr	r1, [pc, #44]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 801486c:	4013      	ands	r3, r2
 801486e:	604b      	str	r3, [r1, #4]
      break;
 8014870:	e00d      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      dummy = (RAMSelection & PWR_PKA32RAM_FULL_STOP) & ~SRAM_ID_MASK;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f003 0301 	and.w	r3, r3, #1
 8014878:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(PWR->CR2, (dummy << PWR_CR2_PKARAMPDS_Pos));
 801487a:	4b07      	ldr	r3, [pc, #28]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 801487c:	685a      	ldr	r2, [r3, #4]
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	031b      	lsls	r3, r3, #12
 8014882:	43db      	mvns	r3, r3
 8014884:	4904      	ldr	r1, [pc, #16]	; (8014898 <HAL_PWREx_EnableRAMsContentStopRetention+0x170>)
 8014886:	4013      	ands	r3, r2
 8014888:	604b      	str	r3, [r1, #4]
      break;
 801488a:	e000      	b.n	801488e <HAL_PWREx_EnableRAMsContentStopRetention+0x166>
      return;
 801488c:	bf00      	nop
      break;
    }
  }
}
 801488e:	3714      	adds	r7, #20
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr
 8014898:	46020800 	.word	0x46020800

0801489c <HAL_PWREx_DisableRAMsContentStopRetention>:
  *                      This parameter can be one or a combination of the same
  *                      memory @ref PWREx_RAM_Contents_Stop_Retention.
  * @retval None.
  */
void HAL_PWREx_DisableRAMsContentStopRetention(uint32_t RAMSelection)
{
 801489c:	b480      	push	{r7}
 801489e:	b085      	sub	sp, #20
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  uint32_t dummy;

  /* Check RAM ID */
  switch (RAMSelection & SRAM_ID_MASK)
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	0c1b      	lsrs	r3, r3, #16
 80148a8:	041b      	lsls	r3, r3, #16
 80148aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80148ae:	f000 8090 	beq.w	80149d2 <HAL_PWREx_DisableRAMsContentStopRetention+0x136>
 80148b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80148b6:	f200 8098 	bhi.w	80149ea <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 80148ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80148be:	d07c      	beq.n	80149ba <HAL_PWREx_DisableRAMsContentStopRetention+0x11e>
 80148c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80148c4:	f200 8091 	bhi.w	80149ea <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 80148c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80148cc:	d069      	beq.n	80149a2 <HAL_PWREx_DisableRAMsContentStopRetention+0x106>
 80148ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80148d2:	f200 808a 	bhi.w	80149ea <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 80148d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80148da:	d056      	beq.n	801498a <HAL_PWREx_DisableRAMsContentStopRetention+0xee>
 80148dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80148e0:	f200 8083 	bhi.w	80149ea <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 80148e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80148e8:	d043      	beq.n	8014972 <HAL_PWREx_DisableRAMsContentStopRetention+0xd6>
 80148ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80148ee:	d87c      	bhi.n	80149ea <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 80148f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80148f4:	d031      	beq.n	801495a <HAL_PWREx_DisableRAMsContentStopRetention+0xbe>
 80148f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80148fa:	d876      	bhi.n	80149ea <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 80148fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014900:	d020      	beq.n	8014944 <HAL_PWREx_DisableRAMsContentStopRetention+0xa8>
 8014902:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014906:	d870      	bhi.n	80149ea <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8014908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801490c:	d003      	beq.n	8014916 <HAL_PWREx_DisableRAMsContentStopRetention+0x7a>
 801490e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014912:	d00b      	beq.n	801492c <HAL_PWREx_DisableRAMsContentStopRetention+0x90>
    }
#endif /* defined (PWR_CR4_SRAM5PDS1) */

    default:
    {
      return;
 8014914:	e069      	b.n	80149ea <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
      dummy   = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	f003 0307 	and.w	r3, r3, #7
 801491c:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, dummy);
 801491e:	4b36      	ldr	r3, [pc, #216]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8014920:	685a      	ldr	r2, [r3, #4]
 8014922:	4935      	ldr	r1, [pc, #212]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	4313      	orrs	r3, r2
 8014928:	604b      	str	r3, [r1, #4]
      break;
 801492a:	e05f      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM2_FULL_STOP) & ~SRAM_ID_MASK;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f003 0303 	and.w	r3, r3, #3
 8014932:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM2PDS1_Pos));
 8014934:	4b30      	ldr	r3, [pc, #192]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8014936:	685a      	ldr	r2, [r3, #4]
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	011b      	lsls	r3, r3, #4
 801493c:	492e      	ldr	r1, [pc, #184]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 801493e:	4313      	orrs	r3, r2
 8014940:	604b      	str	r3, [r1, #4]
      break;
 8014942:	e053      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID | PAGE04_ID |
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	b2db      	uxtb	r3, r3
 8014948:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM3PDS1_Pos));
 801494a:	4b2b      	ldr	r3, [pc, #172]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 801494c:	685a      	ldr	r2, [r3, #4]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	041b      	lsls	r3, r3, #16
 8014952:	4929      	ldr	r1, [pc, #164]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8014954:	4313      	orrs	r3, r2
 8014956:	604b      	str	r3, [r1, #4]
      break;
 8014958:	e048      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM4_FULL_STOP) & ~SRAM_ID_MASK;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f003 0301 	and.w	r3, r3, #1
 8014960:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM4PDS_Pos));
 8014962:	4b25      	ldr	r3, [pc, #148]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8014964:	685a      	ldr	r2, [r3, #4]
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	019b      	lsls	r3, r3, #6
 801496a:	4923      	ldr	r1, [pc, #140]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 801496c:	4313      	orrs	r3, r2
 801496e:	604b      	str	r3, [r1, #4]
      break;
 8014970:	e03c      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_ICACHE_FULL_STOP) & ~SRAM_ID_MASK;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f003 0301 	and.w	r3, r3, #1
 8014978:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_ICRAMPDS_Pos));
 801497a:	4b1f      	ldr	r3, [pc, #124]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 801497c:	685a      	ldr	r2, [r3, #4]
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	021b      	lsls	r3, r3, #8
 8014982:	491d      	ldr	r1, [pc, #116]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8014984:	4313      	orrs	r3, r2
 8014986:	604b      	str	r3, [r1, #4]
      break;
 8014988:	e030      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DCACHE1_FULL_STOP) & ~SRAM_ID_MASK;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f003 0301 	and.w	r3, r3, #1
 8014990:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DC1RAMPDS_Pos));
 8014992:	4b19      	ldr	r3, [pc, #100]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8014994:	685a      	ldr	r2, [r3, #4]
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	025b      	lsls	r3, r3, #9
 801499a:	4917      	ldr	r1, [pc, #92]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 801499c:	4313      	orrs	r3, r2
 801499e:	604b      	str	r3, [r1, #4]
      break;
 80149a0:	e024      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DMA2DRAM_FULL_STOP) & ~SRAM_ID_MASK;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f003 0301 	and.w	r3, r3, #1
 80149a8:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DMA2DRAMPDS_Pos));
 80149aa:	4b13      	ldr	r3, [pc, #76]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80149ac:	685a      	ldr	r2, [r3, #4]
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	029b      	lsls	r3, r3, #10
 80149b2:	4911      	ldr	r1, [pc, #68]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80149b4:	4313      	orrs	r3, r2
 80149b6:	604b      	str	r3, [r1, #4]
      break;
 80149b8:	e018      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PERIPHRAM_FULL_STOP) & ~SRAM_ID_MASK;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f003 0301 	and.w	r3, r3, #1
 80149c0:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PRAMPDS_Pos));
 80149c2:	4b0d      	ldr	r3, [pc, #52]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80149c4:	685a      	ldr	r2, [r3, #4]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	02db      	lsls	r3, r3, #11
 80149ca:	490b      	ldr	r1, [pc, #44]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80149cc:	4313      	orrs	r3, r2
 80149ce:	604b      	str	r3, [r1, #4]
      break;
 80149d0:	e00c      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PKA32RAM_FULL_STOP) & ~SRAM_ID_MASK;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f003 0301 	and.w	r3, r3, #1
 80149d8:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PKARAMPDS_Pos));
 80149da:	4b07      	ldr	r3, [pc, #28]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80149dc:	685a      	ldr	r2, [r3, #4]
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	031b      	lsls	r3, r3, #12
 80149e2:	4905      	ldr	r1, [pc, #20]	; (80149f8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80149e4:	4313      	orrs	r3, r2
 80149e6:	604b      	str	r3, [r1, #4]
      break;
 80149e8:	e000      	b.n	80149ec <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      return;
 80149ea:	bf00      	nop
      break;
    }
  }
}
 80149ec:	3714      	adds	r7, #20
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr
 80149f6:	bf00      	nop
 80149f8:	46020800 	.word	0x46020800

080149fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b08e      	sub	sp, #56	; 0x38
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8014a04:	2300      	movs	r3, #0
 8014a06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d102      	bne.n	8014a16 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8014a10:	2301      	movs	r3, #1
 8014a12:	f000 bec3 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014a16:	4b9c      	ldr	r3, [pc, #624]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014a18:	69db      	ldr	r3, [r3, #28]
 8014a1a:	f003 030c 	and.w	r3, r3, #12
 8014a1e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014a20:	4b99      	ldr	r3, [pc, #612]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a24:	f003 0303 	and.w	r3, r3, #3
 8014a28:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f003 0310 	and.w	r3, r3, #16
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f000 8172 	beq.w	8014d1c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8014a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d007      	beq.n	8014a4e <HAL_RCC_OscConfig+0x52>
 8014a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a40:	2b0c      	cmp	r3, #12
 8014a42:	f040 80e4 	bne.w	8014c0e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8014a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	f040 80e0 	bne.w	8014c0e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014a4e:	4b8e      	ldr	r3, [pc, #568]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	f003 0304 	and.w	r3, r3, #4
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d006      	beq.n	8014a68 <HAL_RCC_OscConfig+0x6c>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	69db      	ldr	r3, [r3, #28]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d102      	bne.n	8014a68 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8014a62:	2301      	movs	r3, #1
 8014a64:	f000 be9a 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a6c:	4b86      	ldr	r3, [pc, #536]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014a6e:	689b      	ldr	r3, [r3, #8]
 8014a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d004      	beq.n	8014a82 <HAL_RCC_OscConfig+0x86>
 8014a78:	4b83      	ldr	r3, [pc, #524]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014a7a:	689b      	ldr	r3, [r3, #8]
 8014a7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014a80:	e005      	b.n	8014a8e <HAL_RCC_OscConfig+0x92>
 8014a82:	4b81      	ldr	r3, [pc, #516]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014a88:	041b      	lsls	r3, r3, #16
 8014a8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	d255      	bcs.n	8014b3e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d10a      	bne.n	8014aae <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f001 fa25 	bl	8015eec <RCC_SetFlashLatencyFromMSIRange>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d002      	beq.n	8014aae <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	f000 be77 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8014aae:	4b76      	ldr	r3, [pc, #472]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014ab0:	689b      	ldr	r3, [r3, #8]
 8014ab2:	4a75      	ldr	r2, [pc, #468]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014ab8:	6093      	str	r3, [r2, #8]
 8014aba:	4b73      	ldr	r3, [pc, #460]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014abc:	689b      	ldr	r3, [r3, #8]
 8014abe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ac6:	4970      	ldr	r1, [pc, #448]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014ac8:	4313      	orrs	r3, r2
 8014aca:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ad0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8014ad4:	d309      	bcc.n	8014aea <HAL_RCC_OscConfig+0xee>
 8014ad6:	4b6c      	ldr	r3, [pc, #432]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014ad8:	68db      	ldr	r3, [r3, #12]
 8014ada:	f023 021f 	bic.w	r2, r3, #31
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6a1b      	ldr	r3, [r3, #32]
 8014ae2:	4969      	ldr	r1, [pc, #420]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014ae4:	4313      	orrs	r3, r2
 8014ae6:	60cb      	str	r3, [r1, #12]
 8014ae8:	e07e      	b.n	8014be8 <HAL_RCC_OscConfig+0x1ec>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	da0a      	bge.n	8014b08 <HAL_RCC_OscConfig+0x10c>
 8014af2:	4b65      	ldr	r3, [pc, #404]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6a1b      	ldr	r3, [r3, #32]
 8014afe:	015b      	lsls	r3, r3, #5
 8014b00:	4961      	ldr	r1, [pc, #388]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b02:	4313      	orrs	r3, r2
 8014b04:	60cb      	str	r3, [r1, #12]
 8014b06:	e06f      	b.n	8014be8 <HAL_RCC_OscConfig+0x1ec>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014b10:	d30a      	bcc.n	8014b28 <HAL_RCC_OscConfig+0x12c>
 8014b12:	4b5d      	ldr	r3, [pc, #372]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b14:	68db      	ldr	r3, [r3, #12]
 8014b16:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6a1b      	ldr	r3, [r3, #32]
 8014b1e:	029b      	lsls	r3, r3, #10
 8014b20:	4959      	ldr	r1, [pc, #356]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b22:	4313      	orrs	r3, r2
 8014b24:	60cb      	str	r3, [r1, #12]
 8014b26:	e05f      	b.n	8014be8 <HAL_RCC_OscConfig+0x1ec>
 8014b28:	4b57      	ldr	r3, [pc, #348]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	6a1b      	ldr	r3, [r3, #32]
 8014b34:	03db      	lsls	r3, r3, #15
 8014b36:	4954      	ldr	r1, [pc, #336]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b38:	4313      	orrs	r3, r2
 8014b3a:	60cb      	str	r3, [r1, #12]
 8014b3c:	e054      	b.n	8014be8 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8014b3e:	4b52      	ldr	r3, [pc, #328]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b40:	689b      	ldr	r3, [r3, #8]
 8014b42:	4a51      	ldr	r2, [pc, #324]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014b48:	6093      	str	r3, [r2, #8]
 8014b4a:	4b4f      	ldr	r3, [pc, #316]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b4c:	689b      	ldr	r3, [r3, #8]
 8014b4e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b56:	494c      	ldr	r1, [pc, #304]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b58:	4313      	orrs	r3, r2
 8014b5a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b60:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8014b64:	d309      	bcc.n	8014b7a <HAL_RCC_OscConfig+0x17e>
 8014b66:	4b48      	ldr	r3, [pc, #288]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	f023 021f 	bic.w	r2, r3, #31
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6a1b      	ldr	r3, [r3, #32]
 8014b72:	4945      	ldr	r1, [pc, #276]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b74:	4313      	orrs	r3, r2
 8014b76:	60cb      	str	r3, [r1, #12]
 8014b78:	e028      	b.n	8014bcc <HAL_RCC_OscConfig+0x1d0>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	da0a      	bge.n	8014b98 <HAL_RCC_OscConfig+0x19c>
 8014b82:	4b41      	ldr	r3, [pc, #260]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	6a1b      	ldr	r3, [r3, #32]
 8014b8e:	015b      	lsls	r3, r3, #5
 8014b90:	493d      	ldr	r1, [pc, #244]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014b92:	4313      	orrs	r3, r2
 8014b94:	60cb      	str	r3, [r1, #12]
 8014b96:	e019      	b.n	8014bcc <HAL_RCC_OscConfig+0x1d0>
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014ba0:	d30a      	bcc.n	8014bb8 <HAL_RCC_OscConfig+0x1bc>
 8014ba2:	4b39      	ldr	r3, [pc, #228]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6a1b      	ldr	r3, [r3, #32]
 8014bae:	029b      	lsls	r3, r3, #10
 8014bb0:	4935      	ldr	r1, [pc, #212]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014bb2:	4313      	orrs	r3, r2
 8014bb4:	60cb      	str	r3, [r1, #12]
 8014bb6:	e009      	b.n	8014bcc <HAL_RCC_OscConfig+0x1d0>
 8014bb8:	4b33      	ldr	r3, [pc, #204]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6a1b      	ldr	r3, [r3, #32]
 8014bc4:	03db      	lsls	r3, r3, #15
 8014bc6:	4930      	ldr	r1, [pc, #192]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014bc8:	4313      	orrs	r3, r2
 8014bca:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d10a      	bne.n	8014be8 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f001 f988 	bl	8015eec <RCC_SetFlashLatencyFromMSIRange>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d002      	beq.n	8014be8 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8014be2:	2301      	movs	r3, #1
 8014be4:	f000 bdda 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8014be8:	f001 f8d8 	bl	8015d9c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8014bec:	4b27      	ldr	r3, [pc, #156]	; (8014c8c <HAL_RCC_OscConfig+0x290>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7fb fa37 	bl	8010064 <HAL_InitTick>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8014bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	f000 808a 	beq.w	8014d1a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8014c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c0a:	f000 bdc7 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	69db      	ldr	r3, [r3, #28]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d066      	beq.n	8014ce4 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8014c16:	4b1c      	ldr	r3, [pc, #112]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	4a1b      	ldr	r2, [pc, #108]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c1c:	f043 0301 	orr.w	r3, r3, #1
 8014c20:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8014c22:	f7fb fca1 	bl	8010568 <HAL_GetTick>
 8014c26:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8014c28:	e009      	b.n	8014c3e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014c2a:	f7fb fc9d 	bl	8010568 <HAL_GetTick>
 8014c2e:	4602      	mov	r2, r0
 8014c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c32:	1ad3      	subs	r3, r2, r3
 8014c34:	2b02      	cmp	r3, #2
 8014c36:	d902      	bls.n	8014c3e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8014c38:	2303      	movs	r3, #3
 8014c3a:	f000 bdaf 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8014c3e:	4b12      	ldr	r3, [pc, #72]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	f003 0304 	and.w	r3, r3, #4
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d0ef      	beq.n	8014c2a <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8014c4a:	4b0f      	ldr	r3, [pc, #60]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c4c:	689b      	ldr	r3, [r3, #8]
 8014c4e:	4a0e      	ldr	r2, [pc, #56]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014c54:	6093      	str	r3, [r2, #8]
 8014c56:	4b0c      	ldr	r3, [pc, #48]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c58:	689b      	ldr	r3, [r3, #8]
 8014c5a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c62:	4909      	ldr	r1, [pc, #36]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c64:	4313      	orrs	r3, r2
 8014c66:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c6c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8014c70:	d30e      	bcc.n	8014c90 <HAL_RCC_OscConfig+0x294>
 8014c72:	4b05      	ldr	r3, [pc, #20]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c74:	68db      	ldr	r3, [r3, #12]
 8014c76:	f023 021f 	bic.w	r2, r3, #31
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	6a1b      	ldr	r3, [r3, #32]
 8014c7e:	4902      	ldr	r1, [pc, #8]	; (8014c88 <HAL_RCC_OscConfig+0x28c>)
 8014c80:	4313      	orrs	r3, r2
 8014c82:	60cb      	str	r3, [r1, #12]
 8014c84:	e04a      	b.n	8014d1c <HAL_RCC_OscConfig+0x320>
 8014c86:	bf00      	nop
 8014c88:	46020c00 	.word	0x46020c00
 8014c8c:	2000002c 	.word	0x2000002c
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	da0a      	bge.n	8014cae <HAL_RCC_OscConfig+0x2b2>
 8014c98:	4b9b      	ldr	r3, [pc, #620]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6a1b      	ldr	r3, [r3, #32]
 8014ca4:	015b      	lsls	r3, r3, #5
 8014ca6:	4998      	ldr	r1, [pc, #608]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014ca8:	4313      	orrs	r3, r2
 8014caa:	60cb      	str	r3, [r1, #12]
 8014cac:	e036      	b.n	8014d1c <HAL_RCC_OscConfig+0x320>
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014cb6:	d30a      	bcc.n	8014cce <HAL_RCC_OscConfig+0x2d2>
 8014cb8:	4b93      	ldr	r3, [pc, #588]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6a1b      	ldr	r3, [r3, #32]
 8014cc4:	029b      	lsls	r3, r3, #10
 8014cc6:	4990      	ldr	r1, [pc, #576]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014cc8:	4313      	orrs	r3, r2
 8014cca:	60cb      	str	r3, [r1, #12]
 8014ccc:	e026      	b.n	8014d1c <HAL_RCC_OscConfig+0x320>
 8014cce:	4b8e      	ldr	r3, [pc, #568]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014cd0:	68db      	ldr	r3, [r3, #12]
 8014cd2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6a1b      	ldr	r3, [r3, #32]
 8014cda:	03db      	lsls	r3, r3, #15
 8014cdc:	498a      	ldr	r1, [pc, #552]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014cde:	4313      	orrs	r3, r2
 8014ce0:	60cb      	str	r3, [r1, #12]
 8014ce2:	e01b      	b.n	8014d1c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8014ce4:	4b88      	ldr	r3, [pc, #544]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	4a87      	ldr	r2, [pc, #540]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014cea:	f023 0301 	bic.w	r3, r3, #1
 8014cee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8014cf0:	f7fb fc3a 	bl	8010568 <HAL_GetTick>
 8014cf4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8014cf6:	e009      	b.n	8014d0c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014cf8:	f7fb fc36 	bl	8010568 <HAL_GetTick>
 8014cfc:	4602      	mov	r2, r0
 8014cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d00:	1ad3      	subs	r3, r2, r3
 8014d02:	2b02      	cmp	r3, #2
 8014d04:	d902      	bls.n	8014d0c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8014d06:	2303      	movs	r3, #3
 8014d08:	f000 bd48 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8014d0c:	4b7e      	ldr	r3, [pc, #504]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	f003 0304 	and.w	r3, r3, #4
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d1ef      	bne.n	8014cf8 <HAL_RCC_OscConfig+0x2fc>
 8014d18:	e000      	b.n	8014d1c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014d1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	f003 0301 	and.w	r3, r3, #1
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 8094 	beq.w	8014e52 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8014d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2c:	2b08      	cmp	r3, #8
 8014d2e:	d005      	beq.n	8014d3c <HAL_RCC_OscConfig+0x340>
 8014d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d32:	2b0c      	cmp	r3, #12
 8014d34:	d110      	bne.n	8014d58 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d38:	2b03      	cmp	r3, #3
 8014d3a:	d10d      	bne.n	8014d58 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014d3c:	4b72      	ldr	r3, [pc, #456]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	f000 8083 	beq.w	8014e50 <HAL_RCC_OscConfig+0x454>
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d17e      	bne.n	8014e50 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8014d52:	2301      	movs	r3, #1
 8014d54:	f000 bd22 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	685b      	ldr	r3, [r3, #4]
 8014d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d60:	d106      	bne.n	8014d70 <HAL_RCC_OscConfig+0x374>
 8014d62:	4b69      	ldr	r3, [pc, #420]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	4a68      	ldr	r2, [pc, #416]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014d6c:	6013      	str	r3, [r2, #0]
 8014d6e:	e041      	b.n	8014df4 <HAL_RCC_OscConfig+0x3f8>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014d78:	d112      	bne.n	8014da0 <HAL_RCC_OscConfig+0x3a4>
 8014d7a:	4b63      	ldr	r3, [pc, #396]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	4a62      	ldr	r2, [pc, #392]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014d84:	6013      	str	r3, [r2, #0]
 8014d86:	4b60      	ldr	r3, [pc, #384]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	4a5f      	ldr	r2, [pc, #380]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014d90:	6013      	str	r3, [r2, #0]
 8014d92:	4b5d      	ldr	r3, [pc, #372]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	4a5c      	ldr	r2, [pc, #368]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014d9c:	6013      	str	r3, [r2, #0]
 8014d9e:	e029      	b.n	8014df4 <HAL_RCC_OscConfig+0x3f8>
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8014da8:	d112      	bne.n	8014dd0 <HAL_RCC_OscConfig+0x3d4>
 8014daa:	4b57      	ldr	r3, [pc, #348]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	4a56      	ldr	r2, [pc, #344]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014db4:	6013      	str	r3, [r2, #0]
 8014db6:	4b54      	ldr	r3, [pc, #336]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	4a53      	ldr	r2, [pc, #332]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014dc0:	6013      	str	r3, [r2, #0]
 8014dc2:	4b51      	ldr	r3, [pc, #324]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	4a50      	ldr	r2, [pc, #320]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014dcc:	6013      	str	r3, [r2, #0]
 8014dce:	e011      	b.n	8014df4 <HAL_RCC_OscConfig+0x3f8>
 8014dd0:	4b4d      	ldr	r3, [pc, #308]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	4a4c      	ldr	r2, [pc, #304]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014dda:	6013      	str	r3, [r2, #0]
 8014ddc:	4b4a      	ldr	r3, [pc, #296]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4a49      	ldr	r2, [pc, #292]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014de6:	6013      	str	r3, [r2, #0]
 8014de8:	4b47      	ldr	r3, [pc, #284]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	4a46      	ldr	r2, [pc, #280]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014dee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d014      	beq.n	8014e26 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8014dfc:	f7fb fbb4 	bl	8010568 <HAL_GetTick>
 8014e00:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014e02:	e009      	b.n	8014e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014e04:	f7fb fbb0 	bl	8010568 <HAL_GetTick>
 8014e08:	4602      	mov	r2, r0
 8014e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e0c:	1ad3      	subs	r3, r2, r3
 8014e0e:	2b64      	cmp	r3, #100	; 0x64
 8014e10:	d902      	bls.n	8014e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8014e12:	2303      	movs	r3, #3
 8014e14:	f000 bcc2 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014e18:	4b3b      	ldr	r3, [pc, #236]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d0ef      	beq.n	8014e04 <HAL_RCC_OscConfig+0x408>
 8014e24:	e015      	b.n	8014e52 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8014e26:	f7fb fb9f 	bl	8010568 <HAL_GetTick>
 8014e2a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014e2c:	e009      	b.n	8014e42 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014e2e:	f7fb fb9b 	bl	8010568 <HAL_GetTick>
 8014e32:	4602      	mov	r2, r0
 8014e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e36:	1ad3      	subs	r3, r2, r3
 8014e38:	2b64      	cmp	r3, #100	; 0x64
 8014e3a:	d902      	bls.n	8014e42 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8014e3c:	2303      	movs	r3, #3
 8014e3e:	f000 bcad 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014e42:	4b31      	ldr	r3, [pc, #196]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d1ef      	bne.n	8014e2e <HAL_RCC_OscConfig+0x432>
 8014e4e:	e000      	b.n	8014e52 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	f003 0302 	and.w	r3, r3, #2
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d066      	beq.n	8014f2c <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8014e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e60:	2b04      	cmp	r3, #4
 8014e62:	d005      	beq.n	8014e70 <HAL_RCC_OscConfig+0x474>
 8014e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e66:	2b0c      	cmp	r3, #12
 8014e68:	d11a      	bne.n	8014ea0 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e6c:	2b02      	cmp	r3, #2
 8014e6e:	d117      	bne.n	8014ea0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014e70:	4b25      	ldr	r3, [pc, #148]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d006      	beq.n	8014e8a <HAL_RCC_OscConfig+0x48e>
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	68db      	ldr	r3, [r3, #12]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d102      	bne.n	8014e8a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8014e84:	2301      	movs	r3, #1
 8014e86:	f000 bc89 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8014e8a:	4b1f      	ldr	r3, [pc, #124]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014e8c:	691b      	ldr	r3, [r3, #16]
 8014e8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	691b      	ldr	r3, [r3, #16]
 8014e96:	041b      	lsls	r3, r3, #16
 8014e98:	491b      	ldr	r1, [pc, #108]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014e9a:	4313      	orrs	r3, r2
 8014e9c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014e9e:	e045      	b.n	8014f2c <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	68db      	ldr	r3, [r3, #12]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d024      	beq.n	8014ef2 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8014ea8:	4b17      	ldr	r3, [pc, #92]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4a16      	ldr	r2, [pc, #88]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014eb2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8014eb4:	f7fb fb58 	bl	8010568 <HAL_GetTick>
 8014eb8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014eba:	e009      	b.n	8014ed0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014ebc:	f7fb fb54 	bl	8010568 <HAL_GetTick>
 8014ec0:	4602      	mov	r2, r0
 8014ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec4:	1ad3      	subs	r3, r2, r3
 8014ec6:	2b02      	cmp	r3, #2
 8014ec8:	d902      	bls.n	8014ed0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8014eca:	2303      	movs	r3, #3
 8014ecc:	f000 bc66 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014ed0:	4b0d      	ldr	r3, [pc, #52]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d0ef      	beq.n	8014ebc <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8014edc:	4b0a      	ldr	r3, [pc, #40]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014ede:	691b      	ldr	r3, [r3, #16]
 8014ee0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	691b      	ldr	r3, [r3, #16]
 8014ee8:	041b      	lsls	r3, r3, #16
 8014eea:	4907      	ldr	r1, [pc, #28]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014eec:	4313      	orrs	r3, r2
 8014eee:	610b      	str	r3, [r1, #16]
 8014ef0:	e01c      	b.n	8014f2c <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8014ef2:	4b05      	ldr	r3, [pc, #20]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	4a04      	ldr	r2, [pc, #16]	; (8014f08 <HAL_RCC_OscConfig+0x50c>)
 8014ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014efc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8014efe:	f7fb fb33 	bl	8010568 <HAL_GetTick>
 8014f02:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014f04:	e00c      	b.n	8014f20 <HAL_RCC_OscConfig+0x524>
 8014f06:	bf00      	nop
 8014f08:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014f0c:	f7fb fb2c 	bl	8010568 <HAL_GetTick>
 8014f10:	4602      	mov	r2, r0
 8014f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f14:	1ad3      	subs	r3, r2, r3
 8014f16:	2b02      	cmp	r3, #2
 8014f18:	d902      	bls.n	8014f20 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8014f1a:	2303      	movs	r3, #3
 8014f1c:	f000 bc3e 	b.w	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014f20:	4baf      	ldr	r3, [pc, #700]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d1ef      	bne.n	8014f0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	f003 0308 	and.w	r3, r3, #8
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	f000 80c7 	beq.w	80150c8 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014f40:	4ba7      	ldr	r3, [pc, #668]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8014f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014f46:	f003 0304 	and.w	r3, r3, #4
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d111      	bne.n	8014f72 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014f4e:	4ba4      	ldr	r3, [pc, #656]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8014f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014f54:	4aa2      	ldr	r2, [pc, #648]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8014f56:	f043 0304 	orr.w	r3, r3, #4
 8014f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8014f5e:	4ba0      	ldr	r3, [pc, #640]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8014f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014f64:	f003 0304 	and.w	r3, r3, #4
 8014f68:	617b      	str	r3, [r7, #20]
 8014f6a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8014f72:	4b9c      	ldr	r3, [pc, #624]	; (80151e4 <HAL_RCC_OscConfig+0x7e8>)
 8014f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f76:	f003 0301 	and.w	r3, r3, #1
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d118      	bne.n	8014fb0 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8014f7e:	4b99      	ldr	r3, [pc, #612]	; (80151e4 <HAL_RCC_OscConfig+0x7e8>)
 8014f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f82:	4a98      	ldr	r2, [pc, #608]	; (80151e4 <HAL_RCC_OscConfig+0x7e8>)
 8014f84:	f043 0301 	orr.w	r3, r3, #1
 8014f88:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014f8a:	f7fb faed 	bl	8010568 <HAL_GetTick>
 8014f8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8014f90:	e008      	b.n	8014fa4 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014f92:	f7fb fae9 	bl	8010568 <HAL_GetTick>
 8014f96:	4602      	mov	r2, r0
 8014f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	2b02      	cmp	r3, #2
 8014f9e:	d901      	bls.n	8014fa4 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8014fa0:	2303      	movs	r3, #3
 8014fa2:	e3fb      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8014fa4:	4b8f      	ldr	r3, [pc, #572]	; (80151e4 <HAL_RCC_OscConfig+0x7e8>)
 8014fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fa8:	f003 0301 	and.w	r3, r3, #1
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d0f0      	beq.n	8014f92 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	695b      	ldr	r3, [r3, #20]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d05f      	beq.n	8015078 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8014fb8:	4b89      	ldr	r3, [pc, #548]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8014fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014fbe:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	699a      	ldr	r2, [r3, #24]
 8014fc4:	6a3b      	ldr	r3, [r7, #32]
 8014fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d037      	beq.n	801503e <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8014fce:	6a3b      	ldr	r3, [r7, #32]
 8014fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d006      	beq.n	8014fe6 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8014fd8:	6a3b      	ldr	r3, [r7, #32]
 8014fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d101      	bne.n	8014fe6 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	e3da      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8014fe6:	6a3b      	ldr	r3, [r7, #32]
 8014fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d01b      	beq.n	8015028 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8014ff0:	4b7b      	ldr	r3, [pc, #492]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8014ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014ff6:	4a7a      	ldr	r2, [pc, #488]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8014ff8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8014ffc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8015000:	f7fb fab2 	bl	8010568 <HAL_GetTick>
 8015004:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8015006:	e008      	b.n	801501a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015008:	f7fb faae 	bl	8010568 <HAL_GetTick>
 801500c:	4602      	mov	r2, r0
 801500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015010:	1ad3      	subs	r3, r2, r3
 8015012:	2b02      	cmp	r3, #2
 8015014:	d901      	bls.n	801501a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8015016:	2303      	movs	r3, #3
 8015018:	e3c0      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 801501a:	4b71      	ldr	r3, [pc, #452]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 801501c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015024:	2b00      	cmp	r3, #0
 8015026:	d1ef      	bne.n	8015008 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8015028:	4b6d      	ldr	r3, [pc, #436]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 801502a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801502e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	699b      	ldr	r3, [r3, #24]
 8015036:	496a      	ldr	r1, [pc, #424]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8015038:	4313      	orrs	r3, r2
 801503a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 801503e:	4b68      	ldr	r3, [pc, #416]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8015040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015044:	4a66      	ldr	r2, [pc, #408]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8015046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801504a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 801504e:	f7fb fa8b 	bl	8010568 <HAL_GetTick>
 8015052:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8015054:	e008      	b.n	8015068 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015056:	f7fb fa87 	bl	8010568 <HAL_GetTick>
 801505a:	4602      	mov	r2, r0
 801505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	2b02      	cmp	r3, #2
 8015062:	d901      	bls.n	8015068 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8015064:	2303      	movs	r3, #3
 8015066:	e399      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8015068:	4b5d      	ldr	r3, [pc, #372]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 801506a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801506e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015072:	2b00      	cmp	r3, #0
 8015074:	d0ef      	beq.n	8015056 <HAL_RCC_OscConfig+0x65a>
 8015076:	e01b      	b.n	80150b0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8015078:	4b59      	ldr	r3, [pc, #356]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 801507a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801507e:	4a58      	ldr	r2, [pc, #352]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8015080:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8015084:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8015088:	f7fb fa6e 	bl	8010568 <HAL_GetTick>
 801508c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 801508e:	e008      	b.n	80150a2 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015090:	f7fb fa6a 	bl	8010568 <HAL_GetTick>
 8015094:	4602      	mov	r2, r0
 8015096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	2b02      	cmp	r3, #2
 801509c:	d901      	bls.n	80150a2 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 801509e:	2303      	movs	r3, #3
 80150a0:	e37c      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80150a2:	4b4f      	ldr	r3, [pc, #316]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80150a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80150a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d1ef      	bne.n	8015090 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80150b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80150b4:	2b01      	cmp	r3, #1
 80150b6:	d107      	bne.n	80150c8 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80150b8:	4b49      	ldr	r3, [pc, #292]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80150ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80150be:	4a48      	ldr	r2, [pc, #288]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80150c0:	f023 0304 	bic.w	r3, r3, #4
 80150c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f003 0304 	and.w	r3, r3, #4
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	f000 8112 	beq.w	80152fa <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80150d6:	2300      	movs	r3, #0
 80150d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80150dc:	4b40      	ldr	r3, [pc, #256]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80150de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80150e2:	f003 0304 	and.w	r3, r3, #4
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d111      	bne.n	801510e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80150ea:	4b3d      	ldr	r3, [pc, #244]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80150ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80150f0:	4a3b      	ldr	r2, [pc, #236]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80150f2:	f043 0304 	orr.w	r3, r3, #4
 80150f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80150fa:	4b39      	ldr	r3, [pc, #228]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80150fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015100:	f003 0304 	and.w	r3, r3, #4
 8015104:	613b      	str	r3, [r7, #16]
 8015106:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8015108:	2301      	movs	r3, #1
 801510a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801510e:	4b35      	ldr	r3, [pc, #212]	; (80151e4 <HAL_RCC_OscConfig+0x7e8>)
 8015110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015112:	f003 0301 	and.w	r3, r3, #1
 8015116:	2b00      	cmp	r3, #0
 8015118:	d118      	bne.n	801514c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 801511a:	4b32      	ldr	r3, [pc, #200]	; (80151e4 <HAL_RCC_OscConfig+0x7e8>)
 801511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801511e:	4a31      	ldr	r2, [pc, #196]	; (80151e4 <HAL_RCC_OscConfig+0x7e8>)
 8015120:	f043 0301 	orr.w	r3, r3, #1
 8015124:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015126:	f7fb fa1f 	bl	8010568 <HAL_GetTick>
 801512a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801512c:	e008      	b.n	8015140 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801512e:	f7fb fa1b 	bl	8010568 <HAL_GetTick>
 8015132:	4602      	mov	r2, r0
 8015134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015136:	1ad3      	subs	r3, r2, r3
 8015138:	2b02      	cmp	r3, #2
 801513a:	d901      	bls.n	8015140 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 801513c:	2303      	movs	r3, #3
 801513e:	e32d      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8015140:	4b28      	ldr	r3, [pc, #160]	; (80151e4 <HAL_RCC_OscConfig+0x7e8>)
 8015142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015144:	f003 0301 	and.w	r3, r3, #1
 8015148:	2b00      	cmp	r3, #0
 801514a:	d0f0      	beq.n	801512e <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	f003 0301 	and.w	r3, r3, #1
 8015154:	2b00      	cmp	r3, #0
 8015156:	d01f      	beq.n	8015198 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	689b      	ldr	r3, [r3, #8]
 801515c:	f003 0304 	and.w	r3, r3, #4
 8015160:	2b00      	cmp	r3, #0
 8015162:	d010      	beq.n	8015186 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8015164:	4b1e      	ldr	r3, [pc, #120]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8015166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801516a:	4a1d      	ldr	r2, [pc, #116]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 801516c:	f043 0304 	orr.w	r3, r3, #4
 8015170:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015174:	4b1a      	ldr	r3, [pc, #104]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8015176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801517a:	4a19      	ldr	r2, [pc, #100]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 801517c:	f043 0301 	orr.w	r3, r3, #1
 8015180:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8015184:	e018      	b.n	80151b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015186:	4b16      	ldr	r3, [pc, #88]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 8015188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801518c:	4a14      	ldr	r2, [pc, #80]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 801518e:	f043 0301 	orr.w	r3, r3, #1
 8015192:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8015196:	e00f      	b.n	80151b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015198:	4b11      	ldr	r3, [pc, #68]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 801519a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801519e:	4a10      	ldr	r2, [pc, #64]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80151a0:	f023 0301 	bic.w	r3, r3, #1
 80151a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80151a8:	4b0d      	ldr	r3, [pc, #52]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80151aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80151ae:	4a0c      	ldr	r2, [pc, #48]	; (80151e0 <HAL_RCC_OscConfig+0x7e4>)
 80151b0:	f023 0304 	bic.w	r3, r3, #4
 80151b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	689b      	ldr	r3, [r3, #8]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d058      	beq.n	8015272 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80151c0:	f7fb f9d2 	bl	8010568 <HAL_GetTick>
 80151c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80151c6:	e00f      	b.n	80151e8 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80151c8:	f7fb f9ce 	bl	8010568 <HAL_GetTick>
 80151cc:	4602      	mov	r2, r0
 80151ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d906      	bls.n	80151e8 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80151da:	2303      	movs	r3, #3
 80151dc:	e2de      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
 80151de:	bf00      	nop
 80151e0:	46020c00 	.word	0x46020c00
 80151e4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80151e8:	4b9c      	ldr	r3, [pc, #624]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80151ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80151ee:	f003 0302 	and.w	r3, r3, #2
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d0e8      	beq.n	80151c8 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	689b      	ldr	r3, [r3, #8]
 80151fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d01b      	beq.n	801523a <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8015202:	4b96      	ldr	r3, [pc, #600]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015208:	4a94      	ldr	r2, [pc, #592]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 801520a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801520e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8015212:	e00a      	b.n	801522a <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015214:	f7fb f9a8 	bl	8010568 <HAL_GetTick>
 8015218:	4602      	mov	r2, r0
 801521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521c:	1ad3      	subs	r3, r2, r3
 801521e:	f241 3288 	movw	r2, #5000	; 0x1388
 8015222:	4293      	cmp	r3, r2
 8015224:	d901      	bls.n	801522a <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8015226:	2303      	movs	r3, #3
 8015228:	e2b8      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801522a:	4b8c      	ldr	r3, [pc, #560]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 801522c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015234:	2b00      	cmp	r3, #0
 8015236:	d0ed      	beq.n	8015214 <HAL_RCC_OscConfig+0x818>
 8015238:	e053      	b.n	80152e2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801523a:	4b88      	ldr	r3, [pc, #544]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 801523c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015240:	4a86      	ldr	r2, [pc, #536]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015246:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801524a:	e00a      	b.n	8015262 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801524c:	f7fb f98c 	bl	8010568 <HAL_GetTick>
 8015250:	4602      	mov	r2, r0
 8015252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015254:	1ad3      	subs	r3, r2, r3
 8015256:	f241 3288 	movw	r2, #5000	; 0x1388
 801525a:	4293      	cmp	r3, r2
 801525c:	d901      	bls.n	8015262 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 801525e:	2303      	movs	r3, #3
 8015260:	e29c      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015262:	4b7e      	ldr	r3, [pc, #504]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801526c:	2b00      	cmp	r3, #0
 801526e:	d1ed      	bne.n	801524c <HAL_RCC_OscConfig+0x850>
 8015270:	e037      	b.n	80152e2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8015272:	f7fb f979 	bl	8010568 <HAL_GetTick>
 8015276:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015278:	e00a      	b.n	8015290 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801527a:	f7fb f975 	bl	8010568 <HAL_GetTick>
 801527e:	4602      	mov	r2, r0
 8015280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015282:	1ad3      	subs	r3, r2, r3
 8015284:	f241 3288 	movw	r2, #5000	; 0x1388
 8015288:	4293      	cmp	r3, r2
 801528a:	d901      	bls.n	8015290 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 801528c:	2303      	movs	r3, #3
 801528e:	e285      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015290:	4b72      	ldr	r3, [pc, #456]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015296:	f003 0302 	and.w	r3, r3, #2
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1ed      	bne.n	801527a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801529e:	4b6f      	ldr	r3, [pc, #444]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80152a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80152a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d01a      	beq.n	80152e2 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80152ac:	4b6b      	ldr	r3, [pc, #428]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80152ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80152b2:	4a6a      	ldr	r2, [pc, #424]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80152b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80152b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80152bc:	e00a      	b.n	80152d4 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80152be:	f7fb f953 	bl	8010568 <HAL_GetTick>
 80152c2:	4602      	mov	r2, r0
 80152c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c6:	1ad3      	subs	r3, r2, r3
 80152c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80152cc:	4293      	cmp	r3, r2
 80152ce:	d901      	bls.n	80152d4 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80152d0:	2303      	movs	r3, #3
 80152d2:	e263      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80152d4:	4b61      	ldr	r3, [pc, #388]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80152d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80152da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d1ed      	bne.n	80152be <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80152e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80152e6:	2b01      	cmp	r3, #1
 80152e8:	d107      	bne.n	80152fa <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80152ea:	4b5c      	ldr	r3, [pc, #368]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80152ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80152f0:	4a5a      	ldr	r2, [pc, #360]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80152f2:	f023 0304 	bic.w	r3, r3, #4
 80152f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	f003 0320 	and.w	r3, r3, #32
 8015302:	2b00      	cmp	r3, #0
 8015304:	d036      	beq.n	8015374 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801530a:	2b00      	cmp	r3, #0
 801530c:	d019      	beq.n	8015342 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 801530e:	4b53      	ldr	r3, [pc, #332]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	4a52      	ldr	r2, [pc, #328]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015318:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801531a:	f7fb f925 	bl	8010568 <HAL_GetTick>
 801531e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8015320:	e008      	b.n	8015334 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015322:	f7fb f921 	bl	8010568 <HAL_GetTick>
 8015326:	4602      	mov	r2, r0
 8015328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801532a:	1ad3      	subs	r3, r2, r3
 801532c:	2b02      	cmp	r3, #2
 801532e:	d901      	bls.n	8015334 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8015330:	2303      	movs	r3, #3
 8015332:	e233      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8015334:	4b49      	ldr	r3, [pc, #292]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801533c:	2b00      	cmp	r3, #0
 801533e:	d0f0      	beq.n	8015322 <HAL_RCC_OscConfig+0x926>
 8015340:	e018      	b.n	8015374 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8015342:	4b46      	ldr	r3, [pc, #280]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	4a45      	ldr	r2, [pc, #276]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801534c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801534e:	f7fb f90b 	bl	8010568 <HAL_GetTick>
 8015352:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8015354:	e008      	b.n	8015368 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015356:	f7fb f907 	bl	8010568 <HAL_GetTick>
 801535a:	4602      	mov	r2, r0
 801535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801535e:	1ad3      	subs	r3, r2, r3
 8015360:	2b02      	cmp	r3, #2
 8015362:	d901      	bls.n	8015368 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8015364:	2303      	movs	r3, #3
 8015366:	e219      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8015368:	4b3c      	ldr	r3, [pc, #240]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015370:	2b00      	cmp	r3, #0
 8015372:	d1f0      	bne.n	8015356 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801537c:	2b00      	cmp	r3, #0
 801537e:	d036      	beq.n	80153ee <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015384:	2b00      	cmp	r3, #0
 8015386:	d019      	beq.n	80153bc <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8015388:	4b34      	ldr	r3, [pc, #208]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	4a33      	ldr	r2, [pc, #204]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 801538e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015392:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8015394:	f7fb f8e8 	bl	8010568 <HAL_GetTick>
 8015398:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 801539a:	e008      	b.n	80153ae <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 801539c:	f7fb f8e4 	bl	8010568 <HAL_GetTick>
 80153a0:	4602      	mov	r2, r0
 80153a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153a4:	1ad3      	subs	r3, r2, r3
 80153a6:	2b02      	cmp	r3, #2
 80153a8:	d901      	bls.n	80153ae <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80153aa:	2303      	movs	r3, #3
 80153ac:	e1f6      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80153ae:	4b2b      	ldr	r3, [pc, #172]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d0f0      	beq.n	801539c <HAL_RCC_OscConfig+0x9a0>
 80153ba:	e018      	b.n	80153ee <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80153bc:	4b27      	ldr	r3, [pc, #156]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	4a26      	ldr	r2, [pc, #152]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80153c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80153c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80153c8:	f7fb f8ce 	bl	8010568 <HAL_GetTick>
 80153cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80153ce:	e008      	b.n	80153e2 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80153d0:	f7fb f8ca 	bl	8010568 <HAL_GetTick>
 80153d4:	4602      	mov	r2, r0
 80153d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d8:	1ad3      	subs	r3, r2, r3
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d901      	bls.n	80153e2 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80153de:	2303      	movs	r3, #3
 80153e0:	e1dc      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80153e2:	4b1e      	ldr	r3, [pc, #120]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d1f0      	bne.n	80153d0 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d07f      	beq.n	80154fa <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d062      	beq.n	80154c8 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8015402:	4b16      	ldr	r3, [pc, #88]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015404:	689b      	ldr	r3, [r3, #8]
 8015406:	4a15      	ldr	r2, [pc, #84]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801540c:	6093      	str	r3, [r2, #8]
 801540e:	4b13      	ldr	r3, [pc, #76]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015410:	689b      	ldr	r3, [r3, #8]
 8015412:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801541a:	4910      	ldr	r1, [pc, #64]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 801541c:	4313      	orrs	r3, r2
 801541e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015424:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8015428:	d309      	bcc.n	801543e <HAL_RCC_OscConfig+0xa42>
 801542a:	4b0c      	ldr	r3, [pc, #48]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 801542c:	68db      	ldr	r3, [r3, #12]
 801542e:	f023 021f 	bic.w	r2, r3, #31
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6a1b      	ldr	r3, [r3, #32]
 8015436:	4909      	ldr	r1, [pc, #36]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015438:	4313      	orrs	r3, r2
 801543a:	60cb      	str	r3, [r1, #12]
 801543c:	e02a      	b.n	8015494 <HAL_RCC_OscConfig+0xa98>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015442:	2b00      	cmp	r3, #0
 8015444:	da0c      	bge.n	8015460 <HAL_RCC_OscConfig+0xa64>
 8015446:	4b05      	ldr	r3, [pc, #20]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015448:	68db      	ldr	r3, [r3, #12]
 801544a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	6a1b      	ldr	r3, [r3, #32]
 8015452:	015b      	lsls	r3, r3, #5
 8015454:	4901      	ldr	r1, [pc, #4]	; (801545c <HAL_RCC_OscConfig+0xa60>)
 8015456:	4313      	orrs	r3, r2
 8015458:	60cb      	str	r3, [r1, #12]
 801545a:	e01b      	b.n	8015494 <HAL_RCC_OscConfig+0xa98>
 801545c:	46020c00 	.word	0x46020c00
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015468:	d30a      	bcc.n	8015480 <HAL_RCC_OscConfig+0xa84>
 801546a:	4ba5      	ldr	r3, [pc, #660]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6a1b      	ldr	r3, [r3, #32]
 8015476:	029b      	lsls	r3, r3, #10
 8015478:	49a1      	ldr	r1, [pc, #644]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801547a:	4313      	orrs	r3, r2
 801547c:	60cb      	str	r3, [r1, #12]
 801547e:	e009      	b.n	8015494 <HAL_RCC_OscConfig+0xa98>
 8015480:	4b9f      	ldr	r3, [pc, #636]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015482:	68db      	ldr	r3, [r3, #12]
 8015484:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	6a1b      	ldr	r3, [r3, #32]
 801548c:	03db      	lsls	r3, r3, #15
 801548e:	499c      	ldr	r1, [pc, #624]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015490:	4313      	orrs	r3, r2
 8015492:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8015494:	4b9a      	ldr	r3, [pc, #616]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	4a99      	ldr	r2, [pc, #612]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801549a:	f043 0310 	orr.w	r3, r3, #16
 801549e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80154a0:	f7fb f862 	bl	8010568 <HAL_GetTick>
 80154a4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80154a6:	e008      	b.n	80154ba <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80154a8:	f7fb f85e 	bl	8010568 <HAL_GetTick>
 80154ac:	4602      	mov	r2, r0
 80154ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b0:	1ad3      	subs	r3, r2, r3
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	d901      	bls.n	80154ba <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80154b6:	2303      	movs	r3, #3
 80154b8:	e170      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80154ba:	4b91      	ldr	r3, [pc, #580]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	f003 0320 	and.w	r3, r3, #32
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d0f0      	beq.n	80154a8 <HAL_RCC_OscConfig+0xaac>
 80154c6:	e018      	b.n	80154fa <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80154c8:	4b8d      	ldr	r3, [pc, #564]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	4a8c      	ldr	r2, [pc, #560]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80154ce:	f023 0310 	bic.w	r3, r3, #16
 80154d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80154d4:	f7fb f848 	bl	8010568 <HAL_GetTick>
 80154d8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80154da:	e008      	b.n	80154ee <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80154dc:	f7fb f844 	bl	8010568 <HAL_GetTick>
 80154e0:	4602      	mov	r2, r0
 80154e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e4:	1ad3      	subs	r3, r2, r3
 80154e6:	2b02      	cmp	r3, #2
 80154e8:	d901      	bls.n	80154ee <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80154ea:	2303      	movs	r3, #3
 80154ec:	e156      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80154ee:	4b84      	ldr	r3, [pc, #528]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	f003 0320 	and.w	r3, r3, #32
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d1f0      	bne.n	80154dc <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154fe:	2b00      	cmp	r3, #0
 8015500:	f000 814b 	beq.w	801579a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8015504:	2300      	movs	r3, #0
 8015506:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801550a:	4b7d      	ldr	r3, [pc, #500]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801550c:	69db      	ldr	r3, [r3, #28]
 801550e:	f003 030c 	and.w	r3, r3, #12
 8015512:	2b0c      	cmp	r3, #12
 8015514:	f000 80fa 	beq.w	801570c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801551c:	2b02      	cmp	r3, #2
 801551e:	f040 80cc 	bne.w	80156ba <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8015522:	4b77      	ldr	r3, [pc, #476]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	4a76      	ldr	r2, [pc, #472]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801552c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801552e:	f7fb f81b 	bl	8010568 <HAL_GetTick>
 8015532:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8015534:	e008      	b.n	8015548 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015536:	f7fb f817 	bl	8010568 <HAL_GetTick>
 801553a:	4602      	mov	r2, r0
 801553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801553e:	1ad3      	subs	r3, r2, r3
 8015540:	2b02      	cmp	r3, #2
 8015542:	d901      	bls.n	8015548 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8015544:	2303      	movs	r3, #3
 8015546:	e129      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8015548:	4b6d      	ldr	r3, [pc, #436]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015550:	2b00      	cmp	r3, #0
 8015552:	d1f0      	bne.n	8015536 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015554:	4b6a      	ldr	r3, [pc, #424]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801555a:	f003 0304 	and.w	r3, r3, #4
 801555e:	2b00      	cmp	r3, #0
 8015560:	d111      	bne.n	8015586 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8015562:	4b67      	ldr	r3, [pc, #412]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015568:	4a65      	ldr	r2, [pc, #404]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801556a:	f043 0304 	orr.w	r3, r3, #4
 801556e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015572:	4b63      	ldr	r3, [pc, #396]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015578:	f003 0304 	and.w	r3, r3, #4
 801557c:	60fb      	str	r3, [r7, #12]
 801557e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8015580:	2301      	movs	r3, #1
 8015582:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8015586:	4b5f      	ldr	r3, [pc, #380]	; (8015704 <HAL_RCC_OscConfig+0xd08>)
 8015588:	68db      	ldr	r3, [r3, #12]
 801558a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801558e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015592:	d102      	bne.n	801559a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8015594:	2301      	movs	r3, #1
 8015596:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 801559a:	4b5a      	ldr	r3, [pc, #360]	; (8015704 <HAL_RCC_OscConfig+0xd08>)
 801559c:	68db      	ldr	r3, [r3, #12]
 801559e:	4a59      	ldr	r2, [pc, #356]	; (8015704 <HAL_RCC_OscConfig+0xd08>)
 80155a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80155a4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80155a6:	4b56      	ldr	r3, [pc, #344]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80155a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80155ae:	f023 0303 	bic.w	r3, r3, #3
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80155b6:	687a      	ldr	r2, [r7, #4]
 80155b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80155ba:	3a01      	subs	r2, #1
 80155bc:	0212      	lsls	r2, r2, #8
 80155be:	4311      	orrs	r1, r2
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80155c4:	430a      	orrs	r2, r1
 80155c6:	494e      	ldr	r1, [pc, #312]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80155c8:	4313      	orrs	r3, r2
 80155ca:	628b      	str	r3, [r1, #40]	; 0x28
 80155cc:	4b4c      	ldr	r3, [pc, #304]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80155ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80155d0:	4b4d      	ldr	r3, [pc, #308]	; (8015708 <HAL_RCC_OscConfig+0xd0c>)
 80155d2:	4013      	ands	r3, r2
 80155d4:	687a      	ldr	r2, [r7, #4]
 80155d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80155d8:	3a01      	subs	r2, #1
 80155da:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80155e2:	3a01      	subs	r2, #1
 80155e4:	0252      	lsls	r2, r2, #9
 80155e6:	b292      	uxth	r2, r2
 80155e8:	4311      	orrs	r1, r2
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80155ee:	3a01      	subs	r2, #1
 80155f0:	0412      	lsls	r2, r2, #16
 80155f2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80155f6:	4311      	orrs	r1, r2
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80155fc:	3a01      	subs	r2, #1
 80155fe:	0612      	lsls	r2, r2, #24
 8015600:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8015604:	430a      	orrs	r2, r1
 8015606:	493e      	ldr	r1, [pc, #248]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015608:	4313      	orrs	r3, r2
 801560a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 801560c:	4b3c      	ldr	r3, [pc, #240]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015610:	4a3b      	ldr	r2, [pc, #236]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015612:	f023 0310 	bic.w	r3, r3, #16
 8015616:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8015618:	4b39      	ldr	r3, [pc, #228]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801561c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015620:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8015624:	687a      	ldr	r2, [r7, #4]
 8015626:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8015628:	00d2      	lsls	r2, r2, #3
 801562a:	4935      	ldr	r1, [pc, #212]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801562c:	4313      	orrs	r3, r2
 801562e:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8015630:	4b33      	ldr	r3, [pc, #204]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015634:	4a32      	ldr	r2, [pc, #200]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015636:	f043 0310 	orr.w	r3, r3, #16
 801563a:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 801563c:	4b30      	ldr	r3, [pc, #192]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015640:	f023 020c 	bic.w	r2, r3, #12
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015648:	492d      	ldr	r1, [pc, #180]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801564a:	4313      	orrs	r3, r2
 801564c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 801564e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015652:	2b01      	cmp	r3, #1
 8015654:	d105      	bne.n	8015662 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8015656:	4b2b      	ldr	r3, [pc, #172]	; (8015704 <HAL_RCC_OscConfig+0xd08>)
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	4a2a      	ldr	r2, [pc, #168]	; (8015704 <HAL_RCC_OscConfig+0xd08>)
 801565c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015660:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8015662:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8015666:	2b01      	cmp	r3, #1
 8015668:	d107      	bne.n	801567a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 801566a:	4b25      	ldr	r3, [pc, #148]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801566c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015670:	4a23      	ldr	r2, [pc, #140]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015672:	f023 0304 	bic.w	r3, r3, #4
 8015676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801567a:	4b21      	ldr	r3, [pc, #132]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801567e:	4a20      	ldr	r2, [pc, #128]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015684:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8015686:	4b1e      	ldr	r3, [pc, #120]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	4a1d      	ldr	r2, [pc, #116]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 801568c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015690:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8015692:	f7fa ff69 	bl	8010568 <HAL_GetTick>
 8015696:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8015698:	e008      	b.n	80156ac <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801569a:	f7fa ff65 	bl	8010568 <HAL_GetTick>
 801569e:	4602      	mov	r2, r0
 80156a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	2b02      	cmp	r3, #2
 80156a6:	d901      	bls.n	80156ac <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80156a8:	2303      	movs	r3, #3
 80156aa:	e077      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80156ac:	4b14      	ldr	r3, [pc, #80]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d0f0      	beq.n	801569a <HAL_RCC_OscConfig+0xc9e>
 80156b8:	e06f      	b.n	801579a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80156ba:	4b11      	ldr	r3, [pc, #68]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	4a10      	ldr	r2, [pc, #64]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80156c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80156c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80156c6:	f7fa ff4f 	bl	8010568 <HAL_GetTick>
 80156ca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80156cc:	e008      	b.n	80156e0 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80156ce:	f7fa ff4b 	bl	8010568 <HAL_GetTick>
 80156d2:	4602      	mov	r2, r0
 80156d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d6:	1ad3      	subs	r3, r2, r3
 80156d8:	2b02      	cmp	r3, #2
 80156da:	d901      	bls.n	80156e0 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80156dc:	2303      	movs	r3, #3
 80156de:	e05d      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80156e0:	4b07      	ldr	r3, [pc, #28]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d1f0      	bne.n	80156ce <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80156ec:	4b04      	ldr	r3, [pc, #16]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80156ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156f0:	4a03      	ldr	r2, [pc, #12]	; (8015700 <HAL_RCC_OscConfig+0xd04>)
 80156f2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80156f6:	f023 0303 	bic.w	r3, r3, #3
 80156fa:	6293      	str	r3, [r2, #40]	; 0x28
 80156fc:	e04d      	b.n	801579a <HAL_RCC_OscConfig+0xd9e>
 80156fe:	bf00      	nop
 8015700:	46020c00 	.word	0x46020c00
 8015704:	46020800 	.word	0x46020800
 8015708:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 801570c:	4b25      	ldr	r3, [pc, #148]	; (80157a4 <HAL_RCC_OscConfig+0xda8>)
 801570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015710:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8015712:	4b24      	ldr	r3, [pc, #144]	; (80157a4 <HAL_RCC_OscConfig+0xda8>)
 8015714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015716:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801571c:	2b01      	cmp	r3, #1
 801571e:	d03a      	beq.n	8015796 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	f003 0203 	and.w	r2, r3, #3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801572a:	429a      	cmp	r2, r3
 801572c:	d133      	bne.n	8015796 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	0a1b      	lsrs	r3, r3, #8
 8015732:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801573a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 801573c:	429a      	cmp	r2, r3
 801573e:	d12a      	bne.n	8015796 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8015740:	69fb      	ldr	r3, [r7, #28]
 8015742:	0b1b      	lsrs	r3, r3, #12
 8015744:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 801574c:	429a      	cmp	r2, r3
 801574e:	d122      	bne.n	8015796 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015750:	69bb      	ldr	r3, [r7, #24]
 8015752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801575a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 801575c:	429a      	cmp	r2, r3
 801575e:	d11a      	bne.n	8015796 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8015760:	69bb      	ldr	r3, [r7, #24]
 8015762:	0a5b      	lsrs	r3, r3, #9
 8015764:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801576c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801576e:	429a      	cmp	r2, r3
 8015770:	d111      	bne.n	8015796 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	0c1b      	lsrs	r3, r3, #16
 8015776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801577e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015780:	429a      	cmp	r2, r3
 8015782:	d108      	bne.n	8015796 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8015784:	69bb      	ldr	r3, [r7, #24]
 8015786:	0e1b      	lsrs	r3, r3, #24
 8015788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015790:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8015792:	429a      	cmp	r2, r3
 8015794:	d001      	beq.n	801579a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8015796:	2301      	movs	r3, #1
 8015798:	e000      	b.n	801579c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 801579a:	2300      	movs	r3, #0
}
 801579c:	4618      	mov	r0, r3
 801579e:	3738      	adds	r7, #56	; 0x38
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	46020c00 	.word	0x46020c00

080157a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b086      	sub	sp, #24
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d101      	bne.n	80157bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80157b8:	2301      	movs	r3, #1
 80157ba:	e1d9      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80157bc:	4b9b      	ldr	r3, [pc, #620]	; (8015a2c <HAL_RCC_ClockConfig+0x284>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f003 030f 	and.w	r3, r3, #15
 80157c4:	683a      	ldr	r2, [r7, #0]
 80157c6:	429a      	cmp	r2, r3
 80157c8:	d910      	bls.n	80157ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80157ca:	4b98      	ldr	r3, [pc, #608]	; (8015a2c <HAL_RCC_ClockConfig+0x284>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f023 020f 	bic.w	r2, r3, #15
 80157d2:	4996      	ldr	r1, [pc, #600]	; (8015a2c <HAL_RCC_ClockConfig+0x284>)
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	4313      	orrs	r3, r2
 80157d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80157da:	4b94      	ldr	r3, [pc, #592]	; (8015a2c <HAL_RCC_ClockConfig+0x284>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f003 030f 	and.w	r3, r3, #15
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d001      	beq.n	80157ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80157e8:	2301      	movs	r3, #1
 80157ea:	e1c1      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	f003 0310 	and.w	r3, r3, #16
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d010      	beq.n	801581a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	695a      	ldr	r2, [r3, #20]
 80157fc:	4b8c      	ldr	r3, [pc, #560]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 80157fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015800:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015804:	429a      	cmp	r2, r3
 8015806:	d908      	bls.n	801581a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8015808:	4b89      	ldr	r3, [pc, #548]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801580c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	695b      	ldr	r3, [r3, #20]
 8015814:	4986      	ldr	r1, [pc, #536]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 8015816:	4313      	orrs	r3, r2
 8015818:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	f003 0308 	and.w	r3, r3, #8
 8015822:	2b00      	cmp	r3, #0
 8015824:	d012      	beq.n	801584c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	691a      	ldr	r2, [r3, #16]
 801582a:	4b81      	ldr	r3, [pc, #516]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801582c:	6a1b      	ldr	r3, [r3, #32]
 801582e:	091b      	lsrs	r3, r3, #4
 8015830:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015834:	429a      	cmp	r2, r3
 8015836:	d909      	bls.n	801584c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8015838:	4b7d      	ldr	r3, [pc, #500]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801583a:	6a1b      	ldr	r3, [r3, #32]
 801583c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	691b      	ldr	r3, [r3, #16]
 8015844:	011b      	lsls	r3, r3, #4
 8015846:	497a      	ldr	r1, [pc, #488]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 8015848:	4313      	orrs	r3, r2
 801584a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	f003 0304 	and.w	r3, r3, #4
 8015854:	2b00      	cmp	r3, #0
 8015856:	d010      	beq.n	801587a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	68da      	ldr	r2, [r3, #12]
 801585c:	4b74      	ldr	r3, [pc, #464]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801585e:	6a1b      	ldr	r3, [r3, #32]
 8015860:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015864:	429a      	cmp	r2, r3
 8015866:	d908      	bls.n	801587a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8015868:	4b71      	ldr	r3, [pc, #452]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801586a:	6a1b      	ldr	r3, [r3, #32]
 801586c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	496e      	ldr	r1, [pc, #440]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 8015876:	4313      	orrs	r3, r2
 8015878:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f003 0302 	and.w	r3, r3, #2
 8015882:	2b00      	cmp	r3, #0
 8015884:	d010      	beq.n	80158a8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	689a      	ldr	r2, [r3, #8]
 801588a:	4b69      	ldr	r3, [pc, #420]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801588c:	6a1b      	ldr	r3, [r3, #32]
 801588e:	f003 030f 	and.w	r3, r3, #15
 8015892:	429a      	cmp	r2, r3
 8015894:	d908      	bls.n	80158a8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8015896:	4b66      	ldr	r3, [pc, #408]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 8015898:	6a1b      	ldr	r3, [r3, #32]
 801589a:	f023 020f 	bic.w	r2, r3, #15
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	689b      	ldr	r3, [r3, #8]
 80158a2:	4963      	ldr	r1, [pc, #396]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 80158a4:	4313      	orrs	r3, r2
 80158a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	f003 0301 	and.w	r3, r3, #1
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	f000 80d2 	beq.w	8015a5a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80158b6:	2300      	movs	r3, #0
 80158b8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	2b03      	cmp	r3, #3
 80158c0:	d143      	bne.n	801594a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80158c2:	4b5b      	ldr	r3, [pc, #364]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 80158c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80158c8:	f003 0304 	and.w	r3, r3, #4
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d110      	bne.n	80158f2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80158d0:	4b57      	ldr	r3, [pc, #348]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 80158d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80158d6:	4a56      	ldr	r2, [pc, #344]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 80158d8:	f043 0304 	orr.w	r3, r3, #4
 80158dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80158e0:	4b53      	ldr	r3, [pc, #332]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 80158e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80158e6:	f003 0304 	and.w	r3, r3, #4
 80158ea:	60bb      	str	r3, [r7, #8]
 80158ec:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80158ee:	2301      	movs	r3, #1
 80158f0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80158f2:	f7fa fe39 	bl	8010568 <HAL_GetTick>
 80158f6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80158f8:	4b4e      	ldr	r3, [pc, #312]	; (8015a34 <HAL_RCC_ClockConfig+0x28c>)
 80158fa:	68db      	ldr	r3, [r3, #12]
 80158fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015900:	2b00      	cmp	r3, #0
 8015902:	d00f      	beq.n	8015924 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8015904:	e008      	b.n	8015918 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8015906:	f7fa fe2f 	bl	8010568 <HAL_GetTick>
 801590a:	4602      	mov	r2, r0
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	1ad3      	subs	r3, r2, r3
 8015910:	2b02      	cmp	r3, #2
 8015912:	d901      	bls.n	8015918 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8015914:	2303      	movs	r3, #3
 8015916:	e12b      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8015918:	4b46      	ldr	r3, [pc, #280]	; (8015a34 <HAL_RCC_ClockConfig+0x28c>)
 801591a:	68db      	ldr	r3, [r3, #12]
 801591c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015920:	2b00      	cmp	r3, #0
 8015922:	d0f0      	beq.n	8015906 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8015924:	7dfb      	ldrb	r3, [r7, #23]
 8015926:	2b01      	cmp	r3, #1
 8015928:	d107      	bne.n	801593a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 801592a:	4b41      	ldr	r3, [pc, #260]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801592c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015930:	4a3f      	ldr	r2, [pc, #252]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 8015932:	f023 0304 	bic.w	r3, r3, #4
 8015936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801593a:	4b3d      	ldr	r3, [pc, #244]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015942:	2b00      	cmp	r3, #0
 8015944:	d121      	bne.n	801598a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8015946:	2301      	movs	r3, #1
 8015948:	e112      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	685b      	ldr	r3, [r3, #4]
 801594e:	2b02      	cmp	r3, #2
 8015950:	d107      	bne.n	8015962 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015952:	4b37      	ldr	r3, [pc, #220]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801595a:	2b00      	cmp	r3, #0
 801595c:	d115      	bne.n	801598a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 801595e:	2301      	movs	r3, #1
 8015960:	e106      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d107      	bne.n	801597a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 801596a:	4b31      	ldr	r3, [pc, #196]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	f003 0304 	and.w	r3, r3, #4
 8015972:	2b00      	cmp	r3, #0
 8015974:	d109      	bne.n	801598a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8015976:	2301      	movs	r3, #1
 8015978:	e0fa      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801597a:	4b2d      	ldr	r3, [pc, #180]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015982:	2b00      	cmp	r3, #0
 8015984:	d101      	bne.n	801598a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8015986:	2301      	movs	r3, #1
 8015988:	e0f2      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 801598a:	4b29      	ldr	r3, [pc, #164]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 801598c:	69db      	ldr	r3, [r3, #28]
 801598e:	f023 0203 	bic.w	r2, r3, #3
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	4926      	ldr	r1, [pc, #152]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 8015998:	4313      	orrs	r3, r2
 801599a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 801599c:	f7fa fde4 	bl	8010568 <HAL_GetTick>
 80159a0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	2b03      	cmp	r3, #3
 80159a8:	d112      	bne.n	80159d0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80159aa:	e00a      	b.n	80159c2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80159ac:	f7fa fddc 	bl	8010568 <HAL_GetTick>
 80159b0:	4602      	mov	r2, r0
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	1ad3      	subs	r3, r2, r3
 80159b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80159ba:	4293      	cmp	r3, r2
 80159bc:	d901      	bls.n	80159c2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80159be:	2303      	movs	r3, #3
 80159c0:	e0d6      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80159c2:	4b1b      	ldr	r3, [pc, #108]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 80159c4:	69db      	ldr	r3, [r3, #28]
 80159c6:	f003 030c 	and.w	r3, r3, #12
 80159ca:	2b0c      	cmp	r3, #12
 80159cc:	d1ee      	bne.n	80159ac <HAL_RCC_ClockConfig+0x204>
 80159ce:	e044      	b.n	8015a5a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	2b02      	cmp	r3, #2
 80159d6:	d112      	bne.n	80159fe <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80159d8:	e00a      	b.n	80159f0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80159da:	f7fa fdc5 	bl	8010568 <HAL_GetTick>
 80159de:	4602      	mov	r2, r0
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80159e8:	4293      	cmp	r3, r2
 80159ea:	d901      	bls.n	80159f0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80159ec:	2303      	movs	r3, #3
 80159ee:	e0bf      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80159f0:	4b0f      	ldr	r3, [pc, #60]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 80159f2:	69db      	ldr	r3, [r3, #28]
 80159f4:	f003 030c 	and.w	r3, r3, #12
 80159f8:	2b08      	cmp	r3, #8
 80159fa:	d1ee      	bne.n	80159da <HAL_RCC_ClockConfig+0x232>
 80159fc:	e02d      	b.n	8015a5a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d123      	bne.n	8015a4e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015a06:	e00a      	b.n	8015a1e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a08:	f7fa fdae 	bl	8010568 <HAL_GetTick>
 8015a0c:	4602      	mov	r2, r0
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	1ad3      	subs	r3, r2, r3
 8015a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8015a16:	4293      	cmp	r3, r2
 8015a18:	d901      	bls.n	8015a1e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8015a1a:	2303      	movs	r3, #3
 8015a1c:	e0a8      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015a1e:	4b04      	ldr	r3, [pc, #16]	; (8015a30 <HAL_RCC_ClockConfig+0x288>)
 8015a20:	69db      	ldr	r3, [r3, #28]
 8015a22:	f003 030c 	and.w	r3, r3, #12
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d1ee      	bne.n	8015a08 <HAL_RCC_ClockConfig+0x260>
 8015a2a:	e016      	b.n	8015a5a <HAL_RCC_ClockConfig+0x2b2>
 8015a2c:	40022000 	.word	0x40022000
 8015a30:	46020c00 	.word	0x46020c00
 8015a34:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a38:	f7fa fd96 	bl	8010568 <HAL_GetTick>
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	1ad3      	subs	r3, r2, r3
 8015a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8015a46:	4293      	cmp	r3, r2
 8015a48:	d901      	bls.n	8015a4e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8015a4a:	2303      	movs	r3, #3
 8015a4c:	e090      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015a4e:	4b4a      	ldr	r3, [pc, #296]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015a50:	69db      	ldr	r3, [r3, #28]
 8015a52:	f003 030c 	and.w	r3, r3, #12
 8015a56:	2b04      	cmp	r3, #4
 8015a58:	d1ee      	bne.n	8015a38 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	f003 0302 	and.w	r3, r3, #2
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d010      	beq.n	8015a88 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	689a      	ldr	r2, [r3, #8]
 8015a6a:	4b43      	ldr	r3, [pc, #268]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015a6c:	6a1b      	ldr	r3, [r3, #32]
 8015a6e:	f003 030f 	and.w	r3, r3, #15
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d208      	bcs.n	8015a88 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8015a76:	4b40      	ldr	r3, [pc, #256]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015a78:	6a1b      	ldr	r3, [r3, #32]
 8015a7a:	f023 020f 	bic.w	r2, r3, #15
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	689b      	ldr	r3, [r3, #8]
 8015a82:	493d      	ldr	r1, [pc, #244]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015a84:	4313      	orrs	r3, r2
 8015a86:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015a88:	4b3c      	ldr	r3, [pc, #240]	; (8015b7c <HAL_RCC_ClockConfig+0x3d4>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	f003 030f 	and.w	r3, r3, #15
 8015a90:	683a      	ldr	r2, [r7, #0]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d210      	bcs.n	8015ab8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015a96:	4b39      	ldr	r3, [pc, #228]	; (8015b7c <HAL_RCC_ClockConfig+0x3d4>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f023 020f 	bic.w	r2, r3, #15
 8015a9e:	4937      	ldr	r1, [pc, #220]	; (8015b7c <HAL_RCC_ClockConfig+0x3d4>)
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	4313      	orrs	r3, r2
 8015aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015aa6:	4b35      	ldr	r3, [pc, #212]	; (8015b7c <HAL_RCC_ClockConfig+0x3d4>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	f003 030f 	and.w	r3, r3, #15
 8015aae:	683a      	ldr	r2, [r7, #0]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d001      	beq.n	8015ab8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	e05b      	b.n	8015b70 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	f003 0304 	and.w	r3, r3, #4
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d010      	beq.n	8015ae6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	68da      	ldr	r2, [r3, #12]
 8015ac8:	4b2b      	ldr	r3, [pc, #172]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015aca:	6a1b      	ldr	r3, [r3, #32]
 8015acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d208      	bcs.n	8015ae6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8015ad4:	4b28      	ldr	r3, [pc, #160]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015ad6:	6a1b      	ldr	r3, [r3, #32]
 8015ad8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	68db      	ldr	r3, [r3, #12]
 8015ae0:	4925      	ldr	r1, [pc, #148]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015ae2:	4313      	orrs	r3, r2
 8015ae4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	f003 0308 	and.w	r3, r3, #8
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d012      	beq.n	8015b18 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	691a      	ldr	r2, [r3, #16]
 8015af6:	4b20      	ldr	r3, [pc, #128]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015af8:	6a1b      	ldr	r3, [r3, #32]
 8015afa:	091b      	lsrs	r3, r3, #4
 8015afc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d209      	bcs.n	8015b18 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8015b04:	4b1c      	ldr	r3, [pc, #112]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015b06:	6a1b      	ldr	r3, [r3, #32]
 8015b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	691b      	ldr	r3, [r3, #16]
 8015b10:	011b      	lsls	r3, r3, #4
 8015b12:	4919      	ldr	r1, [pc, #100]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015b14:	4313      	orrs	r3, r2
 8015b16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	f003 0310 	and.w	r3, r3, #16
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d010      	beq.n	8015b46 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	695a      	ldr	r2, [r3, #20]
 8015b28:	4b13      	ldr	r3, [pc, #76]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d208      	bcs.n	8015b46 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8015b34:	4b10      	ldr	r3, [pc, #64]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	695b      	ldr	r3, [r3, #20]
 8015b40:	490d      	ldr	r1, [pc, #52]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015b42:	4313      	orrs	r3, r2
 8015b44:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8015b46:	f000 f821 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8015b4a:	4602      	mov	r2, r0
 8015b4c:	4b0a      	ldr	r3, [pc, #40]	; (8015b78 <HAL_RCC_ClockConfig+0x3d0>)
 8015b4e:	6a1b      	ldr	r3, [r3, #32]
 8015b50:	f003 030f 	and.w	r3, r3, #15
 8015b54:	490a      	ldr	r1, [pc, #40]	; (8015b80 <HAL_RCC_ClockConfig+0x3d8>)
 8015b56:	5ccb      	ldrb	r3, [r1, r3]
 8015b58:	fa22 f303 	lsr.w	r3, r2, r3
 8015b5c:	4a09      	ldr	r2, [pc, #36]	; (8015b84 <HAL_RCC_ClockConfig+0x3dc>)
 8015b5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015b60:	4b09      	ldr	r3, [pc, #36]	; (8015b88 <HAL_RCC_ClockConfig+0x3e0>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fa fa7d 	bl	8010064 <HAL_InitTick>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8015b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	3718      	adds	r7, #24
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}
 8015b78:	46020c00 	.word	0x46020c00
 8015b7c:	40022000 	.word	0x40022000
 8015b80:	08023b00 	.word	0x08023b00
 8015b84:	20000028 	.word	0x20000028
 8015b88:	2000002c 	.word	0x2000002c

08015b8c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015b8c:	b480      	push	{r7}
 8015b8e:	b08b      	sub	sp, #44	; 0x2c
 8015b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8015b92:	2300      	movs	r3, #0
 8015b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8015b96:	2300      	movs	r3, #0
 8015b98:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015b9a:	4b7b      	ldr	r3, [pc, #492]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015b9c:	69db      	ldr	r3, [r3, #28]
 8015b9e:	f003 030c 	and.w	r3, r3, #12
 8015ba2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015ba4:	4b78      	ldr	r3, [pc, #480]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ba8:	f003 0303 	and.w	r3, r3, #3
 8015bac:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8015bae:	69bb      	ldr	r3, [r7, #24]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d005      	beq.n	8015bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8015bb4:	69bb      	ldr	r3, [r7, #24]
 8015bb6:	2b0c      	cmp	r3, #12
 8015bb8:	d121      	bne.n	8015bfe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d11e      	bne.n	8015bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8015bc0:	4b71      	ldr	r3, [pc, #452]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015bc2:	689b      	ldr	r3, [r3, #8]
 8015bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d107      	bne.n	8015bdc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8015bcc:	4b6e      	ldr	r3, [pc, #440]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8015bd2:	0b1b      	lsrs	r3, r3, #12
 8015bd4:	f003 030f 	and.w	r3, r3, #15
 8015bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8015bda:	e005      	b.n	8015be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8015bdc:	4b6a      	ldr	r3, [pc, #424]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015bde:	689b      	ldr	r3, [r3, #8]
 8015be0:	0f1b      	lsrs	r3, r3, #28
 8015be2:	f003 030f 	and.w	r3, r3, #15
 8015be6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8015be8:	4a68      	ldr	r2, [pc, #416]	; (8015d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8015bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015bf0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8015bf2:	69bb      	ldr	r3, [r7, #24]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d110      	bne.n	8015c1a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8015bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8015bfc:	e00d      	b.n	8015c1a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015bfe:	4b62      	ldr	r3, [pc, #392]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015c00:	69db      	ldr	r3, [r3, #28]
 8015c02:	f003 030c 	and.w	r3, r3, #12
 8015c06:	2b04      	cmp	r3, #4
 8015c08:	d102      	bne.n	8015c10 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8015c0a:	4b61      	ldr	r3, [pc, #388]	; (8015d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8015c0c:	623b      	str	r3, [r7, #32]
 8015c0e:	e004      	b.n	8015c1a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8015c10:	69bb      	ldr	r3, [r7, #24]
 8015c12:	2b08      	cmp	r3, #8
 8015c14:	d101      	bne.n	8015c1a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8015c16:	4b5e      	ldr	r3, [pc, #376]	; (8015d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8015c18:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015c1a:	69bb      	ldr	r3, [r7, #24]
 8015c1c:	2b0c      	cmp	r3, #12
 8015c1e:	f040 80ac 	bne.w	8015d7a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8015c22:	4b59      	ldr	r3, [pc, #356]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c26:	f003 0303 	and.w	r3, r3, #3
 8015c2a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8015c2c:	4b56      	ldr	r3, [pc, #344]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c30:	0a1b      	lsrs	r3, r3, #8
 8015c32:	f003 030f 	and.w	r3, r3, #15
 8015c36:	3301      	adds	r3, #1
 8015c38:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8015c3a:	4b53      	ldr	r3, [pc, #332]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c3e:	091b      	lsrs	r3, r3, #4
 8015c40:	f003 0301 	and.w	r3, r3, #1
 8015c44:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8015c46:	4b50      	ldr	r3, [pc, #320]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c4a:	08db      	lsrs	r3, r3, #3
 8015c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c50:	68ba      	ldr	r2, [r7, #8]
 8015c52:	fb02 f303 	mul.w	r3, r2, r3
 8015c56:	ee07 3a90 	vmov	s15, r3
 8015c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c5e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	f000 8086 	beq.w	8015d76 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	2b02      	cmp	r3, #2
 8015c6e:	d003      	beq.n	8015c78 <HAL_RCC_GetSysClockFreq+0xec>
 8015c70:	693b      	ldr	r3, [r7, #16]
 8015c72:	2b03      	cmp	r3, #3
 8015c74:	d022      	beq.n	8015cbc <HAL_RCC_GetSysClockFreq+0x130>
 8015c76:	e043      	b.n	8015d00 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	ee07 3a90 	vmov	s15, r3
 8015c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c82:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015d94 <HAL_RCC_GetSysClockFreq+0x208>
 8015c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015c8a:	4b3f      	ldr	r3, [pc, #252]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c92:	ee07 3a90 	vmov	s15, r3
 8015c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8015c9a:	ed97 6a01 	vldr	s12, [r7, #4]
 8015c9e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015d98 <HAL_RCC_GetSysClockFreq+0x20c>
 8015ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8015caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015cb6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8015cba:	e046      	b.n	8015d4a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	ee07 3a90 	vmov	s15, r3
 8015cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cc6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8015d94 <HAL_RCC_GetSysClockFreq+0x208>
 8015cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015cce:	4b2e      	ldr	r3, [pc, #184]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015cd6:	ee07 3a90 	vmov	s15, r3
 8015cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8015cde:	ed97 6a01 	vldr	s12, [r7, #4]
 8015ce2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8015d98 <HAL_RCC_GetSysClockFreq+0x20c>
 8015ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8015cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015cfa:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8015cfe:	e024      	b.n	8015d4a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	ee07 3a90 	vmov	s15, r3
 8015d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	ee07 3a90 	vmov	s15, r3
 8015d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d18:	4b1b      	ldr	r3, [pc, #108]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d20:	ee07 3a90 	vmov	s15, r3
 8015d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8015d28:	ed97 6a01 	vldr	s12, [r7, #4]
 8015d2c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8015d98 <HAL_RCC_GetSysClockFreq+0x20c>
 8015d30:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015d34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8015d38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015d3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d44:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8015d48:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8015d4a:	4b0f      	ldr	r3, [pc, #60]	; (8015d88 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8015d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d4e:	0e1b      	lsrs	r3, r3, #24
 8015d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d54:	3301      	adds	r3, #1
 8015d56:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	ee07 3a90 	vmov	s15, r3
 8015d5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8015d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015d6e:	ee17 3a90 	vmov	r3, s15
 8015d72:	623b      	str	r3, [r7, #32]
 8015d74:	e001      	b.n	8015d7a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8015d7a:	6a3b      	ldr	r3, [r7, #32]
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	372c      	adds	r7, #44	; 0x2c
 8015d80:	46bd      	mov	sp, r7
 8015d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d86:	4770      	bx	lr
 8015d88:	46020c00 	.word	0x46020c00
 8015d8c:	08023b18 	.word	0x08023b18
 8015d90:	00f42400 	.word	0x00f42400
 8015d94:	4b742400 	.word	0x4b742400
 8015d98:	46000000 	.word	0x46000000

08015d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8015da0:	f7ff fef4 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8015da4:	4602      	mov	r2, r0
 8015da6:	4b07      	ldr	r3, [pc, #28]	; (8015dc4 <HAL_RCC_GetHCLKFreq+0x28>)
 8015da8:	6a1b      	ldr	r3, [r3, #32]
 8015daa:	f003 030f 	and.w	r3, r3, #15
 8015dae:	4906      	ldr	r1, [pc, #24]	; (8015dc8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8015db0:	5ccb      	ldrb	r3, [r1, r3]
 8015db2:	fa22 f303 	lsr.w	r3, r2, r3
 8015db6:	4a05      	ldr	r2, [pc, #20]	; (8015dcc <HAL_RCC_GetHCLKFreq+0x30>)
 8015db8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8015dba:	4b04      	ldr	r3, [pc, #16]	; (8015dcc <HAL_RCC_GetHCLKFreq+0x30>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	bd80      	pop	{r7, pc}
 8015dc2:	bf00      	nop
 8015dc4:	46020c00 	.word	0x46020c00
 8015dc8:	08023b00 	.word	0x08023b00
 8015dcc:	20000028 	.word	0x20000028

08015dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8015dd4:	f7ff ffe2 	bl	8015d9c <HAL_RCC_GetHCLKFreq>
 8015dd8:	4602      	mov	r2, r0
 8015dda:	4b05      	ldr	r3, [pc, #20]	; (8015df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8015ddc:	6a1b      	ldr	r3, [r3, #32]
 8015dde:	091b      	lsrs	r3, r3, #4
 8015de0:	f003 0307 	and.w	r3, r3, #7
 8015de4:	4903      	ldr	r1, [pc, #12]	; (8015df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015de6:	5ccb      	ldrb	r3, [r1, r3]
 8015de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015dec:	4618      	mov	r0, r3
 8015dee:	bd80      	pop	{r7, pc}
 8015df0:	46020c00 	.word	0x46020c00
 8015df4:	08023b10 	.word	0x08023b10

08015df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8015dfc:	f7ff ffce 	bl	8015d9c <HAL_RCC_GetHCLKFreq>
 8015e00:	4602      	mov	r2, r0
 8015e02:	4b05      	ldr	r3, [pc, #20]	; (8015e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8015e04:	6a1b      	ldr	r3, [r3, #32]
 8015e06:	0a1b      	lsrs	r3, r3, #8
 8015e08:	f003 0307 	and.w	r3, r3, #7
 8015e0c:	4903      	ldr	r1, [pc, #12]	; (8015e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8015e0e:	5ccb      	ldrb	r3, [r1, r3]
 8015e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	46020c00 	.word	0x46020c00
 8015e1c:	08023b10 	.word	0x08023b10

08015e20 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8015e24:	f7ff ffba 	bl	8015d9c <HAL_RCC_GetHCLKFreq>
 8015e28:	4602      	mov	r2, r0
 8015e2a:	4b05      	ldr	r3, [pc, #20]	; (8015e40 <HAL_RCC_GetPCLK3Freq+0x20>)
 8015e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e2e:	091b      	lsrs	r3, r3, #4
 8015e30:	f003 0307 	and.w	r3, r3, #7
 8015e34:	4903      	ldr	r1, [pc, #12]	; (8015e44 <HAL_RCC_GetPCLK3Freq+0x24>)
 8015e36:	5ccb      	ldrb	r3, [r1, r3]
 8015e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	bd80      	pop	{r7, pc}
 8015e40:	46020c00 	.word	0x46020c00
 8015e44:	08023b10 	.word	0x08023b10

08015e48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015e48:	b480      	push	{r7}
 8015e4a:	b083      	sub	sp, #12
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
 8015e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	221f      	movs	r2, #31
 8015e56:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8015e58:	4b15      	ldr	r3, [pc, #84]	; (8015eb0 <HAL_RCC_GetClockConfig+0x68>)
 8015e5a:	69db      	ldr	r3, [r3, #28]
 8015e5c:	f003 0203 	and.w	r2, r3, #3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8015e64:	4b12      	ldr	r3, [pc, #72]	; (8015eb0 <HAL_RCC_GetClockConfig+0x68>)
 8015e66:	6a1b      	ldr	r3, [r3, #32]
 8015e68:	f003 020f 	and.w	r2, r3, #15
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8015e70:	4b0f      	ldr	r3, [pc, #60]	; (8015eb0 <HAL_RCC_GetClockConfig+0x68>)
 8015e72:	6a1b      	ldr	r3, [r3, #32]
 8015e74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8015e7c:	4b0c      	ldr	r3, [pc, #48]	; (8015eb0 <HAL_RCC_GetClockConfig+0x68>)
 8015e7e:	6a1b      	ldr	r3, [r3, #32]
 8015e80:	091b      	lsrs	r3, r3, #4
 8015e82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8015e8a:	4b09      	ldr	r3, [pc, #36]	; (8015eb0 <HAL_RCC_GetClockConfig+0x68>)
 8015e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8015e96:	4b07      	ldr	r3, [pc, #28]	; (8015eb4 <HAL_RCC_GetClockConfig+0x6c>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	f003 020f 	and.w	r2, r3, #15
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	601a      	str	r2, [r3, #0]
}
 8015ea2:	bf00      	nop
 8015ea4:	370c      	adds	r7, #12
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eac:	4770      	bx	lr
 8015eae:	bf00      	nop
 8015eb0:	46020c00 	.word	0x46020c00
 8015eb4:	40022000 	.word	0x40022000

08015eb8 <HAL_RCC_GetResetSource>:
  * @note   Once reset flags are retrieved, this API is clearing them in order
  *         to isolate next reset reason.
  * @retval can be a combination of @ref RCC_Reset_Flag
  */
uint32_t HAL_RCC_GetResetSource(void)
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
  uint32_t reset;

  /* Get all reset flags */
  reset = RCC->CSR & RCC_RESET_FLAG_ALL;
 8015ebe:	4b0a      	ldr	r3, [pc, #40]	; (8015ee8 <HAL_RCC_GetResetSource+0x30>)
 8015ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8015ec4:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
 8015ec8:	607b      	str	r3, [r7, #4]

  /* Clear Reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8015eca:	4b07      	ldr	r3, [pc, #28]	; (8015ee8 <HAL_RCC_GetResetSource+0x30>)
 8015ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8015ed0:	4a05      	ldr	r2, [pc, #20]	; (8015ee8 <HAL_RCC_GetResetSource+0x30>)
 8015ed2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015ed6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

  return reset;
 8015eda:	687b      	ldr	r3, [r7, #4]
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	370c      	adds	r7, #12
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee6:	4770      	bx	lr
 8015ee8:	46020c00 	.word	0x46020c00

08015eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b086      	sub	sp, #24
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8015ef4:	4b3e      	ldr	r3, [pc, #248]	; (8015ff0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8015ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015efa:	f003 0304 	and.w	r3, r3, #4
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d003      	beq.n	8015f0a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8015f02:	f7fe fab3 	bl	801446c <HAL_PWREx_GetVoltageRange>
 8015f06:	6178      	str	r0, [r7, #20]
 8015f08:	e019      	b.n	8015f3e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8015f0a:	4b39      	ldr	r3, [pc, #228]	; (8015ff0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8015f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015f10:	4a37      	ldr	r2, [pc, #220]	; (8015ff0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8015f12:	f043 0304 	orr.w	r3, r3, #4
 8015f16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015f1a:	4b35      	ldr	r3, [pc, #212]	; (8015ff0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8015f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015f20:	f003 0304 	and.w	r3, r3, #4
 8015f24:	60fb      	str	r3, [r7, #12]
 8015f26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8015f28:	f7fe faa0 	bl	801446c <HAL_PWREx_GetVoltageRange>
 8015f2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8015f2e:	4b30      	ldr	r3, [pc, #192]	; (8015ff0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8015f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015f34:	4a2e      	ldr	r2, [pc, #184]	; (8015ff0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8015f36:	f023 0304 	bic.w	r3, r3, #4
 8015f3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015f44:	d003      	beq.n	8015f4e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015f4c:	d109      	bne.n	8015f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015f54:	d202      	bcs.n	8015f5c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8015f56:	2301      	movs	r3, #1
 8015f58:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8015f5a:	e033      	b.n	8015fc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8015f60:	e030      	b.n	8015fc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015f68:	d208      	bcs.n	8015f7c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f70:	d102      	bne.n	8015f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8015f72:	2303      	movs	r3, #3
 8015f74:	613b      	str	r3, [r7, #16]
 8015f76:	e025      	b.n	8015fc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8015f78:	2301      	movs	r3, #1
 8015f7a:	e035      	b.n	8015fe8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015f82:	d90f      	bls.n	8015fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d109      	bne.n	8015f9e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015f90:	d902      	bls.n	8015f98 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8015f92:	2300      	movs	r3, #0
 8015f94:	613b      	str	r3, [r7, #16]
 8015f96:	e015      	b.n	8015fc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8015f98:	2301      	movs	r3, #1
 8015f9a:	613b      	str	r3, [r7, #16]
 8015f9c:	e012      	b.n	8015fc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	613b      	str	r3, [r7, #16]
 8015fa2:	e00f      	b.n	8015fc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015faa:	d109      	bne.n	8015fc0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015fb2:	d102      	bne.n	8015fba <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	613b      	str	r3, [r7, #16]
 8015fb8:	e004      	b.n	8015fc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8015fba:	2302      	movs	r3, #2
 8015fbc:	613b      	str	r3, [r7, #16]
 8015fbe:	e001      	b.n	8015fc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8015fc4:	4b0b      	ldr	r3, [pc, #44]	; (8015ff4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	f023 020f 	bic.w	r2, r3, #15
 8015fcc:	4909      	ldr	r1, [pc, #36]	; (8015ff4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	4313      	orrs	r3, r2
 8015fd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8015fd4:	4b07      	ldr	r3, [pc, #28]	; (8015ff4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f003 030f 	and.w	r3, r3, #15
 8015fdc:	693a      	ldr	r2, [r7, #16]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d001      	beq.n	8015fe6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8015fe2:	2301      	movs	r3, #1
 8015fe4:	e000      	b.n	8015fe8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8015fe6:	2300      	movs	r3, #0
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3718      	adds	r7, #24
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	46020c00 	.word	0x46020c00
 8015ff4:	40022000 	.word	0x40022000

08015ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8015ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015ffc:	b0ba      	sub	sp, #232	; 0xe8
 8015ffe:	af00      	add	r7, sp, #0
 8016000:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8016004:	2300      	movs	r3, #0
 8016006:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801600a:	2300      	movs	r3, #0
 801600c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016018:	f002 0401 	and.w	r4, r2, #1
 801601c:	2500      	movs	r5, #0
 801601e:	ea54 0305 	orrs.w	r3, r4, r5
 8016022:	d00b      	beq.n	801603c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8016024:	4bcb      	ldr	r3, [pc, #812]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801602a:	f023 0103 	bic.w	r1, r3, #3
 801602e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016034:	4ac7      	ldr	r2, [pc, #796]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016036:	430b      	orrs	r3, r1
 8016038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801603c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016044:	f002 0802 	and.w	r8, r2, #2
 8016048:	f04f 0900 	mov.w	r9, #0
 801604c:	ea58 0309 	orrs.w	r3, r8, r9
 8016050:	d00b      	beq.n	801606a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8016052:	4bc0      	ldr	r3, [pc, #768]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016058:	f023 010c 	bic.w	r1, r3, #12
 801605c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016062:	4abc      	ldr	r2, [pc, #752]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016064:	430b      	orrs	r3, r1
 8016066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801606a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016072:	f002 0a04 	and.w	sl, r2, #4
 8016076:	f04f 0b00 	mov.w	fp, #0
 801607a:	ea5a 030b 	orrs.w	r3, sl, fp
 801607e:	d00b      	beq.n	8016098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8016080:	4bb4      	ldr	r3, [pc, #720]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016086:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801608a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801608e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016090:	4ab0      	ldr	r2, [pc, #704]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016092:	430b      	orrs	r3, r1
 8016094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8016098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160a0:	f002 0308 	and.w	r3, r2, #8
 80160a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80160a8:	2300      	movs	r3, #0
 80160aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80160ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80160b2:	460b      	mov	r3, r1
 80160b4:	4313      	orrs	r3, r2
 80160b6:	d00b      	beq.n	80160d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80160b8:	4ba6      	ldr	r3, [pc, #664]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80160ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80160be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80160c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80160c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160c8:	4aa2      	ldr	r2, [pc, #648]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80160ca:	430b      	orrs	r3, r1
 80160cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80160d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80160d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d8:	f002 0310 	and.w	r3, r2, #16
 80160dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80160e0:	2300      	movs	r3, #0
 80160e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80160e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80160ea:	460b      	mov	r3, r1
 80160ec:	4313      	orrs	r3, r2
 80160ee:	d00b      	beq.n	8016108 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80160f0:	4b98      	ldr	r3, [pc, #608]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80160f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80160f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80160fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80160fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016100:	4a94      	ldr	r2, [pc, #592]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016102:	430b      	orrs	r3, r1
 8016104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8016108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016110:	f002 0320 	and.w	r3, r2, #32
 8016114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016118:	2300      	movs	r3, #0
 801611a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801611e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8016122:	460b      	mov	r3, r1
 8016124:	4313      	orrs	r3, r2
 8016126:	d00b      	beq.n	8016140 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8016128:	4b8a      	ldr	r3, [pc, #552]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801612a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801612e:	f023 0107 	bic.w	r1, r3, #7
 8016132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016138:	4a86      	ldr	r2, [pc, #536]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801613a:	430b      	orrs	r3, r1
 801613c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8016140:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016148:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801614c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016150:	2300      	movs	r3, #0
 8016152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016156:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801615a:	460b      	mov	r3, r1
 801615c:	4313      	orrs	r3, r2
 801615e:	d00b      	beq.n	8016178 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8016160:	4b7c      	ldr	r3, [pc, #496]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016166:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 801616a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801616e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016170:	4a78      	ldr	r2, [pc, #480]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016172:	430b      	orrs	r3, r1
 8016174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8016178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016180:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8016184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8016188:	2300      	movs	r3, #0
 801618a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801618e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8016192:	460b      	mov	r3, r1
 8016194:	4313      	orrs	r3, r2
 8016196:	d00b      	beq.n	80161b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8016198:	4b6e      	ldr	r3, [pc, #440]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801619a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801619e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80161a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161a8:	4a6a      	ldr	r2, [pc, #424]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80161aa:	430b      	orrs	r3, r1
 80161ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80161b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80161bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80161c0:	2300      	movs	r3, #0
 80161c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80161c6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80161ca:	460b      	mov	r3, r1
 80161cc:	4313      	orrs	r3, r2
 80161ce:	d00b      	beq.n	80161e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80161d0:	4b60      	ldr	r3, [pc, #384]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80161d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80161d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80161da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161e0:	4a5c      	ldr	r2, [pc, #368]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80161e2:	430b      	orrs	r3, r1
 80161e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80161e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80161f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80161f8:	2300      	movs	r3, #0
 80161fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80161fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8016202:	460b      	mov	r3, r1
 8016204:	4313      	orrs	r3, r2
 8016206:	d00b      	beq.n	8016220 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8016208:	4b52      	ldr	r3, [pc, #328]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801620a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801620e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8016212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016218:	4a4e      	ldr	r2, [pc, #312]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801621a:	430b      	orrs	r3, r1
 801621c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8016220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016228:	f402 7300 	and.w	r3, r2, #512	; 0x200
 801622c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016230:	2300      	movs	r3, #0
 8016232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016236:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801623a:	460b      	mov	r3, r1
 801623c:	4313      	orrs	r3, r2
 801623e:	d00b      	beq.n	8016258 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8016240:	4b44      	ldr	r3, [pc, #272]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8016246:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 801624a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801624e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016250:	4a40      	ldr	r2, [pc, #256]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016252:	430b      	orrs	r3, r1
 8016254:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8016258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016260:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8016264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016268:	2300      	movs	r3, #0
 801626a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801626e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8016272:	460b      	mov	r3, r1
 8016274:	4313      	orrs	r3, r2
 8016276:	d00b      	beq.n	8016290 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8016278:	4b36      	ldr	r3, [pc, #216]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801627a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801627e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8016282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016288:	4a32      	ldr	r2, [pc, #200]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801628a:	430b      	orrs	r3, r1
 801628c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8016290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016298:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801629c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80162a0:	2300      	movs	r3, #0
 80162a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80162a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80162aa:	460b      	mov	r3, r1
 80162ac:	4313      	orrs	r3, r2
 80162ae:	d00c      	beq.n	80162ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80162b0:	4b28      	ldr	r3, [pc, #160]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80162b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80162b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80162ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80162be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80162c2:	4a24      	ldr	r2, [pc, #144]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80162c4:	430b      	orrs	r3, r1
 80162c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80162ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80162ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80162d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80162d8:	2300      	movs	r3, #0
 80162da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80162dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80162e0:	460b      	mov	r3, r1
 80162e2:	4313      	orrs	r3, r2
 80162e4:	d04f      	beq.n	8016386 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80162e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80162ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162ee:	2b80      	cmp	r3, #128	; 0x80
 80162f0:	d02d      	beq.n	801634e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80162f2:	2b80      	cmp	r3, #128	; 0x80
 80162f4:	d827      	bhi.n	8016346 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80162f6:	2b60      	cmp	r3, #96	; 0x60
 80162f8:	d02e      	beq.n	8016358 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80162fa:	2b60      	cmp	r3, #96	; 0x60
 80162fc:	d823      	bhi.n	8016346 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80162fe:	2b40      	cmp	r3, #64	; 0x40
 8016300:	d006      	beq.n	8016310 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8016302:	2b40      	cmp	r3, #64	; 0x40
 8016304:	d81f      	bhi.n	8016346 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8016306:	2b00      	cmp	r3, #0
 8016308:	d009      	beq.n	801631e <HAL_RCCEx_PeriphCLKConfig+0x326>
 801630a:	2b20      	cmp	r3, #32
 801630c:	d011      	beq.n	8016332 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 801630e:	e01a      	b.n	8016346 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8016310:	4b10      	ldr	r3, [pc, #64]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016314:	4a0f      	ldr	r2, [pc, #60]	; (8016354 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8016316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801631a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 801631c:	e01d      	b.n	801635a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801631e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016322:	3308      	adds	r3, #8
 8016324:	4618      	mov	r0, r3
 8016326:	f002 f991 	bl	801864c <RCCEx_PLL2_Config>
 801632a:	4603      	mov	r3, r0
 801632c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8016330:	e013      	b.n	801635a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8016332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016336:	332c      	adds	r3, #44	; 0x2c
 8016338:	4618      	mov	r0, r3
 801633a:	f002 fa1f 	bl	801877c <RCCEx_PLL3_Config>
 801633e:	4603      	mov	r3, r0
 8016340:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8016344:	e009      	b.n	801635a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016346:	2301      	movs	r3, #1
 8016348:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 801634c:	e005      	b.n	801635a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 801634e:	bf00      	nop
 8016350:	e003      	b.n	801635a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8016352:	bf00      	nop
 8016354:	46020c00 	.word	0x46020c00
        break;
 8016358:	bf00      	nop
    }

    if (ret == HAL_OK)
 801635a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801635e:	2b00      	cmp	r3, #0
 8016360:	d10d      	bne.n	801637e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8016362:	4bb6      	ldr	r3, [pc, #728]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8016364:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8016368:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 801636c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016374:	4ab1      	ldr	r2, [pc, #708]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8016376:	430b      	orrs	r3, r1
 8016378:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 801637c:	e003      	b.n	8016386 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801637e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016382:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8016386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8016392:	673b      	str	r3, [r7, #112]	; 0x70
 8016394:	2300      	movs	r3, #0
 8016396:	677b      	str	r3, [r7, #116]	; 0x74
 8016398:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801639c:	460b      	mov	r3, r1
 801639e:	4313      	orrs	r3, r2
 80163a0:	d053      	beq.n	801644a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80163a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80163a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80163aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80163ae:	d033      	beq.n	8016418 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80163b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80163b4:	d82c      	bhi.n	8016410 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80163b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80163ba:	d02f      	beq.n	801641c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80163bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80163c0:	d826      	bhi.n	8016410 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80163c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163c6:	d008      	beq.n	80163da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80163c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163cc:	d820      	bhi.n	8016410 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d00a      	beq.n	80163e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80163d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80163d6:	d011      	beq.n	80163fc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80163d8:	e01a      	b.n	8016410 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80163da:	4b98      	ldr	r3, [pc, #608]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80163dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163de:	4a97      	ldr	r2, [pc, #604]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80163e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80163e4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80163e6:	e01a      	b.n	801641e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80163e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80163ec:	3308      	adds	r3, #8
 80163ee:	4618      	mov	r0, r3
 80163f0:	f002 f92c 	bl	801864c <RCCEx_PLL2_Config>
 80163f4:	4603      	mov	r3, r0
 80163f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80163fa:	e010      	b.n	801641e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80163fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016400:	332c      	adds	r3, #44	; 0x2c
 8016402:	4618      	mov	r0, r3
 8016404:	f002 f9ba 	bl	801877c <RCCEx_PLL3_Config>
 8016408:	4603      	mov	r3, r0
 801640a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 801640e:	e006      	b.n	801641e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016410:	2301      	movs	r3, #1
 8016412:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8016416:	e002      	b.n	801641e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8016418:	bf00      	nop
 801641a:	e000      	b.n	801641e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 801641c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801641e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016422:	2b00      	cmp	r3, #0
 8016424:	d10d      	bne.n	8016442 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8016426:	4b85      	ldr	r3, [pc, #532]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8016428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801642c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8016430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016438:	4a80      	ldr	r2, [pc, #512]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 801643a:	430b      	orrs	r3, r1
 801643c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8016440:	e003      	b.n	801644a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016442:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016446:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 801644a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016452:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8016456:	66bb      	str	r3, [r7, #104]	; 0x68
 8016458:	2300      	movs	r3, #0
 801645a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801645c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8016460:	460b      	mov	r3, r1
 8016462:	4313      	orrs	r3, r2
 8016464:	d046      	beq.n	80164f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8016466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801646a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801646e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8016472:	d028      	beq.n	80164c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8016474:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8016478:	d821      	bhi.n	80164be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 801647a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801647e:	d022      	beq.n	80164c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8016480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016484:	d81b      	bhi.n	80164be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8016486:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801648a:	d01c      	beq.n	80164c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 801648c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8016490:	d815      	bhi.n	80164be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8016492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016496:	d008      	beq.n	80164aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8016498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801649c:	d80f      	bhi.n	80164be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d011      	beq.n	80164c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80164a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164a6:	d00e      	beq.n	80164c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80164a8:	e009      	b.n	80164be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80164aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80164ae:	3308      	adds	r3, #8
 80164b0:	4618      	mov	r0, r3
 80164b2:	f002 f8cb 	bl	801864c <RCCEx_PLL2_Config>
 80164b6:	4603      	mov	r3, r0
 80164b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80164bc:	e004      	b.n	80164c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80164be:	2301      	movs	r3, #1
 80164c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80164c4:	e000      	b.n	80164c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80164c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80164c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d10d      	bne.n	80164ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80164d0:	4b5a      	ldr	r3, [pc, #360]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80164d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80164d6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80164da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80164de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80164e2:	4a56      	ldr	r2, [pc, #344]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80164e4:	430b      	orrs	r3, r1
 80164e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80164ea:	e003      	b.n	80164f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80164f0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80164f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80164f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164fc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8016500:	663b      	str	r3, [r7, #96]	; 0x60
 8016502:	2300      	movs	r3, #0
 8016504:	667b      	str	r3, [r7, #100]	; 0x64
 8016506:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801650a:	460b      	mov	r3, r1
 801650c:	4313      	orrs	r3, r2
 801650e:	d03f      	beq.n	8016590 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8016510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016518:	2b04      	cmp	r3, #4
 801651a:	d81e      	bhi.n	801655a <HAL_RCCEx_PeriphCLKConfig+0x562>
 801651c:	a201      	add	r2, pc, #4	; (adr r2, 8016524 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 801651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016522:	bf00      	nop
 8016524:	08016563 	.word	0x08016563
 8016528:	08016539 	.word	0x08016539
 801652c:	08016547 	.word	0x08016547
 8016530:	08016563 	.word	0x08016563
 8016534:	08016563 	.word	0x08016563
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8016538:	4b40      	ldr	r3, [pc, #256]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 801653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801653c:	4a3f      	ldr	r2, [pc, #252]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 801653e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016542:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8016544:	e00e      	b.n	8016564 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8016546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801654a:	332c      	adds	r3, #44	; 0x2c
 801654c:	4618      	mov	r0, r3
 801654e:	f002 f915 	bl	801877c <RCCEx_PLL3_Config>
 8016552:	4603      	mov	r3, r0
 8016554:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8016558:	e004      	b.n	8016564 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 801655a:	2301      	movs	r3, #1
 801655c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8016560:	e000      	b.n	8016564 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8016562:	bf00      	nop
    }
    if (ret == HAL_OK)
 8016564:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016568:	2b00      	cmp	r3, #0
 801656a:	d10d      	bne.n	8016588 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 801656c:	4b33      	ldr	r3, [pc, #204]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 801656e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8016572:	f023 0107 	bic.w	r1, r3, #7
 8016576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801657e:	4a2f      	ldr	r2, [pc, #188]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8016580:	430b      	orrs	r3, r1
 8016582:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8016586:	e003      	b.n	8016590 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016588:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801658c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8016590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016598:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801659c:	65bb      	str	r3, [r7, #88]	; 0x58
 801659e:	2300      	movs	r3, #0
 80165a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80165a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80165a6:	460b      	mov	r3, r1
 80165a8:	4313      	orrs	r3, r2
 80165aa:	d04d      	beq.n	8016648 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80165ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80165b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80165b8:	d028      	beq.n	801660c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80165ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80165be:	d821      	bhi.n	8016604 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80165c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80165c4:	d024      	beq.n	8016610 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80165c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80165ca:	d81b      	bhi.n	8016604 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80165cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80165d0:	d00e      	beq.n	80165f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80165d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80165d6:	d815      	bhi.n	8016604 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d01b      	beq.n	8016614 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80165dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80165e0:	d110      	bne.n	8016604 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80165e2:	4b16      	ldr	r3, [pc, #88]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80165e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165e6:	4a15      	ldr	r2, [pc, #84]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80165e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80165ec:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80165ee:	e012      	b.n	8016616 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80165f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80165f4:	332c      	adds	r3, #44	; 0x2c
 80165f6:	4618      	mov	r0, r3
 80165f8:	f002 f8c0 	bl	801877c <RCCEx_PLL3_Config>
 80165fc:	4603      	mov	r3, r0
 80165fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8016602:	e008      	b.n	8016616 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8016604:	2301      	movs	r3, #1
 8016606:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 801660a:	e004      	b.n	8016616 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 801660c:	bf00      	nop
 801660e:	e002      	b.n	8016616 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8016610:	bf00      	nop
 8016612:	e000      	b.n	8016616 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8016614:	bf00      	nop
    }
    if (ret == HAL_OK)
 8016616:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801661a:	2b00      	cmp	r3, #0
 801661c:	d110      	bne.n	8016640 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 801661e:	4b07      	ldr	r3, [pc, #28]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8016620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8016624:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8016628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801662c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016630:	4a02      	ldr	r2, [pc, #8]	; (801663c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8016632:	430b      	orrs	r3, r1
 8016634:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8016638:	e006      	b.n	8016648 <HAL_RCCEx_PeriphCLKConfig+0x650>
 801663a:	bf00      	nop
 801663c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016640:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016644:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8016648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016650:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8016654:	653b      	str	r3, [r7, #80]	; 0x50
 8016656:	2300      	movs	r3, #0
 8016658:	657b      	str	r3, [r7, #84]	; 0x54
 801665a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801665e:	460b      	mov	r3, r1
 8016660:	4313      	orrs	r3, r2
 8016662:	f000 80b5 	beq.w	80167d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8016666:	2300      	movs	r3, #0
 8016668:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801666c:	4b9d      	ldr	r3, [pc, #628]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801666e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016672:	f003 0304 	and.w	r3, r3, #4
 8016676:	2b00      	cmp	r3, #0
 8016678:	d113      	bne.n	80166a2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801667a:	4b9a      	ldr	r3, [pc, #616]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801667c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016680:	4a98      	ldr	r2, [pc, #608]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8016682:	f043 0304 	orr.w	r3, r3, #4
 8016686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801668a:	4b96      	ldr	r3, [pc, #600]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801668c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016690:	f003 0304 	and.w	r3, r3, #4
 8016694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 801669c:	2301      	movs	r3, #1
 801669e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80166a2:	4b91      	ldr	r3, [pc, #580]	; (80168e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80166a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166a6:	4a90      	ldr	r2, [pc, #576]	; (80168e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80166a8:	f043 0301 	orr.w	r3, r3, #1
 80166ac:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80166ae:	f7f9 ff5b 	bl	8010568 <HAL_GetTick>
 80166b2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80166b6:	e00b      	b.n	80166d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80166b8:	f7f9 ff56 	bl	8010568 <HAL_GetTick>
 80166bc:	4602      	mov	r2, r0
 80166be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80166c2:	1ad3      	subs	r3, r2, r3
 80166c4:	2b02      	cmp	r3, #2
 80166c6:	d903      	bls.n	80166d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80166c8:	2303      	movs	r3, #3
 80166ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80166ce:	e005      	b.n	80166dc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80166d0:	4b85      	ldr	r3, [pc, #532]	; (80168e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80166d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166d4:	f003 0301 	and.w	r3, r3, #1
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d0ed      	beq.n	80166b8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80166dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d165      	bne.n	80167b0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80166e4:	4b7f      	ldr	r3, [pc, #508]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80166e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80166ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80166ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80166f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d023      	beq.n	8016742 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80166fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80166fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8016702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016706:	4293      	cmp	r3, r2
 8016708:	d01b      	beq.n	8016742 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801670a:	4b76      	ldr	r3, [pc, #472]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801670c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016714:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8016718:	4b72      	ldr	r3, [pc, #456]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801671a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801671e:	4a71      	ldr	r2, [pc, #452]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8016720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016724:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8016728:	4b6e      	ldr	r3, [pc, #440]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801672a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801672e:	4a6d      	ldr	r2, [pc, #436]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8016730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016734:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8016738:	4a6a      	ldr	r2, [pc, #424]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801673e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8016742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016746:	f003 0301 	and.w	r3, r3, #1
 801674a:	2b00      	cmp	r3, #0
 801674c:	d019      	beq.n	8016782 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801674e:	f7f9 ff0b 	bl	8010568 <HAL_GetTick>
 8016752:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016756:	e00d      	b.n	8016774 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016758:	f7f9 ff06 	bl	8010568 <HAL_GetTick>
 801675c:	4602      	mov	r2, r0
 801675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016762:	1ad2      	subs	r2, r2, r3
 8016764:	f241 3388 	movw	r3, #5000	; 0x1388
 8016768:	429a      	cmp	r2, r3
 801676a:	d903      	bls.n	8016774 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 801676c:	2303      	movs	r3, #3
 801676e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8016772:	e006      	b.n	8016782 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016774:	4b5b      	ldr	r3, [pc, #364]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8016776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801677a:	f003 0302 	and.w	r3, r3, #2
 801677e:	2b00      	cmp	r3, #0
 8016780:	d0ea      	beq.n	8016758 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8016782:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016786:	2b00      	cmp	r3, #0
 8016788:	d10d      	bne.n	80167a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 801678a:	4b56      	ldr	r3, [pc, #344]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801678c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016790:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8016794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016798:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801679c:	4a51      	ldr	r2, [pc, #324]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801679e:	430b      	orrs	r3, r1
 80167a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80167a4:	e008      	b.n	80167b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80167a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80167aa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80167ae:	e003      	b.n	80167b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80167b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80167b4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80167b8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80167bc:	2b01      	cmp	r3, #1
 80167be:	d107      	bne.n	80167d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80167c0:	4b48      	ldr	r3, [pc, #288]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80167c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80167c6:	4a47      	ldr	r2, [pc, #284]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80167c8:	f023 0304 	bic.w	r3, r3, #4
 80167cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80167d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80167d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80167dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80167de:	2300      	movs	r3, #0
 80167e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80167e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80167e6:	460b      	mov	r3, r1
 80167e8:	4313      	orrs	r3, r2
 80167ea:	d042      	beq.n	8016872 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80167ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80167f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80167f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80167f8:	d022      	beq.n	8016840 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80167fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80167fe:	d81b      	bhi.n	8016838 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8016800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8016804:	d011      	beq.n	801682a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8016806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801680a:	d815      	bhi.n	8016838 <HAL_RCCEx_PeriphCLKConfig+0x840>
 801680c:	2b00      	cmp	r3, #0
 801680e:	d019      	beq.n	8016844 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8016810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8016814:	d110      	bne.n	8016838 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8016816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801681a:	3308      	adds	r3, #8
 801681c:	4618      	mov	r0, r3
 801681e:	f001 ff15 	bl	801864c <RCCEx_PLL2_Config>
 8016822:	4603      	mov	r3, r0
 8016824:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8016828:	e00d      	b.n	8016846 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801682a:	4b2e      	ldr	r3, [pc, #184]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801682e:	4a2d      	ldr	r2, [pc, #180]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8016830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016834:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8016836:	e006      	b.n	8016846 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8016838:	2301      	movs	r3, #1
 801683a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 801683e:	e002      	b.n	8016846 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8016840:	bf00      	nop
 8016842:	e000      	b.n	8016846 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8016844:	bf00      	nop
    }
    if (ret == HAL_OK)
 8016846:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801684a:	2b00      	cmp	r3, #0
 801684c:	d10d      	bne.n	801686a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 801684e:	4b25      	ldr	r3, [pc, #148]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8016850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016854:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8016858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801685c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016860:	4a20      	ldr	r2, [pc, #128]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8016862:	430b      	orrs	r3, r1
 8016864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8016868:	e003      	b.n	8016872 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801686a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801686e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8016872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801687e:	643b      	str	r3, [r7, #64]	; 0x40
 8016880:	2300      	movs	r3, #0
 8016882:	647b      	str	r3, [r7, #68]	; 0x44
 8016884:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8016888:	460b      	mov	r3, r1
 801688a:	4313      	orrs	r3, r2
 801688c:	d032      	beq.n	80168f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 801688e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801689a:	d00b      	beq.n	80168b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 801689c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80168a0:	d804      	bhi.n	80168ac <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d008      	beq.n	80168b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80168a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80168aa:	d007      	beq.n	80168bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80168ac:	2301      	movs	r3, #1
 80168ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80168b2:	e004      	b.n	80168be <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80168b4:	bf00      	nop
 80168b6:	e002      	b.n	80168be <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80168b8:	bf00      	nop
 80168ba:	e000      	b.n	80168be <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80168bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80168be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d112      	bne.n	80168ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80168c6:	4b07      	ldr	r3, [pc, #28]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80168c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80168cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80168d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80168d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80168d8:	4a02      	ldr	r2, [pc, #8]	; (80168e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80168da:	430b      	orrs	r3, r1
 80168dc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80168e0:	e008      	b.n	80168f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80168e2:	bf00      	nop
 80168e4:	46020c00 	.word	0x46020c00
 80168e8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80168ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80168f0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80168f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80168f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168fc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8016900:	63bb      	str	r3, [r7, #56]	; 0x38
 8016902:	2300      	movs	r3, #0
 8016904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016906:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801690a:	460b      	mov	r3, r1
 801690c:	4313      	orrs	r3, r2
 801690e:	d00c      	beq.n	801692a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8016910:	4b98      	ldr	r3, [pc, #608]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016912:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8016916:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 801691a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801691e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016922:	4a94      	ldr	r2, [pc, #592]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016924:	430b      	orrs	r3, r1
 8016926:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 801692a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016932:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8016936:	633b      	str	r3, [r7, #48]	; 0x30
 8016938:	2300      	movs	r3, #0
 801693a:	637b      	str	r3, [r7, #52]	; 0x34
 801693c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8016940:	460b      	mov	r3, r1
 8016942:	4313      	orrs	r3, r2
 8016944:	d019      	beq.n	801697a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8016946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801694a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801694e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016952:	d105      	bne.n	8016960 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8016954:	4b87      	ldr	r3, [pc, #540]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016958:	4a86      	ldr	r2, [pc, #536]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 801695a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801695e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8016960:	4b84      	ldr	r3, [pc, #528]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8016966:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 801696a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801696e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016972:	4a80      	ldr	r2, [pc, #512]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016974:	430b      	orrs	r3, r1
 8016976:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 801697a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016982:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8016986:	62bb      	str	r3, [r7, #40]	; 0x28
 8016988:	2300      	movs	r3, #0
 801698a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801698c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8016990:	460b      	mov	r3, r1
 8016992:	4313      	orrs	r3, r2
 8016994:	d00c      	beq.n	80169b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8016996:	4b77      	ldr	r3, [pc, #476]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801699c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80169a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80169a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80169a8:	4972      	ldr	r1, [pc, #456]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80169aa:	4313      	orrs	r3, r2
 80169ac:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80169b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80169b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80169bc:	623b      	str	r3, [r7, #32]
 80169be:	2300      	movs	r3, #0
 80169c0:	627b      	str	r3, [r7, #36]	; 0x24
 80169c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80169c6:	460b      	mov	r3, r1
 80169c8:	4313      	orrs	r3, r2
 80169ca:	d00c      	beq.n	80169e6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80169cc:	4b69      	ldr	r3, [pc, #420]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80169ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80169d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80169d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80169da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80169de:	4965      	ldr	r1, [pc, #404]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80169e0:	4313      	orrs	r3, r2
 80169e2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80169e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80169ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ee:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80169f2:	61bb      	str	r3, [r7, #24]
 80169f4:	2300      	movs	r3, #0
 80169f6:	61fb      	str	r3, [r7, #28]
 80169f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80169fc:	460b      	mov	r3, r1
 80169fe:	4313      	orrs	r3, r2
 8016a00:	d00c      	beq.n	8016a1c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8016a02:	4b5c      	ldr	r3, [pc, #368]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8016a08:	f023 0218 	bic.w	r2, r3, #24
 8016a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016a14:	4957      	ldr	r1, [pc, #348]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016a16:	4313      	orrs	r3, r2
 8016a18:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8016a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a24:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8016a28:	613b      	str	r3, [r7, #16]
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	617b      	str	r3, [r7, #20]
 8016a2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8016a32:	460b      	mov	r3, r1
 8016a34:	4313      	orrs	r3, r2
 8016a36:	d032      	beq.n	8016a9e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8016a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016a44:	d105      	bne.n	8016a52 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016a46:	4b4b      	ldr	r3, [pc, #300]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a4a:	4a4a      	ldr	r2, [pc, #296]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016a50:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8016a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016a5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8016a5e:	d108      	bne.n	8016a72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8016a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a64:	3308      	adds	r3, #8
 8016a66:	4618      	mov	r0, r3
 8016a68:	f001 fdf0 	bl	801864c <RCCEx_PLL2_Config>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8016a72:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d10d      	bne.n	8016a96 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8016a7a:	4b3e      	ldr	r3, [pc, #248]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016a7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8016a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8016a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016a8c:	4939      	ldr	r1, [pc, #228]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016a8e:	4313      	orrs	r3, r2
 8016a90:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8016a94:	e003      	b.n	8016a9e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016a96:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016a9a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8016a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8016aaa:	60bb      	str	r3, [r7, #8]
 8016aac:	2300      	movs	r3, #0
 8016aae:	60fb      	str	r3, [r7, #12]
 8016ab0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016ab4:	460b      	mov	r3, r1
 8016ab6:	4313      	orrs	r3, r2
 8016ab8:	d03a      	beq.n	8016b30 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8016aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016ac6:	d00e      	beq.n	8016ae6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8016ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016acc:	d815      	bhi.n	8016afa <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d017      	beq.n	8016b02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8016ad2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016ad6:	d110      	bne.n	8016afa <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016ad8:	4b26      	ldr	r3, [pc, #152]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016adc:	4a25      	ldr	r2, [pc, #148]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016ae2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8016ae4:	e00e      	b.n	8016b04 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8016ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016aea:	3308      	adds	r3, #8
 8016aec:	4618      	mov	r0, r3
 8016aee:	f001 fdad 	bl	801864c <RCCEx_PLL2_Config>
 8016af2:	4603      	mov	r3, r0
 8016af4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8016af8:	e004      	b.n	8016b04 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8016afa:	2301      	movs	r3, #1
 8016afc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8016b00:	e000      	b.n	8016b04 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8016b02:	bf00      	nop
    }
    if (ret == HAL_OK)
 8016b04:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d10d      	bne.n	8016b28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8016b0c:	4b19      	ldr	r3, [pc, #100]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016b12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8016b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016b1e:	4915      	ldr	r1, [pc, #84]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016b20:	4313      	orrs	r3, r2
 8016b22:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8016b26:	e003      	b.n	8016b30 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016b28:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016b2c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8016b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b38:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8016b3c:	603b      	str	r3, [r7, #0]
 8016b3e:	2300      	movs	r3, #0
 8016b40:	607b      	str	r3, [r7, #4]
 8016b42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016b46:	460b      	mov	r3, r1
 8016b48:	4313      	orrs	r3, r2
 8016b4a:	d00c      	beq.n	8016b66 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8016b4c:	4b09      	ldr	r3, [pc, #36]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8016b52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8016b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016b5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016b5e:	4905      	ldr	r1, [pc, #20]	; (8016b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8016b60:	4313      	orrs	r3, r2
 8016b62:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8016b66:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	37e8      	adds	r7, #232	; 0xe8
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b74:	46020c00 	.word	0x46020c00

08016b78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8016b78:	b480      	push	{r7}
 8016b7a:	b089      	sub	sp, #36	; 0x24
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8016b80:	4bac      	ldr	r3, [pc, #688]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b88:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8016b8a:	4baa      	ldr	r3, [pc, #680]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b8e:	f003 0303 	and.w	r3, r3, #3
 8016b92:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8016b94:	4ba7      	ldr	r3, [pc, #668]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b98:	0a1b      	lsrs	r3, r3, #8
 8016b9a:	f003 030f 	and.w	r3, r3, #15
 8016b9e:	3301      	adds	r3, #1
 8016ba0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8016ba2:	4ba4      	ldr	r3, [pc, #656]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ba6:	f003 0310 	and.w	r3, r3, #16
 8016baa:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8016bac:	4ba1      	ldr	r3, [pc, #644]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bb0:	08db      	lsrs	r3, r3, #3
 8016bb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016bb6:	68fa      	ldr	r2, [r7, #12]
 8016bb8:	fb02 f303 	mul.w	r3, r2, r3
 8016bbc:	ee07 3a90 	vmov	s15, r3
 8016bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016bc4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	f000 8123 	beq.w	8016e16 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8016bd0:	697b      	ldr	r3, [r7, #20]
 8016bd2:	2b03      	cmp	r3, #3
 8016bd4:	d062      	beq.n	8016c9c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8016bd6:	697b      	ldr	r3, [r7, #20]
 8016bd8:	2b03      	cmp	r3, #3
 8016bda:	f200 8081 	bhi.w	8016ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8016bde:	697b      	ldr	r3, [r7, #20]
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	d024      	beq.n	8016c2e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	2b02      	cmp	r3, #2
 8016be8:	d17a      	bne.n	8016ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	ee07 3a90 	vmov	s15, r3
 8016bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016bf4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8016e38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8016bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bfc:	4b8d      	ldr	r3, [pc, #564]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c04:	ee07 3a90 	vmov	s15, r3
 8016c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8016c0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8016c10:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8016e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8016c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8016c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8016c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8016c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016c2c:	e08f      	b.n	8016d4e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8016c2e:	4b81      	ldr	r3, [pc, #516]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016c30:	689b      	ldr	r3, [r3, #8]
 8016c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d005      	beq.n	8016c46 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8016c3a:	4b7e      	ldr	r3, [pc, #504]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016c3c:	689b      	ldr	r3, [r3, #8]
 8016c3e:	0f1b      	lsrs	r3, r3, #28
 8016c40:	f003 030f 	and.w	r3, r3, #15
 8016c44:	e006      	b.n	8016c54 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8016c46:	4b7b      	ldr	r3, [pc, #492]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8016c4c:	041b      	lsls	r3, r3, #16
 8016c4e:	0f1b      	lsrs	r3, r3, #28
 8016c50:	f003 030f 	and.w	r3, r3, #15
 8016c54:	4a7a      	ldr	r2, [pc, #488]	; (8016e40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8016c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c5a:	ee07 3a90 	vmov	s15, r3
 8016c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	ee07 3a90 	vmov	s15, r3
 8016c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016c70:	69bb      	ldr	r3, [r7, #24]
 8016c72:	ee07 3a90 	vmov	s15, r3
 8016c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8016c7e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8016e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8016c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8016c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016c9a:	e058      	b.n	8016d4e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8016c9c:	693b      	ldr	r3, [r7, #16]
 8016c9e:	ee07 3a90 	vmov	s15, r3
 8016ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ca6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8016e38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8016caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016cae:	4b61      	ldr	r3, [pc, #388]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016cb6:	ee07 3a90 	vmov	s15, r3
 8016cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8016cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8016cc2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8016e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8016cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8016cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8016cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8016cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016cde:	e036      	b.n	8016d4e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8016ce0:	4b54      	ldr	r3, [pc, #336]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016ce2:	689b      	ldr	r3, [r3, #8]
 8016ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d005      	beq.n	8016cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8016cec:	4b51      	ldr	r3, [pc, #324]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016cee:	689b      	ldr	r3, [r3, #8]
 8016cf0:	0f1b      	lsrs	r3, r3, #28
 8016cf2:	f003 030f 	and.w	r3, r3, #15
 8016cf6:	e006      	b.n	8016d06 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8016cf8:	4b4e      	ldr	r3, [pc, #312]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8016cfe:	041b      	lsls	r3, r3, #16
 8016d00:	0f1b      	lsrs	r3, r3, #28
 8016d02:	f003 030f 	and.w	r3, r3, #15
 8016d06:	4a4e      	ldr	r2, [pc, #312]	; (8016e40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8016d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d0c:	ee07 3a90 	vmov	s15, r3
 8016d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	ee07 3a90 	vmov	s15, r3
 8016d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	ee07 3a90 	vmov	s15, r3
 8016d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016d2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8016d30:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8016d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8016d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016d4c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8016d4e:	4b39      	ldr	r3, [pc, #228]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d017      	beq.n	8016d8a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8016d5a:	4b36      	ldr	r3, [pc, #216]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d5e:	0a5b      	lsrs	r3, r3, #9
 8016d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016d64:	ee07 3a90 	vmov	s15, r3
 8016d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8016d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d70:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8016d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8016d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016d80:	ee17 2a90 	vmov	r2, s15
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	601a      	str	r2, [r3, #0]
 8016d88:	e002      	b.n	8016d90 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8016d90:	4b28      	ldr	r3, [pc, #160]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d017      	beq.n	8016dcc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8016d9c:	4b25      	ldr	r3, [pc, #148]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016da0:	0c1b      	lsrs	r3, r3, #16
 8016da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016da6:	ee07 3a90 	vmov	s15, r3
 8016daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8016dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016db2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8016db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8016dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016dc2:	ee17 2a90 	vmov	r2, s15
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	605a      	str	r2, [r3, #4]
 8016dca:	e002      	b.n	8016dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8016dd2:	4b18      	ldr	r3, [pc, #96]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d017      	beq.n	8016e0e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8016dde:	4b15      	ldr	r3, [pc, #84]	; (8016e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8016de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016de2:	0e1b      	lsrs	r3, r3, #24
 8016de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016de8:	ee07 3a90 	vmov	s15, r3
 8016dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8016df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016df4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8016df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8016dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016e04:	ee17 2a90 	vmov	r2, s15
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8016e0c:	e00c      	b.n	8016e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	2200      	movs	r2, #0
 8016e12:	609a      	str	r2, [r3, #8]
}
 8016e14:	e008      	b.n	8016e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2200      	movs	r2, #0
 8016e1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	2200      	movs	r2, #0
 8016e20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	2200      	movs	r2, #0
 8016e26:	609a      	str	r2, [r3, #8]
}
 8016e28:	bf00      	nop
 8016e2a:	3724      	adds	r7, #36	; 0x24
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr
 8016e34:	46020c00 	.word	0x46020c00
 8016e38:	4b742400 	.word	0x4b742400
 8016e3c:	46000000 	.word	0x46000000
 8016e40:	08023b18 	.word	0x08023b18

08016e44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8016e44:	b480      	push	{r7}
 8016e46:	b089      	sub	sp, #36	; 0x24
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8016e4c:	4bac      	ldr	r3, [pc, #688]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e54:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8016e56:	4baa      	ldr	r3, [pc, #680]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e5a:	f003 0303 	and.w	r3, r3, #3
 8016e5e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8016e60:	4ba7      	ldr	r3, [pc, #668]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e64:	0a1b      	lsrs	r3, r3, #8
 8016e66:	f003 030f 	and.w	r3, r3, #15
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8016e6e:	4ba4      	ldr	r3, [pc, #656]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e72:	f003 0310 	and.w	r3, r3, #16
 8016e76:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8016e78:	4ba1      	ldr	r3, [pc, #644]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e7c:	08db      	lsrs	r3, r3, #3
 8016e7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e82:	68fa      	ldr	r2, [r7, #12]
 8016e84:	fb02 f303 	mul.w	r3, r2, r3
 8016e88:	ee07 3a90 	vmov	s15, r3
 8016e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e90:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	f000 8123 	beq.w	80170e2 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	2b03      	cmp	r3, #3
 8016ea0:	d062      	beq.n	8016f68 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8016ea2:	697b      	ldr	r3, [r7, #20]
 8016ea4:	2b03      	cmp	r3, #3
 8016ea6:	f200 8081 	bhi.w	8016fac <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d024      	beq.n	8016efa <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	2b02      	cmp	r3, #2
 8016eb4:	d17a      	bne.n	8016fac <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	ee07 3a90 	vmov	s15, r3
 8016ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ec0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8017104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8016ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016ec8:	4b8d      	ldr	r3, [pc, #564]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ed0:	ee07 3a90 	vmov	s15, r3
 8016ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8016ed8:	ed97 6a02 	vldr	s12, [r7, #8]
 8016edc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8017108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8016ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8016ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8016ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8016ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ef4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016ef8:	e08f      	b.n	801701a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8016efa:	4b81      	ldr	r3, [pc, #516]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016efc:	689b      	ldr	r3, [r3, #8]
 8016efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d005      	beq.n	8016f12 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8016f06:	4b7e      	ldr	r3, [pc, #504]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016f08:	689b      	ldr	r3, [r3, #8]
 8016f0a:	0f1b      	lsrs	r3, r3, #28
 8016f0c:	f003 030f 	and.w	r3, r3, #15
 8016f10:	e006      	b.n	8016f20 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8016f12:	4b7b      	ldr	r3, [pc, #492]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8016f18:	041b      	lsls	r3, r3, #16
 8016f1a:	0f1b      	lsrs	r3, r3, #28
 8016f1c:	f003 030f 	and.w	r3, r3, #15
 8016f20:	4a7a      	ldr	r2, [pc, #488]	; (801710c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8016f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f26:	ee07 3a90 	vmov	s15, r3
 8016f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016f2e:	693b      	ldr	r3, [r7, #16]
 8016f30:	ee07 3a90 	vmov	s15, r3
 8016f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016f3c:	69bb      	ldr	r3, [r7, #24]
 8016f3e:	ee07 3a90 	vmov	s15, r3
 8016f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8016f4a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8017108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8016f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8016f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016f66:	e058      	b.n	801701a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	ee07 3a90 	vmov	s15, r3
 8016f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f72:	eddf 6a64 	vldr	s13, [pc, #400]	; 8017104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8016f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016f7a:	4b61      	ldr	r3, [pc, #388]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f82:	ee07 3a90 	vmov	s15, r3
 8016f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8016f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8016f8e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8017108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8016f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8016f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8016f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8016fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016faa:	e036      	b.n	801701a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8016fac:	4b54      	ldr	r3, [pc, #336]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016fae:	689b      	ldr	r3, [r3, #8]
 8016fb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d005      	beq.n	8016fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8016fb8:	4b51      	ldr	r3, [pc, #324]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016fba:	689b      	ldr	r3, [r3, #8]
 8016fbc:	0f1b      	lsrs	r3, r3, #28
 8016fbe:	f003 030f 	and.w	r3, r3, #15
 8016fc2:	e006      	b.n	8016fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8016fc4:	4b4e      	ldr	r3, [pc, #312]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8016fc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8016fca:	041b      	lsls	r3, r3, #16
 8016fcc:	0f1b      	lsrs	r3, r3, #28
 8016fce:	f003 030f 	and.w	r3, r3, #15
 8016fd2:	4a4e      	ldr	r2, [pc, #312]	; (801710c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8016fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016fd8:	ee07 3a90 	vmov	s15, r3
 8016fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	ee07 3a90 	vmov	s15, r3
 8016fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	ee07 3a90 	vmov	s15, r3
 8016ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016ff8:	ed97 6a02 	vldr	s12, [r7, #8]
 8016ffc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8017108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8017000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801700c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8017010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017018:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 801701a:	4b39      	ldr	r3, [pc, #228]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 801701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801701e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017022:	2b00      	cmp	r3, #0
 8017024:	d017      	beq.n	8017056 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8017026:	4b36      	ldr	r3, [pc, #216]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8017028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801702a:	0a5b      	lsrs	r3, r3, #9
 801702c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017030:	ee07 3a90 	vmov	s15, r3
 8017034:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8017038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801703c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8017040:	edd7 6a07 	vldr	s13, [r7, #28]
 8017044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801704c:	ee17 2a90 	vmov	r2, s15
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	601a      	str	r2, [r3, #0]
 8017054:	e002      	b.n	801705c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2200      	movs	r2, #0
 801705a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 801705c:	4b28      	ldr	r3, [pc, #160]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 801705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017064:	2b00      	cmp	r3, #0
 8017066:	d017      	beq.n	8017098 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8017068:	4b25      	ldr	r3, [pc, #148]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 801706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801706c:	0c1b      	lsrs	r3, r3, #16
 801706e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017072:	ee07 3a90 	vmov	s15, r3
 8017076:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 801707a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801707e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8017082:	edd7 6a07 	vldr	s13, [r7, #28]
 8017086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801708e:	ee17 2a90 	vmov	r2, s15
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	605a      	str	r2, [r3, #4]
 8017096:	e002      	b.n	801709e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	2200      	movs	r2, #0
 801709c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 801709e:	4b18      	ldr	r3, [pc, #96]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80170a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d017      	beq.n	80170da <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80170aa:	4b15      	ldr	r3, [pc, #84]	; (8017100 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80170ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170ae:	0e1b      	lsrs	r3, r3, #24
 80170b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170b4:	ee07 3a90 	vmov	s15, r3
 80170b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80170bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80170c0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80170c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80170c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80170cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80170d0:	ee17 2a90 	vmov	r2, s15
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80170d8:	e00c      	b.n	80170f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2200      	movs	r2, #0
 80170de:	609a      	str	r2, [r3, #8]
}
 80170e0:	e008      	b.n	80170f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2200      	movs	r2, #0
 80170e6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	2200      	movs	r2, #0
 80170ec:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2200      	movs	r2, #0
 80170f2:	609a      	str	r2, [r3, #8]
}
 80170f4:	bf00      	nop
 80170f6:	3724      	adds	r7, #36	; 0x24
 80170f8:	46bd      	mov	sp, r7
 80170fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fe:	4770      	bx	lr
 8017100:	46020c00 	.word	0x46020c00
 8017104:	4b742400 	.word	0x4b742400
 8017108:	46000000 	.word	0x46000000
 801710c:	08023b18 	.word	0x08023b18

08017110 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8017110:	b480      	push	{r7}
 8017112:	b089      	sub	sp, #36	; 0x24
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8017118:	4bac      	ldr	r3, [pc, #688]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 801711a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801711c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017120:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8017122:	4baa      	ldr	r3, [pc, #680]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8017124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017126:	f003 0303 	and.w	r3, r3, #3
 801712a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 801712c:	4ba7      	ldr	r3, [pc, #668]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 801712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017130:	0a1b      	lsrs	r3, r3, #8
 8017132:	f003 030f 	and.w	r3, r3, #15
 8017136:	3301      	adds	r3, #1
 8017138:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 801713a:	4ba4      	ldr	r3, [pc, #656]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 801713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801713e:	f003 0310 	and.w	r3, r3, #16
 8017142:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8017144:	4ba1      	ldr	r3, [pc, #644]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8017146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017148:	08db      	lsrs	r3, r3, #3
 801714a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801714e:	68fa      	ldr	r2, [r7, #12]
 8017150:	fb02 f303 	mul.w	r3, r2, r3
 8017154:	ee07 3a90 	vmov	s15, r3
 8017158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801715c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	2b00      	cmp	r3, #0
 8017164:	f000 8123 	beq.w	80173ae <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	2b03      	cmp	r3, #3
 801716c:	d062      	beq.n	8017234 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	2b03      	cmp	r3, #3
 8017172:	f200 8081 	bhi.w	8017278 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8017176:	697b      	ldr	r3, [r7, #20]
 8017178:	2b01      	cmp	r3, #1
 801717a:	d024      	beq.n	80171c6 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	2b02      	cmp	r3, #2
 8017180:	d17a      	bne.n	8017278 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	ee07 3a90 	vmov	s15, r3
 8017188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801718c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80173d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8017190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017194:	4b8d      	ldr	r3, [pc, #564]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8017196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801719c:	ee07 3a90 	vmov	s15, r3
 80171a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80171a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80171a8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80173d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80171ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80171b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80171b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80171b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80171bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80171c0:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80171c4:	e08f      	b.n	80172e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80171c6:	4b81      	ldr	r3, [pc, #516]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80171c8:	689b      	ldr	r3, [r3, #8]
 80171ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d005      	beq.n	80171de <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80171d2:	4b7e      	ldr	r3, [pc, #504]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80171d4:	689b      	ldr	r3, [r3, #8]
 80171d6:	0f1b      	lsrs	r3, r3, #28
 80171d8:	f003 030f 	and.w	r3, r3, #15
 80171dc:	e006      	b.n	80171ec <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80171de:	4b7b      	ldr	r3, [pc, #492]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80171e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80171e4:	041b      	lsls	r3, r3, #16
 80171e6:	0f1b      	lsrs	r3, r3, #28
 80171e8:	f003 030f 	and.w	r3, r3, #15
 80171ec:	4a7a      	ldr	r2, [pc, #488]	; (80173d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80171ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80171f2:	ee07 3a90 	vmov	s15, r3
 80171f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	ee07 3a90 	vmov	s15, r3
 8017200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8017208:	69bb      	ldr	r3, [r7, #24]
 801720a:	ee07 3a90 	vmov	s15, r3
 801720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017212:	ed97 6a02 	vldr	s12, [r7, #8]
 8017216:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80173d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 801721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017226:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 801722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801722e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017232:	e058      	b.n	80172e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	ee07 3a90 	vmov	s15, r3
 801723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801723e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80173d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8017242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017246:	4b61      	ldr	r3, [pc, #388]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8017248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801724e:	ee07 3a90 	vmov	s15, r3
 8017252:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8017256:	ed97 6a02 	vldr	s12, [r7, #8]
 801725a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80173d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 801725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8017262:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8017266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 801726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017276:	e036      	b.n	80172e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8017278:	4b54      	ldr	r3, [pc, #336]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 801727a:	689b      	ldr	r3, [r3, #8]
 801727c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017280:	2b00      	cmp	r3, #0
 8017282:	d005      	beq.n	8017290 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8017284:	4b51      	ldr	r3, [pc, #324]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8017286:	689b      	ldr	r3, [r3, #8]
 8017288:	0f1b      	lsrs	r3, r3, #28
 801728a:	f003 030f 	and.w	r3, r3, #15
 801728e:	e006      	b.n	801729e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8017290:	4b4e      	ldr	r3, [pc, #312]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8017292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017296:	041b      	lsls	r3, r3, #16
 8017298:	0f1b      	lsrs	r3, r3, #28
 801729a:	f003 030f 	and.w	r3, r3, #15
 801729e:	4a4e      	ldr	r2, [pc, #312]	; (80173d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80172a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172a4:	ee07 3a90 	vmov	s15, r3
 80172a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80172ac:	693b      	ldr	r3, [r7, #16]
 80172ae:	ee07 3a90 	vmov	s15, r3
 80172b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80172b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80172ba:	69bb      	ldr	r3, [r7, #24]
 80172bc:	ee07 3a90 	vmov	s15, r3
 80172c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80172c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80172c8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80173d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80172cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80172d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80172d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80172d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80172dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80172e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80172e4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80172e6:	4b39      	ldr	r3, [pc, #228]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80172e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d017      	beq.n	8017322 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80172f2:	4b36      	ldr	r3, [pc, #216]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80172f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172f6:	0a5b      	lsrs	r3, r3, #9
 80172f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80172fc:	ee07 3a90 	vmov	s15, r3
 8017300:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8017304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017308:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801730c:	edd7 6a07 	vldr	s13, [r7, #28]
 8017310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017318:	ee17 2a90 	vmov	r2, s15
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	601a      	str	r2, [r3, #0]
 8017320:	e002      	b.n	8017328 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2200      	movs	r2, #0
 8017326:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8017328:	4b28      	ldr	r3, [pc, #160]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 801732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801732c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017330:	2b00      	cmp	r3, #0
 8017332:	d017      	beq.n	8017364 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8017334:	4b25      	ldr	r3, [pc, #148]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8017336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017338:	0c1b      	lsrs	r3, r3, #16
 801733a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801733e:	ee07 3a90 	vmov	s15, r3
 8017342:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8017346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801734a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801734e:	edd7 6a07 	vldr	s13, [r7, #28]
 8017352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801735a:	ee17 2a90 	vmov	r2, s15
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	605a      	str	r2, [r3, #4]
 8017362:	e002      	b.n	801736a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2200      	movs	r2, #0
 8017368:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 801736a:	4b18      	ldr	r3, [pc, #96]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 801736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801736e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017372:	2b00      	cmp	r3, #0
 8017374:	d017      	beq.n	80173a6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8017376:	4b15      	ldr	r3, [pc, #84]	; (80173cc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8017378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801737a:	0e1b      	lsrs	r3, r3, #24
 801737c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017380:	ee07 3a90 	vmov	s15, r3
 8017384:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8017388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801738c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8017390:	edd7 6a07 	vldr	s13, [r7, #28]
 8017394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801739c:	ee17 2a90 	vmov	r2, s15
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80173a4:	e00c      	b.n	80173c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	2200      	movs	r2, #0
 80173aa:	609a      	str	r2, [r3, #8]
}
 80173ac:	e008      	b.n	80173c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2200      	movs	r2, #0
 80173b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	2200      	movs	r2, #0
 80173b8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	2200      	movs	r2, #0
 80173be:	609a      	str	r2, [r3, #8]
}
 80173c0:	bf00      	nop
 80173c2:	3724      	adds	r7, #36	; 0x24
 80173c4:	46bd      	mov	sp, r7
 80173c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ca:	4770      	bx	lr
 80173cc:	46020c00 	.word	0x46020c00
 80173d0:	4b742400 	.word	0x4b742400
 80173d4:	46000000 	.word	0x46000000
 80173d8:	08023b18 	.word	0x08023b18

080173dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b08e      	sub	sp, #56	; 0x38
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80173e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80173ea:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80173ee:	430b      	orrs	r3, r1
 80173f0:	d145      	bne.n	801747e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80173f2:	4ba7      	ldr	r3, [pc, #668]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80173f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80173f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80173fc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80173fe:	4ba4      	ldr	r3, [pc, #656]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8017400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017404:	f003 0302 	and.w	r3, r3, #2
 8017408:	2b02      	cmp	r3, #2
 801740a:	d108      	bne.n	801741e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 801740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801740e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017412:	d104      	bne.n	801741e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8017414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017418:	637b      	str	r3, [r7, #52]	; 0x34
 801741a:	f001 b8fc 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 801741e:	4b9c      	ldr	r3, [pc, #624]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8017420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801742c:	d114      	bne.n	8017458 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 801742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017434:	d110      	bne.n	8017458 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8017436:	4b96      	ldr	r3, [pc, #600]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8017438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801743c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017444:	d103      	bne.n	801744e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8017446:	23fa      	movs	r3, #250	; 0xfa
 8017448:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801744a:	f001 b8e4 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 801744e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8017452:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8017454:	f001 b8df 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8017458:	4b8d      	ldr	r3, [pc, #564]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017464:	d107      	bne.n	8017476 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8017466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801746c:	d103      	bne.n	8017476 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 801746e:	4b89      	ldr	r3, [pc, #548]	; (8017694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8017470:	637b      	str	r3, [r7, #52]	; 0x34
 8017472:	f001 b8d0 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8017476:	2300      	movs	r3, #0
 8017478:	637b      	str	r3, [r7, #52]	; 0x34
 801747a:	f001 b8cc 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801747e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017482:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8017486:	430b      	orrs	r3, r1
 8017488:	d151      	bne.n	801752e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 801748a:	4b81      	ldr	r3, [pc, #516]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 801748c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8017490:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8017494:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8017496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017498:	2b80      	cmp	r3, #128	; 0x80
 801749a:	d035      	beq.n	8017508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 801749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801749e:	2b80      	cmp	r3, #128	; 0x80
 80174a0:	d841      	bhi.n	8017526 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80174a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a4:	2b60      	cmp	r3, #96	; 0x60
 80174a6:	d02a      	beq.n	80174fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80174a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174aa:	2b60      	cmp	r3, #96	; 0x60
 80174ac:	d83b      	bhi.n	8017526 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80174ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b0:	2b40      	cmp	r3, #64	; 0x40
 80174b2:	d009      	beq.n	80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80174b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b6:	2b40      	cmp	r3, #64	; 0x40
 80174b8:	d835      	bhi.n	8017526 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80174ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d00c      	beq.n	80174da <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80174c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c2:	2b20      	cmp	r3, #32
 80174c4:	d012      	beq.n	80174ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80174c6:	e02e      	b.n	8017526 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80174c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80174cc:	4618      	mov	r0, r3
 80174ce:	f7ff fb53 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80174d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80174d6:	f001 b89e 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80174da:	f107 0318 	add.w	r3, r7, #24
 80174de:	4618      	mov	r0, r3
 80174e0:	f7ff fcb0 	bl	8016e44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80174e4:	69bb      	ldr	r3, [r7, #24]
 80174e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80174e8:	f001 b895 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80174ec:	f107 030c 	add.w	r3, r7, #12
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7ff fe0d 	bl	8017110 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80174fa:	f001 b88c 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80174fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8017502:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017504:	f001 b887 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017508:	4b61      	ldr	r3, [pc, #388]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017514:	d103      	bne.n	801751e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8017516:	4b60      	ldr	r3, [pc, #384]	; (8017698 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8017518:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801751a:	f001 b87c 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 801751e:	2300      	movs	r3, #0
 8017520:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017522:	f001 b878 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8017526:	2300      	movs	r3, #0
 8017528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801752a:	f001 b874 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 801752e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017532:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8017536:	430b      	orrs	r3, r1
 8017538:	d158      	bne.n	80175ec <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 801753a:	4b55      	ldr	r3, [pc, #340]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 801753c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8017540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017544:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8017546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801754c:	d03b      	beq.n	80175c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 801754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017554:	d846      	bhi.n	80175e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8017556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801755c:	d02e      	beq.n	80175bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 801755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017564:	d83e      	bhi.n	80175e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8017566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801756c:	d00b      	beq.n	8017586 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 801756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017574:	d836      	bhi.n	80175e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8017576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017578:	2b00      	cmp	r3, #0
 801757a:	d00d      	beq.n	8017598 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 801757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801757e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017582:	d012      	beq.n	80175aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8017584:	e02e      	b.n	80175e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801758a:	4618      	mov	r0, r3
 801758c:	f7ff faf4 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8017590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017594:	f001 b83f 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017598:	f107 0318 	add.w	r3, r7, #24
 801759c:	4618      	mov	r0, r3
 801759e:	f7ff fc51 	bl	8016e44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80175a2:	69bb      	ldr	r3, [r7, #24]
 80175a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80175a6:	f001 b836 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80175aa:	f107 030c 	add.w	r3, r7, #12
 80175ae:	4618      	mov	r0, r3
 80175b0:	f7ff fdae 	bl	8017110 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80175b8:	f001 b82d 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80175bc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80175c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80175c2:	f001 b828 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80175c6:	4b32      	ldr	r3, [pc, #200]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80175ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80175d2:	d103      	bne.n	80175dc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80175d4:	4b30      	ldr	r3, [pc, #192]	; (8017698 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80175d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80175d8:	f001 b81d 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80175dc:	2300      	movs	r3, #0
 80175de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80175e0:	f001 b819 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80175e4:	2300      	movs	r3, #0
 80175e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80175e8:	f001 b815 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80175ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80175f0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80175f4:	430b      	orrs	r3, r1
 80175f6:	d126      	bne.n	8017646 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80175f8:	4b25      	ldr	r3, [pc, #148]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80175fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80175fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017602:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8017604:	4b22      	ldr	r3, [pc, #136]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801760c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017610:	d106      	bne.n	8017620 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8017612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017614:	2b00      	cmp	r3, #0
 8017616:	d103      	bne.n	8017620 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8017618:	4b1f      	ldr	r3, [pc, #124]	; (8017698 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 801761a:	637b      	str	r3, [r7, #52]	; 0x34
 801761c:	f000 bffb 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8017620:	4b1b      	ldr	r3, [pc, #108]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801762c:	d107      	bne.n	801763e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 801762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017634:	d103      	bne.n	801763e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8017636:	4b19      	ldr	r3, [pc, #100]	; (801769c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8017638:	637b      	str	r3, [r7, #52]	; 0x34
 801763a:	f000 bfec 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 801763e:	2300      	movs	r3, #0
 8017640:	637b      	str	r3, [r7, #52]	; 0x34
 8017642:	f000 bfe8 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8017646:	e9d7 2300 	ldrd	r2, r3, [r7]
 801764a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 801764e:	430b      	orrs	r3, r1
 8017650:	d164      	bne.n	801771c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8017652:	4b0f      	ldr	r3, [pc, #60]	; (8017690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8017654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017658:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 801765c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 801765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017660:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8017664:	d03d      	beq.n	80176e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8017666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017668:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801766c:	d852      	bhi.n	8017714 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 801766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017674:	d014      	beq.n	80176a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8017676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801767c:	d84a      	bhi.n	8017714 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 801767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017680:	2b00      	cmp	r3, #0
 8017682:	d01f      	beq.n	80176c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8017684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017686:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801768a:	d012      	beq.n	80176b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 801768c:	e042      	b.n	8017714 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 801768e:	bf00      	nop
 8017690:	46020c00 	.word	0x46020c00
 8017694:	0007a120 	.word	0x0007a120
 8017698:	00f42400 	.word	0x00f42400
 801769c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80176a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80176a4:	4618      	mov	r0, r3
 80176a6:	f7ff fa67 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80176aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80176ae:	f000 bfb2 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80176b2:	f107 0318 	add.w	r3, r7, #24
 80176b6:	4618      	mov	r0, r3
 80176b8:	f7ff fbc4 	bl	8016e44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80176bc:	69fb      	ldr	r3, [r7, #28]
 80176be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80176c0:	f000 bfa9 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80176c4:	4bab      	ldr	r3, [pc, #684]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80176cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80176d0:	d103      	bne.n	80176da <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80176d2:	4ba9      	ldr	r3, [pc, #676]	; (8017978 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80176d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80176d6:	f000 bf9e 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80176da:	2300      	movs	r3, #0
 80176dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80176de:	f000 bf9a 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80176e2:	4ba4      	ldr	r3, [pc, #656]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80176e4:	689b      	ldr	r3, [r3, #8]
 80176e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d005      	beq.n	80176fa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80176ee:	4ba1      	ldr	r3, [pc, #644]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80176f0:	689b      	ldr	r3, [r3, #8]
 80176f2:	0e1b      	lsrs	r3, r3, #24
 80176f4:	f003 030f 	and.w	r3, r3, #15
 80176f8:	e006      	b.n	8017708 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80176fa:	4b9e      	ldr	r3, [pc, #632]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80176fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017700:	041b      	lsls	r3, r3, #16
 8017702:	0e1b      	lsrs	r3, r3, #24
 8017704:	f003 030f 	and.w	r3, r3, #15
 8017708:	4a9c      	ldr	r2, [pc, #624]	; (801797c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 801770a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801770e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017710:	f000 bf81 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8017714:	2300      	movs	r3, #0
 8017716:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017718:	f000 bf7d 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801771c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017720:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8017724:	430b      	orrs	r3, r1
 8017726:	d175      	bne.n	8017814 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8017728:	4b92      	ldr	r3, [pc, #584]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 801772a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801772e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017732:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8017734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017736:	2b00      	cmp	r3, #0
 8017738:	d15b      	bne.n	80177f2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 801773a:	4b8e      	ldr	r3, [pc, #568]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 801773c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017740:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8017744:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8017746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017748:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801774c:	d034      	beq.n	80177b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017750:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8017754:	d849      	bhi.n	80177ea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8017756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801775c:	d00b      	beq.n	8017776 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 801775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017764:	d841      	bhi.n	80177ea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8017766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017768:	2b00      	cmp	r3, #0
 801776a:	d016      	beq.n	801779a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017772:	d009      	beq.n	8017788 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8017774:	e039      	b.n	80177ea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801777a:	4618      	mov	r0, r3
 801777c:	f7ff f9fc 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017782:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8017784:	f000 bf47 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017788:	f107 0318 	add.w	r3, r7, #24
 801778c:	4618      	mov	r0, r3
 801778e:	f7ff fb59 	bl	8016e44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017792:	69fb      	ldr	r3, [r7, #28]
 8017794:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8017796:	f000 bf3e 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 801779a:	4b76      	ldr	r3, [pc, #472]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80177a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80177a6:	d103      	bne.n	80177b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80177a8:	4b73      	ldr	r3, [pc, #460]	; (8017978 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80177aa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80177ac:	f000 bf33 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80177b0:	2300      	movs	r3, #0
 80177b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80177b4:	f000 bf2f 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80177b8:	4b6e      	ldr	r3, [pc, #440]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80177ba:	689b      	ldr	r3, [r3, #8]
 80177bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d005      	beq.n	80177d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80177c4:	4b6b      	ldr	r3, [pc, #428]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80177c6:	689b      	ldr	r3, [r3, #8]
 80177c8:	0e1b      	lsrs	r3, r3, #24
 80177ca:	f003 030f 	and.w	r3, r3, #15
 80177ce:	e006      	b.n	80177de <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80177d0:	4b68      	ldr	r3, [pc, #416]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80177d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80177d6:	041b      	lsls	r3, r3, #16
 80177d8:	0e1b      	lsrs	r3, r3, #24
 80177da:	f003 030f 	and.w	r3, r3, #15
 80177de:	4a67      	ldr	r2, [pc, #412]	; (801797c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80177e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80177e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80177e6:	f000 bf16 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80177ea:	2300      	movs	r3, #0
 80177ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80177ee:	f000 bf12 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80177f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80177f8:	d108      	bne.n	801780c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80177fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80177fe:	4618      	mov	r0, r3
 8017800:	f7ff f9ba 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8017804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017806:	637b      	str	r3, [r7, #52]	; 0x34
 8017808:	f000 bf05 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 801780c:	2300      	movs	r3, #0
 801780e:	637b      	str	r3, [r7, #52]	; 0x34
 8017810:	f000 bf01 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8017814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017818:	1e51      	subs	r1, r2, #1
 801781a:	430b      	orrs	r3, r1
 801781c:	d136      	bne.n	801788c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 801781e:	4b55      	ldr	r3, [pc, #340]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8017820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017824:	f003 0303 	and.w	r3, r3, #3
 8017828:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 801782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782c:	2b00      	cmp	r3, #0
 801782e:	d104      	bne.n	801783a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8017830:	f7fe fae2 	bl	8015df8 <HAL_RCC_GetPCLK2Freq>
 8017834:	6378      	str	r0, [r7, #52]	; 0x34
 8017836:	f000 beee 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 801783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801783c:	2b01      	cmp	r3, #1
 801783e:	d104      	bne.n	801784a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8017840:	f7fe f9a4 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017844:	6378      	str	r0, [r7, #52]	; 0x34
 8017846:	f000 bee6 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 801784a:	4b4a      	ldr	r3, [pc, #296]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017856:	d106      	bne.n	8017866 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8017858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801785a:	2b02      	cmp	r3, #2
 801785c:	d103      	bne.n	8017866 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 801785e:	4b48      	ldr	r3, [pc, #288]	; (8017980 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8017860:	637b      	str	r3, [r7, #52]	; 0x34
 8017862:	f000 bed8 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8017866:	4b43      	ldr	r3, [pc, #268]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8017868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801786c:	f003 0302 	and.w	r3, r3, #2
 8017870:	2b02      	cmp	r3, #2
 8017872:	d107      	bne.n	8017884 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8017874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017876:	2b03      	cmp	r3, #3
 8017878:	d104      	bne.n	8017884 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 801787a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801787e:	637b      	str	r3, [r7, #52]	; 0x34
 8017880:	f000 bec9 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8017884:	2300      	movs	r3, #0
 8017886:	637b      	str	r3, [r7, #52]	; 0x34
 8017888:	f000 bec5 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 801788c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017890:	1e91      	subs	r1, r2, #2
 8017892:	430b      	orrs	r3, r1
 8017894:	d136      	bne.n	8017904 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8017896:	4b37      	ldr	r3, [pc, #220]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8017898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801789c:	f003 030c 	and.w	r3, r3, #12
 80178a0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80178a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d104      	bne.n	80178b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80178a8:	f7fe fa92 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 80178ac:	6378      	str	r0, [r7, #52]	; 0x34
 80178ae:	f000 beb2 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80178b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b4:	2b04      	cmp	r3, #4
 80178b6:	d104      	bne.n	80178c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80178b8:	f7fe f968 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 80178bc:	6378      	str	r0, [r7, #52]	; 0x34
 80178be:	f000 beaa 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80178c2:	4b2c      	ldr	r3, [pc, #176]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80178ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80178ce:	d106      	bne.n	80178de <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80178d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d2:	2b08      	cmp	r3, #8
 80178d4:	d103      	bne.n	80178de <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80178d6:	4b2a      	ldr	r3, [pc, #168]	; (8017980 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80178d8:	637b      	str	r3, [r7, #52]	; 0x34
 80178da:	f000 be9c 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80178de:	4b25      	ldr	r3, [pc, #148]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80178e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80178e4:	f003 0302 	and.w	r3, r3, #2
 80178e8:	2b02      	cmp	r3, #2
 80178ea:	d107      	bne.n	80178fc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80178ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ee:	2b0c      	cmp	r3, #12
 80178f0:	d104      	bne.n	80178fc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80178f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80178f6:	637b      	str	r3, [r7, #52]	; 0x34
 80178f8:	f000 be8d 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80178fc:	2300      	movs	r3, #0
 80178fe:	637b      	str	r3, [r7, #52]	; 0x34
 8017900:	f000 be89 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8017904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017908:	1f11      	subs	r1, r2, #4
 801790a:	430b      	orrs	r3, r1
 801790c:	d13e      	bne.n	801798c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 801790e:	4b19      	ldr	r3, [pc, #100]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8017910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8017918:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 801791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801791c:	2b00      	cmp	r3, #0
 801791e:	d104      	bne.n	801792a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8017920:	f7fe fa56 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 8017924:	6378      	str	r0, [r7, #52]	; 0x34
 8017926:	f000 be76 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 801792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801792c:	2b10      	cmp	r3, #16
 801792e:	d104      	bne.n	801793a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8017930:	f7fe f92c 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017934:	6378      	str	r0, [r7, #52]	; 0x34
 8017936:	f000 be6e 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 801793a:	4b0e      	ldr	r3, [pc, #56]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017946:	d106      	bne.n	8017956 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8017948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801794a:	2b20      	cmp	r3, #32
 801794c:	d103      	bne.n	8017956 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 801794e:	4b0c      	ldr	r3, [pc, #48]	; (8017980 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8017950:	637b      	str	r3, [r7, #52]	; 0x34
 8017952:	f000 be60 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8017956:	4b07      	ldr	r3, [pc, #28]	; (8017974 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8017958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801795c:	f003 0302 	and.w	r3, r3, #2
 8017960:	2b02      	cmp	r3, #2
 8017962:	d10f      	bne.n	8017984 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8017964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017966:	2b30      	cmp	r3, #48	; 0x30
 8017968:	d10c      	bne.n	8017984 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 801796a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801796e:	637b      	str	r3, [r7, #52]	; 0x34
 8017970:	f000 be51 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8017974:	46020c00 	.word	0x46020c00
 8017978:	02dc6c00 	.word	0x02dc6c00
 801797c:	08023b18 	.word	0x08023b18
 8017980:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8017984:	2300      	movs	r3, #0
 8017986:	637b      	str	r3, [r7, #52]	; 0x34
 8017988:	f000 be45 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 801798c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017990:	f1a2 0108 	sub.w	r1, r2, #8
 8017994:	430b      	orrs	r3, r1
 8017996:	d136      	bne.n	8017a06 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8017998:	4b9f      	ldr	r3, [pc, #636]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 801799a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801799e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80179a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80179a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d104      	bne.n	80179b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80179aa:	f7fe fa11 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 80179ae:	6378      	str	r0, [r7, #52]	; 0x34
 80179b0:	f000 be31 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80179b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179b6:	2b40      	cmp	r3, #64	; 0x40
 80179b8:	d104      	bne.n	80179c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80179ba:	f7fe f8e7 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 80179be:	6378      	str	r0, [r7, #52]	; 0x34
 80179c0:	f000 be29 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80179c4:	4b94      	ldr	r3, [pc, #592]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80179cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80179d0:	d106      	bne.n	80179e0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80179d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d4:	2b80      	cmp	r3, #128	; 0x80
 80179d6:	d103      	bne.n	80179e0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80179d8:	4b90      	ldr	r3, [pc, #576]	; (8017c1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80179da:	637b      	str	r3, [r7, #52]	; 0x34
 80179dc:	f000 be1b 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80179e0:	4b8d      	ldr	r3, [pc, #564]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80179e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80179e6:	f003 0302 	and.w	r3, r3, #2
 80179ea:	2b02      	cmp	r3, #2
 80179ec:	d107      	bne.n	80179fe <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80179ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f0:	2bc0      	cmp	r3, #192	; 0xc0
 80179f2:	d104      	bne.n	80179fe <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80179f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80179f8:	637b      	str	r3, [r7, #52]	; 0x34
 80179fa:	f000 be0c 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80179fe:	2300      	movs	r3, #0
 8017a00:	637b      	str	r3, [r7, #52]	; 0x34
 8017a02:	f000 be08 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8017a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017a0a:	f1a2 0110 	sub.w	r1, r2, #16
 8017a0e:	430b      	orrs	r3, r1
 8017a10:	d139      	bne.n	8017a86 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8017a12:	4b81      	ldr	r3, [pc, #516]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017a1c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8017a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d104      	bne.n	8017a2e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8017a24:	f7fe f9d4 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 8017a28:	6378      	str	r0, [r7, #52]	; 0x34
 8017a2a:	f000 bdf4 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8017a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a34:	d104      	bne.n	8017a40 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8017a36:	f7fe f8a9 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8017a3c:	f000 bdeb 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8017a40:	4b75      	ldr	r3, [pc, #468]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017a4c:	d107      	bne.n	8017a5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8017a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a54:	d103      	bne.n	8017a5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8017a56:	4b71      	ldr	r3, [pc, #452]	; (8017c1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8017a58:	637b      	str	r3, [r7, #52]	; 0x34
 8017a5a:	f000 bddc 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8017a5e:	4b6e      	ldr	r3, [pc, #440]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017a64:	f003 0302 	and.w	r3, r3, #2
 8017a68:	2b02      	cmp	r3, #2
 8017a6a:	d108      	bne.n	8017a7e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8017a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017a72:	d104      	bne.n	8017a7e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8017a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017a78:	637b      	str	r3, [r7, #52]	; 0x34
 8017a7a:	f000 bdcc 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	637b      	str	r3, [r7, #52]	; 0x34
 8017a82:	f000 bdc8 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8017a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017a8a:	f1a2 0120 	sub.w	r1, r2, #32
 8017a8e:	430b      	orrs	r3, r1
 8017a90:	d158      	bne.n	8017b44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8017a92:	4b61      	ldr	r3, [pc, #388]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8017a98:	f003 0307 	and.w	r3, r3, #7
 8017a9c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8017a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d104      	bne.n	8017aae <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8017aa4:	f7fe f9bc 	bl	8015e20 <HAL_RCC_GetPCLK3Freq>
 8017aa8:	6378      	str	r0, [r7, #52]	; 0x34
 8017aaa:	f000 bdb4 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8017aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab0:	2b01      	cmp	r3, #1
 8017ab2:	d104      	bne.n	8017abe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8017ab4:	f7fe f86a 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017ab8:	6378      	str	r0, [r7, #52]	; 0x34
 8017aba:	f000 bdac 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8017abe:	4b56      	ldr	r3, [pc, #344]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017aca:	d106      	bne.n	8017ada <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8017acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ace:	2b02      	cmp	r3, #2
 8017ad0:	d103      	bne.n	8017ada <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8017ad2:	4b52      	ldr	r3, [pc, #328]	; (8017c1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8017ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8017ad6:	f000 bd9e 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8017ada:	4b4f      	ldr	r3, [pc, #316]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017ae0:	f003 0302 	and.w	r3, r3, #2
 8017ae4:	2b02      	cmp	r3, #2
 8017ae6:	d107      	bne.n	8017af8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8017ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aea:	2b03      	cmp	r3, #3
 8017aec:	d104      	bne.n	8017af8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8017aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017af2:	637b      	str	r3, [r7, #52]	; 0x34
 8017af4:	f000 bd8f 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8017af8:	4b47      	ldr	r3, [pc, #284]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	f003 0320 	and.w	r3, r3, #32
 8017b00:	2b20      	cmp	r3, #32
 8017b02:	d11b      	bne.n	8017b3c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8017b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b06:	2b04      	cmp	r3, #4
 8017b08:	d118      	bne.n	8017b3c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017b0a:	4b43      	ldr	r3, [pc, #268]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017b0c:	689b      	ldr	r3, [r3, #8]
 8017b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d005      	beq.n	8017b22 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8017b16:	4b40      	ldr	r3, [pc, #256]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017b18:	689b      	ldr	r3, [r3, #8]
 8017b1a:	0e1b      	lsrs	r3, r3, #24
 8017b1c:	f003 030f 	and.w	r3, r3, #15
 8017b20:	e006      	b.n	8017b30 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8017b22:	4b3d      	ldr	r3, [pc, #244]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017b28:	041b      	lsls	r3, r3, #16
 8017b2a:	0e1b      	lsrs	r3, r3, #24
 8017b2c:	f003 030f 	and.w	r3, r3, #15
 8017b30:	4a3b      	ldr	r2, [pc, #236]	; (8017c20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8017b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b36:	637b      	str	r3, [r7, #52]	; 0x34
 8017b38:	f000 bd6d 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8017b40:	f000 bd69 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8017b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b48:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8017b4c:	430b      	orrs	r3, r1
 8017b4e:	d169      	bne.n	8017c24 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8017b50:	4b31      	ldr	r3, [pc, #196]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8017b56:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8017b5a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8017b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017b62:	d104      	bne.n	8017b6e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8017b64:	f7fe f812 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017b68:	6378      	str	r0, [r7, #52]	; 0x34
 8017b6a:	f000 bd54 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8017b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017b74:	d108      	bne.n	8017b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017b76:	f107 0318 	add.w	r3, r7, #24
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7ff f962 	bl	8016e44 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8017b80:	6a3b      	ldr	r3, [r7, #32]
 8017b82:	637b      	str	r3, [r7, #52]	; 0x34
 8017b84:	f000 bd47 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8017b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d104      	bne.n	8017b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8017b8e:	f7fe f905 	bl	8015d9c <HAL_RCC_GetHCLKFreq>
 8017b92:	6378      	str	r0, [r7, #52]	; 0x34
 8017b94:	f000 bd3f 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8017b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8017b9e:	d118      	bne.n	8017bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8017ba0:	4b1d      	ldr	r3, [pc, #116]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017ba2:	689b      	ldr	r3, [r3, #8]
 8017ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d005      	beq.n	8017bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8017bac:	4b1a      	ldr	r3, [pc, #104]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017bae:	689b      	ldr	r3, [r3, #8]
 8017bb0:	0f1b      	lsrs	r3, r3, #28
 8017bb2:	f003 030f 	and.w	r3, r3, #15
 8017bb6:	e006      	b.n	8017bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8017bb8:	4b17      	ldr	r3, [pc, #92]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017bbe:	041b      	lsls	r3, r3, #16
 8017bc0:	0f1b      	lsrs	r3, r3, #28
 8017bc2:	f003 030f 	and.w	r3, r3, #15
 8017bc6:	4a16      	ldr	r2, [pc, #88]	; (8017c20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8017bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8017bce:	f000 bd22 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8017bd2:	4b11      	ldr	r3, [pc, #68]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017bde:	d107      	bne.n	8017bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8017be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8017be6:	d103      	bne.n	8017bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8017be8:	4b0c      	ldr	r3, [pc, #48]	; (8017c1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8017bea:	637b      	str	r3, [r7, #52]	; 0x34
 8017bec:	f000 bd13 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8017bf0:	4b09      	ldr	r3, [pc, #36]	; (8017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017bfc:	d107      	bne.n	8017c0e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8017bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017c04:	d103      	bne.n	8017c0e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8017c06:	4b05      	ldr	r3, [pc, #20]	; (8017c1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8017c08:	637b      	str	r3, [r7, #52]	; 0x34
 8017c0a:	f000 bd04 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	637b      	str	r3, [r7, #52]	; 0x34
 8017c12:	f000 bd00 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8017c16:	bf00      	nop
 8017c18:	46020c00 	.word	0x46020c00
 8017c1c:	00f42400 	.word	0x00f42400
 8017c20:	08023b18 	.word	0x08023b18
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8017c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017c28:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8017c2c:	430b      	orrs	r3, r1
 8017c2e:	d14e      	bne.n	8017cce <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8017c30:	4ba8      	ldr	r3, [pc, #672]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017c32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8017c36:	f003 0307 	and.w	r3, r3, #7
 8017c3a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8017c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c3e:	2b04      	cmp	r3, #4
 8017c40:	d841      	bhi.n	8017cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8017c42:	a201      	add	r2, pc, #4	; (adr r2, 8017c48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8017c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c48:	08017c81 	.word	0x08017c81
 8017c4c:	08017c5d 	.word	0x08017c5d
 8017c50:	08017c6f 	.word	0x08017c6f
 8017c54:	08017c8b 	.word	0x08017c8b
 8017c58:	08017c95 	.word	0x08017c95
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017c60:	4618      	mov	r0, r3
 8017c62:	f7fe ff89 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8017c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017c6a:	f000 bcd4 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017c6e:	f107 030c 	add.w	r3, r7, #12
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7ff fa4c 	bl	8017110 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017c7c:	f000 bccb 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8017c80:	f7fe f88c 	bl	8015d9c <HAL_RCC_GetHCLKFreq>
 8017c84:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8017c86:	f000 bcc6 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8017c8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8017c8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017c90:	f000 bcc1 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017c94:	4b8f      	ldr	r3, [pc, #572]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017c96:	689b      	ldr	r3, [r3, #8]
 8017c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d005      	beq.n	8017cac <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8017ca0:	4b8c      	ldr	r3, [pc, #560]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017ca2:	689b      	ldr	r3, [r3, #8]
 8017ca4:	0e1b      	lsrs	r3, r3, #24
 8017ca6:	f003 030f 	and.w	r3, r3, #15
 8017caa:	e006      	b.n	8017cba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8017cac:	4b89      	ldr	r3, [pc, #548]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017cb2:	041b      	lsls	r3, r3, #16
 8017cb4:	0e1b      	lsrs	r3, r3, #24
 8017cb6:	f003 030f 	and.w	r3, r3, #15
 8017cba:	4a87      	ldr	r2, [pc, #540]	; (8017ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8017cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017cc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017cc2:	f000 bca8 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017cca:	f000 bca4 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8017cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017cd2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8017cd6:	430b      	orrs	r3, r1
 8017cd8:	d15d      	bne.n	8017d96 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8017cda:	4b7e      	ldr	r3, [pc, #504]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8017ce0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8017ce4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8017ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017cec:	d036      	beq.n	8017d5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8017cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017cf4:	d84b      	bhi.n	8017d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8017cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017cfc:	d029      	beq.n	8017d52 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8017cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017d04:	d843      	bhi.n	8017d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8017d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017d0c:	d013      	beq.n	8017d36 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8017d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017d14:	d83b      	bhi.n	8017d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8017d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d015      	beq.n	8017d48 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8017d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d22:	d134      	bne.n	8017d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f7fe ff25 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8017d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017d32:	f000 bc70 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017d36:	f107 030c 	add.w	r3, r7, #12
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7ff f9e8 	bl	8017110 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8017d40:	693b      	ldr	r3, [r7, #16]
 8017d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017d44:	f000 bc67 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8017d48:	f7fe f828 	bl	8015d9c <HAL_RCC_GetHCLKFreq>
 8017d4c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8017d4e:	f000 bc62 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8017d52:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8017d56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017d58:	f000 bc5d 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017d5c:	4b5d      	ldr	r3, [pc, #372]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017d5e:	689b      	ldr	r3, [r3, #8]
 8017d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d005      	beq.n	8017d74 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8017d68:	4b5a      	ldr	r3, [pc, #360]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017d6a:	689b      	ldr	r3, [r3, #8]
 8017d6c:	0e1b      	lsrs	r3, r3, #24
 8017d6e:	f003 030f 	and.w	r3, r3, #15
 8017d72:	e006      	b.n	8017d82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8017d74:	4b57      	ldr	r3, [pc, #348]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017d7a:	041b      	lsls	r3, r3, #16
 8017d7c:	0e1b      	lsrs	r3, r3, #24
 8017d7e:	f003 030f 	and.w	r3, r3, #15
 8017d82:	4a55      	ldr	r2, [pc, #340]	; (8017ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8017d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017d8a:	f000 bc44 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8017d8e:	2300      	movs	r3, #0
 8017d90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017d92:	f000 bc40 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8017d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017d9a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8017d9e:	430b      	orrs	r3, r1
 8017da0:	d14a      	bne.n	8017e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8017da2:	4b4c      	ldr	r3, [pc, #304]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8017dac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8017dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d104      	bne.n	8017dbe <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8017db4:	f7fe f80c 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 8017db8:	6378      	str	r0, [r7, #52]	; 0x34
 8017dba:	f000 bc2c 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8017dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017dc4:	d104      	bne.n	8017dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8017dc6:	f7fd fee1 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017dca:	6378      	str	r0, [r7, #52]	; 0x34
 8017dcc:	f000 bc23 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8017dd0:	4b40      	ldr	r3, [pc, #256]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017ddc:	d107      	bne.n	8017dee <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8017dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017de4:	d103      	bne.n	8017dee <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8017de6:	4b3d      	ldr	r3, [pc, #244]	; (8017edc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8017de8:	637b      	str	r3, [r7, #52]	; 0x34
 8017dea:	f000 bc14 	b.w	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8017dee:	4b39      	ldr	r3, [pc, #228]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	f003 0320 	and.w	r3, r3, #32
 8017df6:	2b20      	cmp	r3, #32
 8017df8:	d11b      	bne.n	8017e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8017dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8017e00:	d117      	bne.n	8017e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017e02:	4b34      	ldr	r3, [pc, #208]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017e04:	689b      	ldr	r3, [r3, #8]
 8017e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d005      	beq.n	8017e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8017e0e:	4b31      	ldr	r3, [pc, #196]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017e10:	689b      	ldr	r3, [r3, #8]
 8017e12:	0e1b      	lsrs	r3, r3, #24
 8017e14:	f003 030f 	and.w	r3, r3, #15
 8017e18:	e006      	b.n	8017e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8017e1a:	4b2e      	ldr	r3, [pc, #184]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017e20:	041b      	lsls	r3, r3, #16
 8017e22:	0e1b      	lsrs	r3, r3, #24
 8017e24:	f003 030f 	and.w	r3, r3, #15
 8017e28:	4a2b      	ldr	r2, [pc, #172]	; (8017ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8017e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8017e30:	e3f1      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8017e32:	2300      	movs	r3, #0
 8017e34:	637b      	str	r3, [r7, #52]	; 0x34
 8017e36:	e3ee      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8017e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017e3c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8017e40:	430b      	orrs	r3, r1
 8017e42:	d14d      	bne.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8017e44:	4b23      	ldr	r3, [pc, #140]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017e4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8017e4e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8017e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d103      	bne.n	8017e5e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8017e56:	f7fd ffbb 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 8017e5a:	6378      	str	r0, [r7, #52]	; 0x34
 8017e5c:	e3db      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8017e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017e64:	d103      	bne.n	8017e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8017e66:	f7fd fe91 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017e6a:	6378      	str	r0, [r7, #52]	; 0x34
 8017e6c:	e3d3      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8017e6e:	4b19      	ldr	r3, [pc, #100]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017e7a:	d106      	bne.n	8017e8a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8017e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017e82:	d102      	bne.n	8017e8a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8017e84:	4b15      	ldr	r3, [pc, #84]	; (8017edc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8017e86:	637b      	str	r3, [r7, #52]	; 0x34
 8017e88:	e3c5      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8017e8a:	4b12      	ldr	r3, [pc, #72]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	f003 0320 	and.w	r3, r3, #32
 8017e92:	2b20      	cmp	r3, #32
 8017e94:	d11b      	bne.n	8017ece <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8017e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8017e9c:	d117      	bne.n	8017ece <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017e9e:	4b0d      	ldr	r3, [pc, #52]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017ea0:	689b      	ldr	r3, [r3, #8]
 8017ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d005      	beq.n	8017eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8017eaa:	4b0a      	ldr	r3, [pc, #40]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017eac:	689b      	ldr	r3, [r3, #8]
 8017eae:	0e1b      	lsrs	r3, r3, #24
 8017eb0:	f003 030f 	and.w	r3, r3, #15
 8017eb4:	e006      	b.n	8017ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8017eb6:	4b07      	ldr	r3, [pc, #28]	; (8017ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017ebc:	041b      	lsls	r3, r3, #16
 8017ebe:	0e1b      	lsrs	r3, r3, #24
 8017ec0:	f003 030f 	and.w	r3, r3, #15
 8017ec4:	4a04      	ldr	r2, [pc, #16]	; (8017ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8017ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017eca:	637b      	str	r3, [r7, #52]	; 0x34
 8017ecc:	e3a3      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8017ed2:	e3a0      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8017ed4:	46020c00 	.word	0x46020c00
 8017ed8:	08023b18 	.word	0x08023b18
 8017edc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8017ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017ee4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8017ee8:	430b      	orrs	r3, r1
 8017eea:	d148      	bne.n	8017f7e <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8017eec:	4b9d      	ldr	r3, [pc, #628]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8017ef2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017ef6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8017ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efa:	2bc0      	cmp	r3, #192	; 0xc0
 8017efc:	d024      	beq.n	8017f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8017efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f00:	2bc0      	cmp	r3, #192	; 0xc0
 8017f02:	d839      	bhi.n	8017f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8017f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f06:	2b80      	cmp	r3, #128	; 0x80
 8017f08:	d00d      	beq.n	8017f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8017f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0c:	2b80      	cmp	r3, #128	; 0x80
 8017f0e:	d833      	bhi.n	8017f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8017f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d003      	beq.n	8017f1e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8017f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f18:	2b40      	cmp	r3, #64	; 0x40
 8017f1a:	d011      	beq.n	8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8017f1c:	e02c      	b.n	8017f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8017f1e:	f7fd ff7f 	bl	8015e20 <HAL_RCC_GetPCLK3Freq>
 8017f22:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8017f24:	e377      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017f26:	4b8f      	ldr	r3, [pc, #572]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017f32:	d102      	bne.n	8017f3a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8017f34:	4b8c      	ldr	r3, [pc, #560]	; (8018168 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8017f36:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8017f38:	e36d      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017f3e:	e36a      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8017f40:	f7fd fe24 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017f44:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8017f46:	e366      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8017f48:	4b86      	ldr	r3, [pc, #536]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017f4a:	689b      	ldr	r3, [r3, #8]
 8017f4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d005      	beq.n	8017f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8017f54:	4b83      	ldr	r3, [pc, #524]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017f56:	689b      	ldr	r3, [r3, #8]
 8017f58:	0f1b      	lsrs	r3, r3, #28
 8017f5a:	f003 030f 	and.w	r3, r3, #15
 8017f5e:	e006      	b.n	8017f6e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8017f60:	4b80      	ldr	r3, [pc, #512]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017f66:	041b      	lsls	r3, r3, #16
 8017f68:	0f1b      	lsrs	r3, r3, #28
 8017f6a:	f003 030f 	and.w	r3, r3, #15
 8017f6e:	4a7f      	ldr	r2, [pc, #508]	; (801816c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8017f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017f76:	e34e      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8017f78:	2300      	movs	r3, #0
 8017f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8017f7c:	e34b      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8017f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f82:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8017f86:	430b      	orrs	r3, r1
 8017f88:	d147      	bne.n	801801a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8017f8a:	4b76      	ldr	r3, [pc, #472]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017f94:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8017f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d103      	bne.n	8017fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8017f9c:	f7fd ff18 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 8017fa0:	6378      	str	r0, [r7, #52]	; 0x34
 8017fa2:	e338      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8017fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017faa:	d103      	bne.n	8017fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8017fac:	f7fd fdee 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8017fb0:	6378      	str	r0, [r7, #52]	; 0x34
 8017fb2:	e330      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8017fb4:	4b6b      	ldr	r3, [pc, #428]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017fc0:	d106      	bne.n	8017fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8017fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017fc8:	d102      	bne.n	8017fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8017fca:	4b67      	ldr	r3, [pc, #412]	; (8018168 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8017fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8017fce:	e322      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8017fd0:	4b64      	ldr	r3, [pc, #400]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	f003 0320 	and.w	r3, r3, #32
 8017fd8:	2b20      	cmp	r3, #32
 8017fda:	d11b      	bne.n	8018014 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8017fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8017fe2:	d117      	bne.n	8018014 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017fe4:	4b5f      	ldr	r3, [pc, #380]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017fe6:	689b      	ldr	r3, [r3, #8]
 8017fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d005      	beq.n	8017ffc <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8017ff0:	4b5c      	ldr	r3, [pc, #368]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017ff2:	689b      	ldr	r3, [r3, #8]
 8017ff4:	0e1b      	lsrs	r3, r3, #24
 8017ff6:	f003 030f 	and.w	r3, r3, #15
 8017ffa:	e006      	b.n	801800a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8017ffc:	4b59      	ldr	r3, [pc, #356]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8018002:	041b      	lsls	r3, r3, #16
 8018004:	0e1b      	lsrs	r3, r3, #24
 8018006:	f003 030f 	and.w	r3, r3, #15
 801800a:	4a58      	ldr	r2, [pc, #352]	; (801816c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 801800c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018010:	637b      	str	r3, [r7, #52]	; 0x34
 8018012:	e300      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8018014:	2300      	movs	r3, #0
 8018016:	637b      	str	r3, [r7, #52]	; 0x34
 8018018:	e2fd      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 801801a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801801e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8018022:	430b      	orrs	r3, r1
 8018024:	d15b      	bne.n	80180de <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8018026:	4b4f      	ldr	r3, [pc, #316]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8018028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801802c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018030:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8018032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018034:	2b00      	cmp	r3, #0
 8018036:	d117      	bne.n	8018068 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8018038:	4b4a      	ldr	r3, [pc, #296]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 801803a:	689b      	ldr	r3, [r3, #8]
 801803c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018040:	2b00      	cmp	r3, #0
 8018042:	d005      	beq.n	8018050 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8018044:	4b47      	ldr	r3, [pc, #284]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8018046:	689b      	ldr	r3, [r3, #8]
 8018048:	0e1b      	lsrs	r3, r3, #24
 801804a:	f003 030f 	and.w	r3, r3, #15
 801804e:	e006      	b.n	801805e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8018050:	4b44      	ldr	r3, [pc, #272]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8018052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8018056:	041b      	lsls	r3, r3, #16
 8018058:	0e1b      	lsrs	r3, r3, #24
 801805a:	f003 030f 	and.w	r3, r3, #15
 801805e:	4a43      	ldr	r2, [pc, #268]	; (801816c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8018060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018064:	637b      	str	r3, [r7, #52]	; 0x34
 8018066:	e2d6      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8018068:	4b3e      	ldr	r3, [pc, #248]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 801806a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801806e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018076:	d112      	bne.n	801809e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8018078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801807a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801807e:	d10e      	bne.n	801809e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8018080:	4b38      	ldr	r3, [pc, #224]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8018082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801808a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801808e:	d102      	bne.n	8018096 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8018090:	23fa      	movs	r3, #250	; 0xfa
 8018092:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8018094:	e2bf      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8018096:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801809a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801809c:	e2bb      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 801809e:	4b31      	ldr	r3, [pc, #196]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80180a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80180aa:	d106      	bne.n	80180ba <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80180ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180b2:	d102      	bne.n	80180ba <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80180b4:	4b2c      	ldr	r3, [pc, #176]	; (8018168 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80180b6:	637b      	str	r3, [r7, #52]	; 0x34
 80180b8:	e2ad      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80180ba:	4b2a      	ldr	r3, [pc, #168]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80180bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80180c0:	f003 0302 	and.w	r3, r3, #2
 80180c4:	2b02      	cmp	r3, #2
 80180c6:	d107      	bne.n	80180d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80180c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80180ce:	d103      	bne.n	80180d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80180d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80180d4:	637b      	str	r3, [r7, #52]	; 0x34
 80180d6:	e29e      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80180d8:	2300      	movs	r3, #0
 80180da:	637b      	str	r3, [r7, #52]	; 0x34
 80180dc:	e29b      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80180de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80180e2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80180e6:	430b      	orrs	r3, r1
 80180e8:	d162      	bne.n	80181b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80180ea:	4b1e      	ldr	r3, [pc, #120]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80180ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80180f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80180f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80180f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d117      	bne.n	801812c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80180fc:	4b19      	ldr	r3, [pc, #100]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80180fe:	689b      	ldr	r3, [r3, #8]
 8018100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018104:	2b00      	cmp	r3, #0
 8018106:	d005      	beq.n	8018114 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8018108:	4b16      	ldr	r3, [pc, #88]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 801810a:	689b      	ldr	r3, [r3, #8]
 801810c:	0e1b      	lsrs	r3, r3, #24
 801810e:	f003 030f 	and.w	r3, r3, #15
 8018112:	e006      	b.n	8018122 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8018114:	4b13      	ldr	r3, [pc, #76]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8018116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801811a:	041b      	lsls	r3, r3, #16
 801811c:	0e1b      	lsrs	r3, r3, #24
 801811e:	f003 030f 	and.w	r3, r3, #15
 8018122:	4a12      	ldr	r2, [pc, #72]	; (801816c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8018124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018128:	637b      	str	r3, [r7, #52]	; 0x34
 801812a:	e274      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 801812c:	4b0d      	ldr	r3, [pc, #52]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 801812e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801813a:	d119      	bne.n	8018170 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 801813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801813e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018142:	d115      	bne.n	8018170 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8018144:	4b07      	ldr	r3, [pc, #28]	; (8018164 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8018146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801814a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801814e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018152:	d102      	bne.n	801815a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8018154:	23fa      	movs	r3, #250	; 0xfa
 8018156:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8018158:	e25d      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 801815a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801815e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8018160:	e259      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8018162:	bf00      	nop
 8018164:	46020c00 	.word	0x46020c00
 8018168:	00f42400 	.word	0x00f42400
 801816c:	08023b18 	.word	0x08023b18
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8018170:	4b9d      	ldr	r3, [pc, #628]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801817c:	d106      	bne.n	801818c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 801817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018184:	d102      	bne.n	801818c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8018186:	4b99      	ldr	r3, [pc, #612]	; (80183ec <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8018188:	637b      	str	r3, [r7, #52]	; 0x34
 801818a:	e244      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 801818c:	4b96      	ldr	r3, [pc, #600]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 801818e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018192:	f003 0302 	and.w	r3, r3, #2
 8018196:	2b02      	cmp	r3, #2
 8018198:	d107      	bne.n	80181aa <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 801819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801819c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80181a0:	d103      	bne.n	80181aa <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 80181a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80181a6:	637b      	str	r3, [r7, #52]	; 0x34
 80181a8:	e235      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80181aa:	2300      	movs	r3, #0
 80181ac:	637b      	str	r3, [r7, #52]	; 0x34
 80181ae:	e232      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80181b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80181b4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80181b8:	430b      	orrs	r3, r1
 80181ba:	d147      	bne.n	801824c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80181bc:	4b8a      	ldr	r3, [pc, #552]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80181be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80181c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80181c6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80181c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d103      	bne.n	80181d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80181ce:	f7fd fdff 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 80181d2:	6378      	str	r0, [r7, #52]	; 0x34
 80181d4:	e21f      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80181d6:	4b84      	ldr	r3, [pc, #528]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80181d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80181dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80181e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80181e4:	d112      	bne.n	801820c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80181e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80181ec:	d10e      	bne.n	801820c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80181ee:	4b7e      	ldr	r3, [pc, #504]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80181f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80181f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80181f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80181fc:	d102      	bne.n	8018204 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80181fe:	23fa      	movs	r3, #250	; 0xfa
 8018200:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8018202:	e208      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8018204:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8018208:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801820a:	e204      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 801820c:	4b76      	ldr	r3, [pc, #472]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018218:	d106      	bne.n	8018228 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 801821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801821c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8018220:	d102      	bne.n	8018228 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8018222:	4b72      	ldr	r3, [pc, #456]	; (80183ec <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8018224:	637b      	str	r3, [r7, #52]	; 0x34
 8018226:	e1f6      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8018228:	4b6f      	ldr	r3, [pc, #444]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 801822a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801822e:	f003 0302 	and.w	r3, r3, #2
 8018232:	2b02      	cmp	r3, #2
 8018234:	d107      	bne.n	8018246 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8018236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018238:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 801823c:	d103      	bne.n	8018246 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 801823e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018242:	637b      	str	r3, [r7, #52]	; 0x34
 8018244:	e1e7      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8018246:	2300      	movs	r3, #0
 8018248:	637b      	str	r3, [r7, #52]	; 0x34
 801824a:	e1e4      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 801824c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018250:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8018254:	430b      	orrs	r3, r1
 8018256:	d12d      	bne.n	80182b4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8018258:	4b63      	ldr	r3, [pc, #396]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 801825a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801825e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8018262:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8018264:	4b60      	ldr	r3, [pc, #384]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801826c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018270:	d105      	bne.n	801827e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8018272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018274:	2b00      	cmp	r3, #0
 8018276:	d102      	bne.n	801827e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8018278:	4b5c      	ldr	r3, [pc, #368]	; (80183ec <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 801827a:	637b      	str	r3, [r7, #52]	; 0x34
 801827c:	e1cb      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 801827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018284:	d107      	bne.n	8018296 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801828a:	4618      	mov	r0, r3
 801828c:	f7fe fc74 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8018290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018292:	637b      	str	r3, [r7, #52]	; 0x34
 8018294:	e1bf      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8018296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801829c:	d107      	bne.n	80182ae <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801829e:	f107 0318 	add.w	r3, r7, #24
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7fe fdce 	bl	8016e44 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80182a8:	69bb      	ldr	r3, [r7, #24]
 80182aa:	637b      	str	r3, [r7, #52]	; 0x34
 80182ac:	e1b3      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80182ae:	2300      	movs	r3, #0
 80182b0:	637b      	str	r3, [r7, #52]	; 0x34
 80182b2:	e1b0      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80182b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80182b8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80182bc:	430b      	orrs	r3, r1
 80182be:	d14d      	bne.n	801835c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80182c0:	4b49      	ldr	r3, [pc, #292]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80182c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80182c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80182ca:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80182cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80182d2:	d028      	beq.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80182d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80182da:	d83c      	bhi.n	8018356 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80182dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80182e2:	d013      	beq.n	801830c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80182e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80182ea:	d834      	bhi.n	8018356 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80182ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d004      	beq.n	80182fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80182f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80182f8:	d004      	beq.n	8018304 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80182fa:	e02c      	b.n	8018356 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80182fc:	f7fd fd7c 	bl	8015df8 <HAL_RCC_GetPCLK2Freq>
 8018300:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8018302:	e188      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8018304:	f7fd fc42 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8018308:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 801830a:	e184      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801830c:	4b36      	ldr	r3, [pc, #216]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018318:	d102      	bne.n	8018320 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 801831a:	4b34      	ldr	r3, [pc, #208]	; (80183ec <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 801831c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801831e:	e17a      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8018320:	2300      	movs	r3, #0
 8018322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8018324:	e177      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8018326:	4b30      	ldr	r3, [pc, #192]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8018328:	689b      	ldr	r3, [r3, #8]
 801832a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801832e:	2b00      	cmp	r3, #0
 8018330:	d005      	beq.n	801833e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8018332:	4b2d      	ldr	r3, [pc, #180]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8018334:	689b      	ldr	r3, [r3, #8]
 8018336:	0e1b      	lsrs	r3, r3, #24
 8018338:	f003 030f 	and.w	r3, r3, #15
 801833c:	e006      	b.n	801834c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 801833e:	4b2a      	ldr	r3, [pc, #168]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8018340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8018344:	041b      	lsls	r3, r3, #16
 8018346:	0e1b      	lsrs	r3, r3, #24
 8018348:	f003 030f 	and.w	r3, r3, #15
 801834c:	4a28      	ldr	r2, [pc, #160]	; (80183f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 801834e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018352:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8018354:	e15f      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8018356:	2300      	movs	r3, #0
 8018358:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801835a:	e15c      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 801835c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018360:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8018364:	430b      	orrs	r3, r1
 8018366:	d154      	bne.n	8018412 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8018368:	4b1f      	ldr	r3, [pc, #124]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 801836a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801836e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8018372:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8018374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018376:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801837a:	d028      	beq.n	80183ce <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 801837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801837e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8018382:	d843      	bhi.n	801840c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8018384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801838a:	d013      	beq.n	80183b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 801838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801838e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018392:	d83b      	bhi.n	801840c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8018394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018396:	2b00      	cmp	r3, #0
 8018398:	d004      	beq.n	80183a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 801839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801839c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80183a0:	d004      	beq.n	80183ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80183a2:	e033      	b.n	801840c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80183a4:	f7fd fd14 	bl	8015dd0 <HAL_RCC_GetPCLK1Freq>
 80183a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80183aa:	e134      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80183ac:	f7fd fbee 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 80183b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80183b2:	e130      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80183b4:	4b0c      	ldr	r3, [pc, #48]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80183bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80183c0:	d102      	bne.n	80183c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80183c2:	4b0a      	ldr	r3, [pc, #40]	; (80183ec <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80183c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80183c6:	e126      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80183c8:	2300      	movs	r3, #0
 80183ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80183cc:	e123      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80183ce:	4b06      	ldr	r3, [pc, #24]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80183d0:	689b      	ldr	r3, [r3, #8]
 80183d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d00c      	beq.n	80183f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80183da:	4b03      	ldr	r3, [pc, #12]	; (80183e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80183dc:	689b      	ldr	r3, [r3, #8]
 80183de:	0e1b      	lsrs	r3, r3, #24
 80183e0:	f003 030f 	and.w	r3, r3, #15
 80183e4:	e00d      	b.n	8018402 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80183e6:	bf00      	nop
 80183e8:	46020c00 	.word	0x46020c00
 80183ec:	00f42400 	.word	0x00f42400
 80183f0:	08023b18 	.word	0x08023b18
 80183f4:	4b8a      	ldr	r3, [pc, #552]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80183f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80183fa:	041b      	lsls	r3, r3, #16
 80183fc:	0e1b      	lsrs	r3, r3, #24
 80183fe:	f003 030f 	and.w	r3, r3, #15
 8018402:	4a88      	ldr	r2, [pc, #544]	; (8018624 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8018404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801840a:	e104      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 801840c:	2300      	movs	r3, #0
 801840e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8018410:	e101      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8018412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018416:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 801841a:	430b      	orrs	r3, r1
 801841c:	d16e      	bne.n	80184fc <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 801841e:	4b80      	ldr	r3, [pc, #512]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8018420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8018424:	f003 0318 	and.w	r3, r3, #24
 8018428:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 801842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801842c:	2b18      	cmp	r3, #24
 801842e:	d862      	bhi.n	80184f6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8018430:	a201      	add	r2, pc, #4	; (adr r2, 8018438 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8018432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018436:	bf00      	nop
 8018438:	0801849d 	.word	0x0801849d
 801843c:	080184f7 	.word	0x080184f7
 8018440:	080184f7 	.word	0x080184f7
 8018444:	080184f7 	.word	0x080184f7
 8018448:	080184f7 	.word	0x080184f7
 801844c:	080184f7 	.word	0x080184f7
 8018450:	080184f7 	.word	0x080184f7
 8018454:	080184f7 	.word	0x080184f7
 8018458:	080184a5 	.word	0x080184a5
 801845c:	080184f7 	.word	0x080184f7
 8018460:	080184f7 	.word	0x080184f7
 8018464:	080184f7 	.word	0x080184f7
 8018468:	080184f7 	.word	0x080184f7
 801846c:	080184f7 	.word	0x080184f7
 8018470:	080184f7 	.word	0x080184f7
 8018474:	080184f7 	.word	0x080184f7
 8018478:	080184ad 	.word	0x080184ad
 801847c:	080184f7 	.word	0x080184f7
 8018480:	080184f7 	.word	0x080184f7
 8018484:	080184f7 	.word	0x080184f7
 8018488:	080184f7 	.word	0x080184f7
 801848c:	080184f7 	.word	0x080184f7
 8018490:	080184f7 	.word	0x080184f7
 8018494:	080184f7 	.word	0x080184f7
 8018498:	080184c7 	.word	0x080184c7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 801849c:	f7fd fcc0 	bl	8015e20 <HAL_RCC_GetPCLK3Freq>
 80184a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80184a2:	e0b8      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80184a4:	f7fd fb72 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 80184a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80184aa:	e0b4      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80184ac:	4b5c      	ldr	r3, [pc, #368]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80184b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184b8:	d102      	bne.n	80184c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80184ba:	4b5b      	ldr	r3, [pc, #364]	; (8018628 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80184bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80184be:	e0aa      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80184c0:	2300      	movs	r3, #0
 80184c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80184c4:	e0a7      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80184c6:	4b56      	ldr	r3, [pc, #344]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80184c8:	689b      	ldr	r3, [r3, #8]
 80184ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d005      	beq.n	80184de <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80184d2:	4b53      	ldr	r3, [pc, #332]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80184d4:	689b      	ldr	r3, [r3, #8]
 80184d6:	0e1b      	lsrs	r3, r3, #24
 80184d8:	f003 030f 	and.w	r3, r3, #15
 80184dc:	e006      	b.n	80184ec <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80184de:	4b50      	ldr	r3, [pc, #320]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80184e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80184e4:	041b      	lsls	r3, r3, #16
 80184e6:	0e1b      	lsrs	r3, r3, #24
 80184e8:	f003 030f 	and.w	r3, r3, #15
 80184ec:	4a4d      	ldr	r2, [pc, #308]	; (8018624 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80184ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80184f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80184f4:	e08f      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80184f6:	2300      	movs	r3, #0
 80184f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80184fa:	e08c      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80184fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018500:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8018504:	430b      	orrs	r3, r1
 8018506:	d14c      	bne.n	80185a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8018508:	4b45      	ldr	r3, [pc, #276]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 801850a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801850e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8018512:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8018514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801851a:	d013      	beq.n	8018544 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 801851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801851e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8018522:	d83b      	bhi.n	801859c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8018524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801852a:	d013      	beq.n	8018554 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 801852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801852e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018532:	d833      	bhi.n	801859c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8018534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018536:	2b00      	cmp	r3, #0
 8018538:	d014      	beq.n	8018564 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 801853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801853c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018540:	d014      	beq.n	801856c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8018542:	e02b      	b.n	801859c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018544:	f107 0318 	add.w	r3, r7, #24
 8018548:	4618      	mov	r0, r3
 801854a:	f7fe fc7b 	bl	8016e44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8018552:	e060      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018558:	4618      	mov	r0, r3
 801855a:	f7fe fb0d 	bl	8016b78 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 801855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8018562:	e058      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8018564:	f7fd fb12 	bl	8015b8c <HAL_RCC_GetSysClockFreq>
 8018568:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 801856a:	e054      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801856c:	4b2c      	ldr	r3, [pc, #176]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 801856e:	689b      	ldr	r3, [r3, #8]
 8018570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018574:	2b00      	cmp	r3, #0
 8018576:	d005      	beq.n	8018584 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8018578:	4b29      	ldr	r3, [pc, #164]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 801857a:	689b      	ldr	r3, [r3, #8]
 801857c:	0e1b      	lsrs	r3, r3, #24
 801857e:	f003 030f 	and.w	r3, r3, #15
 8018582:	e006      	b.n	8018592 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8018584:	4b26      	ldr	r3, [pc, #152]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8018586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801858a:	041b      	lsls	r3, r3, #16
 801858c:	0e1b      	lsrs	r3, r3, #24
 801858e:	f003 030f 	and.w	r3, r3, #15
 8018592:	4a24      	ldr	r2, [pc, #144]	; (8018624 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8018594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801859a:	e03c      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 801859c:	2300      	movs	r3, #0
 801859e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80185a0:	e039      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80185a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80185a6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80185aa:	430b      	orrs	r3, r1
 80185ac:	d131      	bne.n	8018612 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80185ae:	4b1c      	ldr	r3, [pc, #112]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80185b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80185b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80185b8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80185ba:	4b19      	ldr	r3, [pc, #100]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80185bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80185c0:	f003 0302 	and.w	r3, r3, #2
 80185c4:	2b02      	cmp	r3, #2
 80185c6:	d106      	bne.n	80185d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80185c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d103      	bne.n	80185d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80185ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80185d2:	637b      	str	r3, [r7, #52]	; 0x34
 80185d4:	e01f      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80185d6:	4b12      	ldr	r3, [pc, #72]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80185d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80185dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80185e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80185e4:	d112      	bne.n	801860c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80185e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80185ec:	d10e      	bne.n	801860c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80185ee:	4b0c      	ldr	r3, [pc, #48]	; (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80185f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80185f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80185f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80185fc:	d102      	bne.n	8018604 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80185fe:	23fa      	movs	r3, #250	; 0xfa
 8018600:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8018602:	e008      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8018604:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8018608:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801860a:	e004      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 801860c:	2300      	movs	r3, #0
 801860e:	637b      	str	r3, [r7, #52]	; 0x34
 8018610:	e001      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8018612:	2300      	movs	r3, #0
 8018614:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8018616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018618:	4618      	mov	r0, r3
 801861a:	3738      	adds	r7, #56	; 0x38
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}
 8018620:	46020c00 	.word	0x46020c00
 8018624:	08023b18 	.word	0x08023b18
 8018628:	00f42400 	.word	0x00f42400

0801862c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801862c:	b480      	push	{r7}
 801862e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8018630:	4b05      	ldr	r3, [pc, #20]	; (8018648 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	4a04      	ldr	r2, [pc, #16]	; (8018648 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8018636:	f043 0308 	orr.w	r3, r3, #8
 801863a:	6013      	str	r3, [r2, #0]
}
 801863c:	bf00      	nop
 801863e:	46bd      	mov	sp, r7
 8018640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018644:	4770      	bx	lr
 8018646:	bf00      	nop
 8018648:	46020c00 	.word	0x46020c00

0801864c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8018654:	4b47      	ldr	r3, [pc, #284]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	4a46      	ldr	r2, [pc, #280]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 801865a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801865e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018660:	f7f7 ff82 	bl	8010568 <HAL_GetTick>
 8018664:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018666:	e008      	b.n	801867a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018668:	f7f7 ff7e 	bl	8010568 <HAL_GetTick>
 801866c:	4602      	mov	r2, r0
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	1ad3      	subs	r3, r2, r3
 8018672:	2b02      	cmp	r3, #2
 8018674:	d901      	bls.n	801867a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8018676:	2303      	movs	r3, #3
 8018678:	e077      	b.n	801876a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801867a:	4b3e      	ldr	r3, [pc, #248]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018682:	2b00      	cmp	r3, #0
 8018684:	d1f0      	bne.n	8018668 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8018686:	4b3b      	ldr	r3, [pc, #236]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 8018688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801868a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801868e:	f023 0303 	bic.w	r3, r3, #3
 8018692:	687a      	ldr	r2, [r7, #4]
 8018694:	6811      	ldr	r1, [r2, #0]
 8018696:	687a      	ldr	r2, [r7, #4]
 8018698:	6852      	ldr	r2, [r2, #4]
 801869a:	3a01      	subs	r2, #1
 801869c:	0212      	lsls	r2, r2, #8
 801869e:	430a      	orrs	r2, r1
 80186a0:	4934      	ldr	r1, [pc, #208]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 80186a2:	4313      	orrs	r3, r2
 80186a4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80186a6:	4b33      	ldr	r3, [pc, #204]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 80186a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80186aa:	4b33      	ldr	r3, [pc, #204]	; (8018778 <RCCEx_PLL2_Config+0x12c>)
 80186ac:	4013      	ands	r3, r2
 80186ae:	687a      	ldr	r2, [r7, #4]
 80186b0:	6892      	ldr	r2, [r2, #8]
 80186b2:	3a01      	subs	r2, #1
 80186b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80186b8:	687a      	ldr	r2, [r7, #4]
 80186ba:	68d2      	ldr	r2, [r2, #12]
 80186bc:	3a01      	subs	r2, #1
 80186be:	0252      	lsls	r2, r2, #9
 80186c0:	b292      	uxth	r2, r2
 80186c2:	4311      	orrs	r1, r2
 80186c4:	687a      	ldr	r2, [r7, #4]
 80186c6:	6912      	ldr	r2, [r2, #16]
 80186c8:	3a01      	subs	r2, #1
 80186ca:	0412      	lsls	r2, r2, #16
 80186cc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80186d0:	4311      	orrs	r1, r2
 80186d2:	687a      	ldr	r2, [r7, #4]
 80186d4:	6952      	ldr	r2, [r2, #20]
 80186d6:	3a01      	subs	r2, #1
 80186d8:	0612      	lsls	r2, r2, #24
 80186da:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80186de:	430a      	orrs	r2, r1
 80186e0:	4924      	ldr	r1, [pc, #144]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 80186e2:	4313      	orrs	r3, r2
 80186e4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80186e6:	4b23      	ldr	r3, [pc, #140]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 80186e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ea:	f023 020c 	bic.w	r2, r3, #12
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	699b      	ldr	r3, [r3, #24]
 80186f2:	4920      	ldr	r1, [pc, #128]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 80186f4:	4313      	orrs	r3, r2
 80186f6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80186f8:	4b1e      	ldr	r3, [pc, #120]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 80186fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	6a1b      	ldr	r3, [r3, #32]
 8018700:	491c      	ldr	r1, [pc, #112]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 8018702:	4313      	orrs	r3, r2
 8018704:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8018706:	4b1b      	ldr	r3, [pc, #108]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 8018708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801870a:	4a1a      	ldr	r2, [pc, #104]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 801870c:	f023 0310 	bic.w	r3, r3, #16
 8018710:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8018712:	4b18      	ldr	r3, [pc, #96]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 8018714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801871a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801871e:	687a      	ldr	r2, [r7, #4]
 8018720:	69d2      	ldr	r2, [r2, #28]
 8018722:	00d2      	lsls	r2, r2, #3
 8018724:	4913      	ldr	r1, [pc, #76]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 8018726:	4313      	orrs	r3, r2
 8018728:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 801872a:	4b12      	ldr	r3, [pc, #72]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 801872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801872e:	4a11      	ldr	r2, [pc, #68]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 8018730:	f043 0310 	orr.w	r3, r3, #16
 8018734:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8018736:	4b0f      	ldr	r3, [pc, #60]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	4a0e      	ldr	r2, [pc, #56]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 801873c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018740:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018742:	f7f7 ff11 	bl	8010568 <HAL_GetTick>
 8018746:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018748:	e008      	b.n	801875c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801874a:	f7f7 ff0d 	bl	8010568 <HAL_GetTick>
 801874e:	4602      	mov	r2, r0
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	1ad3      	subs	r3, r2, r3
 8018754:	2b02      	cmp	r3, #2
 8018756:	d901      	bls.n	801875c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8018758:	2303      	movs	r3, #3
 801875a:	e006      	b.n	801876a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801875c:	4b05      	ldr	r3, [pc, #20]	; (8018774 <RCCEx_PLL2_Config+0x128>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018764:	2b00      	cmp	r3, #0
 8018766:	d0f0      	beq.n	801874a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8018768:	2300      	movs	r3, #0

}
 801876a:	4618      	mov	r0, r3
 801876c:	3710      	adds	r7, #16
 801876e:	46bd      	mov	sp, r7
 8018770:	bd80      	pop	{r7, pc}
 8018772:	bf00      	nop
 8018774:	46020c00 	.word	0x46020c00
 8018778:	80800000 	.word	0x80800000

0801877c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b084      	sub	sp, #16
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8018784:	4b47      	ldr	r3, [pc, #284]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	4a46      	ldr	r2, [pc, #280]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 801878a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801878e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018790:	f7f7 feea 	bl	8010568 <HAL_GetTick>
 8018794:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8018796:	e008      	b.n	80187aa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8018798:	f7f7 fee6 	bl	8010568 <HAL_GetTick>
 801879c:	4602      	mov	r2, r0
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	1ad3      	subs	r3, r2, r3
 80187a2:	2b02      	cmp	r3, #2
 80187a4:	d901      	bls.n	80187aa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80187a6:	2303      	movs	r3, #3
 80187a8:	e077      	b.n	801889a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80187aa:	4b3e      	ldr	r3, [pc, #248]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d1f0      	bne.n	8018798 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80187b6:	4b3b      	ldr	r3, [pc, #236]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 80187b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80187be:	f023 0303 	bic.w	r3, r3, #3
 80187c2:	687a      	ldr	r2, [r7, #4]
 80187c4:	6811      	ldr	r1, [r2, #0]
 80187c6:	687a      	ldr	r2, [r7, #4]
 80187c8:	6852      	ldr	r2, [r2, #4]
 80187ca:	3a01      	subs	r2, #1
 80187cc:	0212      	lsls	r2, r2, #8
 80187ce:	430a      	orrs	r2, r1
 80187d0:	4934      	ldr	r1, [pc, #208]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 80187d2:	4313      	orrs	r3, r2
 80187d4:	630b      	str	r3, [r1, #48]	; 0x30
 80187d6:	4b33      	ldr	r3, [pc, #204]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 80187d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80187da:	4b33      	ldr	r3, [pc, #204]	; (80188a8 <RCCEx_PLL3_Config+0x12c>)
 80187dc:	4013      	ands	r3, r2
 80187de:	687a      	ldr	r2, [r7, #4]
 80187e0:	6892      	ldr	r2, [r2, #8]
 80187e2:	3a01      	subs	r2, #1
 80187e4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80187e8:	687a      	ldr	r2, [r7, #4]
 80187ea:	68d2      	ldr	r2, [r2, #12]
 80187ec:	3a01      	subs	r2, #1
 80187ee:	0252      	lsls	r2, r2, #9
 80187f0:	b292      	uxth	r2, r2
 80187f2:	4311      	orrs	r1, r2
 80187f4:	687a      	ldr	r2, [r7, #4]
 80187f6:	6912      	ldr	r2, [r2, #16]
 80187f8:	3a01      	subs	r2, #1
 80187fa:	0412      	lsls	r2, r2, #16
 80187fc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8018800:	4311      	orrs	r1, r2
 8018802:	687a      	ldr	r2, [r7, #4]
 8018804:	6952      	ldr	r2, [r2, #20]
 8018806:	3a01      	subs	r2, #1
 8018808:	0612      	lsls	r2, r2, #24
 801880a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 801880e:	430a      	orrs	r2, r1
 8018810:	4924      	ldr	r1, [pc, #144]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018812:	4313      	orrs	r3, r2
 8018814:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8018816:	4b23      	ldr	r3, [pc, #140]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801881a:	f023 020c 	bic.w	r2, r3, #12
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	699b      	ldr	r3, [r3, #24]
 8018822:	4920      	ldr	r1, [pc, #128]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018824:	4313      	orrs	r3, r2
 8018826:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8018828:	4b1e      	ldr	r3, [pc, #120]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 801882a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6a1b      	ldr	r3, [r3, #32]
 8018830:	491c      	ldr	r1, [pc, #112]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018832:	4313      	orrs	r3, r2
 8018834:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8018836:	4b1b      	ldr	r3, [pc, #108]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801883a:	4a1a      	ldr	r2, [pc, #104]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 801883c:	f023 0310 	bic.w	r3, r3, #16
 8018840:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8018842:	4b18      	ldr	r3, [pc, #96]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801884a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801884e:	687a      	ldr	r2, [r7, #4]
 8018850:	69d2      	ldr	r2, [r2, #28]
 8018852:	00d2      	lsls	r2, r2, #3
 8018854:	4913      	ldr	r1, [pc, #76]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018856:	4313      	orrs	r3, r2
 8018858:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 801885a:	4b12      	ldr	r3, [pc, #72]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 801885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801885e:	4a11      	ldr	r2, [pc, #68]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018860:	f043 0310 	orr.w	r3, r3, #16
 8018864:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8018866:	4b0f      	ldr	r3, [pc, #60]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	4a0e      	ldr	r2, [pc, #56]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 801886c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018870:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018872:	f7f7 fe79 	bl	8010568 <HAL_GetTick>
 8018876:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018878:	e008      	b.n	801888c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801887a:	f7f7 fe75 	bl	8010568 <HAL_GetTick>
 801887e:	4602      	mov	r2, r0
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	1ad3      	subs	r3, r2, r3
 8018884:	2b02      	cmp	r3, #2
 8018886:	d901      	bls.n	801888c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8018888:	2303      	movs	r3, #3
 801888a:	e006      	b.n	801889a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801888c:	4b05      	ldr	r3, [pc, #20]	; (80188a4 <RCCEx_PLL3_Config+0x128>)
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018894:	2b00      	cmp	r3, #0
 8018896:	d0f0      	beq.n	801887a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8018898:	2300      	movs	r3, #0
}
 801889a:	4618      	mov	r0, r3
 801889c:	3710      	adds	r7, #16
 801889e:	46bd      	mov	sp, r7
 80188a0:	bd80      	pop	{r7, pc}
 80188a2:	bf00      	nop
 80188a4:	46020c00 	.word	0x46020c00
 80188a8:	80800000 	.word	0x80800000

080188ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b084      	sub	sp, #16
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80188b4:	2301      	movs	r3, #1
 80188b6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d068      	beq.n	8018990 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80188c4:	b2db      	uxtb	r3, r3
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d106      	bne.n	80188d8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	2200      	movs	r2, #0
 80188ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80188d2:	6878      	ldr	r0, [r7, #4]
 80188d4:	f7f7 fb06 	bl	800fee4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2202      	movs	r2, #2
 80188dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80188e0:	4b2e      	ldr	r3, [pc, #184]	; (801899c <HAL_RTC_Init+0xf0>)
 80188e2:	22ca      	movs	r2, #202	; 0xca
 80188e4:	625a      	str	r2, [r3, #36]	; 0x24
 80188e6:	4b2d      	ldr	r3, [pc, #180]	; (801899c <HAL_RTC_Init+0xf0>)
 80188e8:	2253      	movs	r2, #83	; 0x53
 80188ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f000 fb81 	bl	8018ff4 <RTC_EnterInitMode>
 80188f2:	4603      	mov	r3, r0
 80188f4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80188f6:	7bfb      	ldrb	r3, [r7, #15]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d13f      	bne.n	801897c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80188fc:	4b27      	ldr	r3, [pc, #156]	; (801899c <HAL_RTC_Init+0xf0>)
 80188fe:	699b      	ldr	r3, [r3, #24]
 8018900:	4a26      	ldr	r2, [pc, #152]	; (801899c <HAL_RTC_Init+0xf0>)
 8018902:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8018906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801890a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 801890c:	4b23      	ldr	r3, [pc, #140]	; (801899c <HAL_RTC_Init+0xf0>)
 801890e:	699a      	ldr	r2, [r3, #24]
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6859      	ldr	r1, [r3, #4]
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	691b      	ldr	r3, [r3, #16]
 8018918:	4319      	orrs	r1, r3
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	699b      	ldr	r3, [r3, #24]
 801891e:	430b      	orrs	r3, r1
 8018920:	491e      	ldr	r1, [pc, #120]	; (801899c <HAL_RTC_Init+0xf0>)
 8018922:	4313      	orrs	r3, r2
 8018924:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	68da      	ldr	r2, [r3, #12]
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	689b      	ldr	r3, [r3, #8]
 801892e:	041b      	lsls	r3, r3, #16
 8018930:	491a      	ldr	r1, [pc, #104]	; (801899c <HAL_RTC_Init+0xf0>)
 8018932:	4313      	orrs	r3, r2
 8018934:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8018936:	4b19      	ldr	r3, [pc, #100]	; (801899c <HAL_RTC_Init+0xf0>)
 8018938:	68db      	ldr	r3, [r3, #12]
 801893a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018946:	430b      	orrs	r3, r1
 8018948:	4914      	ldr	r1, [pc, #80]	; (801899c <HAL_RTC_Init+0xf0>)
 801894a:	4313      	orrs	r3, r2
 801894c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f000 fb84 	bl	801905c <RTC_ExitInitMode>
 8018954:	4603      	mov	r3, r0
 8018956:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8018958:	7bfb      	ldrb	r3, [r7, #15]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d10e      	bne.n	801897c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 801895e:	4b0f      	ldr	r3, [pc, #60]	; (801899c <HAL_RTC_Init+0xf0>)
 8018960:	699b      	ldr	r3, [r3, #24]
 8018962:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	6a19      	ldr	r1, [r3, #32]
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	69db      	ldr	r3, [r3, #28]
 801896e:	4319      	orrs	r1, r3
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	695b      	ldr	r3, [r3, #20]
 8018974:	430b      	orrs	r3, r1
 8018976:	4909      	ldr	r1, [pc, #36]	; (801899c <HAL_RTC_Init+0xf0>)
 8018978:	4313      	orrs	r3, r2
 801897a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801897c:	4b07      	ldr	r3, [pc, #28]	; (801899c <HAL_RTC_Init+0xf0>)
 801897e:	22ff      	movs	r2, #255	; 0xff
 8018980:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8018982:	7bfb      	ldrb	r3, [r7, #15]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d103      	bne.n	8018990 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2201      	movs	r2, #1
 801898c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8018990:	7bfb      	ldrb	r3, [r7, #15]
}
 8018992:	4618      	mov	r0, r3
 8018994:	3710      	adds	r7, #16
 8018996:	46bd      	mov	sp, r7
 8018998:	bd80      	pop	{r7, pc}
 801899a:	bf00      	nop
 801899c:	46007800 	.word	0x46007800

080189a0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80189a0:	b590      	push	{r4, r7, lr}
 80189a2:	b087      	sub	sp, #28
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	60f8      	str	r0, [r7, #12]
 80189a8:	60b9      	str	r1, [r7, #8]
 80189aa:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80189b2:	2b01      	cmp	r3, #1
 80189b4:	d101      	bne.n	80189ba <HAL_RTC_SetTime+0x1a>
 80189b6:	2302      	movs	r3, #2
 80189b8:	e088      	b.n	8018acc <HAL_RTC_SetTime+0x12c>
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	2201      	movs	r2, #1
 80189be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	2202      	movs	r2, #2
 80189c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80189ca:	4b42      	ldr	r3, [pc, #264]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 80189cc:	22ca      	movs	r2, #202	; 0xca
 80189ce:	625a      	str	r2, [r3, #36]	; 0x24
 80189d0:	4b40      	ldr	r3, [pc, #256]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 80189d2:	2253      	movs	r2, #83	; 0x53
 80189d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80189d6:	68f8      	ldr	r0, [r7, #12]
 80189d8:	f000 fb0c 	bl	8018ff4 <RTC_EnterInitMode>
 80189dc:	4603      	mov	r3, r0
 80189de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80189e0:	7cfb      	ldrb	r3, [r7, #19]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d163      	bne.n	8018aae <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80189e6:	4b3b      	ldr	r3, [pc, #236]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 80189e8:	68db      	ldr	r3, [r3, #12]
 80189ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80189ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80189f2:	d057      	beq.n	8018aa4 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d125      	bne.n	8018a46 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80189fa:	4b36      	ldr	r3, [pc, #216]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 80189fc:	699b      	ldr	r3, [r3, #24]
 80189fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d102      	bne.n	8018a0c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8018a06:	68bb      	ldr	r3, [r7, #8]
 8018a08:	2200      	movs	r2, #0
 8018a0a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a0c:	68bb      	ldr	r3, [r7, #8]
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	4618      	mov	r0, r3
 8018a12:	f000 fb61 	bl	80190d8 <RTC_ByteToBcd2>
 8018a16:	4603      	mov	r3, r0
 8018a18:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018a1a:	68bb      	ldr	r3, [r7, #8]
 8018a1c:	785b      	ldrb	r3, [r3, #1]
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f000 fb5a 	bl	80190d8 <RTC_ByteToBcd2>
 8018a24:	4603      	mov	r3, r0
 8018a26:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a28:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8018a2a:	68bb      	ldr	r3, [r7, #8]
 8018a2c:	789b      	ldrb	r3, [r3, #2]
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f000 fb52 	bl	80190d8 <RTC_ByteToBcd2>
 8018a34:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018a36:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8018a3a:	68bb      	ldr	r3, [r7, #8]
 8018a3c:	78db      	ldrb	r3, [r3, #3]
 8018a3e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a40:	4313      	orrs	r3, r2
 8018a42:	617b      	str	r3, [r7, #20]
 8018a44:	e017      	b.n	8018a76 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8018a46:	4b23      	ldr	r3, [pc, #140]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 8018a48:	699b      	ldr	r3, [r3, #24]
 8018a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d102      	bne.n	8018a58 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8018a52:	68bb      	ldr	r3, [r7, #8]
 8018a54:	2200      	movs	r2, #0
 8018a56:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a58:	68bb      	ldr	r3, [r7, #8]
 8018a5a:	781b      	ldrb	r3, [r3, #0]
 8018a5c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018a5e:	68bb      	ldr	r3, [r7, #8]
 8018a60:	785b      	ldrb	r3, [r3, #1]
 8018a62:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a64:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8018a66:	68ba      	ldr	r2, [r7, #8]
 8018a68:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018a6a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8018a6c:	68bb      	ldr	r3, [r7, #8]
 8018a6e:	78db      	ldrb	r3, [r3, #3]
 8018a70:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a72:	4313      	orrs	r3, r2
 8018a74:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8018a76:	4a17      	ldr	r2, [pc, #92]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8018a7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8018a82:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8018a84:	4b13      	ldr	r3, [pc, #76]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 8018a86:	699b      	ldr	r3, [r3, #24]
 8018a88:	4a12      	ldr	r2, [pc, #72]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 8018a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018a8e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8018a90:	4b10      	ldr	r3, [pc, #64]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 8018a92:	699a      	ldr	r2, [r3, #24]
 8018a94:	68bb      	ldr	r3, [r7, #8]
 8018a96:	68d9      	ldr	r1, [r3, #12]
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	691b      	ldr	r3, [r3, #16]
 8018a9c:	430b      	orrs	r3, r1
 8018a9e:	490d      	ldr	r1, [pc, #52]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 8018aa0:	4313      	orrs	r3, r2
 8018aa2:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018aa4:	68f8      	ldr	r0, [r7, #12]
 8018aa6:	f000 fad9 	bl	801905c <RTC_ExitInitMode>
 8018aaa:	4603      	mov	r3, r0
 8018aac:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018aae:	4b09      	ldr	r3, [pc, #36]	; (8018ad4 <HAL_RTC_SetTime+0x134>)
 8018ab0:	22ff      	movs	r2, #255	; 0xff
 8018ab2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8018ab4:	7cfb      	ldrb	r3, [r7, #19]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d103      	bne.n	8018ac2 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	2201      	movs	r2, #1
 8018abe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8018aca:	7cfb      	ldrb	r3, [r7, #19]
}
 8018acc:	4618      	mov	r0, r3
 8018ace:	371c      	adds	r7, #28
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd90      	pop	{r4, r7, pc}
 8018ad4:	46007800 	.word	0x46007800

08018ad8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b086      	sub	sp, #24
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	60f8      	str	r0, [r7, #12]
 8018ae0:	60b9      	str	r1, [r7, #8]
 8018ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8018ae4:	4b2c      	ldr	r3, [pc, #176]	; (8018b98 <HAL_RTC_GetTime+0xc0>)
 8018ae6:	689a      	ldr	r2, [r3, #8]
 8018ae8:	68bb      	ldr	r3, [r7, #8]
 8018aea:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8018aec:	4b2a      	ldr	r3, [pc, #168]	; (8018b98 <HAL_RTC_GetTime+0xc0>)
 8018aee:	68db      	ldr	r3, [r3, #12]
 8018af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018af8:	d049      	beq.n	8018b8e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8018afa:	4b27      	ldr	r3, [pc, #156]	; (8018b98 <HAL_RTC_GetTime+0xc0>)
 8018afc:	691b      	ldr	r3, [r3, #16]
 8018afe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8018b02:	68bb      	ldr	r3, [r7, #8]
 8018b04:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8018b06:	4b24      	ldr	r3, [pc, #144]	; (8018b98 <HAL_RTC_GetTime+0xc0>)
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8018b0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8018b12:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8018b14:	697b      	ldr	r3, [r7, #20]
 8018b16:	0c1b      	lsrs	r3, r3, #16
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018b1e:	b2da      	uxtb	r2, r3
 8018b20:	68bb      	ldr	r3, [r7, #8]
 8018b22:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8018b24:	697b      	ldr	r3, [r7, #20]
 8018b26:	0a1b      	lsrs	r3, r3, #8
 8018b28:	b2db      	uxtb	r3, r3
 8018b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018b2e:	b2da      	uxtb	r2, r3
 8018b30:	68bb      	ldr	r3, [r7, #8]
 8018b32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018b3c:	b2da      	uxtb	r2, r3
 8018b3e:	68bb      	ldr	r3, [r7, #8]
 8018b40:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8018b42:	697b      	ldr	r3, [r7, #20]
 8018b44:	0d9b      	lsrs	r3, r3, #22
 8018b46:	b2db      	uxtb	r3, r3
 8018b48:	f003 0301 	and.w	r3, r3, #1
 8018b4c:	b2da      	uxtb	r2, r3
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d11a      	bne.n	8018b8e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f000 fadb 	bl	8019118 <RTC_Bcd2ToByte>
 8018b62:	4603      	mov	r3, r0
 8018b64:	461a      	mov	r2, r3
 8018b66:	68bb      	ldr	r3, [r7, #8]
 8018b68:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	785b      	ldrb	r3, [r3, #1]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f000 fad2 	bl	8019118 <RTC_Bcd2ToByte>
 8018b74:	4603      	mov	r3, r0
 8018b76:	461a      	mov	r2, r3
 8018b78:	68bb      	ldr	r3, [r7, #8]
 8018b7a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018b7c:	68bb      	ldr	r3, [r7, #8]
 8018b7e:	789b      	ldrb	r3, [r3, #2]
 8018b80:	4618      	mov	r0, r3
 8018b82:	f000 fac9 	bl	8019118 <RTC_Bcd2ToByte>
 8018b86:	4603      	mov	r3, r0
 8018b88:	461a      	mov	r2, r3
 8018b8a:	68bb      	ldr	r3, [r7, #8]
 8018b8c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8018b8e:	2300      	movs	r3, #0
}
 8018b90:	4618      	mov	r0, r3
 8018b92:	3718      	adds	r7, #24
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}
 8018b98:	46007800 	.word	0x46007800

08018b9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018b9c:	b590      	push	{r4, r7, lr}
 8018b9e:	b087      	sub	sp, #28
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	60f8      	str	r0, [r7, #12]
 8018ba4:	60b9      	str	r1, [r7, #8]
 8018ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018bae:	2b01      	cmp	r3, #1
 8018bb0:	d101      	bne.n	8018bb6 <HAL_RTC_SetDate+0x1a>
 8018bb2:	2302      	movs	r3, #2
 8018bb4:	e071      	b.n	8018c9a <HAL_RTC_SetDate+0xfe>
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	2201      	movs	r2, #1
 8018bba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	2202      	movs	r2, #2
 8018bc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d10e      	bne.n	8018bea <HAL_RTC_SetDate+0x4e>
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	785b      	ldrb	r3, [r3, #1]
 8018bd0:	f003 0310 	and.w	r3, r3, #16
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d008      	beq.n	8018bea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018bd8:	68bb      	ldr	r3, [r7, #8]
 8018bda:	785b      	ldrb	r3, [r3, #1]
 8018bdc:	f023 0310 	bic.w	r3, r3, #16
 8018be0:	b2db      	uxtb	r3, r3
 8018be2:	330a      	adds	r3, #10
 8018be4:	b2da      	uxtb	r2, r3
 8018be6:	68bb      	ldr	r3, [r7, #8]
 8018be8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d11c      	bne.n	8018c2a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018bf0:	68bb      	ldr	r3, [r7, #8]
 8018bf2:	78db      	ldrb	r3, [r3, #3]
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f000 fa6f 	bl	80190d8 <RTC_ByteToBcd2>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018bfe:	68bb      	ldr	r3, [r7, #8]
 8018c00:	785b      	ldrb	r3, [r3, #1]
 8018c02:	4618      	mov	r0, r3
 8018c04:	f000 fa68 	bl	80190d8 <RTC_ByteToBcd2>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018c0c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	789b      	ldrb	r3, [r3, #2]
 8018c12:	4618      	mov	r0, r3
 8018c14:	f000 fa60 	bl	80190d8 <RTC_ByteToBcd2>
 8018c18:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018c1a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	781b      	ldrb	r3, [r3, #0]
 8018c22:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018c24:	4313      	orrs	r3, r2
 8018c26:	617b      	str	r3, [r7, #20]
 8018c28:	e00e      	b.n	8018c48 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018c2a:	68bb      	ldr	r3, [r7, #8]
 8018c2c:	78db      	ldrb	r3, [r3, #3]
 8018c2e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8018c30:	68bb      	ldr	r3, [r7, #8]
 8018c32:	785b      	ldrb	r3, [r3, #1]
 8018c34:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018c36:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8018c38:	68ba      	ldr	r2, [r7, #8]
 8018c3a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8018c3c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	781b      	ldrb	r3, [r3, #0]
 8018c42:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018c44:	4313      	orrs	r3, r2
 8018c46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018c48:	4b16      	ldr	r3, [pc, #88]	; (8018ca4 <HAL_RTC_SetDate+0x108>)
 8018c4a:	22ca      	movs	r2, #202	; 0xca
 8018c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8018c4e:	4b15      	ldr	r3, [pc, #84]	; (8018ca4 <HAL_RTC_SetDate+0x108>)
 8018c50:	2253      	movs	r2, #83	; 0x53
 8018c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8018c54:	68f8      	ldr	r0, [r7, #12]
 8018c56:	f000 f9cd 	bl	8018ff4 <RTC_EnterInitMode>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8018c5e:	7cfb      	ldrb	r3, [r7, #19]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d10b      	bne.n	8018c7c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8018c64:	4a0f      	ldr	r2, [pc, #60]	; (8018ca4 <HAL_RTC_SetDate+0x108>)
 8018c66:	697b      	ldr	r3, [r7, #20]
 8018c68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018c6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8018c70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018c72:	68f8      	ldr	r0, [r7, #12]
 8018c74:	f000 f9f2 	bl	801905c <RTC_ExitInitMode>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018c7c:	4b09      	ldr	r3, [pc, #36]	; (8018ca4 <HAL_RTC_SetDate+0x108>)
 8018c7e:	22ff      	movs	r2, #255	; 0xff
 8018c80:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8018c82:	7cfb      	ldrb	r3, [r7, #19]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d103      	bne.n	8018c90 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	2201      	movs	r2, #1
 8018c8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	2200      	movs	r2, #0
 8018c94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8018c98:	7cfb      	ldrb	r3, [r7, #19]
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	371c      	adds	r7, #28
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bd90      	pop	{r4, r7, pc}
 8018ca2:	bf00      	nop
 8018ca4:	46007800 	.word	0x46007800

08018ca8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b086      	sub	sp, #24
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	60f8      	str	r0, [r7, #12]
 8018cb0:	60b9      	str	r1, [r7, #8]
 8018cb2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8018cb4:	4b22      	ldr	r3, [pc, #136]	; (8018d40 <HAL_RTC_GetDate+0x98>)
 8018cb6:	685b      	ldr	r3, [r3, #4]
 8018cb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018cbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8018cc0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018cc2:	697b      	ldr	r3, [r7, #20]
 8018cc4:	0c1b      	lsrs	r3, r3, #16
 8018cc6:	b2da      	uxtb	r2, r3
 8018cc8:	68bb      	ldr	r3, [r7, #8]
 8018cca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018ccc:	697b      	ldr	r3, [r7, #20]
 8018cce:	0a1b      	lsrs	r3, r3, #8
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	f003 031f 	and.w	r3, r3, #31
 8018cd6:	b2da      	uxtb	r2, r3
 8018cd8:	68bb      	ldr	r3, [r7, #8]
 8018cda:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8018cdc:	697b      	ldr	r3, [r7, #20]
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ce4:	b2da      	uxtb	r2, r3
 8018ce6:	68bb      	ldr	r3, [r7, #8]
 8018ce8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8018cea:	697b      	ldr	r3, [r7, #20]
 8018cec:	0b5b      	lsrs	r3, r3, #13
 8018cee:	b2db      	uxtb	r3, r3
 8018cf0:	f003 0307 	and.w	r3, r3, #7
 8018cf4:	b2da      	uxtb	r2, r3
 8018cf6:	68bb      	ldr	r3, [r7, #8]
 8018cf8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d11a      	bne.n	8018d36 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	78db      	ldrb	r3, [r3, #3]
 8018d04:	4618      	mov	r0, r3
 8018d06:	f000 fa07 	bl	8019118 <RTC_Bcd2ToByte>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	461a      	mov	r2, r3
 8018d0e:	68bb      	ldr	r3, [r7, #8]
 8018d10:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018d12:	68bb      	ldr	r3, [r7, #8]
 8018d14:	785b      	ldrb	r3, [r3, #1]
 8018d16:	4618      	mov	r0, r3
 8018d18:	f000 f9fe 	bl	8019118 <RTC_Bcd2ToByte>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	461a      	mov	r2, r3
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	789b      	ldrb	r3, [r3, #2]
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f000 f9f5 	bl	8019118 <RTC_Bcd2ToByte>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	461a      	mov	r2, r3
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8018d36:	2300      	movs	r3, #0
}
 8018d38:	4618      	mov	r0, r3
 8018d3a:	3718      	adds	r7, #24
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}
 8018d40:	46007800 	.word	0x46007800

08018d44 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8018d44:	b590      	push	{r4, r7, lr}
 8018d46:	b087      	sub	sp, #28
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	60f8      	str	r0, [r7, #12]
 8018d4c:	60b9      	str	r1, [r7, #8]
 8018d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8018d50:	2300      	movs	r3, #0
 8018d52:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018d5a:	2b01      	cmp	r3, #1
 8018d5c:	d101      	bne.n	8018d62 <HAL_RTC_SetAlarm_IT+0x1e>
 8018d5e:	2302      	movs	r3, #2
 8018d60:	e0f3      	b.n	8018f4a <HAL_RTC_SetAlarm_IT+0x206>
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	2201      	movs	r2, #1
 8018d66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	2202      	movs	r2, #2
 8018d6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8018d72:	4b78      	ldr	r3, [pc, #480]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018d74:	68db      	ldr	r3, [r3, #12]
 8018d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018d7a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8018d7c:	693b      	ldr	r3, [r7, #16]
 8018d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018d82:	d05c      	beq.n	8018e3e <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d136      	bne.n	8018df8 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8018d8a:	4b72      	ldr	r3, [pc, #456]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018d8c:	699b      	ldr	r3, [r3, #24]
 8018d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d102      	bne.n	8018d9c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	2200      	movs	r2, #0
 8018d9a:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8018d9c:	68bb      	ldr	r3, [r7, #8]
 8018d9e:	781b      	ldrb	r3, [r3, #0]
 8018da0:	4618      	mov	r0, r3
 8018da2:	f000 f999 	bl	80190d8 <RTC_ByteToBcd2>
 8018da6:	4603      	mov	r3, r0
 8018da8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	785b      	ldrb	r3, [r3, #1]
 8018dae:	4618      	mov	r0, r3
 8018db0:	f000 f992 	bl	80190d8 <RTC_ByteToBcd2>
 8018db4:	4603      	mov	r3, r0
 8018db6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8018db8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8018dba:	68bb      	ldr	r3, [r7, #8]
 8018dbc:	789b      	ldrb	r3, [r3, #2]
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f000 f98a 	bl	80190d8 <RTC_ByteToBcd2>
 8018dc4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8018dc6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8018dca:	68bb      	ldr	r3, [r7, #8]
 8018dcc:	78db      	ldrb	r3, [r3, #3]
 8018dce:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8018dd0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f000 f97c 	bl	80190d8 <RTC_ByteToBcd2>
 8018de0:	4603      	mov	r3, r0
 8018de2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8018de4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8018dec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8018df2:	4313      	orrs	r3, r2
 8018df4:	617b      	str	r3, [r7, #20]
 8018df6:	e022      	b.n	8018e3e <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8018df8:	4b56      	ldr	r3, [pc, #344]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018dfa:	699b      	ldr	r3, [r3, #24]
 8018dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d102      	bne.n	8018e0a <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8018e04:	68bb      	ldr	r3, [r7, #8]
 8018e06:	2200      	movs	r2, #0
 8018e08:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8018e0a:	68bb      	ldr	r3, [r7, #8]
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8018e10:	68bb      	ldr	r3, [r7, #8]
 8018e12:	785b      	ldrb	r3, [r3, #1]
 8018e14:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8018e16:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8018e18:	68ba      	ldr	r2, [r7, #8]
 8018e1a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8018e1c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8018e1e:	68bb      	ldr	r3, [r7, #8]
 8018e20:	78db      	ldrb	r3, [r3, #3]
 8018e22:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8018e24:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018e2c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8018e2e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8018e30:	68bb      	ldr	r3, [r7, #8]
 8018e32:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8018e34:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8018e36:	68bb      	ldr	r3, [r7, #8]
 8018e38:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8018e3a:	4313      	orrs	r3, r2
 8018e3c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018e3e:	4b45      	ldr	r3, [pc, #276]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e40:	22ca      	movs	r2, #202	; 0xca
 8018e42:	625a      	str	r2, [r3, #36]	; 0x24
 8018e44:	4b43      	ldr	r3, [pc, #268]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e46:	2253      	movs	r2, #83	; 0x53
 8018e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8018e4a:	68bb      	ldr	r3, [r7, #8]
 8018e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018e52:	d137      	bne.n	8018ec4 <HAL_RTC_SetAlarm_IT+0x180>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8018e54:	4b3f      	ldr	r3, [pc, #252]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e56:	699b      	ldr	r3, [r3, #24]
 8018e58:	4a3e      	ldr	r2, [pc, #248]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018e5e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8018e60:	4b3c      	ldr	r3, [pc, #240]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e62:	2201      	movs	r2, #1
 8018e64:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8018e66:	693b      	ldr	r3, [r7, #16]
 8018e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018e6c:	d107      	bne.n	8018e7e <HAL_RTC_SetAlarm_IT+0x13a>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8018e6e:	68bb      	ldr	r3, [r7, #8]
 8018e70:	699a      	ldr	r2, [r3, #24]
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	69db      	ldr	r3, [r3, #28]
 8018e76:	4937      	ldr	r1, [pc, #220]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e78:	4313      	orrs	r3, r2
 8018e7a:	644b      	str	r3, [r1, #68]	; 0x44
 8018e7c:	e006      	b.n	8018e8c <HAL_RTC_SetAlarm_IT+0x148>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8018e7e:	4a35      	ldr	r2, [pc, #212]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e80:	697b      	ldr	r3, [r7, #20]
 8018e82:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8018e84:	4a33      	ldr	r2, [pc, #204]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e86:	68bb      	ldr	r3, [r7, #8]
 8018e88:	699b      	ldr	r3, [r3, #24]
 8018e8a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8018e8c:	4a31      	ldr	r2, [pc, #196]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e8e:	68bb      	ldr	r3, [r7, #8]
 8018e90:	685b      	ldr	r3, [r3, #4]
 8018e92:	6713      	str	r3, [r2, #112]	; 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e98:	2b01      	cmp	r3, #1
 8018e9a:	d106      	bne.n	8018eaa <HAL_RTC_SetAlarm_IT+0x166>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAOCLR);
 8018e9c:	4b2d      	ldr	r3, [pc, #180]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018e9e:	699b      	ldr	r3, [r3, #24]
 8018ea0:	4a2c      	ldr	r2, [pc, #176]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018ea2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018ea6:	6193      	str	r3, [r2, #24]
 8018ea8:	e005      	b.n	8018eb6 <HAL_RTC_SetAlarm_IT+0x172>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAOCLR);
 8018eaa:	4b2a      	ldr	r3, [pc, #168]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018eac:	699b      	ldr	r3, [r3, #24]
 8018eae:	4a29      	ldr	r2, [pc, #164]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018eb0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8018eb4:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8018eb6:	4b27      	ldr	r3, [pc, #156]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018eb8:	699b      	ldr	r3, [r3, #24]
 8018eba:	4a26      	ldr	r2, [pc, #152]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018ebc:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8018ec0:	6193      	str	r3, [r2, #24]
 8018ec2:	e036      	b.n	8018f32 <HAL_RTC_SetAlarm_IT+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8018ec4:	4b23      	ldr	r3, [pc, #140]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018ec6:	699b      	ldr	r3, [r3, #24]
 8018ec8:	4a22      	ldr	r2, [pc, #136]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018eca:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8018ece:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8018ed0:	4b20      	ldr	r3, [pc, #128]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018ed2:	2202      	movs	r2, #2
 8018ed4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018edc:	d107      	bne.n	8018eee <HAL_RTC_SetAlarm_IT+0x1aa>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8018ede:	68bb      	ldr	r3, [r7, #8]
 8018ee0:	699a      	ldr	r2, [r3, #24]
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	69db      	ldr	r3, [r3, #28]
 8018ee6:	491b      	ldr	r1, [pc, #108]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018ee8:	4313      	orrs	r3, r2
 8018eea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8018eec:	e006      	b.n	8018efc <HAL_RTC_SetAlarm_IT+0x1b8>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8018eee:	4a19      	ldr	r2, [pc, #100]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018ef0:	697b      	ldr	r3, [r7, #20]
 8018ef2:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8018ef4:	4a17      	ldr	r2, [pc, #92]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018ef6:	68bb      	ldr	r3, [r7, #8]
 8018ef8:	699b      	ldr	r3, [r3, #24]
 8018efa:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8018efc:	4a15      	ldr	r2, [pc, #84]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018efe:	68bb      	ldr	r3, [r7, #8]
 8018f00:	685b      	ldr	r3, [r3, #4]
 8018f02:	6753      	str	r3, [r2, #116]	; 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8018f04:	68bb      	ldr	r3, [r7, #8]
 8018f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f08:	2b01      	cmp	r3, #1
 8018f0a:	d106      	bne.n	8018f1a <HAL_RTC_SetAlarm_IT+0x1d6>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBOCLR);
 8018f0c:	4b11      	ldr	r3, [pc, #68]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018f0e:	699b      	ldr	r3, [r3, #24]
 8018f10:	4a10      	ldr	r2, [pc, #64]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018f16:	6193      	str	r3, [r2, #24]
 8018f18:	e005      	b.n	8018f26 <HAL_RTC_SetAlarm_IT+0x1e2>
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBOCLR);
 8018f1a:	4b0e      	ldr	r3, [pc, #56]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018f1c:	699b      	ldr	r3, [r3, #24]
 8018f1e:	4a0d      	ldr	r2, [pc, #52]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018f24:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8018f26:	4b0b      	ldr	r3, [pc, #44]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018f28:	699b      	ldr	r3, [r3, #24]
 8018f2a:	4a0a      	ldr	r2, [pc, #40]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018f2c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8018f30:	6193      	str	r3, [r2, #24]
  }


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018f32:	4b08      	ldr	r3, [pc, #32]	; (8018f54 <HAL_RTC_SetAlarm_IT+0x210>)
 8018f34:	22ff      	movs	r2, #255	; 0xff
 8018f36:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	2201      	movs	r2, #1
 8018f3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	2200      	movs	r2, #0
 8018f44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8018f48:	2300      	movs	r3, #0
}
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	371c      	adds	r7, #28
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd90      	pop	{r4, r7, pc}
 8018f52:	bf00      	nop
 8018f54:	46007800 	.word	0x46007800

08018f58 <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b084      	sub	sp, #16
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 8018f60:	4b10      	ldr	r3, [pc, #64]	; (8018fa4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8018f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f64:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	f003 0301 	and.w	r3, r3, #1
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d005      	beq.n	8018f7c <HAL_RTC_AlarmIRQHandler+0x24>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8018f70:	4b0c      	ldr	r3, [pc, #48]	; (8018fa4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8018f72:	2201      	movs	r2, #1
 8018f74:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	f7f5 fb34 	bl	800e5e4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	f003 0302 	and.w	r3, r3, #2
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d005      	beq.n	8018f92 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8018f86:	4b07      	ldr	r3, [pc, #28]	; (8018fa4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8018f88:	2202      	movs	r2, #2
 8018f8a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f000 f949 	bl	8019224 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	2201      	movs	r2, #1
 8018f96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8018f9a:	bf00      	nop
 8018f9c:	3710      	adds	r7, #16
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd80      	pop	{r7, pc}
 8018fa2:	bf00      	nop
 8018fa4:	46007800 	.word	0x46007800

08018fa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b084      	sub	sp, #16
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8018fb0:	4b0f      	ldr	r3, [pc, #60]	; (8018ff0 <HAL_RTC_WaitForSynchro+0x48>)
 8018fb2:	68db      	ldr	r3, [r3, #12]
 8018fb4:	4a0e      	ldr	r2, [pc, #56]	; (8018ff0 <HAL_RTC_WaitForSynchro+0x48>)
 8018fb6:	f023 0320 	bic.w	r3, r3, #32
 8018fba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8018fbc:	f7f7 fad4 	bl	8010568 <HAL_GetTick>
 8018fc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8018fc2:	e009      	b.n	8018fd8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018fc4:	f7f7 fad0 	bl	8010568 <HAL_GetTick>
 8018fc8:	4602      	mov	r2, r0
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	1ad3      	subs	r3, r2, r3
 8018fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018fd2:	d901      	bls.n	8018fd8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8018fd4:	2303      	movs	r3, #3
 8018fd6:	e006      	b.n	8018fe6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8018fd8:	4b05      	ldr	r3, [pc, #20]	; (8018ff0 <HAL_RTC_WaitForSynchro+0x48>)
 8018fda:	68db      	ldr	r3, [r3, #12]
 8018fdc:	f003 0320 	and.w	r3, r3, #32
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d0ef      	beq.n	8018fc4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8018fe4:	2300      	movs	r3, #0
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	3710      	adds	r7, #16
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd80      	pop	{r7, pc}
 8018fee:	bf00      	nop
 8018ff0:	46007800 	.word	0x46007800

08018ff4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b084      	sub	sp, #16
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8019000:	4b15      	ldr	r3, [pc, #84]	; (8019058 <RTC_EnterInitMode+0x64>)
 8019002:	68db      	ldr	r3, [r3, #12]
 8019004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019008:	2b00      	cmp	r3, #0
 801900a:	d120      	bne.n	801904e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801900c:	4b12      	ldr	r3, [pc, #72]	; (8019058 <RTC_EnterInitMode+0x64>)
 801900e:	68db      	ldr	r3, [r3, #12]
 8019010:	4a11      	ldr	r2, [pc, #68]	; (8019058 <RTC_EnterInitMode+0x64>)
 8019012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019016:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8019018:	f7f7 faa6 	bl	8010568 <HAL_GetTick>
 801901c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801901e:	e00d      	b.n	801903c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8019020:	f7f7 faa2 	bl	8010568 <HAL_GetTick>
 8019024:	4602      	mov	r2, r0
 8019026:	68bb      	ldr	r3, [r7, #8]
 8019028:	1ad3      	subs	r3, r2, r3
 801902a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801902e:	d905      	bls.n	801903c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8019030:	2303      	movs	r3, #3
 8019032:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	2203      	movs	r2, #3
 8019038:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801903c:	4b06      	ldr	r3, [pc, #24]	; (8019058 <RTC_EnterInitMode+0x64>)
 801903e:	68db      	ldr	r3, [r3, #12]
 8019040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019044:	2b00      	cmp	r3, #0
 8019046:	d102      	bne.n	801904e <RTC_EnterInitMode+0x5a>
 8019048:	7bfb      	ldrb	r3, [r7, #15]
 801904a:	2b03      	cmp	r3, #3
 801904c:	d1e8      	bne.n	8019020 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 801904e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019050:	4618      	mov	r0, r3
 8019052:	3710      	adds	r7, #16
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}
 8019058:	46007800 	.word	0x46007800

0801905c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b084      	sub	sp, #16
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019064:	2300      	movs	r3, #0
 8019066:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8019068:	4b1a      	ldr	r3, [pc, #104]	; (80190d4 <RTC_ExitInitMode+0x78>)
 801906a:	68db      	ldr	r3, [r3, #12]
 801906c:	4a19      	ldr	r2, [pc, #100]	; (80190d4 <RTC_ExitInitMode+0x78>)
 801906e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019072:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8019074:	4b17      	ldr	r3, [pc, #92]	; (80190d4 <RTC_ExitInitMode+0x78>)
 8019076:	699b      	ldr	r3, [r3, #24]
 8019078:	f003 0320 	and.w	r3, r3, #32
 801907c:	2b00      	cmp	r3, #0
 801907e:	d10c      	bne.n	801909a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f7ff ff91 	bl	8018fa8 <HAL_RTC_WaitForSynchro>
 8019086:	4603      	mov	r3, r0
 8019088:	2b00      	cmp	r3, #0
 801908a:	d01e      	beq.n	80190ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	2203      	movs	r2, #3
 8019090:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8019094:	2303      	movs	r3, #3
 8019096:	73fb      	strb	r3, [r7, #15]
 8019098:	e017      	b.n	80190ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801909a:	4b0e      	ldr	r3, [pc, #56]	; (80190d4 <RTC_ExitInitMode+0x78>)
 801909c:	699b      	ldr	r3, [r3, #24]
 801909e:	4a0d      	ldr	r2, [pc, #52]	; (80190d4 <RTC_ExitInitMode+0x78>)
 80190a0:	f023 0320 	bic.w	r3, r3, #32
 80190a4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80190a6:	6878      	ldr	r0, [r7, #4]
 80190a8:	f7ff ff7e 	bl	8018fa8 <HAL_RTC_WaitForSynchro>
 80190ac:	4603      	mov	r3, r0
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d005      	beq.n	80190be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	2203      	movs	r2, #3
 80190b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80190ba:	2303      	movs	r3, #3
 80190bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80190be:	4b05      	ldr	r3, [pc, #20]	; (80190d4 <RTC_ExitInitMode+0x78>)
 80190c0:	699b      	ldr	r3, [r3, #24]
 80190c2:	4a04      	ldr	r2, [pc, #16]	; (80190d4 <RTC_ExitInitMode+0x78>)
 80190c4:	f043 0320 	orr.w	r3, r3, #32
 80190c8:	6193      	str	r3, [r2, #24]
  }
  return status;
 80190ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	46007800 	.word	0x46007800

080190d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80190d8:	b480      	push	{r7}
 80190da:	b085      	sub	sp, #20
 80190dc:	af00      	add	r7, sp, #0
 80190de:	4603      	mov	r3, r0
 80190e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80190e2:	2300      	movs	r3, #0
 80190e4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80190e6:	79fb      	ldrb	r3, [r7, #7]
 80190e8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80190ea:	e005      	b.n	80190f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	3301      	adds	r3, #1
 80190f0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80190f2:	7afb      	ldrb	r3, [r7, #11]
 80190f4:	3b0a      	subs	r3, #10
 80190f6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80190f8:	7afb      	ldrb	r3, [r7, #11]
 80190fa:	2b09      	cmp	r3, #9
 80190fc:	d8f6      	bhi.n	80190ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	b2db      	uxtb	r3, r3
 8019102:	011b      	lsls	r3, r3, #4
 8019104:	b2da      	uxtb	r2, r3
 8019106:	7afb      	ldrb	r3, [r7, #11]
 8019108:	4313      	orrs	r3, r2
 801910a:	b2db      	uxtb	r3, r3
}
 801910c:	4618      	mov	r0, r3
 801910e:	3714      	adds	r7, #20
 8019110:	46bd      	mov	sp, r7
 8019112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019116:	4770      	bx	lr

08019118 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8019118:	b480      	push	{r7}
 801911a:	b085      	sub	sp, #20
 801911c:	af00      	add	r7, sp, #0
 801911e:	4603      	mov	r3, r0
 8019120:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8019122:	79fb      	ldrb	r3, [r7, #7]
 8019124:	091b      	lsrs	r3, r3, #4
 8019126:	b2db      	uxtb	r3, r3
 8019128:	461a      	mov	r2, r3
 801912a:	4613      	mov	r3, r2
 801912c:	009b      	lsls	r3, r3, #2
 801912e:	4413      	add	r3, r2
 8019130:	005b      	lsls	r3, r3, #1
 8019132:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	b2da      	uxtb	r2, r3
 8019138:	79fb      	ldrb	r3, [r7, #7]
 801913a:	f003 030f 	and.w	r3, r3, #15
 801913e:	b2db      	uxtb	r3, r3
 8019140:	4413      	add	r3, r2
 8019142:	b2db      	uxtb	r3, r3
}
 8019144:	4618      	mov	r0, r3
 8019146:	3714      	adds	r7, #20
 8019148:	46bd      	mov	sp, r7
 801914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914e:	4770      	bx	lr

08019150 <HAL_RTCEx_SetLowPowerCalib>:
  *             @arg RTC_LPCAL_SET: Low power mode.
  *             @arg RTC_LPCAL_RESET: High consumption mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetLowPowerCalib(RTC_HandleTypeDef *hrtc, uint32_t LowPowerCalib)
{
 8019150:	b480      	push	{r7}
 8019152:	b083      	sub	sp, #12
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
 8019158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_LOW_POWER_CALIB(LowPowerCalib));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019160:	2b01      	cmp	r3, #1
 8019162:	d101      	bne.n	8019168 <HAL_RTCEx_SetLowPowerCalib+0x18>
 8019164:	2302      	movs	r3, #2
 8019166:	e021      	b.n	80191ac <HAL_RTCEx_SetLowPowerCalib+0x5c>
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	2201      	movs	r2, #1
 801916c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	2202      	movs	r2, #2
 8019174:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019178:	4b0f      	ldr	r3, [pc, #60]	; (80191b8 <HAL_RTCEx_SetLowPowerCalib+0x68>)
 801917a:	22ca      	movs	r2, #202	; 0xca
 801917c:	625a      	str	r2, [r3, #36]	; 0x24
 801917e:	4b0e      	ldr	r3, [pc, #56]	; (80191b8 <HAL_RTCEx_SetLowPowerCalib+0x68>)
 8019180:	2253      	movs	r2, #83	; 0x53
 8019182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Smooth calibration settings */
  MODIFY_REG(RTC->CALR, RTC_CALR_LPCAL, LowPowerCalib);
 8019184:	4b0c      	ldr	r3, [pc, #48]	; (80191b8 <HAL_RTCEx_SetLowPowerCalib+0x68>)
 8019186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019188:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801918c:	490a      	ldr	r1, [pc, #40]	; (80191b8 <HAL_RTCEx_SetLowPowerCalib+0x68>)
 801918e:	683b      	ldr	r3, [r7, #0]
 8019190:	4313      	orrs	r3, r2
 8019192:	628b      	str	r3, [r1, #40]	; 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019194:	4b08      	ldr	r3, [pc, #32]	; (80191b8 <HAL_RTCEx_SetLowPowerCalib+0x68>)
 8019196:	22ff      	movs	r2, #255	; 0xff
 8019198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2201      	movs	r2, #1
 801919e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	2200      	movs	r2, #0
 80191a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80191aa:	2300      	movs	r3, #0
}
 80191ac:	4618      	mov	r0, r3
 80191ae:	370c      	adds	r7, #12
 80191b0:	46bd      	mov	sp, r7
 80191b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b6:	4770      	bx	lr
 80191b8:	46007800 	.word	0x46007800

080191bc <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80191bc:	b480      	push	{r7}
 80191be:	b083      	sub	sp, #12
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80191ca:	2b01      	cmp	r3, #1
 80191cc:	d101      	bne.n	80191d2 <HAL_RTCEx_SetSSRU_IT+0x16>
 80191ce:	2302      	movs	r3, #2
 80191d0:	e01f      	b.n	8019212 <HAL_RTCEx_SetSSRU_IT+0x56>
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	2201      	movs	r2, #1
 80191d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2202      	movs	r2, #2
 80191de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80191e2:	4b0f      	ldr	r3, [pc, #60]	; (8019220 <HAL_RTCEx_SetSSRU_IT+0x64>)
 80191e4:	22ca      	movs	r2, #202	; 0xca
 80191e6:	625a      	str	r2, [r3, #36]	; 0x24
 80191e8:	4b0d      	ldr	r3, [pc, #52]	; (8019220 <HAL_RTCEx_SetSSRU_IT+0x64>)
 80191ea:	2253      	movs	r2, #83	; 0x53
 80191ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80191ee:	4b0c      	ldr	r3, [pc, #48]	; (8019220 <HAL_RTCEx_SetSSRU_IT+0x64>)
 80191f0:	699b      	ldr	r3, [r3, #24]
 80191f2:	4a0b      	ldr	r2, [pc, #44]	; (8019220 <HAL_RTCEx_SetSSRU_IT+0x64>)
 80191f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191f8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80191fa:	4b09      	ldr	r3, [pc, #36]	; (8019220 <HAL_RTCEx_SetSSRU_IT+0x64>)
 80191fc:	22ff      	movs	r2, #255	; 0xff
 80191fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	2201      	movs	r2, #1
 8019204:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2200      	movs	r2, #0
 801920c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8019210:	2300      	movs	r3, #0
}
 8019212:	4618      	mov	r0, r3
 8019214:	370c      	adds	r7, #12
 8019216:	46bd      	mov	sp, r7
 8019218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921c:	4770      	bx	lr
 801921e:	bf00      	nop
 8019220:	46007800 	.word	0x46007800

08019224 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8019224:	b480      	push	{r7}
 8019226:	b083      	sub	sp, #12
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 801922c:	bf00      	nop
 801922e:	370c      	adds	r7, #12
 8019230:	46bd      	mov	sp, r7
 8019232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019236:	4770      	bx	lr

08019238 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8019238:	b480      	push	{r7}
 801923a:	b083      	sub	sp, #12
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
 8019240:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	681a      	ldr	r2, [r3, #0]
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	685b      	ldr	r3, [r3, #4]
 801924a:	4910      	ldr	r1, [pc, #64]	; (801928c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 801924c:	4313      	orrs	r3, r2
 801924e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	689a      	ldr	r2, [r3, #8]
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	68db      	ldr	r3, [r3, #12]
 8019258:	431a      	orrs	r2, r3
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	699b      	ldr	r3, [r3, #24]
 801925e:	490c      	ldr	r1, [pc, #48]	; (8019290 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8019260:	4313      	orrs	r3, r2
 8019262:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8019264:	4b0a      	ldr	r3, [pc, #40]	; (8019290 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8019266:	6a1b      	ldr	r3, [r3, #32]
 8019268:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	6919      	ldr	r1, [r3, #16]
 8019270:	683b      	ldr	r3, [r7, #0]
 8019272:	695b      	ldr	r3, [r3, #20]
 8019274:	041b      	lsls	r3, r3, #16
 8019276:	430b      	orrs	r3, r1
 8019278:	4905      	ldr	r1, [pc, #20]	; (8019290 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801927a:	4313      	orrs	r3, r2
 801927c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 801927e:	2300      	movs	r3, #0
}
 8019280:	4618      	mov	r0, r3
 8019282:	370c      	adds	r7, #12
 8019284:	46bd      	mov	sp, r7
 8019286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801928a:	4770      	bx	lr
 801928c:	46007800 	.word	0x46007800
 8019290:	46007c00 	.word	0x46007c00

08019294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b082      	sub	sp, #8
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d101      	bne.n	80192a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80192a2:	2301      	movs	r3, #1
 80192a4:	e054      	b.n	8019350 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80192ac:	b2db      	uxtb	r3, r3
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d111      	bne.n	80192d6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	2200      	movs	r2, #0
 80192b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80192ba:	6878      	ldr	r0, [r7, #4]
 80192bc:	f000 fc80 	bl	8019bc0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d102      	bne.n	80192ce <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	4a23      	ldr	r2, [pc, #140]	; (8019358 <HAL_TIM_Base_Init+0xc4>)
 80192cc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80192d2:	6878      	ldr	r0, [r7, #4]
 80192d4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	2202      	movs	r2, #2
 80192da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681a      	ldr	r2, [r3, #0]
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	3304      	adds	r3, #4
 80192e6:	4619      	mov	r1, r3
 80192e8:	4610      	mov	r0, r2
 80192ea:	f000 fb6f 	bl	80199cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	2201      	movs	r2, #1
 80192f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	2201      	movs	r2, #1
 80192fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	2201      	movs	r2, #1
 8019302:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2201      	movs	r2, #1
 801930a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	2201      	movs	r2, #1
 8019312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	2201      	movs	r2, #1
 801931a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	2201      	movs	r2, #1
 8019322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	2201      	movs	r2, #1
 801932a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	2201      	movs	r2, #1
 8019332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2201      	movs	r2, #1
 801933a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	2201      	movs	r2, #1
 8019342:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	2201      	movs	r2, #1
 801934a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801934e:	2300      	movs	r3, #0
}
 8019350:	4618      	mov	r0, r3
 8019352:	3708      	adds	r7, #8
 8019354:	46bd      	mov	sp, r7
 8019356:	bd80      	pop	{r7, pc}
 8019358:	0800ff8d 	.word	0x0800ff8d

0801935c <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b082      	sub	sp, #8
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	2202      	movs	r2, #2
 8019368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	6a1a      	ldr	r2, [r3, #32]
 8019372:	f241 1311 	movw	r3, #4369	; 0x1111
 8019376:	4013      	ands	r3, r2
 8019378:	2b00      	cmp	r3, #0
 801937a:	d10f      	bne.n	801939c <HAL_TIM_Base_DeInit+0x40>
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	6a1a      	ldr	r2, [r3, #32]
 8019382:	f244 4344 	movw	r3, #17476	; 0x4444
 8019386:	4013      	ands	r3, r2
 8019388:	2b00      	cmp	r3, #0
 801938a:	d107      	bne.n	801939c <HAL_TIM_Base_DeInit+0x40>
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	681a      	ldr	r2, [r3, #0]
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	f022 0201 	bic.w	r2, r2, #1
 801939a:	601a      	str	r2, [r3, #0]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  if (htim->Base_MspDeInitCallback == NULL)
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d102      	bne.n	80193aa <HAL_TIM_Base_DeInit+0x4e>
  {
    htim->Base_MspDeInitCallback = HAL_TIM_Base_MspDeInit;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	4a1f      	ldr	r2, [pc, #124]	; (8019424 <HAL_TIM_Base_DeInit+0xc8>)
 80193a8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193ae:	6878      	ldr	r0, [r7, #4]
 80193b0:	4798      	blx	r3
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	2200      	movs	r2, #0
 80193b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	2200      	movs	r2, #0
 80193be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	2200      	movs	r2, #0
 80193c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	2200      	movs	r2, #0
 80193ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	2200      	movs	r2, #0
 80193d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	2200      	movs	r2, #0
 80193de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	2200      	movs	r2, #0
 80193e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	2200      	movs	r2, #0
 80193ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	2200      	movs	r2, #0
 80193f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	2200      	movs	r2, #0
 80193fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	2200      	movs	r2, #0
 8019406:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	2200      	movs	r2, #0
 801940e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	2200      	movs	r2, #0
 8019416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801941a:	2300      	movs	r3, #0
}
 801941c:	4618      	mov	r0, r3
 801941e:	3708      	adds	r7, #8
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}
 8019424:	0801000d 	.word	0x0801000d

08019428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019428:	b480      	push	{r7}
 801942a:	b085      	sub	sp, #20
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019436:	b2db      	uxtb	r3, r3
 8019438:	2b01      	cmp	r3, #1
 801943a:	d001      	beq.n	8019440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801943c:	2301      	movs	r3, #1
 801943e:	e072      	b.n	8019526 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	2202      	movs	r2, #2
 8019444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	68da      	ldr	r2, [r3, #12]
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	f042 0201 	orr.w	r2, r2, #1
 8019456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	4a35      	ldr	r2, [pc, #212]	; (8019534 <HAL_TIM_Base_Start_IT+0x10c>)
 801945e:	4293      	cmp	r3, r2
 8019460:	d040      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	4a34      	ldr	r2, [pc, #208]	; (8019538 <HAL_TIM_Base_Start_IT+0x110>)
 8019468:	4293      	cmp	r3, r2
 801946a:	d03b      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019474:	d036      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801947e:	d031      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	4a2d      	ldr	r2, [pc, #180]	; (801953c <HAL_TIM_Base_Start_IT+0x114>)
 8019486:	4293      	cmp	r3, r2
 8019488:	d02c      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	4a2c      	ldr	r2, [pc, #176]	; (8019540 <HAL_TIM_Base_Start_IT+0x118>)
 8019490:	4293      	cmp	r3, r2
 8019492:	d027      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	4a2a      	ldr	r2, [pc, #168]	; (8019544 <HAL_TIM_Base_Start_IT+0x11c>)
 801949a:	4293      	cmp	r3, r2
 801949c:	d022      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	4a29      	ldr	r2, [pc, #164]	; (8019548 <HAL_TIM_Base_Start_IT+0x120>)
 80194a4:	4293      	cmp	r3, r2
 80194a6:	d01d      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	4a27      	ldr	r2, [pc, #156]	; (801954c <HAL_TIM_Base_Start_IT+0x124>)
 80194ae:	4293      	cmp	r3, r2
 80194b0:	d018      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	4a26      	ldr	r2, [pc, #152]	; (8019550 <HAL_TIM_Base_Start_IT+0x128>)
 80194b8:	4293      	cmp	r3, r2
 80194ba:	d013      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	4a24      	ldr	r2, [pc, #144]	; (8019554 <HAL_TIM_Base_Start_IT+0x12c>)
 80194c2:	4293      	cmp	r3, r2
 80194c4:	d00e      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	4a23      	ldr	r2, [pc, #140]	; (8019558 <HAL_TIM_Base_Start_IT+0x130>)
 80194cc:	4293      	cmp	r3, r2
 80194ce:	d009      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	4a21      	ldr	r2, [pc, #132]	; (801955c <HAL_TIM_Base_Start_IT+0x134>)
 80194d6:	4293      	cmp	r3, r2
 80194d8:	d004      	beq.n	80194e4 <HAL_TIM_Base_Start_IT+0xbc>
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	4a20      	ldr	r2, [pc, #128]	; (8019560 <HAL_TIM_Base_Start_IT+0x138>)
 80194e0:	4293      	cmp	r3, r2
 80194e2:	d115      	bne.n	8019510 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	689a      	ldr	r2, [r3, #8]
 80194ea:	4b1e      	ldr	r3, [pc, #120]	; (8019564 <HAL_TIM_Base_Start_IT+0x13c>)
 80194ec:	4013      	ands	r3, r2
 80194ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	2b06      	cmp	r3, #6
 80194f4:	d015      	beq.n	8019522 <HAL_TIM_Base_Start_IT+0xfa>
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80194fc:	d011      	beq.n	8019522 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	681a      	ldr	r2, [r3, #0]
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	f042 0201 	orr.w	r2, r2, #1
 801950c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801950e:	e008      	b.n	8019522 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	681a      	ldr	r2, [r3, #0]
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	f042 0201 	orr.w	r2, r2, #1
 801951e:	601a      	str	r2, [r3, #0]
 8019520:	e000      	b.n	8019524 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019524:	2300      	movs	r3, #0
}
 8019526:	4618      	mov	r0, r3
 8019528:	3714      	adds	r7, #20
 801952a:	46bd      	mov	sp, r7
 801952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019530:	4770      	bx	lr
 8019532:	bf00      	nop
 8019534:	40012c00 	.word	0x40012c00
 8019538:	50012c00 	.word	0x50012c00
 801953c:	40000400 	.word	0x40000400
 8019540:	50000400 	.word	0x50000400
 8019544:	40000800 	.word	0x40000800
 8019548:	50000800 	.word	0x50000800
 801954c:	40000c00 	.word	0x40000c00
 8019550:	50000c00 	.word	0x50000c00
 8019554:	40013400 	.word	0x40013400
 8019558:	50013400 	.word	0x50013400
 801955c:	40014000 	.word	0x40014000
 8019560:	50014000 	.word	0x50014000
 8019564:	00010007 	.word	0x00010007

08019568 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8019568:	b480      	push	{r7}
 801956a:	b083      	sub	sp, #12
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	68da      	ldr	r2, [r3, #12]
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	f022 0201 	bic.w	r2, r2, #1
 801957e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	6a1a      	ldr	r2, [r3, #32]
 8019586:	f241 1311 	movw	r3, #4369	; 0x1111
 801958a:	4013      	ands	r3, r2
 801958c:	2b00      	cmp	r3, #0
 801958e:	d10f      	bne.n	80195b0 <HAL_TIM_Base_Stop_IT+0x48>
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	6a1a      	ldr	r2, [r3, #32]
 8019596:	f244 4344 	movw	r3, #17476	; 0x4444
 801959a:	4013      	ands	r3, r2
 801959c:	2b00      	cmp	r3, #0
 801959e:	d107      	bne.n	80195b0 <HAL_TIM_Base_Stop_IT+0x48>
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	681a      	ldr	r2, [r3, #0]
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	f022 0201 	bic.w	r2, r2, #1
 80195ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2201      	movs	r2, #1
 80195b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80195b8:	2300      	movs	r3, #0
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	370c      	adds	r7, #12
 80195be:	46bd      	mov	sp, r7
 80195c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c4:	4770      	bx	lr

080195c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80195c6:	b580      	push	{r7, lr}
 80195c8:	b082      	sub	sp, #8
 80195ca:	af00      	add	r7, sp, #0
 80195cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	691b      	ldr	r3, [r3, #16]
 80195d4:	f003 0302 	and.w	r3, r3, #2
 80195d8:	2b02      	cmp	r3, #2
 80195da:	d128      	bne.n	801962e <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	68db      	ldr	r3, [r3, #12]
 80195e2:	f003 0302 	and.w	r3, r3, #2
 80195e6:	2b02      	cmp	r3, #2
 80195e8:	d121      	bne.n	801962e <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	f06f 0202 	mvn.w	r2, #2
 80195f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	2201      	movs	r2, #1
 80195f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	699b      	ldr	r3, [r3, #24]
 8019600:	f003 0303 	and.w	r3, r3, #3
 8019604:	2b00      	cmp	r3, #0
 8019606:	d005      	beq.n	8019614 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801960e:	6878      	ldr	r0, [r7, #4]
 8019610:	4798      	blx	r3
 8019612:	e009      	b.n	8019628 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801961a:	6878      	ldr	r0, [r7, #4]
 801961c:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019624:	6878      	ldr	r0, [r7, #4]
 8019626:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2200      	movs	r2, #0
 801962c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	691b      	ldr	r3, [r3, #16]
 8019634:	f003 0304 	and.w	r3, r3, #4
 8019638:	2b04      	cmp	r3, #4
 801963a:	d128      	bne.n	801968e <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	68db      	ldr	r3, [r3, #12]
 8019642:	f003 0304 	and.w	r3, r3, #4
 8019646:	2b04      	cmp	r3, #4
 8019648:	d121      	bne.n	801968e <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	f06f 0204 	mvn.w	r2, #4
 8019652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	2202      	movs	r2, #2
 8019658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	699b      	ldr	r3, [r3, #24]
 8019660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019664:	2b00      	cmp	r3, #0
 8019666:	d005      	beq.n	8019674 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801966e:	6878      	ldr	r0, [r7, #4]
 8019670:	4798      	blx	r3
 8019672:	e009      	b.n	8019688 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801967a:	6878      	ldr	r0, [r7, #4]
 801967c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019684:	6878      	ldr	r0, [r7, #4]
 8019686:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2200      	movs	r2, #0
 801968c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	691b      	ldr	r3, [r3, #16]
 8019694:	f003 0308 	and.w	r3, r3, #8
 8019698:	2b08      	cmp	r3, #8
 801969a:	d128      	bne.n	80196ee <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	68db      	ldr	r3, [r3, #12]
 80196a2:	f003 0308 	and.w	r3, r3, #8
 80196a6:	2b08      	cmp	r3, #8
 80196a8:	d121      	bne.n	80196ee <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	f06f 0208 	mvn.w	r2, #8
 80196b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	2204      	movs	r2, #4
 80196b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	69db      	ldr	r3, [r3, #28]
 80196c0:	f003 0303 	and.w	r3, r3, #3
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d005      	beq.n	80196d4 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80196ce:	6878      	ldr	r0, [r7, #4]
 80196d0:	4798      	blx	r3
 80196d2:	e009      	b.n	80196e8 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80196da:	6878      	ldr	r0, [r7, #4]
 80196dc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80196e4:	6878      	ldr	r0, [r7, #4]
 80196e6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	2200      	movs	r2, #0
 80196ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	691b      	ldr	r3, [r3, #16]
 80196f4:	f003 0310 	and.w	r3, r3, #16
 80196f8:	2b10      	cmp	r3, #16
 80196fa:	d128      	bne.n	801974e <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	68db      	ldr	r3, [r3, #12]
 8019702:	f003 0310 	and.w	r3, r3, #16
 8019706:	2b10      	cmp	r3, #16
 8019708:	d121      	bne.n	801974e <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	f06f 0210 	mvn.w	r2, #16
 8019712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	2208      	movs	r2, #8
 8019718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	69db      	ldr	r3, [r3, #28]
 8019720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019724:	2b00      	cmp	r3, #0
 8019726:	d005      	beq.n	8019734 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801972e:	6878      	ldr	r0, [r7, #4]
 8019730:	4798      	blx	r3
 8019732:	e009      	b.n	8019748 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801973a:	6878      	ldr	r0, [r7, #4]
 801973c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019744:	6878      	ldr	r0, [r7, #4]
 8019746:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	2200      	movs	r2, #0
 801974c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	691b      	ldr	r3, [r3, #16]
 8019754:	f003 0301 	and.w	r3, r3, #1
 8019758:	2b01      	cmp	r3, #1
 801975a:	d110      	bne.n	801977e <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	68db      	ldr	r3, [r3, #12]
 8019762:	f003 0301 	and.w	r3, r3, #1
 8019766:	2b01      	cmp	r3, #1
 8019768:	d109      	bne.n	801977e <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	f06f 0201 	mvn.w	r2, #1
 8019772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	691b      	ldr	r3, [r3, #16]
 8019784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019788:	2b80      	cmp	r3, #128	; 0x80
 801978a:	d110      	bne.n	80197ae <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	68db      	ldr	r3, [r3, #12]
 8019792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019796:	2b80      	cmp	r3, #128	; 0x80
 8019798:	d109      	bne.n	80197ae <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80197a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80197aa:	6878      	ldr	r0, [r7, #4]
 80197ac:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	691b      	ldr	r3, [r3, #16]
 80197b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80197b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80197bc:	d110      	bne.n	80197e0 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	68db      	ldr	r3, [r3, #12]
 80197c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80197c8:	2b80      	cmp	r3, #128	; 0x80
 80197ca:	d109      	bne.n	80197e0 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80197d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	691b      	ldr	r3, [r3, #16]
 80197e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80197ea:	2b40      	cmp	r3, #64	; 0x40
 80197ec:	d110      	bne.n	8019810 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	68db      	ldr	r3, [r3, #12]
 80197f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80197f8:	2b40      	cmp	r3, #64	; 0x40
 80197fa:	d109      	bne.n	8019810 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8019804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801980c:	6878      	ldr	r0, [r7, #4]
 801980e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	691b      	ldr	r3, [r3, #16]
 8019816:	f003 0320 	and.w	r3, r3, #32
 801981a:	2b20      	cmp	r3, #32
 801981c:	d110      	bne.n	8019840 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	68db      	ldr	r3, [r3, #12]
 8019824:	f003 0320 	and.w	r3, r3, #32
 8019828:	2b20      	cmp	r3, #32
 801982a:	d109      	bne.n	8019840 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	f06f 0220 	mvn.w	r2, #32
 8019834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801983c:	6878      	ldr	r0, [r7, #4]
 801983e:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	691b      	ldr	r3, [r3, #16]
 8019846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801984a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801984e:	d111      	bne.n	8019874 <HAL_TIM_IRQHandler+0x2ae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	68db      	ldr	r3, [r3, #12]
 8019856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801985a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801985e:	d109      	bne.n	8019874 <HAL_TIM_IRQHandler+0x2ae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8019868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019870:	6878      	ldr	r0, [r7, #4]
 8019872:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	691b      	ldr	r3, [r3, #16]
 801987a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801987e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8019882:	d111      	bne.n	80198a8 <HAL_TIM_IRQHandler+0x2e2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	68db      	ldr	r3, [r3, #12]
 801988a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801988e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8019892:	d109      	bne.n	80198a8 <HAL_TIM_IRQHandler+0x2e2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801989c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80198a4:	6878      	ldr	r0, [r7, #4]
 80198a6:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	691b      	ldr	r3, [r3, #16]
 80198ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80198b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80198b6:	d111      	bne.n	80198dc <HAL_TIM_IRQHandler+0x316>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	68db      	ldr	r3, [r3, #12]
 80198be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80198c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80198c6:	d109      	bne.n	80198dc <HAL_TIM_IRQHandler+0x316>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80198d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	691b      	ldr	r3, [r3, #16]
 80198e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80198e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80198ea:	d111      	bne.n	8019910 <HAL_TIM_IRQHandler+0x34a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	68db      	ldr	r3, [r3, #12]
 80198f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80198f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80198fa:	d109      	bne.n	8019910 <HAL_TIM_IRQHandler+0x34a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8019904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801990c:	6878      	ldr	r0, [r7, #4]
 801990e:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019910:	bf00      	nop
 8019912:	3708      	adds	r7, #8
 8019914:	46bd      	mov	sp, r7
 8019916:	bd80      	pop	{r7, pc}

08019918 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8019918:	b480      	push	{r7}
 801991a:	b083      	sub	sp, #12
 801991c:	af00      	add	r7, sp, #0
 801991e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8019920:	bf00      	nop
 8019922:	370c      	adds	r7, #12
 8019924:	46bd      	mov	sp, r7
 8019926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801992a:	4770      	bx	lr

0801992c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801992c:	b480      	push	{r7}
 801992e:	b083      	sub	sp, #12
 8019930:	af00      	add	r7, sp, #0
 8019932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019934:	bf00      	nop
 8019936:	370c      	adds	r7, #12
 8019938:	46bd      	mov	sp, r7
 801993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993e:	4770      	bx	lr

08019940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8019940:	b480      	push	{r7}
 8019942:	b083      	sub	sp, #12
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8019948:	bf00      	nop
 801994a:	370c      	adds	r7, #12
 801994c:	46bd      	mov	sp, r7
 801994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019952:	4770      	bx	lr

08019954 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8019954:	b480      	push	{r7}
 8019956:	b083      	sub	sp, #12
 8019958:	af00      	add	r7, sp, #0
 801995a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 801995c:	bf00      	nop
 801995e:	370c      	adds	r7, #12
 8019960:	46bd      	mov	sp, r7
 8019962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019966:	4770      	bx	lr

08019968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8019968:	b480      	push	{r7}
 801996a:	b083      	sub	sp, #12
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8019970:	bf00      	nop
 8019972:	370c      	adds	r7, #12
 8019974:	46bd      	mov	sp, r7
 8019976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997a:	4770      	bx	lr

0801997c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801997c:	b480      	push	{r7}
 801997e:	b083      	sub	sp, #12
 8019980:	af00      	add	r7, sp, #0
 8019982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8019984:	bf00      	nop
 8019986:	370c      	adds	r7, #12
 8019988:	46bd      	mov	sp, r7
 801998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998e:	4770      	bx	lr

08019990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019990:	b480      	push	{r7}
 8019992:	b083      	sub	sp, #12
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8019998:	bf00      	nop
 801999a:	370c      	adds	r7, #12
 801999c:	46bd      	mov	sp, r7
 801999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a2:	4770      	bx	lr

080199a4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80199a4:	b480      	push	{r7}
 80199a6:	b083      	sub	sp, #12
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80199ac:	bf00      	nop
 80199ae:	370c      	adds	r7, #12
 80199b0:	46bd      	mov	sp, r7
 80199b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b6:	4770      	bx	lr

080199b8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80199b8:	b480      	push	{r7}
 80199ba:	b083      	sub	sp, #12
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80199c0:	bf00      	nop
 80199c2:	370c      	adds	r7, #12
 80199c4:	46bd      	mov	sp, r7
 80199c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ca:	4770      	bx	lr

080199cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80199cc:	b480      	push	{r7}
 80199ce:	b085      	sub	sp, #20
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
 80199d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	4a68      	ldr	r2, [pc, #416]	; (8019b80 <TIM_Base_SetConfig+0x1b4>)
 80199e0:	4293      	cmp	r3, r2
 80199e2:	d02b      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	4a67      	ldr	r2, [pc, #412]	; (8019b84 <TIM_Base_SetConfig+0x1b8>)
 80199e8:	4293      	cmp	r3, r2
 80199ea:	d027      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80199f2:	d023      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80199fa:	d01f      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	4a62      	ldr	r2, [pc, #392]	; (8019b88 <TIM_Base_SetConfig+0x1bc>)
 8019a00:	4293      	cmp	r3, r2
 8019a02:	d01b      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	4a61      	ldr	r2, [pc, #388]	; (8019b8c <TIM_Base_SetConfig+0x1c0>)
 8019a08:	4293      	cmp	r3, r2
 8019a0a:	d017      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	4a60      	ldr	r2, [pc, #384]	; (8019b90 <TIM_Base_SetConfig+0x1c4>)
 8019a10:	4293      	cmp	r3, r2
 8019a12:	d013      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	4a5f      	ldr	r2, [pc, #380]	; (8019b94 <TIM_Base_SetConfig+0x1c8>)
 8019a18:	4293      	cmp	r3, r2
 8019a1a:	d00f      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	4a5e      	ldr	r2, [pc, #376]	; (8019b98 <TIM_Base_SetConfig+0x1cc>)
 8019a20:	4293      	cmp	r3, r2
 8019a22:	d00b      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	4a5d      	ldr	r2, [pc, #372]	; (8019b9c <TIM_Base_SetConfig+0x1d0>)
 8019a28:	4293      	cmp	r3, r2
 8019a2a:	d007      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	4a5c      	ldr	r2, [pc, #368]	; (8019ba0 <TIM_Base_SetConfig+0x1d4>)
 8019a30:	4293      	cmp	r3, r2
 8019a32:	d003      	beq.n	8019a3c <TIM_Base_SetConfig+0x70>
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	4a5b      	ldr	r2, [pc, #364]	; (8019ba4 <TIM_Base_SetConfig+0x1d8>)
 8019a38:	4293      	cmp	r3, r2
 8019a3a:	d108      	bne.n	8019a4e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	685b      	ldr	r3, [r3, #4]
 8019a48:	68fa      	ldr	r2, [r7, #12]
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	4a4b      	ldr	r2, [pc, #300]	; (8019b80 <TIM_Base_SetConfig+0x1b4>)
 8019a52:	4293      	cmp	r3, r2
 8019a54:	d043      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	4a4a      	ldr	r2, [pc, #296]	; (8019b84 <TIM_Base_SetConfig+0x1b8>)
 8019a5a:	4293      	cmp	r3, r2
 8019a5c:	d03f      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019a64:	d03b      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019a6c:	d037      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	4a45      	ldr	r2, [pc, #276]	; (8019b88 <TIM_Base_SetConfig+0x1bc>)
 8019a72:	4293      	cmp	r3, r2
 8019a74:	d033      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	4a44      	ldr	r2, [pc, #272]	; (8019b8c <TIM_Base_SetConfig+0x1c0>)
 8019a7a:	4293      	cmp	r3, r2
 8019a7c:	d02f      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	4a43      	ldr	r2, [pc, #268]	; (8019b90 <TIM_Base_SetConfig+0x1c4>)
 8019a82:	4293      	cmp	r3, r2
 8019a84:	d02b      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	4a42      	ldr	r2, [pc, #264]	; (8019b94 <TIM_Base_SetConfig+0x1c8>)
 8019a8a:	4293      	cmp	r3, r2
 8019a8c:	d027      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	4a41      	ldr	r2, [pc, #260]	; (8019b98 <TIM_Base_SetConfig+0x1cc>)
 8019a92:	4293      	cmp	r3, r2
 8019a94:	d023      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	4a40      	ldr	r2, [pc, #256]	; (8019b9c <TIM_Base_SetConfig+0x1d0>)
 8019a9a:	4293      	cmp	r3, r2
 8019a9c:	d01f      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	4a3f      	ldr	r2, [pc, #252]	; (8019ba0 <TIM_Base_SetConfig+0x1d4>)
 8019aa2:	4293      	cmp	r3, r2
 8019aa4:	d01b      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	4a3e      	ldr	r2, [pc, #248]	; (8019ba4 <TIM_Base_SetConfig+0x1d8>)
 8019aaa:	4293      	cmp	r3, r2
 8019aac:	d017      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	4a3d      	ldr	r2, [pc, #244]	; (8019ba8 <TIM_Base_SetConfig+0x1dc>)
 8019ab2:	4293      	cmp	r3, r2
 8019ab4:	d013      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	4a3c      	ldr	r2, [pc, #240]	; (8019bac <TIM_Base_SetConfig+0x1e0>)
 8019aba:	4293      	cmp	r3, r2
 8019abc:	d00f      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	4a3b      	ldr	r2, [pc, #236]	; (8019bb0 <TIM_Base_SetConfig+0x1e4>)
 8019ac2:	4293      	cmp	r3, r2
 8019ac4:	d00b      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	4a3a      	ldr	r2, [pc, #232]	; (8019bb4 <TIM_Base_SetConfig+0x1e8>)
 8019aca:	4293      	cmp	r3, r2
 8019acc:	d007      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	4a39      	ldr	r2, [pc, #228]	; (8019bb8 <TIM_Base_SetConfig+0x1ec>)
 8019ad2:	4293      	cmp	r3, r2
 8019ad4:	d003      	beq.n	8019ade <TIM_Base_SetConfig+0x112>
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	4a38      	ldr	r2, [pc, #224]	; (8019bbc <TIM_Base_SetConfig+0x1f0>)
 8019ada:	4293      	cmp	r3, r2
 8019adc:	d108      	bne.n	8019af0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019ae6:	683b      	ldr	r3, [r7, #0]
 8019ae8:	68db      	ldr	r3, [r3, #12]
 8019aea:	68fa      	ldr	r2, [r7, #12]
 8019aec:	4313      	orrs	r3, r2
 8019aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	695b      	ldr	r3, [r3, #20]
 8019afa:	4313      	orrs	r3, r2
 8019afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	68fa      	ldr	r2, [r7, #12]
 8019b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019b04:	683b      	ldr	r3, [r7, #0]
 8019b06:	689a      	ldr	r2, [r3, #8]
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019b0c:	683b      	ldr	r3, [r7, #0]
 8019b0e:	681a      	ldr	r2, [r3, #0]
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	4a1a      	ldr	r2, [pc, #104]	; (8019b80 <TIM_Base_SetConfig+0x1b4>)
 8019b18:	4293      	cmp	r3, r2
 8019b1a:	d023      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	4a19      	ldr	r2, [pc, #100]	; (8019b84 <TIM_Base_SetConfig+0x1b8>)
 8019b20:	4293      	cmp	r3, r2
 8019b22:	d01f      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	4a1e      	ldr	r2, [pc, #120]	; (8019ba0 <TIM_Base_SetConfig+0x1d4>)
 8019b28:	4293      	cmp	r3, r2
 8019b2a:	d01b      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	4a1d      	ldr	r2, [pc, #116]	; (8019ba4 <TIM_Base_SetConfig+0x1d8>)
 8019b30:	4293      	cmp	r3, r2
 8019b32:	d017      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	4a1c      	ldr	r2, [pc, #112]	; (8019ba8 <TIM_Base_SetConfig+0x1dc>)
 8019b38:	4293      	cmp	r3, r2
 8019b3a:	d013      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	4a1b      	ldr	r2, [pc, #108]	; (8019bac <TIM_Base_SetConfig+0x1e0>)
 8019b40:	4293      	cmp	r3, r2
 8019b42:	d00f      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	4a1a      	ldr	r2, [pc, #104]	; (8019bb0 <TIM_Base_SetConfig+0x1e4>)
 8019b48:	4293      	cmp	r3, r2
 8019b4a:	d00b      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	4a19      	ldr	r2, [pc, #100]	; (8019bb4 <TIM_Base_SetConfig+0x1e8>)
 8019b50:	4293      	cmp	r3, r2
 8019b52:	d007      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	4a18      	ldr	r2, [pc, #96]	; (8019bb8 <TIM_Base_SetConfig+0x1ec>)
 8019b58:	4293      	cmp	r3, r2
 8019b5a:	d003      	beq.n	8019b64 <TIM_Base_SetConfig+0x198>
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	4a17      	ldr	r2, [pc, #92]	; (8019bbc <TIM_Base_SetConfig+0x1f0>)
 8019b60:	4293      	cmp	r3, r2
 8019b62:	d103      	bne.n	8019b6c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	691a      	ldr	r2, [r3, #16]
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	2201      	movs	r2, #1
 8019b70:	615a      	str	r2, [r3, #20]
}
 8019b72:	bf00      	nop
 8019b74:	3714      	adds	r7, #20
 8019b76:	46bd      	mov	sp, r7
 8019b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7c:	4770      	bx	lr
 8019b7e:	bf00      	nop
 8019b80:	40012c00 	.word	0x40012c00
 8019b84:	50012c00 	.word	0x50012c00
 8019b88:	40000400 	.word	0x40000400
 8019b8c:	50000400 	.word	0x50000400
 8019b90:	40000800 	.word	0x40000800
 8019b94:	50000800 	.word	0x50000800
 8019b98:	40000c00 	.word	0x40000c00
 8019b9c:	50000c00 	.word	0x50000c00
 8019ba0:	40013400 	.word	0x40013400
 8019ba4:	50013400 	.word	0x50013400
 8019ba8:	40014000 	.word	0x40014000
 8019bac:	50014000 	.word	0x50014000
 8019bb0:	40014400 	.word	0x40014400
 8019bb4:	50014400 	.word	0x50014400
 8019bb8:	40014800 	.word	0x40014800
 8019bbc:	50014800 	.word	0x50014800

08019bc0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8019bc0:	b480      	push	{r7}
 8019bc2:	b083      	sub	sp, #12
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	4a26      	ldr	r2, [pc, #152]	; (8019c64 <TIM_ResetCallback+0xa4>)
 8019bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	4a25      	ldr	r2, [pc, #148]	; (8019c68 <TIM_ResetCallback+0xa8>)
 8019bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	4a24      	ldr	r2, [pc, #144]	; (8019c6c <TIM_ResetCallback+0xac>)
 8019bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	4a23      	ldr	r2, [pc, #140]	; (8019c70 <TIM_ResetCallback+0xb0>)
 8019be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	4a22      	ldr	r2, [pc, #136]	; (8019c74 <TIM_ResetCallback+0xb4>)
 8019bec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	4a21      	ldr	r2, [pc, #132]	; (8019c78 <TIM_ResetCallback+0xb8>)
 8019bf4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	4a20      	ldr	r2, [pc, #128]	; (8019c7c <TIM_ResetCallback+0xbc>)
 8019bfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	4a1f      	ldr	r2, [pc, #124]	; (8019c80 <TIM_ResetCallback+0xc0>)
 8019c04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	4a1e      	ldr	r2, [pc, #120]	; (8019c84 <TIM_ResetCallback+0xc4>)
 8019c0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	4a1d      	ldr	r2, [pc, #116]	; (8019c88 <TIM_ResetCallback+0xc8>)
 8019c14:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	4a1c      	ldr	r2, [pc, #112]	; (8019c8c <TIM_ResetCallback+0xcc>)
 8019c1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	4a1b      	ldr	r2, [pc, #108]	; (8019c90 <TIM_ResetCallback+0xd0>)
 8019c24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	4a1a      	ldr	r2, [pc, #104]	; (8019c94 <TIM_ResetCallback+0xd4>)
 8019c2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	4a19      	ldr	r2, [pc, #100]	; (8019c98 <TIM_ResetCallback+0xd8>)
 8019c34:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	4a18      	ldr	r2, [pc, #96]	; (8019c9c <TIM_ResetCallback+0xdc>)
 8019c3c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	4a17      	ldr	r2, [pc, #92]	; (8019ca0 <TIM_ResetCallback+0xe0>)
 8019c44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	4a16      	ldr	r2, [pc, #88]	; (8019ca4 <TIM_ResetCallback+0xe4>)
 8019c4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	4a15      	ldr	r2, [pc, #84]	; (8019ca8 <TIM_ResetCallback+0xe8>)
 8019c54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8019c58:	bf00      	nop
 8019c5a:	370c      	adds	r7, #12
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c62:	4770      	bx	lr
 8019c64:	0800e585 	.word	0x0800e585
 8019c68:	08019919 	.word	0x08019919
 8019c6c:	08019991 	.word	0x08019991
 8019c70:	080199a5 	.word	0x080199a5
 8019c74:	08019941 	.word	0x08019941
 8019c78:	08019955 	.word	0x08019955
 8019c7c:	0801992d 	.word	0x0801992d
 8019c80:	08019969 	.word	0x08019969
 8019c84:	0801997d 	.word	0x0801997d
 8019c88:	080199b9 	.word	0x080199b9
 8019c8c:	08019cad 	.word	0x08019cad
 8019c90:	08019cc1 	.word	0x08019cc1
 8019c94:	08019cd5 	.word	0x08019cd5
 8019c98:	08019ce9 	.word	0x08019ce9
 8019c9c:	08019cfd 	.word	0x08019cfd
 8019ca0:	08019d11 	.word	0x08019d11
 8019ca4:	08019d25 	.word	0x08019d25
 8019ca8:	08019d39 	.word	0x08019d39

08019cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8019cac:	b480      	push	{r7}
 8019cae:	b083      	sub	sp, #12
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8019cb4:	bf00      	nop
 8019cb6:	370c      	adds	r7, #12
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cbe:	4770      	bx	lr

08019cc0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8019cc0:	b480      	push	{r7}
 8019cc2:	b083      	sub	sp, #12
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8019cc8:	bf00      	nop
 8019cca:	370c      	adds	r7, #12
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd2:	4770      	bx	lr

08019cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8019cd4:	b480      	push	{r7}
 8019cd6:	b083      	sub	sp, #12
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8019cdc:	bf00      	nop
 8019cde:	370c      	adds	r7, #12
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ce6:	4770      	bx	lr

08019ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8019ce8:	b480      	push	{r7}
 8019cea:	b083      	sub	sp, #12
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8019cf0:	bf00      	nop
 8019cf2:	370c      	adds	r7, #12
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfa:	4770      	bx	lr

08019cfc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8019cfc:	b480      	push	{r7}
 8019cfe:	b083      	sub	sp, #12
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8019d04:	bf00      	nop
 8019d06:	370c      	adds	r7, #12
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0e:	4770      	bx	lr

08019d10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8019d10:	b480      	push	{r7}
 8019d12:	b083      	sub	sp, #12
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8019d18:	bf00      	nop
 8019d1a:	370c      	adds	r7, #12
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d22:	4770      	bx	lr

08019d24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8019d24:	b480      	push	{r7}
 8019d26:	b083      	sub	sp, #12
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8019d2c:	bf00      	nop
 8019d2e:	370c      	adds	r7, #12
 8019d30:	46bd      	mov	sp, r7
 8019d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d36:	4770      	bx	lr

08019d38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8019d38:	b480      	push	{r7}
 8019d3a:	b083      	sub	sp, #12
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8019d40:	bf00      	nop
 8019d42:	370c      	adds	r7, #12
 8019d44:	46bd      	mov	sp, r7
 8019d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4a:	4770      	bx	lr

08019d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b082      	sub	sp, #8
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d101      	bne.n	8019d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019d5a:	2301      	movs	r3, #1
 8019d5c:	e050      	b.n	8019e00 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d114      	bne.n	8019d92 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8019d70:	6878      	ldr	r0, [r7, #4]
 8019d72:	f000 fe21 	bl	801a9b8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d103      	bne.n	8019d88 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	4a21      	ldr	r2, [pc, #132]	; (8019e08 <HAL_UART_Init+0xbc>)
 8019d84:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019d8e:	6878      	ldr	r0, [r7, #4]
 8019d90:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	2224      	movs	r2, #36	; 0x24
 8019d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	681a      	ldr	r2, [r3, #0]
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	f022 0201 	bic.w	r2, r2, #1
 8019da8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8019daa:	6878      	ldr	r0, [r7, #4]
 8019dac:	f000 fe50 	bl	801aa50 <UART_SetConfig>
 8019db0:	4603      	mov	r3, r0
 8019db2:	2b01      	cmp	r3, #1
 8019db4:	d101      	bne.n	8019dba <HAL_UART_Init+0x6e>
  {
    return HAL_ERROR;
 8019db6:	2301      	movs	r3, #1
 8019db8:	e022      	b.n	8019e00 <HAL_UART_Init+0xb4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d002      	beq.n	8019dc8 <HAL_UART_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 8019dc2:	6878      	ldr	r0, [r7, #4]
 8019dc4:	f000 ffe6 	bl	801ad94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	685a      	ldr	r2, [r3, #4]
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8019dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	689a      	ldr	r2, [r3, #8]
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8019de6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	681a      	ldr	r2, [r3, #0]
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	f042 0201 	orr.w	r2, r2, #1
 8019df6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8019df8:	6878      	ldr	r0, [r7, #4]
 8019dfa:	f001 f86d 	bl	801aed8 <UART_CheckIdleState>
 8019dfe:	4603      	mov	r3, r0
}
 8019e00:	4618      	mov	r0, r3
 8019e02:	3708      	adds	r7, #8
 8019e04:	46bd      	mov	sp, r7
 8019e06:	bd80      	pop	{r7, pc}
 8019e08:	0800f8fd 	.word	0x0800f8fd

08019e0c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b082      	sub	sp, #8
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d101      	bne.n	8019e1e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8019e1a:	2301      	movs	r3, #1
 8019e1c:	e039      	b.n	8019e92 <HAL_UART_DeInit+0x86>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	2224      	movs	r2, #36	; 0x24
 8019e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	681a      	ldr	r2, [r3, #0]
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	f022 0201 	bic.w	r2, r2, #1
 8019e34:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	2200      	movs	r2, #0
 8019e44:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	609a      	str	r2, [r3, #8]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d103      	bne.n	8019e60 <HAL_UART_DeInit+0x54>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	4a10      	ldr	r2, [pc, #64]	; (8019e9c <HAL_UART_DeInit+0x90>)
 8019e5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	2200      	movs	r2, #0
 8019e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	2200      	movs	r2, #0
 8019e86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	2200      	movs	r2, #0
 8019e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8019e90:	2300      	movs	r3, #0
}
 8019e92:	4618      	mov	r0, r3
 8019e94:	3708      	adds	r7, #8
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd80      	pop	{r7, pc}
 8019e9a:	bf00      	nop
 8019e9c:	0800fe15 	.word	0x0800fe15

08019ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b08a      	sub	sp, #40	; 0x28
 8019ea4:	af02      	add	r7, sp, #8
 8019ea6:	60f8      	str	r0, [r7, #12]
 8019ea8:	60b9      	str	r1, [r7, #8]
 8019eaa:	603b      	str	r3, [r7, #0]
 8019eac:	4613      	mov	r3, r2
 8019eae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019eb6:	2b20      	cmp	r3, #32
 8019eb8:	f040 8092 	bne.w	8019fe0 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8019ebc:	68bb      	ldr	r3, [r7, #8]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d002      	beq.n	8019ec8 <HAL_UART_Transmit+0x28>
 8019ec2:	88fb      	ldrh	r3, [r7, #6]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d101      	bne.n	8019ecc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8019ec8:	2301      	movs	r3, #1
 8019eca:	e08a      	b.n	8019fe2 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8019ed2:	2b01      	cmp	r3, #1
 8019ed4:	d101      	bne.n	8019eda <HAL_UART_Transmit+0x3a>
 8019ed6:	2302      	movs	r3, #2
 8019ed8:	e083      	b.n	8019fe2 <HAL_UART_Transmit+0x142>
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	2201      	movs	r2, #1
 8019ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	689b      	ldr	r3, [r3, #8]
 8019ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019eec:	2b80      	cmp	r3, #128	; 0x80
 8019eee:	d107      	bne.n	8019f00 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	689a      	ldr	r2, [r3, #8]
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019efe:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	2200      	movs	r2, #0
 8019f04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	2221      	movs	r2, #33	; 0x21
 8019f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019f10:	f7f6 fb2a 	bl	8010568 <HAL_GetTick>
 8019f14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	88fa      	ldrh	r2, [r7, #6]
 8019f1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	88fa      	ldrh	r2, [r7, #6]
 8019f22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	689b      	ldr	r3, [r3, #8]
 8019f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019f2e:	d108      	bne.n	8019f42 <HAL_UART_Transmit+0xa2>
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	691b      	ldr	r3, [r3, #16]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d104      	bne.n	8019f42 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8019f38:	2300      	movs	r3, #0
 8019f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8019f3c:	68bb      	ldr	r3, [r7, #8]
 8019f3e:	61bb      	str	r3, [r7, #24]
 8019f40:	e003      	b.n	8019f4a <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8019f46:	2300      	movs	r3, #0
 8019f48:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8019f52:	e02c      	b.n	8019fae <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8019f54:	683b      	ldr	r3, [r7, #0]
 8019f56:	9300      	str	r3, [sp, #0]
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	2180      	movs	r1, #128	; 0x80
 8019f5e:	68f8      	ldr	r0, [r7, #12]
 8019f60:	f001 f805 	bl	801af6e <UART_WaitOnFlagUntilTimeout>
 8019f64:	4603      	mov	r3, r0
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d001      	beq.n	8019f6e <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8019f6a:	2303      	movs	r3, #3
 8019f6c:	e039      	b.n	8019fe2 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8019f6e:	69fb      	ldr	r3, [r7, #28]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d10b      	bne.n	8019f8c <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019f74:	69bb      	ldr	r3, [r7, #24]
 8019f76:	881b      	ldrh	r3, [r3, #0]
 8019f78:	461a      	mov	r2, r3
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019f82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8019f84:	69bb      	ldr	r3, [r7, #24]
 8019f86:	3302      	adds	r3, #2
 8019f88:	61bb      	str	r3, [r7, #24]
 8019f8a:	e007      	b.n	8019f9c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019f8c:	69fb      	ldr	r3, [r7, #28]
 8019f8e:	781a      	ldrb	r2, [r3, #0]
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8019f96:	69fb      	ldr	r3, [r7, #28]
 8019f98:	3301      	adds	r3, #1
 8019f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019fa2:	b29b      	uxth	r3, r3
 8019fa4:	3b01      	subs	r3, #1
 8019fa6:	b29a      	uxth	r2, r3
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019fb4:	b29b      	uxth	r3, r3
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d1cc      	bne.n	8019f54 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019fba:	683b      	ldr	r3, [r7, #0]
 8019fbc:	9300      	str	r3, [sp, #0]
 8019fbe:	697b      	ldr	r3, [r7, #20]
 8019fc0:	2200      	movs	r2, #0
 8019fc2:	2140      	movs	r1, #64	; 0x40
 8019fc4:	68f8      	ldr	r0, [r7, #12]
 8019fc6:	f000 ffd2 	bl	801af6e <UART_WaitOnFlagUntilTimeout>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d001      	beq.n	8019fd4 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8019fd0:	2303      	movs	r3, #3
 8019fd2:	e006      	b.n	8019fe2 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	2220      	movs	r2, #32
 8019fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8019fdc:	2300      	movs	r3, #0
 8019fde:	e000      	b.n	8019fe2 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8019fe0:	2302      	movs	r3, #2
  }
}
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	3720      	adds	r7, #32
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bd80      	pop	{r7, pc}

08019fea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019fea:	b580      	push	{r7, lr}
 8019fec:	b08a      	sub	sp, #40	; 0x28
 8019fee:	af02      	add	r7, sp, #8
 8019ff0:	60f8      	str	r0, [r7, #12]
 8019ff2:	60b9      	str	r1, [r7, #8]
 8019ff4:	603b      	str	r3, [r7, #0]
 8019ff6:	4613      	mov	r3, r2
 8019ff8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a000:	2b20      	cmp	r3, #32
 801a002:	f040 80cf 	bne.w	801a1a4 <HAL_UART_Receive+0x1ba>
  {
    if ((pData == NULL) || (Size == 0U))
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d002      	beq.n	801a012 <HAL_UART_Receive+0x28>
 801a00c:	88fb      	ldrh	r3, [r7, #6]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d101      	bne.n	801a016 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801a012:	2301      	movs	r3, #1
 801a014:	e0c7      	b.n	801a1a6 <HAL_UART_Receive+0x1bc>
    }

    __HAL_LOCK(huart);
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801a01c:	2b01      	cmp	r3, #1
 801a01e:	d101      	bne.n	801a024 <HAL_UART_Receive+0x3a>
 801a020:	2302      	movs	r3, #2
 801a022:	e0c0      	b.n	801a1a6 <HAL_UART_Receive+0x1bc>
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	2201      	movs	r2, #1
 801a028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	689b      	ldr	r3, [r3, #8]
 801a032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a036:	2b40      	cmp	r3, #64	; 0x40
 801a038:	d107      	bne.n	801a04a <HAL_UART_Receive+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	689a      	ldr	r2, [r3, #8]
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a048:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	2200      	movs	r2, #0
 801a04e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	2222      	movs	r2, #34	; 0x22
 801a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	2200      	movs	r2, #0
 801a05e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801a060:	f7f6 fa82 	bl	8010568 <HAL_GetTick>
 801a064:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	88fa      	ldrh	r2, [r7, #6]
 801a06a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	88fa      	ldrh	r2, [r7, #6]
 801a072:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	689b      	ldr	r3, [r3, #8]
 801a07a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a07e:	d10e      	bne.n	801a09e <HAL_UART_Receive+0xb4>
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	691b      	ldr	r3, [r3, #16]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d105      	bne.n	801a094 <HAL_UART_Receive+0xaa>
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801a08e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801a092:	e02d      	b.n	801a0f0 <HAL_UART_Receive+0x106>
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	22ff      	movs	r2, #255	; 0xff
 801a098:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801a09c:	e028      	b.n	801a0f0 <HAL_UART_Receive+0x106>
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	689b      	ldr	r3, [r3, #8]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d10d      	bne.n	801a0c2 <HAL_UART_Receive+0xd8>
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	691b      	ldr	r3, [r3, #16]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d104      	bne.n	801a0b8 <HAL_UART_Receive+0xce>
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	22ff      	movs	r2, #255	; 0xff
 801a0b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801a0b6:	e01b      	b.n	801a0f0 <HAL_UART_Receive+0x106>
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	227f      	movs	r2, #127	; 0x7f
 801a0bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801a0c0:	e016      	b.n	801a0f0 <HAL_UART_Receive+0x106>
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	689b      	ldr	r3, [r3, #8]
 801a0c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801a0ca:	d10d      	bne.n	801a0e8 <HAL_UART_Receive+0xfe>
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	691b      	ldr	r3, [r3, #16]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d104      	bne.n	801a0de <HAL_UART_Receive+0xf4>
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	227f      	movs	r2, #127	; 0x7f
 801a0d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801a0dc:	e008      	b.n	801a0f0 <HAL_UART_Receive+0x106>
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	223f      	movs	r2, #63	; 0x3f
 801a0e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801a0e6:	e003      	b.n	801a0f0 <HAL_UART_Receive+0x106>
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a0f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	689b      	ldr	r3, [r3, #8]
 801a0fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a100:	d108      	bne.n	801a114 <HAL_UART_Receive+0x12a>
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	691b      	ldr	r3, [r3, #16]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d104      	bne.n	801a114 <HAL_UART_Receive+0x12a>
    {
      pdata8bits  = NULL;
 801a10a:	2300      	movs	r3, #0
 801a10c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801a10e:	68bb      	ldr	r3, [r7, #8]
 801a110:	61bb      	str	r3, [r7, #24]
 801a112:	e003      	b.n	801a11c <HAL_UART_Receive+0x132>
    }
    else
    {
      pdata8bits  = pData;
 801a114:	68bb      	ldr	r3, [r7, #8]
 801a116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801a118:	2300      	movs	r3, #0
 801a11a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	2200      	movs	r2, #0
 801a120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801a124:	e032      	b.n	801a18c <HAL_UART_Receive+0x1a2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801a126:	683b      	ldr	r3, [r7, #0]
 801a128:	9300      	str	r3, [sp, #0]
 801a12a:	697b      	ldr	r3, [r7, #20]
 801a12c:	2200      	movs	r2, #0
 801a12e:	2120      	movs	r1, #32
 801a130:	68f8      	ldr	r0, [r7, #12]
 801a132:	f000 ff1c 	bl	801af6e <UART_WaitOnFlagUntilTimeout>
 801a136:	4603      	mov	r3, r0
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d001      	beq.n	801a140 <HAL_UART_Receive+0x156>
      {
        return HAL_TIMEOUT;
 801a13c:	2303      	movs	r3, #3
 801a13e:	e032      	b.n	801a1a6 <HAL_UART_Receive+0x1bc>
      }
      if (pdata8bits == NULL)
 801a140:	69fb      	ldr	r3, [r7, #28]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d10c      	bne.n	801a160 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a14c:	b29a      	uxth	r2, r3
 801a14e:	8a7b      	ldrh	r3, [r7, #18]
 801a150:	4013      	ands	r3, r2
 801a152:	b29a      	uxth	r2, r3
 801a154:	69bb      	ldr	r3, [r7, #24]
 801a156:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801a158:	69bb      	ldr	r3, [r7, #24]
 801a15a:	3302      	adds	r3, #2
 801a15c:	61bb      	str	r3, [r7, #24]
 801a15e:	e00c      	b.n	801a17a <HAL_UART_Receive+0x190>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a166:	b2da      	uxtb	r2, r3
 801a168:	8a7b      	ldrh	r3, [r7, #18]
 801a16a:	b2db      	uxtb	r3, r3
 801a16c:	4013      	ands	r3, r2
 801a16e:	b2da      	uxtb	r2, r3
 801a170:	69fb      	ldr	r3, [r7, #28]
 801a172:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801a174:	69fb      	ldr	r3, [r7, #28]
 801a176:	3301      	adds	r3, #1
 801a178:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a180:	b29b      	uxth	r3, r3
 801a182:	3b01      	subs	r3, #1
 801a184:	b29a      	uxth	r2, r3
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a192:	b29b      	uxth	r3, r3
 801a194:	2b00      	cmp	r3, #0
 801a196:	d1c6      	bne.n	801a126 <HAL_UART_Receive+0x13c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	2220      	movs	r2, #32
 801a19c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	e000      	b.n	801a1a6 <HAL_UART_Receive+0x1bc>
  }
  else
  {
    return HAL_BUSY;
 801a1a4:	2302      	movs	r3, #2
  }
}
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	3720      	adds	r7, #32
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	bd80      	pop	{r7, pc}
	...

0801a1b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b08a      	sub	sp, #40	; 0x28
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	60f8      	str	r0, [r7, #12]
 801a1b8:	60b9      	str	r1, [r7, #8]
 801a1ba:	4613      	mov	r3, r2
 801a1bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a1c4:	2b20      	cmp	r3, #32
 801a1c6:	d147      	bne.n	801a258 <HAL_UART_Receive_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 801a1c8:	68bb      	ldr	r3, [r7, #8]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d002      	beq.n	801a1d4 <HAL_UART_Receive_DMA+0x24>
 801a1ce:	88fb      	ldrh	r3, [r7, #6]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d101      	bne.n	801a1d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801a1d4:	2301      	movs	r3, #1
 801a1d6:	e040      	b.n	801a25a <HAL_UART_Receive_DMA+0xaa>
    }

    __HAL_LOCK(huart);
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801a1de:	2b01      	cmp	r3, #1
 801a1e0:	d101      	bne.n	801a1e6 <HAL_UART_Receive_DMA+0x36>
 801a1e2:	2302      	movs	r3, #2
 801a1e4:	e039      	b.n	801a25a <HAL_UART_Receive_DMA+0xaa>
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	2201      	movs	r2, #1
 801a1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	2200      	movs	r2, #0
 801a1f2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	4a1a      	ldr	r2, [pc, #104]	; (801a264 <HAL_UART_Receive_DMA+0xb4>)
 801a1fa:	4293      	cmp	r3, r2
 801a1fc:	d024      	beq.n	801a248 <HAL_UART_Receive_DMA+0x98>
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	4a19      	ldr	r2, [pc, #100]	; (801a268 <HAL_UART_Receive_DMA+0xb8>)
 801a204:	4293      	cmp	r3, r2
 801a206:	d01f      	beq.n	801a248 <HAL_UART_Receive_DMA+0x98>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	685b      	ldr	r3, [r3, #4]
 801a20e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a212:	2b00      	cmp	r3, #0
 801a214:	d018      	beq.n	801a248 <HAL_UART_Receive_DMA+0x98>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a21c:	697b      	ldr	r3, [r7, #20]
 801a21e:	e853 3f00 	ldrex	r3, [r3]
 801a222:	613b      	str	r3, [r7, #16]
   return(result);
 801a224:	693b      	ldr	r3, [r7, #16]
 801a226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801a22a:	627b      	str	r3, [r7, #36]	; 0x24
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	461a      	mov	r2, r3
 801a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a234:	623b      	str	r3, [r7, #32]
 801a236:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a238:	69f9      	ldr	r1, [r7, #28]
 801a23a:	6a3a      	ldr	r2, [r7, #32]
 801a23c:	e841 2300 	strex	r3, r2, [r1]
 801a240:	61bb      	str	r3, [r7, #24]
   return(result);
 801a242:	69bb      	ldr	r3, [r7, #24]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d1e6      	bne.n	801a216 <HAL_UART_Receive_DMA+0x66>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801a248:	88fb      	ldrh	r3, [r7, #6]
 801a24a:	461a      	mov	r2, r3
 801a24c:	68b9      	ldr	r1, [r7, #8]
 801a24e:	68f8      	ldr	r0, [r7, #12]
 801a250:	f000 ff56 	bl	801b100 <UART_Start_Receive_DMA>
 801a254:	4603      	mov	r3, r0
 801a256:	e000      	b.n	801a25a <HAL_UART_Receive_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 801a258:	2302      	movs	r3, #2
  }
}
 801a25a:	4618      	mov	r0, r3
 801a25c:	3728      	adds	r7, #40	; 0x28
 801a25e:	46bd      	mov	sp, r7
 801a260:	bd80      	pop	{r7, pc}
 801a262:	bf00      	nop
 801a264:	46002400 	.word	0x46002400
 801a268:	56002400 	.word	0x56002400

0801a26c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b090      	sub	sp, #64	; 0x40
 801a270:	af00      	add	r7, sp, #0
 801a272:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a27a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a282:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	689b      	ldr	r3, [r3, #8]
 801a28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a28e:	2b80      	cmp	r3, #128	; 0x80
 801a290:	d139      	bne.n	801a306 <HAL_UART_DMAStop+0x9a>
 801a292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a294:	2b21      	cmp	r3, #33	; 0x21
 801a296:	d136      	bne.n	801a306 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	3308      	adds	r3, #8
 801a29e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2a0:	6a3b      	ldr	r3, [r7, #32]
 801a2a2:	e853 3f00 	ldrex	r3, [r3]
 801a2a6:	61fb      	str	r3, [r7, #28]
   return(result);
 801a2a8:	69fb      	ldr	r3, [r7, #28]
 801a2aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a2ae:	637b      	str	r3, [r7, #52]	; 0x34
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	3308      	adds	r3, #8
 801a2b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a2b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a2be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2c0:	e841 2300 	strex	r3, r2, [r1]
 801a2c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d1e5      	bne.n	801a298 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d015      	beq.n	801a300 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a2d8:	4618      	mov	r0, r3
 801a2da:	f7f8 f855 	bl	8012388 <HAL_DMA_Abort>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d00d      	beq.n	801a300 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f7f8 fa66 	bl	80127ba <HAL_DMA_GetError>
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	2b10      	cmp	r3, #16
 801a2f2:	d105      	bne.n	801a300 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	2210      	movs	r2, #16
 801a2f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 801a2fc:	2303      	movs	r3, #3
 801a2fe:	e044      	b.n	801a38a <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 801a300:	6878      	ldr	r0, [r7, #4]
 801a302:	f000 ffef 	bl	801b2e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	689b      	ldr	r3, [r3, #8]
 801a30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a310:	2b40      	cmp	r3, #64	; 0x40
 801a312:	d139      	bne.n	801a388 <HAL_UART_DMAStop+0x11c>
 801a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a316:	2b22      	cmp	r3, #34	; 0x22
 801a318:	d136      	bne.n	801a388 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	3308      	adds	r3, #8
 801a320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	e853 3f00 	ldrex	r3, [r3]
 801a328:	60bb      	str	r3, [r7, #8]
   return(result);
 801a32a:	68bb      	ldr	r3, [r7, #8]
 801a32c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a330:	633b      	str	r3, [r7, #48]	; 0x30
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	3308      	adds	r3, #8
 801a338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a33a:	61ba      	str	r2, [r7, #24]
 801a33c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a33e:	6979      	ldr	r1, [r7, #20]
 801a340:	69ba      	ldr	r2, [r7, #24]
 801a342:	e841 2300 	strex	r3, r2, [r1]
 801a346:	613b      	str	r3, [r7, #16]
   return(result);
 801a348:	693b      	ldr	r3, [r7, #16]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d1e5      	bne.n	801a31a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a352:	2b00      	cmp	r3, #0
 801a354:	d015      	beq.n	801a382 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a35a:	4618      	mov	r0, r3
 801a35c:	f7f8 f814 	bl	8012388 <HAL_DMA_Abort>
 801a360:	4603      	mov	r3, r0
 801a362:	2b00      	cmp	r3, #0
 801a364:	d00d      	beq.n	801a382 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a36a:	4618      	mov	r0, r3
 801a36c:	f7f8 fa25 	bl	80127ba <HAL_DMA_GetError>
 801a370:	4603      	mov	r3, r0
 801a372:	2b10      	cmp	r3, #16
 801a374:	d105      	bne.n	801a382 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	2210      	movs	r2, #16
 801a37a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 801a37e:	2303      	movs	r3, #3
 801a380:	e003      	b.n	801a38a <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 801a382:	6878      	ldr	r0, [r7, #4]
 801a384:	f000 ffef 	bl	801b366 <UART_EndRxTransfer>
  }

  return HAL_OK;
 801a388:	2300      	movs	r3, #0
}
 801a38a:	4618      	mov	r0, r3
 801a38c:	3740      	adds	r7, #64	; 0x40
 801a38e:	46bd      	mov	sp, r7
 801a390:	bd80      	pop	{r7, pc}
	...

0801a394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b0ae      	sub	sp, #184	; 0xb8
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	69db      	ldr	r3, [r3, #28]
 801a3a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	689b      	ldr	r3, [r3, #8]
 801a3b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801a3ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801a3be:	f640 030f 	movw	r3, #2063	; 0x80f
 801a3c2:	4013      	ands	r3, r2
 801a3c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 801a3c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d11b      	bne.n	801a408 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a3d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a3d4:	f003 0320 	and.w	r3, r3, #32
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d015      	beq.n	801a408 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a3dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a3e0:	f003 0320 	and.w	r3, r3, #32
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d105      	bne.n	801a3f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a3e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a3ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d009      	beq.n	801a408 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	f000 827f 	beq.w	801a8fc <HAL_UART_IRQHandler+0x568>
      {
        huart->RxISR(huart);
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a402:	6878      	ldr	r0, [r7, #4]
 801a404:	4798      	blx	r3
      }
      return;
 801a406:	e279      	b.n	801a8fc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801a408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	f000 80ff 	beq.w	801a610 <HAL_UART_IRQHandler+0x27c>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801a412:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801a416:	4b7b      	ldr	r3, [pc, #492]	; (801a604 <HAL_UART_IRQHandler+0x270>)
 801a418:	4013      	ands	r3, r2
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d106      	bne.n	801a42c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801a41e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801a422:	4b79      	ldr	r3, [pc, #484]	; (801a608 <HAL_UART_IRQHandler+0x274>)
 801a424:	4013      	ands	r3, r2
 801a426:	2b00      	cmp	r3, #0
 801a428:	f000 80f2 	beq.w	801a610 <HAL_UART_IRQHandler+0x27c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a42c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a430:	f003 0301 	and.w	r3, r3, #1
 801a434:	2b00      	cmp	r3, #0
 801a436:	d011      	beq.n	801a45c <HAL_UART_IRQHandler+0xc8>
 801a438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a440:	2b00      	cmp	r3, #0
 801a442:	d00b      	beq.n	801a45c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	2201      	movs	r2, #1
 801a44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a452:	f043 0201 	orr.w	r2, r3, #1
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a45c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a460:	f003 0302 	and.w	r3, r3, #2
 801a464:	2b00      	cmp	r3, #0
 801a466:	d011      	beq.n	801a48c <HAL_UART_IRQHandler+0xf8>
 801a468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a46c:	f003 0301 	and.w	r3, r3, #1
 801a470:	2b00      	cmp	r3, #0
 801a472:	d00b      	beq.n	801a48c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	2202      	movs	r2, #2
 801a47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a482:	f043 0204 	orr.w	r2, r3, #4
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a48c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a490:	f003 0304 	and.w	r3, r3, #4
 801a494:	2b00      	cmp	r3, #0
 801a496:	d011      	beq.n	801a4bc <HAL_UART_IRQHandler+0x128>
 801a498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a49c:	f003 0301 	and.w	r3, r3, #1
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d00b      	beq.n	801a4bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	2204      	movs	r2, #4
 801a4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a4b2:	f043 0202 	orr.w	r2, r3, #2
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801a4bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a4c0:	f003 0308 	and.w	r3, r3, #8
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d017      	beq.n	801a4f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801a4c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a4cc:	f003 0320 	and.w	r3, r3, #32
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d105      	bne.n	801a4e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801a4d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801a4d8:	4b4a      	ldr	r3, [pc, #296]	; (801a604 <HAL_UART_IRQHandler+0x270>)
 801a4da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d00b      	beq.n	801a4f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	2208      	movs	r2, #8
 801a4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a4ee:	f043 0208 	orr.w	r2, r3, #8
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801a4f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a4fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a500:	2b00      	cmp	r3, #0
 801a502:	d012      	beq.n	801a52a <HAL_UART_IRQHandler+0x196>
 801a504:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d00c      	beq.n	801a52a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a520:	f043 0220 	orr.w	r2, r3, #32
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a530:	2b00      	cmp	r3, #0
 801a532:	f000 81e5 	beq.w	801a900 <HAL_UART_IRQHandler+0x56c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a53a:	f003 0320 	and.w	r3, r3, #32
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d013      	beq.n	801a56a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a542:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a546:	f003 0320 	and.w	r3, r3, #32
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d105      	bne.n	801a55a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a54e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a556:	2b00      	cmp	r3, #0
 801a558:	d007      	beq.n	801a56a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d003      	beq.n	801a56a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a566:	6878      	ldr	r0, [r7, #4]
 801a568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a570:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	689b      	ldr	r3, [r3, #8]
 801a57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a57e:	2b40      	cmp	r3, #64	; 0x40
 801a580:	d005      	beq.n	801a58e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801a582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a586:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d02d      	beq.n	801a5ea <HAL_UART_IRQHandler+0x256>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801a58e:	6878      	ldr	r0, [r7, #4]
 801a590:	f000 fee9 	bl	801b366 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	689b      	ldr	r3, [r3, #8]
 801a59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a59e:	2b40      	cmp	r3, #64	; 0x40
 801a5a0:	d11d      	bne.n	801a5de <HAL_UART_IRQHandler+0x24a>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d013      	beq.n	801a5d2 <HAL_UART_IRQHandler+0x23e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a5ae:	4a17      	ldr	r2, [pc, #92]	; (801a60c <HAL_UART_IRQHandler+0x278>)
 801a5b0:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	f7f7 ff62 	bl	8012480 <HAL_DMA_Abort_IT>
 801a5bc:	4603      	mov	r3, r0
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d01d      	beq.n	801a5fe <HAL_UART_IRQHandler+0x26a>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a5c8:	687a      	ldr	r2, [r7, #4]
 801a5ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801a5cc:	4610      	mov	r0, r2
 801a5ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a5d0:	e015      	b.n	801a5fe <HAL_UART_IRQHandler+0x26a>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a5d8:	6878      	ldr	r0, [r7, #4]
 801a5da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a5dc:	e00f      	b.n	801a5fe <HAL_UART_IRQHandler+0x26a>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a5e8:	e009      	b.n	801a5fe <HAL_UART_IRQHandler+0x26a>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a5f0:	6878      	ldr	r0, [r7, #4]
 801a5f2:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 801a5fc:	e180      	b.n	801a900 <HAL_UART_IRQHandler+0x56c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a5fe:	bf00      	nop
    return;
 801a600:	e17e      	b.n	801a900 <HAL_UART_IRQHandler+0x56c>
 801a602:	bf00      	nop
 801a604:	10000001 	.word	0x10000001
 801a608:	04000120 	.word	0x04000120
 801a60c:	0801b5eb 	.word	0x0801b5eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a614:	2b01      	cmp	r3, #1
 801a616:	f040 8124 	bne.w	801a862 <HAL_UART_IRQHandler+0x4ce>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801a61a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a61e:	f003 0310 	and.w	r3, r3, #16
 801a622:	2b00      	cmp	r3, #0
 801a624:	f000 811d 	beq.w	801a862 <HAL_UART_IRQHandler+0x4ce>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801a628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a62c:	f003 0310 	and.w	r3, r3, #16
 801a630:	2b00      	cmp	r3, #0
 801a632:	f000 8116 	beq.w	801a862 <HAL_UART_IRQHandler+0x4ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	2210      	movs	r2, #16
 801a63c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	689b      	ldr	r3, [r3, #8]
 801a644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a648:	2b40      	cmp	r3, #64	; 0x40
 801a64a:	f040 808d 	bne.w	801a768 <HAL_UART_IRQHandler+0x3d4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a656:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 801a65a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801a65e:	2b00      	cmp	r3, #0
 801a660:	f000 8150 	beq.w	801a904 <HAL_UART_IRQHandler+0x570>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a66a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 801a66e:	429a      	cmp	r2, r3
 801a670:	f080 8148 	bcs.w	801a904 <HAL_UART_IRQHandler+0x570>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 801a67a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a684:	2b81      	cmp	r3, #129	; 0x81
 801a686:	d05f      	beq.n	801a748 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a68e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a690:	e853 3f00 	ldrex	r3, [r3]
 801a694:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801a696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a69c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a6aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a6ae:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801a6b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801a6b6:	e841 2300 	strex	r3, r2, [r1]
 801a6ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801a6bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d1e2      	bne.n	801a688 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	3308      	adds	r3, #8
 801a6c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a6cc:	e853 3f00 	ldrex	r3, [r3]
 801a6d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801a6d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a6d4:	f023 0301 	bic.w	r3, r3, #1
 801a6d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	3308      	adds	r3, #8
 801a6e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a6e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 801a6e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801a6ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a6ee:	e841 2300 	strex	r3, r2, [r1]
 801a6f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801a6f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d1e3      	bne.n	801a6c2 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	2220      	movs	r2, #32
 801a6fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	2200      	movs	r2, #0
 801a706:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a710:	e853 3f00 	ldrex	r3, [r3]
 801a714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801a716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a718:	f023 0310 	bic.w	r3, r3, #16
 801a71c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	461a      	mov	r2, r3
 801a726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a72a:	65bb      	str	r3, [r7, #88]	; 0x58
 801a72c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a72e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a732:	e841 2300 	strex	r3, r2, [r1]
 801a736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801a738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d1e4      	bne.n	801a708 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a742:	4618      	mov	r0, r3
 801a744:	f7f7 fe20 	bl	8012388 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 801a754:	687a      	ldr	r2, [r7, #4]
 801a756:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 801a75a:	b292      	uxth	r2, r2
 801a75c:	1a8a      	subs	r2, r1, r2
 801a75e:	b292      	uxth	r2, r2
 801a760:	4611      	mov	r1, r2
 801a762:	6878      	ldr	r0, [r7, #4]
 801a764:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a766:	e0cd      	b.n	801a904 <HAL_UART_IRQHandler+0x570>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a774:	b29b      	uxth	r3, r3
 801a776:	1ad3      	subs	r3, r2, r3
 801a778:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a782:	b29b      	uxth	r3, r3
 801a784:	2b00      	cmp	r3, #0
 801a786:	f000 80bf 	beq.w	801a908 <HAL_UART_IRQHandler+0x574>
          && (nb_rx_data > 0U))
 801a78a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 801a78e:	2b00      	cmp	r3, #0
 801a790:	f000 80ba 	beq.w	801a908 <HAL_UART_IRQHandler+0x574>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a79c:	e853 3f00 	ldrex	r3, [r3]
 801a7a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801a7a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	461a      	mov	r2, r3
 801a7b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a7b6:	647b      	str	r3, [r7, #68]	; 0x44
 801a7b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a7bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a7be:	e841 2300 	strex	r3, r2, [r1]
 801a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801a7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d1e4      	bne.n	801a794 <HAL_UART_IRQHandler+0x400>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	3308      	adds	r3, #8
 801a7d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7d4:	e853 3f00 	ldrex	r3, [r3]
 801a7d8:	623b      	str	r3, [r7, #32]
   return(result);
 801a7da:	6a3b      	ldr	r3, [r7, #32]
 801a7dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a7e0:	f023 0301 	bic.w	r3, r3, #1
 801a7e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	3308      	adds	r3, #8
 801a7ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801a7f2:	633a      	str	r2, [r7, #48]	; 0x30
 801a7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7fa:	e841 2300 	strex	r3, r2, [r1]
 801a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a802:	2b00      	cmp	r3, #0
 801a804:	d1e1      	bne.n	801a7ca <HAL_UART_IRQHandler+0x436>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	2220      	movs	r2, #32
 801a80a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	2200      	movs	r2, #0
 801a812:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	2200      	movs	r2, #0
 801a818:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a820:	693b      	ldr	r3, [r7, #16]
 801a822:	e853 3f00 	ldrex	r3, [r3]
 801a826:	60fb      	str	r3, [r7, #12]
   return(result);
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	f023 0310 	bic.w	r3, r3, #16
 801a82e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	461a      	mov	r2, r3
 801a838:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a83c:	61fb      	str	r3, [r7, #28]
 801a83e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a840:	69b9      	ldr	r1, [r7, #24]
 801a842:	69fa      	ldr	r2, [r7, #28]
 801a844:	e841 2300 	strex	r3, r2, [r1]
 801a848:	617b      	str	r3, [r7, #20]
   return(result);
 801a84a:	697b      	ldr	r3, [r7, #20]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d1e4      	bne.n	801a81a <HAL_UART_IRQHandler+0x486>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a856:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 801a85a:	4611      	mov	r1, r2
 801a85c:	6878      	ldr	r0, [r7, #4]
 801a85e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a860:	e052      	b.n	801a908 <HAL_UART_IRQHandler+0x574>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801a862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d014      	beq.n	801a898 <HAL_UART_IRQHandler+0x504>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801a86e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a876:	2b00      	cmp	r3, #0
 801a878:	d105      	bne.n	801a886 <HAL_UART_IRQHandler+0x4f2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801a87a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a87e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a882:	2b00      	cmp	r3, #0
 801a884:	d008      	beq.n	801a898 <HAL_UART_IRQHandler+0x504>
  {
    if (huart->TxISR != NULL)
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d03e      	beq.n	801a90c <HAL_UART_IRQHandler+0x578>
    {
      huart->TxISR(huart);
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a892:	6878      	ldr	r0, [r7, #4]
 801a894:	4798      	blx	r3
    }
    return;
 801a896:	e039      	b.n	801a90c <HAL_UART_IRQHandler+0x578>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801a898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d009      	beq.n	801a8b8 <HAL_UART_IRQHandler+0x524>
 801a8a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d003      	beq.n	801a8b8 <HAL_UART_IRQHandler+0x524>
  {
    UART_EndTransmit_IT(huart);
 801a8b0:	6878      	ldr	r0, [r7, #4]
 801a8b2:	f000 feb2 	bl	801b61a <UART_EndTransmit_IT>
    return;
 801a8b6:	e02a      	b.n	801a90e <HAL_UART_IRQHandler+0x57a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801a8b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a8bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d00b      	beq.n	801a8dc <HAL_UART_IRQHandler+0x548>
 801a8c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a8c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d005      	beq.n	801a8dc <HAL_UART_IRQHandler+0x548>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a8d6:	6878      	ldr	r0, [r7, #4]
 801a8d8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a8da:	e018      	b.n	801a90e <HAL_UART_IRQHandler+0x57a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801a8dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a8e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d012      	beq.n	801a90e <HAL_UART_IRQHandler+0x57a>
 801a8e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	da0e      	bge.n	801a90e <HAL_UART_IRQHandler+0x57a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a8f6:	6878      	ldr	r0, [r7, #4]
 801a8f8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a8fa:	e008      	b.n	801a90e <HAL_UART_IRQHandler+0x57a>
      return;
 801a8fc:	bf00      	nop
 801a8fe:	e006      	b.n	801a90e <HAL_UART_IRQHandler+0x57a>
    return;
 801a900:	bf00      	nop
 801a902:	e004      	b.n	801a90e <HAL_UART_IRQHandler+0x57a>
      return;
 801a904:	bf00      	nop
 801a906:	e002      	b.n	801a90e <HAL_UART_IRQHandler+0x57a>
      return;
 801a908:	bf00      	nop
 801a90a:	e000      	b.n	801a90e <HAL_UART_IRQHandler+0x57a>
    return;
 801a90c:	bf00      	nop
  }
}
 801a90e:	37b8      	adds	r7, #184	; 0xb8
 801a910:	46bd      	mov	sp, r7
 801a912:	bd80      	pop	{r7, pc}

0801a914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a914:	b480      	push	{r7}
 801a916:	b083      	sub	sp, #12
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801a91c:	bf00      	nop
 801a91e:	370c      	adds	r7, #12
 801a920:	46bd      	mov	sp, r7
 801a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a926:	4770      	bx	lr

0801a928 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a928:	b480      	push	{r7}
 801a92a:	b083      	sub	sp, #12
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801a930:	bf00      	nop
 801a932:	370c      	adds	r7, #12
 801a934:	46bd      	mov	sp, r7
 801a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a93a:	4770      	bx	lr

0801a93c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a93c:	b480      	push	{r7}
 801a93e:	b083      	sub	sp, #12
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801a944:	bf00      	nop
 801a946:	370c      	adds	r7, #12
 801a948:	46bd      	mov	sp, r7
 801a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a94e:	4770      	bx	lr

0801a950 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801a950:	b480      	push	{r7}
 801a952:	b083      	sub	sp, #12
 801a954:	af00      	add	r7, sp, #0
 801a956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801a958:	bf00      	nop
 801a95a:	370c      	adds	r7, #12
 801a95c:	46bd      	mov	sp, r7
 801a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a962:	4770      	bx	lr

0801a964 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801a964:	b480      	push	{r7}
 801a966:	b083      	sub	sp, #12
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801a96c:	bf00      	nop
 801a96e:	370c      	adds	r7, #12
 801a970:	46bd      	mov	sp, r7
 801a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a976:	4770      	bx	lr

0801a978 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801a978:	b480      	push	{r7}
 801a97a:	b083      	sub	sp, #12
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801a980:	bf00      	nop
 801a982:	370c      	adds	r7, #12
 801a984:	46bd      	mov	sp, r7
 801a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98a:	4770      	bx	lr

0801a98c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801a98c:	b480      	push	{r7}
 801a98e:	b083      	sub	sp, #12
 801a990:	af00      	add	r7, sp, #0
 801a992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801a994:	bf00      	nop
 801a996:	370c      	adds	r7, #12
 801a998:	46bd      	mov	sp, r7
 801a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99e:	4770      	bx	lr

0801a9a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a9a0:	b480      	push	{r7}
 801a9a2:	b083      	sub	sp, #12
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
 801a9a8:	460b      	mov	r3, r1
 801a9aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a9ac:	bf00      	nop
 801a9ae:	370c      	adds	r7, #12
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b6:	4770      	bx	lr

0801a9b8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801a9b8:	b480      	push	{r7}
 801a9ba:	b083      	sub	sp, #12
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	4a18      	ldr	r2, [pc, #96]	; (801aa24 <UART_InitCallbacksToDefault+0x6c>)
 801a9c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	4a17      	ldr	r2, [pc, #92]	; (801aa28 <UART_InitCallbacksToDefault+0x70>)
 801a9cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	4a16      	ldr	r2, [pc, #88]	; (801aa2c <UART_InitCallbacksToDefault+0x74>)
 801a9d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	4a15      	ldr	r2, [pc, #84]	; (801aa30 <UART_InitCallbacksToDefault+0x78>)
 801a9dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	4a14      	ldr	r2, [pc, #80]	; (801aa34 <UART_InitCallbacksToDefault+0x7c>)
 801a9e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	4a13      	ldr	r2, [pc, #76]	; (801aa38 <UART_InitCallbacksToDefault+0x80>)
 801a9ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	4a12      	ldr	r2, [pc, #72]	; (801aa3c <UART_InitCallbacksToDefault+0x84>)
 801a9f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	4a11      	ldr	r2, [pc, #68]	; (801aa40 <UART_InitCallbacksToDefault+0x88>)
 801a9fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	4a10      	ldr	r2, [pc, #64]	; (801aa44 <UART_InitCallbacksToDefault+0x8c>)
 801aa04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	4a0f      	ldr	r2, [pc, #60]	; (801aa48 <UART_InitCallbacksToDefault+0x90>)
 801aa0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	4a0e      	ldr	r2, [pc, #56]	; (801aa4c <UART_InitCallbacksToDefault+0x94>)
 801aa14:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

}
 801aa18:	bf00      	nop
 801aa1a:	370c      	adds	r7, #12
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa22:	4770      	bx	lr
 801aa24:	0801a929 	.word	0x0801a929
 801aa28:	0801a915 	.word	0x0801a915
 801aa2c:	0801a93d 	.word	0x0801a93d
 801aa30:	0800e4d5 	.word	0x0800e4d5
 801aa34:	0801a951 	.word	0x0801a951
 801aa38:	0801a965 	.word	0x0801a965
 801aa3c:	0801a979 	.word	0x0801a979
 801aa40:	0801a98d 	.word	0x0801a98d
 801aa44:	0801b675 	.word	0x0801b675
 801aa48:	0801b689 	.word	0x0801b689
 801aa4c:	0801a9a1 	.word	0x0801a9a1

0801aa50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801aa50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801aa54:	b094      	sub	sp, #80	; 0x50
 801aa56:	af00      	add	r7, sp, #0
 801aa58:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa62:	681a      	ldr	r2, [r3, #0]
 801aa64:	4b7e      	ldr	r3, [pc, #504]	; (801ac60 <UART_SetConfig+0x210>)
 801aa66:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa6a:	689a      	ldr	r2, [r3, #8]
 801aa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa6e:	691b      	ldr	r3, [r3, #16]
 801aa70:	431a      	orrs	r2, r3
 801aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa74:	695b      	ldr	r3, [r3, #20]
 801aa76:	431a      	orrs	r2, r3
 801aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa7a:	69db      	ldr	r3, [r3, #28]
 801aa7c:	4313      	orrs	r3, r2
 801aa7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	4977      	ldr	r1, [pc, #476]	; (801ac64 <UART_SetConfig+0x214>)
 801aa88:	4019      	ands	r1, r3
 801aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa8c:	681a      	ldr	r2, [r3, #0]
 801aa8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa90:	430b      	orrs	r3, r1
 801aa92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801aa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	685b      	ldr	r3, [r3, #4]
 801aa9a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801aa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaa0:	68d9      	ldr	r1, [r3, #12]
 801aaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaa4:	681a      	ldr	r2, [r3, #0]
 801aaa6:	ea40 0301 	orr.w	r3, r0, r1
 801aaaa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801aaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaae:	699b      	ldr	r3, [r3, #24]
 801aab0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab4:	681a      	ldr	r2, [r3, #0]
 801aab6:	4b6a      	ldr	r3, [pc, #424]	; (801ac60 <UART_SetConfig+0x210>)
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d009      	beq.n	801aad0 <UART_SetConfig+0x80>
 801aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aabe:	681a      	ldr	r2, [r3, #0]
 801aac0:	4b69      	ldr	r3, [pc, #420]	; (801ac68 <UART_SetConfig+0x218>)
 801aac2:	429a      	cmp	r2, r3
 801aac4:	d004      	beq.n	801aad0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aac8:	6a1a      	ldr	r2, [r3, #32]
 801aaca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aacc:	4313      	orrs	r3, r2
 801aace:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	689b      	ldr	r3, [r3, #8]
 801aad6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 801aada:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aae0:	681a      	ldr	r2, [r3, #0]
 801aae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aae4:	430b      	orrs	r3, r1
 801aae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaee:	f023 000f 	bic.w	r0, r3, #15
 801aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaf8:	681a      	ldr	r2, [r3, #0]
 801aafa:	ea40 0301 	orr.w	r3, r0, r1
 801aafe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801ab00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab02:	681a      	ldr	r2, [r3, #0]
 801ab04:	4b59      	ldr	r3, [pc, #356]	; (801ac6c <UART_SetConfig+0x21c>)
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d102      	bne.n	801ab10 <UART_SetConfig+0xc0>
 801ab0a:	2301      	movs	r3, #1
 801ab0c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab0e:	e029      	b.n	801ab64 <UART_SetConfig+0x114>
 801ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab12:	681a      	ldr	r2, [r3, #0]
 801ab14:	4b56      	ldr	r3, [pc, #344]	; (801ac70 <UART_SetConfig+0x220>)
 801ab16:	429a      	cmp	r2, r3
 801ab18:	d102      	bne.n	801ab20 <UART_SetConfig+0xd0>
 801ab1a:	2302      	movs	r3, #2
 801ab1c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab1e:	e021      	b.n	801ab64 <UART_SetConfig+0x114>
 801ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab22:	681a      	ldr	r2, [r3, #0]
 801ab24:	4b53      	ldr	r3, [pc, #332]	; (801ac74 <UART_SetConfig+0x224>)
 801ab26:	429a      	cmp	r2, r3
 801ab28:	d102      	bne.n	801ab30 <UART_SetConfig+0xe0>
 801ab2a:	2304      	movs	r3, #4
 801ab2c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab2e:	e019      	b.n	801ab64 <UART_SetConfig+0x114>
 801ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab32:	681a      	ldr	r2, [r3, #0]
 801ab34:	4b50      	ldr	r3, [pc, #320]	; (801ac78 <UART_SetConfig+0x228>)
 801ab36:	429a      	cmp	r2, r3
 801ab38:	d102      	bne.n	801ab40 <UART_SetConfig+0xf0>
 801ab3a:	2308      	movs	r3, #8
 801ab3c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab3e:	e011      	b.n	801ab64 <UART_SetConfig+0x114>
 801ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab42:	681a      	ldr	r2, [r3, #0]
 801ab44:	4b4d      	ldr	r3, [pc, #308]	; (801ac7c <UART_SetConfig+0x22c>)
 801ab46:	429a      	cmp	r2, r3
 801ab48:	d102      	bne.n	801ab50 <UART_SetConfig+0x100>
 801ab4a:	2310      	movs	r3, #16
 801ab4c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab4e:	e009      	b.n	801ab64 <UART_SetConfig+0x114>
 801ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab52:	681a      	ldr	r2, [r3, #0]
 801ab54:	4b42      	ldr	r3, [pc, #264]	; (801ac60 <UART_SetConfig+0x210>)
 801ab56:	429a      	cmp	r2, r3
 801ab58:	d102      	bne.n	801ab60 <UART_SetConfig+0x110>
 801ab5a:	2320      	movs	r3, #32
 801ab5c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab5e:	e001      	b.n	801ab64 <UART_SetConfig+0x114>
 801ab60:	2300      	movs	r3, #0
 801ab62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab66:	681a      	ldr	r2, [r3, #0]
 801ab68:	4b3d      	ldr	r3, [pc, #244]	; (801ac60 <UART_SetConfig+0x210>)
 801ab6a:	429a      	cmp	r2, r3
 801ab6c:	d005      	beq.n	801ab7a <UART_SetConfig+0x12a>
 801ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab70:	681a      	ldr	r2, [r3, #0]
 801ab72:	4b3d      	ldr	r3, [pc, #244]	; (801ac68 <UART_SetConfig+0x218>)
 801ab74:	429a      	cmp	r2, r3
 801ab76:	f040 8085 	bne.w	801ac84 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801ab7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ab7c:	2200      	movs	r2, #0
 801ab7e:	623b      	str	r3, [r7, #32]
 801ab80:	627a      	str	r2, [r7, #36]	; 0x24
 801ab82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801ab86:	f7fc fc29 	bl	80173dc <HAL_RCCEx_GetPeriphCLKFreq>
 801ab8a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801ab8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	f000 80e8 	beq.w	801ad64 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab98:	4a39      	ldr	r2, [pc, #228]	; (801ac80 <UART_SetConfig+0x230>)
 801ab9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ab9e:	461a      	mov	r2, r3
 801aba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aba2:	fbb3 f3f2 	udiv	r3, r3, r2
 801aba6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abaa:	685a      	ldr	r2, [r3, #4]
 801abac:	4613      	mov	r3, r2
 801abae:	005b      	lsls	r3, r3, #1
 801abb0:	4413      	add	r3, r2
 801abb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801abb4:	429a      	cmp	r2, r3
 801abb6:	d305      	bcc.n	801abc4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abba:	685b      	ldr	r3, [r3, #4]
 801abbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801abbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801abc0:	429a      	cmp	r2, r3
 801abc2:	d903      	bls.n	801abcc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 801abc4:	2301      	movs	r3, #1
 801abc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801abca:	e048      	b.n	801ac5e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801abcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801abce:	2200      	movs	r2, #0
 801abd0:	61bb      	str	r3, [r7, #24]
 801abd2:	61fa      	str	r2, [r7, #28]
 801abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abd8:	4a29      	ldr	r2, [pc, #164]	; (801ac80 <UART_SetConfig+0x230>)
 801abda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801abde:	b29b      	uxth	r3, r3
 801abe0:	2200      	movs	r2, #0
 801abe2:	613b      	str	r3, [r7, #16]
 801abe4:	617a      	str	r2, [r7, #20]
 801abe6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801abea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801abee:	f7e6 f971 	bl	8000ed4 <__aeabi_uldivmod>
 801abf2:	4602      	mov	r2, r0
 801abf4:	460b      	mov	r3, r1
 801abf6:	4610      	mov	r0, r2
 801abf8:	4619      	mov	r1, r3
 801abfa:	f04f 0200 	mov.w	r2, #0
 801abfe:	f04f 0300 	mov.w	r3, #0
 801ac02:	020b      	lsls	r3, r1, #8
 801ac04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ac08:	0202      	lsls	r2, r0, #8
 801ac0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ac0c:	6849      	ldr	r1, [r1, #4]
 801ac0e:	0849      	lsrs	r1, r1, #1
 801ac10:	2000      	movs	r0, #0
 801ac12:	460c      	mov	r4, r1
 801ac14:	4605      	mov	r5, r0
 801ac16:	eb12 0804 	adds.w	r8, r2, r4
 801ac1a:	eb43 0905 	adc.w	r9, r3, r5
 801ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac20:	685b      	ldr	r3, [r3, #4]
 801ac22:	2200      	movs	r2, #0
 801ac24:	60bb      	str	r3, [r7, #8]
 801ac26:	60fa      	str	r2, [r7, #12]
 801ac28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ac2c:	4640      	mov	r0, r8
 801ac2e:	4649      	mov	r1, r9
 801ac30:	f7e6 f950 	bl	8000ed4 <__aeabi_uldivmod>
 801ac34:	4602      	mov	r2, r0
 801ac36:	460b      	mov	r3, r1
 801ac38:	4613      	mov	r3, r2
 801ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ac3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ac42:	d308      	bcc.n	801ac56 <UART_SetConfig+0x206>
 801ac44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ac4a:	d204      	bcs.n	801ac56 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 801ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ac52:	60da      	str	r2, [r3, #12]
 801ac54:	e003      	b.n	801ac5e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 801ac56:	2301      	movs	r3, #1
 801ac58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 801ac5c:	e082      	b.n	801ad64 <UART_SetConfig+0x314>
 801ac5e:	e081      	b.n	801ad64 <UART_SetConfig+0x314>
 801ac60:	46002400 	.word	0x46002400
 801ac64:	cfff69f3 	.word	0xcfff69f3
 801ac68:	56002400 	.word	0x56002400
 801ac6c:	40013800 	.word	0x40013800
 801ac70:	40004400 	.word	0x40004400
 801ac74:	40004800 	.word	0x40004800
 801ac78:	40004c00 	.word	0x40004c00
 801ac7c:	40005000 	.word	0x40005000
 801ac80:	08023bd8 	.word	0x08023bd8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac86:	69db      	ldr	r3, [r3, #28]
 801ac88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ac8c:	d13c      	bne.n	801ad08 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801ac8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ac90:	2200      	movs	r2, #0
 801ac92:	603b      	str	r3, [r7, #0]
 801ac94:	607a      	str	r2, [r7, #4]
 801ac96:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ac9a:	f7fc fb9f 	bl	80173dc <HAL_RCCEx_GetPeriphCLKFreq>
 801ac9e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801aca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d05e      	beq.n	801ad64 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acaa:	4a39      	ldr	r2, [pc, #228]	; (801ad90 <UART_SetConfig+0x340>)
 801acac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801acb0:	461a      	mov	r2, r3
 801acb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801acb4:	fbb3 f3f2 	udiv	r3, r3, r2
 801acb8:	005a      	lsls	r2, r3, #1
 801acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acbc:	685b      	ldr	r3, [r3, #4]
 801acbe:	085b      	lsrs	r3, r3, #1
 801acc0:	441a      	add	r2, r3
 801acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acc4:	685b      	ldr	r3, [r3, #4]
 801acc6:	fbb2 f3f3 	udiv	r3, r2, r3
 801acca:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801accc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801acce:	2b0f      	cmp	r3, #15
 801acd0:	d916      	bls.n	801ad00 <UART_SetConfig+0x2b0>
 801acd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801acd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801acd8:	d212      	bcs.n	801ad00 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801acda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801acdc:	b29b      	uxth	r3, r3
 801acde:	f023 030f 	bic.w	r3, r3, #15
 801ace2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ace4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ace6:	085b      	lsrs	r3, r3, #1
 801ace8:	b29b      	uxth	r3, r3
 801acea:	f003 0307 	and.w	r3, r3, #7
 801acee:	b29a      	uxth	r2, r3
 801acf0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801acf2:	4313      	orrs	r3, r2
 801acf4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 801acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801acfc:	60da      	str	r2, [r3, #12]
 801acfe:	e031      	b.n	801ad64 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 801ad00:	2301      	movs	r3, #1
 801ad02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801ad06:	e02d      	b.n	801ad64 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801ad08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	469a      	mov	sl, r3
 801ad0e:	4693      	mov	fp, r2
 801ad10:	4650      	mov	r0, sl
 801ad12:	4659      	mov	r1, fp
 801ad14:	f7fc fb62 	bl	80173dc <HAL_RCCEx_GetPeriphCLKFreq>
 801ad18:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 801ad1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d021      	beq.n	801ad64 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ad20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad24:	4a1a      	ldr	r2, [pc, #104]	; (801ad90 <UART_SetConfig+0x340>)
 801ad26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ad2a:	461a      	mov	r2, r3
 801ad2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad2e:	fbb3 f2f2 	udiv	r2, r3, r2
 801ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad34:	685b      	ldr	r3, [r3, #4]
 801ad36:	085b      	lsrs	r3, r3, #1
 801ad38:	441a      	add	r2, r3
 801ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad3c:	685b      	ldr	r3, [r3, #4]
 801ad3e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ad44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad46:	2b0f      	cmp	r3, #15
 801ad48:	d909      	bls.n	801ad5e <UART_SetConfig+0x30e>
 801ad4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ad50:	d205      	bcs.n	801ad5e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ad52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad54:	b29a      	uxth	r2, r3
 801ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	60da      	str	r2, [r3, #12]
 801ad5c:	e002      	b.n	801ad64 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 801ad5e:	2301      	movs	r3, #1
 801ad60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad66:	2201      	movs	r2, #1
 801ad68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad6e:	2201      	movs	r2, #1
 801ad70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad76:	2200      	movs	r2, #0
 801ad78:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad7c:	2200      	movs	r2, #0
 801ad7e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801ad80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801ad84:	4618      	mov	r0, r3
 801ad86:	3750      	adds	r7, #80	; 0x50
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ad8e:	bf00      	nop
 801ad90:	08023bd8 	.word	0x08023bd8

0801ad94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801ad94:	b480      	push	{r7}
 801ad96:	b083      	sub	sp, #12
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ada0:	f003 0301 	and.w	r3, r3, #1
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d00a      	beq.n	801adbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	685b      	ldr	r3, [r3, #4]
 801adae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	430a      	orrs	r2, r1
 801adbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adc2:	f003 0302 	and.w	r3, r3, #2
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d00a      	beq.n	801ade0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	685b      	ldr	r3, [r3, #4]
 801add0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	430a      	orrs	r2, r1
 801adde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ade4:	f003 0304 	and.w	r3, r3, #4
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d00a      	beq.n	801ae02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	685b      	ldr	r3, [r3, #4]
 801adf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	430a      	orrs	r2, r1
 801ae00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae06:	f003 0308 	and.w	r3, r3, #8
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d00a      	beq.n	801ae24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	685b      	ldr	r3, [r3, #4]
 801ae14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	430a      	orrs	r2, r1
 801ae22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae28:	f003 0310 	and.w	r3, r3, #16
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d00a      	beq.n	801ae46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	689b      	ldr	r3, [r3, #8]
 801ae36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	430a      	orrs	r2, r1
 801ae44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae4a:	f003 0320 	and.w	r3, r3, #32
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d00a      	beq.n	801ae68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	689b      	ldr	r3, [r3, #8]
 801ae58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	430a      	orrs	r2, r1
 801ae66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d01a      	beq.n	801aeaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	685b      	ldr	r3, [r3, #4]
 801ae7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	430a      	orrs	r2, r1
 801ae88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ae92:	d10a      	bne.n	801aeaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	685b      	ldr	r3, [r3, #4]
 801ae9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	430a      	orrs	r2, r1
 801aea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aeae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d00a      	beq.n	801aecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	685b      	ldr	r3, [r3, #4]
 801aebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	430a      	orrs	r2, r1
 801aeca:	605a      	str	r2, [r3, #4]
  }
}
 801aecc:	bf00      	nop
 801aece:	370c      	adds	r7, #12
 801aed0:	46bd      	mov	sp, r7
 801aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed6:	4770      	bx	lr

0801aed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b086      	sub	sp, #24
 801aedc:	af02      	add	r7, sp, #8
 801aede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	2200      	movs	r2, #0
 801aee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801aee8:	f7f5 fb3e 	bl	8010568 <HAL_GetTick>
 801aeec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	f003 0308 	and.w	r3, r3, #8
 801aef8:	2b08      	cmp	r3, #8
 801aefa:	d10e      	bne.n	801af1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801aefc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801af00:	9300      	str	r3, [sp, #0]
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	2200      	movs	r2, #0
 801af06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801af0a:	6878      	ldr	r0, [r7, #4]
 801af0c:	f000 f82f 	bl	801af6e <UART_WaitOnFlagUntilTimeout>
 801af10:	4603      	mov	r3, r0
 801af12:	2b00      	cmp	r3, #0
 801af14:	d001      	beq.n	801af1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801af16:	2303      	movs	r3, #3
 801af18:	e025      	b.n	801af66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	f003 0304 	and.w	r3, r3, #4
 801af24:	2b04      	cmp	r3, #4
 801af26:	d10e      	bne.n	801af46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801af28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801af2c:	9300      	str	r3, [sp, #0]
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	2200      	movs	r2, #0
 801af32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801af36:	6878      	ldr	r0, [r7, #4]
 801af38:	f000 f819 	bl	801af6e <UART_WaitOnFlagUntilTimeout>
 801af3c:	4603      	mov	r3, r0
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d001      	beq.n	801af46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801af42:	2303      	movs	r3, #3
 801af44:	e00f      	b.n	801af66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	2220      	movs	r2, #32
 801af4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	2220      	movs	r2, #32
 801af52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	2200      	movs	r2, #0
 801af5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	2200      	movs	r2, #0
 801af60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801af64:	2300      	movs	r3, #0
}
 801af66:	4618      	mov	r0, r3
 801af68:	3710      	adds	r7, #16
 801af6a:	46bd      	mov	sp, r7
 801af6c:	bd80      	pop	{r7, pc}

0801af6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801af6e:	b580      	push	{r7, lr}
 801af70:	b09c      	sub	sp, #112	; 0x70
 801af72:	af00      	add	r7, sp, #0
 801af74:	60f8      	str	r0, [r7, #12]
 801af76:	60b9      	str	r1, [r7, #8]
 801af78:	603b      	str	r3, [r7, #0]
 801af7a:	4613      	mov	r3, r2
 801af7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801af7e:	e0a9      	b.n	801b0d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801af80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801af82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af86:	f000 80a5 	beq.w	801b0d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801af8a:	f7f5 faed 	bl	8010568 <HAL_GetTick>
 801af8e:	4602      	mov	r2, r0
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	1ad3      	subs	r3, r2, r3
 801af94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801af96:	429a      	cmp	r2, r3
 801af98:	d302      	bcc.n	801afa0 <UART_WaitOnFlagUntilTimeout+0x32>
 801af9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d140      	bne.n	801b022 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801afa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801afa8:	e853 3f00 	ldrex	r3, [r3]
 801afac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801afae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801afb4:	667b      	str	r3, [r7, #100]	; 0x64
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	461a      	mov	r2, r3
 801afbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801afbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 801afc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801afc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801afc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801afc6:	e841 2300 	strex	r3, r2, [r1]
 801afca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801afcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d1e6      	bne.n	801afa0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	3308      	adds	r3, #8
 801afd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801afda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afdc:	e853 3f00 	ldrex	r3, [r3]
 801afe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afe4:	f023 0301 	bic.w	r3, r3, #1
 801afe8:	663b      	str	r3, [r7, #96]	; 0x60
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	3308      	adds	r3, #8
 801aff0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801aff2:	64ba      	str	r2, [r7, #72]	; 0x48
 801aff4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aff6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801aff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801affa:	e841 2300 	strex	r3, r2, [r1]
 801affe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801b000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b002:	2b00      	cmp	r3, #0
 801b004:	d1e5      	bne.n	801afd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	2220      	movs	r2, #32
 801b00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	2220      	movs	r2, #32
 801b012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	2200      	movs	r2, #0
 801b01a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801b01e:	2303      	movs	r3, #3
 801b020:	e069      	b.n	801b0f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	f003 0304 	and.w	r3, r3, #4
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d051      	beq.n	801b0d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	69db      	ldr	r3, [r3, #28]
 801b036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b03a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b03e:	d149      	bne.n	801b0d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b048:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b052:	e853 3f00 	ldrex	r3, [r3]
 801b056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b05a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801b05e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	461a      	mov	r2, r3
 801b066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b068:	637b      	str	r3, [r7, #52]	; 0x34
 801b06a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b06c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b06e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b070:	e841 2300 	strex	r3, r2, [r1]
 801b074:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801b076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d1e6      	bne.n	801b04a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	3308      	adds	r3, #8
 801b082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	e853 3f00 	ldrex	r3, [r3]
 801b08a:	613b      	str	r3, [r7, #16]
   return(result);
 801b08c:	693b      	ldr	r3, [r7, #16]
 801b08e:	f023 0301 	bic.w	r3, r3, #1
 801b092:	66bb      	str	r3, [r7, #104]	; 0x68
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	3308      	adds	r3, #8
 801b09a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b09c:	623a      	str	r2, [r7, #32]
 801b09e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b0a0:	69f9      	ldr	r1, [r7, #28]
 801b0a2:	6a3a      	ldr	r2, [r7, #32]
 801b0a4:	e841 2300 	strex	r3, r2, [r1]
 801b0a8:	61bb      	str	r3, [r7, #24]
   return(result);
 801b0aa:	69bb      	ldr	r3, [r7, #24]
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d1e5      	bne.n	801b07c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	2220      	movs	r2, #32
 801b0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	2220      	movs	r2, #32
 801b0bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	2220      	movs	r2, #32
 801b0c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801b0d0:	2303      	movs	r3, #3
 801b0d2:	e010      	b.n	801b0f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	69da      	ldr	r2, [r3, #28]
 801b0da:	68bb      	ldr	r3, [r7, #8]
 801b0dc:	4013      	ands	r3, r2
 801b0de:	68ba      	ldr	r2, [r7, #8]
 801b0e0:	429a      	cmp	r2, r3
 801b0e2:	bf0c      	ite	eq
 801b0e4:	2301      	moveq	r3, #1
 801b0e6:	2300      	movne	r3, #0
 801b0e8:	b2db      	uxtb	r3, r3
 801b0ea:	461a      	mov	r2, r3
 801b0ec:	79fb      	ldrb	r3, [r7, #7]
 801b0ee:	429a      	cmp	r2, r3
 801b0f0:	f43f af46 	beq.w	801af80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b0f4:	2300      	movs	r3, #0
}
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	3770      	adds	r7, #112	; 0x70
 801b0fa:	46bd      	mov	sp, r7
 801b0fc:	bd80      	pop	{r7, pc}
	...

0801b100 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b100:	b580      	push	{r7, lr}
 801b102:	b098      	sub	sp, #96	; 0x60
 801b104:	af00      	add	r7, sp, #0
 801b106:	60f8      	str	r0, [r7, #12]
 801b108:	60b9      	str	r1, [r7, #8]
 801b10a:	4613      	mov	r3, r2
 801b10c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 801b10e:	88fb      	ldrh	r3, [r7, #6]
 801b110:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	68ba      	ldr	r2, [r7, #8]
 801b118:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	88fa      	ldrh	r2, [r7, #6]
 801b11e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	2200      	movs	r2, #0
 801b126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	2222      	movs	r2, #34	; 0x22
 801b12e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b136:	2b00      	cmp	r3, #0
 801b138:	d074      	beq.n	801b224 <UART_Start_Receive_DMA+0x124>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b13e:	4a66      	ldr	r2, [pc, #408]	; (801b2d8 <UART_Start_Receive_DMA+0x1d8>)
 801b140:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b146:	4a65      	ldr	r2, [pc, #404]	; (801b2dc <UART_Start_Receive_DMA+0x1dc>)
 801b148:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b14e:	4a64      	ldr	r2, [pc, #400]	; (801b2e0 <UART_Start_Receive_DMA+0x1e0>)
 801b150:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b156:	2200      	movs	r2, #0
 801b158:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	689b      	ldr	r3, [r3, #8]
 801b15e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b162:	d107      	bne.n	801b174 <UART_Start_Receive_DMA+0x74>
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	691b      	ldr	r3, [r3, #16]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d103      	bne.n	801b174 <UART_Start_Receive_DMA+0x74>
    {
      nbByte = Size * 2U;
 801b16c:	88fb      	ldrh	r3, [r7, #6]
 801b16e:	005b      	lsls	r3, r3, #1
 801b170:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 801b174:	68fb      	ldr	r3, [r7, #12]
 801b176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d02e      	beq.n	801b1e0 <UART_Start_Receive_DMA+0xe0>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d025      	beq.n	801b1d8 <UART_Start_Receive_DMA+0xd8>
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d01f      	beq.n	801b1d8 <UART_Start_Receive_DMA+0xd8>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801b1a4:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	f7f7 ff10 	bl	8012ff0 <HAL_DMAEx_List_Start_IT>
 801b1d0:	4603      	mov	r3, r0
 801b1d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801b1d6:	e013      	b.n	801b200 <UART_Start_Receive_DMA+0x100>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 801b1d8:	2301      	movs	r3, #1
 801b1da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801b1de:	e00f      	b.n	801b200 <UART_Start_Receive_DMA+0x100>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	3324      	adds	r3, #36	; 0x24
 801b1ea:	4619      	mov	r1, r3
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b1f0:	461a      	mov	r2, r3
 801b1f2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b1f6:	f7f7 f867 	bl	80122c8 <HAL_DMA_Start_IT>
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 801b200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801b204:	2b00      	cmp	r3, #0
 801b206:	d00d      	beq.n	801b224 <UART_Start_Receive_DMA+0x124>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	2210      	movs	r2, #16
 801b20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	2200      	movs	r2, #0
 801b214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	2220      	movs	r2, #32
 801b21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 801b220:	2301      	movs	r3, #1
 801b222:	e055      	b.n	801b2d0 <UART_Start_Receive_DMA+0x1d0>
    }
  }
  __HAL_UNLOCK(huart);
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	2200      	movs	r2, #0
 801b228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801b22c:	68fb      	ldr	r3, [r7, #12]
 801b22e:	691b      	ldr	r3, [r3, #16]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d018      	beq.n	801b266 <UART_Start_Receive_DMA+0x166>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b23c:	e853 3f00 	ldrex	r3, [r3]
 801b240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b248:	65bb      	str	r3, [r7, #88]	; 0x58
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	461a      	mov	r2, r3
 801b250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b252:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b254:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b256:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801b258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b25a:	e841 2300 	strex	r3, r2, [r1]
 801b25e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801b260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b262:	2b00      	cmp	r3, #0
 801b264:	d1e6      	bne.n	801b234 <UART_Start_Receive_DMA+0x134>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	3308      	adds	r3, #8
 801b26c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b270:	e853 3f00 	ldrex	r3, [r3]
 801b274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b278:	f043 0301 	orr.w	r3, r3, #1
 801b27c:	657b      	str	r3, [r7, #84]	; 0x54
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	3308      	adds	r3, #8
 801b284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b286:	63ba      	str	r2, [r7, #56]	; 0x38
 801b288:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b28a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b28e:	e841 2300 	strex	r3, r2, [r1]
 801b292:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b296:	2b00      	cmp	r3, #0
 801b298:	d1e5      	bne.n	801b266 <UART_Start_Receive_DMA+0x166>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	3308      	adds	r3, #8
 801b2a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2a2:	69bb      	ldr	r3, [r7, #24]
 801b2a4:	e853 3f00 	ldrex	r3, [r3]
 801b2a8:	617b      	str	r3, [r7, #20]
   return(result);
 801b2aa:	697b      	ldr	r3, [r7, #20]
 801b2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2b0:	653b      	str	r3, [r7, #80]	; 0x50
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	3308      	adds	r3, #8
 801b2b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b2ba:	627a      	str	r2, [r7, #36]	; 0x24
 801b2bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2be:	6a39      	ldr	r1, [r7, #32]
 801b2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b2c2:	e841 2300 	strex	r3, r2, [r1]
 801b2c6:	61fb      	str	r3, [r7, #28]
   return(result);
 801b2c8:	69fb      	ldr	r3, [r7, #28]
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d1e5      	bne.n	801b29a <UART_Start_Receive_DMA+0x19a>

  return HAL_OK;
 801b2ce:	2300      	movs	r3, #0
}
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	3760      	adds	r7, #96	; 0x60
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	bd80      	pop	{r7, pc}
 801b2d8:	0801b433 	.word	0x0801b433
 801b2dc:	0801b527 	.word	0x0801b527
 801b2e0:	0801b567 	.word	0x0801b567

0801b2e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801b2e4:	b480      	push	{r7}
 801b2e6:	b08f      	sub	sp, #60	; 0x3c
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2f2:	6a3b      	ldr	r3, [r7, #32]
 801b2f4:	e853 3f00 	ldrex	r3, [r3]
 801b2f8:	61fb      	str	r3, [r7, #28]
   return(result);
 801b2fa:	69fb      	ldr	r3, [r7, #28]
 801b2fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801b300:	637b      	str	r3, [r7, #52]	; 0x34
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	461a      	mov	r2, r3
 801b308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b30c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b30e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b312:	e841 2300 	strex	r3, r2, [r1]
 801b316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d1e6      	bne.n	801b2ec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	3308      	adds	r3, #8
 801b324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	e853 3f00 	ldrex	r3, [r3]
 801b32c:	60bb      	str	r3, [r7, #8]
   return(result);
 801b32e:	68bb      	ldr	r3, [r7, #8]
 801b330:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801b334:	633b      	str	r3, [r7, #48]	; 0x30
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	3308      	adds	r3, #8
 801b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b33e:	61ba      	str	r2, [r7, #24]
 801b340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b342:	6979      	ldr	r1, [r7, #20]
 801b344:	69ba      	ldr	r2, [r7, #24]
 801b346:	e841 2300 	strex	r3, r2, [r1]
 801b34a:	613b      	str	r3, [r7, #16]
   return(result);
 801b34c:	693b      	ldr	r3, [r7, #16]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d1e5      	bne.n	801b31e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	2220      	movs	r2, #32
 801b356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 801b35a:	bf00      	nop
 801b35c:	373c      	adds	r7, #60	; 0x3c
 801b35e:	46bd      	mov	sp, r7
 801b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b364:	4770      	bx	lr

0801b366 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b366:	b480      	push	{r7}
 801b368:	b095      	sub	sp, #84	; 0x54
 801b36a:	af00      	add	r7, sp, #0
 801b36c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b376:	e853 3f00 	ldrex	r3, [r3]
 801b37a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b37e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b382:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	461a      	mov	r2, r3
 801b38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b38c:	643b      	str	r3, [r7, #64]	; 0x40
 801b38e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b394:	e841 2300 	strex	r3, r2, [r1]
 801b398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d1e6      	bne.n	801b36e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	3308      	adds	r3, #8
 801b3a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3a8:	6a3b      	ldr	r3, [r7, #32]
 801b3aa:	e853 3f00 	ldrex	r3, [r3]
 801b3ae:	61fb      	str	r3, [r7, #28]
   return(result);
 801b3b0:	69fb      	ldr	r3, [r7, #28]
 801b3b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b3b6:	f023 0301 	bic.w	r3, r3, #1
 801b3ba:	64bb      	str	r3, [r7, #72]	; 0x48
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	3308      	adds	r3, #8
 801b3c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b3c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b3c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b3cc:	e841 2300 	strex	r3, r2, [r1]
 801b3d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d1e3      	bne.n	801b3a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b3dc:	2b01      	cmp	r3, #1
 801b3de:	d118      	bne.n	801b412 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	e853 3f00 	ldrex	r3, [r3]
 801b3ec:	60bb      	str	r3, [r7, #8]
   return(result);
 801b3ee:	68bb      	ldr	r3, [r7, #8]
 801b3f0:	f023 0310 	bic.w	r3, r3, #16
 801b3f4:	647b      	str	r3, [r7, #68]	; 0x44
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	461a      	mov	r2, r3
 801b3fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b3fe:	61bb      	str	r3, [r7, #24]
 801b400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b402:	6979      	ldr	r1, [r7, #20]
 801b404:	69ba      	ldr	r2, [r7, #24]
 801b406:	e841 2300 	strex	r3, r2, [r1]
 801b40a:	613b      	str	r3, [r7, #16]
   return(result);
 801b40c:	693b      	ldr	r3, [r7, #16]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d1e6      	bne.n	801b3e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	2220      	movs	r2, #32
 801b416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	2200      	movs	r2, #0
 801b41e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	2200      	movs	r2, #0
 801b424:	671a      	str	r2, [r3, #112]	; 0x70
}
 801b426:	bf00      	nop
 801b428:	3754      	adds	r7, #84	; 0x54
 801b42a:	46bd      	mov	sp, r7
 801b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b430:	4770      	bx	lr

0801b432 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801b432:	b580      	push	{r7, lr}
 801b434:	b096      	sub	sp, #88	; 0x58
 801b436:	af00      	add	r7, sp, #0
 801b438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b43e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b444:	2b81      	cmp	r3, #129	; 0x81
 801b446:	d057      	beq.n	801b4f8 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 801b448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b44a:	2200      	movs	r2, #0
 801b44c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b458:	e853 3f00 	ldrex	r3, [r3]
 801b45c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b464:	653b      	str	r3, [r7, #80]	; 0x50
 801b466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	461a      	mov	r2, r3
 801b46c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b46e:	647b      	str	r3, [r7, #68]	; 0x44
 801b470:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b476:	e841 2300 	strex	r3, r2, [r1]
 801b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d1e6      	bne.n	801b450 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	3308      	adds	r3, #8
 801b488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48c:	e853 3f00 	ldrex	r3, [r3]
 801b490:	623b      	str	r3, [r7, #32]
   return(result);
 801b492:	6a3b      	ldr	r3, [r7, #32]
 801b494:	f023 0301 	bic.w	r3, r3, #1
 801b498:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b49a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	3308      	adds	r3, #8
 801b4a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b4a2:	633a      	str	r2, [r7, #48]	; 0x30
 801b4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b4a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b4aa:	e841 2300 	strex	r3, r2, [r1]
 801b4ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d1e5      	bne.n	801b482 <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801b4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b4b8:	2220      	movs	r2, #32
 801b4ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4c2:	2b01      	cmp	r3, #1
 801b4c4:	d118      	bne.n	801b4f8 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b4cc:	693b      	ldr	r3, [r7, #16]
 801b4ce:	e853 3f00 	ldrex	r3, [r3]
 801b4d2:	60fb      	str	r3, [r7, #12]
   return(result);
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	f023 0310 	bic.w	r3, r3, #16
 801b4da:	64bb      	str	r3, [r7, #72]	; 0x48
 801b4dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	461a      	mov	r2, r3
 801b4e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b4e4:	61fb      	str	r3, [r7, #28]
 801b4e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b4e8:	69b9      	ldr	r1, [r7, #24]
 801b4ea:	69fa      	ldr	r2, [r7, #28]
 801b4ec:	e841 2300 	strex	r3, r2, [r1]
 801b4f0:	617b      	str	r3, [r7, #20]
   return(result);
 801b4f2:	697b      	ldr	r3, [r7, #20]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d1e6      	bne.n	801b4c6 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4fc:	2b01      	cmp	r3, #1
 801b4fe:	d109      	bne.n	801b514 <UART_DMAReceiveCplt+0xe2>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801b500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b502:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b508:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 801b50c:	4611      	mov	r1, r2
 801b50e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b510:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b512:	e004      	b.n	801b51e <UART_DMAReceiveCplt+0xec>
    huart->RxCpltCallback(huart);
 801b514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b51a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b51c:	4798      	blx	r3
}
 801b51e:	bf00      	nop
 801b520:	3758      	adds	r7, #88	; 0x58
 801b522:	46bd      	mov	sp, r7
 801b524:	bd80      	pop	{r7, pc}

0801b526 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b526:	b580      	push	{r7, lr}
 801b528:	b084      	sub	sp, #16
 801b52a:	af00      	add	r7, sp, #0
 801b52c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b532:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b538:	2b01      	cmp	r3, #1
 801b53a:	d10b      	bne.n	801b554 <UART_DMARxHalfCplt+0x2e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b542:	68fa      	ldr	r2, [r7, #12]
 801b544:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 801b548:	0852      	lsrs	r2, r2, #1
 801b54a:	b292      	uxth	r2, r2
 801b54c:	4611      	mov	r1, r2
 801b54e:	68f8      	ldr	r0, [r7, #12]
 801b550:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b552:	e004      	b.n	801b55e <UART_DMARxHalfCplt+0x38>
    huart->RxHalfCpltCallback(huart);
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b55a:	68f8      	ldr	r0, [r7, #12]
 801b55c:	4798      	blx	r3
}
 801b55e:	bf00      	nop
 801b560:	3710      	adds	r7, #16
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}

0801b566 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801b566:	b580      	push	{r7, lr}
 801b568:	b086      	sub	sp, #24
 801b56a:	af00      	add	r7, sp, #0
 801b56c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b572:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b57a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801b57c:	697b      	ldr	r3, [r7, #20]
 801b57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b582:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801b584:	697b      	ldr	r3, [r7, #20]
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	689b      	ldr	r3, [r3, #8]
 801b58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b58e:	2b80      	cmp	r3, #128	; 0x80
 801b590:	d109      	bne.n	801b5a6 <UART_DMAError+0x40>
 801b592:	693b      	ldr	r3, [r7, #16]
 801b594:	2b21      	cmp	r3, #33	; 0x21
 801b596:	d106      	bne.n	801b5a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801b598:	697b      	ldr	r3, [r7, #20]
 801b59a:	2200      	movs	r2, #0
 801b59c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801b5a0:	6978      	ldr	r0, [r7, #20]
 801b5a2:	f7ff fe9f 	bl	801b2e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801b5a6:	697b      	ldr	r3, [r7, #20]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	689b      	ldr	r3, [r3, #8]
 801b5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b5b0:	2b40      	cmp	r3, #64	; 0x40
 801b5b2:	d109      	bne.n	801b5c8 <UART_DMAError+0x62>
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	2b22      	cmp	r3, #34	; 0x22
 801b5b8:	d106      	bne.n	801b5c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801b5ba:	697b      	ldr	r3, [r7, #20]
 801b5bc:	2200      	movs	r2, #0
 801b5be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801b5c2:	6978      	ldr	r0, [r7, #20]
 801b5c4:	f7ff fecf 	bl	801b366 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801b5c8:	697b      	ldr	r3, [r7, #20]
 801b5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b5ce:	f043 0210 	orr.w	r2, r3, #16
 801b5d2:	697b      	ldr	r3, [r7, #20]
 801b5d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b5de:	6978      	ldr	r0, [r7, #20]
 801b5e0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b5e2:	bf00      	nop
 801b5e4:	3718      	adds	r7, #24
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	bd80      	pop	{r7, pc}

0801b5ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b5ea:	b580      	push	{r7, lr}
 801b5ec:	b084      	sub	sp, #16
 801b5ee:	af00      	add	r7, sp, #0
 801b5f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	2200      	movs	r2, #0
 801b5fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	2200      	movs	r2, #0
 801b604:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b60e:	68f8      	ldr	r0, [r7, #12]
 801b610:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b612:	bf00      	nop
 801b614:	3710      	adds	r7, #16
 801b616:	46bd      	mov	sp, r7
 801b618:	bd80      	pop	{r7, pc}

0801b61a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b61a:	b580      	push	{r7, lr}
 801b61c:	b088      	sub	sp, #32
 801b61e:	af00      	add	r7, sp, #0
 801b620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	e853 3f00 	ldrex	r3, [r3]
 801b62e:	60bb      	str	r3, [r7, #8]
   return(result);
 801b630:	68bb      	ldr	r3, [r7, #8]
 801b632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b636:	61fb      	str	r3, [r7, #28]
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	461a      	mov	r2, r3
 801b63e:	69fb      	ldr	r3, [r7, #28]
 801b640:	61bb      	str	r3, [r7, #24]
 801b642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b644:	6979      	ldr	r1, [r7, #20]
 801b646:	69ba      	ldr	r2, [r7, #24]
 801b648:	e841 2300 	strex	r3, r2, [r1]
 801b64c:	613b      	str	r3, [r7, #16]
   return(result);
 801b64e:	693b      	ldr	r3, [r7, #16]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d1e6      	bne.n	801b622 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	2220      	movs	r2, #32
 801b658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	2200      	movs	r2, #0
 801b660:	675a      	str	r2, [r3, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b668:	6878      	ldr	r0, [r7, #4]
 801b66a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b66c:	bf00      	nop
 801b66e:	3720      	adds	r7, #32
 801b670:	46bd      	mov	sp, r7
 801b672:	bd80      	pop	{r7, pc}

0801b674 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801b674:	b480      	push	{r7}
 801b676:	b083      	sub	sp, #12
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801b67c:	bf00      	nop
 801b67e:	370c      	adds	r7, #12
 801b680:	46bd      	mov	sp, r7
 801b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b686:	4770      	bx	lr

0801b688 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801b688:	b480      	push	{r7}
 801b68a:	b083      	sub	sp, #12
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801b690:	bf00      	nop
 801b692:	370c      	adds	r7, #12
 801b694:	46bd      	mov	sp, r7
 801b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b69a:	4770      	bx	lr

0801b69c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801b69c:	b480      	push	{r7}
 801b69e:	b085      	sub	sp, #20
 801b6a0:	af00      	add	r7, sp, #0
 801b6a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801b6aa:	2b01      	cmp	r3, #1
 801b6ac:	d101      	bne.n	801b6b2 <HAL_UARTEx_DisableFifoMode+0x16>
 801b6ae:	2302      	movs	r3, #2
 801b6b0:	e027      	b.n	801b702 <HAL_UARTEx_DisableFifoMode+0x66>
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	2201      	movs	r2, #1
 801b6b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	2224      	movs	r2, #36	; 0x24
 801b6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	681a      	ldr	r2, [r3, #0]
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	f022 0201 	bic.w	r2, r2, #1
 801b6d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801b6e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	68fa      	ldr	r2, [r7, #12]
 801b6ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	2220      	movs	r2, #32
 801b6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	2200      	movs	r2, #0
 801b6fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801b700:	2300      	movs	r3, #0
}
 801b702:	4618      	mov	r0, r3
 801b704:	3714      	adds	r7, #20
 801b706:	46bd      	mov	sp, r7
 801b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b70c:	4770      	bx	lr

0801b70e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b70e:	b580      	push	{r7, lr}
 801b710:	b084      	sub	sp, #16
 801b712:	af00      	add	r7, sp, #0
 801b714:	6078      	str	r0, [r7, #4]
 801b716:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801b71e:	2b01      	cmp	r3, #1
 801b720:	d101      	bne.n	801b726 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801b722:	2302      	movs	r3, #2
 801b724:	e02d      	b.n	801b782 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	2201      	movs	r2, #1
 801b72a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	2224      	movs	r2, #36	; 0x24
 801b732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	681a      	ldr	r2, [r3, #0]
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	f022 0201 	bic.w	r2, r2, #1
 801b74c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	689b      	ldr	r3, [r3, #8]
 801b754:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	683a      	ldr	r2, [r7, #0]
 801b75e:	430a      	orrs	r2, r1
 801b760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b762:	6878      	ldr	r0, [r7, #4]
 801b764:	f000 f850 	bl	801b808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	68fa      	ldr	r2, [r7, #12]
 801b76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	2220      	movs	r2, #32
 801b774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	2200      	movs	r2, #0
 801b77c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801b780:	2300      	movs	r3, #0
}
 801b782:	4618      	mov	r0, r3
 801b784:	3710      	adds	r7, #16
 801b786:	46bd      	mov	sp, r7
 801b788:	bd80      	pop	{r7, pc}

0801b78a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b78a:	b580      	push	{r7, lr}
 801b78c:	b084      	sub	sp, #16
 801b78e:	af00      	add	r7, sp, #0
 801b790:	6078      	str	r0, [r7, #4]
 801b792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801b79a:	2b01      	cmp	r3, #1
 801b79c:	d101      	bne.n	801b7a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801b79e:	2302      	movs	r3, #2
 801b7a0:	e02d      	b.n	801b7fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	2201      	movs	r2, #1
 801b7a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	2224      	movs	r2, #36	; 0x24
 801b7ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	681a      	ldr	r2, [r3, #0]
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	f022 0201 	bic.w	r2, r2, #1
 801b7c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	689b      	ldr	r3, [r3, #8]
 801b7d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	683a      	ldr	r2, [r7, #0]
 801b7da:	430a      	orrs	r2, r1
 801b7dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b7de:	6878      	ldr	r0, [r7, #4]
 801b7e0:	f000 f812 	bl	801b808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	68fa      	ldr	r2, [r7, #12]
 801b7ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	2220      	movs	r2, #32
 801b7f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	2200      	movs	r2, #0
 801b7f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801b7fc:	2300      	movs	r3, #0
}
 801b7fe:	4618      	mov	r0, r3
 801b800:	3710      	adds	r7, #16
 801b802:	46bd      	mov	sp, r7
 801b804:	bd80      	pop	{r7, pc}
	...

0801b808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801b808:	b480      	push	{r7}
 801b80a:	b085      	sub	sp, #20
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b814:	2b00      	cmp	r3, #0
 801b816:	d108      	bne.n	801b82a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	2201      	movs	r2, #1
 801b81c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	2201      	movs	r2, #1
 801b824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801b828:	e031      	b.n	801b88e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801b82a:	2308      	movs	r3, #8
 801b82c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801b82e:	2308      	movs	r3, #8
 801b830:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	689b      	ldr	r3, [r3, #8]
 801b838:	0e5b      	lsrs	r3, r3, #25
 801b83a:	b2db      	uxtb	r3, r3
 801b83c:	f003 0307 	and.w	r3, r3, #7
 801b840:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	689b      	ldr	r3, [r3, #8]
 801b848:	0f5b      	lsrs	r3, r3, #29
 801b84a:	b2db      	uxtb	r3, r3
 801b84c:	f003 0307 	and.w	r3, r3, #7
 801b850:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b852:	7bbb      	ldrb	r3, [r7, #14]
 801b854:	7b3a      	ldrb	r2, [r7, #12]
 801b856:	4911      	ldr	r1, [pc, #68]	; (801b89c <UARTEx_SetNbDataToProcess+0x94>)
 801b858:	5c8a      	ldrb	r2, [r1, r2]
 801b85a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801b85e:	7b3a      	ldrb	r2, [r7, #12]
 801b860:	490f      	ldr	r1, [pc, #60]	; (801b8a0 <UARTEx_SetNbDataToProcess+0x98>)
 801b862:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b864:	fb93 f3f2 	sdiv	r3, r3, r2
 801b868:	b29a      	uxth	r2, r3
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b870:	7bfb      	ldrb	r3, [r7, #15]
 801b872:	7b7a      	ldrb	r2, [r7, #13]
 801b874:	4909      	ldr	r1, [pc, #36]	; (801b89c <UARTEx_SetNbDataToProcess+0x94>)
 801b876:	5c8a      	ldrb	r2, [r1, r2]
 801b878:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801b87c:	7b7a      	ldrb	r2, [r7, #13]
 801b87e:	4908      	ldr	r1, [pc, #32]	; (801b8a0 <UARTEx_SetNbDataToProcess+0x98>)
 801b880:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b882:	fb93 f3f2 	sdiv	r3, r3, r2
 801b886:	b29a      	uxth	r2, r3
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801b88e:	bf00      	nop
 801b890:	3714      	adds	r7, #20
 801b892:	46bd      	mov	sp, r7
 801b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b898:	4770      	bx	lr
 801b89a:	bf00      	nop
 801b89c:	08023bf0 	.word	0x08023bf0
 801b8a0:	08023bf8 	.word	0x08023bf8

0801b8a4 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b096      	sub	sp, #88	; 0x58
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	60f8      	str	r0, [r7, #12]
 801b8ac:	60b9      	str	r1, [r7, #8]
 801b8ae:	607a      	str	r2, [r7, #4]
 801b8b0:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	3303      	adds	r3, #3
 801b8b6:	f023 0303 	bic.w	r3, r3, #3
 801b8ba:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801b8bc:	f3ef 8310 	mrs	r3, PRIMASK
 801b8c0:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 801b8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 801b8c4:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 801b8c6:	b672      	cpsid	i
#endif
    return(int_posture);
 801b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 801b8ca:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801b8cc:	4b55      	ldr	r3, [pc, #340]	; (801ba24 <_tx_byte_allocate+0x180>)
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b8da:	621a      	str	r2, [r3, #32]
 801b8dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b8de:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8e2:	f383 8810 	msr	PRIMASK, r3
}
 801b8e6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 801b8e8:	6879      	ldr	r1, [r7, #4]
 801b8ea:	68f8      	ldr	r0, [r7, #12]
 801b8ec:	f000 fa42 	bl	801bd74 <_tx_byte_pool_search>
 801b8f0:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801b8f2:	f3ef 8310 	mrs	r3, PRIMASK
 801b8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801b8fa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801b8fc:	b672      	cpsid	i
    return(int_posture);
 801b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 801b900:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 801b902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b904:	2b00      	cmp	r3, #0
 801b906:	d002      	beq.n	801b90e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 801b908:	2301      	movs	r3, #1
 801b90a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b90c:	e006      	b.n	801b91c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 801b90e:	68fb      	ldr	r3, [r7, #12]
 801b910:	6a1b      	ldr	r3, [r3, #32]
 801b912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b914:	429a      	cmp	r2, r3
 801b916:	d101      	bne.n	801b91c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 801b918:	2301      	movs	r3, #1
 801b91a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 801b91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d0d9      	beq.n	801b8d6 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 801b922:	68bb      	ldr	r3, [r7, #8]
 801b924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b926:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 801b928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d008      	beq.n	801b940 <_tx_byte_allocate+0x9c>
 801b92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b930:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801b932:	6a3b      	ldr	r3, [r7, #32]
 801b934:	f383 8810 	msr	PRIMASK, r3
}
 801b938:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 801b93a:	2300      	movs	r3, #0
 801b93c:	653b      	str	r3, [r7, #80]	; 0x50
 801b93e:	e06c      	b.n	801ba1a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801b940:	683b      	ldr	r3, [r7, #0]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d061      	beq.n	801ba0a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801b946:	4b38      	ldr	r3, [pc, #224]	; (801ba28 <_tx_byte_allocate+0x184>)
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d007      	beq.n	801b95e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 801b94e:	2310      	movs	r3, #16
 801b950:	653b      	str	r3, [r7, #80]	; 0x50
 801b952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b954:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801b956:	69fb      	ldr	r3, [r7, #28]
 801b958:	f383 8810 	msr	PRIMASK, r3
}
 801b95c:	e05d      	b.n	801ba1a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 801b95e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b960:	4a32      	ldr	r2, [pc, #200]	; (801ba2c <_tx_byte_allocate+0x188>)
 801b962:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 801b964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b966:	68fa      	ldr	r2, [r7, #12]
 801b968:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 801b96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b96c:	68ba      	ldr	r2, [r7, #8]
 801b96e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 801b970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b972:	687a      	ldr	r2, [r7, #4]
 801b974:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801b976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b978:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b97c:	1c5a      	adds	r2, r3, #1
 801b97e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b980:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b988:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 801b98a:	68fb      	ldr	r3, [r7, #12]
 801b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b98e:	1c5a      	adds	r2, r3, #1
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 801b994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b996:	2b00      	cmp	r3, #0
 801b998:	d109      	bne.n	801b9ae <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b99e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801b9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b9a4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801b9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b9aa:	675a      	str	r2, [r3, #116]	; 0x74
 801b9ac:	e011      	b.n	801b9d2 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 801b9b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b9b8:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801b9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b9bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9be:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801b9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b9c4:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b9ca:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801b9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b9ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b9d0:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 801b9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9d4:	2209      	movs	r2, #9
 801b9d6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801b9d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9da:	2201      	movs	r2, #1
 801b9dc:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801b9de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9e0:	683a      	ldr	r2, [r7, #0]
 801b9e2:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801b9e4:	4b10      	ldr	r3, [pc, #64]	; (801ba28 <_tx_byte_allocate+0x184>)
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	3301      	adds	r3, #1
 801b9ea:	4a0f      	ldr	r2, [pc, #60]	; (801ba28 <_tx_byte_allocate+0x184>)
 801b9ec:	6013      	str	r3, [r2, #0]
 801b9ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b9f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801b9f2:	69bb      	ldr	r3, [r7, #24]
 801b9f4:	f383 8810 	msr	PRIMASK, r3
}
 801b9f8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801b9fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801b9fc:	f001 fc0e 	bl	801d21c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801ba00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ba02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba06:	653b      	str	r3, [r7, #80]	; 0x50
 801ba08:	e007      	b.n	801ba1a <_tx_byte_allocate+0x176>
 801ba0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ba0c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ba0e:	697b      	ldr	r3, [r7, #20]
 801ba10:	f383 8810 	msr	PRIMASK, r3
}
 801ba14:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 801ba16:	2310      	movs	r3, #16
 801ba18:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 801ba1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801ba1c:	4618      	mov	r0, r3
 801ba1e:	3758      	adds	r7, #88	; 0x58
 801ba20:	46bd      	mov	sp, r7
 801ba22:	bd80      	pop	{r7, pc}
 801ba24:	200b6ac0 	.word	0x200b6ac0
 801ba28:	200b6b58 	.word	0x200b6b58
 801ba2c:	0801ba31 	.word	0x0801ba31

0801ba30 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b08e      	sub	sp, #56	; 0x38
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	6078      	str	r0, [r7, #4]
 801ba38:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ba3a:	f3ef 8310 	mrs	r3, PRIMASK
 801ba3e:	623b      	str	r3, [r7, #32]
    return(posture);
 801ba40:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801ba42:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801ba44:	b672      	cpsid	i
    return(int_posture);
 801ba46:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 801ba48:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ba4e:	4a33      	ldr	r2, [pc, #204]	; (801bb1c <_tx_byte_pool_cleanup+0xec>)
 801ba50:	4293      	cmp	r3, r2
 801ba52:	d158      	bne.n	801bb06 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ba5a:	683a      	ldr	r2, [r7, #0]
 801ba5c:	429a      	cmp	r2, r3
 801ba5e:	d152      	bne.n	801bb06 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba64:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 801ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d04c      	beq.n	801bb06 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 801ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	4a2b      	ldr	r2, [pc, #172]	; (801bb20 <_tx_byte_pool_cleanup+0xf0>)
 801ba72:	4293      	cmp	r3, r2
 801ba74:	d147      	bne.n	801bb06 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d043      	beq.n	801bb06 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	2200      	movs	r2, #0
 801ba82:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 801ba84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba88:	1e5a      	subs	r2, r3, #1
 801ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba8c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba92:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d103      	bne.n	801baa2 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	625a      	str	r2, [r3, #36]	; 0x24
 801baa0:	e013      	b.n	801baca <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801baa6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801baac:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bab2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801bab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bab8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801babc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801babe:	687a      	ldr	r2, [r7, #4]
 801bac0:	429a      	cmp	r2, r3
 801bac2:	d102      	bne.n	801baca <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 801bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bac8:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bace:	2b09      	cmp	r3, #9
 801bad0:	d119      	bne.n	801bb06 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	2210      	movs	r2, #16
 801bad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801bada:	4b12      	ldr	r3, [pc, #72]	; (801bb24 <_tx_byte_pool_cleanup+0xf4>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	3301      	adds	r3, #1
 801bae0:	4a10      	ldr	r2, [pc, #64]	; (801bb24 <_tx_byte_pool_cleanup+0xf4>)
 801bae2:	6013      	str	r3, [r2, #0]
 801bae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bae6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bae8:	693b      	ldr	r3, [r7, #16]
 801baea:	f383 8810 	msr	PRIMASK, r3
}
 801baee:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801baf0:	6878      	ldr	r0, [r7, #4]
 801baf2:	f001 fa93 	bl	801d01c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801baf6:	f3ef 8310 	mrs	r3, PRIMASK
 801bafa:	61bb      	str	r3, [r7, #24]
    return(posture);
 801bafc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801bafe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801bb00:	b672      	cpsid	i
    return(int_posture);
 801bb02:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801bb04:	637b      	str	r3, [r7, #52]	; 0x34
 801bb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb08:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	f383 8810 	msr	PRIMASK, r3
}
 801bb10:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801bb12:	bf00      	nop
 801bb14:	3738      	adds	r7, #56	; 0x38
 801bb16:	46bd      	mov	sp, r7
 801bb18:	bd80      	pop	{r7, pc}
 801bb1a:	bf00      	nop
 801bb1c:	0801ba31 	.word	0x0801ba31
 801bb20:	42595445 	.word	0x42595445
 801bb24:	200b6b58 	.word	0x200b6b58

0801bb28 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 801bb28:	b580      	push	{r7, lr}
 801bb2a:	b08e      	sub	sp, #56	; 0x38
 801bb2c:	af00      	add	r7, sp, #0
 801bb2e:	60f8      	str	r0, [r7, #12]
 801bb30:	60b9      	str	r1, [r7, #8]
 801bb32:	607a      	str	r2, [r7, #4]
 801bb34:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801bb36:	2234      	movs	r2, #52	; 0x34
 801bb38:	2100      	movs	r1, #0
 801bb3a:	68f8      	ldr	r0, [r7, #12]
 801bb3c:	f004 fd19 	bl	8020572 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801bb40:	683b      	ldr	r3, [r7, #0]
 801bb42:	f023 0303 	bic.w	r3, r3, #3
 801bb46:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	68ba      	ldr	r2, [r7, #8]
 801bb4c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	687a      	ldr	r2, [r7, #4]
 801bb52:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	683a      	ldr	r2, [r7, #0]
 801bb58:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	687a      	ldr	r2, [r7, #4]
 801bb5e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	687a      	ldr	r2, [r7, #4]
 801bb64:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	f1a3 0208 	sub.w	r2, r3, #8
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	2202      	movs	r2, #2
 801bb74:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801bb7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bb7c:	683b      	ldr	r3, [r7, #0]
 801bb7e:	4413      	add	r3, r2
 801bb80:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801bb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb84:	3b04      	subs	r3, #4
 801bb86:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801bb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 801bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bb94:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 801bb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb98:	3b04      	subs	r3, #4
 801bb9a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801bb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bba2:	687a      	ldr	r2, [r7, #4]
 801bba4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbac:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bbb2:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 801bbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbba:	3304      	adds	r3, #4
 801bbbc:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801bbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbc0:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbc4:	4a1f      	ldr	r2, [pc, #124]	; (801bc44 <_tx_byte_pool_create+0x11c>)
 801bbc6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	2200      	movs	r2, #0
 801bbcc:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bbce:	f3ef 8310 	mrs	r3, PRIMASK
 801bbd2:	61bb      	str	r3, [r7, #24]
    return(posture);
 801bbd4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801bbd6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801bbd8:	b672      	cpsid	i
    return(int_posture);
 801bbda:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 801bbdc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	4a19      	ldr	r2, [pc, #100]	; (801bc48 <_tx_byte_pool_create+0x120>)
 801bbe2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 801bbe4:	4b19      	ldr	r3, [pc, #100]	; (801bc4c <_tx_byte_pool_create+0x124>)
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d109      	bne.n	801bc00 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 801bbec:	4a18      	ldr	r2, [pc, #96]	; (801bc50 <_tx_byte_pool_create+0x128>)
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	68fa      	ldr	r2, [r7, #12]
 801bbf6:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	68fa      	ldr	r2, [r7, #12]
 801bbfc:	631a      	str	r2, [r3, #48]	; 0x30
 801bbfe:	e011      	b.n	801bc24 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 801bc00:	4b13      	ldr	r3, [pc, #76]	; (801bc50 <_tx_byte_pool_create+0x128>)
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801bc06:	6a3b      	ldr	r3, [r7, #32]
 801bc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc0a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 801bc0c:	6a3b      	ldr	r3, [r7, #32]
 801bc0e:	68fa      	ldr	r2, [r7, #12]
 801bc10:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801bc12:	69fb      	ldr	r3, [r7, #28]
 801bc14:	68fa      	ldr	r2, [r7, #12]
 801bc16:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	69fa      	ldr	r2, [r7, #28]
 801bc1c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	6a3a      	ldr	r2, [r7, #32]
 801bc22:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 801bc24:	4b09      	ldr	r3, [pc, #36]	; (801bc4c <_tx_byte_pool_create+0x124>)
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	3301      	adds	r3, #1
 801bc2a:	4a08      	ldr	r2, [pc, #32]	; (801bc4c <_tx_byte_pool_create+0x124>)
 801bc2c:	6013      	str	r3, [r2, #0]
 801bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc30:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bc32:	693b      	ldr	r3, [r7, #16]
 801bc34:	f383 8810 	msr	PRIMASK, r3
}
 801bc38:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801bc3a:	2300      	movs	r3, #0
}
 801bc3c:	4618      	mov	r0, r3
 801bc3e:	3738      	adds	r7, #56	; 0x38
 801bc40:	46bd      	mov	sp, r7
 801bc42:	bd80      	pop	{r7, pc}
 801bc44:	ffffeeee 	.word	0xffffeeee
 801bc48:	42595445 	.word	0x42595445
 801bc4c:	200b6ab4 	.word	0x200b6ab4
 801bc50:	200b6ab0 	.word	0x200b6ab0

0801bc54 <_tx_byte_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b092      	sub	sp, #72	; 0x48
 801bc58:	af00      	add	r7, sp, #0
 801bc5a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bc5c:	f3ef 8310 	mrs	r3, PRIMASK
 801bc60:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801bc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801bc64:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801bc66:	b672      	cpsid	i
    return(int_posture);
 801bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_BYTE_POOL    *next_pool;
TX_BYTE_POOL    *previous_pool;


    /* Disable interrupts to remove the byte pool from the created list.  */
    TX_DISABLE
 801bc6a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_BYTE_POOL_DELETE_INSERT

    /* Clear the byte pool ID to make it invalid.  */
    pool_ptr -> tx_byte_pool_id =  TX_CLEAR_ID;
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	2200      	movs	r2, #0
 801bc70:	601a      	str	r2, [r3, #0]

    /* Decrement the number of byte pools created.  */
    _tx_byte_pool_created_count--;
 801bc72:	4b3d      	ldr	r3, [pc, #244]	; (801bd68 <_tx_byte_pool_delete+0x114>)
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	3b01      	subs	r3, #1
 801bc78:	4a3b      	ldr	r2, [pc, #236]	; (801bd68 <_tx_byte_pool_delete+0x114>)
 801bc7a:	6013      	str	r3, [r2, #0]

    /* See if the byte pool is the only one on the list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 801bc7c:	4b3a      	ldr	r3, [pc, #232]	; (801bd68 <_tx_byte_pool_delete+0x114>)
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d103      	bne.n	801bc8c <_tx_byte_pool_delete+0x38>
    {

        /* Only created byte pool, just set the created list to NULL.  */
        _tx_byte_pool_created_ptr =  TX_NULL;
 801bc84:	4b39      	ldr	r3, [pc, #228]	; (801bd6c <_tx_byte_pool_delete+0x118>)
 801bc86:	2200      	movs	r2, #0
 801bc88:	601a      	str	r2, [r3, #0]
 801bc8a:	e013      	b.n	801bcb4 <_tx_byte_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_pool =                                   pool_ptr -> tx_byte_pool_created_next;
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc90:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_pool =                               pool_ptr -> tx_byte_pool_created_previous;
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc96:	637b      	str	r3, [r7, #52]	; 0x34
        next_pool -> tx_byte_pool_created_previous =  previous_pool;
 801bc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bc9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bc9c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  next_pool;
 801bc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bca2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* See if we have to update the created list head pointer.  */
        if (_tx_byte_pool_created_ptr == pool_ptr)
 801bca4:	4b31      	ldr	r3, [pc, #196]	; (801bd6c <_tx_byte_pool_delete+0x118>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	687a      	ldr	r2, [r7, #4]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d102      	bne.n	801bcb4 <_tx_byte_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_byte_pool_created_ptr =  next_pool;
 801bcae:	4a2f      	ldr	r2, [pc, #188]	; (801bd6c <_tx_byte_pool_delete+0x118>)
 801bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bcb2:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801bcb4:	4b2e      	ldr	r3, [pc, #184]	; (801bd70 <_tx_byte_pool_delete+0x11c>)
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	3301      	adds	r3, #1
 801bcba:	4a2d      	ldr	r2, [pc, #180]	; (801bd70 <_tx_byte_pool_delete+0x11c>)
 801bcbc:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                pool_ptr -> tx_byte_pool_suspension_list;
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcc2:	647b      	str	r3, [r7, #68]	; 0x44
    pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	2200      	movs	r2, #0
 801bcc8:	625a      	str	r2, [r3, #36]	; 0x24
    suspended_count =                           pool_ptr -> tx_byte_pool_suspended_count;
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcce:	643b      	str	r3, [r7, #64]	; 0x40
    pool_ptr -> tx_byte_pool_suspended_count =  TX_NO_SUSPENSIONS;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	2200      	movs	r2, #0
 801bcd4:	629a      	str	r2, [r3, #40]	; 0x28
 801bcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bcd8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcdc:	f383 8810 	msr	PRIMASK, r3
}
 801bce0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the byte pool list to resume any and all threads suspended
       on this byte pool.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 801bce2:	e024      	b.n	801bd2e <_tx_byte_pool_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 801bce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bce6:	3b01      	subs	r3, #1
 801bce8:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bcea:	f3ef 8310 	mrs	r3, PRIMASK
 801bcee:	61fb      	str	r3, [r7, #28]
    return(posture);
 801bcf0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801bcf2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801bcf4:	b672      	cpsid	i
    return(int_posture);
 801bcf6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 801bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801bcfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801bd00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd02:	2201      	movs	r2, #1
 801bd04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 801bd08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd0c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801bd0e:	4b18      	ldr	r3, [pc, #96]	; (801bd70 <_tx_byte_pool_delete+0x11c>)
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	3301      	adds	r3, #1
 801bd14:	4a16      	ldr	r2, [pc, #88]	; (801bd70 <_tx_byte_pool_delete+0x11c>)
 801bd16:	6013      	str	r3, [r2, #0]
 801bd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd1a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bd1c:	6a3b      	ldr	r3, [r7, #32]
 801bd1e:	f383 8810 	msr	PRIMASK, r3
}
 801bd22:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801bd24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bd26:	f001 f979 	bl	801d01c <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd2c:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 801bd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d1d7      	bne.n	801bce4 <_tx_byte_pool_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bd34:	f3ef 8310 	mrs	r3, PRIMASK
 801bd38:	613b      	str	r3, [r7, #16]
    return(posture);
 801bd3a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 801bd3c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801bd3e:	b672      	cpsid	i
    return(int_posture);
 801bd40:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_BYTE_POOL_DELETE_PORT_COMPLETION(pool_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801bd42:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 801bd44:	4b0a      	ldr	r3, [pc, #40]	; (801bd70 <_tx_byte_pool_delete+0x11c>)
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	3b01      	subs	r3, #1
 801bd4a:	4a09      	ldr	r2, [pc, #36]	; (801bd70 <_tx_byte_pool_delete+0x11c>)
 801bd4c:	6013      	str	r3, [r2, #0]
 801bd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd50:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bd52:	697b      	ldr	r3, [r7, #20]
 801bd54:	f383 8810 	msr	PRIMASK, r3
}
 801bd58:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801bd5a:	f001 f925 	bl	801cfa8 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801bd5e:	2300      	movs	r3, #0
}
 801bd60:	4618      	mov	r0, r3
 801bd62:	3748      	adds	r7, #72	; 0x48
 801bd64:	46bd      	mov	sp, r7
 801bd66:	bd80      	pop	{r7, pc}
 801bd68:	200b6ab4 	.word	0x200b6ab4
 801bd6c:	200b6ab0 	.word	0x200b6ab0
 801bd70:	200b6b58 	.word	0x200b6b58

0801bd74 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 801bd74:	b480      	push	{r7}
 801bd76:	b097      	sub	sp, #92	; 0x5c
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	6078      	str	r0, [r7, #4]
 801bd7c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801bd7e:	2300      	movs	r3, #0
 801bd80:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bd82:	f3ef 8310 	mrs	r3, PRIMASK
 801bd86:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801bd8a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801bd8c:	b672      	cpsid	i
    return(int_posture);
 801bd8e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 801bd90:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	689a      	ldr	r2, [r3, #8]
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	68db      	ldr	r3, [r3, #12]
 801bd9a:	3b02      	subs	r3, #2
 801bd9c:	00db      	lsls	r3, r3, #3
 801bd9e:	4413      	add	r3, r2
 801bda0:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801bda2:	683a      	ldr	r2, [r7, #0]
 801bda4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bda6:	429a      	cmp	r2, r3
 801bda8:	d308      	bcc.n	801bdbc <_tx_byte_pool_search+0x48>
 801bdaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bdac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bdae:	69fb      	ldr	r3, [r7, #28]
 801bdb0:	f383 8810 	msr	PRIMASK, r3
}
 801bdb4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 801bdb6:	2300      	movs	r3, #0
 801bdb8:	653b      	str	r3, [r7, #80]	; 0x50
 801bdba:	e0dd      	b.n	801bf78 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801bdbc:	4b72      	ldr	r3, [pc, #456]	; (801bf88 <_tx_byte_pool_search+0x214>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bdc6:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	695b      	ldr	r3, [r3, #20]
 801bdcc:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	68db      	ldr	r3, [r3, #12]
 801bdd2:	3301      	adds	r3, #1
 801bdd4:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801bdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bddc:	3304      	adds	r3, #4
 801bdde:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bde2:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801bde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	4a68      	ldr	r2, [pc, #416]	; (801bf8c <_tx_byte_pool_search+0x218>)
 801bdea:	4293      	cmp	r3, r2
 801bdec:	d143      	bne.n	801be76 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801bdee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d104      	bne.n	801bdfe <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801bdf8:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801bdfa:	2301      	movs	r3, #1
 801bdfc:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801bdfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801be00:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 801be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801be08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801be0c:	1ad3      	subs	r3, r2, r3
 801be0e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801be10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be12:	3b08      	subs	r3, #8
 801be14:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801be16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801be18:	683b      	ldr	r3, [r7, #0]
 801be1a:	429a      	cmp	r2, r3
 801be1c:	d257      	bcs.n	801bece <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801be1e:	2300      	movs	r3, #0
 801be20:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be24:	3304      	adds	r3, #4
 801be26:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be2a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801be2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	4a56      	ldr	r2, [pc, #344]	; (801bf8c <_tx_byte_pool_search+0x218>)
 801be32:	4293      	cmp	r3, r2
 801be34:	d113      	bne.n	801be5e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be38:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be3c:	681a      	ldr	r2, [r3, #0]
 801be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be40:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	68db      	ldr	r3, [r3, #12]
 801be46:	1e5a      	subs	r2, r3, #1
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	695b      	ldr	r3, [r3, #20]
 801be50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be52:	429a      	cmp	r2, r3
 801be54:	d114      	bne.n	801be80 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801be5a:	615a      	str	r2, [r3, #20]
 801be5c:	e010      	b.n	801be80 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801be5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be60:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 801be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801be68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d008      	beq.n	801be80 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 801be6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be70:	3b01      	subs	r3, #1
 801be72:	64bb      	str	r3, [r7, #72]	; 0x48
 801be74:	e004      	b.n	801be80 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801be76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801be78:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 801be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 801be80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be82:	2b00      	cmp	r3, #0
 801be84:	d002      	beq.n	801be8c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801be86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be88:	3b01      	subs	r3, #1
 801be8a:	64bb      	str	r3, [r7, #72]	; 0x48
 801be8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801be8e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801be90:	693b      	ldr	r3, [r7, #16]
 801be92:	f383 8810 	msr	PRIMASK, r3
}
 801be96:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801be98:	f3ef 8310 	mrs	r3, PRIMASK
 801be9c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801be9e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801bea0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801bea2:	b672      	cpsid	i
    return(int_posture);
 801bea4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 801bea6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	6a1b      	ldr	r3, [r3, #32]
 801beac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801beae:	429a      	cmp	r2, r3
 801beb0:	d009      	beq.n	801bec6 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	695b      	ldr	r3, [r3, #20]
 801beb6:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	68db      	ldr	r3, [r3, #12]
 801bebc:	3301      	adds	r3, #1
 801bebe:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bec4:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 801bec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d186      	bne.n	801bdda <_tx_byte_pool_search+0x66>
 801becc:	e000      	b.n	801bed0 <_tx_byte_pool_search+0x15c>
                    break;
 801bece:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 801bed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d048      	beq.n	801bf68 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 801bed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bed8:	683b      	ldr	r3, [r7, #0]
 801beda:	1ad3      	subs	r3, r2, r3
 801bedc:	2b13      	cmp	r3, #19
 801bede:	d91e      	bls.n	801bf1e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801bee0:	683b      	ldr	r3, [r7, #0]
 801bee2:	3308      	adds	r3, #8
 801bee4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801bee6:	4413      	add	r3, r2
 801bee8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beec:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801beee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bef0:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 801bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bef4:	681a      	ldr	r2, [r3, #0]
 801bef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bef8:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801befc:	3304      	adds	r3, #4
 801befe:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf02:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 801bf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf06:	4a21      	ldr	r2, [pc, #132]	; (801bf8c <_tx_byte_pool_search+0x218>)
 801bf08:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	68db      	ldr	r3, [r3, #12]
 801bf0e:	1c5a      	adds	r2, r3, #1
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 801bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf18:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801bf1a:	683b      	ldr	r3, [r7, #0]
 801bf1c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801bf1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf20:	3304      	adds	r3, #4
 801bf22:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 801bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf26:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf2a:	687a      	ldr	r2, [r7, #4]
 801bf2c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	689a      	ldr	r2, [r3, #8]
 801bf32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf34:	1ad3      	subs	r3, r2, r3
 801bf36:	f1a3 0208 	sub.w	r2, r3, #8
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	695b      	ldr	r3, [r3, #20]
 801bf42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d105      	bne.n	801bf54 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801bf48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf4a:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 801bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf4e:	681a      	ldr	r2, [r3, #0]
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	615a      	str	r2, [r3, #20]
 801bf54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bf58:	68fb      	ldr	r3, [r7, #12]
 801bf5a:	f383 8810 	msr	PRIMASK, r3
}
 801bf5e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801bf60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf62:	3308      	adds	r3, #8
 801bf64:	653b      	str	r3, [r7, #80]	; 0x50
 801bf66:	e007      	b.n	801bf78 <_tx_byte_pool_search+0x204>
 801bf68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bf6c:	68bb      	ldr	r3, [r7, #8]
 801bf6e:	f383 8810 	msr	PRIMASK, r3
}
 801bf72:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 801bf74:	2300      	movs	r3, #0
 801bf76:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 801bf78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	375c      	adds	r7, #92	; 0x5c
 801bf7e:	46bd      	mov	sp, r7
 801bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf84:	4770      	bx	lr
 801bf86:	bf00      	nop
 801bf88:	200b6ac0 	.word	0x200b6ac0
 801bf8c:	ffffeeee 	.word	0xffffeeee

0801bf90 <_tx_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_release(VOID *memory_ptr)
{
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b09e      	sub	sp, #120	; 0x78
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	6078      	str	r0, [r7, #4]
UCHAR               **block_link_ptr;
UCHAR               **suspend_info_ptr;


    /* Default to successful status.  */
    status =  TX_SUCCESS;
 801bf98:	2300      	movs	r3, #0
 801bf9a:	673b      	str	r3, [r7, #112]	; 0x70

    /* Set the pool pointer to NULL.  */
    pool_ptr =  TX_NULL;
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bfa0:	f3ef 8310 	mrs	r3, PRIMASK
 801bfa4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801bfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801bfa8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801bfaa:	b672      	cpsid	i
    return(int_posture);
 801bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Lockout interrupts.  */
    TX_DISABLE
 801bfae:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if the memory pointer is valid.  */
    work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (work_ptr != TX_NULL)
 801bfb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d027      	beq.n	801c00a <_tx_byte_release+0x7a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801bfba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bfbc:	3b08      	subs	r3, #8
 801bfbe:	66bb      	str	r3, [r7, #104]	; 0x68

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 801bfc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bfc2:	3304      	adds	r3, #4
 801bfc4:	667b      	str	r3, [r7, #100]	; 0x64
        free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 801bfc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bfc8:	663b      	str	r3, [r7, #96]	; 0x60
        if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
 801bfca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	4a7e      	ldr	r2, [pc, #504]	; (801c1c8 <_tx_byte_release+0x238>)
 801bfd0:	4293      	cmp	r3, r2
 801bfd2:	d017      	beq.n	801c004 <_tx_byte_release+0x74>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 801bfd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bfd6:	3304      	adds	r3, #4
 801bfd8:	667b      	str	r3, [r7, #100]	; 0x64
            byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 801bfda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bfdc:	65fb      	str	r3, [r7, #92]	; 0x5c
            pool_ptr =  *byte_pool_ptr;
 801bfde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* See if we have a valid pool pointer.  */
            if (pool_ptr == TX_NULL)
 801bfe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d102      	bne.n	801bff0 <_tx_byte_release+0x60>
            {

                /* Return pointer error.  */
                status =  TX_PTR_ERROR;
 801bfea:	2303      	movs	r3, #3
 801bfec:	673b      	str	r3, [r7, #112]	; 0x70
 801bfee:	e00e      	b.n	801c00e <_tx_byte_release+0x7e>
            }
            else
            {

                /* See if we have a valid pool.  */
                if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801bff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	4a75      	ldr	r2, [pc, #468]	; (801c1cc <_tx_byte_release+0x23c>)
 801bff6:	4293      	cmp	r3, r2
 801bff8:	d009      	beq.n	801c00e <_tx_byte_release+0x7e>
                {

                    /* Return pointer error.  */
                    status =  TX_PTR_ERROR;
 801bffa:	2303      	movs	r3, #3
 801bffc:	673b      	str	r3, [r7, #112]	; 0x70

                    /* Reset the pool pointer is NULL.  */
                    pool_ptr =  TX_NULL;
 801bffe:	2300      	movs	r3, #0
 801c000:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c002:	e004      	b.n	801c00e <_tx_byte_release+0x7e>
        }
        else
        {

            /* Return pointer error.  */
            status =  TX_PTR_ERROR;
 801c004:	2303      	movs	r3, #3
 801c006:	673b      	str	r3, [r7, #112]	; 0x70
 801c008:	e001      	b.n	801c00e <_tx_byte_release+0x7e>
    }
    else
    {

        /* Return pointer error.  */
        status =  TX_PTR_ERROR;
 801c00a:	2303      	movs	r3, #3
 801c00c:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Determine if the pointer is valid.  */
    if (pool_ptr == TX_NULL)
 801c00e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c010:	2b00      	cmp	r3, #0
 801c012:	d105      	bne.n	801c020 <_tx_byte_release+0x90>
 801c014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c016:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c01a:	f383 8810 	msr	PRIMASK, r3
}
 801c01e:	e0cd      	b.n	801c1bc <_tx_byte_release+0x22c>
    {

        /* At this point, we know that the pointer is valid.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801c020:	4b6b      	ldr	r3, [pc, #428]	; (801c1d0 <_tx_byte_release+0x240>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801c026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c02a:	621a      	str	r2, [r3, #32]

        /* Log this kernel call.  */
        TX_EL_BYTE_RELEASE_INSERT

        /* Release the memory.  */
        temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 801c02c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c02e:	3304      	adds	r3, #4
 801c030:	667b      	str	r3, [r7, #100]	; 0x64
        free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 801c032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c034:	663b      	str	r3, [r7, #96]	; 0x60
        *free_ptr =  TX_BYTE_BLOCK_FREE;
 801c036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c038:	4a63      	ldr	r2, [pc, #396]	; (801c1c8 <_tx_byte_release+0x238>)
 801c03a:	601a      	str	r2, [r3, #0]

        /* Update the number of available bytes in the pool.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 801c03c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c03e:	657b      	str	r3, [r7, #84]	; 0x54
        next_block_ptr =  *block_link_ptr;
 801c040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	653b      	str	r3, [r7, #80]	; 0x50
        pool_ptr -> tx_byte_pool_available =
            pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 801c046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c048:	689b      	ldr	r3, [r3, #8]
 801c04a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c04c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c04e:	1a8a      	subs	r2, r1, r2
 801c050:	441a      	add	r2, r3
        pool_ptr -> tx_byte_pool_available =
 801c052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c054:	609a      	str	r2, [r3, #8]

        /* Determine if the free block is prior to current search pointer.  */
        if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 801c056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c058:	695b      	ldr	r3, [r3, #20]
 801c05a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c05c:	429a      	cmp	r2, r3
 801c05e:	d202      	bcs.n	801c066 <_tx_byte_release+0xd6>
        {

            /* Yes, update the search pointer to the released block.  */
            pool_ptr -> tx_byte_pool_search =  work_ptr;
 801c060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c062:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c064:	615a      	str	r2, [r3, #20]
        }

        /* Determine if there are threads suspended on this byte pool.  */
        if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801c066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	f000 80a0 	beq.w	801c1b0 <_tx_byte_release+0x220>
        {

            /* Now examine the suspension list to find threads waiting for
               memory.  Maybe it is now available!  */
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801c070:	e08e      	b.n	801c190 <_tx_byte_release+0x200>
            {

                /* Pickup the first suspended thread pointer.  */
                susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 801c072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c076:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the size of the memory the thread is requesting.  */
                memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 801c078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c07a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c07c:	64bb      	str	r3, [r7, #72]	; 0x48
 801c07e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c080:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c082:	6a3b      	ldr	r3, [r7, #32]
 801c084:	f383 8810 	msr	PRIMASK, r3
}
 801c088:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* See if the request can be satisfied.  */
                work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 801c08a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c08c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c08e:	f7ff fe71 	bl	801bd74 <_tx_byte_pool_search>
 801c092:	66b8      	str	r0, [r7, #104]	; 0x68
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c094:	f3ef 8310 	mrs	r3, PRIMASK
 801c098:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801c09c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801c09e:	b672      	cpsid	i
    return(int_posture);
 801c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

                /* Optional processing extension.  */
                TX_BYTE_RELEASE_EXTENSION

                /* Disable interrupts.  */
                TX_DISABLE
 801c0a2:	677b      	str	r3, [r7, #116]	; 0x74

                /* Indicate that this thread is the current owner.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801c0a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c0a8:	621a      	str	r2, [r3, #32]

                /* If there is not enough memory, break this loop!  */
                if (work_ptr == TX_NULL)
 801c0aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d075      	beq.n	801c19c <_tx_byte_release+0x20c>
                  /* Break out of the loop.  */
                    break;
                }

                /* Check to make sure the thread is still suspended.  */
                if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 801c0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c0b6:	429a      	cmp	r2, r3
 801c0b8:	d147      	bne.n	801c14a <_tx_byte_release+0x1ba>
                {

                    /* Also, makes sure the memory size is the same.  */
                    if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 801c0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c0bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c0be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c0c0:	429a      	cmp	r2, r3
 801c0c2:	d142      	bne.n	801c14a <_tx_byte_release+0x1ba>
                    {

                        /* Remove the suspended thread from the list.  */

                        /* Decrement the number of threads suspended.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 801c0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0c8:	1e5a      	subs	r2, r3, #1
 801c0ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0cc:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801c0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0d2:	647b      	str	r3, [r7, #68]	; 0x44

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801c0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d103      	bne.n	801c0e2 <_tx_byte_release+0x152>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801c0da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0dc:	2200      	movs	r2, #0
 801c0de:	625a      	str	r2, [r3, #36]	; 0x24
 801c0e0:	e00e      	b.n	801c100 <_tx_byte_release+0x170>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the list head pointer.  */
                            next_thread =                                susp_thread_ptr -> tx_thread_suspended_next;
 801c0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0e6:	643b      	str	r3, [r7, #64]	; 0x40
                            pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 801c0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c0ec:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Update the links of the adjacent threads.  */
                            previous_thread =                              susp_thread_ptr -> tx_thread_suspended_previous;
 801c0ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801c0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c0f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c0f8:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 801c0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c0fe:	671a      	str	r2, [r3, #112]	; 0x70
                        }

                        /* Prepare for resumption of the thread.  */

                        /* Clear cleanup routine to avoid timeout.  */
                        susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c102:	2200      	movs	r2, #0
 801c104:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Return this block pointer to the suspended thread waiting for
                           a block.  */
                        suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_ptr -> tx_thread_additional_suspend_info);
 801c106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c10a:	63bb      	str	r3, [r7, #56]	; 0x38
                        *suspend_info_ptr =  work_ptr;
 801c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c10e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c110:	601a      	str	r2, [r3, #0]

                        /* Clear the memory pointer to indicate that it was given to the suspended thread.  */
                        work_ptr =  TX_NULL;
 801c112:	2300      	movs	r3, #0
 801c114:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Put return status into the thread control block.  */
                        susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801c116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c118:	2200      	movs	r2, #0
 801c11a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* Restore interrupts.  */
                        TX_RESTORE
#else
                        /* Temporarily disable preemption.  */
                        _tx_thread_preempt_disable++;
 801c11e:	4b2d      	ldr	r3, [pc, #180]	; (801c1d4 <_tx_byte_release+0x244>)
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	3301      	adds	r3, #1
 801c124:	4a2b      	ldr	r2, [pc, #172]	; (801c1d4 <_tx_byte_release+0x244>)
 801c126:	6013      	str	r3, [r2, #0]
 801c128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c12a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c12c:	697b      	ldr	r3, [r7, #20]
 801c12e:	f383 8810 	msr	PRIMASK, r3
}
 801c132:	bf00      	nop

                        /* Restore interrupts.  */
                        TX_RESTORE

                        /* Resume thread.  */
                        _tx_thread_system_resume(susp_thread_ptr);
 801c134:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c136:	f000 ff71 	bl	801d01c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c13a:	f3ef 8310 	mrs	r3, PRIMASK
 801c13e:	61fb      	str	r3, [r7, #28]
    return(posture);
 801c140:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801c142:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c144:	b672      	cpsid	i
    return(int_posture);
 801c146:	69bb      	ldr	r3, [r7, #24]
#endif

                        /* Lockout interrupts.  */
                        TX_DISABLE
 801c148:	677b      	str	r3, [r7, #116]	; 0x74
                    }
                }

                /* Determine if the memory was given to the suspended thread.  */
                if (work_ptr != TX_NULL)
 801c14a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d01f      	beq.n	801c190 <_tx_byte_release+0x200>

                    /* No, it wasn't given to the suspended thread.  */

                    /* Put the memory back on the available list since this thread is no longer
                       suspended.  */
                    work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801c150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c152:	3b08      	subs	r3, #8
 801c154:	66bb      	str	r3, [r7, #104]	; 0x68
                    temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 801c156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c158:	3304      	adds	r3, #4
 801c15a:	667b      	str	r3, [r7, #100]	; 0x64
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 801c15c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c15e:	663b      	str	r3, [r7, #96]	; 0x60
                    *free_ptr =  TX_BYTE_BLOCK_FREE;
 801c160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c162:	4a19      	ldr	r2, [pc, #100]	; (801c1c8 <_tx_byte_release+0x238>)
 801c164:	601a      	str	r2, [r3, #0]

                    /* Update the number of available bytes in the pool.  */
                    block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 801c166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c168:	657b      	str	r3, [r7, #84]	; 0x54
                    next_block_ptr =  *block_link_ptr;
 801c16a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	653b      	str	r3, [r7, #80]	; 0x50
                    pool_ptr -> tx_byte_pool_available =
                        pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 801c170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c172:	689b      	ldr	r3, [r3, #8]
 801c174:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c176:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c178:	1a8a      	subs	r2, r1, r2
 801c17a:	441a      	add	r2, r3
                    pool_ptr -> tx_byte_pool_available =
 801c17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c17e:	609a      	str	r2, [r3, #8]

                    /* Determine if the current pointer is before the search pointer.  */
                    if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 801c180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c182:	695b      	ldr	r3, [r3, #20]
 801c184:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c186:	429a      	cmp	r2, r3
 801c188:	d202      	bcs.n	801c190 <_tx_byte_release+0x200>
                    {

                        /* Yes, update the search pointer.  */
                        pool_ptr -> tx_byte_pool_search =  work_ptr;
 801c18a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c18c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c18e:	615a      	str	r2, [r3, #20]
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801c190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c194:	2b00      	cmp	r3, #0
 801c196:	f47f af6c 	bne.w	801c072 <_tx_byte_release+0xe2>
 801c19a:	e000      	b.n	801c19e <_tx_byte_release+0x20e>
                    break;
 801c19c:	bf00      	nop
 801c19e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c1a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c1a2:	693b      	ldr	r3, [r7, #16]
 801c1a4:	f383 8810 	msr	PRIMASK, r3
}
 801c1a8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Check for preemption.  */
            _tx_thread_system_preempt_check();
 801c1aa:	f000 fefd 	bl	801cfa8 <_tx_thread_system_preempt_check>
 801c1ae:	e005      	b.n	801c1bc <_tx_byte_release+0x22c>
 801c1b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c1b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	f383 8810 	msr	PRIMASK, r3
}
 801c1ba:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 801c1bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 801c1be:	4618      	mov	r0, r3
 801c1c0:	3778      	adds	r7, #120	; 0x78
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	bd80      	pop	{r7, pc}
 801c1c6:	bf00      	nop
 801c1c8:	ffffeeee 	.word	0xffffeeee
 801c1cc:	42595445 	.word	0x42595445
 801c1d0:	200b6ac0 	.word	0x200b6ac0
 801c1d4:	200b6b58 	.word	0x200b6b58

0801c1d8 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 801c1d8:	b580      	push	{r7, lr}
 801c1da:	b08e      	sub	sp, #56	; 0x38
 801c1dc:	af00      	add	r7, sp, #0
 801c1de:	6078      	str	r0, [r7, #4]
 801c1e0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c1e2:	f3ef 8310 	mrs	r3, PRIMASK
 801c1e6:	61fb      	str	r3, [r7, #28]
    return(posture);
 801c1e8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801c1ea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c1ec:	b672      	cpsid	i
    return(int_posture);
 801c1ee:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 801c1f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c1f6:	4a38      	ldr	r2, [pc, #224]	; (801c2d8 <_tx_event_flags_cleanup+0x100>)
 801c1f8:	4293      	cmp	r3, r2
 801c1fa:	d162      	bne.n	801c2c2 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c202:	683a      	ldr	r2, [r7, #0]
 801c204:	429a      	cmp	r2, r3
 801c206:	d15c      	bne.n	801c2c2 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c20c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 801c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c210:	2b00      	cmp	r3, #0
 801c212:	d056      	beq.n	801c2c2 <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 801c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	4a30      	ldr	r2, [pc, #192]	; (801c2dc <_tx_event_flags_cleanup+0x104>)
 801c21a:	4293      	cmp	r3, r2
 801c21c:	d151      	bne.n	801c2c2 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c220:	695b      	ldr	r3, [r3, #20]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d04d      	beq.n	801c2c2 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	2200      	movs	r2, #0
 801c22a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c22e:	695b      	ldr	r3, [r3, #20]
 801c230:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 801c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c234:	691b      	ldr	r3, [r3, #16]
 801c236:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 801c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d020      	beq.n	801c280 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 801c23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c240:	3b01      	subs	r3, #1
 801c242:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 801c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c248:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 801c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d103      	bne.n	801c258 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801c250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c252:	2200      	movs	r2, #0
 801c254:	611a      	str	r2, [r3, #16]
 801c256:	e016      	b.n	801c286 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c25c:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c262:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c266:	6a3a      	ldr	r2, [r7, #32]
 801c268:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801c26a:	6a3b      	ldr	r3, [r7, #32]
 801c26c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c26e:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 801c270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	429a      	cmp	r2, r3
 801c276:	d106      	bne.n	801c286 <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 801c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c27c:	611a      	str	r2, [r3, #16]
 801c27e:	e002      	b.n	801c286 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801c280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c282:	2201      	movs	r2, #1
 801c284:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c28a:	2b07      	cmp	r3, #7
 801c28c:	d119      	bne.n	801c2c2 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	2207      	movs	r2, #7
 801c292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801c296:	4b12      	ldr	r3, [pc, #72]	; (801c2e0 <_tx_event_flags_cleanup+0x108>)
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	3301      	adds	r3, #1
 801c29c:	4a10      	ldr	r2, [pc, #64]	; (801c2e0 <_tx_event_flags_cleanup+0x108>)
 801c29e:	6013      	str	r3, [r2, #0]
 801c2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	f383 8810 	msr	PRIMASK, r3
}
 801c2aa:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 801c2ac:	6878      	ldr	r0, [r7, #4]
 801c2ae:	f000 feb5 	bl	801d01c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c2b2:	f3ef 8310 	mrs	r3, PRIMASK
 801c2b6:	617b      	str	r3, [r7, #20]
    return(posture);
 801c2b8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801c2ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c2bc:	b672      	cpsid	i
    return(int_posture);
 801c2be:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801c2c0:	637b      	str	r3, [r7, #52]	; 0x34
 801c2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2c4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c2c6:	68bb      	ldr	r3, [r7, #8]
 801c2c8:	f383 8810 	msr	PRIMASK, r3
}
 801c2cc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801c2ce:	bf00      	nop
 801c2d0:	3738      	adds	r7, #56	; 0x38
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	bd80      	pop	{r7, pc}
 801c2d6:	bf00      	nop
 801c2d8:	0801c1d9 	.word	0x0801c1d9
 801c2dc:	4456444e 	.word	0x4456444e
 801c2e0:	200b6b58 	.word	0x200b6b58

0801c2e4 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b088      	sub	sp, #32
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
 801c2ec:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 801c2ee:	2224      	movs	r2, #36	; 0x24
 801c2f0:	2100      	movs	r1, #0
 801c2f2:	6878      	ldr	r0, [r7, #4]
 801c2f4:	f004 f93d 	bl	8020572 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	683a      	ldr	r2, [r7, #0]
 801c2fc:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c2fe:	f3ef 8310 	mrs	r3, PRIMASK
 801c302:	613b      	str	r3, [r7, #16]
    return(posture);
 801c304:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 801c306:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c308:	b672      	cpsid	i
    return(int_posture);
 801c30a:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 801c30c:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	4a18      	ldr	r2, [pc, #96]	; (801c374 <_tx_event_flags_create+0x90>)
 801c312:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 801c314:	4b18      	ldr	r3, [pc, #96]	; (801c378 <_tx_event_flags_create+0x94>)
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d109      	bne.n	801c330 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 801c31c:	4a17      	ldr	r2, [pc, #92]	; (801c37c <_tx_event_flags_create+0x98>)
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	687a      	ldr	r2, [r7, #4]
 801c326:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	687a      	ldr	r2, [r7, #4]
 801c32c:	61da      	str	r2, [r3, #28]
 801c32e:	e011      	b.n	801c354 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 801c330:	4b12      	ldr	r3, [pc, #72]	; (801c37c <_tx_event_flags_create+0x98>)
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 801c336:	69bb      	ldr	r3, [r7, #24]
 801c338:	69db      	ldr	r3, [r3, #28]
 801c33a:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 801c33c:	69bb      	ldr	r3, [r7, #24]
 801c33e:	687a      	ldr	r2, [r7, #4]
 801c340:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 801c342:	697b      	ldr	r3, [r7, #20]
 801c344:	687a      	ldr	r2, [r7, #4]
 801c346:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	697a      	ldr	r2, [r7, #20]
 801c34c:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	69ba      	ldr	r2, [r7, #24]
 801c352:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 801c354:	4b08      	ldr	r3, [pc, #32]	; (801c378 <_tx_event_flags_create+0x94>)
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	3301      	adds	r3, #1
 801c35a:	4a07      	ldr	r2, [pc, #28]	; (801c378 <_tx_event_flags_create+0x94>)
 801c35c:	6013      	str	r3, [r2, #0]
 801c35e:	69fb      	ldr	r3, [r7, #28]
 801c360:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c362:	68bb      	ldr	r3, [r7, #8]
 801c364:	f383 8810 	msr	PRIMASK, r3
}
 801c368:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801c36a:	2300      	movs	r3, #0
}
 801c36c:	4618      	mov	r0, r3
 801c36e:	3720      	adds	r7, #32
 801c370:	46bd      	mov	sp, r7
 801c372:	bd80      	pop	{r7, pc}
 801c374:	4456444e 	.word	0x4456444e
 801c378:	200b6a9c 	.word	0x200b6a9c
 801c37c:	200b6a98 	.word	0x200b6a98

0801c380 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 801c380:	b580      	push	{r7, lr}
 801c382:	b096      	sub	sp, #88	; 0x58
 801c384:	af00      	add	r7, sp, #0
 801c386:	60f8      	str	r0, [r7, #12]
 801c388:	60b9      	str	r1, [r7, #8]
 801c38a:	607a      	str	r2, [r7, #4]
 801c38c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c38e:	f3ef 8310 	mrs	r3, PRIMASK
 801c392:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801c396:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c398:	b672      	cpsid	i
    return(int_posture);
 801c39a:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 801c39c:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	689b      	ldr	r3, [r3, #8]
 801c3a2:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	f003 0302 	and.w	r3, r3, #2
 801c3aa:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	6a1b      	ldr	r3, [r3, #32]
 801c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 801c3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d004      	beq.n	801c3c2 <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 801c3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3ba:	43db      	mvns	r3, r3
 801c3bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c3be:	4013      	ands	r3, r2
 801c3c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 801c3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3c4:	2b02      	cmp	r3, #2
 801c3c6:	d10a      	bne.n	801c3de <_tx_event_flags_get+0x5e>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 801c3c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c3ca:	68bb      	ldr	r3, [r7, #8]
 801c3cc:	4013      	ands	r3, r2
 801c3ce:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 801c3d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c3d2:	68bb      	ldr	r3, [r7, #8]
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	d006      	beq.n	801c3e6 <_tx_event_flags_get+0x66>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 801c3d8:	2300      	movs	r3, #0
 801c3da:	64bb      	str	r3, [r7, #72]	; 0x48
 801c3dc:	e003      	b.n	801c3e6 <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 801c3de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c3e0:	68bb      	ldr	r3, [r7, #8]
 801c3e2:	4013      	ands	r3, r2
 801c3e4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 801c3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d029      	beq.n	801c440 <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 801c3ec:	683b      	ldr	r3, [r7, #0]
 801c3ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c3f0:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	f003 0301 	and.w	r3, r3, #1
 801c3f8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 801c3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3fc:	2b01      	cmp	r3, #1
 801c3fe:	d11c      	bne.n	801c43a <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 801c400:	2300      	movs	r3, #0
 801c402:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	695b      	ldr	r3, [r3, #20]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d005      	beq.n	801c418 <_tx_event_flags_get+0x98>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	691b      	ldr	r3, [r3, #16]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d101      	bne.n	801c418 <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 801c414:	2301      	movs	r3, #1
 801c416:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 801c418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c41a:	2b01      	cmp	r3, #1
 801c41c:	d106      	bne.n	801c42c <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	6a1a      	ldr	r2, [r3, #32]
 801c422:	68bb      	ldr	r3, [r7, #8]
 801c424:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	621a      	str	r2, [r3, #32]
 801c42a:	e006      	b.n	801c43a <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	689a      	ldr	r2, [r3, #8]
 801c430:	68bb      	ldr	r3, [r7, #8]
 801c432:	43db      	mvns	r3, r3
 801c434:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 801c43a:	2300      	movs	r3, #0
 801c43c:	653b      	str	r3, [r7, #80]	; 0x50
 801c43e:	e070      	b.n	801c522 <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801c440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c442:	2b00      	cmp	r3, #0
 801c444:	d06b      	beq.n	801c51e <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801c446:	4b3c      	ldr	r3, [pc, #240]	; (801c538 <_tx_event_flags_get+0x1b8>)
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d002      	beq.n	801c454 <_tx_event_flags_get+0xd4>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 801c44e:	2307      	movs	r3, #7
 801c450:	653b      	str	r3, [r7, #80]	; 0x50
 801c452:	e066      	b.n	801c522 <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 801c454:	4b39      	ldr	r3, [pc, #228]	; (801c53c <_tx_event_flags_get+0x1bc>)
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 801c45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c45c:	4a38      	ldr	r2, [pc, #224]	; (801c540 <_tx_event_flags_get+0x1c0>)
 801c45e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 801c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c462:	68ba      	ldr	r2, [r7, #8]
 801c464:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 801c466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c468:	687a      	ldr	r2, [r7, #4]
 801c46a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 801c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c470:	683a      	ldr	r2, [r7, #0]
 801c472:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 801c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c476:	68fa      	ldr	r2, [r7, #12]
 801c478:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801c47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c47c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c480:	1c5a      	adds	r2, r3, #1
 801c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c484:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	695b      	ldr	r3, [r3, #20]
 801c48c:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 801c48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c490:	2b00      	cmp	r3, #0
 801c492:	d109      	bne.n	801c4a8 <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c498:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 801c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c49c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c49e:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 801c4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c4a4:	675a      	str	r2, [r3, #116]	; 0x74
 801c4a6:	e011      	b.n	801c4cc <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	691b      	ldr	r3, [r3, #16]
 801c4ac:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 801c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c4b2:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c4be:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c4c4:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c4ca:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	695b      	ldr	r3, [r3, #20]
 801c4d0:	1c5a      	adds	r2, r3, #1
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 801c4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4d8:	2207      	movs	r2, #7
 801c4da:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4de:	2201      	movs	r2, #1
 801c4e0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c4e6:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801c4e8:	4b13      	ldr	r3, [pc, #76]	; (801c538 <_tx_event_flags_get+0x1b8>)
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	3301      	adds	r3, #1
 801c4ee:	4a12      	ldr	r2, [pc, #72]	; (801c538 <_tx_event_flags_get+0x1b8>)
 801c4f0:	6013      	str	r3, [r2, #0]
 801c4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c4f6:	697b      	ldr	r3, [r7, #20]
 801c4f8:	f383 8810 	msr	PRIMASK, r3
}
 801c4fc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801c4fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c500:	f000 fe8c 	bl	801d21c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c504:	f3ef 8310 	mrs	r3, PRIMASK
 801c508:	61fb      	str	r3, [r7, #28]
    return(posture);
 801c50a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801c50c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c50e:	b672      	cpsid	i
    return(int_posture);
 801c510:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 801c512:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801c514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c51a:	653b      	str	r3, [r7, #80]	; 0x50
 801c51c:	e001      	b.n	801c522 <_tx_event_flags_get+0x1a2>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 801c51e:	2307      	movs	r3, #7
 801c520:	653b      	str	r3, [r7, #80]	; 0x50
 801c522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c524:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c526:	693b      	ldr	r3, [r7, #16]
 801c528:	f383 8810 	msr	PRIMASK, r3
}
 801c52c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 801c52e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801c530:	4618      	mov	r0, r3
 801c532:	3758      	adds	r7, #88	; 0x58
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}
 801c538:	200b6b58 	.word	0x200b6b58
 801c53c:	200b6ac0 	.word	0x200b6ac0
 801c540:	0801c1d9 	.word	0x0801c1d9

0801c544 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 801c544:	b580      	push	{r7, lr}
 801c546:	b0a6      	sub	sp, #152	; 0x98
 801c548:	af00      	add	r7, sp, #0
 801c54a:	60f8      	str	r0, [r7, #12]
 801c54c:	60b9      	str	r1, [r7, #8]
 801c54e:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c550:	f3ef 8310 	mrs	r3, PRIMASK
 801c554:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801c556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801c558:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 801c55a:	b672      	cpsid	i
    return(int_posture);
 801c55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801c55e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	f003 0302 	and.w	r3, r3, #2
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d023      	beq.n	801c5b4 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 801c56c:	2300      	movs	r3, #0
 801c56e:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	695b      	ldr	r3, [r3, #20]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d005      	beq.n	801c584 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	691b      	ldr	r3, [r3, #16]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d101      	bne.n	801c584 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 801c580:	2301      	movs	r3, #1
 801c582:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 801c584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c586:	2b01      	cmp	r3, #1
 801c588:	d107      	bne.n	801c59a <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	6a1a      	ldr	r2, [r3, #32]
 801c58e:	68bb      	ldr	r3, [r7, #8]
 801c590:	43db      	mvns	r3, r3
 801c592:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	621a      	str	r2, [r3, #32]
 801c598:	e005      	b.n	801c5a6 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	689a      	ldr	r2, [r3, #8]
 801c59e:	68bb      	ldr	r3, [r7, #8]
 801c5a0:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	609a      	str	r2, [r3, #8]
 801c5a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c5aa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c5ae:	f383 8810 	msr	PRIMASK, r3
}
 801c5b2:	e1d4      	b.n	801c95e <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	689a      	ldr	r2, [r3, #8]
 801c5b8:	68bb      	ldr	r3, [r7, #8]
 801c5ba:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	6a1b      	ldr	r3, [r3, #32]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d006      	beq.n	801c5d6 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	6a1a      	ldr	r2, [r3, #32]
 801c5cc:	68bb      	ldr	r3, [r7, #8]
 801c5ce:	43db      	mvns	r3, r3
 801c5d0:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	695b      	ldr	r3, [r3, #20]
 801c5de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	691b      	ldr	r3, [r3, #16]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	f000 81a6 	beq.w	801c938 <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 801c5ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c5f0:	2b01      	cmp	r3, #1
 801c5f2:	d169      	bne.n	801c6c8 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	691b      	ldr	r3, [r3, #16]
 801c5f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	689b      	ldr	r3, [r3, #8]
 801c600:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 801c602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c608:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 801c60a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c60e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c612:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 801c614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c616:	f003 0302 	and.w	r3, r3, #2
 801c61a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 801c61c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c61e:	2b02      	cmp	r3, #2
 801c620:	d10a      	bne.n	801c638 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 801c622:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c626:	4013      	ands	r3, r2
 801c628:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 801c62a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c62c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c62e:	429a      	cmp	r2, r3
 801c630:	d006      	beq.n	801c640 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 801c632:	2300      	movs	r3, #0
 801c634:	67bb      	str	r3, [r7, #120]	; 0x78
 801c636:	e003      	b.n	801c640 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 801c638:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c63a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c63c:	4013      	ands	r3, r2
 801c63e:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 801c640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c642:	2b00      	cmp	r3, #0
 801c644:	f000 817f 	beq.w	801c946 <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 801c648:	2301      	movs	r3, #1
 801c64a:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801c64c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c652:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 801c654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c656:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c658:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 801c65a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c65c:	f003 0301 	and.w	r3, r3, #1
 801c660:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 801c662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c664:	2b01      	cmp	r3, #1
 801c666:	d106      	bne.n	801c676 <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	689a      	ldr	r2, [r3, #8]
 801c66c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c66e:	43db      	mvns	r3, r3
 801c670:	401a      	ands	r2, r3
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	2200      	movs	r2, #0
 801c67a:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	2200      	movs	r2, #0
 801c680:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c686:	2200      	movs	r2, #0
 801c688:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801c68a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c68e:	2200      	movs	r2, #0
 801c690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 801c694:	4ba7      	ldr	r3, [pc, #668]	; (801c934 <_tx_event_flags_set+0x3f0>)
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	3301      	adds	r3, #1
 801c69a:	4aa6      	ldr	r2, [pc, #664]	; (801c934 <_tx_event_flags_set+0x3f0>)
 801c69c:	6013      	str	r3, [r2, #0]
 801c69e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c6a2:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6a6:	f383 8810 	msr	PRIMASK, r3
}
 801c6aa:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 801c6ac:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c6b0:	f000 fcb4 	bl	801d01c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c6b4:	f3ef 8310 	mrs	r3, PRIMASK
 801c6b8:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801c6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801c6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801c6be:	b672      	cpsid	i
    return(int_posture);
 801c6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 801c6c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c6c6:	e13e      	b.n	801c946 <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	691b      	ldr	r3, [r3, #16]
 801c6cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 801c6d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c6d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	2200      	movs	r2, #0
 801c6dc:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 801c6de:	2300      	movs	r3, #0
 801c6e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	689b      	ldr	r3, [r3, #8]
 801c6ee:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 801c6f0:	4b90      	ldr	r3, [pc, #576]	; (801c934 <_tx_event_flags_set+0x3f0>)
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	3301      	adds	r3, #1
 801c6f6:	4a8f      	ldr	r2, [pc, #572]	; (801c934 <_tx_event_flags_set+0x3f0>)
 801c6f8:	6013      	str	r3, [r2, #0]
 801c6fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c702:	f383 8810 	msr	PRIMASK, r3
}
 801c706:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c708:	f3ef 8310 	mrs	r3, PRIMASK
 801c70c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801c70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801c710:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801c712:	b672      	cpsid	i
    return(int_posture);
 801c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 801c716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	68db      	ldr	r3, [r3, #12]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d00f      	beq.n	801c742 <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	2200      	movs	r2, #0
 801c726:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 801c728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c72c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	695b      	ldr	r3, [r3, #20]
 801c734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	689b      	ldr	r3, [r3, #8]
 801c73c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c73e:	4313      	orrs	r3, r2
 801c740:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801c742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c748:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 801c74a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c74e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c750:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 801c752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c75a:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 801c75c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c75e:	f003 0302 	and.w	r3, r3, #2
 801c762:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 801c764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c766:	2b02      	cmp	r3, #2
 801c768:	d10a      	bne.n	801c780 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 801c76a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c76c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c76e:	4013      	ands	r3, r2
 801c770:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 801c772:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c776:	429a      	cmp	r2, r3
 801c778:	d006      	beq.n	801c788 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 801c77a:	2300      	movs	r3, #0
 801c77c:	67bb      	str	r3, [r7, #120]	; 0x78
 801c77e:	e003      	b.n	801c788 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 801c780:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c784:	4013      	ands	r3, r2
 801c786:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 801c788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c78e:	2b07      	cmp	r3, #7
 801c790:	d001      	beq.n	801c796 <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 801c792:	2301      	movs	r3, #1
 801c794:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 801c796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d06b      	beq.n	801c874 <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 801c79c:	2301      	movs	r3, #1
 801c79e:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801c7a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7a6:	2b07      	cmp	r3, #7
 801c7a8:	d11d      	bne.n	801c7e6 <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801c7aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c7b0:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 801c7b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c7b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c7b6:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 801c7b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7ba:	f003 0301 	and.w	r3, r3, #1
 801c7be:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 801c7c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c7c2:	2b01      	cmp	r3, #1
 801c7c4:	d106      	bne.n	801c7d4 <_tx_event_flags_set+0x290>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	689a      	ldr	r2, [r3, #8]
 801c7ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c7cc:	43db      	mvns	r3, r3
 801c7ce:	401a      	ands	r2, r3
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c7d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7d8:	2200      	movs	r2, #0
 801c7da:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801c7dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7e0:	2200      	movs	r2, #0
 801c7e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801c7e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c7f0:	429a      	cmp	r2, r3
 801c7f2:	d103      	bne.n	801c7fc <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c7fa:	e018      	b.n	801c82e <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801c7fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c802:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801c804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c80a:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801c80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c80e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c810:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 801c812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c816:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 801c818:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c81c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c820:	429a      	cmp	r2, r3
 801c822:	d104      	bne.n	801c82e <_tx_event_flags_set+0x2ea>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 801c824:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c82a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	695b      	ldr	r3, [r3, #20]
 801c832:	1e5a      	subs	r2, r3, #1
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 801c838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d10c      	bne.n	801c85a <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 801c840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c844:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 801c848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c84c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 801c850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c854:	2200      	movs	r2, #0
 801c856:	671a      	str	r2, [r3, #112]	; 0x70
 801c858:	e00c      	b.n	801c874 <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 801c85a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c85e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c862:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 801c864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c868:	2200      	movs	r2, #0
 801c86a:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 801c86c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 801c874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 801c87a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c87e:	3b01      	subs	r3, #1
 801c880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 801c884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c888:	2b00      	cmp	r3, #0
 801c88a:	f47f af36 	bne.w	801c6fa <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c894:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	6a1b      	ldr	r3, [r3, #32]
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d00a      	beq.n	801c8b4 <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	689a      	ldr	r2, [r3, #8]
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	6a1b      	ldr	r3, [r3, #32]
 801c8a6:	43db      	mvns	r3, r3
 801c8a8:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	2200      	movs	r2, #0
 801c8b2:	621a      	str	r2, [r3, #32]
 801c8b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c8b8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8bc:	f383 8810 	msr	PRIMASK, r3
}
 801c8c0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 801c8c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c8c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 801c8ca:	e01f      	b.n	801c90c <_tx_event_flags_set+0x3c8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801c8cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c8d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c8d4:	f3ef 8310 	mrs	r3, PRIMASK
 801c8d8:	623b      	str	r3, [r7, #32]
    return(posture);
 801c8da:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801c8dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c8de:	b672      	cpsid	i
    return(int_posture);
 801c8e0:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 801c8e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 801c8e6:	4b13      	ldr	r3, [pc, #76]	; (801c934 <_tx_event_flags_set+0x3f0>)
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	3301      	adds	r3, #1
 801c8ec:	4a11      	ldr	r2, [pc, #68]	; (801c934 <_tx_event_flags_set+0x3f0>)
 801c8ee:	6013      	str	r3, [r2, #0]
 801c8f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c8f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8f8:	f383 8810 	msr	PRIMASK, r3
}
 801c8fc:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 801c8fe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c902:	f000 fb8b 	bl	801d01c <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 801c906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 801c90c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c910:	2b00      	cmp	r3, #0
 801c912:	d1db      	bne.n	801c8cc <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c914:	f3ef 8310 	mrs	r3, PRIMASK
 801c918:	61bb      	str	r3, [r7, #24]
    return(posture);
 801c91a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801c91c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c91e:	b672      	cpsid	i
    return(int_posture);
 801c920:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 801c922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 801c926:	4b03      	ldr	r3, [pc, #12]	; (801c934 <_tx_event_flags_set+0x3f0>)
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	3b01      	subs	r3, #1
 801c92c:	4a01      	ldr	r2, [pc, #4]	; (801c934 <_tx_event_flags_set+0x3f0>)
 801c92e:	6013      	str	r3, [r2, #0]
 801c930:	e009      	b.n	801c946 <_tx_event_flags_set+0x402>
 801c932:	bf00      	nop
 801c934:	200b6b58 	.word	0x200b6b58
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	695b      	ldr	r3, [r3, #20]
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d002      	beq.n	801c946 <_tx_event_flags_set+0x402>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	2201      	movs	r2, #1
 801c944:	60da      	str	r2, [r3, #12]
 801c946:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c94a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c94c:	693b      	ldr	r3, [r7, #16]
 801c94e:	f383 8810 	msr	PRIMASK, r3
}
 801c952:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 801c954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c956:	2b01      	cmp	r3, #1
 801c958:	d101      	bne.n	801c95e <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 801c95a:	f000 fb25 	bl	801cfa8 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 801c95e:	2300      	movs	r3, #0
}
 801c960:	4618      	mov	r0, r3
 801c962:	3798      	adds	r7, #152	; 0x98
 801c964:	46bd      	mov	sp, r7
 801c966:	bd80      	pop	{r7, pc}

0801c968 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 801c968:	b580      	push	{r7, lr}
 801c96a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 801c96c:	f000 f960 	bl	801cc30 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 801c970:	f000 ff9c 	bl	801d8ac <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 801c974:	4b12      	ldr	r3, [pc, #72]	; (801c9c0 <_tx_initialize_high_level+0x58>)
 801c976:	2200      	movs	r2, #0
 801c978:	601a      	str	r2, [r3, #0]
 801c97a:	4b12      	ldr	r3, [pc, #72]	; (801c9c4 <_tx_initialize_high_level+0x5c>)
 801c97c:	2200      	movs	r2, #0
 801c97e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 801c980:	4b11      	ldr	r3, [pc, #68]	; (801c9c8 <_tx_initialize_high_level+0x60>)
 801c982:	2200      	movs	r2, #0
 801c984:	601a      	str	r2, [r3, #0]
 801c986:	4b11      	ldr	r3, [pc, #68]	; (801c9cc <_tx_initialize_high_level+0x64>)
 801c988:	2200      	movs	r2, #0
 801c98a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 801c98c:	4b10      	ldr	r3, [pc, #64]	; (801c9d0 <_tx_initialize_high_level+0x68>)
 801c98e:	2200      	movs	r2, #0
 801c990:	601a      	str	r2, [r3, #0]
 801c992:	4b10      	ldr	r3, [pc, #64]	; (801c9d4 <_tx_initialize_high_level+0x6c>)
 801c994:	2200      	movs	r2, #0
 801c996:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801c998:	4b0f      	ldr	r3, [pc, #60]	; (801c9d8 <_tx_initialize_high_level+0x70>)
 801c99a:	2200      	movs	r2, #0
 801c99c:	601a      	str	r2, [r3, #0]
 801c99e:	4b0f      	ldr	r3, [pc, #60]	; (801c9dc <_tx_initialize_high_level+0x74>)
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801c9a4:	4b0e      	ldr	r3, [pc, #56]	; (801c9e0 <_tx_initialize_high_level+0x78>)
 801c9a6:	2200      	movs	r2, #0
 801c9a8:	601a      	str	r2, [r3, #0]
 801c9aa:	4b0e      	ldr	r3, [pc, #56]	; (801c9e4 <_tx_initialize_high_level+0x7c>)
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 801c9b0:	4b0d      	ldr	r3, [pc, #52]	; (801c9e8 <_tx_initialize_high_level+0x80>)
 801c9b2:	2200      	movs	r2, #0
 801c9b4:	601a      	str	r2, [r3, #0]
 801c9b6:	4b0d      	ldr	r3, [pc, #52]	; (801c9ec <_tx_initialize_high_level+0x84>)
 801c9b8:	2200      	movs	r2, #0
 801c9ba:	601a      	str	r2, [r3, #0]
#endif
}
 801c9bc:	bf00      	nop
 801c9be:	bd80      	pop	{r7, pc}
 801c9c0:	200b6a88 	.word	0x200b6a88
 801c9c4:	200b6a8c 	.word	0x200b6a8c
 801c9c8:	200b6a90 	.word	0x200b6a90
 801c9cc:	200b6a94 	.word	0x200b6a94
 801c9d0:	200b6a98 	.word	0x200b6a98
 801c9d4:	200b6a9c 	.word	0x200b6a9c
 801c9d8:	200b6aa8 	.word	0x200b6aa8
 801c9dc:	200b6aac 	.word	0x200b6aac
 801c9e0:	200b6ab0 	.word	0x200b6ab0
 801c9e4:	200b6ab4 	.word	0x200b6ab4
 801c9e8:	200b6aa0 	.word	0x200b6aa0
 801c9ec:	200b6aa4 	.word	0x200b6aa4

0801c9f0 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801c9f4:	4b10      	ldr	r3, [pc, #64]	; (801ca38 <_tx_initialize_kernel_enter+0x48>)
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 801c9fc:	d00c      	beq.n	801ca18 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801c9fe:	4b0e      	ldr	r3, [pc, #56]	; (801ca38 <_tx_initialize_kernel_enter+0x48>)
 801ca00:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801ca04:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801ca06:	f7e3 fc37 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 801ca0a:	f7ff ffad 	bl	801c968 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801ca0e:	4b0b      	ldr	r3, [pc, #44]	; (801ca3c <_tx_initialize_kernel_enter+0x4c>)
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	3301      	adds	r3, #1
 801ca14:	4a09      	ldr	r2, [pc, #36]	; (801ca3c <_tx_initialize_kernel_enter+0x4c>)
 801ca16:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801ca18:	4b07      	ldr	r3, [pc, #28]	; (801ca38 <_tx_initialize_kernel_enter+0x48>)
 801ca1a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801ca1e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 801ca20:	4b07      	ldr	r3, [pc, #28]	; (801ca40 <_tx_initialize_kernel_enter+0x50>)
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	4618      	mov	r0, r3
 801ca26:	f7e4 fc1b 	bl	8001260 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801ca2a:	4b03      	ldr	r3, [pc, #12]	; (801ca38 <_tx_initialize_kernel_enter+0x48>)
 801ca2c:	2200      	movs	r2, #0
 801ca2e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 801ca30:	f7e3 fc62 	bl	80002f8 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801ca34:	bf00      	nop
 801ca36:	bd80      	pop	{r7, pc}
 801ca38:	20000034 	.word	0x20000034
 801ca3c:	200b6b58 	.word	0x200b6b58
 801ca40:	200b6ab8 	.word	0x200b6ab8

0801ca44 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b092      	sub	sp, #72	; 0x48
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	60f8      	str	r0, [r7, #12]
 801ca4c:	60b9      	str	r1, [r7, #8]
 801ca4e:	607a      	str	r2, [r7, #4]
 801ca50:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801ca52:	2300      	movs	r3, #0
 801ca54:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801ca56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ca58:	21ef      	movs	r1, #239	; 0xef
 801ca5a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ca5c:	f003 fd89 	bl	8020572 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 801ca60:	22b0      	movs	r2, #176	; 0xb0
 801ca62:	2100      	movs	r1, #0
 801ca64:	68f8      	ldr	r0, [r7, #12]
 801ca66:	f003 fd84 	bl	8020572 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	68ba      	ldr	r2, [r7, #8]
 801ca6e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	687a      	ldr	r2, [r7, #4]
 801ca74:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	683a      	ldr	r2, [r7, #0]
 801ca7a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ca80:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ca86:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ca8c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ca92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ca9a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801caa0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	2220      	movs	r2, #32
 801caa6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801caaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801caac:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801caae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cab0:	3b01      	subs	r3, #1
 801cab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cab4:	4413      	add	r3, r2
 801cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cabc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801cabe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801cac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cac2:	429a      	cmp	r2, r3
 801cac4:	d007      	beq.n	801cad6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	2200      	movs	r2, #0
 801caca:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	2200      	movs	r2, #0
 801cad0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801cad4:	e006      	b.n	801cae4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801cada:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801cae0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	2203      	movs	r2, #3
 801cae8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	4a48      	ldr	r2, [pc, #288]	; (801cc10 <_tx_thread_create+0x1cc>)
 801caee:	655a      	str	r2, [r3, #84]	; 0x54
 801caf0:	68fa      	ldr	r2, [r7, #12]
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801caf6:	4947      	ldr	r1, [pc, #284]	; (801cc14 <_tx_thread_create+0x1d0>)
 801caf8:	68f8      	ldr	r0, [r7, #12]
 801cafa:	f7e3 fc63 	bl	80003c4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cafe:	f3ef 8310 	mrs	r3, PRIMASK
 801cb02:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801cb06:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801cb08:	b672      	cpsid	i
    return(int_posture);
 801cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 801cb0c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	4a41      	ldr	r2, [pc, #260]	; (801cc18 <_tx_thread_create+0x1d4>)
 801cb12:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 801cb14:	4b41      	ldr	r3, [pc, #260]	; (801cc1c <_tx_thread_create+0x1d8>)
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d10b      	bne.n	801cb34 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 801cb1c:	4a40      	ldr	r2, [pc, #256]	; (801cc20 <_tx_thread_create+0x1dc>)
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	68fa      	ldr	r2, [r7, #12]
 801cb26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	68fa      	ldr	r2, [r7, #12]
 801cb2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801cb32:	e016      	b.n	801cb62 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 801cb34:	4b3a      	ldr	r3, [pc, #232]	; (801cc20 <_tx_thread_create+0x1dc>)
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 801cb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cb40:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb44:	68fa      	ldr	r2, [r7, #12]
 801cb46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb4c:	68fa      	ldr	r2, [r7, #12]
 801cb4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cb56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cb5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 801cb62:	4b2e      	ldr	r3, [pc, #184]	; (801cc1c <_tx_thread_create+0x1d8>)
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	3301      	adds	r3, #1
 801cb68:	4a2c      	ldr	r2, [pc, #176]	; (801cc1c <_tx_thread_create+0x1d8>)
 801cb6a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801cb6c:	4b2d      	ldr	r3, [pc, #180]	; (801cc24 <_tx_thread_create+0x1e0>)
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	3301      	adds	r3, #1
 801cb72:	4a2c      	ldr	r2, [pc, #176]	; (801cc24 <_tx_thread_create+0x1e0>)
 801cb74:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801cb76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cb78:	2b01      	cmp	r3, #1
 801cb7a:	d129      	bne.n	801cbd0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801cb7c:	f3ef 8305 	mrs	r3, IPSR
 801cb80:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 801cb82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801cb84:	4b28      	ldr	r3, [pc, #160]	; (801cc28 <_tx_thread_create+0x1e4>)
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	4313      	orrs	r3, r2
 801cb8a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801cb8e:	d30d      	bcc.n	801cbac <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801cb90:	4b26      	ldr	r3, [pc, #152]	; (801cc2c <_tx_thread_create+0x1e8>)
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801cb96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d009      	beq.n	801cbb0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801cb9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cba0:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801cba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cba8:	63da      	str	r2, [r3, #60]	; 0x3c
 801cbaa:	e001      	b.n	801cbb0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801cbac:	2300      	movs	r3, #0
 801cbae:	647b      	str	r3, [r7, #68]	; 0x44
 801cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbb2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cbb4:	6a3b      	ldr	r3, [r7, #32]
 801cbb6:	f383 8810 	msr	PRIMASK, r3
}
 801cbba:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801cbbc:	68f8      	ldr	r0, [r7, #12]
 801cbbe:	f000 fa2d 	bl	801d01c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801cbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d01e      	beq.n	801cc06 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801cbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cbcc:	63da      	str	r2, [r3, #60]	; 0x3c
 801cbce:	e01a      	b.n	801cc06 <_tx_thread_create+0x1c2>
 801cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbd2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cbd4:	693b      	ldr	r3, [r7, #16]
 801cbd6:	f383 8810 	msr	PRIMASK, r3
}
 801cbda:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cbdc:	f3ef 8310 	mrs	r3, PRIMASK
 801cbe0:	61bb      	str	r3, [r7, #24]
    return(posture);
 801cbe2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801cbe4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801cbe6:	b672      	cpsid	i
    return(int_posture);
 801cbe8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801cbea:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801cbec:	4b0d      	ldr	r3, [pc, #52]	; (801cc24 <_tx_thread_create+0x1e0>)
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	3b01      	subs	r3, #1
 801cbf2:	4a0c      	ldr	r2, [pc, #48]	; (801cc24 <_tx_thread_create+0x1e0>)
 801cbf4:	6013      	str	r3, [r2, #0]
 801cbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbf8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cbfa:	69fb      	ldr	r3, [r7, #28]
 801cbfc:	f383 8810 	msr	PRIMASK, r3
}
 801cc00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801cc02:	f000 f9d1 	bl	801cfa8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 801cc06:	2300      	movs	r3, #0
}
 801cc08:	4618      	mov	r0, r3
 801cc0a:	3748      	adds	r7, #72	; 0x48
 801cc0c:	46bd      	mov	sp, r7
 801cc0e:	bd80      	pop	{r7, pc}
 801cc10:	0801d7f1 	.word	0x0801d7f1
 801cc14:	0801ce11 	.word	0x0801ce11
 801cc18:	54485244 	.word	0x54485244
 801cc1c:	200b6acc 	.word	0x200b6acc
 801cc20:	200b6ac8 	.word	0x200b6ac8
 801cc24:	200b6b58 	.word	0x200b6b58
 801cc28:	20000034 	.word	0x20000034
 801cc2c:	200b6ac4 	.word	0x200b6ac4

0801cc30 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 801cc30:	b580      	push	{r7, lr}
 801cc32:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 801cc34:	4b12      	ldr	r3, [pc, #72]	; (801cc80 <_tx_thread_initialize+0x50>)
 801cc36:	2200      	movs	r2, #0
 801cc38:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801cc3a:	4b12      	ldr	r3, [pc, #72]	; (801cc84 <_tx_thread_initialize+0x54>)
 801cc3c:	2200      	movs	r2, #0
 801cc3e:	601a      	str	r2, [r3, #0]
 801cc40:	4b11      	ldr	r3, [pc, #68]	; (801cc88 <_tx_thread_initialize+0x58>)
 801cc42:	2200      	movs	r2, #0
 801cc44:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801cc46:	4b11      	ldr	r3, [pc, #68]	; (801cc8c <_tx_thread_initialize+0x5c>)
 801cc48:	2220      	movs	r2, #32
 801cc4a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801cc4c:	2280      	movs	r2, #128	; 0x80
 801cc4e:	2100      	movs	r1, #0
 801cc50:	480f      	ldr	r0, [pc, #60]	; (801cc90 <_tx_thread_initialize+0x60>)
 801cc52:	f003 fc8e 	bl	8020572 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 801cc56:	4b0f      	ldr	r3, [pc, #60]	; (801cc94 <_tx_thread_initialize+0x64>)
 801cc58:	2200      	movs	r2, #0
 801cc5a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801cc5c:	4b0e      	ldr	r3, [pc, #56]	; (801cc98 <_tx_thread_initialize+0x68>)
 801cc5e:	2200      	movs	r2, #0
 801cc60:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801cc62:	4b0e      	ldr	r3, [pc, #56]	; (801cc9c <_tx_thread_initialize+0x6c>)
 801cc64:	2200      	movs	r2, #0
 801cc66:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 801cc68:	4b0d      	ldr	r3, [pc, #52]	; (801cca0 <_tx_thread_initialize+0x70>)
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801cc6e:	4b0d      	ldr	r3, [pc, #52]	; (801cca4 <_tx_thread_initialize+0x74>)
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 801cc76:	4a0b      	ldr	r2, [pc, #44]	; (801cca4 <_tx_thread_initialize+0x74>)
 801cc78:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801cc7a:	bf00      	nop
 801cc7c:	bd80      	pop	{r7, pc}
 801cc7e:	bf00      	nop
 801cc80:	200b6ac0 	.word	0x200b6ac0
 801cc84:	200b6ac4 	.word	0x200b6ac4
 801cc88:	200b6ad0 	.word	0x200b6ad0
 801cc8c:	200b6ad4 	.word	0x200b6ad4
 801cc90:	200b6ad8 	.word	0x200b6ad8
 801cc94:	200b6ac8 	.word	0x200b6ac8
 801cc98:	200b6acc 	.word	0x200b6acc
 801cc9c:	200b6b58 	.word	0x200b6b58
 801cca0:	200b6b5c 	.word	0x200b6b5c
 801cca4:	200b6b60 	.word	0x200b6b60

0801cca8 <_tx_thread_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_reset(TX_THREAD *thread_ptr)
{
 801cca8:	b580      	push	{r7, lr}
 801ccaa:	b08c      	sub	sp, #48	; 0x30
 801ccac:	af00      	add	r7, sp, #0
 801ccae:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
UINT            status;


    /* Default a successful completion status.  */
    status =  TX_SUCCESS;
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ccb4:	f3ef 8310 	mrs	r3, PRIMASK
 801ccb8:	623b      	str	r3, [r7, #32]
    return(posture);
 801ccba:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801ccbc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801ccbe:	b672      	cpsid	i
    return(int_posture);
 801ccc0:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts.  */
    TX_DISABLE
 801ccc2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801ccc4:	4b20      	ldr	r3, [pc, #128]	; (801cd48 <_tx_thread_reset+0xa0>)
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for a call from the current thread, which is not allowed!  */
    if (current_thread == thread_ptr)
 801ccca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	429a      	cmp	r2, r3
 801ccd0:	d102      	bne.n	801ccd8 <_tx_thread_reset+0x30>
    {

        /* Thread not completed or terminated - return an error!  */
        status =  TX_NOT_DONE;
 801ccd2:	2320      	movs	r3, #32
 801ccd4:	62bb      	str	r3, [r7, #40]	; 0x28
 801ccd6:	e009      	b.n	801ccec <_tx_thread_reset+0x44>
    }
    else
    {

        /* Check for proper status of this thread to reset.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccdc:	2b01      	cmp	r3, #1
 801ccde:	d005      	beq.n	801ccec <_tx_thread_reset+0x44>
        {

            /* Now check for terminated state.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cce4:	2b02      	cmp	r3, #2
 801cce6:	d001      	beq.n	801ccec <_tx_thread_reset+0x44>
            {

                /* Thread not completed or terminated - return an error!  */
                status =  TX_NOT_DONE;
 801cce8:	2320      	movs	r3, #32
 801ccea:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
    }

    /* Is the request valid?  */
    if (status == TX_SUCCESS)
 801ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d11f      	bne.n	801cd32 <_tx_thread_reset+0x8a>
    {

        /* Modify the thread status to prevent additional reset calls.  */
        thread_ptr -> tx_thread_state =  TX_NOT_DONE;
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	2220      	movs	r2, #32
 801ccf6:	631a      	str	r2, [r3, #48]	; 0x30
 801ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccfa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ccfc:	693b      	ldr	r3, [r7, #16]
 801ccfe:	f383 8810 	msr	PRIMASK, r3
}
 801cd02:	bf00      	nop
#ifndef TX_DISABLE_STACK_FILLING

        /* Set the thread stack to a pattern prior to creating the initial
           stack frame.  This pattern is used by the stack checking routines
           to see how much has been used.  */
        TX_MEMSET(thread_ptr -> tx_thread_stack_start, ((UCHAR) TX_STACK_FILL), thread_ptr -> tx_thread_stack_size);
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	68d8      	ldr	r0, [r3, #12]
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	695b      	ldr	r3, [r3, #20]
 801cd0c:	461a      	mov	r2, r3
 801cd0e:	21ef      	movs	r1, #239	; 0xef
 801cd10:	f003 fc2f 	bl	8020572 <memset>
#endif

        /* Call the target specific stack frame building routine to build the
           thread's initial stack and to setup the actual stack pointer in the
           control block.  */
        _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801cd14:	490d      	ldr	r1, [pc, #52]	; (801cd4c <_tx_thread_reset+0xa4>)
 801cd16:	6878      	ldr	r0, [r7, #4]
 801cd18:	f7e3 fb54 	bl	80003c4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cd1c:	f3ef 8310 	mrs	r3, PRIMASK
 801cd20:	61bb      	str	r3, [r7, #24]
    return(posture);
 801cd22:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801cd24:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801cd26:	b672      	cpsid	i
    return(int_posture);
 801cd28:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts.  */
        TX_DISABLE
 801cd2a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Finally, move into a suspended state to allow for the thread to be resumed.  */
        thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	2203      	movs	r2, #3
 801cd30:	631a      	str	r2, [r3, #48]	; 0x30
 801cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	f383 8810 	msr	PRIMASK, r3
}
 801cd3c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status to caller.  */
    return(status);
 801cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801cd40:	4618      	mov	r0, r3
 801cd42:	3730      	adds	r7, #48	; 0x30
 801cd44:	46bd      	mov	sp, r7
 801cd46:	bd80      	pop	{r7, pc}
 801cd48:	200b6ac0 	.word	0x200b6ac0
 801cd4c:	0801ce11 	.word	0x0801ce11

0801cd50 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 801cd50:	b580      	push	{r7, lr}
 801cd52:	b08c      	sub	sp, #48	; 0x30
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 801cd58:	2300      	movs	r3, #0
 801cd5a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cd5c:	f3ef 8310 	mrs	r3, PRIMASK
 801cd60:	61fb      	str	r3, [r7, #28]
    return(posture);
 801cd62:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801cd64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801cd66:	b672      	cpsid	i
    return(int_posture);
 801cd68:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801cd6a:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd70:	2b03      	cmp	r3, #3
 801cd72:	d12f      	bne.n	801cdd4 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801cd74:	f3ef 8305 	mrs	r3, IPSR
 801cd78:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801cd7a:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801cd7c:	4b21      	ldr	r3, [pc, #132]	; (801ce04 <_tx_thread_resume+0xb4>)
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	4313      	orrs	r3, r2
 801cd82:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801cd86:	d30d      	bcc.n	801cda4 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801cd88:	4b1f      	ldr	r3, [pc, #124]	; (801ce08 <_tx_thread_resume+0xb8>)
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d009      	beq.n	801cda8 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd98:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cda0:	63da      	str	r2, [r3, #60]	; 0x3c
 801cda2:	e001      	b.n	801cda8 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801cda4:	2300      	movs	r3, #0
 801cda6:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801cda8:	4b18      	ldr	r3, [pc, #96]	; (801ce0c <_tx_thread_resume+0xbc>)
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	3301      	adds	r3, #1
 801cdae:	4a17      	ldr	r2, [pc, #92]	; (801ce0c <_tx_thread_resume+0xbc>)
 801cdb0:	6013      	str	r3, [r2, #0]
 801cdb2:	6a3b      	ldr	r3, [r7, #32]
 801cdb4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cdb6:	693b      	ldr	r3, [r7, #16]
 801cdb8:	f383 8810 	msr	PRIMASK, r3
}
 801cdbc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801cdbe:	6878      	ldr	r0, [r7, #4]
 801cdc0:	f000 f92c 	bl	801d01c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d002      	beq.n	801cdd0 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cdce:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	e012      	b.n	801cdfa <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cdd8:	2b01      	cmp	r3, #1
 801cdda:	d105      	bne.n	801cde8 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	2200      	movs	r2, #0
 801cde0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 801cde2:	2319      	movs	r3, #25
 801cde4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cde6:	e001      	b.n	801cdec <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 801cde8:	2312      	movs	r3, #18
 801cdea:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cdec:	6a3b      	ldr	r3, [r7, #32]
 801cdee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	f383 8810 	msr	PRIMASK, r3
}
 801cdf6:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 801cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801cdfa:	4618      	mov	r0, r3
 801cdfc:	3730      	adds	r7, #48	; 0x30
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	bd80      	pop	{r7, pc}
 801ce02:	bf00      	nop
 801ce04:	20000034 	.word	0x20000034
 801ce08:	200b6ac4 	.word	0x200b6ac4
 801ce0c:	200b6b58 	.word	0x200b6b58

0801ce10 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b088      	sub	sp, #32
 801ce14:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801ce16:	4b21      	ldr	r3, [pc, #132]	; (801ce9c <_tx_thread_shell_entry+0x8c>)
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce20:	69fa      	ldr	r2, [r7, #28]
 801ce22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801ce24:	4610      	mov	r0, r2
 801ce26:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801ce28:	4b1d      	ldr	r3, [pc, #116]	; (801cea0 <_tx_thread_shell_entry+0x90>)
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d003      	beq.n	801ce38 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801ce30:	4b1b      	ldr	r3, [pc, #108]	; (801cea0 <_tx_thread_shell_entry+0x90>)
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	69f8      	ldr	r0, [r7, #28]
 801ce36:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ce38:	f3ef 8310 	mrs	r3, PRIMASK
 801ce3c:	607b      	str	r3, [r7, #4]
    return(posture);
 801ce3e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801ce40:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801ce42:	b672      	cpsid	i
    return(int_posture);
 801ce44:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801ce46:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 801ce48:	69fb      	ldr	r3, [r7, #28]
 801ce4a:	2201      	movs	r2, #1
 801ce4c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801ce4e:	69fb      	ldr	r3, [r7, #28]
 801ce50:	2201      	movs	r2, #1
 801ce52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801ce54:	69fb      	ldr	r3, [r7, #28]
 801ce56:	2200      	movs	r2, #0
 801ce58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801ce5a:	4b12      	ldr	r3, [pc, #72]	; (801cea4 <_tx_thread_shell_entry+0x94>)
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	3301      	adds	r3, #1
 801ce60:	4a10      	ldr	r2, [pc, #64]	; (801cea4 <_tx_thread_shell_entry+0x94>)
 801ce62:	6013      	str	r3, [r2, #0]
 801ce64:	69bb      	ldr	r3, [r7, #24]
 801ce66:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ce68:	68bb      	ldr	r3, [r7, #8]
 801ce6a:	f383 8810 	msr	PRIMASK, r3
}
 801ce6e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801ce70:	f3ef 8314 	mrs	r3, CONTROL
 801ce74:	60fb      	str	r3, [r7, #12]
    return(control_value);
 801ce76:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 801ce78:	617b      	str	r3, [r7, #20]
 801ce7a:	697b      	ldr	r3, [r7, #20]
 801ce7c:	f023 0304 	bic.w	r3, r3, #4
 801ce80:	617b      	str	r3, [r7, #20]
 801ce82:	697b      	ldr	r3, [r7, #20]
 801ce84:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801ce86:	693b      	ldr	r3, [r7, #16]
 801ce88:	f383 8814 	msr	CONTROL, r3
}
 801ce8c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801ce8e:	69f8      	ldr	r0, [r7, #28]
 801ce90:	f000 f9c4 	bl	801d21c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801ce94:	bf00      	nop
 801ce96:	3720      	adds	r7, #32
 801ce98:	46bd      	mov	sp, r7
 801ce9a:	bd80      	pop	{r7, pc}
 801ce9c:	200b6ac0 	.word	0x200b6ac0
 801cea0:	200b6b5c 	.word	0x200b6b5c
 801cea4:	200b6b58 	.word	0x200b6b58

0801cea8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 801cea8:	b580      	push	{r7, lr}
 801ceaa:	b08e      	sub	sp, #56	; 0x38
 801ceac:	af00      	add	r7, sp, #0
 801ceae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ceb0:	f3ef 8310 	mrs	r3, PRIMASK
 801ceb4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801ceb8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801ceba:	b672      	cpsid	i
    return(int_posture);
 801cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801cebe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801cec0:	4b35      	ldr	r3, [pc, #212]	; (801cf98 <_tx_thread_sleep+0xf0>)
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 801cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d108      	bne.n	801cede <_tx_thread_sleep+0x36>
 801cecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cece:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ced0:	6a3b      	ldr	r3, [r7, #32]
 801ced2:	f383 8810 	msr	PRIMASK, r3
}
 801ced6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801ced8:	2313      	movs	r3, #19
 801ceda:	637b      	str	r3, [r7, #52]	; 0x34
 801cedc:	e056      	b.n	801cf8c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801cede:	f3ef 8305 	mrs	r3, IPSR
 801cee2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801cee4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801cee6:	4b2d      	ldr	r3, [pc, #180]	; (801cf9c <_tx_thread_sleep+0xf4>)
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	4313      	orrs	r3, r2
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d008      	beq.n	801cf02 <_tx_thread_sleep+0x5a>
 801cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cef2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cef4:	69bb      	ldr	r3, [r7, #24]
 801cef6:	f383 8810 	msr	PRIMASK, r3
}
 801cefa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801cefc:	2313      	movs	r3, #19
 801cefe:	637b      	str	r3, [r7, #52]	; 0x34
 801cf00:	e044      	b.n	801cf8c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf04:	4a26      	ldr	r2, [pc, #152]	; (801cfa0 <_tx_thread_sleep+0xf8>)
 801cf06:	4293      	cmp	r3, r2
 801cf08:	d108      	bne.n	801cf1c <_tx_thread_sleep+0x74>
 801cf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf0c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cf0e:	697b      	ldr	r3, [r7, #20]
 801cf10:	f383 8810 	msr	PRIMASK, r3
}
 801cf14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801cf16:	2313      	movs	r3, #19
 801cf18:	637b      	str	r3, [r7, #52]	; 0x34
 801cf1a:	e037      	b.n	801cf8c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d108      	bne.n	801cf34 <_tx_thread_sleep+0x8c>
 801cf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf24:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cf26:	693b      	ldr	r3, [r7, #16]
 801cf28:	f383 8810 	msr	PRIMASK, r3
}
 801cf2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801cf2e:	2300      	movs	r3, #0
 801cf30:	637b      	str	r3, [r7, #52]	; 0x34
 801cf32:	e02b      	b.n	801cf8c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801cf34:	4b1b      	ldr	r3, [pc, #108]	; (801cfa4 <_tx_thread_sleep+0xfc>)
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d008      	beq.n	801cf4e <_tx_thread_sleep+0xa6>
 801cf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf3e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	f383 8810 	msr	PRIMASK, r3
}
 801cf46:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 801cf48:	2313      	movs	r3, #19
 801cf4a:	637b      	str	r3, [r7, #52]	; 0x34
 801cf4c:	e01e      	b.n	801cf8c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf50:	2204      	movs	r2, #4
 801cf52:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf56:	2201      	movs	r2, #1
 801cf58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf5c:	2200      	movs	r2, #0
 801cf5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 801cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf64:	687a      	ldr	r2, [r7, #4]
 801cf66:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801cf68:	4b0e      	ldr	r3, [pc, #56]	; (801cfa4 <_tx_thread_sleep+0xfc>)
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	3301      	adds	r3, #1
 801cf6e:	4a0d      	ldr	r2, [pc, #52]	; (801cfa4 <_tx_thread_sleep+0xfc>)
 801cf70:	6013      	str	r3, [r2, #0]
 801cf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf74:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cf76:	68bb      	ldr	r3, [r7, #8]
 801cf78:	f383 8810 	msr	PRIMASK, r3
}
 801cf7c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801cf7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cf80:	f000 f94c 	bl	801d21c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 801cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cf8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 801cf8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801cf8e:	4618      	mov	r0, r3
 801cf90:	3738      	adds	r7, #56	; 0x38
 801cf92:	46bd      	mov	sp, r7
 801cf94:	bd80      	pop	{r7, pc}
 801cf96:	bf00      	nop
 801cf98:	200b6ac0 	.word	0x200b6ac0
 801cf9c:	20000034 	.word	0x20000034
 801cfa0:	200b6c08 	.word	0x200b6c08
 801cfa4:	200b6b58 	.word	0x200b6b58

0801cfa8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 801cfa8:	b480      	push	{r7}
 801cfaa:	b089      	sub	sp, #36	; 0x24
 801cfac:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801cfae:	4b17      	ldr	r3, [pc, #92]	; (801d00c <_tx_thread_system_preempt_check+0x64>)
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 801cfb4:	69fb      	ldr	r3, [r7, #28]
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d121      	bne.n	801cffe <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801cfba:	4b15      	ldr	r3, [pc, #84]	; (801d010 <_tx_thread_system_preempt_check+0x68>)
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801cfc0:	4b14      	ldr	r3, [pc, #80]	; (801d014 <_tx_thread_system_preempt_check+0x6c>)
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801cfc6:	69ba      	ldr	r2, [r7, #24]
 801cfc8:	697b      	ldr	r3, [r7, #20]
 801cfca:	429a      	cmp	r2, r3
 801cfcc:	d017      	beq.n	801cffe <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801cfce:	4b12      	ldr	r3, [pc, #72]	; (801d018 <_tx_thread_system_preempt_check+0x70>)
 801cfd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cfd4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801cfd6:	f3ef 8305 	mrs	r3, IPSR
 801cfda:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801cfdc:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d10c      	bne.n	801cffc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cfe2:	f3ef 8310 	mrs	r3, PRIMASK
 801cfe6:	60fb      	str	r3, [r7, #12]
    return(posture);
 801cfe8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 801cfea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801cfec:	b662      	cpsie	i
}
 801cfee:	bf00      	nop
 801cff0:	68bb      	ldr	r3, [r7, #8]
 801cff2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	f383 8810 	msr	PRIMASK, r3
}
 801cffa:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 801cffc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801cffe:	bf00      	nop
 801d000:	3724      	adds	r7, #36	; 0x24
 801d002:	46bd      	mov	sp, r7
 801d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d008:	4770      	bx	lr
 801d00a:	bf00      	nop
 801d00c:	200b6b58 	.word	0x200b6b58
 801d010:	200b6ac0 	.word	0x200b6ac0
 801d014:	200b6ac4 	.word	0x200b6ac4
 801d018:	e000ed04 	.word	0xe000ed04

0801d01c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b096      	sub	sp, #88	; 0x58
 801d020:	af00      	add	r7, sp, #0
 801d022:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d024:	f3ef 8310 	mrs	r3, PRIMASK
 801d028:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801d02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801d02c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801d02e:	b672      	cpsid	i
    return(int_posture);
 801d030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801d032:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d005      	beq.n	801d048 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	334c      	adds	r3, #76	; 0x4c
 801d040:	4618      	mov	r0, r3
 801d042:	f000 fd11 	bl	801da68 <_tx_timer_system_deactivate>
 801d046:	e002      	b.n	801d04e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	2200      	movs	r2, #0
 801d04c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801d04e:	4b6c      	ldr	r3, [pc, #432]	; (801d200 <_tx_thread_system_resume+0x1e4>)
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	3b01      	subs	r3, #1
 801d054:	4a6a      	ldr	r2, [pc, #424]	; (801d200 <_tx_thread_system_resume+0x1e4>)
 801d056:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	f040 8083 	bne.w	801d168 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d066:	2b00      	cmp	r3, #0
 801d068:	f000 8097 	beq.w	801d19a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d070:	2b00      	cmp	r3, #0
 801d072:	d172      	bne.n	801d15a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	2200      	movs	r2, #0
 801d078:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d07e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 801d080:	4a60      	ldr	r2, [pc, #384]	; (801d204 <_tx_thread_system_resume+0x1e8>)
 801d082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d088:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 801d08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d154      	bne.n	801d13a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 801d090:	495c      	ldr	r1, [pc, #368]	; (801d204 <_tx_thread_system_resume+0x1e8>)
 801d092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d094:	687a      	ldr	r2, [r7, #4]
 801d096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	687a      	ldr	r2, [r7, #4]
 801d09e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	687a      	ldr	r2, [r7, #4]
 801d0a4:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801d0a6:	2201      	movs	r2, #1
 801d0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d0aa:	fa02 f303 	lsl.w	r3, r2, r3
 801d0ae:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801d0b0:	4b55      	ldr	r3, [pc, #340]	; (801d208 <_tx_thread_system_resume+0x1ec>)
 801d0b2:	681a      	ldr	r2, [r3, #0]
 801d0b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0b6:	4313      	orrs	r3, r2
 801d0b8:	4a53      	ldr	r2, [pc, #332]	; (801d208 <_tx_thread_system_resume+0x1ec>)
 801d0ba:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 801d0bc:	4b53      	ldr	r3, [pc, #332]	; (801d20c <_tx_thread_system_resume+0x1f0>)
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d0c2:	429a      	cmp	r2, r3
 801d0c4:	d269      	bcs.n	801d19a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801d0c6:	4a51      	ldr	r2, [pc, #324]	; (801d20c <_tx_thread_system_resume+0x1f0>)
 801d0c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d0ca:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 801d0cc:	4b50      	ldr	r3, [pc, #320]	; (801d210 <_tx_thread_system_resume+0x1f4>)
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801d0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d103      	bne.n	801d0e0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801d0d8:	4a4d      	ldr	r2, [pc, #308]	; (801d210 <_tx_thread_system_resume+0x1f4>)
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	6013      	str	r3, [r2, #0]
 801d0de:	e05c      	b.n	801d19a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 801d0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d0e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d0e6:	429a      	cmp	r2, r3
 801d0e8:	d257      	bcs.n	801d19a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 801d0ea:	4a49      	ldr	r2, [pc, #292]	; (801d210 <_tx_thread_system_resume+0x1f4>)
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	6013      	str	r3, [r2, #0]
 801d0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0f6:	f383 8810 	msr	PRIMASK, r3
}
 801d0fa:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d0fc:	4b40      	ldr	r3, [pc, #256]	; (801d200 <_tx_thread_system_resume+0x1e4>)
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801d102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d104:	2b00      	cmp	r3, #0
 801d106:	d174      	bne.n	801d1f2 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801d108:	4b42      	ldr	r3, [pc, #264]	; (801d214 <_tx_thread_system_resume+0x1f8>)
 801d10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d10e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d110:	f3ef 8305 	mrs	r3, IPSR
 801d114:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d10c      	bne.n	801d136 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d11c:	f3ef 8310 	mrs	r3, PRIMASK
 801d120:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 801d124:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801d126:	b662      	cpsie	i
}
 801d128:	bf00      	nop
 801d12a:	6a3b      	ldr	r3, [r7, #32]
 801d12c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d12e:	69fb      	ldr	r3, [r7, #28]
 801d130:	f383 8810 	msr	PRIMASK, r3
}
 801d134:	bf00      	nop
}
 801d136:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 801d138:	e05b      	b.n	801d1f2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801d13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d13e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 801d140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d142:	687a      	ldr	r2, [r7, #4]
 801d144:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801d146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d148:	687a      	ldr	r2, [r7, #4]
 801d14a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d150:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d156:	621a      	str	r2, [r3, #32]
 801d158:	e01f      	b.n	801d19a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	2200      	movs	r2, #0
 801d15e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	2203      	movs	r2, #3
 801d164:	631a      	str	r2, [r3, #48]	; 0x30
 801d166:	e018      	b.n	801d19a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d16c:	2b01      	cmp	r3, #1
 801d16e:	d014      	beq.n	801d19a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d174:	2b02      	cmp	r3, #2
 801d176:	d010      	beq.n	801d19a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d106      	bne.n	801d18e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	2200      	movs	r2, #0
 801d184:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	2200      	movs	r2, #0
 801d18a:	631a      	str	r2, [r3, #48]	; 0x30
 801d18c:	e005      	b.n	801d19a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	2200      	movs	r2, #0
 801d192:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	2203      	movs	r2, #3
 801d198:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801d19a:	4b1f      	ldr	r3, [pc, #124]	; (801d218 <_tx_thread_system_resume+0x1fc>)
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	63bb      	str	r3, [r7, #56]	; 0x38
 801d1a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d1a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d1a4:	69bb      	ldr	r3, [r7, #24]
 801d1a6:	f383 8810 	msr	PRIMASK, r3
}
 801d1aa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801d1ac:	4b18      	ldr	r3, [pc, #96]	; (801d210 <_tx_thread_system_resume+0x1f4>)
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d1b2:	429a      	cmp	r2, r3
 801d1b4:	d020      	beq.n	801d1f8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d1b6:	4b12      	ldr	r3, [pc, #72]	; (801d200 <_tx_thread_system_resume+0x1e4>)
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 801d1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d11a      	bne.n	801d1f8 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801d1c2:	4b14      	ldr	r3, [pc, #80]	; (801d214 <_tx_thread_system_resume+0x1f8>)
 801d1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d1c8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d1ca:	f3ef 8305 	mrs	r3, IPSR
 801d1ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801d1d0:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d10f      	bne.n	801d1f6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d1d6:	f3ef 8310 	mrs	r3, PRIMASK
 801d1da:	613b      	str	r3, [r7, #16]
    return(posture);
 801d1dc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 801d1de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801d1e0:	b662      	cpsie	i
}
 801d1e2:	bf00      	nop
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d1e8:	68bb      	ldr	r3, [r7, #8]
 801d1ea:	f383 8810 	msr	PRIMASK, r3
}
 801d1ee:	bf00      	nop
}
 801d1f0:	e001      	b.n	801d1f6 <_tx_thread_system_resume+0x1da>
                                return;
 801d1f2:	bf00      	nop
 801d1f4:	e000      	b.n	801d1f8 <_tx_thread_system_resume+0x1dc>
 801d1f6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 801d1f8:	3758      	adds	r7, #88	; 0x58
 801d1fa:	46bd      	mov	sp, r7
 801d1fc:	bd80      	pop	{r7, pc}
 801d1fe:	bf00      	nop
 801d200:	200b6b58 	.word	0x200b6b58
 801d204:	200b6ad8 	.word	0x200b6ad8
 801d208:	200b6ad0 	.word	0x200b6ad0
 801d20c:	200b6ad4 	.word	0x200b6ad4
 801d210:	200b6ac4 	.word	0x200b6ac4
 801d214:	e000ed04 	.word	0xe000ed04
 801d218:	200b6ac0 	.word	0x200b6ac0

0801d21c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b09e      	sub	sp, #120	; 0x78
 801d220:	af00      	add	r7, sp, #0
 801d222:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801d224:	4b81      	ldr	r3, [pc, #516]	; (801d42c <_tx_thread_system_suspend+0x210>)
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d22a:	f3ef 8310 	mrs	r3, PRIMASK
 801d22e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801d230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801d232:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 801d234:	b672      	cpsid	i
    return(int_posture);
 801d236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801d238:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801d23a:	687a      	ldr	r2, [r7, #4]
 801d23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d23e:	429a      	cmp	r2, r3
 801d240:	d112      	bne.n	801d268 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d246:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 801d248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d008      	beq.n	801d260 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801d24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d250:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d254:	d004      	beq.n	801d260 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	334c      	adds	r3, #76	; 0x4c
 801d25a:	4618      	mov	r0, r3
 801d25c:	f000 fba2 	bl	801d9a4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	69db      	ldr	r3, [r3, #28]
 801d264:	4a72      	ldr	r2, [pc, #456]	; (801d430 <_tx_thread_system_suspend+0x214>)
 801d266:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801d268:	4b72      	ldr	r3, [pc, #456]	; (801d434 <_tx_thread_system_suspend+0x218>)
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	3b01      	subs	r3, #1
 801d26e:	4a71      	ldr	r2, [pc, #452]	; (801d434 <_tx_thread_system_suspend+0x218>)
 801d270:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d276:	2b01      	cmp	r3, #1
 801d278:	f040 80a6 	bne.w	801d3c8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	2200      	movs	r2, #0
 801d280:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d286:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	6a1b      	ldr	r3, [r3, #32]
 801d28c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801d28e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	429a      	cmp	r2, r3
 801d294:	d015      	beq.n	801d2c2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d29a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 801d29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d29e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d2a0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 801d2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d2a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d2a6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801d2a8:	4a63      	ldr	r2, [pc, #396]	; (801d438 <_tx_thread_system_suspend+0x21c>)
 801d2aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d2b0:	687a      	ldr	r2, [r7, #4]
 801d2b2:	429a      	cmp	r2, r3
 801d2b4:	d157      	bne.n	801d366 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801d2b6:	4960      	ldr	r1, [pc, #384]	; (801d438 <_tx_thread_system_suspend+0x21c>)
 801d2b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d2bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801d2c0:	e051      	b.n	801d366 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801d2c2:	4a5d      	ldr	r2, [pc, #372]	; (801d438 <_tx_thread_system_suspend+0x21c>)
 801d2c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2c6:	2100      	movs	r1, #0
 801d2c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 801d2cc:	2201      	movs	r2, #1
 801d2ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2d0:	fa02 f303 	lsl.w	r3, r2, r3
 801d2d4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801d2d6:	4b59      	ldr	r3, [pc, #356]	; (801d43c <_tx_thread_system_suspend+0x220>)
 801d2d8:	681a      	ldr	r2, [r3, #0]
 801d2da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d2dc:	43db      	mvns	r3, r3
 801d2de:	4013      	ands	r3, r2
 801d2e0:	4a56      	ldr	r2, [pc, #344]	; (801d43c <_tx_thread_system_suspend+0x220>)
 801d2e2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801d2e4:	2300      	movs	r3, #0
 801d2e6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 801d2e8:	4b54      	ldr	r3, [pc, #336]	; (801d43c <_tx_thread_system_suspend+0x220>)
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801d2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d12b      	bne.n	801d34c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801d2f4:	4b52      	ldr	r3, [pc, #328]	; (801d440 <_tx_thread_system_suspend+0x224>)
 801d2f6:	2220      	movs	r2, #32
 801d2f8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801d2fa:	4b52      	ldr	r3, [pc, #328]	; (801d444 <_tx_thread_system_suspend+0x228>)
 801d2fc:	2200      	movs	r2, #0
 801d2fe:	601a      	str	r2, [r3, #0]
 801d300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d302:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d306:	f383 8810 	msr	PRIMASK, r3
}
 801d30a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d30c:	4b49      	ldr	r3, [pc, #292]	; (801d434 <_tx_thread_system_suspend+0x218>)
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 801d312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d314:	2b00      	cmp	r3, #0
 801d316:	f040 8081 	bne.w	801d41c <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801d31a:	4b4b      	ldr	r3, [pc, #300]	; (801d448 <_tx_thread_system_suspend+0x22c>)
 801d31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d320:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d322:	f3ef 8305 	mrs	r3, IPSR
 801d326:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 801d328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d10c      	bne.n	801d348 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d32e:	f3ef 8310 	mrs	r3, PRIMASK
 801d332:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 801d334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 801d336:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 801d338:	b662      	cpsie	i
}
 801d33a:	bf00      	nop
 801d33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d33e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d342:	f383 8810 	msr	PRIMASK, r3
}
 801d346:	bf00      	nop
}
 801d348:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801d34a:	e067      	b.n	801d41c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801d34c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d34e:	fa93 f3a3 	rbit	r3, r3
 801d352:	65bb      	str	r3, [r7, #88]	; 0x58
 801d354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d356:	fab3 f383 	clz	r3, r3
 801d35a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 801d35c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d35e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d360:	4413      	add	r3, r2
 801d362:	4a37      	ldr	r2, [pc, #220]	; (801d440 <_tx_thread_system_suspend+0x224>)
 801d364:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801d366:	4b37      	ldr	r3, [pc, #220]	; (801d444 <_tx_thread_system_suspend+0x228>)
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	687a      	ldr	r2, [r7, #4]
 801d36c:	429a      	cmp	r2, r3
 801d36e:	d12b      	bne.n	801d3c8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801d370:	4b33      	ldr	r3, [pc, #204]	; (801d440 <_tx_thread_system_suspend+0x224>)
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	4a30      	ldr	r2, [pc, #192]	; (801d438 <_tx_thread_system_suspend+0x21c>)
 801d376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d37a:	4a32      	ldr	r2, [pc, #200]	; (801d444 <_tx_thread_system_suspend+0x228>)
 801d37c:	6013      	str	r3, [r2, #0]
 801d37e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d380:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d384:	f383 8810 	msr	PRIMASK, r3
}
 801d388:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d38a:	4b2a      	ldr	r3, [pc, #168]	; (801d434 <_tx_thread_system_suspend+0x218>)
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 801d390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d392:	2b00      	cmp	r3, #0
 801d394:	d144      	bne.n	801d420 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801d396:	4b2c      	ldr	r3, [pc, #176]	; (801d448 <_tx_thread_system_suspend+0x22c>)
 801d398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d39c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d39e:	f3ef 8305 	mrs	r3, IPSR
 801d3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 801d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d10c      	bne.n	801d3c4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d3aa:	f3ef 8310 	mrs	r3, PRIMASK
 801d3ae:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 801d3b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 801d3b4:	b662      	cpsie	i
}
 801d3b6:	bf00      	nop
 801d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3ba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d3bc:	6a3b      	ldr	r3, [r7, #32]
 801d3be:	f383 8810 	msr	PRIMASK, r3
}
 801d3c2:	bf00      	nop
}
 801d3c4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801d3c6:	e02b      	b.n	801d420 <_tx_thread_system_suspend+0x204>
 801d3c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d3cc:	69fb      	ldr	r3, [r7, #28]
 801d3ce:	f383 8810 	msr	PRIMASK, r3
}
 801d3d2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801d3d4:	4b1b      	ldr	r3, [pc, #108]	; (801d444 <_tx_thread_system_suspend+0x228>)
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d3da:	429a      	cmp	r2, r3
 801d3dc:	d022      	beq.n	801d424 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801d3de:	4b15      	ldr	r3, [pc, #84]	; (801d434 <_tx_thread_system_suspend+0x218>)
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 801d3e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d11c      	bne.n	801d424 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801d3ea:	4b17      	ldr	r3, [pc, #92]	; (801d448 <_tx_thread_system_suspend+0x22c>)
 801d3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d3f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d3f2:	f3ef 8305 	mrs	r3, IPSR
 801d3f6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801d3f8:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d10c      	bne.n	801d418 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d3fe:	f3ef 8310 	mrs	r3, PRIMASK
 801d402:	617b      	str	r3, [r7, #20]
    return(posture);
 801d404:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 801d406:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801d408:	b662      	cpsie	i
}
 801d40a:	bf00      	nop
 801d40c:	693b      	ldr	r3, [r7, #16]
 801d40e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	f383 8810 	msr	PRIMASK, r3
}
 801d416:	bf00      	nop
}
 801d418:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801d41a:	e003      	b.n	801d424 <_tx_thread_system_suspend+0x208>
                return;
 801d41c:	bf00      	nop
 801d41e:	e002      	b.n	801d426 <_tx_thread_system_suspend+0x20a>
            return;
 801d420:	bf00      	nop
 801d422:	e000      	b.n	801d426 <_tx_thread_system_suspend+0x20a>
    return;
 801d424:	bf00      	nop
}
 801d426:	3778      	adds	r7, #120	; 0x78
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd80      	pop	{r7, pc}
 801d42c:	200b6ac0 	.word	0x200b6ac0
 801d430:	200b70c4 	.word	0x200b70c4
 801d434:	200b6b58 	.word	0x200b6b58
 801d438:	200b6ad8 	.word	0x200b6ad8
 801d43c:	200b6ad0 	.word	0x200b6ad0
 801d440:	200b6ad4 	.word	0x200b6ad4
 801d444:	200b6ac4 	.word	0x200b6ac4
 801d448:	e000ed04 	.word	0xe000ed04

0801d44c <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 801d44c:	b580      	push	{r7, lr}
 801d44e:	b0ac      	sub	sp, #176	; 0xb0
 801d450:	af00      	add	r7, sp, #0
 801d452:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 801d454:	2300      	movs	r3, #0
 801d456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d45a:	f3ef 8310 	mrs	r3, PRIMASK
 801d45e:	67fb      	str	r3, [r7, #124]	; 0x7c
    return(posture);
 801d460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    int_posture = __get_interrupt_posture();
 801d462:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("CPSID i" : : : "memory");
 801d464:	b672      	cpsid	i
    return(int_posture);
 801d466:	6fbb      	ldr	r3, [r7, #120]	; 0x78

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 801d468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	334c      	adds	r3, #76	; 0x4c
 801d470:	4618      	mov	r0, r3
 801d472:	f000 faf9 	bl	801da68 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d47a:	2b02      	cmp	r3, #2
 801d47c:	d10a      	bne.n	801d494 <_tx_thread_terminate+0x48>
 801d47e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d482:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d486:	f383 8810 	msr	PRIMASK, r3
}
 801d48a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 801d48c:	2300      	movs	r3, #0
 801d48e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d492:	e148      	b.n	801d726 <_tx_thread_terminate+0x2da>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d498:	2b01      	cmp	r3, #1
 801d49a:	f000 813d 	beq.w	801d718 <_tx_thread_terminate+0x2cc>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 801d49e:	4ba6      	ldr	r3, [pc, #664]	; (801d738 <_tx_thread_terminate+0x2ec>)
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	3301      	adds	r3, #1
 801d4a4:	4aa4      	ldr	r2, [pc, #656]	; (801d738 <_tx_thread_terminate+0x2ec>)
 801d4a6:	6013      	str	r3, [r2, #0]
        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d17a      	bne.n	801d5a6 <_tx_thread_terminate+0x15a>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	2202      	movs	r2, #2
 801d4b4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	2201      	movs	r2, #1
 801d4ba:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	2200      	movs	r2, #0
 801d4c0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 801d4c2:	4b9d      	ldr	r3, [pc, #628]	; (801d738 <_tx_thread_terminate+0x2ec>)
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	3301      	adds	r3, #1
 801d4c8:	4a9b      	ldr	r2, [pc, #620]	; (801d738 <_tx_thread_terminate+0x2ec>)
 801d4ca:	6013      	str	r3, [r2, #0]
 801d4cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d4d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d4d4:	f383 8810 	msr	PRIMASK, r3
}
 801d4d8:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d4da:	f3ef 8305 	mrs	r3, IPSR
 801d4de:	673b      	str	r3, [r7, #112]	; 0x70
    return(ipsr_value);
 801d4e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70

            /* Restore interrupts.  */
            TX_RESTORE

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 801d4e2:	4b96      	ldr	r3, [pc, #600]	; (801d73c <_tx_thread_terminate+0x2f0>)
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	4313      	orrs	r3, r2
 801d4e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d4ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d118      	bne.n	801d526 <_tx_thread_terminate+0xda>
 801d4f4:	4b92      	ldr	r3, [pc, #584]	; (801d740 <_tx_thread_terminate+0x2f4>)
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	687a      	ldr	r2, [r7, #4]
 801d4fa:	429a      	cmp	r2, r3
 801d4fc:	d113      	bne.n	801d526 <_tx_thread_terminate+0xda>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801d4fe:	f3ef 8314 	mrs	r3, CONTROL
 801d502:	667b      	str	r3, [r7, #100]	; 0x64
    return(control_value);
 801d504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d50a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d50e:	f023 0304 	bic.w	r3, r3, #4
 801d512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d51a:	66bb      	str	r3, [r7, #104]	; 0x68
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801d51c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d51e:	f383 8814 	msr	CONTROL, r3
}
 801d522:	bf00      	nop
 801d524:	e032      	b.n	801d58c <_tx_thread_terminate+0x140>
 801d526:	4b87      	ldr	r3, [pc, #540]	; (801d744 <_tx_thread_terminate+0x2f8>)
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d52e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d532:	f003 0301 	and.w	r3, r3, #1
 801d536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d53a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d53e:	2b01      	cmp	r3, #1
 801d540:	d124      	bne.n	801d58c <_tx_thread_terminate+0x140>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801d542:	f3ef 8314 	mrs	r3, CONTROL
 801d546:	663b      	str	r3, [r7, #96]	; 0x60
    return(control_value);
 801d548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d54a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d54e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d552:	f003 0304 	and.w	r3, r3, #4
 801d556:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d55a:	eeb0 0a40 	vmov.f32	s0, s0
 801d55e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d562:	2b00      	cmp	r3, #0
 801d564:	d112      	bne.n	801d58c <_tx_thread_terminate+0x140>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801d566:	f3ef 8314 	mrs	r3, CONTROL
 801d56a:	65bb      	str	r3, [r7, #88]	; 0x58
    return(control_value);
 801d56c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d56e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d576:	f023 0304 	bic.w	r3, r3, #4
 801d57a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d57e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d582:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801d584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d586:	f383 8814 	msr	CONTROL, r3
}
 801d58a:	bf00      	nop
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801d58c:	6878      	ldr	r0, [r7, #4]
 801d58e:	f7ff fe45 	bl	801d21c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d592:	f3ef 8310 	mrs	r3, PRIMASK
 801d596:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 801d598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 801d59a:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 801d59c:	b672      	cpsid	i
    return(int_posture);
 801d59e:	6d3b      	ldr	r3, [r7, #80]	; 0x50

            /* Disable interrupts.  */
            TX_DISABLE
 801d5a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d5a4:	e094      	b.n	801d6d0 <_tx_thread_terminate+0x284>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 801d5a6:	687b      	ldr	r3, [r7, #4]
 801d5a8:	2202      	movs	r2, #2
 801d5aa:	631a      	str	r2, [r3, #48]	; 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	2201      	movs	r2, #1
 801d5b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d5b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801d5c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801d5c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d5c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5cc:	f383 8810 	msr	PRIMASK, r3
}
 801d5d0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 801d5d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d005      	beq.n	801d5e6 <_tx_thread_terminate+0x19a>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 801d5da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d5de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801d5e2:	6878      	ldr	r0, [r7, #4]
 801d5e4:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d5e6:	f3ef 8310 	mrs	r3, PRIMASK
 801d5ea:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801d5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801d5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801d5f0:	b672      	cpsid	i
    return(int_posture);
 801d5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 801d5f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	2200      	movs	r2, #0
 801d5fc:	639a      	str	r2, [r3, #56]	; 0x38
 801d5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d602:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d606:	f383 8810 	msr	PRIMASK, r3
}
 801d60a:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d60c:	f3ef 8305 	mrs	r3, IPSR
 801d610:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 801d612:	6cba      	ldr	r2, [r7, #72]	; 0x48
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 801d614:	4b49      	ldr	r3, [pc, #292]	; (801d73c <_tx_thread_terminate+0x2f0>)
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	4313      	orrs	r3, r2
 801d61a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d61e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d622:	2b00      	cmp	r3, #0
 801d624:	d118      	bne.n	801d658 <_tx_thread_terminate+0x20c>
 801d626:	4b46      	ldr	r3, [pc, #280]	; (801d740 <_tx_thread_terminate+0x2f4>)
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	687a      	ldr	r2, [r7, #4]
 801d62c:	429a      	cmp	r2, r3
 801d62e:	d113      	bne.n	801d658 <_tx_thread_terminate+0x20c>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801d630:	f3ef 8314 	mrs	r3, CONTROL
 801d634:	637b      	str	r3, [r7, #52]	; 0x34
    return(control_value);
 801d636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d63c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d640:	f023 0304 	bic.w	r3, r3, #4
 801d644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d64c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801d64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d650:	f383 8814 	msr	CONTROL, r3
}
 801d654:	bf00      	nop
 801d656:	e032      	b.n	801d6be <_tx_thread_terminate+0x272>
 801d658:	4b3a      	ldr	r3, [pc, #232]	; (801d744 <_tx_thread_terminate+0x2f8>)
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801d660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d664:	f003 0301 	and.w	r3, r3, #1
 801d668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801d66c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d670:	2b01      	cmp	r3, #1
 801d672:	d124      	bne.n	801d6be <_tx_thread_terminate+0x272>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801d674:	f3ef 8314 	mrs	r3, CONTROL
 801d678:	633b      	str	r3, [r7, #48]	; 0x30
    return(control_value);
 801d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d67c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d684:	f003 0304 	and.w	r3, r3, #4
 801d688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d68c:	eeb0 0a40 	vmov.f32	s0, s0
 801d690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d694:	2b00      	cmp	r3, #0
 801d696:	d112      	bne.n	801d6be <_tx_thread_terminate+0x272>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801d698:	f3ef 8314 	mrs	r3, CONTROL
 801d69c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(control_value);
 801d69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d6a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d6a8:	f023 0304 	bic.w	r3, r3, #4
 801d6ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d6b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6b8:	f383 8814 	msr	CONTROL, r3
}
 801d6bc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d6be:	f3ef 8310 	mrs	r3, PRIMASK
 801d6c2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801d6c6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d6c8:	b672      	cpsid	i
    return(int_posture);
 801d6ca:	6a3b      	ldr	r3, [r7, #32]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 801d6cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d6d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d6d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d6d6:	69fb      	ldr	r3, [r7, #28]
 801d6d8:	f383 8810 	msr	PRIMASK, r3
}
 801d6dc:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 801d6de:	4b1a      	ldr	r3, [pc, #104]	; (801d748 <_tx_thread_terminate+0x2fc>)
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	d003      	beq.n	801d6ee <_tx_thread_terminate+0x2a2>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 801d6e6:	4b18      	ldr	r3, [pc, #96]	; (801d748 <_tx_thread_terminate+0x2fc>)
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	6878      	ldr	r0, [r7, #4]
 801d6ec:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d6ee:	f3ef 8310 	mrs	r3, PRIMASK
 801d6f2:	617b      	str	r3, [r7, #20]
    return(posture);
 801d6f4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801d6f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d6f8:	b672      	cpsid	i
    return(int_posture);
 801d6fa:	693b      	ldr	r3, [r7, #16]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 801d6fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 801d700:	4b0d      	ldr	r3, [pc, #52]	; (801d738 <_tx_thread_terminate+0x2ec>)
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	3b01      	subs	r3, #1
 801d706:	4a0c      	ldr	r2, [pc, #48]	; (801d738 <_tx_thread_terminate+0x2ec>)
 801d708:	6013      	str	r3, [r2, #0]
 801d70a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d70e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d710:	69bb      	ldr	r3, [r7, #24]
 801d712:	f383 8810 	msr	PRIMASK, r3
}
 801d716:	e006      	b.n	801d726 <_tx_thread_terminate+0x2da>
 801d718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d71c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	f383 8810 	msr	PRIMASK, r3
}
 801d724:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801d726:	f7ff fc3f 	bl	801cfa8 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 801d72a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
}
 801d72e:	4618      	mov	r0, r3
 801d730:	37b0      	adds	r7, #176	; 0xb0
 801d732:	46bd      	mov	sp, r7
 801d734:	bd80      	pop	{r7, pc}
 801d736:	bf00      	nop
 801d738:	200b6b58 	.word	0x200b6b58
 801d73c:	20000034 	.word	0x20000034
 801d740:	200b6ac0 	.word	0x200b6ac0
 801d744:	e000ef34 	.word	0xe000ef34
 801d748:	200b6b5c 	.word	0x200b6b5c

0801d74c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 801d74c:	b480      	push	{r7}
 801d74e:	b087      	sub	sp, #28
 801d750:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801d752:	4b21      	ldr	r3, [pc, #132]	; (801d7d8 <_tx_thread_time_slice+0x8c>)
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d758:	f3ef 8310 	mrs	r3, PRIMASK
 801d75c:	60fb      	str	r3, [r7, #12]
    return(posture);
 801d75e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801d760:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d762:	b672      	cpsid	i
    return(int_posture);
 801d764:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 801d766:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801d768:	4b1c      	ldr	r3, [pc, #112]	; (801d7dc <_tx_thread_time_slice+0x90>)
 801d76a:	2200      	movs	r2, #0
 801d76c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801d76e:	697b      	ldr	r3, [r7, #20]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d024      	beq.n	801d7be <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 801d774:	697b      	ldr	r3, [r7, #20]
 801d776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d120      	bne.n	801d7be <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801d77c:	697b      	ldr	r3, [r7, #20]
 801d77e:	69da      	ldr	r2, [r3, #28]
 801d780:	697b      	ldr	r3, [r7, #20]
 801d782:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 801d784:	697b      	ldr	r3, [r7, #20]
 801d786:	699b      	ldr	r3, [r3, #24]
 801d788:	4a15      	ldr	r2, [pc, #84]	; (801d7e0 <_tx_thread_time_slice+0x94>)
 801d78a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801d78c:	697b      	ldr	r3, [r7, #20]
 801d78e:	6a1b      	ldr	r3, [r3, #32]
 801d790:	697a      	ldr	r2, [r7, #20]
 801d792:	429a      	cmp	r2, r3
 801d794:	d013      	beq.n	801d7be <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801d796:	697b      	ldr	r3, [r7, #20]
 801d798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d79a:	697b      	ldr	r3, [r7, #20]
 801d79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d79e:	429a      	cmp	r2, r3
 801d7a0:	d10d      	bne.n	801d7be <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801d7a2:	697b      	ldr	r3, [r7, #20]
 801d7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7a6:	697a      	ldr	r2, [r7, #20]
 801d7a8:	6a12      	ldr	r2, [r2, #32]
 801d7aa:	490e      	ldr	r1, [pc, #56]	; (801d7e4 <_tx_thread_time_slice+0x98>)
 801d7ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801d7b0:	4b0d      	ldr	r3, [pc, #52]	; (801d7e8 <_tx_thread_time_slice+0x9c>)
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	4a0b      	ldr	r2, [pc, #44]	; (801d7e4 <_tx_thread_time_slice+0x98>)
 801d7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d7ba:	4a0c      	ldr	r2, [pc, #48]	; (801d7ec <_tx_thread_time_slice+0xa0>)
 801d7bc:	6013      	str	r3, [r2, #0]
 801d7be:	693b      	ldr	r3, [r7, #16]
 801d7c0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	f383 8810 	msr	PRIMASK, r3
}
 801d7c8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801d7ca:	bf00      	nop
 801d7cc:	371c      	adds	r7, #28
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d4:	4770      	bx	lr
 801d7d6:	bf00      	nop
 801d7d8:	200b6ac0 	.word	0x200b6ac0
 801d7dc:	200b6b68 	.word	0x200b6b68
 801d7e0:	200b70c4 	.word	0x200b70c4
 801d7e4:	200b6ad8 	.word	0x200b6ad8
 801d7e8:	200b6ad4 	.word	0x200b6ad4
 801d7ec:	200b6ac4 	.word	0x200b6ac4

0801d7f0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801d7f0:	b580      	push	{r7, lr}
 801d7f2:	b08a      	sub	sp, #40	; 0x28
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d7fc:	f3ef 8310 	mrs	r3, PRIMASK
 801d800:	617b      	str	r3, [r7, #20]
    return(posture);
 801d802:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801d804:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d806:	b672      	cpsid	i
    return(int_posture);
 801d808:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801d80a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 801d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d810:	2b04      	cmp	r3, #4
 801d812:	d10e      	bne.n	801d832 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 801d814:	4b13      	ldr	r3, [pc, #76]	; (801d864 <_tx_thread_timeout+0x74>)
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	3301      	adds	r3, #1
 801d81a:	4a12      	ldr	r2, [pc, #72]	; (801d864 <_tx_thread_timeout+0x74>)
 801d81c:	6013      	str	r3, [r2, #0]
 801d81e:	6a3b      	ldr	r3, [r7, #32]
 801d820:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	f383 8810 	msr	PRIMASK, r3
}
 801d828:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801d82a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d82c:	f7ff fbf6 	bl	801d01c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801d830:	e013      	b.n	801d85a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801d832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d836:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801d838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d83a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801d83e:	61bb      	str	r3, [r7, #24]
 801d840:	6a3b      	ldr	r3, [r7, #32]
 801d842:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d844:	68bb      	ldr	r3, [r7, #8]
 801d846:	f383 8810 	msr	PRIMASK, r3
}
 801d84a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 801d84c:	69fb      	ldr	r3, [r7, #28]
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d003      	beq.n	801d85a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801d852:	69fb      	ldr	r3, [r7, #28]
 801d854:	69b9      	ldr	r1, [r7, #24]
 801d856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d858:	4798      	blx	r3
}
 801d85a:	bf00      	nop
 801d85c:	3728      	adds	r7, #40	; 0x28
 801d85e:	46bd      	mov	sp, r7
 801d860:	bd80      	pop	{r7, pc}
 801d862:	bf00      	nop
 801d864:	200b6b58 	.word	0x200b6b58

0801d868 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 801d868:	b580      	push	{r7, lr}
 801d86a:	b084      	sub	sp, #16
 801d86c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d86e:	f3ef 8310 	mrs	r3, PRIMASK
 801d872:	607b      	str	r3, [r7, #4]
    return(posture);
 801d874:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801d876:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d878:	b672      	cpsid	i
    return(int_posture);
 801d87a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 801d87c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801d87e:	4b09      	ldr	r3, [pc, #36]	; (801d8a4 <_tx_timer_expiration_process+0x3c>)
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	3301      	adds	r3, #1
 801d884:	4a07      	ldr	r2, [pc, #28]	; (801d8a4 <_tx_timer_expiration_process+0x3c>)
 801d886:	6013      	str	r3, [r2, #0]
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d88c:	68bb      	ldr	r3, [r7, #8]
 801d88e:	f383 8810 	msr	PRIMASK, r3
}
 801d892:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801d894:	4804      	ldr	r0, [pc, #16]	; (801d8a8 <_tx_timer_expiration_process+0x40>)
 801d896:	f7ff fbc1 	bl	801d01c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801d89a:	bf00      	nop
 801d89c:	3710      	adds	r7, #16
 801d89e:	46bd      	mov	sp, r7
 801d8a0:	bd80      	pop	{r7, pc}
 801d8a2:	bf00      	nop
 801d8a4:	200b6b58 	.word	0x200b6b58
 801d8a8:	200b6c08 	.word	0x200b6c08

0801d8ac <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 801d8ac:	b590      	push	{r4, r7, lr}
 801d8ae:	b089      	sub	sp, #36	; 0x24
 801d8b0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801d8b2:	4b28      	ldr	r3, [pc, #160]	; (801d954 <_tx_timer_initialize+0xa8>)
 801d8b4:	2200      	movs	r2, #0
 801d8b6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801d8b8:	4b27      	ldr	r3, [pc, #156]	; (801d958 <_tx_timer_initialize+0xac>)
 801d8ba:	2200      	movs	r2, #0
 801d8bc:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801d8be:	4b27      	ldr	r3, [pc, #156]	; (801d95c <_tx_timer_initialize+0xb0>)
 801d8c0:	2200      	movs	r2, #0
 801d8c2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801d8c4:	4b26      	ldr	r3, [pc, #152]	; (801d960 <_tx_timer_initialize+0xb4>)
 801d8c6:	2200      	movs	r2, #0
 801d8c8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801d8ca:	4b26      	ldr	r3, [pc, #152]	; (801d964 <_tx_timer_initialize+0xb8>)
 801d8cc:	2200      	movs	r2, #0
 801d8ce:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801d8d0:	2280      	movs	r2, #128	; 0x80
 801d8d2:	2100      	movs	r1, #0
 801d8d4:	4824      	ldr	r0, [pc, #144]	; (801d968 <_tx_timer_initialize+0xbc>)
 801d8d6:	f002 fe4c 	bl	8020572 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801d8da:	4b24      	ldr	r3, [pc, #144]	; (801d96c <_tx_timer_initialize+0xc0>)
 801d8dc:	4a22      	ldr	r2, [pc, #136]	; (801d968 <_tx_timer_initialize+0xbc>)
 801d8de:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801d8e0:	4b23      	ldr	r3, [pc, #140]	; (801d970 <_tx_timer_initialize+0xc4>)
 801d8e2:	4a21      	ldr	r2, [pc, #132]	; (801d968 <_tx_timer_initialize+0xbc>)
 801d8e4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801d8e6:	4b23      	ldr	r3, [pc, #140]	; (801d974 <_tx_timer_initialize+0xc8>)
 801d8e8:	4a23      	ldr	r2, [pc, #140]	; (801d978 <_tx_timer_initialize+0xcc>)
 801d8ea:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801d8ec:	4b21      	ldr	r3, [pc, #132]	; (801d974 <_tx_timer_initialize+0xc8>)
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	3304      	adds	r3, #4
 801d8f2:	4a20      	ldr	r2, [pc, #128]	; (801d974 <_tx_timer_initialize+0xc8>)
 801d8f4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801d8f6:	4b21      	ldr	r3, [pc, #132]	; (801d97c <_tx_timer_initialize+0xd0>)
 801d8f8:	4a21      	ldr	r2, [pc, #132]	; (801d980 <_tx_timer_initialize+0xd4>)
 801d8fa:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801d8fc:	4b21      	ldr	r3, [pc, #132]	; (801d984 <_tx_timer_initialize+0xd8>)
 801d8fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d902:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801d904:	4b20      	ldr	r3, [pc, #128]	; (801d988 <_tx_timer_initialize+0xdc>)
 801d906:	2200      	movs	r2, #0
 801d908:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801d90a:	4b1c      	ldr	r3, [pc, #112]	; (801d97c <_tx_timer_initialize+0xd0>)
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	4a1d      	ldr	r2, [pc, #116]	; (801d984 <_tx_timer_initialize+0xd8>)
 801d910:	6812      	ldr	r2, [r2, #0]
 801d912:	491d      	ldr	r1, [pc, #116]	; (801d988 <_tx_timer_initialize+0xdc>)
 801d914:	6809      	ldr	r1, [r1, #0]
 801d916:	481c      	ldr	r0, [pc, #112]	; (801d988 <_tx_timer_initialize+0xdc>)
 801d918:	6800      	ldr	r0, [r0, #0]
 801d91a:	2400      	movs	r4, #0
 801d91c:	9405      	str	r4, [sp, #20]
 801d91e:	2400      	movs	r4, #0
 801d920:	9404      	str	r4, [sp, #16]
 801d922:	9003      	str	r0, [sp, #12]
 801d924:	9102      	str	r1, [sp, #8]
 801d926:	9201      	str	r2, [sp, #4]
 801d928:	9300      	str	r3, [sp, #0]
 801d92a:	4b18      	ldr	r3, [pc, #96]	; (801d98c <_tx_timer_initialize+0xe0>)
 801d92c:	4a18      	ldr	r2, [pc, #96]	; (801d990 <_tx_timer_initialize+0xe4>)
 801d92e:	4919      	ldr	r1, [pc, #100]	; (801d994 <_tx_timer_initialize+0xe8>)
 801d930:	4819      	ldr	r0, [pc, #100]	; (801d998 <_tx_timer_initialize+0xec>)
 801d932:	f7ff f887 	bl	801ca44 <_tx_thread_create>
 801d936:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d1e5      	bne.n	801d90a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801d93e:	4b17      	ldr	r3, [pc, #92]	; (801d99c <_tx_timer_initialize+0xf0>)
 801d940:	2200      	movs	r2, #0
 801d942:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801d944:	4b16      	ldr	r3, [pc, #88]	; (801d9a0 <_tx_timer_initialize+0xf4>)
 801d946:	2200      	movs	r2, #0
 801d948:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801d94a:	bf00      	nop
 801d94c:	370c      	adds	r7, #12
 801d94e:	46bd      	mov	sp, r7
 801d950:	bd90      	pop	{r4, r7, pc}
 801d952:	bf00      	nop
 801d954:	200b6b64 	.word	0x200b6b64
 801d958:	200b70c4 	.word	0x200b70c4
 801d95c:	200b6b68 	.word	0x200b6b68
 801d960:	200b6bf8 	.word	0x200b6bf8
 801d964:	200b6c04 	.word	0x200b6c04
 801d968:	200b6b6c 	.word	0x200b6b6c
 801d96c:	200b6bec 	.word	0x200b6bec
 801d970:	200b6bf4 	.word	0x200b6bf4
 801d974:	200b6bf0 	.word	0x200b6bf0
 801d978:	200b6be8 	.word	0x200b6be8
 801d97c:	200b6cb8 	.word	0x200b6cb8
 801d980:	200b6cc4 	.word	0x200b6cc4
 801d984:	200b6cbc 	.word	0x200b6cbc
 801d988:	200b6cc0 	.word	0x200b6cc0
 801d98c:	4154494d 	.word	0x4154494d
 801d990:	0801dad9 	.word	0x0801dad9
 801d994:	080236f0 	.word	0x080236f0
 801d998:	200b6c08 	.word	0x200b6c08
 801d99c:	200b6bfc 	.word	0x200b6bfc
 801d9a0:	200b6c00 	.word	0x200b6c00

0801d9a4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 801d9a4:	b480      	push	{r7}
 801d9a6:	b089      	sub	sp, #36	; 0x24
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801d9b2:	697b      	ldr	r3, [r7, #20]
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d04a      	beq.n	801da4e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801d9b8:	697b      	ldr	r3, [r7, #20]
 801d9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9be:	d046      	beq.n	801da4e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	699b      	ldr	r3, [r3, #24]
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d142      	bne.n	801da4e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 801d9c8:	697b      	ldr	r3, [r7, #20]
 801d9ca:	2b20      	cmp	r3, #32
 801d9cc:	d902      	bls.n	801d9d4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801d9ce:	231f      	movs	r3, #31
 801d9d0:	61bb      	str	r3, [r7, #24]
 801d9d2:	e002      	b.n	801d9da <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 801d9d4:	697b      	ldr	r3, [r7, #20]
 801d9d6:	3b01      	subs	r3, #1
 801d9d8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801d9da:	4b20      	ldr	r3, [pc, #128]	; (801da5c <_tx_timer_system_activate+0xb8>)
 801d9dc:	681a      	ldr	r2, [r3, #0]
 801d9de:	69bb      	ldr	r3, [r7, #24]
 801d9e0:	009b      	lsls	r3, r3, #2
 801d9e2:	4413      	add	r3, r2
 801d9e4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801d9e6:	4b1e      	ldr	r3, [pc, #120]	; (801da60 <_tx_timer_system_activate+0xbc>)
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	69fa      	ldr	r2, [r7, #28]
 801d9ec:	429a      	cmp	r2, r3
 801d9ee:	d30b      	bcc.n	801da08 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801d9f0:	4b1b      	ldr	r3, [pc, #108]	; (801da60 <_tx_timer_system_activate+0xbc>)
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	69fa      	ldr	r2, [r7, #28]
 801d9f6:	1ad3      	subs	r3, r2, r3
 801d9f8:	109b      	asrs	r3, r3, #2
 801d9fa:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801d9fc:	4b19      	ldr	r3, [pc, #100]	; (801da64 <_tx_timer_system_activate+0xc0>)
 801d9fe:	681a      	ldr	r2, [r3, #0]
 801da00:	693b      	ldr	r3, [r7, #16]
 801da02:	009b      	lsls	r3, r3, #2
 801da04:	4413      	add	r3, r2
 801da06:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 801da08:	69fb      	ldr	r3, [r7, #28]
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d109      	bne.n	801da24 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	687a      	ldr	r2, [r7, #4]
 801da14:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	687a      	ldr	r2, [r7, #4]
 801da1a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 801da1c:	69fb      	ldr	r3, [r7, #28]
 801da1e:	687a      	ldr	r2, [r7, #4]
 801da20:	601a      	str	r2, [r3, #0]
 801da22:	e011      	b.n	801da48 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 801da24:	69fb      	ldr	r3, [r7, #28]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	695b      	ldr	r3, [r3, #20]
 801da2e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 801da30:	68bb      	ldr	r3, [r7, #8]
 801da32:	687a      	ldr	r2, [r7, #4]
 801da34:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801da36:	68fb      	ldr	r3, [r7, #12]
 801da38:	687a      	ldr	r2, [r7, #4]
 801da3a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	68fa      	ldr	r2, [r7, #12]
 801da40:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	68ba      	ldr	r2, [r7, #8]
 801da46:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	69fa      	ldr	r2, [r7, #28]
 801da4c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801da4e:	bf00      	nop
 801da50:	3724      	adds	r7, #36	; 0x24
 801da52:	46bd      	mov	sp, r7
 801da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da58:	4770      	bx	lr
 801da5a:	bf00      	nop
 801da5c:	200b6bf4 	.word	0x200b6bf4
 801da60:	200b6bf0 	.word	0x200b6bf0
 801da64:	200b6bec 	.word	0x200b6bec

0801da68 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 801da68:	b480      	push	{r7}
 801da6a:	b087      	sub	sp, #28
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	699b      	ldr	r3, [r3, #24]
 801da74:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801da76:	697b      	ldr	r3, [r7, #20]
 801da78:	2b00      	cmp	r3, #0
 801da7a:	d026      	beq.n	801daca <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	691b      	ldr	r3, [r3, #16]
 801da80:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801da82:	687a      	ldr	r2, [r7, #4]
 801da84:	693b      	ldr	r3, [r7, #16]
 801da86:	429a      	cmp	r2, r3
 801da88:	d108      	bne.n	801da9c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801da8a:	697b      	ldr	r3, [r7, #20]
 801da8c:	681b      	ldr	r3, [r3, #0]
 801da8e:	687a      	ldr	r2, [r7, #4]
 801da90:	429a      	cmp	r2, r3
 801da92:	d117      	bne.n	801dac4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801da94:	697b      	ldr	r3, [r7, #20]
 801da96:	2200      	movs	r2, #0
 801da98:	601a      	str	r2, [r3, #0]
 801da9a:	e013      	b.n	801dac4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	695b      	ldr	r3, [r3, #20]
 801daa0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801daa2:	693b      	ldr	r3, [r7, #16]
 801daa4:	68fa      	ldr	r2, [r7, #12]
 801daa6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	693a      	ldr	r2, [r7, #16]
 801daac:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801daae:	697b      	ldr	r3, [r7, #20]
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	687a      	ldr	r2, [r7, #4]
 801dab4:	429a      	cmp	r2, r3
 801dab6:	d105      	bne.n	801dac4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 801dab8:	693b      	ldr	r3, [r7, #16]
 801daba:	697a      	ldr	r2, [r7, #20]
 801dabc:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801dabe:	697b      	ldr	r3, [r7, #20]
 801dac0:	693a      	ldr	r2, [r7, #16]
 801dac2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	2200      	movs	r2, #0
 801dac8:	619a      	str	r2, [r3, #24]
    }
}
 801daca:	bf00      	nop
 801dacc:	371c      	adds	r7, #28
 801dace:	46bd      	mov	sp, r7
 801dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dad4:	4770      	bx	lr
	...

0801dad8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 801dad8:	b580      	push	{r7, lr}
 801dada:	b098      	sub	sp, #96	; 0x60
 801dadc:	af00      	add	r7, sp, #0
 801dade:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 801dae0:	2300      	movs	r3, #0
 801dae2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	4a73      	ldr	r2, [pc, #460]	; (801dcb4 <_tx_timer_thread_entry+0x1dc>)
 801dae8:	4293      	cmp	r3, r2
 801daea:	f040 80de 	bne.w	801dcaa <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801daee:	f3ef 8310 	mrs	r3, PRIMASK
 801daf2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801daf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801daf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801daf8:	b672      	cpsid	i
    return(int_posture);
 801dafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801dafc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801dafe:	4b6e      	ldr	r3, [pc, #440]	; (801dcb8 <_tx_timer_thread_entry+0x1e0>)
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	681b      	ldr	r3, [r3, #0]
 801db04:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d003      	beq.n	801db14 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	f107 020c 	add.w	r2, r7, #12
 801db12:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801db14:	4b68      	ldr	r3, [pc, #416]	; (801dcb8 <_tx_timer_thread_entry+0x1e0>)
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	2200      	movs	r2, #0
 801db1a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 801db1c:	4b66      	ldr	r3, [pc, #408]	; (801dcb8 <_tx_timer_thread_entry+0x1e0>)
 801db1e:	681b      	ldr	r3, [r3, #0]
 801db20:	3304      	adds	r3, #4
 801db22:	4a65      	ldr	r2, [pc, #404]	; (801dcb8 <_tx_timer_thread_entry+0x1e0>)
 801db24:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801db26:	4b64      	ldr	r3, [pc, #400]	; (801dcb8 <_tx_timer_thread_entry+0x1e0>)
 801db28:	681a      	ldr	r2, [r3, #0]
 801db2a:	4b64      	ldr	r3, [pc, #400]	; (801dcbc <_tx_timer_thread_entry+0x1e4>)
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	429a      	cmp	r2, r3
 801db30:	d103      	bne.n	801db3a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 801db32:	4b63      	ldr	r3, [pc, #396]	; (801dcc0 <_tx_timer_thread_entry+0x1e8>)
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	4a60      	ldr	r2, [pc, #384]	; (801dcb8 <_tx_timer_thread_entry+0x1e0>)
 801db38:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801db3a:	4b62      	ldr	r3, [pc, #392]	; (801dcc4 <_tx_timer_thread_entry+0x1ec>)
 801db3c:	2200      	movs	r2, #0
 801db3e:	601a      	str	r2, [r3, #0]
 801db40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801db42:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db46:	f383 8810 	msr	PRIMASK, r3
}
 801db4a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801db4c:	f3ef 8310 	mrs	r3, PRIMASK
 801db50:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801db52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801db54:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801db56:	b672      	cpsid	i
    return(int_posture);
 801db58:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801db5a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 801db5c:	e07f      	b.n	801dc5e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801db62:	68fb      	ldr	r3, [r7, #12]
 801db64:	691b      	ldr	r3, [r3, #16]
 801db66:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 801db68:	2300      	movs	r3, #0
 801db6a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 801db6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801db6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db70:	429a      	cmp	r2, r3
 801db72:	d102      	bne.n	801db7a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801db74:	2300      	movs	r3, #0
 801db76:	60fb      	str	r3, [r7, #12]
 801db78:	e00e      	b.n	801db98 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801db7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db7c:	695b      	ldr	r3, [r3, #20]
 801db7e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801db80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801db84:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801db86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801db8a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801db8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db8e:	f107 020c 	add.w	r2, r7, #12
 801db92:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801db94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db96:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801db98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	2b20      	cmp	r3, #32
 801db9e:	d911      	bls.n	801dbc4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801dba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 801dba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbaa:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 801dbac:	2300      	movs	r3, #0
 801dbae:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801dbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbb2:	f107 0208 	add.w	r2, r7, #8
 801dbb6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 801dbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dbbc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801dbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbc0:	60bb      	str	r3, [r7, #8]
 801dbc2:	e01a      	b.n	801dbfa <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 801dbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbc6:	689b      	ldr	r3, [r3, #8]
 801dbc8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801dbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbcc:	68db      	ldr	r3, [r3, #12]
 801dbce:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801dbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbd2:	685a      	ldr	r2, [r3, #4]
 801dbd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbd6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 801dbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d009      	beq.n	801dbf4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801dbe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbe2:	f107 0208 	add.w	r2, r7, #8
 801dbe6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 801dbe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dbec:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801dbee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbf0:	60bb      	str	r3, [r7, #8]
 801dbf2:	e002      	b.n	801dbfa <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 801dbf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbf6:	2200      	movs	r2, #0
 801dbf8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801dbfa:	4a33      	ldr	r2, [pc, #204]	; (801dcc8 <_tx_timer_thread_entry+0x1f0>)
 801dbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbfe:	6013      	str	r3, [r2, #0]
 801dc00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc02:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc06:	f383 8810 	msr	PRIMASK, r3
}
 801dc0a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 801dc0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d002      	beq.n	801dc18 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 801dc12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dc14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801dc16:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801dc18:	f3ef 8310 	mrs	r3, PRIMASK
 801dc1c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801dc20:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801dc22:	b672      	cpsid	i
    return(int_posture);
 801dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 801dc26:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 801dc28:	4b27      	ldr	r3, [pc, #156]	; (801dcc8 <_tx_timer_thread_entry+0x1f0>)
 801dc2a:	2200      	movs	r2, #0
 801dc2c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801dc2e:	68bb      	ldr	r3, [r7, #8]
 801dc30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dc32:	429a      	cmp	r2, r3
 801dc34:	d105      	bne.n	801dc42 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801dc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dc38:	2200      	movs	r2, #0
 801dc3a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 801dc3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801dc3e:	f7ff feb1 	bl	801d9a4 <_tx_timer_system_activate>
 801dc42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dc46:	69bb      	ldr	r3, [r7, #24]
 801dc48:	f383 8810 	msr	PRIMASK, r3
}
 801dc4c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801dc4e:	f3ef 8310 	mrs	r3, PRIMASK
 801dc52:	623b      	str	r3, [r7, #32]
    return(posture);
 801dc54:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801dc56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801dc58:	b672      	cpsid	i
    return(int_posture);
 801dc5a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 801dc5c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	f47f af7c 	bne.w	801db5e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801dc66:	4b17      	ldr	r3, [pc, #92]	; (801dcc4 <_tx_timer_thread_entry+0x1ec>)
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d116      	bne.n	801dc9c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 801dc6e:	4b17      	ldr	r3, [pc, #92]	; (801dccc <_tx_timer_thread_entry+0x1f4>)
 801dc70:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801dc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc74:	2203      	movs	r2, #3
 801dc76:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801dc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc7a:	2201      	movs	r2, #1
 801dc7c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801dc7e:	4b14      	ldr	r3, [pc, #80]	; (801dcd0 <_tx_timer_thread_entry+0x1f8>)
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	3301      	adds	r3, #1
 801dc84:	4a12      	ldr	r2, [pc, #72]	; (801dcd0 <_tx_timer_thread_entry+0x1f8>)
 801dc86:	6013      	str	r3, [r2, #0]
 801dc88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dc8c:	697b      	ldr	r3, [r7, #20]
 801dc8e:	f383 8810 	msr	PRIMASK, r3
}
 801dc92:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801dc94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801dc96:	f7ff fac1 	bl	801d21c <_tx_thread_system_suspend>
 801dc9a:	e728      	b.n	801daee <_tx_timer_thread_entry+0x16>
 801dc9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dca0:	693b      	ldr	r3, [r7, #16]
 801dca2:	f383 8810 	msr	PRIMASK, r3
}
 801dca6:	bf00      	nop
            TX_DISABLE
 801dca8:	e721      	b.n	801daee <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801dcaa:	bf00      	nop
 801dcac:	3760      	adds	r7, #96	; 0x60
 801dcae:	46bd      	mov	sp, r7
 801dcb0:	bd80      	pop	{r7, pc}
 801dcb2:	bf00      	nop
 801dcb4:	4154494d 	.word	0x4154494d
 801dcb8:	200b6bf4 	.word	0x200b6bf4
 801dcbc:	200b6bf0 	.word	0x200b6bf0
 801dcc0:	200b6bec 	.word	0x200b6bec
 801dcc4:	200b6bf8 	.word	0x200b6bf8
 801dcc8:	200b6c04 	.word	0x200b6c04
 801dccc:	200b6c08 	.word	0x200b6c08
 801dcd0:	200b6b58 	.word	0x200b6b58

0801dcd4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801dcd4:	b580      	push	{r7, lr}
 801dcd6:	b08a      	sub	sp, #40	; 0x28
 801dcd8:	af00      	add	r7, sp, #0
 801dcda:	60f8      	str	r0, [r7, #12]
 801dcdc:	60b9      	str	r1, [r7, #8]
 801dcde:	607a      	str	r2, [r7, #4]
 801dce0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801dce2:	2300      	movs	r3, #0
 801dce4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d102      	bne.n	801dcf2 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801dcec:	2302      	movs	r3, #2
 801dcee:	627b      	str	r3, [r7, #36]	; 0x24
 801dcf0:	e029      	b.n	801dd46 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801dcf2:	68fb      	ldr	r3, [r7, #12]
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	4a2d      	ldr	r2, [pc, #180]	; (801ddac <_txe_byte_allocate+0xd8>)
 801dcf8:	4293      	cmp	r3, r2
 801dcfa:	d002      	beq.n	801dd02 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801dcfc:	2302      	movs	r3, #2
 801dcfe:	627b      	str	r3, [r7, #36]	; 0x24
 801dd00:	e021      	b.n	801dd46 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801dd02:	68bb      	ldr	r3, [r7, #8]
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	d102      	bne.n	801dd0e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801dd08:	2303      	movs	r3, #3
 801dd0a:	627b      	str	r3, [r7, #36]	; 0x24
 801dd0c:	e01b      	b.n	801dd46 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	d102      	bne.n	801dd1a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801dd14:	2305      	movs	r3, #5
 801dd16:	627b      	str	r3, [r7, #36]	; 0x24
 801dd18:	e015      	b.n	801dd46 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	69db      	ldr	r3, [r3, #28]
 801dd1e:	687a      	ldr	r2, [r7, #4]
 801dd20:	429a      	cmp	r2, r3
 801dd22:	d902      	bls.n	801dd2a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801dd24:	2305      	movs	r3, #5
 801dd26:	627b      	str	r3, [r7, #36]	; 0x24
 801dd28:	e00d      	b.n	801dd46 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801dd2a:	683b      	ldr	r3, [r7, #0]
 801dd2c:	2b00      	cmp	r3, #0
 801dd2e:	d00a      	beq.n	801dd46 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801dd30:	f3ef 8305 	mrs	r3, IPSR
 801dd34:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801dd36:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801dd38:	4b1d      	ldr	r3, [pc, #116]	; (801ddb0 <_txe_byte_allocate+0xdc>)
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	4313      	orrs	r3, r2
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d001      	beq.n	801dd46 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801dd42:	2304      	movs	r3, #4
 801dd44:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d108      	bne.n	801dd5e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801dd4c:	4b19      	ldr	r3, [pc, #100]	; (801ddb4 <_txe_byte_allocate+0xe0>)
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801dd52:	6a3b      	ldr	r3, [r7, #32]
 801dd54:	4a18      	ldr	r2, [pc, #96]	; (801ddb8 <_txe_byte_allocate+0xe4>)
 801dd56:	4293      	cmp	r3, r2
 801dd58:	d101      	bne.n	801dd5e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801dd5a:	2313      	movs	r3, #19
 801dd5c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d114      	bne.n	801dd8e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801dd64:	f3ef 8305 	mrs	r3, IPSR
 801dd68:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801dd6a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801dd6c:	4b10      	ldr	r3, [pc, #64]	; (801ddb0 <_txe_byte_allocate+0xdc>)
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	4313      	orrs	r3, r2
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d00b      	beq.n	801dd8e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801dd76:	f3ef 8305 	mrs	r3, IPSR
 801dd7a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801dd7c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801dd7e:	4b0c      	ldr	r3, [pc, #48]	; (801ddb0 <_txe_byte_allocate+0xdc>)
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	4313      	orrs	r3, r2
 801dd84:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801dd88:	d201      	bcs.n	801dd8e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801dd8a:	2313      	movs	r3, #19
 801dd8c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d106      	bne.n	801dda2 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 801dd94:	683b      	ldr	r3, [r7, #0]
 801dd96:	687a      	ldr	r2, [r7, #4]
 801dd98:	68b9      	ldr	r1, [r7, #8]
 801dd9a:	68f8      	ldr	r0, [r7, #12]
 801dd9c:	f7fd fd82 	bl	801b8a4 <_tx_byte_allocate>
 801dda0:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 801dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dda4:	4618      	mov	r0, r3
 801dda6:	3728      	adds	r7, #40	; 0x28
 801dda8:	46bd      	mov	sp, r7
 801ddaa:	bd80      	pop	{r7, pc}
 801ddac:	42595445 	.word	0x42595445
 801ddb0:	20000034 	.word	0x20000034
 801ddb4:	200b6ac0 	.word	0x200b6ac0
 801ddb8:	200b6c08 	.word	0x200b6c08

0801ddbc <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 801ddbc:	b580      	push	{r7, lr}
 801ddbe:	b092      	sub	sp, #72	; 0x48
 801ddc0:	af00      	add	r7, sp, #0
 801ddc2:	60f8      	str	r0, [r7, #12]
 801ddc4:	60b9      	str	r1, [r7, #8]
 801ddc6:	607a      	str	r2, [r7, #4]
 801ddc8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801ddca:	2300      	movs	r3, #0
 801ddcc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801ddce:	68fb      	ldr	r3, [r7, #12]
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	d102      	bne.n	801ddda <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801ddd4:	2302      	movs	r3, #2
 801ddd6:	647b      	str	r3, [r7, #68]	; 0x44
 801ddd8:	e075      	b.n	801dec6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 801ddda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dddc:	2b34      	cmp	r3, #52	; 0x34
 801ddde:	d002      	beq.n	801dde6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801dde0:	2302      	movs	r3, #2
 801dde2:	647b      	str	r3, [r7, #68]	; 0x44
 801dde4:	e06f      	b.n	801dec6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801dde6:	f3ef 8310 	mrs	r3, PRIMASK
 801ddea:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801ddec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801ddee:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801ddf0:	b672      	cpsid	i
    return(int_posture);
 801ddf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801ddf4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801ddf6:	4b3b      	ldr	r3, [pc, #236]	; (801dee4 <_txe_byte_pool_create+0x128>)
 801ddf8:	681b      	ldr	r3, [r3, #0]
 801ddfa:	3301      	adds	r3, #1
 801ddfc:	4a39      	ldr	r2, [pc, #228]	; (801dee4 <_txe_byte_pool_create+0x128>)
 801ddfe:	6013      	str	r3, [r2, #0]
 801de00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de02:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de06:	f383 8810 	msr	PRIMASK, r3
}
 801de0a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 801de0c:	4b36      	ldr	r3, [pc, #216]	; (801dee8 <_txe_byte_pool_create+0x12c>)
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801de12:	2300      	movs	r3, #0
 801de14:	643b      	str	r3, [r7, #64]	; 0x40
 801de16:	e009      	b.n	801de2c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 801de18:	68fa      	ldr	r2, [r7, #12]
 801de1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de1c:	429a      	cmp	r2, r3
 801de1e:	d00b      	beq.n	801de38 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 801de20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de24:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801de26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de28:	3301      	adds	r3, #1
 801de2a:	643b      	str	r3, [r7, #64]	; 0x40
 801de2c:	4b2f      	ldr	r3, [pc, #188]	; (801deec <_txe_byte_pool_create+0x130>)
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801de32:	429a      	cmp	r2, r3
 801de34:	d3f0      	bcc.n	801de18 <_txe_byte_pool_create+0x5c>
 801de36:	e000      	b.n	801de3a <_txe_byte_pool_create+0x7e>
                break;
 801de38:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801de3a:	f3ef 8310 	mrs	r3, PRIMASK
 801de3e:	623b      	str	r3, [r7, #32]
    return(posture);
 801de40:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801de42:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801de44:	b672      	cpsid	i
    return(int_posture);
 801de46:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801de48:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801de4a:	4b26      	ldr	r3, [pc, #152]	; (801dee4 <_txe_byte_pool_create+0x128>)
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	3b01      	subs	r3, #1
 801de50:	4a24      	ldr	r2, [pc, #144]	; (801dee4 <_txe_byte_pool_create+0x128>)
 801de52:	6013      	str	r3, [r2, #0]
 801de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de56:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de5a:	f383 8810 	msr	PRIMASK, r3
}
 801de5e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801de60:	f7ff f8a2 	bl	801cfa8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801de64:	68fa      	ldr	r2, [r7, #12]
 801de66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de68:	429a      	cmp	r2, r3
 801de6a:	d102      	bne.n	801de72 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 801de6c:	2302      	movs	r3, #2
 801de6e:	647b      	str	r3, [r7, #68]	; 0x44
 801de70:	e029      	b.n	801dec6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	2b00      	cmp	r3, #0
 801de76:	d102      	bne.n	801de7e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 801de78:	2303      	movs	r3, #3
 801de7a:	647b      	str	r3, [r7, #68]	; 0x44
 801de7c:	e023      	b.n	801dec6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801de7e:	683b      	ldr	r3, [r7, #0]
 801de80:	2b63      	cmp	r3, #99	; 0x63
 801de82:	d802      	bhi.n	801de8a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801de84:	2305      	movs	r3, #5
 801de86:	647b      	str	r3, [r7, #68]	; 0x44
 801de88:	e01d      	b.n	801dec6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801de8a:	4b19      	ldr	r3, [pc, #100]	; (801def0 <_txe_byte_pool_create+0x134>)
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801de90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de92:	4a18      	ldr	r2, [pc, #96]	; (801def4 <_txe_byte_pool_create+0x138>)
 801de94:	4293      	cmp	r3, r2
 801de96:	d101      	bne.n	801de9c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801de98:	2313      	movs	r3, #19
 801de9a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801de9c:	f3ef 8305 	mrs	r3, IPSR
 801dea0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801dea2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801dea4:	4b14      	ldr	r3, [pc, #80]	; (801def8 <_txe_byte_pool_create+0x13c>)
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	4313      	orrs	r3, r2
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d00b      	beq.n	801dec6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801deae:	f3ef 8305 	mrs	r3, IPSR
 801deb2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801deb4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801deb6:	4b10      	ldr	r3, [pc, #64]	; (801def8 <_txe_byte_pool_create+0x13c>)
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	4313      	orrs	r3, r2
 801debc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801dec0:	d201      	bcs.n	801dec6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801dec2:	2313      	movs	r3, #19
 801dec4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801dec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d106      	bne.n	801deda <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 801decc:	683b      	ldr	r3, [r7, #0]
 801dece:	687a      	ldr	r2, [r7, #4]
 801ded0:	68b9      	ldr	r1, [r7, #8]
 801ded2:	68f8      	ldr	r0, [r7, #12]
 801ded4:	f7fd fe28 	bl	801bb28 <_tx_byte_pool_create>
 801ded8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801deda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801dedc:	4618      	mov	r0, r3
 801dede:	3748      	adds	r7, #72	; 0x48
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	200b6b58 	.word	0x200b6b58
 801dee8:	200b6ab0 	.word	0x200b6ab0
 801deec:	200b6ab4 	.word	0x200b6ab4
 801def0:	200b6ac0 	.word	0x200b6ac0
 801def4:	200b6c08 	.word	0x200b6c08
 801def8:	20000034 	.word	0x20000034

0801defc <_txe_byte_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b086      	sub	sp, #24
 801df00:	af00      	add	r7, sp, #0
 801df02:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 801df04:	2300      	movs	r3, #0
 801df06:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d102      	bne.n	801df14 <_txe_byte_pool_delete+0x18>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801df0e:	2302      	movs	r3, #2
 801df10:	617b      	str	r3, [r7, #20]
 801df12:	e023      	b.n	801df5c <_txe_byte_pool_delete+0x60>
    }

    /* Now check the pool ID.  */
    else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	4a13      	ldr	r2, [pc, #76]	; (801df68 <_txe_byte_pool_delete+0x6c>)
 801df1a:	4293      	cmp	r3, r2
 801df1c:	d002      	beq.n	801df24 <_txe_byte_pool_delete+0x28>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801df1e:	2302      	movs	r3, #2
 801df20:	617b      	str	r3, [r7, #20]
 801df22:	e01b      	b.n	801df5c <_txe_byte_pool_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801df24:	f3ef 8305 	mrs	r3, IPSR
 801df28:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801df2a:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for interrupt or initialization.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801df2c:	4b0f      	ldr	r3, [pc, #60]	; (801df6c <_txe_byte_pool_delete+0x70>)
 801df2e:	681b      	ldr	r3, [r3, #0]
 801df30:	4313      	orrs	r3, r2
 801df32:	2b00      	cmp	r3, #0
 801df34:	d002      	beq.n	801df3c <_txe_byte_pool_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 801df36:	2313      	movs	r3, #19
 801df38:	617b      	str	r3, [r7, #20]
 801df3a:	e00f      	b.n	801df5c <_txe_byte_pool_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801df3c:	4b0c      	ldr	r3, [pc, #48]	; (801df70 <_txe_byte_pool_delete+0x74>)
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801df42:	693b      	ldr	r3, [r7, #16]
 801df44:	4a0b      	ldr	r2, [pc, #44]	; (801df74 <_txe_byte_pool_delete+0x78>)
 801df46:	4293      	cmp	r3, r2
 801df48:	d101      	bne.n	801df4e <_txe_byte_pool_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801df4a:	2313      	movs	r3, #19
 801df4c:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 801df4e:	697b      	ldr	r3, [r7, #20]
 801df50:	2b00      	cmp	r3, #0
 801df52:	d103      	bne.n	801df5c <_txe_byte_pool_delete+0x60>
        {
#endif

            /* Call actual byte pool delete function.  */
            status =  _tx_byte_pool_delete(pool_ptr);
 801df54:	6878      	ldr	r0, [r7, #4]
 801df56:	f7fd fe7d 	bl	801bc54 <_tx_byte_pool_delete>
 801df5a:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 801df5c:	697b      	ldr	r3, [r7, #20]
}
 801df5e:	4618      	mov	r0, r3
 801df60:	3718      	adds	r7, #24
 801df62:	46bd      	mov	sp, r7
 801df64:	bd80      	pop	{r7, pc}
 801df66:	bf00      	nop
 801df68:	42595445 	.word	0x42595445
 801df6c:	20000034 	.word	0x20000034
 801df70:	200b6ac0 	.word	0x200b6ac0
 801df74:	200b6c08 	.word	0x200b6c08

0801df78 <_txe_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_release(VOID *memory_ptr)
{
 801df78:	b580      	push	{r7, lr}
 801df7a:	b086      	sub	sp, #24
 801df7c:	af00      	add	r7, sp, #0
 801df7e:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801df80:	2300      	movs	r3, #0
 801df82:	617b      	str	r3, [r7, #20]

    /* First check the supplied memory pointer.  */
    if (memory_ptr == TX_NULL)
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d102      	bne.n	801df90 <_txe_byte_release+0x18>
    {

        /* The byte memory pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 801df8a:	2303      	movs	r3, #3
 801df8c:	617b      	str	r3, [r7, #20]
 801df8e:	e01d      	b.n	801dfcc <_txe_byte_release+0x54>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801df90:	4b14      	ldr	r3, [pc, #80]	; (801dfe4 <_txe_byte_release+0x6c>)
 801df92:	681b      	ldr	r3, [r3, #0]
 801df94:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801df96:	693b      	ldr	r3, [r7, #16]
 801df98:	4a13      	ldr	r2, [pc, #76]	; (801dfe8 <_txe_byte_release+0x70>)
 801df9a:	4293      	cmp	r3, r2
 801df9c:	d101      	bne.n	801dfa2 <_txe_byte_release+0x2a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801df9e:	2313      	movs	r3, #19
 801dfa0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801dfa2:	f3ef 8305 	mrs	r3, IPSR
 801dfa6:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801dfa8:	68fa      	ldr	r2, [r7, #12]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801dfaa:	4b10      	ldr	r3, [pc, #64]	; (801dfec <_txe_byte_release+0x74>)
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	4313      	orrs	r3, r2
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d00b      	beq.n	801dfcc <_txe_byte_release+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801dfb4:	f3ef 8305 	mrs	r3, IPSR
 801dfb8:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801dfba:	68ba      	ldr	r2, [r7, #8]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801dfbc:	4b0b      	ldr	r3, [pc, #44]	; (801dfec <_txe_byte_release+0x74>)
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	4313      	orrs	r3, r2
 801dfc2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801dfc6:	d201      	bcs.n	801dfcc <_txe_byte_release+0x54>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801dfc8:	2313      	movs	r3, #19
 801dfca:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801dfcc:	697b      	ldr	r3, [r7, #20]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d103      	bne.n	801dfda <_txe_byte_release+0x62>
    {

        /* Call actual byte release function.  */
        status =  _tx_byte_release(memory_ptr);
 801dfd2:	6878      	ldr	r0, [r7, #4]
 801dfd4:	f7fd ffdc 	bl	801bf90 <_tx_byte_release>
 801dfd8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801dfda:	697b      	ldr	r3, [r7, #20]
}
 801dfdc:	4618      	mov	r0, r3
 801dfde:	3718      	adds	r7, #24
 801dfe0:	46bd      	mov	sp, r7
 801dfe2:	bd80      	pop	{r7, pc}
 801dfe4:	200b6ac0 	.word	0x200b6ac0
 801dfe8:	200b6c08 	.word	0x200b6c08
 801dfec:	20000034 	.word	0x20000034

0801dff0 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 801dff0:	b580      	push	{r7, lr}
 801dff2:	b092      	sub	sp, #72	; 0x48
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	60f8      	str	r0, [r7, #12]
 801dff8:	60b9      	str	r1, [r7, #8]
 801dffa:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801dffc:	2300      	movs	r3, #0
 801dffe:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	2b00      	cmp	r3, #0
 801e004:	d102      	bne.n	801e00c <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801e006:	2306      	movs	r3, #6
 801e008:	647b      	str	r3, [r7, #68]	; 0x44
 801e00a:	e069      	b.n	801e0e0 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	2b24      	cmp	r3, #36	; 0x24
 801e010:	d002      	beq.n	801e018 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801e012:	2306      	movs	r3, #6
 801e014:	647b      	str	r3, [r7, #68]	; 0x44
 801e016:	e063      	b.n	801e0e0 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e018:	f3ef 8310 	mrs	r3, PRIMASK
 801e01c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801e01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801e020:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801e022:	b672      	cpsid	i
    return(int_posture);
 801e024:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801e026:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801e028:	4b34      	ldr	r3, [pc, #208]	; (801e0fc <_txe_event_flags_create+0x10c>)
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	3301      	adds	r3, #1
 801e02e:	4a33      	ldr	r2, [pc, #204]	; (801e0fc <_txe_event_flags_create+0x10c>)
 801e030:	6013      	str	r3, [r2, #0]
 801e032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e034:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e038:	f383 8810 	msr	PRIMASK, r3
}
 801e03c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 801e03e:	4b30      	ldr	r3, [pc, #192]	; (801e100 <_txe_event_flags_create+0x110>)
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 801e044:	2300      	movs	r3, #0
 801e046:	643b      	str	r3, [r7, #64]	; 0x40
 801e048:	e009      	b.n	801e05e <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 801e04a:	68fa      	ldr	r2, [r7, #12]
 801e04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e04e:	429a      	cmp	r2, r3
 801e050:	d00b      	beq.n	801e06a <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 801e052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e054:	699b      	ldr	r3, [r3, #24]
 801e056:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 801e058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e05a:	3301      	adds	r3, #1
 801e05c:	643b      	str	r3, [r7, #64]	; 0x40
 801e05e:	4b29      	ldr	r3, [pc, #164]	; (801e104 <_txe_event_flags_create+0x114>)
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e064:	429a      	cmp	r2, r3
 801e066:	d3f0      	bcc.n	801e04a <_txe_event_flags_create+0x5a>
 801e068:	e000      	b.n	801e06c <_txe_event_flags_create+0x7c>
                break;
 801e06a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e06c:	f3ef 8310 	mrs	r3, PRIMASK
 801e070:	623b      	str	r3, [r7, #32]
    return(posture);
 801e072:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801e074:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801e076:	b672      	cpsid	i
    return(int_posture);
 801e078:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801e07a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801e07c:	4b1f      	ldr	r3, [pc, #124]	; (801e0fc <_txe_event_flags_create+0x10c>)
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	3b01      	subs	r3, #1
 801e082:	4a1e      	ldr	r2, [pc, #120]	; (801e0fc <_txe_event_flags_create+0x10c>)
 801e084:	6013      	str	r3, [r2, #0]
 801e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e088:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e08c:	f383 8810 	msr	PRIMASK, r3
}
 801e090:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801e092:	f7fe ff89 	bl	801cfa8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 801e096:	68fa      	ldr	r2, [r7, #12]
 801e098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e09a:	429a      	cmp	r2, r3
 801e09c:	d102      	bne.n	801e0a4 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 801e09e:	2306      	movs	r3, #6
 801e0a0:	647b      	str	r3, [r7, #68]	; 0x44
 801e0a2:	e01d      	b.n	801e0e0 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801e0a4:	4b18      	ldr	r3, [pc, #96]	; (801e108 <_txe_event_flags_create+0x118>)
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801e0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e0ac:	4a17      	ldr	r2, [pc, #92]	; (801e10c <_txe_event_flags_create+0x11c>)
 801e0ae:	4293      	cmp	r3, r2
 801e0b0:	d101      	bne.n	801e0b6 <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801e0b2:	2313      	movs	r3, #19
 801e0b4:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e0b6:	f3ef 8305 	mrs	r3, IPSR
 801e0ba:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801e0bc:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e0be:	4b14      	ldr	r3, [pc, #80]	; (801e110 <_txe_event_flags_create+0x120>)
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	4313      	orrs	r3, r2
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d00b      	beq.n	801e0e0 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e0c8:	f3ef 8305 	mrs	r3, IPSR
 801e0cc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801e0ce:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801e0d0:	4b0f      	ldr	r3, [pc, #60]	; (801e110 <_txe_event_flags_create+0x120>)
 801e0d2:	681b      	ldr	r3, [r3, #0]
 801e0d4:	4313      	orrs	r3, r2
 801e0d6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801e0da:	d201      	bcs.n	801e0e0 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801e0dc:	2313      	movs	r3, #19
 801e0de:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d104      	bne.n	801e0f0 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 801e0e6:	68b9      	ldr	r1, [r7, #8]
 801e0e8:	68f8      	ldr	r0, [r7, #12]
 801e0ea:	f7fe f8fb 	bl	801c2e4 <_tx_event_flags_create>
 801e0ee:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801e0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801e0f2:	4618      	mov	r0, r3
 801e0f4:	3748      	adds	r7, #72	; 0x48
 801e0f6:	46bd      	mov	sp, r7
 801e0f8:	bd80      	pop	{r7, pc}
 801e0fa:	bf00      	nop
 801e0fc:	200b6b58 	.word	0x200b6b58
 801e100:	200b6a98 	.word	0x200b6a98
 801e104:	200b6a9c 	.word	0x200b6a9c
 801e108:	200b6ac0 	.word	0x200b6ac0
 801e10c:	200b6c08 	.word	0x200b6c08
 801e110:	20000034 	.word	0x20000034

0801e114 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 801e114:	b580      	push	{r7, lr}
 801e116:	b08a      	sub	sp, #40	; 0x28
 801e118:	af02      	add	r7, sp, #8
 801e11a:	60f8      	str	r0, [r7, #12]
 801e11c:	60b9      	str	r1, [r7, #8]
 801e11e:	607a      	str	r2, [r7, #4]
 801e120:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e122:	2300      	movs	r3, #0
 801e124:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d102      	bne.n	801e132 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801e12c:	2306      	movs	r3, #6
 801e12e:	61fb      	str	r3, [r7, #28]
 801e130:	e025      	b.n	801e17e <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	4a1e      	ldr	r2, [pc, #120]	; (801e1b0 <_txe_event_flags_get+0x9c>)
 801e138:	4293      	cmp	r3, r2
 801e13a:	d002      	beq.n	801e142 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801e13c:	2306      	movs	r3, #6
 801e13e:	61fb      	str	r3, [r7, #28]
 801e140:	e01d      	b.n	801e17e <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 801e142:	683b      	ldr	r3, [r7, #0]
 801e144:	2b00      	cmp	r3, #0
 801e146:	d102      	bne.n	801e14e <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801e148:	2303      	movs	r3, #3
 801e14a:	61fb      	str	r3, [r7, #28]
 801e14c:	e017      	b.n	801e17e <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801e14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e150:	2b00      	cmp	r3, #0
 801e152:	d014      	beq.n	801e17e <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e154:	f3ef 8305 	mrs	r3, IPSR
 801e158:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801e15a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e15c:	4b15      	ldr	r3, [pc, #84]	; (801e1b4 <_txe_event_flags_get+0xa0>)
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	4313      	orrs	r3, r2
 801e162:	2b00      	cmp	r3, #0
 801e164:	d002      	beq.n	801e16c <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801e166:	2304      	movs	r3, #4
 801e168:	61fb      	str	r3, [r7, #28]
 801e16a:	e008      	b.n	801e17e <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801e16c:	4b12      	ldr	r3, [pc, #72]	; (801e1b8 <_txe_event_flags_get+0xa4>)
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801e172:	69bb      	ldr	r3, [r7, #24]
 801e174:	4a11      	ldr	r2, [pc, #68]	; (801e1bc <_txe_event_flags_get+0xa8>)
 801e176:	4293      	cmp	r3, r2
 801e178:	d101      	bne.n	801e17e <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801e17a:	2304      	movs	r3, #4
 801e17c:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801e17e:	69fb      	ldr	r3, [r7, #28]
 801e180:	2b00      	cmp	r3, #0
 801e182:	d104      	bne.n	801e18e <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	2b03      	cmp	r3, #3
 801e188:	d901      	bls.n	801e18e <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 801e18a:	2308      	movs	r3, #8
 801e18c:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e18e:	69fb      	ldr	r3, [r7, #28]
 801e190:	2b00      	cmp	r3, #0
 801e192:	d108      	bne.n	801e1a6 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 801e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e196:	9300      	str	r3, [sp, #0]
 801e198:	683b      	ldr	r3, [r7, #0]
 801e19a:	687a      	ldr	r2, [r7, #4]
 801e19c:	68b9      	ldr	r1, [r7, #8]
 801e19e:	68f8      	ldr	r0, [r7, #12]
 801e1a0:	f7fe f8ee 	bl	801c380 <_tx_event_flags_get>
 801e1a4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801e1a6:	69fb      	ldr	r3, [r7, #28]
}
 801e1a8:	4618      	mov	r0, r3
 801e1aa:	3720      	adds	r7, #32
 801e1ac:	46bd      	mov	sp, r7
 801e1ae:	bd80      	pop	{r7, pc}
 801e1b0:	4456444e 	.word	0x4456444e
 801e1b4:	20000034 	.word	0x20000034
 801e1b8:	200b6ac0 	.word	0x200b6ac0
 801e1bc:	200b6c08 	.word	0x200b6c08

0801e1c0 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 801e1c0:	b580      	push	{r7, lr}
 801e1c2:	b086      	sub	sp, #24
 801e1c4:	af00      	add	r7, sp, #0
 801e1c6:	60f8      	str	r0, [r7, #12]
 801e1c8:	60b9      	str	r1, [r7, #8]
 801e1ca:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e1cc:	2300      	movs	r3, #0
 801e1ce:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 801e1d0:	68fb      	ldr	r3, [r7, #12]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d102      	bne.n	801e1dc <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801e1d6:	2306      	movs	r3, #6
 801e1d8:	617b      	str	r3, [r7, #20]
 801e1da:	e00f      	b.n	801e1fc <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	4a0d      	ldr	r2, [pc, #52]	; (801e218 <_txe_event_flags_set+0x58>)
 801e1e2:	4293      	cmp	r3, r2
 801e1e4:	d002      	beq.n	801e1ec <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801e1e6:	2306      	movs	r3, #6
 801e1e8:	617b      	str	r3, [r7, #20]
 801e1ea:	e007      	b.n	801e1fc <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	2b02      	cmp	r3, #2
 801e1f0:	d004      	beq.n	801e1fc <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d001      	beq.n	801e1fc <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 801e1f8:	2308      	movs	r3, #8
 801e1fa:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e1fc:	697b      	ldr	r3, [r7, #20]
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d105      	bne.n	801e20e <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 801e202:	687a      	ldr	r2, [r7, #4]
 801e204:	68b9      	ldr	r1, [r7, #8]
 801e206:	68f8      	ldr	r0, [r7, #12]
 801e208:	f7fe f99c 	bl	801c544 <_tx_event_flags_set>
 801e20c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801e20e:	697b      	ldr	r3, [r7, #20]
}
 801e210:	4618      	mov	r0, r3
 801e212:	3718      	adds	r7, #24
 801e214:	46bd      	mov	sp, r7
 801e216:	bd80      	pop	{r7, pc}
 801e218:	4456444e 	.word	0x4456444e

0801e21c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 801e21c:	b580      	push	{r7, lr}
 801e21e:	b09a      	sub	sp, #104	; 0x68
 801e220:	af06      	add	r7, sp, #24
 801e222:	60f8      	str	r0, [r7, #12]
 801e224:	60b9      	str	r1, [r7, #8]
 801e226:	607a      	str	r2, [r7, #4]
 801e228:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e22a:	2300      	movs	r3, #0
 801e22c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	2b00      	cmp	r3, #0
 801e232:	d102      	bne.n	801e23a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801e234:	230e      	movs	r3, #14
 801e236:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e238:	e0bc      	b.n	801e3b4 <_txe_thread_create+0x198>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801e23a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e23c:	2bb0      	cmp	r3, #176	; 0xb0
 801e23e:	d002      	beq.n	801e246 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801e240:	230e      	movs	r3, #14
 801e242:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e244:	e0b6      	b.n	801e3b4 <_txe_thread_create+0x198>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e246:	f3ef 8310 	mrs	r3, PRIMASK
 801e24a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801e24e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801e250:	b672      	cpsid	i
    return(int_posture);
 801e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801e254:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801e256:	4b65      	ldr	r3, [pc, #404]	; (801e3ec <_txe_thread_create+0x1d0>)
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	3301      	adds	r3, #1
 801e25c:	4a63      	ldr	r2, [pc, #396]	; (801e3ec <_txe_thread_create+0x1d0>)
 801e25e:	6013      	str	r3, [r2, #0]
 801e260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e262:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e266:	f383 8810 	msr	PRIMASK, r3
}
 801e26a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 801e26c:	2300      	movs	r3, #0
 801e26e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 801e270:	4b5f      	ldr	r3, [pc, #380]	; (801e3f0 <_txe_thread_create+0x1d4>)
 801e272:	681b      	ldr	r3, [r3, #0]
 801e274:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801e276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e278:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801e27a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e27c:	3b01      	subs	r3, #1
 801e27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e280:	4413      	add	r3, r2
 801e282:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801e284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e286:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801e288:	2300      	movs	r3, #0
 801e28a:	647b      	str	r3, [r7, #68]	; 0x44
 801e28c:	e02b      	b.n	801e2e6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801e28e:	68fa      	ldr	r2, [r7, #12]
 801e290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e292:	429a      	cmp	r2, r3
 801e294:	d101      	bne.n	801e29a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801e296:	2301      	movs	r3, #1
 801e298:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801e29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e29c:	2b01      	cmp	r3, #1
 801e29e:	d028      	beq.n	801e2f2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801e2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e2a2:	68db      	ldr	r3, [r3, #12]
 801e2a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e2a6:	429a      	cmp	r2, r3
 801e2a8:	d308      	bcc.n	801e2bc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801e2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e2ac:	691b      	ldr	r3, [r3, #16]
 801e2ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e2b0:	429a      	cmp	r2, r3
 801e2b2:	d203      	bcs.n	801e2bc <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801e2b8:	2301      	movs	r3, #1
 801e2ba:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 801e2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e2be:	68db      	ldr	r3, [r3, #12]
 801e2c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e2c2:	429a      	cmp	r2, r3
 801e2c4:	d308      	bcc.n	801e2d8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801e2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e2c8:	691b      	ldr	r3, [r3, #16]
 801e2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e2cc:	429a      	cmp	r2, r3
 801e2ce:	d203      	bcs.n	801e2d8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801e2d0:	2300      	movs	r3, #0
 801e2d2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801e2d4:	2301      	movs	r3, #1
 801e2d6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801e2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e2de:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801e2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e2e2:	3301      	adds	r3, #1
 801e2e4:	647b      	str	r3, [r7, #68]	; 0x44
 801e2e6:	4b43      	ldr	r3, [pc, #268]	; (801e3f4 <_txe_thread_create+0x1d8>)
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e2ec:	429a      	cmp	r2, r3
 801e2ee:	d3ce      	bcc.n	801e28e <_txe_thread_create+0x72>
 801e2f0:	e000      	b.n	801e2f4 <_txe_thread_create+0xd8>
                break;
 801e2f2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e2f4:	f3ef 8310 	mrs	r3, PRIMASK
 801e2f8:	61fb      	str	r3, [r7, #28]
    return(posture);
 801e2fa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801e2fc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801e2fe:	b672      	cpsid	i
    return(int_posture);
 801e300:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801e302:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801e304:	4b39      	ldr	r3, [pc, #228]	; (801e3ec <_txe_thread_create+0x1d0>)
 801e306:	681b      	ldr	r3, [r3, #0]
 801e308:	3b01      	subs	r3, #1
 801e30a:	4a38      	ldr	r2, [pc, #224]	; (801e3ec <_txe_thread_create+0x1d0>)
 801e30c:	6013      	str	r3, [r2, #0]
 801e30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e310:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e312:	6a3b      	ldr	r3, [r7, #32]
 801e314:	f383 8810 	msr	PRIMASK, r3
}
 801e318:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801e31a:	f7fe fe45 	bl	801cfa8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801e31e:	68fa      	ldr	r2, [r7, #12]
 801e320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e322:	429a      	cmp	r2, r3
 801e324:	d102      	bne.n	801e32c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801e326:	230e      	movs	r3, #14
 801e328:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e32a:	e043      	b.n	801e3b4 <_txe_thread_create+0x198>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 801e32c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d102      	bne.n	801e338 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801e332:	2303      	movs	r3, #3
 801e334:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e336:	e03d      	b.n	801e3b4 <_txe_thread_create+0x198>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d102      	bne.n	801e344 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801e33e:	2303      	movs	r3, #3
 801e340:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e342:	e037      	b.n	801e3b4 <_txe_thread_create+0x198>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801e344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e346:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801e34a:	d202      	bcs.n	801e352 <_txe_thread_create+0x136>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 801e34c:	2305      	movs	r3, #5
 801e34e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e350:	e030      	b.n	801e3b4 <_txe_thread_create+0x198>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 801e352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e354:	2b1f      	cmp	r3, #31
 801e356:	d902      	bls.n	801e35e <_txe_thread_create+0x142>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801e358:	230f      	movs	r3, #15
 801e35a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e35c:	e02a      	b.n	801e3b4 <_txe_thread_create+0x198>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 801e35e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801e360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e362:	429a      	cmp	r2, r3
 801e364:	d902      	bls.n	801e36c <_txe_thread_create+0x150>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 801e366:	2318      	movs	r3, #24
 801e368:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e36a:	e023      	b.n	801e3b4 <_txe_thread_create+0x198>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 801e36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e36e:	2b01      	cmp	r3, #1
 801e370:	d902      	bls.n	801e378 <_txe_thread_create+0x15c>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 801e372:	2310      	movs	r3, #16
 801e374:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e376:	e01d      	b.n	801e3b4 <_txe_thread_create+0x198>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801e378:	4b1f      	ldr	r3, [pc, #124]	; (801e3f8 <_txe_thread_create+0x1dc>)
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 801e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e380:	4a1e      	ldr	r2, [pc, #120]	; (801e3fc <_txe_thread_create+0x1e0>)
 801e382:	4293      	cmp	r3, r2
 801e384:	d101      	bne.n	801e38a <_txe_thread_create+0x16e>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801e386:	2313      	movs	r3, #19
 801e388:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e38a:	f3ef 8305 	mrs	r3, IPSR
 801e38e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801e390:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e392:	4b1b      	ldr	r3, [pc, #108]	; (801e400 <_txe_thread_create+0x1e4>)
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	4313      	orrs	r3, r2
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d00b      	beq.n	801e3b4 <_txe_thread_create+0x198>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e39c:	f3ef 8305 	mrs	r3, IPSR
 801e3a0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801e3a2:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801e3a4:	4b16      	ldr	r3, [pc, #88]	; (801e400 <_txe_thread_create+0x1e4>)
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	4313      	orrs	r3, r2
 801e3aa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801e3ae:	d201      	bcs.n	801e3b4 <_txe_thread_create+0x198>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801e3b0:	2313      	movs	r3, #19
 801e3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e3b6:	2b00      	cmp	r3, #0
 801e3b8:	d112      	bne.n	801e3e0 <_txe_thread_create+0x1c4>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801e3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e3bc:	9305      	str	r3, [sp, #20]
 801e3be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e3c0:	9304      	str	r3, [sp, #16]
 801e3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e3c4:	9303      	str	r3, [sp, #12]
 801e3c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e3c8:	9302      	str	r3, [sp, #8]
 801e3ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e3cc:	9301      	str	r3, [sp, #4]
 801e3ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e3d0:	9300      	str	r3, [sp, #0]
 801e3d2:	683b      	ldr	r3, [r7, #0]
 801e3d4:	687a      	ldr	r2, [r7, #4]
 801e3d6:	68b9      	ldr	r1, [r7, #8]
 801e3d8:	68f8      	ldr	r0, [r7, #12]
 801e3da:	f7fe fb33 	bl	801ca44 <_tx_thread_create>
 801e3de:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801e3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	3750      	adds	r7, #80	; 0x50
 801e3e6:	46bd      	mov	sp, r7
 801e3e8:	bd80      	pop	{r7, pc}
 801e3ea:	bf00      	nop
 801e3ec:	200b6b58 	.word	0x200b6b58
 801e3f0:	200b6ac8 	.word	0x200b6ac8
 801e3f4:	200b6acc 	.word	0x200b6acc
 801e3f8:	200b6ac0 	.word	0x200b6ac0
 801e3fc:	200b6c08 	.word	0x200b6c08
 801e400:	20000034 	.word	0x20000034

0801e404 <_txe_thread_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_reset(TX_THREAD *thread_ptr)
{
 801e404:	b580      	push	{r7, lr}
 801e406:	b086      	sub	sp, #24
 801e408:	af00      	add	r7, sp, #0
 801e40a:	6078      	str	r0, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e40c:	2300      	movs	r3, #0
 801e40e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	2b00      	cmp	r3, #0
 801e414:	d102      	bne.n	801e41c <_txe_thread_reset+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801e416:	230e      	movs	r3, #14
 801e418:	617b      	str	r3, [r7, #20]
 801e41a:	e01b      	b.n	801e454 <_txe_thread_reset+0x50>
    }

    /* Now check for an invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	4a12      	ldr	r2, [pc, #72]	; (801e46c <_txe_thread_reset+0x68>)
 801e422:	4293      	cmp	r3, r2
 801e424:	d002      	beq.n	801e42c <_txe_thread_reset+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801e426:	230e      	movs	r3, #14
 801e428:	617b      	str	r3, [r7, #20]
 801e42a:	e013      	b.n	801e454 <_txe_thread_reset+0x50>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801e42c:	4b10      	ldr	r3, [pc, #64]	; (801e470 <_txe_thread_reset+0x6c>)
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (current_thread == &_tx_timer_thread)
 801e432:	693b      	ldr	r3, [r7, #16]
 801e434:	4a0f      	ldr	r2, [pc, #60]	; (801e474 <_txe_thread_reset+0x70>)
 801e436:	4293      	cmp	r3, r2
 801e438:	d101      	bne.n	801e43e <_txe_thread_reset+0x3a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801e43a:	2313      	movs	r3, #19
 801e43c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e43e:	f3ef 8305 	mrs	r3, IPSR
 801e442:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801e444:	68fa      	ldr	r2, [r7, #12]
        }
#endif

        /* Check for interrupt or initialization call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e446:	4b0c      	ldr	r3, [pc, #48]	; (801e478 <_txe_thread_reset+0x74>)
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	4313      	orrs	r3, r2
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d001      	beq.n	801e454 <_txe_thread_reset+0x50>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801e450:	2313      	movs	r3, #19
 801e452:	617b      	str	r3, [r7, #20]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e454:	697b      	ldr	r3, [r7, #20]
 801e456:	2b00      	cmp	r3, #0
 801e458:	d103      	bne.n	801e462 <_txe_thread_reset+0x5e>
    {

        /* Call actual thread reset function.  */
        status =  _tx_thread_reset(thread_ptr);
 801e45a:	6878      	ldr	r0, [r7, #4]
 801e45c:	f7fe fc24 	bl	801cca8 <_tx_thread_reset>
 801e460:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801e462:	697b      	ldr	r3, [r7, #20]
}
 801e464:	4618      	mov	r0, r3
 801e466:	3718      	adds	r7, #24
 801e468:	46bd      	mov	sp, r7
 801e46a:	bd80      	pop	{r7, pc}
 801e46c:	54485244 	.word	0x54485244
 801e470:	200b6ac0 	.word	0x200b6ac0
 801e474:	200b6c08 	.word	0x200b6c08
 801e478:	20000034 	.word	0x20000034

0801e47c <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	b084      	sub	sp, #16
 801e480:	af00      	add	r7, sp, #0
 801e482:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	2b00      	cmp	r3, #0
 801e488:	d102      	bne.n	801e490 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801e48a:	230e      	movs	r3, #14
 801e48c:	60fb      	str	r3, [r7, #12]
 801e48e:	e00b      	b.n	801e4a8 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	4a07      	ldr	r2, [pc, #28]	; (801e4b4 <_txe_thread_resume+0x38>)
 801e496:	4293      	cmp	r3, r2
 801e498:	d002      	beq.n	801e4a0 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801e49a:	230e      	movs	r3, #14
 801e49c:	60fb      	str	r3, [r7, #12]
 801e49e:	e003      	b.n	801e4a8 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 801e4a0:	6878      	ldr	r0, [r7, #4]
 801e4a2:	f7fe fc55 	bl	801cd50 <_tx_thread_resume>
 801e4a6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801e4a8:	68fb      	ldr	r3, [r7, #12]
}
 801e4aa:	4618      	mov	r0, r3
 801e4ac:	3710      	adds	r7, #16
 801e4ae:	46bd      	mov	sp, r7
 801e4b0:	bd80      	pop	{r7, pc}
 801e4b2:	bf00      	nop
 801e4b4:	54485244 	.word	0x54485244

0801e4b8 <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 801e4b8:	b580      	push	{r7, lr}
 801e4ba:	b084      	sub	sp, #16
 801e4bc:	af00      	add	r7, sp, #0
 801e4be:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d102      	bne.n	801e4cc <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801e4c6:	230e      	movs	r3, #14
 801e4c8:	60fb      	str	r3, [r7, #12]
 801e4ca:	e017      	b.n	801e4fc <_txe_thread_terminate+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	4a0d      	ldr	r2, [pc, #52]	; (801e508 <_txe_thread_terminate+0x50>)
 801e4d2:	4293      	cmp	r3, r2
 801e4d4:	d002      	beq.n	801e4dc <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801e4d6:	230e      	movs	r3, #14
 801e4d8:	60fb      	str	r3, [r7, #12]
 801e4da:	e00f      	b.n	801e4fc <_txe_thread_terminate+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e4dc:	f3ef 8305 	mrs	r3, IPSR
 801e4e0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801e4e2:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e4e4:	4b09      	ldr	r3, [pc, #36]	; (801e50c <_txe_thread_terminate+0x54>)
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	4313      	orrs	r3, r2
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d002      	beq.n	801e4f4 <_txe_thread_terminate+0x3c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 801e4ee:	2313      	movs	r3, #19
 801e4f0:	60fb      	str	r3, [r7, #12]
 801e4f2:	e003      	b.n	801e4fc <_txe_thread_terminate+0x44>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 801e4f4:	6878      	ldr	r0, [r7, #4]
 801e4f6:	f7fe ffa9 	bl	801d44c <_tx_thread_terminate>
 801e4fa:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801e4fc:	68fb      	ldr	r3, [r7, #12]
}
 801e4fe:	4618      	mov	r0, r3
 801e500:	3710      	adds	r7, #16
 801e502:	46bd      	mov	sp, r7
 801e504:	bd80      	pop	{r7, pc}
 801e506:	bf00      	nop
 801e508:	54485244 	.word	0x54485244
 801e50c:	20000034 	.word	0x20000034

0801e510 <ceil>:
 801e510:	ec51 0b10 	vmov	r0, r1, d0
 801e514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e518:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e51c:	460c      	mov	r4, r1
 801e51e:	ee10 5a10 	vmov	r5, s0
 801e522:	ee10 8a10 	vmov	r8, s0
 801e526:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e52a:	2e13      	cmp	r6, #19
 801e52c:	dc31      	bgt.n	801e592 <ceil+0x82>
 801e52e:	2e00      	cmp	r6, #0
 801e530:	da12      	bge.n	801e558 <ceil+0x48>
 801e532:	a335      	add	r3, pc, #212	; (adr r3, 801e608 <ceil+0xf8>)
 801e534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e538:	f7e1 ffce 	bl	80004d8 <__adddf3>
 801e53c:	2200      	movs	r2, #0
 801e53e:	2300      	movs	r3, #0
 801e540:	f7e2 fc10 	bl	8000d64 <__aeabi_dcmpgt>
 801e544:	b128      	cbz	r0, 801e552 <ceil+0x42>
 801e546:	2c00      	cmp	r4, #0
 801e548:	db56      	blt.n	801e5f8 <ceil+0xe8>
 801e54a:	432c      	orrs	r4, r5
 801e54c:	d058      	beq.n	801e600 <ceil+0xf0>
 801e54e:	2500      	movs	r5, #0
 801e550:	4c2f      	ldr	r4, [pc, #188]	; (801e610 <ceil+0x100>)
 801e552:	4621      	mov	r1, r4
 801e554:	4628      	mov	r0, r5
 801e556:	e026      	b.n	801e5a6 <ceil+0x96>
 801e558:	4f2e      	ldr	r7, [pc, #184]	; (801e614 <ceil+0x104>)
 801e55a:	4137      	asrs	r7, r6
 801e55c:	ea01 0307 	and.w	r3, r1, r7
 801e560:	4303      	orrs	r3, r0
 801e562:	d020      	beq.n	801e5a6 <ceil+0x96>
 801e564:	a328      	add	r3, pc, #160	; (adr r3, 801e608 <ceil+0xf8>)
 801e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e56a:	f7e1 ffb5 	bl	80004d8 <__adddf3>
 801e56e:	2200      	movs	r2, #0
 801e570:	2300      	movs	r3, #0
 801e572:	f7e2 fbf7 	bl	8000d64 <__aeabi_dcmpgt>
 801e576:	2800      	cmp	r0, #0
 801e578:	d0eb      	beq.n	801e552 <ceil+0x42>
 801e57a:	2c00      	cmp	r4, #0
 801e57c:	f04f 0500 	mov.w	r5, #0
 801e580:	bfc2      	ittt	gt
 801e582:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801e586:	fa43 f606 	asrgt.w	r6, r3, r6
 801e58a:	19a4      	addgt	r4, r4, r6
 801e58c:	ea24 0407 	bic.w	r4, r4, r7
 801e590:	e7df      	b.n	801e552 <ceil+0x42>
 801e592:	2e33      	cmp	r6, #51	; 0x33
 801e594:	dd0b      	ble.n	801e5ae <ceil+0x9e>
 801e596:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e59a:	d104      	bne.n	801e5a6 <ceil+0x96>
 801e59c:	ee10 2a10 	vmov	r2, s0
 801e5a0:	460b      	mov	r3, r1
 801e5a2:	f7e1 ff99 	bl	80004d8 <__adddf3>
 801e5a6:	ec41 0b10 	vmov	d0, r0, r1
 801e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5ae:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e5b2:	f04f 33ff 	mov.w	r3, #4294967295
 801e5b6:	fa23 f707 	lsr.w	r7, r3, r7
 801e5ba:	4207      	tst	r7, r0
 801e5bc:	d0f3      	beq.n	801e5a6 <ceil+0x96>
 801e5be:	a312      	add	r3, pc, #72	; (adr r3, 801e608 <ceil+0xf8>)
 801e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c4:	f7e1 ff88 	bl	80004d8 <__adddf3>
 801e5c8:	2200      	movs	r2, #0
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	f7e2 fbca 	bl	8000d64 <__aeabi_dcmpgt>
 801e5d0:	2800      	cmp	r0, #0
 801e5d2:	d0be      	beq.n	801e552 <ceil+0x42>
 801e5d4:	2c00      	cmp	r4, #0
 801e5d6:	dd02      	ble.n	801e5de <ceil+0xce>
 801e5d8:	2e14      	cmp	r6, #20
 801e5da:	d103      	bne.n	801e5e4 <ceil+0xd4>
 801e5dc:	3401      	adds	r4, #1
 801e5de:	ea25 0507 	bic.w	r5, r5, r7
 801e5e2:	e7b6      	b.n	801e552 <ceil+0x42>
 801e5e4:	2301      	movs	r3, #1
 801e5e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e5ea:	fa03 f606 	lsl.w	r6, r3, r6
 801e5ee:	4435      	add	r5, r6
 801e5f0:	4545      	cmp	r5, r8
 801e5f2:	bf38      	it	cc
 801e5f4:	18e4      	addcc	r4, r4, r3
 801e5f6:	e7f2      	b.n	801e5de <ceil+0xce>
 801e5f8:	2500      	movs	r5, #0
 801e5fa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e5fe:	e7a8      	b.n	801e552 <ceil+0x42>
 801e600:	4625      	mov	r5, r4
 801e602:	e7a6      	b.n	801e552 <ceil+0x42>
 801e604:	f3af 8000 	nop.w
 801e608:	8800759c 	.word	0x8800759c
 801e60c:	7e37e43c 	.word	0x7e37e43c
 801e610:	3ff00000 	.word	0x3ff00000
 801e614:	000fffff 	.word	0x000fffff

0801e618 <floor>:
 801e618:	ec51 0b10 	vmov	r0, r1, d0
 801e61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e620:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e624:	460c      	mov	r4, r1
 801e626:	ee10 5a10 	vmov	r5, s0
 801e62a:	ee10 8a10 	vmov	r8, s0
 801e62e:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e632:	2e13      	cmp	r6, #19
 801e634:	dc33      	bgt.n	801e69e <floor+0x86>
 801e636:	2e00      	cmp	r6, #0
 801e638:	da14      	bge.n	801e664 <floor+0x4c>
 801e63a:	a335      	add	r3, pc, #212	; (adr r3, 801e710 <floor+0xf8>)
 801e63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e640:	f7e1 ff4a 	bl	80004d8 <__adddf3>
 801e644:	2200      	movs	r2, #0
 801e646:	2300      	movs	r3, #0
 801e648:	f7e2 fb8c 	bl	8000d64 <__aeabi_dcmpgt>
 801e64c:	b138      	cbz	r0, 801e65e <floor+0x46>
 801e64e:	2c00      	cmp	r4, #0
 801e650:	da58      	bge.n	801e704 <floor+0xec>
 801e652:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e656:	431d      	orrs	r5, r3
 801e658:	d001      	beq.n	801e65e <floor+0x46>
 801e65a:	2500      	movs	r5, #0
 801e65c:	4c2e      	ldr	r4, [pc, #184]	; (801e718 <floor+0x100>)
 801e65e:	4621      	mov	r1, r4
 801e660:	4628      	mov	r0, r5
 801e662:	e026      	b.n	801e6b2 <floor+0x9a>
 801e664:	4f2d      	ldr	r7, [pc, #180]	; (801e71c <floor+0x104>)
 801e666:	4137      	asrs	r7, r6
 801e668:	ea01 0307 	and.w	r3, r1, r7
 801e66c:	4303      	orrs	r3, r0
 801e66e:	d020      	beq.n	801e6b2 <floor+0x9a>
 801e670:	a327      	add	r3, pc, #156	; (adr r3, 801e710 <floor+0xf8>)
 801e672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e676:	f7e1 ff2f 	bl	80004d8 <__adddf3>
 801e67a:	2200      	movs	r2, #0
 801e67c:	2300      	movs	r3, #0
 801e67e:	f7e2 fb71 	bl	8000d64 <__aeabi_dcmpgt>
 801e682:	2800      	cmp	r0, #0
 801e684:	d0eb      	beq.n	801e65e <floor+0x46>
 801e686:	2c00      	cmp	r4, #0
 801e688:	f04f 0500 	mov.w	r5, #0
 801e68c:	bfbe      	ittt	lt
 801e68e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e692:	fa43 f606 	asrlt.w	r6, r3, r6
 801e696:	19a4      	addlt	r4, r4, r6
 801e698:	ea24 0407 	bic.w	r4, r4, r7
 801e69c:	e7df      	b.n	801e65e <floor+0x46>
 801e69e:	2e33      	cmp	r6, #51	; 0x33
 801e6a0:	dd0b      	ble.n	801e6ba <floor+0xa2>
 801e6a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e6a6:	d104      	bne.n	801e6b2 <floor+0x9a>
 801e6a8:	ee10 2a10 	vmov	r2, s0
 801e6ac:	460b      	mov	r3, r1
 801e6ae:	f7e1 ff13 	bl	80004d8 <__adddf3>
 801e6b2:	ec41 0b10 	vmov	d0, r0, r1
 801e6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e6be:	f04f 33ff 	mov.w	r3, #4294967295
 801e6c2:	fa23 f707 	lsr.w	r7, r3, r7
 801e6c6:	4207      	tst	r7, r0
 801e6c8:	d0f3      	beq.n	801e6b2 <floor+0x9a>
 801e6ca:	a311      	add	r3, pc, #68	; (adr r3, 801e710 <floor+0xf8>)
 801e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d0:	f7e1 ff02 	bl	80004d8 <__adddf3>
 801e6d4:	2200      	movs	r2, #0
 801e6d6:	2300      	movs	r3, #0
 801e6d8:	f7e2 fb44 	bl	8000d64 <__aeabi_dcmpgt>
 801e6dc:	2800      	cmp	r0, #0
 801e6de:	d0be      	beq.n	801e65e <floor+0x46>
 801e6e0:	2c00      	cmp	r4, #0
 801e6e2:	da02      	bge.n	801e6ea <floor+0xd2>
 801e6e4:	2e14      	cmp	r6, #20
 801e6e6:	d103      	bne.n	801e6f0 <floor+0xd8>
 801e6e8:	3401      	adds	r4, #1
 801e6ea:	ea25 0507 	bic.w	r5, r5, r7
 801e6ee:	e7b6      	b.n	801e65e <floor+0x46>
 801e6f0:	2301      	movs	r3, #1
 801e6f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e6f6:	fa03 f606 	lsl.w	r6, r3, r6
 801e6fa:	4435      	add	r5, r6
 801e6fc:	4545      	cmp	r5, r8
 801e6fe:	bf38      	it	cc
 801e700:	18e4      	addcc	r4, r4, r3
 801e702:	e7f2      	b.n	801e6ea <floor+0xd2>
 801e704:	2500      	movs	r5, #0
 801e706:	462c      	mov	r4, r5
 801e708:	e7a9      	b.n	801e65e <floor+0x46>
 801e70a:	bf00      	nop
 801e70c:	f3af 8000 	nop.w
 801e710:	8800759c 	.word	0x8800759c
 801e714:	7e37e43c 	.word	0x7e37e43c
 801e718:	bff00000 	.word	0xbff00000
 801e71c:	000fffff 	.word	0x000fffff

0801e720 <sin>:
 801e720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e722:	ec53 2b10 	vmov	r2, r3, d0
 801e726:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801e72a:	4827      	ldr	r0, [pc, #156]	; (801e7c8 <sin+0xa8>)
 801e72c:	4281      	cmp	r1, r0
 801e72e:	dc07      	bgt.n	801e740 <sin+0x20>
 801e730:	2000      	movs	r0, #0
 801e732:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801e7c0 <sin+0xa0>
 801e736:	b005      	add	sp, #20
 801e738:	f85d eb04 	ldr.w	lr, [sp], #4
 801e73c:	f001 b8fc 	b.w	801f938 <__kernel_sin>
 801e740:	4822      	ldr	r0, [pc, #136]	; (801e7cc <sin+0xac>)
 801e742:	4281      	cmp	r1, r0
 801e744:	dd09      	ble.n	801e75a <sin+0x3a>
 801e746:	ee10 0a10 	vmov	r0, s0
 801e74a:	4619      	mov	r1, r3
 801e74c:	f7e1 fec2 	bl	80004d4 <__aeabi_dsub>
 801e750:	ec41 0b10 	vmov	d0, r0, r1
 801e754:	b005      	add	sp, #20
 801e756:	f85d fb04 	ldr.w	pc, [sp], #4
 801e75a:	4668      	mov	r0, sp
 801e75c:	f000 f8e8 	bl	801e930 <__ieee754_rem_pio2>
 801e760:	f000 0003 	and.w	r0, r0, #3
 801e764:	2801      	cmp	r0, #1
 801e766:	d00c      	beq.n	801e782 <sin+0x62>
 801e768:	2802      	cmp	r0, #2
 801e76a:	d011      	beq.n	801e790 <sin+0x70>
 801e76c:	b9f0      	cbnz	r0, 801e7ac <sin+0x8c>
 801e76e:	2001      	movs	r0, #1
 801e770:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e774:	ed9d 0b00 	vldr	d0, [sp]
 801e778:	f001 f8de 	bl	801f938 <__kernel_sin>
 801e77c:	ec51 0b10 	vmov	r0, r1, d0
 801e780:	e7e6      	b.n	801e750 <sin+0x30>
 801e782:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e786:	ed9d 0b00 	vldr	d0, [sp]
 801e78a:	f000 fcbd 	bl	801f108 <__kernel_cos>
 801e78e:	e7f5      	b.n	801e77c <sin+0x5c>
 801e790:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e794:	ed9d 0b00 	vldr	d0, [sp]
 801e798:	2001      	movs	r0, #1
 801e79a:	f001 f8cd 	bl	801f938 <__kernel_sin>
 801e79e:	ee10 0a10 	vmov	r0, s0
 801e7a2:	ec53 2b10 	vmov	r2, r3, d0
 801e7a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e7aa:	e7d1      	b.n	801e750 <sin+0x30>
 801e7ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e7b0:	ed9d 0b00 	vldr	d0, [sp]
 801e7b4:	f000 fca8 	bl	801f108 <__kernel_cos>
 801e7b8:	e7f1      	b.n	801e79e <sin+0x7e>
 801e7ba:	bf00      	nop
 801e7bc:	f3af 8000 	nop.w
	...
 801e7c8:	3fe921fb 	.word	0x3fe921fb
 801e7cc:	7fefffff 	.word	0x7fefffff

0801e7d0 <cosf>:
 801e7d0:	ee10 3a10 	vmov	r3, s0
 801e7d4:	b507      	push	{r0, r1, r2, lr}
 801e7d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e7da:	4a1d      	ldr	r2, [pc, #116]	; (801e850 <cosf+0x80>)
 801e7dc:	4293      	cmp	r3, r2
 801e7de:	dc06      	bgt.n	801e7ee <cosf+0x1e>
 801e7e0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801e854 <cosf+0x84>
 801e7e4:	b003      	add	sp, #12
 801e7e6:	f85d eb04 	ldr.w	lr, [sp], #4
 801e7ea:	f001 b963 	b.w	801fab4 <__kernel_cosf>
 801e7ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e7f2:	db04      	blt.n	801e7fe <cosf+0x2e>
 801e7f4:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e7f8:	b003      	add	sp, #12
 801e7fa:	f85d fb04 	ldr.w	pc, [sp], #4
 801e7fe:	4668      	mov	r0, sp
 801e800:	f000 fb40 	bl	801ee84 <__ieee754_rem_pio2f>
 801e804:	f000 0003 	and.w	r0, r0, #3
 801e808:	2801      	cmp	r0, #1
 801e80a:	d009      	beq.n	801e820 <cosf+0x50>
 801e80c:	2802      	cmp	r0, #2
 801e80e:	d010      	beq.n	801e832 <cosf+0x62>
 801e810:	b9b0      	cbnz	r0, 801e840 <cosf+0x70>
 801e812:	eddd 0a01 	vldr	s1, [sp, #4]
 801e816:	ed9d 0a00 	vldr	s0, [sp]
 801e81a:	f001 f94b 	bl	801fab4 <__kernel_cosf>
 801e81e:	e7eb      	b.n	801e7f8 <cosf+0x28>
 801e820:	eddd 0a01 	vldr	s1, [sp, #4]
 801e824:	ed9d 0a00 	vldr	s0, [sp]
 801e828:	f001 fc1c 	bl	8020064 <__kernel_sinf>
 801e82c:	eeb1 0a40 	vneg.f32	s0, s0
 801e830:	e7e2      	b.n	801e7f8 <cosf+0x28>
 801e832:	eddd 0a01 	vldr	s1, [sp, #4]
 801e836:	ed9d 0a00 	vldr	s0, [sp]
 801e83a:	f001 f93b 	bl	801fab4 <__kernel_cosf>
 801e83e:	e7f5      	b.n	801e82c <cosf+0x5c>
 801e840:	2001      	movs	r0, #1
 801e842:	eddd 0a01 	vldr	s1, [sp, #4]
 801e846:	ed9d 0a00 	vldr	s0, [sp]
 801e84a:	f001 fc0b 	bl	8020064 <__kernel_sinf>
 801e84e:	e7d3      	b.n	801e7f8 <cosf+0x28>
 801e850:	3f490fd8 	.word	0x3f490fd8
 801e854:	00000000 	.word	0x00000000

0801e858 <roundf>:
 801e858:	feb8 0a40 	vrinta.f32	s0, s0
 801e85c:	4770      	bx	lr
	...

0801e860 <sinf>:
 801e860:	ee10 3a10 	vmov	r3, s0
 801e864:	b507      	push	{r0, r1, r2, lr}
 801e866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e86a:	4a1e      	ldr	r2, [pc, #120]	; (801e8e4 <sinf+0x84>)
 801e86c:	4293      	cmp	r3, r2
 801e86e:	dc07      	bgt.n	801e880 <sinf+0x20>
 801e870:	2000      	movs	r0, #0
 801e872:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801e8e8 <sinf+0x88>
 801e876:	b003      	add	sp, #12
 801e878:	f85d eb04 	ldr.w	lr, [sp], #4
 801e87c:	f001 bbf2 	b.w	8020064 <__kernel_sinf>
 801e880:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e884:	db04      	blt.n	801e890 <sinf+0x30>
 801e886:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e88a:	b003      	add	sp, #12
 801e88c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e890:	4668      	mov	r0, sp
 801e892:	f000 faf7 	bl	801ee84 <__ieee754_rem_pio2f>
 801e896:	f000 0003 	and.w	r0, r0, #3
 801e89a:	2801      	cmp	r0, #1
 801e89c:	d00a      	beq.n	801e8b4 <sinf+0x54>
 801e89e:	2802      	cmp	r0, #2
 801e8a0:	d00f      	beq.n	801e8c2 <sinf+0x62>
 801e8a2:	b9c0      	cbnz	r0, 801e8d6 <sinf+0x76>
 801e8a4:	2001      	movs	r0, #1
 801e8a6:	eddd 0a01 	vldr	s1, [sp, #4]
 801e8aa:	ed9d 0a00 	vldr	s0, [sp]
 801e8ae:	f001 fbd9 	bl	8020064 <__kernel_sinf>
 801e8b2:	e7ea      	b.n	801e88a <sinf+0x2a>
 801e8b4:	eddd 0a01 	vldr	s1, [sp, #4]
 801e8b8:	ed9d 0a00 	vldr	s0, [sp]
 801e8bc:	f001 f8fa 	bl	801fab4 <__kernel_cosf>
 801e8c0:	e7e3      	b.n	801e88a <sinf+0x2a>
 801e8c2:	2001      	movs	r0, #1
 801e8c4:	eddd 0a01 	vldr	s1, [sp, #4]
 801e8c8:	ed9d 0a00 	vldr	s0, [sp]
 801e8cc:	f001 fbca 	bl	8020064 <__kernel_sinf>
 801e8d0:	eeb1 0a40 	vneg.f32	s0, s0
 801e8d4:	e7d9      	b.n	801e88a <sinf+0x2a>
 801e8d6:	eddd 0a01 	vldr	s1, [sp, #4]
 801e8da:	ed9d 0a00 	vldr	s0, [sp]
 801e8de:	f001 f8e9 	bl	801fab4 <__kernel_cosf>
 801e8e2:	e7f5      	b.n	801e8d0 <sinf+0x70>
 801e8e4:	3f490fd8 	.word	0x3f490fd8
 801e8e8:	00000000 	.word	0x00000000

0801e8ec <atan2f>:
 801e8ec:	f000 ba2c 	b.w	801ed48 <__ieee754_atan2f>

0801e8f0 <sqrtf>:
 801e8f0:	b508      	push	{r3, lr}
 801e8f2:	ed2d 8b02 	vpush	{d8}
 801e8f6:	eeb0 8a40 	vmov.f32	s16, s0
 801e8fa:	f000 fbff 	bl	801f0fc <__ieee754_sqrtf>
 801e8fe:	eeb4 8a48 	vcmp.f32	s16, s16
 801e902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e906:	d60c      	bvs.n	801e922 <sqrtf+0x32>
 801e908:	eddf 8a07 	vldr	s17, [pc, #28]	; 801e928 <sqrtf+0x38>
 801e90c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801e910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e914:	d505      	bpl.n	801e922 <sqrtf+0x32>
 801e916:	f001 fddb 	bl	80204d0 <__errno>
 801e91a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801e91e:	2321      	movs	r3, #33	; 0x21
 801e920:	6003      	str	r3, [r0, #0]
 801e922:	ecbd 8b02 	vpop	{d8}
 801e926:	bd08      	pop	{r3, pc}
	...

0801e930 <__ieee754_rem_pio2>:
 801e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e934:	ec55 4b10 	vmov	r4, r5, d0
 801e938:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801e93c:	4bca      	ldr	r3, [pc, #808]	; (801ec68 <__ieee754_rem_pio2+0x338>)
 801e93e:	4682      	mov	sl, r0
 801e940:	4598      	cmp	r8, r3
 801e942:	ed2d 8b02 	vpush	{d8}
 801e946:	b08b      	sub	sp, #44	; 0x2c
 801e948:	9502      	str	r5, [sp, #8]
 801e94a:	dc08      	bgt.n	801e95e <__ieee754_rem_pio2+0x2e>
 801e94c:	2200      	movs	r2, #0
 801e94e:	2300      	movs	r3, #0
 801e950:	ed80 0b00 	vstr	d0, [r0]
 801e954:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e958:	f04f 0b00 	mov.w	fp, #0
 801e95c:	e028      	b.n	801e9b0 <__ieee754_rem_pio2+0x80>
 801e95e:	4bc3      	ldr	r3, [pc, #780]	; (801ec6c <__ieee754_rem_pio2+0x33c>)
 801e960:	4598      	cmp	r8, r3
 801e962:	dc78      	bgt.n	801ea56 <__ieee754_rem_pio2+0x126>
 801e964:	9b02      	ldr	r3, [sp, #8]
 801e966:	ee10 0a10 	vmov	r0, s0
 801e96a:	4ec1      	ldr	r6, [pc, #772]	; (801ec70 <__ieee754_rem_pio2+0x340>)
 801e96c:	4629      	mov	r1, r5
 801e96e:	2b00      	cmp	r3, #0
 801e970:	a3af      	add	r3, pc, #700	; (adr r3, 801ec30 <__ieee754_rem_pio2+0x300>)
 801e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e976:	dd39      	ble.n	801e9ec <__ieee754_rem_pio2+0xbc>
 801e978:	f7e1 fdac 	bl	80004d4 <__aeabi_dsub>
 801e97c:	45b0      	cmp	r8, r6
 801e97e:	4604      	mov	r4, r0
 801e980:	460d      	mov	r5, r1
 801e982:	d01b      	beq.n	801e9bc <__ieee754_rem_pio2+0x8c>
 801e984:	a3ac      	add	r3, pc, #688	; (adr r3, 801ec38 <__ieee754_rem_pio2+0x308>)
 801e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e98a:	f7e1 fda3 	bl	80004d4 <__aeabi_dsub>
 801e98e:	4602      	mov	r2, r0
 801e990:	460b      	mov	r3, r1
 801e992:	4620      	mov	r0, r4
 801e994:	4629      	mov	r1, r5
 801e996:	e9ca 2300 	strd	r2, r3, [sl]
 801e99a:	f7e1 fd9b 	bl	80004d4 <__aeabi_dsub>
 801e99e:	a3a6      	add	r3, pc, #664	; (adr r3, 801ec38 <__ieee754_rem_pio2+0x308>)
 801e9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9a4:	f04f 0b01 	mov.w	fp, #1
 801e9a8:	f7e1 fd94 	bl	80004d4 <__aeabi_dsub>
 801e9ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e9b0:	4658      	mov	r0, fp
 801e9b2:	b00b      	add	sp, #44	; 0x2c
 801e9b4:	ecbd 8b02 	vpop	{d8}
 801e9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9bc:	a3a0      	add	r3, pc, #640	; (adr r3, 801ec40 <__ieee754_rem_pio2+0x310>)
 801e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9c2:	f7e1 fd87 	bl	80004d4 <__aeabi_dsub>
 801e9c6:	4604      	mov	r4, r0
 801e9c8:	460d      	mov	r5, r1
 801e9ca:	a39f      	add	r3, pc, #636	; (adr r3, 801ec48 <__ieee754_rem_pio2+0x318>)
 801e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9d0:	f7e1 fd80 	bl	80004d4 <__aeabi_dsub>
 801e9d4:	4602      	mov	r2, r0
 801e9d6:	460b      	mov	r3, r1
 801e9d8:	4620      	mov	r0, r4
 801e9da:	4629      	mov	r1, r5
 801e9dc:	e9ca 2300 	strd	r2, r3, [sl]
 801e9e0:	f7e1 fd78 	bl	80004d4 <__aeabi_dsub>
 801e9e4:	a398      	add	r3, pc, #608	; (adr r3, 801ec48 <__ieee754_rem_pio2+0x318>)
 801e9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9ea:	e7db      	b.n	801e9a4 <__ieee754_rem_pio2+0x74>
 801e9ec:	f7e1 fd74 	bl	80004d8 <__adddf3>
 801e9f0:	45b0      	cmp	r8, r6
 801e9f2:	4604      	mov	r4, r0
 801e9f4:	460d      	mov	r5, r1
 801e9f6:	d016      	beq.n	801ea26 <__ieee754_rem_pio2+0xf6>
 801e9f8:	a38f      	add	r3, pc, #572	; (adr r3, 801ec38 <__ieee754_rem_pio2+0x308>)
 801e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9fe:	f7e1 fd6b 	bl	80004d8 <__adddf3>
 801ea02:	4602      	mov	r2, r0
 801ea04:	460b      	mov	r3, r1
 801ea06:	4620      	mov	r0, r4
 801ea08:	4629      	mov	r1, r5
 801ea0a:	e9ca 2300 	strd	r2, r3, [sl]
 801ea0e:	f7e1 fd61 	bl	80004d4 <__aeabi_dsub>
 801ea12:	a389      	add	r3, pc, #548	; (adr r3, 801ec38 <__ieee754_rem_pio2+0x308>)
 801ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea18:	f7e1 fd5e 	bl	80004d8 <__adddf3>
 801ea1c:	f04f 3bff 	mov.w	fp, #4294967295
 801ea20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ea24:	e7c4      	b.n	801e9b0 <__ieee754_rem_pio2+0x80>
 801ea26:	a386      	add	r3, pc, #536	; (adr r3, 801ec40 <__ieee754_rem_pio2+0x310>)
 801ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea2c:	f7e1 fd54 	bl	80004d8 <__adddf3>
 801ea30:	4604      	mov	r4, r0
 801ea32:	460d      	mov	r5, r1
 801ea34:	a384      	add	r3, pc, #528	; (adr r3, 801ec48 <__ieee754_rem_pio2+0x318>)
 801ea36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea3a:	f7e1 fd4d 	bl	80004d8 <__adddf3>
 801ea3e:	4602      	mov	r2, r0
 801ea40:	460b      	mov	r3, r1
 801ea42:	4620      	mov	r0, r4
 801ea44:	4629      	mov	r1, r5
 801ea46:	e9ca 2300 	strd	r2, r3, [sl]
 801ea4a:	f7e1 fd43 	bl	80004d4 <__aeabi_dsub>
 801ea4e:	a37e      	add	r3, pc, #504	; (adr r3, 801ec48 <__ieee754_rem_pio2+0x318>)
 801ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea54:	e7e0      	b.n	801ea18 <__ieee754_rem_pio2+0xe8>
 801ea56:	4b87      	ldr	r3, [pc, #540]	; (801ec74 <__ieee754_rem_pio2+0x344>)
 801ea58:	4598      	cmp	r8, r3
 801ea5a:	f300 80d9 	bgt.w	801ec10 <__ieee754_rem_pio2+0x2e0>
 801ea5e:	f001 fb49 	bl	80200f4 <fabs>
 801ea62:	ee10 0a10 	vmov	r0, s0
 801ea66:	ec55 4b10 	vmov	r4, r5, d0
 801ea6a:	a379      	add	r3, pc, #484	; (adr r3, 801ec50 <__ieee754_rem_pio2+0x320>)
 801ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea70:	4629      	mov	r1, r5
 801ea72:	f7e1 fee7 	bl	8000844 <__aeabi_dmul>
 801ea76:	2200      	movs	r2, #0
 801ea78:	4b7f      	ldr	r3, [pc, #508]	; (801ec78 <__ieee754_rem_pio2+0x348>)
 801ea7a:	f7e1 fd2d 	bl	80004d8 <__adddf3>
 801ea7e:	f7e2 f991 	bl	8000da4 <__aeabi_d2iz>
 801ea82:	4683      	mov	fp, r0
 801ea84:	f7e1 fe74 	bl	8000770 <__aeabi_i2d>
 801ea88:	4602      	mov	r2, r0
 801ea8a:	460b      	mov	r3, r1
 801ea8c:	ec43 2b18 	vmov	d8, r2, r3
 801ea90:	a367      	add	r3, pc, #412	; (adr r3, 801ec30 <__ieee754_rem_pio2+0x300>)
 801ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea96:	f7e1 fed5 	bl	8000844 <__aeabi_dmul>
 801ea9a:	4602      	mov	r2, r0
 801ea9c:	460b      	mov	r3, r1
 801ea9e:	4620      	mov	r0, r4
 801eaa0:	4629      	mov	r1, r5
 801eaa2:	f7e1 fd17 	bl	80004d4 <__aeabi_dsub>
 801eaa6:	4606      	mov	r6, r0
 801eaa8:	460f      	mov	r7, r1
 801eaaa:	a363      	add	r3, pc, #396	; (adr r3, 801ec38 <__ieee754_rem_pio2+0x308>)
 801eaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eab0:	ec51 0b18 	vmov	r0, r1, d8
 801eab4:	f7e1 fec6 	bl	8000844 <__aeabi_dmul>
 801eab8:	f1bb 0f1f 	cmp.w	fp, #31
 801eabc:	4604      	mov	r4, r0
 801eabe:	460d      	mov	r5, r1
 801eac0:	dc0d      	bgt.n	801eade <__ieee754_rem_pio2+0x1ae>
 801eac2:	f10b 32ff 	add.w	r2, fp, #4294967295
 801eac6:	4b6d      	ldr	r3, [pc, #436]	; (801ec7c <__ieee754_rem_pio2+0x34c>)
 801eac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eacc:	4543      	cmp	r3, r8
 801eace:	d006      	beq.n	801eade <__ieee754_rem_pio2+0x1ae>
 801ead0:	4622      	mov	r2, r4
 801ead2:	462b      	mov	r3, r5
 801ead4:	4630      	mov	r0, r6
 801ead6:	4639      	mov	r1, r7
 801ead8:	f7e1 fcfc 	bl	80004d4 <__aeabi_dsub>
 801eadc:	e00f      	b.n	801eafe <__ieee754_rem_pio2+0x1ce>
 801eade:	462b      	mov	r3, r5
 801eae0:	4622      	mov	r2, r4
 801eae2:	4630      	mov	r0, r6
 801eae4:	4639      	mov	r1, r7
 801eae6:	f7e1 fcf5 	bl	80004d4 <__aeabi_dsub>
 801eaea:	ea4f 5328 	mov.w	r3, r8, asr #20
 801eaee:	9303      	str	r3, [sp, #12]
 801eaf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801eaf4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801eaf8:	f1b8 0f10 	cmp.w	r8, #16
 801eafc:	dc02      	bgt.n	801eb04 <__ieee754_rem_pio2+0x1d4>
 801eafe:	e9ca 0100 	strd	r0, r1, [sl]
 801eb02:	e039      	b.n	801eb78 <__ieee754_rem_pio2+0x248>
 801eb04:	a34e      	add	r3, pc, #312	; (adr r3, 801ec40 <__ieee754_rem_pio2+0x310>)
 801eb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb0a:	ec51 0b18 	vmov	r0, r1, d8
 801eb0e:	f7e1 fe99 	bl	8000844 <__aeabi_dmul>
 801eb12:	4604      	mov	r4, r0
 801eb14:	460d      	mov	r5, r1
 801eb16:	4602      	mov	r2, r0
 801eb18:	460b      	mov	r3, r1
 801eb1a:	4630      	mov	r0, r6
 801eb1c:	4639      	mov	r1, r7
 801eb1e:	f7e1 fcd9 	bl	80004d4 <__aeabi_dsub>
 801eb22:	4602      	mov	r2, r0
 801eb24:	460b      	mov	r3, r1
 801eb26:	4680      	mov	r8, r0
 801eb28:	4689      	mov	r9, r1
 801eb2a:	4630      	mov	r0, r6
 801eb2c:	4639      	mov	r1, r7
 801eb2e:	f7e1 fcd1 	bl	80004d4 <__aeabi_dsub>
 801eb32:	4622      	mov	r2, r4
 801eb34:	462b      	mov	r3, r5
 801eb36:	f7e1 fccd 	bl	80004d4 <__aeabi_dsub>
 801eb3a:	4604      	mov	r4, r0
 801eb3c:	460d      	mov	r5, r1
 801eb3e:	a342      	add	r3, pc, #264	; (adr r3, 801ec48 <__ieee754_rem_pio2+0x318>)
 801eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb44:	ec51 0b18 	vmov	r0, r1, d8
 801eb48:	f7e1 fe7c 	bl	8000844 <__aeabi_dmul>
 801eb4c:	4622      	mov	r2, r4
 801eb4e:	462b      	mov	r3, r5
 801eb50:	f7e1 fcc0 	bl	80004d4 <__aeabi_dsub>
 801eb54:	4602      	mov	r2, r0
 801eb56:	460b      	mov	r3, r1
 801eb58:	4604      	mov	r4, r0
 801eb5a:	460d      	mov	r5, r1
 801eb5c:	4640      	mov	r0, r8
 801eb5e:	4649      	mov	r1, r9
 801eb60:	f7e1 fcb8 	bl	80004d4 <__aeabi_dsub>
 801eb64:	9a03      	ldr	r2, [sp, #12]
 801eb66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801eb6a:	1ad3      	subs	r3, r2, r3
 801eb6c:	2b31      	cmp	r3, #49	; 0x31
 801eb6e:	dc24      	bgt.n	801ebba <__ieee754_rem_pio2+0x28a>
 801eb70:	4646      	mov	r6, r8
 801eb72:	464f      	mov	r7, r9
 801eb74:	e9ca 0100 	strd	r0, r1, [sl]
 801eb78:	e9da 8900 	ldrd	r8, r9, [sl]
 801eb7c:	4630      	mov	r0, r6
 801eb7e:	4639      	mov	r1, r7
 801eb80:	4642      	mov	r2, r8
 801eb82:	464b      	mov	r3, r9
 801eb84:	f7e1 fca6 	bl	80004d4 <__aeabi_dsub>
 801eb88:	462b      	mov	r3, r5
 801eb8a:	4622      	mov	r2, r4
 801eb8c:	f7e1 fca2 	bl	80004d4 <__aeabi_dsub>
 801eb90:	9b02      	ldr	r3, [sp, #8]
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801eb98:	f6bf af0a 	bge.w	801e9b0 <__ieee754_rem_pio2+0x80>
 801eb9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801eba0:	f8ca 8000 	str.w	r8, [sl]
 801eba4:	f8ca 0008 	str.w	r0, [sl, #8]
 801eba8:	f8ca 3004 	str.w	r3, [sl, #4]
 801ebac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ebb0:	f8ca 300c 	str.w	r3, [sl, #12]
 801ebb4:	f1cb 0b00 	rsb	fp, fp, #0
 801ebb8:	e6fa      	b.n	801e9b0 <__ieee754_rem_pio2+0x80>
 801ebba:	a327      	add	r3, pc, #156	; (adr r3, 801ec58 <__ieee754_rem_pio2+0x328>)
 801ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc0:	ec51 0b18 	vmov	r0, r1, d8
 801ebc4:	f7e1 fe3e 	bl	8000844 <__aeabi_dmul>
 801ebc8:	4604      	mov	r4, r0
 801ebca:	460d      	mov	r5, r1
 801ebcc:	4602      	mov	r2, r0
 801ebce:	460b      	mov	r3, r1
 801ebd0:	4640      	mov	r0, r8
 801ebd2:	4649      	mov	r1, r9
 801ebd4:	f7e1 fc7e 	bl	80004d4 <__aeabi_dsub>
 801ebd8:	4602      	mov	r2, r0
 801ebda:	460b      	mov	r3, r1
 801ebdc:	4606      	mov	r6, r0
 801ebde:	460f      	mov	r7, r1
 801ebe0:	4640      	mov	r0, r8
 801ebe2:	4649      	mov	r1, r9
 801ebe4:	f7e1 fc76 	bl	80004d4 <__aeabi_dsub>
 801ebe8:	4622      	mov	r2, r4
 801ebea:	462b      	mov	r3, r5
 801ebec:	f7e1 fc72 	bl	80004d4 <__aeabi_dsub>
 801ebf0:	4604      	mov	r4, r0
 801ebf2:	460d      	mov	r5, r1
 801ebf4:	a31a      	add	r3, pc, #104	; (adr r3, 801ec60 <__ieee754_rem_pio2+0x330>)
 801ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebfa:	ec51 0b18 	vmov	r0, r1, d8
 801ebfe:	f7e1 fe21 	bl	8000844 <__aeabi_dmul>
 801ec02:	4622      	mov	r2, r4
 801ec04:	462b      	mov	r3, r5
 801ec06:	f7e1 fc65 	bl	80004d4 <__aeabi_dsub>
 801ec0a:	4604      	mov	r4, r0
 801ec0c:	460d      	mov	r5, r1
 801ec0e:	e75f      	b.n	801ead0 <__ieee754_rem_pio2+0x1a0>
 801ec10:	4b1b      	ldr	r3, [pc, #108]	; (801ec80 <__ieee754_rem_pio2+0x350>)
 801ec12:	4598      	cmp	r8, r3
 801ec14:	dd36      	ble.n	801ec84 <__ieee754_rem_pio2+0x354>
 801ec16:	ee10 2a10 	vmov	r2, s0
 801ec1a:	462b      	mov	r3, r5
 801ec1c:	4620      	mov	r0, r4
 801ec1e:	4629      	mov	r1, r5
 801ec20:	f7e1 fc58 	bl	80004d4 <__aeabi_dsub>
 801ec24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ec28:	e9ca 0100 	strd	r0, r1, [sl]
 801ec2c:	e694      	b.n	801e958 <__ieee754_rem_pio2+0x28>
 801ec2e:	bf00      	nop
 801ec30:	54400000 	.word	0x54400000
 801ec34:	3ff921fb 	.word	0x3ff921fb
 801ec38:	1a626331 	.word	0x1a626331
 801ec3c:	3dd0b461 	.word	0x3dd0b461
 801ec40:	1a600000 	.word	0x1a600000
 801ec44:	3dd0b461 	.word	0x3dd0b461
 801ec48:	2e037073 	.word	0x2e037073
 801ec4c:	3ba3198a 	.word	0x3ba3198a
 801ec50:	6dc9c883 	.word	0x6dc9c883
 801ec54:	3fe45f30 	.word	0x3fe45f30
 801ec58:	2e000000 	.word	0x2e000000
 801ec5c:	3ba3198a 	.word	0x3ba3198a
 801ec60:	252049c1 	.word	0x252049c1
 801ec64:	397b839a 	.word	0x397b839a
 801ec68:	3fe921fb 	.word	0x3fe921fb
 801ec6c:	4002d97b 	.word	0x4002d97b
 801ec70:	3ff921fb 	.word	0x3ff921fb
 801ec74:	413921fb 	.word	0x413921fb
 801ec78:	3fe00000 	.word	0x3fe00000
 801ec7c:	08023c00 	.word	0x08023c00
 801ec80:	7fefffff 	.word	0x7fefffff
 801ec84:	ea4f 5428 	mov.w	r4, r8, asr #20
 801ec88:	ee10 0a10 	vmov	r0, s0
 801ec8c:	ee10 6a10 	vmov	r6, s0
 801ec90:	ad04      	add	r5, sp, #16
 801ec92:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801ec96:	46a9      	mov	r9, r5
 801ec98:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801ec9c:	f04f 0803 	mov.w	r8, #3
 801eca0:	460f      	mov	r7, r1
 801eca2:	f7e2 f87f 	bl	8000da4 <__aeabi_d2iz>
 801eca6:	f7e1 fd63 	bl	8000770 <__aeabi_i2d>
 801ecaa:	4602      	mov	r2, r0
 801ecac:	460b      	mov	r3, r1
 801ecae:	4630      	mov	r0, r6
 801ecb0:	4639      	mov	r1, r7
 801ecb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ecb6:	f7e1 fc0d 	bl	80004d4 <__aeabi_dsub>
 801ecba:	2200      	movs	r2, #0
 801ecbc:	4b20      	ldr	r3, [pc, #128]	; (801ed40 <__ieee754_rem_pio2+0x410>)
 801ecbe:	f7e1 fdc1 	bl	8000844 <__aeabi_dmul>
 801ecc2:	460f      	mov	r7, r1
 801ecc4:	4606      	mov	r6, r0
 801ecc6:	f7e2 f86d 	bl	8000da4 <__aeabi_d2iz>
 801ecca:	f7e1 fd51 	bl	8000770 <__aeabi_i2d>
 801ecce:	4602      	mov	r2, r0
 801ecd0:	460b      	mov	r3, r1
 801ecd2:	4630      	mov	r0, r6
 801ecd4:	4639      	mov	r1, r7
 801ecd6:	2600      	movs	r6, #0
 801ecd8:	2700      	movs	r7, #0
 801ecda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ecde:	f7e1 fbf9 	bl	80004d4 <__aeabi_dsub>
 801ece2:	2200      	movs	r2, #0
 801ece4:	4b16      	ldr	r3, [pc, #88]	; (801ed40 <__ieee754_rem_pio2+0x410>)
 801ece6:	f7e1 fdad 	bl	8000844 <__aeabi_dmul>
 801ecea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ecee:	4632      	mov	r2, r6
 801ecf0:	463b      	mov	r3, r7
 801ecf2:	46c3      	mov	fp, r8
 801ecf4:	3d08      	subs	r5, #8
 801ecf6:	f108 38ff 	add.w	r8, r8, #4294967295
 801ecfa:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 801ecfe:	f7e2 f809 	bl	8000d14 <__aeabi_dcmpeq>
 801ed02:	2800      	cmp	r0, #0
 801ed04:	d1f3      	bne.n	801ecee <__ieee754_rem_pio2+0x3be>
 801ed06:	4b0f      	ldr	r3, [pc, #60]	; (801ed44 <__ieee754_rem_pio2+0x414>)
 801ed08:	4622      	mov	r2, r4
 801ed0a:	4651      	mov	r1, sl
 801ed0c:	4648      	mov	r0, r9
 801ed0e:	9301      	str	r3, [sp, #4]
 801ed10:	2302      	movs	r3, #2
 801ed12:	9300      	str	r3, [sp, #0]
 801ed14:	465b      	mov	r3, fp
 801ed16:	f000 fabf 	bl	801f298 <__kernel_rem_pio2>
 801ed1a:	9b02      	ldr	r3, [sp, #8]
 801ed1c:	4683      	mov	fp, r0
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	f6bf ae46 	bge.w	801e9b0 <__ieee754_rem_pio2+0x80>
 801ed24:	e9da 2100 	ldrd	r2, r1, [sl]
 801ed28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed2c:	e9ca 2300 	strd	r2, r3, [sl]
 801ed30:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801ed34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed38:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801ed3c:	e73a      	b.n	801ebb4 <__ieee754_rem_pio2+0x284>
 801ed3e:	bf00      	nop
 801ed40:	41700000 	.word	0x41700000
 801ed44:	08023c80 	.word	0x08023c80

0801ed48 <__ieee754_atan2f>:
 801ed48:	ee10 2a90 	vmov	r2, s1
 801ed4c:	eef0 7a40 	vmov.f32	s15, s0
 801ed50:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801ed54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ed58:	b510      	push	{r4, lr}
 801ed5a:	dc06      	bgt.n	801ed6a <__ieee754_atan2f+0x22>
 801ed5c:	ee10 0a10 	vmov	r0, s0
 801ed60:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801ed64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ed68:	dd04      	ble.n	801ed74 <__ieee754_atan2f+0x2c>
 801ed6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ed6e:	eeb0 0a67 	vmov.f32	s0, s15
 801ed72:	bd10      	pop	{r4, pc}
 801ed74:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801ed78:	d103      	bne.n	801ed82 <__ieee754_atan2f+0x3a>
 801ed7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed7e:	f001 ba51 	b.w	8020224 <atanf>
 801ed82:	1794      	asrs	r4, r2, #30
 801ed84:	f004 0402 	and.w	r4, r4, #2
 801ed88:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801ed8c:	b93b      	cbnz	r3, 801ed9e <__ieee754_atan2f+0x56>
 801ed8e:	2c02      	cmp	r4, #2
 801ed90:	d05c      	beq.n	801ee4c <__ieee754_atan2f+0x104>
 801ed92:	2c03      	cmp	r4, #3
 801ed94:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801ee60 <__ieee754_atan2f+0x118>
 801ed98:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801ed9c:	e7e7      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801ed9e:	b939      	cbnz	r1, 801edb0 <__ieee754_atan2f+0x68>
 801eda0:	2800      	cmp	r0, #0
 801eda2:	eddf 7a30 	vldr	s15, [pc, #192]	; 801ee64 <__ieee754_atan2f+0x11c>
 801eda6:	ed9f 0a30 	vldr	s0, [pc, #192]	; 801ee68 <__ieee754_atan2f+0x120>
 801edaa:	fe67 7a80 	vselge.f32	s15, s15, s0
 801edae:	e7de      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801edb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801edb4:	d110      	bne.n	801edd8 <__ieee754_atan2f+0x90>
 801edb6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801edba:	f104 34ff 	add.w	r4, r4, #4294967295
 801edbe:	d107      	bne.n	801edd0 <__ieee754_atan2f+0x88>
 801edc0:	2c02      	cmp	r4, #2
 801edc2:	d846      	bhi.n	801ee52 <__ieee754_atan2f+0x10a>
 801edc4:	4b29      	ldr	r3, [pc, #164]	; (801ee6c <__ieee754_atan2f+0x124>)
 801edc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801edca:	edd4 7a00 	vldr	s15, [r4]
 801edce:	e7ce      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801edd0:	2c02      	cmp	r4, #2
 801edd2:	d841      	bhi.n	801ee58 <__ieee754_atan2f+0x110>
 801edd4:	4b26      	ldr	r3, [pc, #152]	; (801ee70 <__ieee754_atan2f+0x128>)
 801edd6:	e7f6      	b.n	801edc6 <__ieee754_atan2f+0x7e>
 801edd8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801eddc:	d0e0      	beq.n	801eda0 <__ieee754_atan2f+0x58>
 801edde:	1a5b      	subs	r3, r3, r1
 801ede0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801ede4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801ede8:	da1a      	bge.n	801ee20 <__ieee754_atan2f+0xd8>
 801edea:	2a00      	cmp	r2, #0
 801edec:	da01      	bge.n	801edf2 <__ieee754_atan2f+0xaa>
 801edee:	313c      	adds	r1, #60	; 0x3c
 801edf0:	db19      	blt.n	801ee26 <__ieee754_atan2f+0xde>
 801edf2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801edf6:	f001 fae9 	bl	80203cc <fabsf>
 801edfa:	f001 fa13 	bl	8020224 <atanf>
 801edfe:	eef0 7a40 	vmov.f32	s15, s0
 801ee02:	2c01      	cmp	r4, #1
 801ee04:	d012      	beq.n	801ee2c <__ieee754_atan2f+0xe4>
 801ee06:	2c02      	cmp	r4, #2
 801ee08:	d017      	beq.n	801ee3a <__ieee754_atan2f+0xf2>
 801ee0a:	2c00      	cmp	r4, #0
 801ee0c:	d0af      	beq.n	801ed6e <__ieee754_atan2f+0x26>
 801ee0e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801ee74 <__ieee754_atan2f+0x12c>
 801ee12:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ee16:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801ee78 <__ieee754_atan2f+0x130>
 801ee1a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ee1e:	e7a6      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801ee20:	eddf 7a10 	vldr	s15, [pc, #64]	; 801ee64 <__ieee754_atan2f+0x11c>
 801ee24:	e7ed      	b.n	801ee02 <__ieee754_atan2f+0xba>
 801ee26:	eddf 7a15 	vldr	s15, [pc, #84]	; 801ee7c <__ieee754_atan2f+0x134>
 801ee2a:	e7ea      	b.n	801ee02 <__ieee754_atan2f+0xba>
 801ee2c:	ee17 3a90 	vmov	r3, s15
 801ee30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ee34:	ee07 3a90 	vmov	s15, r3
 801ee38:	e799      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801ee3a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801ee74 <__ieee754_atan2f+0x12c>
 801ee3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ee42:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801ee78 <__ieee754_atan2f+0x130>
 801ee46:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ee4a:	e790      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801ee4c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801ee78 <__ieee754_atan2f+0x130>
 801ee50:	e78d      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801ee52:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801ee80 <__ieee754_atan2f+0x138>
 801ee56:	e78a      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801ee58:	eddf 7a08 	vldr	s15, [pc, #32]	; 801ee7c <__ieee754_atan2f+0x134>
 801ee5c:	e787      	b.n	801ed6e <__ieee754_atan2f+0x26>
 801ee5e:	bf00      	nop
 801ee60:	c0490fdb 	.word	0xc0490fdb
 801ee64:	3fc90fdb 	.word	0x3fc90fdb
 801ee68:	bfc90fdb 	.word	0xbfc90fdb
 801ee6c:	08023d88 	.word	0x08023d88
 801ee70:	08023d94 	.word	0x08023d94
 801ee74:	33bbbd2e 	.word	0x33bbbd2e
 801ee78:	40490fdb 	.word	0x40490fdb
 801ee7c:	00000000 	.word	0x00000000
 801ee80:	3f490fdb 	.word	0x3f490fdb

0801ee84 <__ieee754_rem_pio2f>:
 801ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee86:	ee10 6a10 	vmov	r6, s0
 801ee8a:	4b8e      	ldr	r3, [pc, #568]	; (801f0c4 <__ieee754_rem_pio2f+0x240>)
 801ee8c:	eef0 7a40 	vmov.f32	s15, s0
 801ee90:	b087      	sub	sp, #28
 801ee92:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801ee96:	4604      	mov	r4, r0
 801ee98:	429d      	cmp	r5, r3
 801ee9a:	dc05      	bgt.n	801eea8 <__ieee754_rem_pio2f+0x24>
 801ee9c:	2300      	movs	r3, #0
 801ee9e:	ed80 0a00 	vstr	s0, [r0]
 801eea2:	6043      	str	r3, [r0, #4]
 801eea4:	2000      	movs	r0, #0
 801eea6:	e01a      	b.n	801eede <__ieee754_rem_pio2f+0x5a>
 801eea8:	4b87      	ldr	r3, [pc, #540]	; (801f0c8 <__ieee754_rem_pio2f+0x244>)
 801eeaa:	429d      	cmp	r5, r3
 801eeac:	dc46      	bgt.n	801ef3c <__ieee754_rem_pio2f+0xb8>
 801eeae:	2e00      	cmp	r6, #0
 801eeb0:	f025 050f 	bic.w	r5, r5, #15
 801eeb4:	ed9f 0a85 	vldr	s0, [pc, #532]	; 801f0cc <__ieee754_rem_pio2f+0x248>
 801eeb8:	4b85      	ldr	r3, [pc, #532]	; (801f0d0 <__ieee754_rem_pio2f+0x24c>)
 801eeba:	dd1f      	ble.n	801eefc <__ieee754_rem_pio2f+0x78>
 801eebc:	429d      	cmp	r5, r3
 801eebe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eec2:	d00e      	beq.n	801eee2 <__ieee754_rem_pio2f+0x5e>
 801eec4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801f0d4 <__ieee754_rem_pio2f+0x250>
 801eec8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801eecc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eed0:	ed80 0a00 	vstr	s0, [r0]
 801eed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eed8:	2001      	movs	r0, #1
 801eeda:	edc4 7a01 	vstr	s15, [r4, #4]
 801eede:	b007      	add	sp, #28
 801eee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eee2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801f0d8 <__ieee754_rem_pio2f+0x254>
 801eee6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801f0dc <__ieee754_rem_pio2f+0x258>
 801eeea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eeee:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801eef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801eef6:	edc0 6a00 	vstr	s13, [r0]
 801eefa:	e7eb      	b.n	801eed4 <__ieee754_rem_pio2f+0x50>
 801eefc:	429d      	cmp	r5, r3
 801eefe:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ef02:	d00e      	beq.n	801ef22 <__ieee754_rem_pio2f+0x9e>
 801ef04:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801f0d4 <__ieee754_rem_pio2f+0x250>
 801ef08:	ee37 0a87 	vadd.f32	s0, s15, s14
 801ef0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ef10:	ed80 0a00 	vstr	s0, [r0]
 801ef14:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ef18:	f04f 30ff 	mov.w	r0, #4294967295
 801ef1c:	edc4 7a01 	vstr	s15, [r4, #4]
 801ef20:	e7dd      	b.n	801eede <__ieee754_rem_pio2f+0x5a>
 801ef22:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801f0d8 <__ieee754_rem_pio2f+0x254>
 801ef26:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801f0dc <__ieee754_rem_pio2f+0x258>
 801ef2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ef2e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ef32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ef36:	edc0 6a00 	vstr	s13, [r0]
 801ef3a:	e7eb      	b.n	801ef14 <__ieee754_rem_pio2f+0x90>
 801ef3c:	4b68      	ldr	r3, [pc, #416]	; (801f0e0 <__ieee754_rem_pio2f+0x25c>)
 801ef3e:	429d      	cmp	r5, r3
 801ef40:	dc72      	bgt.n	801f028 <__ieee754_rem_pio2f+0x1a4>
 801ef42:	f001 fa43 	bl	80203cc <fabsf>
 801ef46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ef4a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801f0e4 <__ieee754_rem_pio2f+0x260>
 801ef4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ef52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ef56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ef5a:	ee17 0a90 	vmov	r0, s15
 801ef5e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f0cc <__ieee754_rem_pio2f+0x248>
 801ef62:	281f      	cmp	r0, #31
 801ef64:	eea7 0a67 	vfms.f32	s0, s14, s15
 801ef68:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801f0d4 <__ieee754_rem_pio2f+0x250>
 801ef6c:	eeb1 6a47 	vneg.f32	s12, s14
 801ef70:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef74:	ee70 6a67 	vsub.f32	s13, s0, s15
 801ef78:	ee16 2a90 	vmov	r2, s13
 801ef7c:	dc1c      	bgt.n	801efb8 <__ieee754_rem_pio2f+0x134>
 801ef7e:	1e47      	subs	r7, r0, #1
 801ef80:	4959      	ldr	r1, [pc, #356]	; (801f0e8 <__ieee754_rem_pio2f+0x264>)
 801ef82:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801ef86:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801ef8a:	428b      	cmp	r3, r1
 801ef8c:	d014      	beq.n	801efb8 <__ieee754_rem_pio2f+0x134>
 801ef8e:	6022      	str	r2, [r4, #0]
 801ef90:	ed94 7a00 	vldr	s14, [r4]
 801ef94:	2e00      	cmp	r6, #0
 801ef96:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ef9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ef9e:	ed84 0a01 	vstr	s0, [r4, #4]
 801efa2:	da9c      	bge.n	801eede <__ieee754_rem_pio2f+0x5a>
 801efa4:	eeb1 7a47 	vneg.f32	s14, s14
 801efa8:	eeb1 0a40 	vneg.f32	s0, s0
 801efac:	ed84 7a00 	vstr	s14, [r4]
 801efb0:	ed84 0a01 	vstr	s0, [r4, #4]
 801efb4:	4240      	negs	r0, r0
 801efb6:	e792      	b.n	801eede <__ieee754_rem_pio2f+0x5a>
 801efb8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801efbc:	15eb      	asrs	r3, r5, #23
 801efbe:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801efc2:	2d08      	cmp	r5, #8
 801efc4:	dde3      	ble.n	801ef8e <__ieee754_rem_pio2f+0x10a>
 801efc6:	eef0 6a40 	vmov.f32	s13, s0
 801efca:	eddf 7a43 	vldr	s15, [pc, #268]	; 801f0d8 <__ieee754_rem_pio2f+0x254>
 801efce:	eddf 5a43 	vldr	s11, [pc, #268]	; 801f0dc <__ieee754_rem_pio2f+0x258>
 801efd2:	eee6 6a27 	vfma.f32	s13, s12, s15
 801efd6:	ee30 0a66 	vsub.f32	s0, s0, s13
 801efda:	eea6 0a27 	vfma.f32	s0, s12, s15
 801efde:	eef0 7a40 	vmov.f32	s15, s0
 801efe2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801efe6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801efea:	ee15 2a90 	vmov	r2, s11
 801efee:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801eff2:	1a5b      	subs	r3, r3, r1
 801eff4:	2b19      	cmp	r3, #25
 801eff6:	dc04      	bgt.n	801f002 <__ieee754_rem_pio2f+0x17e>
 801eff8:	eeb0 0a66 	vmov.f32	s0, s13
 801effc:	edc4 5a00 	vstr	s11, [r4]
 801f000:	e7c6      	b.n	801ef90 <__ieee754_rem_pio2f+0x10c>
 801f002:	eeb0 0a66 	vmov.f32	s0, s13
 801f006:	eddf 5a39 	vldr	s11, [pc, #228]	; 801f0ec <__ieee754_rem_pio2f+0x268>
 801f00a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f00e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f012:	eddf 6a37 	vldr	s13, [pc, #220]	; 801f0f0 <__ieee754_rem_pio2f+0x26c>
 801f016:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f01a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f01e:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f022:	ed84 7a00 	vstr	s14, [r4]
 801f026:	e7b3      	b.n	801ef90 <__ieee754_rem_pio2f+0x10c>
 801f028:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f02c:	db06      	blt.n	801f03c <__ieee754_rem_pio2f+0x1b8>
 801f02e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f032:	edc0 7a01 	vstr	s15, [r0, #4]
 801f036:	edc0 7a00 	vstr	s15, [r0]
 801f03a:	e733      	b.n	801eea4 <__ieee754_rem_pio2f+0x20>
 801f03c:	15ea      	asrs	r2, r5, #23
 801f03e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801f0f4 <__ieee754_rem_pio2f+0x270>
 801f042:	3a86      	subs	r2, #134	; 0x86
 801f044:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f048:	ee07 3a90 	vmov	s15, r3
 801f04c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f050:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f058:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f05c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f060:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f064:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f06c:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f070:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f074:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f078:	edcd 7a05 	vstr	s15, [sp, #20]
 801f07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f080:	d11e      	bne.n	801f0c0 <__ieee754_rem_pio2f+0x23c>
 801f082:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f08a:	bf14      	ite	ne
 801f08c:	2302      	movne	r3, #2
 801f08e:	2301      	moveq	r3, #1
 801f090:	4919      	ldr	r1, [pc, #100]	; (801f0f8 <__ieee754_rem_pio2f+0x274>)
 801f092:	a803      	add	r0, sp, #12
 801f094:	9101      	str	r1, [sp, #4]
 801f096:	2102      	movs	r1, #2
 801f098:	9100      	str	r1, [sp, #0]
 801f09a:	4621      	mov	r1, r4
 801f09c:	f000 fd6a 	bl	801fb74 <__kernel_rem_pio2f>
 801f0a0:	2e00      	cmp	r6, #0
 801f0a2:	f6bf af1c 	bge.w	801eede <__ieee754_rem_pio2f+0x5a>
 801f0a6:	edd4 7a00 	vldr	s15, [r4]
 801f0aa:	eef1 7a67 	vneg.f32	s15, s15
 801f0ae:	edc4 7a00 	vstr	s15, [r4]
 801f0b2:	edd4 7a01 	vldr	s15, [r4, #4]
 801f0b6:	eef1 7a67 	vneg.f32	s15, s15
 801f0ba:	edc4 7a01 	vstr	s15, [r4, #4]
 801f0be:	e779      	b.n	801efb4 <__ieee754_rem_pio2f+0x130>
 801f0c0:	2303      	movs	r3, #3
 801f0c2:	e7e5      	b.n	801f090 <__ieee754_rem_pio2f+0x20c>
 801f0c4:	3f490fd8 	.word	0x3f490fd8
 801f0c8:	4016cbe3 	.word	0x4016cbe3
 801f0cc:	3fc90f80 	.word	0x3fc90f80
 801f0d0:	3fc90fd0 	.word	0x3fc90fd0
 801f0d4:	37354443 	.word	0x37354443
 801f0d8:	37354400 	.word	0x37354400
 801f0dc:	2e85a308 	.word	0x2e85a308
 801f0e0:	43490f80 	.word	0x43490f80
 801f0e4:	3f22f984 	.word	0x3f22f984
 801f0e8:	08023da0 	.word	0x08023da0
 801f0ec:	2e85a300 	.word	0x2e85a300
 801f0f0:	248d3132 	.word	0x248d3132
 801f0f4:	43800000 	.word	0x43800000
 801f0f8:	08023e20 	.word	0x08023e20

0801f0fc <__ieee754_sqrtf>:
 801f0fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f100:	4770      	bx	lr
 801f102:	0000      	movs	r0, r0
 801f104:	0000      	movs	r0, r0
	...

0801f108 <__kernel_cos>:
 801f108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f10c:	ec57 6b10 	vmov	r6, r7, d0
 801f110:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801f114:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801f118:	ed8d 1b00 	vstr	d1, [sp]
 801f11c:	da07      	bge.n	801f12e <__kernel_cos+0x26>
 801f11e:	ee10 0a10 	vmov	r0, s0
 801f122:	4639      	mov	r1, r7
 801f124:	f7e1 fe3e 	bl	8000da4 <__aeabi_d2iz>
 801f128:	2800      	cmp	r0, #0
 801f12a:	f000 8088 	beq.w	801f23e <__kernel_cos+0x136>
 801f12e:	4632      	mov	r2, r6
 801f130:	463b      	mov	r3, r7
 801f132:	4630      	mov	r0, r6
 801f134:	4639      	mov	r1, r7
 801f136:	f7e1 fb85 	bl	8000844 <__aeabi_dmul>
 801f13a:	4604      	mov	r4, r0
 801f13c:	460d      	mov	r5, r1
 801f13e:	2200      	movs	r2, #0
 801f140:	4b4f      	ldr	r3, [pc, #316]	; (801f280 <__kernel_cos+0x178>)
 801f142:	f7e1 fb7f 	bl	8000844 <__aeabi_dmul>
 801f146:	4682      	mov	sl, r0
 801f148:	468b      	mov	fp, r1
 801f14a:	4620      	mov	r0, r4
 801f14c:	4629      	mov	r1, r5
 801f14e:	a33e      	add	r3, pc, #248	; (adr r3, 801f248 <__kernel_cos+0x140>)
 801f150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f154:	f7e1 fb76 	bl	8000844 <__aeabi_dmul>
 801f158:	a33d      	add	r3, pc, #244	; (adr r3, 801f250 <__kernel_cos+0x148>)
 801f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f15e:	f7e1 f9bb 	bl	80004d8 <__adddf3>
 801f162:	4622      	mov	r2, r4
 801f164:	462b      	mov	r3, r5
 801f166:	f7e1 fb6d 	bl	8000844 <__aeabi_dmul>
 801f16a:	a33b      	add	r3, pc, #236	; (adr r3, 801f258 <__kernel_cos+0x150>)
 801f16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f170:	f7e1 f9b0 	bl	80004d4 <__aeabi_dsub>
 801f174:	4622      	mov	r2, r4
 801f176:	462b      	mov	r3, r5
 801f178:	f7e1 fb64 	bl	8000844 <__aeabi_dmul>
 801f17c:	a338      	add	r3, pc, #224	; (adr r3, 801f260 <__kernel_cos+0x158>)
 801f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f182:	f7e1 f9a9 	bl	80004d8 <__adddf3>
 801f186:	4622      	mov	r2, r4
 801f188:	462b      	mov	r3, r5
 801f18a:	f7e1 fb5b 	bl	8000844 <__aeabi_dmul>
 801f18e:	a336      	add	r3, pc, #216	; (adr r3, 801f268 <__kernel_cos+0x160>)
 801f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f194:	f7e1 f99e 	bl	80004d4 <__aeabi_dsub>
 801f198:	4622      	mov	r2, r4
 801f19a:	462b      	mov	r3, r5
 801f19c:	f7e1 fb52 	bl	8000844 <__aeabi_dmul>
 801f1a0:	a333      	add	r3, pc, #204	; (adr r3, 801f270 <__kernel_cos+0x168>)
 801f1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1a6:	f7e1 f997 	bl	80004d8 <__adddf3>
 801f1aa:	4622      	mov	r2, r4
 801f1ac:	462b      	mov	r3, r5
 801f1ae:	f7e1 fb49 	bl	8000844 <__aeabi_dmul>
 801f1b2:	4622      	mov	r2, r4
 801f1b4:	462b      	mov	r3, r5
 801f1b6:	f7e1 fb45 	bl	8000844 <__aeabi_dmul>
 801f1ba:	4604      	mov	r4, r0
 801f1bc:	460d      	mov	r5, r1
 801f1be:	4630      	mov	r0, r6
 801f1c0:	4639      	mov	r1, r7
 801f1c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f1c6:	f7e1 fb3d 	bl	8000844 <__aeabi_dmul>
 801f1ca:	460b      	mov	r3, r1
 801f1cc:	4602      	mov	r2, r0
 801f1ce:	4629      	mov	r1, r5
 801f1d0:	4620      	mov	r0, r4
 801f1d2:	f7e1 f97f 	bl	80004d4 <__aeabi_dsub>
 801f1d6:	4b2b      	ldr	r3, [pc, #172]	; (801f284 <__kernel_cos+0x17c>)
 801f1d8:	4606      	mov	r6, r0
 801f1da:	460f      	mov	r7, r1
 801f1dc:	4598      	cmp	r8, r3
 801f1de:	dc10      	bgt.n	801f202 <__kernel_cos+0xfa>
 801f1e0:	4602      	mov	r2, r0
 801f1e2:	460b      	mov	r3, r1
 801f1e4:	4650      	mov	r0, sl
 801f1e6:	4659      	mov	r1, fp
 801f1e8:	f7e1 f974 	bl	80004d4 <__aeabi_dsub>
 801f1ec:	4602      	mov	r2, r0
 801f1ee:	460b      	mov	r3, r1
 801f1f0:	2000      	movs	r0, #0
 801f1f2:	4925      	ldr	r1, [pc, #148]	; (801f288 <__kernel_cos+0x180>)
 801f1f4:	f7e1 f96e 	bl	80004d4 <__aeabi_dsub>
 801f1f8:	ec41 0b10 	vmov	d0, r0, r1
 801f1fc:	b003      	add	sp, #12
 801f1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f202:	4b22      	ldr	r3, [pc, #136]	; (801f28c <__kernel_cos+0x184>)
 801f204:	2400      	movs	r4, #0
 801f206:	2000      	movs	r0, #0
 801f208:	491f      	ldr	r1, [pc, #124]	; (801f288 <__kernel_cos+0x180>)
 801f20a:	4598      	cmp	r8, r3
 801f20c:	4622      	mov	r2, r4
 801f20e:	bfd4      	ite	le
 801f210:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801f214:	4d1e      	ldrgt	r5, [pc, #120]	; (801f290 <__kernel_cos+0x188>)
 801f216:	462b      	mov	r3, r5
 801f218:	f7e1 f95c 	bl	80004d4 <__aeabi_dsub>
 801f21c:	4622      	mov	r2, r4
 801f21e:	4680      	mov	r8, r0
 801f220:	4689      	mov	r9, r1
 801f222:	462b      	mov	r3, r5
 801f224:	4650      	mov	r0, sl
 801f226:	4659      	mov	r1, fp
 801f228:	f7e1 f954 	bl	80004d4 <__aeabi_dsub>
 801f22c:	4632      	mov	r2, r6
 801f22e:	463b      	mov	r3, r7
 801f230:	f7e1 f950 	bl	80004d4 <__aeabi_dsub>
 801f234:	4602      	mov	r2, r0
 801f236:	460b      	mov	r3, r1
 801f238:	4640      	mov	r0, r8
 801f23a:	4649      	mov	r1, r9
 801f23c:	e7da      	b.n	801f1f4 <__kernel_cos+0xec>
 801f23e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801f278 <__kernel_cos+0x170>
 801f242:	e7db      	b.n	801f1fc <__kernel_cos+0xf4>
 801f244:	f3af 8000 	nop.w
 801f248:	be8838d4 	.word	0xbe8838d4
 801f24c:	bda8fae9 	.word	0xbda8fae9
 801f250:	bdb4b1c4 	.word	0xbdb4b1c4
 801f254:	3e21ee9e 	.word	0x3e21ee9e
 801f258:	809c52ad 	.word	0x809c52ad
 801f25c:	3e927e4f 	.word	0x3e927e4f
 801f260:	19cb1590 	.word	0x19cb1590
 801f264:	3efa01a0 	.word	0x3efa01a0
 801f268:	16c15177 	.word	0x16c15177
 801f26c:	3f56c16c 	.word	0x3f56c16c
 801f270:	5555554c 	.word	0x5555554c
 801f274:	3fa55555 	.word	0x3fa55555
 801f278:	00000000 	.word	0x00000000
 801f27c:	3ff00000 	.word	0x3ff00000
 801f280:	3fe00000 	.word	0x3fe00000
 801f284:	3fd33332 	.word	0x3fd33332
 801f288:	3ff00000 	.word	0x3ff00000
 801f28c:	3fe90000 	.word	0x3fe90000
 801f290:	3fd20000 	.word	0x3fd20000
 801f294:	00000000 	.word	0x00000000

0801f298 <__kernel_rem_pio2>:
 801f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f29c:	ed2d 8b02 	vpush	{d8}
 801f2a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801f2a4:	f112 0f14 	cmn.w	r2, #20
 801f2a8:	f04f 0500 	mov.w	r5, #0
 801f2ac:	9308      	str	r3, [sp, #32]
 801f2ae:	bfa8      	it	ge
 801f2b0:	1ed4      	subge	r4, r2, #3
 801f2b2:	4bc3      	ldr	r3, [pc, #780]	; (801f5c0 <__kernel_rem_pio2+0x328>)
 801f2b4:	bfb8      	it	lt
 801f2b6:	2400      	movlt	r4, #0
 801f2b8:	9101      	str	r1, [sp, #4]
 801f2ba:	ae22      	add	r6, sp, #136	; 0x88
 801f2bc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801f2be:	900b      	str	r0, [sp, #44]	; 0x2c
 801f2c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f2c4:	9302      	str	r3, [sp, #8]
 801f2c6:	9b08      	ldr	r3, [sp, #32]
 801f2c8:	f103 33ff 	add.w	r3, r3, #4294967295
 801f2cc:	9306      	str	r3, [sp, #24]
 801f2ce:	bfa4      	itt	ge
 801f2d0:	2318      	movge	r3, #24
 801f2d2:	fb94 f4f3 	sdivge	r4, r4, r3
 801f2d6:	f06f 0317 	mvn.w	r3, #23
 801f2da:	fb04 3303 	mla	r3, r4, r3, r3
 801f2de:	eb03 0a02 	add.w	sl, r3, r2
 801f2e2:	9b02      	ldr	r3, [sp, #8]
 801f2e4:	9a06      	ldr	r2, [sp, #24]
 801f2e6:	eb03 0802 	add.w	r8, r3, r2
 801f2ea:	1aa7      	subs	r7, r4, r2
 801f2ec:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801f2ee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801f5b0 <__kernel_rem_pio2+0x318>
 801f2f2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801f2f6:	4545      	cmp	r5, r8
 801f2f8:	dd13      	ble.n	801f322 <__kernel_rem_pio2+0x8a>
 801f2fa:	aa22      	add	r2, sp, #136	; 0x88
 801f2fc:	9b08      	ldr	r3, [sp, #32]
 801f2fe:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801f302:	f04f 0800 	mov.w	r8, #0
 801f306:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801f30a:	ed9f 8ba9 	vldr	d8, [pc, #676]	; 801f5b0 <__kernel_rem_pio2+0x318>
 801f30e:	9b02      	ldr	r3, [sp, #8]
 801f310:	4598      	cmp	r8, r3
 801f312:	dc2e      	bgt.n	801f372 <__kernel_rem_pio2+0xda>
 801f314:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801f318:	462f      	mov	r7, r5
 801f31a:	2600      	movs	r6, #0
 801f31c:	ed8d 8b04 	vstr	d8, [sp, #16]
 801f320:	e01b      	b.n	801f35a <__kernel_rem_pio2+0xc2>
 801f322:	42ef      	cmn	r7, r5
 801f324:	d407      	bmi.n	801f336 <__kernel_rem_pio2+0x9e>
 801f326:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801f32a:	f7e1 fa21 	bl	8000770 <__aeabi_i2d>
 801f32e:	3501      	adds	r5, #1
 801f330:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f334:	e7df      	b.n	801f2f6 <__kernel_rem_pio2+0x5e>
 801f336:	ec51 0b18 	vmov	r0, r1, d8
 801f33a:	e7f8      	b.n	801f32e <__kernel_rem_pio2+0x96>
 801f33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f340:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f344:	3601      	adds	r6, #1
 801f346:	f7e1 fa7d 	bl	8000844 <__aeabi_dmul>
 801f34a:	4602      	mov	r2, r0
 801f34c:	460b      	mov	r3, r1
 801f34e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f352:	f7e1 f8c1 	bl	80004d8 <__adddf3>
 801f356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f35a:	9b06      	ldr	r3, [sp, #24]
 801f35c:	3f08      	subs	r7, #8
 801f35e:	429e      	cmp	r6, r3
 801f360:	ddec      	ble.n	801f33c <__kernel_rem_pio2+0xa4>
 801f362:	f108 0801 	add.w	r8, r8, #1
 801f366:	3508      	adds	r5, #8
 801f368:	ed9d 7b04 	vldr	d7, [sp, #16]
 801f36c:	ecab 7b02 	vstmia	fp!, {d7}
 801f370:	e7cd      	b.n	801f30e <__kernel_rem_pio2+0x76>
 801f372:	9b02      	ldr	r3, [sp, #8]
 801f374:	aa0e      	add	r2, sp, #56	; 0x38
 801f376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f37a:	930d      	str	r3, [sp, #52]	; 0x34
 801f37c:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801f37e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801f382:	9c02      	ldr	r4, [sp, #8]
 801f384:	930c      	str	r3, [sp, #48]	; 0x30
 801f386:	00e3      	lsls	r3, r4, #3
 801f388:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801f38c:	46a1      	mov	r9, r4
 801f38e:	930a      	str	r3, [sp, #40]	; 0x28
 801f390:	ab9a      	add	r3, sp, #616	; 0x268
 801f392:	46c3      	mov	fp, r8
 801f394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f398:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801f39c:	ab72      	add	r3, sp, #456	; 0x1c8
 801f39e:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801f3a2:	f1b9 0f00 	cmp.w	r9, #0
 801f3a6:	f1a5 0508 	sub.w	r5, r5, #8
 801f3aa:	dc77      	bgt.n	801f49c <__kernel_rem_pio2+0x204>
 801f3ac:	4650      	mov	r0, sl
 801f3ae:	ec47 6b10 	vmov	d0, r6, r7
 801f3b2:	f000 feb1 	bl	8020118 <scalbn>
 801f3b6:	2200      	movs	r2, #0
 801f3b8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801f3bc:	ee10 0a10 	vmov	r0, s0
 801f3c0:	ec57 6b10 	vmov	r6, r7, d0
 801f3c4:	4639      	mov	r1, r7
 801f3c6:	f7e1 fa3d 	bl	8000844 <__aeabi_dmul>
 801f3ca:	ec41 0b10 	vmov	d0, r0, r1
 801f3ce:	f7ff f923 	bl	801e618 <floor>
 801f3d2:	2200      	movs	r2, #0
 801f3d4:	4b7b      	ldr	r3, [pc, #492]	; (801f5c4 <__kernel_rem_pio2+0x32c>)
 801f3d6:	ec51 0b10 	vmov	r0, r1, d0
 801f3da:	f7e1 fa33 	bl	8000844 <__aeabi_dmul>
 801f3de:	4602      	mov	r2, r0
 801f3e0:	460b      	mov	r3, r1
 801f3e2:	4630      	mov	r0, r6
 801f3e4:	4639      	mov	r1, r7
 801f3e6:	f7e1 f875 	bl	80004d4 <__aeabi_dsub>
 801f3ea:	460f      	mov	r7, r1
 801f3ec:	4606      	mov	r6, r0
 801f3ee:	f7e1 fcd9 	bl	8000da4 <__aeabi_d2iz>
 801f3f2:	9004      	str	r0, [sp, #16]
 801f3f4:	f7e1 f9bc 	bl	8000770 <__aeabi_i2d>
 801f3f8:	4602      	mov	r2, r0
 801f3fa:	460b      	mov	r3, r1
 801f3fc:	4630      	mov	r0, r6
 801f3fe:	4639      	mov	r1, r7
 801f400:	f7e1 f868 	bl	80004d4 <__aeabi_dsub>
 801f404:	f1ba 0f00 	cmp.w	sl, #0
 801f408:	4606      	mov	r6, r0
 801f40a:	460f      	mov	r7, r1
 801f40c:	dd6d      	ble.n	801f4ea <__kernel_rem_pio2+0x252>
 801f40e:	1e62      	subs	r2, r4, #1
 801f410:	ab0e      	add	r3, sp, #56	; 0x38
 801f412:	f1ca 0118 	rsb	r1, sl, #24
 801f416:	9d04      	ldr	r5, [sp, #16]
 801f418:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f41c:	fa40 f301 	asr.w	r3, r0, r1
 801f420:	441d      	add	r5, r3
 801f422:	408b      	lsls	r3, r1
 801f424:	1ac0      	subs	r0, r0, r3
 801f426:	ab0e      	add	r3, sp, #56	; 0x38
 801f428:	9504      	str	r5, [sp, #16]
 801f42a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801f42e:	f1ca 0317 	rsb	r3, sl, #23
 801f432:	fa40 fb03 	asr.w	fp, r0, r3
 801f436:	f1bb 0f00 	cmp.w	fp, #0
 801f43a:	dd65      	ble.n	801f508 <__kernel_rem_pio2+0x270>
 801f43c:	9b04      	ldr	r3, [sp, #16]
 801f43e:	2200      	movs	r2, #0
 801f440:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801f444:	3301      	adds	r3, #1
 801f446:	4615      	mov	r5, r2
 801f448:	9304      	str	r3, [sp, #16]
 801f44a:	4294      	cmp	r4, r2
 801f44c:	f300 809c 	bgt.w	801f588 <__kernel_rem_pio2+0x2f0>
 801f450:	f1ba 0f00 	cmp.w	sl, #0
 801f454:	dd07      	ble.n	801f466 <__kernel_rem_pio2+0x1ce>
 801f456:	f1ba 0f01 	cmp.w	sl, #1
 801f45a:	f000 80bf 	beq.w	801f5dc <__kernel_rem_pio2+0x344>
 801f45e:	f1ba 0f02 	cmp.w	sl, #2
 801f462:	f000 80c5 	beq.w	801f5f0 <__kernel_rem_pio2+0x358>
 801f466:	f1bb 0f02 	cmp.w	fp, #2
 801f46a:	d14d      	bne.n	801f508 <__kernel_rem_pio2+0x270>
 801f46c:	4632      	mov	r2, r6
 801f46e:	463b      	mov	r3, r7
 801f470:	2000      	movs	r0, #0
 801f472:	4955      	ldr	r1, [pc, #340]	; (801f5c8 <__kernel_rem_pio2+0x330>)
 801f474:	f7e1 f82e 	bl	80004d4 <__aeabi_dsub>
 801f478:	4606      	mov	r6, r0
 801f47a:	460f      	mov	r7, r1
 801f47c:	2d00      	cmp	r5, #0
 801f47e:	d043      	beq.n	801f508 <__kernel_rem_pio2+0x270>
 801f480:	4650      	mov	r0, sl
 801f482:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801f5b8 <__kernel_rem_pio2+0x320>
 801f486:	f000 fe47 	bl	8020118 <scalbn>
 801f48a:	4630      	mov	r0, r6
 801f48c:	4639      	mov	r1, r7
 801f48e:	ec53 2b10 	vmov	r2, r3, d0
 801f492:	f7e1 f81f 	bl	80004d4 <__aeabi_dsub>
 801f496:	4606      	mov	r6, r0
 801f498:	460f      	mov	r7, r1
 801f49a:	e035      	b.n	801f508 <__kernel_rem_pio2+0x270>
 801f49c:	2200      	movs	r2, #0
 801f49e:	4b4b      	ldr	r3, [pc, #300]	; (801f5cc <__kernel_rem_pio2+0x334>)
 801f4a0:	4630      	mov	r0, r6
 801f4a2:	4639      	mov	r1, r7
 801f4a4:	f7e1 f9ce 	bl	8000844 <__aeabi_dmul>
 801f4a8:	f109 39ff 	add.w	r9, r9, #4294967295
 801f4ac:	f7e1 fc7a 	bl	8000da4 <__aeabi_d2iz>
 801f4b0:	f7e1 f95e 	bl	8000770 <__aeabi_i2d>
 801f4b4:	4602      	mov	r2, r0
 801f4b6:	460b      	mov	r3, r1
 801f4b8:	ec43 2b18 	vmov	d8, r2, r3
 801f4bc:	2200      	movs	r2, #0
 801f4be:	4b44      	ldr	r3, [pc, #272]	; (801f5d0 <__kernel_rem_pio2+0x338>)
 801f4c0:	f7e1 f9c0 	bl	8000844 <__aeabi_dmul>
 801f4c4:	4602      	mov	r2, r0
 801f4c6:	460b      	mov	r3, r1
 801f4c8:	4630      	mov	r0, r6
 801f4ca:	4639      	mov	r1, r7
 801f4cc:	f7e1 f802 	bl	80004d4 <__aeabi_dsub>
 801f4d0:	f7e1 fc68 	bl	8000da4 <__aeabi_d2iz>
 801f4d4:	f84b 0b04 	str.w	r0, [fp], #4
 801f4d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f4dc:	ec51 0b18 	vmov	r0, r1, d8
 801f4e0:	f7e0 fffa 	bl	80004d8 <__adddf3>
 801f4e4:	4606      	mov	r6, r0
 801f4e6:	460f      	mov	r7, r1
 801f4e8:	e75b      	b.n	801f3a2 <__kernel_rem_pio2+0x10a>
 801f4ea:	d106      	bne.n	801f4fa <__kernel_rem_pio2+0x262>
 801f4ec:	1e63      	subs	r3, r4, #1
 801f4ee:	aa0e      	add	r2, sp, #56	; 0x38
 801f4f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f4f4:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801f4f8:	e79d      	b.n	801f436 <__kernel_rem_pio2+0x19e>
 801f4fa:	2200      	movs	r2, #0
 801f4fc:	4b35      	ldr	r3, [pc, #212]	; (801f5d4 <__kernel_rem_pio2+0x33c>)
 801f4fe:	f7e1 fc27 	bl	8000d50 <__aeabi_dcmpge>
 801f502:	2800      	cmp	r0, #0
 801f504:	d13d      	bne.n	801f582 <__kernel_rem_pio2+0x2ea>
 801f506:	4683      	mov	fp, r0
 801f508:	2200      	movs	r2, #0
 801f50a:	2300      	movs	r3, #0
 801f50c:	4630      	mov	r0, r6
 801f50e:	4639      	mov	r1, r7
 801f510:	f7e1 fc00 	bl	8000d14 <__aeabi_dcmpeq>
 801f514:	2800      	cmp	r0, #0
 801f516:	f000 80bf 	beq.w	801f698 <__kernel_rem_pio2+0x400>
 801f51a:	1e65      	subs	r5, r4, #1
 801f51c:	2200      	movs	r2, #0
 801f51e:	462b      	mov	r3, r5
 801f520:	9902      	ldr	r1, [sp, #8]
 801f522:	428b      	cmp	r3, r1
 801f524:	da6b      	bge.n	801f5fe <__kernel_rem_pio2+0x366>
 801f526:	2a00      	cmp	r2, #0
 801f528:	f000 8088 	beq.w	801f63c <__kernel_rem_pio2+0x3a4>
 801f52c:	ab0e      	add	r3, sp, #56	; 0x38
 801f52e:	f1aa 0a18 	sub.w	sl, sl, #24
 801f532:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801f536:	2b00      	cmp	r3, #0
 801f538:	f000 80ac 	beq.w	801f694 <__kernel_rem_pio2+0x3fc>
 801f53c:	4650      	mov	r0, sl
 801f53e:	00ec      	lsls	r4, r5, #3
 801f540:	46aa      	mov	sl, r5
 801f542:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 801f5b8 <__kernel_rem_pio2+0x320>
 801f546:	f000 fde7 	bl	8020118 <scalbn>
 801f54a:	ab9a      	add	r3, sp, #616	; 0x268
 801f54c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f550:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801f554:	ec57 6b10 	vmov	r6, r7, d0
 801f558:	f1ba 0f00 	cmp.w	sl, #0
 801f55c:	f280 80d5 	bge.w	801f70a <__kernel_rem_pio2+0x472>
 801f560:	462e      	mov	r6, r5
 801f562:	ed9f 8b13 	vldr	d8, [pc, #76]	; 801f5b0 <__kernel_rem_pio2+0x318>
 801f566:	2e00      	cmp	r6, #0
 801f568:	f2c0 8103 	blt.w	801f772 <__kernel_rem_pio2+0x4da>
 801f56c:	ab72      	add	r3, sp, #456	; 0x1c8
 801f56e:	f8df a068 	ldr.w	sl, [pc, #104]	; 801f5d8 <__kernel_rem_pio2+0x340>
 801f572:	f04f 0800 	mov.w	r8, #0
 801f576:	1baf      	subs	r7, r5, r6
 801f578:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801f57c:	ed8d 8b06 	vstr	d8, [sp, #24]
 801f580:	e0e9      	b.n	801f756 <__kernel_rem_pio2+0x4be>
 801f582:	f04f 0b02 	mov.w	fp, #2
 801f586:	e759      	b.n	801f43c <__kernel_rem_pio2+0x1a4>
 801f588:	f8d8 3000 	ldr.w	r3, [r8]
 801f58c:	b955      	cbnz	r5, 801f5a4 <__kernel_rem_pio2+0x30c>
 801f58e:	b123      	cbz	r3, 801f59a <__kernel_rem_pio2+0x302>
 801f590:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801f594:	f8c8 3000 	str.w	r3, [r8]
 801f598:	2301      	movs	r3, #1
 801f59a:	3201      	adds	r2, #1
 801f59c:	f108 0804 	add.w	r8, r8, #4
 801f5a0:	461d      	mov	r5, r3
 801f5a2:	e752      	b.n	801f44a <__kernel_rem_pio2+0x1b2>
 801f5a4:	1acb      	subs	r3, r1, r3
 801f5a6:	f8c8 3000 	str.w	r3, [r8]
 801f5aa:	462b      	mov	r3, r5
 801f5ac:	e7f5      	b.n	801f59a <__kernel_rem_pio2+0x302>
 801f5ae:	bf00      	nop
	...
 801f5bc:	3ff00000 	.word	0x3ff00000
 801f5c0:	08024178 	.word	0x08024178
 801f5c4:	40200000 	.word	0x40200000
 801f5c8:	3ff00000 	.word	0x3ff00000
 801f5cc:	3e700000 	.word	0x3e700000
 801f5d0:	41700000 	.word	0x41700000
 801f5d4:	3fe00000 	.word	0x3fe00000
 801f5d8:	08024138 	.word	0x08024138
 801f5dc:	1e62      	subs	r2, r4, #1
 801f5de:	ab0e      	add	r3, sp, #56	; 0x38
 801f5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f5e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f5e8:	a90e      	add	r1, sp, #56	; 0x38
 801f5ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f5ee:	e73a      	b.n	801f466 <__kernel_rem_pio2+0x1ce>
 801f5f0:	1e62      	subs	r2, r4, #1
 801f5f2:	ab0e      	add	r3, sp, #56	; 0x38
 801f5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f5f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f5fc:	e7f4      	b.n	801f5e8 <__kernel_rem_pio2+0x350>
 801f5fe:	a90e      	add	r1, sp, #56	; 0x38
 801f600:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f604:	3b01      	subs	r3, #1
 801f606:	430a      	orrs	r2, r1
 801f608:	e78a      	b.n	801f520 <__kernel_rem_pio2+0x288>
 801f60a:	3301      	adds	r3, #1
 801f60c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801f610:	2900      	cmp	r1, #0
 801f612:	d0fa      	beq.n	801f60a <__kernel_rem_pio2+0x372>
 801f614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f616:	18e3      	adds	r3, r4, r3
 801f618:	f104 0801 	add.w	r8, r4, #1
 801f61c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801f620:	9304      	str	r3, [sp, #16]
 801f622:	446a      	add	r2, sp
 801f624:	3a98      	subs	r2, #152	; 0x98
 801f626:	920a      	str	r2, [sp, #40]	; 0x28
 801f628:	9a08      	ldr	r2, [sp, #32]
 801f62a:	18a5      	adds	r5, r4, r2
 801f62c:	aa22      	add	r2, sp, #136	; 0x88
 801f62e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801f632:	9b04      	ldr	r3, [sp, #16]
 801f634:	4543      	cmp	r3, r8
 801f636:	da04      	bge.n	801f642 <__kernel_rem_pio2+0x3aa>
 801f638:	461c      	mov	r4, r3
 801f63a:	e6a4      	b.n	801f386 <__kernel_rem_pio2+0xee>
 801f63c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f63e:	2301      	movs	r3, #1
 801f640:	e7e4      	b.n	801f60c <__kernel_rem_pio2+0x374>
 801f642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f644:	f04f 0900 	mov.w	r9, #0
 801f648:	2600      	movs	r6, #0
 801f64a:	2700      	movs	r7, #0
 801f64c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801f650:	f7e1 f88e 	bl	8000770 <__aeabi_i2d>
 801f654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f656:	e8e5 0102 	strd	r0, r1, [r5], #8
 801f65a:	461c      	mov	r4, r3
 801f65c:	46ab      	mov	fp, r5
 801f65e:	9b06      	ldr	r3, [sp, #24]
 801f660:	4599      	cmp	r9, r3
 801f662:	dd06      	ble.n	801f672 <__kernel_rem_pio2+0x3da>
 801f664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f666:	f108 0801 	add.w	r8, r8, #1
 801f66a:	e8e3 6702 	strd	r6, r7, [r3], #8
 801f66e:	930a      	str	r3, [sp, #40]	; 0x28
 801f670:	e7df      	b.n	801f632 <__kernel_rem_pio2+0x39a>
 801f672:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801f676:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801f67a:	f7e1 f8e3 	bl	8000844 <__aeabi_dmul>
 801f67e:	4602      	mov	r2, r0
 801f680:	460b      	mov	r3, r1
 801f682:	4630      	mov	r0, r6
 801f684:	4639      	mov	r1, r7
 801f686:	f109 0901 	add.w	r9, r9, #1
 801f68a:	f7e0 ff25 	bl	80004d8 <__adddf3>
 801f68e:	4606      	mov	r6, r0
 801f690:	460f      	mov	r7, r1
 801f692:	e7e4      	b.n	801f65e <__kernel_rem_pio2+0x3c6>
 801f694:	3d01      	subs	r5, #1
 801f696:	e749      	b.n	801f52c <__kernel_rem_pio2+0x294>
 801f698:	f1ca 0000 	rsb	r0, sl, #0
 801f69c:	ec47 6b10 	vmov	d0, r6, r7
 801f6a0:	f000 fd3a 	bl	8020118 <scalbn>
 801f6a4:	2200      	movs	r2, #0
 801f6a6:	4ba1      	ldr	r3, [pc, #644]	; (801f92c <__kernel_rem_pio2+0x694>)
 801f6a8:	ee10 0a10 	vmov	r0, s0
 801f6ac:	ec57 6b10 	vmov	r6, r7, d0
 801f6b0:	4639      	mov	r1, r7
 801f6b2:	f7e1 fb4d 	bl	8000d50 <__aeabi_dcmpge>
 801f6b6:	b1f8      	cbz	r0, 801f6f8 <__kernel_rem_pio2+0x460>
 801f6b8:	2200      	movs	r2, #0
 801f6ba:	4b9d      	ldr	r3, [pc, #628]	; (801f930 <__kernel_rem_pio2+0x698>)
 801f6bc:	4630      	mov	r0, r6
 801f6be:	4639      	mov	r1, r7
 801f6c0:	f7e1 f8c0 	bl	8000844 <__aeabi_dmul>
 801f6c4:	1c65      	adds	r5, r4, #1
 801f6c6:	f7e1 fb6d 	bl	8000da4 <__aeabi_d2iz>
 801f6ca:	4680      	mov	r8, r0
 801f6cc:	f7e1 f850 	bl	8000770 <__aeabi_i2d>
 801f6d0:	2200      	movs	r2, #0
 801f6d2:	4b96      	ldr	r3, [pc, #600]	; (801f92c <__kernel_rem_pio2+0x694>)
 801f6d4:	f10a 0a18 	add.w	sl, sl, #24
 801f6d8:	f7e1 f8b4 	bl	8000844 <__aeabi_dmul>
 801f6dc:	460b      	mov	r3, r1
 801f6de:	4602      	mov	r2, r0
 801f6e0:	4639      	mov	r1, r7
 801f6e2:	4630      	mov	r0, r6
 801f6e4:	f7e0 fef6 	bl	80004d4 <__aeabi_dsub>
 801f6e8:	f7e1 fb5c 	bl	8000da4 <__aeabi_d2iz>
 801f6ec:	ab0e      	add	r3, sp, #56	; 0x38
 801f6ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f6f2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801f6f6:	e721      	b.n	801f53c <__kernel_rem_pio2+0x2a4>
 801f6f8:	4630      	mov	r0, r6
 801f6fa:	4639      	mov	r1, r7
 801f6fc:	f7e1 fb52 	bl	8000da4 <__aeabi_d2iz>
 801f700:	ab0e      	add	r3, sp, #56	; 0x38
 801f702:	4625      	mov	r5, r4
 801f704:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f708:	e718      	b.n	801f53c <__kernel_rem_pio2+0x2a4>
 801f70a:	ab0e      	add	r3, sp, #56	; 0x38
 801f70c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801f710:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f714:	f7e1 f82c 	bl	8000770 <__aeabi_i2d>
 801f718:	4632      	mov	r2, r6
 801f71a:	463b      	mov	r3, r7
 801f71c:	f7e1 f892 	bl	8000844 <__aeabi_dmul>
 801f720:	2200      	movs	r2, #0
 801f722:	4b83      	ldr	r3, [pc, #524]	; (801f930 <__kernel_rem_pio2+0x698>)
 801f724:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801f728:	4630      	mov	r0, r6
 801f72a:	4639      	mov	r1, r7
 801f72c:	f7e1 f88a 	bl	8000844 <__aeabi_dmul>
 801f730:	4606      	mov	r6, r0
 801f732:	460f      	mov	r7, r1
 801f734:	e710      	b.n	801f558 <__kernel_rem_pio2+0x2c0>
 801f736:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801f73a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801f73e:	f108 0801 	add.w	r8, r8, #1
 801f742:	f7e1 f87f 	bl	8000844 <__aeabi_dmul>
 801f746:	4602      	mov	r2, r0
 801f748:	460b      	mov	r3, r1
 801f74a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f74e:	f7e0 fec3 	bl	80004d8 <__adddf3>
 801f752:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f756:	9b02      	ldr	r3, [sp, #8]
 801f758:	4598      	cmp	r8, r3
 801f75a:	dc01      	bgt.n	801f760 <__kernel_rem_pio2+0x4c8>
 801f75c:	45b8      	cmp	r8, r7
 801f75e:	ddea      	ble.n	801f736 <__kernel_rem_pio2+0x49e>
 801f760:	ab4a      	add	r3, sp, #296	; 0x128
 801f762:	3e01      	subs	r6, #1
 801f764:	ed9d 7b06 	vldr	d7, [sp, #24]
 801f768:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801f76c:	ed87 7b00 	vstr	d7, [r7]
 801f770:	e6f9      	b.n	801f566 <__kernel_rem_pio2+0x2ce>
 801f772:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801f774:	2b02      	cmp	r3, #2
 801f776:	dc0b      	bgt.n	801f790 <__kernel_rem_pio2+0x4f8>
 801f778:	2b00      	cmp	r3, #0
 801f77a:	dc35      	bgt.n	801f7e8 <__kernel_rem_pio2+0x550>
 801f77c:	d059      	beq.n	801f832 <__kernel_rem_pio2+0x59a>
 801f77e:	9b04      	ldr	r3, [sp, #16]
 801f780:	f003 0007 	and.w	r0, r3, #7
 801f784:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801f788:	ecbd 8b02 	vpop	{d8}
 801f78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f790:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801f792:	2b03      	cmp	r3, #3
 801f794:	d1f3      	bne.n	801f77e <__kernel_rem_pio2+0x4e6>
 801f796:	ab4a      	add	r3, sp, #296	; 0x128
 801f798:	9502      	str	r5, [sp, #8]
 801f79a:	4423      	add	r3, r4
 801f79c:	461c      	mov	r4, r3
 801f79e:	469a      	mov	sl, r3
 801f7a0:	9306      	str	r3, [sp, #24]
 801f7a2:	9b02      	ldr	r3, [sp, #8]
 801f7a4:	f1aa 0a08 	sub.w	sl, sl, #8
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	dc6b      	bgt.n	801f884 <__kernel_rem_pio2+0x5ec>
 801f7ac:	46aa      	mov	sl, r5
 801f7ae:	f1ba 0f01 	cmp.w	sl, #1
 801f7b2:	f1a4 0408 	sub.w	r4, r4, #8
 801f7b6:	f300 8085 	bgt.w	801f8c4 <__kernel_rem_pio2+0x62c>
 801f7ba:	9c06      	ldr	r4, [sp, #24]
 801f7bc:	2000      	movs	r0, #0
 801f7be:	2100      	movs	r1, #0
 801f7c0:	3408      	adds	r4, #8
 801f7c2:	2d01      	cmp	r5, #1
 801f7c4:	f300 809d 	bgt.w	801f902 <__kernel_rem_pio2+0x66a>
 801f7c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801f7cc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801f7d0:	f1bb 0f00 	cmp.w	fp, #0
 801f7d4:	f040 809b 	bne.w	801f90e <__kernel_rem_pio2+0x676>
 801f7d8:	9b01      	ldr	r3, [sp, #4]
 801f7da:	e9c3 5600 	strd	r5, r6, [r3]
 801f7de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801f7e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f7e6:	e7ca      	b.n	801f77e <__kernel_rem_pio2+0x4e6>
 801f7e8:	3408      	adds	r4, #8
 801f7ea:	ab4a      	add	r3, sp, #296	; 0x128
 801f7ec:	462e      	mov	r6, r5
 801f7ee:	2000      	movs	r0, #0
 801f7f0:	441c      	add	r4, r3
 801f7f2:	2100      	movs	r1, #0
 801f7f4:	2e00      	cmp	r6, #0
 801f7f6:	da36      	bge.n	801f866 <__kernel_rem_pio2+0x5ce>
 801f7f8:	f1bb 0f00 	cmp.w	fp, #0
 801f7fc:	d039      	beq.n	801f872 <__kernel_rem_pio2+0x5da>
 801f7fe:	4602      	mov	r2, r0
 801f800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f804:	9c01      	ldr	r4, [sp, #4]
 801f806:	ae4c      	add	r6, sp, #304	; 0x130
 801f808:	e9c4 2300 	strd	r2, r3, [r4]
 801f80c:	2401      	movs	r4, #1
 801f80e:	4602      	mov	r2, r0
 801f810:	460b      	mov	r3, r1
 801f812:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801f816:	f7e0 fe5d 	bl	80004d4 <__aeabi_dsub>
 801f81a:	42a5      	cmp	r5, r4
 801f81c:	da2c      	bge.n	801f878 <__kernel_rem_pio2+0x5e0>
 801f81e:	f1bb 0f00 	cmp.w	fp, #0
 801f822:	d002      	beq.n	801f82a <__kernel_rem_pio2+0x592>
 801f824:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f828:	4619      	mov	r1, r3
 801f82a:	9b01      	ldr	r3, [sp, #4]
 801f82c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f830:	e7a5      	b.n	801f77e <__kernel_rem_pio2+0x4e6>
 801f832:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801f836:	2000      	movs	r0, #0
 801f838:	2100      	movs	r1, #0
 801f83a:	eb0d 0403 	add.w	r4, sp, r3
 801f83e:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801f842:	2d00      	cmp	r5, #0
 801f844:	da09      	bge.n	801f85a <__kernel_rem_pio2+0x5c2>
 801f846:	f1bb 0f00 	cmp.w	fp, #0
 801f84a:	d002      	beq.n	801f852 <__kernel_rem_pio2+0x5ba>
 801f84c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f850:	4619      	mov	r1, r3
 801f852:	9b01      	ldr	r3, [sp, #4]
 801f854:	e9c3 0100 	strd	r0, r1, [r3]
 801f858:	e791      	b.n	801f77e <__kernel_rem_pio2+0x4e6>
 801f85a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f85e:	3d01      	subs	r5, #1
 801f860:	f7e0 fe3a 	bl	80004d8 <__adddf3>
 801f864:	e7ed      	b.n	801f842 <__kernel_rem_pio2+0x5aa>
 801f866:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f86a:	3e01      	subs	r6, #1
 801f86c:	f7e0 fe34 	bl	80004d8 <__adddf3>
 801f870:	e7c0      	b.n	801f7f4 <__kernel_rem_pio2+0x55c>
 801f872:	4602      	mov	r2, r0
 801f874:	460b      	mov	r3, r1
 801f876:	e7c5      	b.n	801f804 <__kernel_rem_pio2+0x56c>
 801f878:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801f87c:	3401      	adds	r4, #1
 801f87e:	f7e0 fe2b 	bl	80004d8 <__adddf3>
 801f882:	e7ca      	b.n	801f81a <__kernel_rem_pio2+0x582>
 801f884:	9b02      	ldr	r3, [sp, #8]
 801f886:	e9da 8900 	ldrd	r8, r9, [sl]
 801f88a:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801f88e:	3b01      	subs	r3, #1
 801f890:	4640      	mov	r0, r8
 801f892:	4632      	mov	r2, r6
 801f894:	4649      	mov	r1, r9
 801f896:	9302      	str	r3, [sp, #8]
 801f898:	463b      	mov	r3, r7
 801f89a:	f7e0 fe1d 	bl	80004d8 <__adddf3>
 801f89e:	4602      	mov	r2, r0
 801f8a0:	460b      	mov	r3, r1
 801f8a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f8a6:	4640      	mov	r0, r8
 801f8a8:	4649      	mov	r1, r9
 801f8aa:	f7e0 fe13 	bl	80004d4 <__aeabi_dsub>
 801f8ae:	4632      	mov	r2, r6
 801f8b0:	463b      	mov	r3, r7
 801f8b2:	f7e0 fe11 	bl	80004d8 <__adddf3>
 801f8b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 801f8ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801f8be:	ed8a 7b00 	vstr	d7, [sl]
 801f8c2:	e76e      	b.n	801f7a2 <__kernel_rem_pio2+0x50a>
 801f8c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 801f8c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801f8cc:	4640      	mov	r0, r8
 801f8ce:	4649      	mov	r1, r9
 801f8d0:	4632      	mov	r2, r6
 801f8d2:	463b      	mov	r3, r7
 801f8d4:	f7e0 fe00 	bl	80004d8 <__adddf3>
 801f8d8:	4602      	mov	r2, r0
 801f8da:	460b      	mov	r3, r1
 801f8dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f8e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f8e4:	4640      	mov	r0, r8
 801f8e6:	4649      	mov	r1, r9
 801f8e8:	f7e0 fdf4 	bl	80004d4 <__aeabi_dsub>
 801f8ec:	4632      	mov	r2, r6
 801f8ee:	463b      	mov	r3, r7
 801f8f0:	f7e0 fdf2 	bl	80004d8 <__adddf3>
 801f8f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f8f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f8fc:	ed84 7b00 	vstr	d7, [r4]
 801f900:	e755      	b.n	801f7ae <__kernel_rem_pio2+0x516>
 801f902:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f906:	3d01      	subs	r5, #1
 801f908:	f7e0 fde6 	bl	80004d8 <__adddf3>
 801f90c:	e759      	b.n	801f7c2 <__kernel_rem_pio2+0x52a>
 801f90e:	9b01      	ldr	r3, [sp, #4]
 801f910:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801f914:	9a01      	ldr	r2, [sp, #4]
 801f916:	601d      	str	r5, [r3, #0]
 801f918:	605c      	str	r4, [r3, #4]
 801f91a:	609f      	str	r7, [r3, #8]
 801f91c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801f920:	6110      	str	r0, [r2, #16]
 801f922:	60d3      	str	r3, [r2, #12]
 801f924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f928:	6153      	str	r3, [r2, #20]
 801f92a:	e728      	b.n	801f77e <__kernel_rem_pio2+0x4e6>
 801f92c:	41700000 	.word	0x41700000
 801f930:	3e700000 	.word	0x3e700000
 801f934:	00000000 	.word	0x00000000

0801f938 <__kernel_sin>:
 801f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f93c:	ec55 4b10 	vmov	r4, r5, d0
 801f940:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f944:	ed2d 8b04 	vpush	{d8-d9}
 801f948:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801f94c:	b083      	sub	sp, #12
 801f94e:	eeb0 8a41 	vmov.f32	s16, s2
 801f952:	eef0 8a61 	vmov.f32	s17, s3
 801f956:	9001      	str	r0, [sp, #4]
 801f958:	da06      	bge.n	801f968 <__kernel_sin+0x30>
 801f95a:	ee10 0a10 	vmov	r0, s0
 801f95e:	4629      	mov	r1, r5
 801f960:	f7e1 fa20 	bl	8000da4 <__aeabi_d2iz>
 801f964:	2800      	cmp	r0, #0
 801f966:	d051      	beq.n	801fa0c <__kernel_sin+0xd4>
 801f968:	4622      	mov	r2, r4
 801f96a:	462b      	mov	r3, r5
 801f96c:	4620      	mov	r0, r4
 801f96e:	4629      	mov	r1, r5
 801f970:	f7e0 ff68 	bl	8000844 <__aeabi_dmul>
 801f974:	4682      	mov	sl, r0
 801f976:	468b      	mov	fp, r1
 801f978:	4602      	mov	r2, r0
 801f97a:	460b      	mov	r3, r1
 801f97c:	4620      	mov	r0, r4
 801f97e:	4629      	mov	r1, r5
 801f980:	f7e0 ff60 	bl	8000844 <__aeabi_dmul>
 801f984:	4680      	mov	r8, r0
 801f986:	4689      	mov	r9, r1
 801f988:	4650      	mov	r0, sl
 801f98a:	4659      	mov	r1, fp
 801f98c:	a33f      	add	r3, pc, #252	; (adr r3, 801fa8c <__kernel_sin+0x154>)
 801f98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f992:	f7e0 ff57 	bl	8000844 <__aeabi_dmul>
 801f996:	a33f      	add	r3, pc, #252	; (adr r3, 801fa94 <__kernel_sin+0x15c>)
 801f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f99c:	f7e0 fd9a 	bl	80004d4 <__aeabi_dsub>
 801f9a0:	4652      	mov	r2, sl
 801f9a2:	465b      	mov	r3, fp
 801f9a4:	f7e0 ff4e 	bl	8000844 <__aeabi_dmul>
 801f9a8:	a33c      	add	r3, pc, #240	; (adr r3, 801fa9c <__kernel_sin+0x164>)
 801f9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9ae:	f7e0 fd93 	bl	80004d8 <__adddf3>
 801f9b2:	4652      	mov	r2, sl
 801f9b4:	465b      	mov	r3, fp
 801f9b6:	f7e0 ff45 	bl	8000844 <__aeabi_dmul>
 801f9ba:	a33a      	add	r3, pc, #232	; (adr r3, 801faa4 <__kernel_sin+0x16c>)
 801f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9c0:	f7e0 fd88 	bl	80004d4 <__aeabi_dsub>
 801f9c4:	4652      	mov	r2, sl
 801f9c6:	465b      	mov	r3, fp
 801f9c8:	f7e0 ff3c 	bl	8000844 <__aeabi_dmul>
 801f9cc:	a337      	add	r3, pc, #220	; (adr r3, 801faac <__kernel_sin+0x174>)
 801f9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9d2:	f7e0 fd81 	bl	80004d8 <__adddf3>
 801f9d6:	9b01      	ldr	r3, [sp, #4]
 801f9d8:	4606      	mov	r6, r0
 801f9da:	460f      	mov	r7, r1
 801f9dc:	b9eb      	cbnz	r3, 801fa1a <__kernel_sin+0xe2>
 801f9de:	4602      	mov	r2, r0
 801f9e0:	460b      	mov	r3, r1
 801f9e2:	4650      	mov	r0, sl
 801f9e4:	4659      	mov	r1, fp
 801f9e6:	f7e0 ff2d 	bl	8000844 <__aeabi_dmul>
 801f9ea:	a325      	add	r3, pc, #148	; (adr r3, 801fa80 <__kernel_sin+0x148>)
 801f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9f0:	f7e0 fd70 	bl	80004d4 <__aeabi_dsub>
 801f9f4:	4642      	mov	r2, r8
 801f9f6:	464b      	mov	r3, r9
 801f9f8:	f7e0 ff24 	bl	8000844 <__aeabi_dmul>
 801f9fc:	4602      	mov	r2, r0
 801f9fe:	460b      	mov	r3, r1
 801fa00:	4620      	mov	r0, r4
 801fa02:	4629      	mov	r1, r5
 801fa04:	f7e0 fd68 	bl	80004d8 <__adddf3>
 801fa08:	4604      	mov	r4, r0
 801fa0a:	460d      	mov	r5, r1
 801fa0c:	ec45 4b10 	vmov	d0, r4, r5
 801fa10:	b003      	add	sp, #12
 801fa12:	ecbd 8b04 	vpop	{d8-d9}
 801fa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa1a:	2200      	movs	r2, #0
 801fa1c:	4b1a      	ldr	r3, [pc, #104]	; (801fa88 <__kernel_sin+0x150>)
 801fa1e:	ec51 0b18 	vmov	r0, r1, d8
 801fa22:	f7e0 ff0f 	bl	8000844 <__aeabi_dmul>
 801fa26:	4632      	mov	r2, r6
 801fa28:	463b      	mov	r3, r7
 801fa2a:	ec41 0b19 	vmov	d9, r0, r1
 801fa2e:	4640      	mov	r0, r8
 801fa30:	4649      	mov	r1, r9
 801fa32:	f7e0 ff07 	bl	8000844 <__aeabi_dmul>
 801fa36:	4602      	mov	r2, r0
 801fa38:	460b      	mov	r3, r1
 801fa3a:	ec51 0b19 	vmov	r0, r1, d9
 801fa3e:	f7e0 fd49 	bl	80004d4 <__aeabi_dsub>
 801fa42:	4652      	mov	r2, sl
 801fa44:	465b      	mov	r3, fp
 801fa46:	f7e0 fefd 	bl	8000844 <__aeabi_dmul>
 801fa4a:	ec53 2b18 	vmov	r2, r3, d8
 801fa4e:	f7e0 fd41 	bl	80004d4 <__aeabi_dsub>
 801fa52:	4606      	mov	r6, r0
 801fa54:	460f      	mov	r7, r1
 801fa56:	4640      	mov	r0, r8
 801fa58:	4649      	mov	r1, r9
 801fa5a:	a309      	add	r3, pc, #36	; (adr r3, 801fa80 <__kernel_sin+0x148>)
 801fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa60:	f7e0 fef0 	bl	8000844 <__aeabi_dmul>
 801fa64:	4602      	mov	r2, r0
 801fa66:	460b      	mov	r3, r1
 801fa68:	4630      	mov	r0, r6
 801fa6a:	4639      	mov	r1, r7
 801fa6c:	f7e0 fd34 	bl	80004d8 <__adddf3>
 801fa70:	4602      	mov	r2, r0
 801fa72:	460b      	mov	r3, r1
 801fa74:	4620      	mov	r0, r4
 801fa76:	4629      	mov	r1, r5
 801fa78:	f7e0 fd2c 	bl	80004d4 <__aeabi_dsub>
 801fa7c:	e7c4      	b.n	801fa08 <__kernel_sin+0xd0>
 801fa7e:	bf00      	nop
 801fa80:	55555549 	.word	0x55555549
 801fa84:	3fc55555 	.word	0x3fc55555
 801fa88:	3fe00000 	.word	0x3fe00000
 801fa8c:	5acfd57c 	.word	0x5acfd57c
 801fa90:	3de5d93a 	.word	0x3de5d93a
 801fa94:	8a2b9ceb 	.word	0x8a2b9ceb
 801fa98:	3e5ae5e6 	.word	0x3e5ae5e6
 801fa9c:	57b1fe7d 	.word	0x57b1fe7d
 801faa0:	3ec71de3 	.word	0x3ec71de3
 801faa4:	19c161d5 	.word	0x19c161d5
 801faa8:	3f2a01a0 	.word	0x3f2a01a0
 801faac:	1110f8a6 	.word	0x1110f8a6
 801fab0:	3f811111 	.word	0x3f811111

0801fab4 <__kernel_cosf>:
 801fab4:	ee10 3a10 	vmov	r3, s0
 801fab8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801fabc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fac0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801fac4:	da05      	bge.n	801fad2 <__kernel_cosf+0x1e>
 801fac6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801faca:	ee17 2a90 	vmov	r2, s15
 801face:	2a00      	cmp	r2, #0
 801fad0:	d03d      	beq.n	801fb4e <__kernel_cosf+0x9a>
 801fad2:	ee60 5a00 	vmul.f32	s11, s0, s0
 801fad6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801fb54 <__kernel_cosf+0xa0>
 801fada:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801fb58 <__kernel_cosf+0xa4>
 801fade:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801fb5c <__kernel_cosf+0xa8>
 801fae2:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801fae6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801fb60 <__kernel_cosf+0xac>
 801faea:	4a1e      	ldr	r2, [pc, #120]	; (801fb64 <__kernel_cosf+0xb0>)
 801faec:	4293      	cmp	r3, r2
 801faee:	eee7 7a25 	vfma.f32	s15, s14, s11
 801faf2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801fb68 <__kernel_cosf+0xb4>
 801faf6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801fafa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801fb6c <__kernel_cosf+0xb8>
 801fafe:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fb02:	eeb0 7a66 	vmov.f32	s14, s13
 801fb06:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801fb0a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801fb0e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801fb12:	ee67 6a25 	vmul.f32	s13, s14, s11
 801fb16:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801fb1a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801fb1e:	dc04      	bgt.n	801fb2a <__kernel_cosf+0x76>
 801fb20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801fb24:	ee36 0a47 	vsub.f32	s0, s12, s14
 801fb28:	4770      	bx	lr
 801fb2a:	4a11      	ldr	r2, [pc, #68]	; (801fb70 <__kernel_cosf+0xbc>)
 801fb2c:	4293      	cmp	r3, r2
 801fb2e:	bfd6      	itet	le
 801fb30:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801fb34:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801fb38:	ee06 3a90 	vmovle	s13, r3
 801fb3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fb40:	ee36 0a66 	vsub.f32	s0, s12, s13
 801fb44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fb48:	ee30 0a67 	vsub.f32	s0, s0, s15
 801fb4c:	4770      	bx	lr
 801fb4e:	eeb0 0a46 	vmov.f32	s0, s12
 801fb52:	4770      	bx	lr
 801fb54:	ad47d74e 	.word	0xad47d74e
 801fb58:	310f74f6 	.word	0x310f74f6
 801fb5c:	3d2aaaab 	.word	0x3d2aaaab
 801fb60:	b493f27c 	.word	0xb493f27c
 801fb64:	3e999999 	.word	0x3e999999
 801fb68:	37d00d01 	.word	0x37d00d01
 801fb6c:	bab60b61 	.word	0xbab60b61
 801fb70:	3f480000 	.word	0x3f480000

0801fb74 <__kernel_rem_pio2f>:
 801fb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb78:	ed2d 8b04 	vpush	{d8-d9}
 801fb7c:	b0d9      	sub	sp, #356	; 0x164
 801fb7e:	4688      	mov	r8, r1
 801fb80:	49bc      	ldr	r1, [pc, #752]	; (801fe74 <__kernel_rem_pio2f+0x300>)
 801fb82:	9002      	str	r0, [sp, #8]
 801fb84:	9866      	ldr	r0, [sp, #408]	; 0x198
 801fb86:	9301      	str	r3, [sp, #4]
 801fb88:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801fb8c:	1e59      	subs	r1, r3, #1
 801fb8e:	1d13      	adds	r3, r2, #4
 801fb90:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801fb94:	db27      	blt.n	801fbe6 <__kernel_rem_pio2f+0x72>
 801fb96:	f1b2 0b03 	subs.w	fp, r2, #3
 801fb9a:	bf48      	it	mi
 801fb9c:	f102 0b04 	addmi.w	fp, r2, #4
 801fba0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801fba4:	1c45      	adds	r5, r0, #1
 801fba6:	1a47      	subs	r7, r0, r1
 801fba8:	eb0a 0c01 	add.w	ip, sl, r1
 801fbac:	ae1c      	add	r6, sp, #112	; 0x70
 801fbae:	00ec      	lsls	r4, r5, #3
 801fbb0:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 801fe84 <__kernel_rem_pio2f+0x310>
 801fbb4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801fbb8:	9403      	str	r4, [sp, #12]
 801fbba:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801fbbe:	2400      	movs	r4, #0
 801fbc0:	4564      	cmp	r4, ip
 801fbc2:	dd12      	ble.n	801fbea <__kernel_rem_pio2f+0x76>
 801fbc4:	ac1c      	add	r4, sp, #112	; 0x70
 801fbc6:	9b01      	ldr	r3, [sp, #4]
 801fbc8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801fbcc:	f04f 0c00 	mov.w	ip, #0
 801fbd0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801fbd4:	45d4      	cmp	ip, sl
 801fbd6:	dc29      	bgt.n	801fc2c <__kernel_rem_pio2f+0xb8>
 801fbd8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801fbdc:	4627      	mov	r7, r4
 801fbde:	eddf 7aa9 	vldr	s15, [pc, #676]	; 801fe84 <__kernel_rem_pio2f+0x310>
 801fbe2:	2600      	movs	r6, #0
 801fbe4:	e018      	b.n	801fc18 <__kernel_rem_pio2f+0xa4>
 801fbe6:	2000      	movs	r0, #0
 801fbe8:	e7dc      	b.n	801fba4 <__kernel_rem_pio2f+0x30>
 801fbea:	42e7      	cmn	r7, r4
 801fbec:	bf54      	ite	pl
 801fbee:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801fbf2:	eef0 7a47 	vmovmi.f32	s15, s14
 801fbf6:	f104 0401 	add.w	r4, r4, #1
 801fbfa:	bf5c      	itt	pl
 801fbfc:	ee07 3a90 	vmovpl	s15, r3
 801fc00:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801fc04:	ece6 7a01 	vstmia	r6!, {s15}
 801fc08:	e7da      	b.n	801fbc0 <__kernel_rem_pio2f+0x4c>
 801fc0a:	ecf9 6a01 	vldmia	r9!, {s13}
 801fc0e:	3601      	adds	r6, #1
 801fc10:	ed97 7a00 	vldr	s14, [r7]
 801fc14:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fc18:	428e      	cmp	r6, r1
 801fc1a:	f1a7 0704 	sub.w	r7, r7, #4
 801fc1e:	ddf4      	ble.n	801fc0a <__kernel_rem_pio2f+0x96>
 801fc20:	f10c 0c01 	add.w	ip, ip, #1
 801fc24:	3404      	adds	r4, #4
 801fc26:	eceb 7a01 	vstmia	fp!, {s15}
 801fc2a:	e7d3      	b.n	801fbd4 <__kernel_rem_pio2f+0x60>
 801fc2c:	ab08      	add	r3, sp, #32
 801fc2e:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801fc32:	4656      	mov	r6, sl
 801fc34:	eddf 8a92 	vldr	s17, [pc, #584]	; 801fe80 <__kernel_rem_pio2f+0x30c>
 801fc38:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801fc3c:	ed9f 9a8f 	vldr	s18, [pc, #572]	; 801fe7c <__kernel_rem_pio2f+0x308>
 801fc40:	9304      	str	r3, [sp, #16]
 801fc42:	00b3      	lsls	r3, r6, #2
 801fc44:	ac08      	add	r4, sp, #32
 801fc46:	4637      	mov	r7, r6
 801fc48:	9305      	str	r3, [sp, #20]
 801fc4a:	ab58      	add	r3, sp, #352	; 0x160
 801fc4c:	46a4      	mov	ip, r4
 801fc4e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801fc52:	ab44      	add	r3, sp, #272	; 0x110
 801fc54:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801fc58:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801fc5c:	2f00      	cmp	r7, #0
 801fc5e:	f1a0 0004 	sub.w	r0, r0, #4
 801fc62:	dc4f      	bgt.n	801fd04 <__kernel_rem_pio2f+0x190>
 801fc64:	4628      	mov	r0, r5
 801fc66:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801fc6a:	f000 fbb9 	bl	80203e0 <scalbnf>
 801fc6e:	eeb0 8a40 	vmov.f32	s16, s0
 801fc72:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801fc76:	ee28 0a00 	vmul.f32	s0, s16, s0
 801fc7a:	f000 fbae 	bl	80203da <floorf>
 801fc7e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801fc82:	2d00      	cmp	r5, #0
 801fc84:	eea0 8a67 	vfms.f32	s16, s0, s15
 801fc88:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801fc8c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801fc90:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801fc94:	ee17 9a90 	vmov	r9, s15
 801fc98:	ee38 8a40 	vsub.f32	s16, s16, s0
 801fc9c:	dd44      	ble.n	801fd28 <__kernel_rem_pio2f+0x1b4>
 801fc9e:	f106 3cff 	add.w	ip, r6, #4294967295
 801fca2:	ab08      	add	r3, sp, #32
 801fca4:	f1c5 0e08 	rsb	lr, r5, #8
 801fca8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801fcac:	fa47 f00e 	asr.w	r0, r7, lr
 801fcb0:	4481      	add	r9, r0
 801fcb2:	fa00 f00e 	lsl.w	r0, r0, lr
 801fcb6:	1a3f      	subs	r7, r7, r0
 801fcb8:	f1c5 0007 	rsb	r0, r5, #7
 801fcbc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801fcc0:	4107      	asrs	r7, r0
 801fcc2:	2f00      	cmp	r7, #0
 801fcc4:	dd3f      	ble.n	801fd46 <__kernel_rem_pio2f+0x1d2>
 801fcc6:	f04f 0e00 	mov.w	lr, #0
 801fcca:	f109 0901 	add.w	r9, r9, #1
 801fcce:	4673      	mov	r3, lr
 801fcd0:	4576      	cmp	r6, lr
 801fcd2:	dc6b      	bgt.n	801fdac <__kernel_rem_pio2f+0x238>
 801fcd4:	2d00      	cmp	r5, #0
 801fcd6:	dd04      	ble.n	801fce2 <__kernel_rem_pio2f+0x16e>
 801fcd8:	2d01      	cmp	r5, #1
 801fcda:	d078      	beq.n	801fdce <__kernel_rem_pio2f+0x25a>
 801fcdc:	2d02      	cmp	r5, #2
 801fcde:	f000 8081 	beq.w	801fde4 <__kernel_rem_pio2f+0x270>
 801fce2:	2f02      	cmp	r7, #2
 801fce4:	d12f      	bne.n	801fd46 <__kernel_rem_pio2f+0x1d2>
 801fce6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fcea:	ee30 8a48 	vsub.f32	s16, s0, s16
 801fcee:	b353      	cbz	r3, 801fd46 <__kernel_rem_pio2f+0x1d2>
 801fcf0:	4628      	mov	r0, r5
 801fcf2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801fcf6:	f000 fb73 	bl	80203e0 <scalbnf>
 801fcfa:	ee38 8a40 	vsub.f32	s16, s16, s0
 801fcfe:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801fd02:	e020      	b.n	801fd46 <__kernel_rem_pio2f+0x1d2>
 801fd04:	ee60 7a28 	vmul.f32	s15, s0, s17
 801fd08:	3f01      	subs	r7, #1
 801fd0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fd0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fd12:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801fd16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fd1a:	ecac 0a01 	vstmia	ip!, {s0}
 801fd1e:	ed90 0a00 	vldr	s0, [r0]
 801fd22:	ee37 0a80 	vadd.f32	s0, s15, s0
 801fd26:	e799      	b.n	801fc5c <__kernel_rem_pio2f+0xe8>
 801fd28:	d105      	bne.n	801fd36 <__kernel_rem_pio2f+0x1c2>
 801fd2a:	1e70      	subs	r0, r6, #1
 801fd2c:	ab08      	add	r3, sp, #32
 801fd2e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801fd32:	11ff      	asrs	r7, r7, #7
 801fd34:	e7c5      	b.n	801fcc2 <__kernel_rem_pio2f+0x14e>
 801fd36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801fd3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801fd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd42:	da31      	bge.n	801fda8 <__kernel_rem_pio2f+0x234>
 801fd44:	2700      	movs	r7, #0
 801fd46:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801fd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd4e:	f040 809b 	bne.w	801fe88 <__kernel_rem_pio2f+0x314>
 801fd52:	1e74      	subs	r4, r6, #1
 801fd54:	2000      	movs	r0, #0
 801fd56:	46a4      	mov	ip, r4
 801fd58:	45d4      	cmp	ip, sl
 801fd5a:	da4a      	bge.n	801fdf2 <__kernel_rem_pio2f+0x27e>
 801fd5c:	2800      	cmp	r0, #0
 801fd5e:	d07a      	beq.n	801fe56 <__kernel_rem_pio2f+0x2e2>
 801fd60:	ab08      	add	r3, sp, #32
 801fd62:	3d08      	subs	r5, #8
 801fd64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	f000 8081 	beq.w	801fe70 <__kernel_rem_pio2f+0x2fc>
 801fd6e:	4628      	mov	r0, r5
 801fd70:	00a5      	lsls	r5, r4, #2
 801fd72:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fd76:	f000 fb33 	bl	80203e0 <scalbnf>
 801fd7a:	aa44      	add	r2, sp, #272	; 0x110
 801fd7c:	1d2b      	adds	r3, r5, #4
 801fd7e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801fe80 <__kernel_rem_pio2f+0x30c>
 801fd82:	18d1      	adds	r1, r2, r3
 801fd84:	4622      	mov	r2, r4
 801fd86:	2a00      	cmp	r2, #0
 801fd88:	f280 80ae 	bge.w	801fee8 <__kernel_rem_pio2f+0x374>
 801fd8c:	4622      	mov	r2, r4
 801fd8e:	2a00      	cmp	r2, #0
 801fd90:	f2c0 80cc 	blt.w	801ff2c <__kernel_rem_pio2f+0x3b8>
 801fd94:	a944      	add	r1, sp, #272	; 0x110
 801fd96:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801fe78 <__kernel_rem_pio2f+0x304>
 801fd9a:	eddf 7a3a 	vldr	s15, [pc, #232]	; 801fe84 <__kernel_rem_pio2f+0x310>
 801fd9e:	2000      	movs	r0, #0
 801fda0:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801fda4:	1aa1      	subs	r1, r4, r2
 801fda6:	e0b6      	b.n	801ff16 <__kernel_rem_pio2f+0x3a2>
 801fda8:	2702      	movs	r7, #2
 801fdaa:	e78c      	b.n	801fcc6 <__kernel_rem_pio2f+0x152>
 801fdac:	6820      	ldr	r0, [r4, #0]
 801fdae:	b94b      	cbnz	r3, 801fdc4 <__kernel_rem_pio2f+0x250>
 801fdb0:	b118      	cbz	r0, 801fdba <__kernel_rem_pio2f+0x246>
 801fdb2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801fdb6:	6020      	str	r0, [r4, #0]
 801fdb8:	2001      	movs	r0, #1
 801fdba:	f10e 0e01 	add.w	lr, lr, #1
 801fdbe:	3404      	adds	r4, #4
 801fdc0:	4603      	mov	r3, r0
 801fdc2:	e785      	b.n	801fcd0 <__kernel_rem_pio2f+0x15c>
 801fdc4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801fdc8:	6020      	str	r0, [r4, #0]
 801fdca:	4618      	mov	r0, r3
 801fdcc:	e7f5      	b.n	801fdba <__kernel_rem_pio2f+0x246>
 801fdce:	1e74      	subs	r4, r6, #1
 801fdd0:	a808      	add	r0, sp, #32
 801fdd2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801fdd6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801fdda:	f10d 0c20 	add.w	ip, sp, #32
 801fdde:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801fde2:	e77e      	b.n	801fce2 <__kernel_rem_pio2f+0x16e>
 801fde4:	1e74      	subs	r4, r6, #1
 801fde6:	a808      	add	r0, sp, #32
 801fde8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801fdec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801fdf0:	e7f3      	b.n	801fdda <__kernel_rem_pio2f+0x266>
 801fdf2:	ab08      	add	r3, sp, #32
 801fdf4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fdf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fdfc:	4318      	orrs	r0, r3
 801fdfe:	e7ab      	b.n	801fd58 <__kernel_rem_pio2f+0x1e4>
 801fe00:	f10c 0c01 	add.w	ip, ip, #1
 801fe04:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801fe08:	2c00      	cmp	r4, #0
 801fe0a:	d0f9      	beq.n	801fe00 <__kernel_rem_pio2f+0x28c>
 801fe0c:	9b05      	ldr	r3, [sp, #20]
 801fe0e:	1c77      	adds	r7, r6, #1
 801fe10:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801fe14:	eb0d 0003 	add.w	r0, sp, r3
 801fe18:	9b01      	ldr	r3, [sp, #4]
 801fe1a:	18f4      	adds	r4, r6, r3
 801fe1c:	ab1c      	add	r3, sp, #112	; 0x70
 801fe1e:	384c      	subs	r0, #76	; 0x4c
 801fe20:	4466      	add	r6, ip
 801fe22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801fe26:	42be      	cmp	r6, r7
 801fe28:	f6ff af0b 	blt.w	801fc42 <__kernel_rem_pio2f+0xce>
 801fe2c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801fe30:	f04f 0c00 	mov.w	ip, #0
 801fe34:	f8dd e008 	ldr.w	lr, [sp, #8]
 801fe38:	ee07 3a90 	vmov	s15, r3
 801fe3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fe40:	ece4 7a01 	vstmia	r4!, {s15}
 801fe44:	46a1      	mov	r9, r4
 801fe46:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801fe84 <__kernel_rem_pio2f+0x310>
 801fe4a:	458c      	cmp	ip, r1
 801fe4c:	dd07      	ble.n	801fe5e <__kernel_rem_pio2f+0x2ea>
 801fe4e:	3701      	adds	r7, #1
 801fe50:	ece0 7a01 	vstmia	r0!, {s15}
 801fe54:	e7e7      	b.n	801fe26 <__kernel_rem_pio2f+0x2b2>
 801fe56:	9804      	ldr	r0, [sp, #16]
 801fe58:	f04f 0c01 	mov.w	ip, #1
 801fe5c:	e7d2      	b.n	801fe04 <__kernel_rem_pio2f+0x290>
 801fe5e:	ecfe 6a01 	vldmia	lr!, {s13}
 801fe62:	f10c 0c01 	add.w	ip, ip, #1
 801fe66:	ed39 7a01 	vldmdb	r9!, {s14}
 801fe6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fe6e:	e7ec      	b.n	801fe4a <__kernel_rem_pio2f+0x2d6>
 801fe70:	3c01      	subs	r4, #1
 801fe72:	e775      	b.n	801fd60 <__kernel_rem_pio2f+0x1ec>
 801fe74:	080241b4 	.word	0x080241b4
 801fe78:	08024188 	.word	0x08024188
 801fe7c:	43800000 	.word	0x43800000
 801fe80:	3b800000 	.word	0x3b800000
 801fe84:	00000000 	.word	0x00000000
 801fe88:	9b03      	ldr	r3, [sp, #12]
 801fe8a:	eeb0 0a48 	vmov.f32	s0, s16
 801fe8e:	1a98      	subs	r0, r3, r2
 801fe90:	f000 faa6 	bl	80203e0 <scalbnf>
 801fe94:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801fe7c <__kernel_rem_pio2f+0x308>
 801fe98:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801fe9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fea0:	db19      	blt.n	801fed6 <__kernel_rem_pio2f+0x362>
 801fea2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801fe80 <__kernel_rem_pio2f+0x30c>
 801fea6:	aa08      	add	r2, sp, #32
 801fea8:	1c74      	adds	r4, r6, #1
 801feaa:	3508      	adds	r5, #8
 801feac:	ee60 7a27 	vmul.f32	s15, s0, s15
 801feb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801feb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801feb8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801febc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fec0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fec4:	ee10 3a10 	vmov	r3, s0
 801fec8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801fecc:	ee17 3a90 	vmov	r3, s15
 801fed0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801fed4:	e74b      	b.n	801fd6e <__kernel_rem_pio2f+0x1fa>
 801fed6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801feda:	aa08      	add	r2, sp, #32
 801fedc:	4634      	mov	r4, r6
 801fede:	ee10 3a10 	vmov	r3, s0
 801fee2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801fee6:	e742      	b.n	801fd6e <__kernel_rem_pio2f+0x1fa>
 801fee8:	a808      	add	r0, sp, #32
 801feea:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801feee:	3a01      	subs	r2, #1
 801fef0:	ee07 0a90 	vmov	s15, r0
 801fef4:	9001      	str	r0, [sp, #4]
 801fef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fefa:	ee67 7a80 	vmul.f32	s15, s15, s0
 801fefe:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ff02:	ed61 7a01 	vstmdb	r1!, {s15}
 801ff06:	e73e      	b.n	801fd86 <__kernel_rem_pio2f+0x212>
 801ff08:	ecfc 6a01 	vldmia	ip!, {s13}
 801ff0c:	3001      	adds	r0, #1
 801ff0e:	ecb6 7a01 	vldmia	r6!, {s14}
 801ff12:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ff16:	4550      	cmp	r0, sl
 801ff18:	dc01      	bgt.n	801ff1e <__kernel_rem_pio2f+0x3aa>
 801ff1a:	4288      	cmp	r0, r1
 801ff1c:	ddf4      	ble.n	801ff08 <__kernel_rem_pio2f+0x394>
 801ff1e:	a858      	add	r0, sp, #352	; 0x160
 801ff20:	3a01      	subs	r2, #1
 801ff22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ff26:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801ff2a:	e730      	b.n	801fd8e <__kernel_rem_pio2f+0x21a>
 801ff2c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801ff2e:	2a02      	cmp	r2, #2
 801ff30:	dc09      	bgt.n	801ff46 <__kernel_rem_pio2f+0x3d2>
 801ff32:	2a00      	cmp	r2, #0
 801ff34:	dc2a      	bgt.n	801ff8c <__kernel_rem_pio2f+0x418>
 801ff36:	d043      	beq.n	801ffc0 <__kernel_rem_pio2f+0x44c>
 801ff38:	f009 0007 	and.w	r0, r9, #7
 801ff3c:	b059      	add	sp, #356	; 0x164
 801ff3e:	ecbd 8b04 	vpop	{d8-d9}
 801ff42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff46:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ff48:	2b03      	cmp	r3, #3
 801ff4a:	d1f5      	bne.n	801ff38 <__kernel_rem_pio2f+0x3c4>
 801ff4c:	ab30      	add	r3, sp, #192	; 0xc0
 801ff4e:	4620      	mov	r0, r4
 801ff50:	442b      	add	r3, r5
 801ff52:	461a      	mov	r2, r3
 801ff54:	4619      	mov	r1, r3
 801ff56:	2800      	cmp	r0, #0
 801ff58:	f1a1 0104 	sub.w	r1, r1, #4
 801ff5c:	dc51      	bgt.n	8020002 <__kernel_rem_pio2f+0x48e>
 801ff5e:	4621      	mov	r1, r4
 801ff60:	2901      	cmp	r1, #1
 801ff62:	f1a2 0204 	sub.w	r2, r2, #4
 801ff66:	dc5c      	bgt.n	8020022 <__kernel_rem_pio2f+0x4ae>
 801ff68:	3304      	adds	r3, #4
 801ff6a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801fe84 <__kernel_rem_pio2f+0x310>
 801ff6e:	2c01      	cmp	r4, #1
 801ff70:	dc67      	bgt.n	8020042 <__kernel_rem_pio2f+0x4ce>
 801ff72:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ff76:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801ff7a:	2f00      	cmp	r7, #0
 801ff7c:	d167      	bne.n	802004e <__kernel_rem_pio2f+0x4da>
 801ff7e:	edc8 6a00 	vstr	s13, [r8]
 801ff82:	ed88 7a01 	vstr	s14, [r8, #4]
 801ff86:	edc8 7a02 	vstr	s15, [r8, #8]
 801ff8a:	e7d5      	b.n	801ff38 <__kernel_rem_pio2f+0x3c4>
 801ff8c:	aa30      	add	r2, sp, #192	; 0xc0
 801ff8e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801fe84 <__kernel_rem_pio2f+0x310>
 801ff92:	4413      	add	r3, r2
 801ff94:	4622      	mov	r2, r4
 801ff96:	2a00      	cmp	r2, #0
 801ff98:	da24      	bge.n	801ffe4 <__kernel_rem_pio2f+0x470>
 801ff9a:	b34f      	cbz	r7, 801fff0 <__kernel_rem_pio2f+0x47c>
 801ff9c:	eef1 7a47 	vneg.f32	s15, s14
 801ffa0:	edc8 7a00 	vstr	s15, [r8]
 801ffa4:	aa31      	add	r2, sp, #196	; 0xc4
 801ffa6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801ffaa:	2301      	movs	r3, #1
 801ffac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ffb0:	429c      	cmp	r4, r3
 801ffb2:	da20      	bge.n	801fff6 <__kernel_rem_pio2f+0x482>
 801ffb4:	b10f      	cbz	r7, 801ffba <__kernel_rem_pio2f+0x446>
 801ffb6:	eef1 7a67 	vneg.f32	s15, s15
 801ffba:	edc8 7a01 	vstr	s15, [r8, #4]
 801ffbe:	e7bb      	b.n	801ff38 <__kernel_rem_pio2f+0x3c4>
 801ffc0:	aa30      	add	r2, sp, #192	; 0xc0
 801ffc2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801fe84 <__kernel_rem_pio2f+0x310>
 801ffc6:	4413      	add	r3, r2
 801ffc8:	2c00      	cmp	r4, #0
 801ffca:	da05      	bge.n	801ffd8 <__kernel_rem_pio2f+0x464>
 801ffcc:	b10f      	cbz	r7, 801ffd2 <__kernel_rem_pio2f+0x45e>
 801ffce:	eef1 7a67 	vneg.f32	s15, s15
 801ffd2:	edc8 7a00 	vstr	s15, [r8]
 801ffd6:	e7af      	b.n	801ff38 <__kernel_rem_pio2f+0x3c4>
 801ffd8:	ed33 7a01 	vldmdb	r3!, {s14}
 801ffdc:	3c01      	subs	r4, #1
 801ffde:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ffe2:	e7f1      	b.n	801ffc8 <__kernel_rem_pio2f+0x454>
 801ffe4:	ed73 7a01 	vldmdb	r3!, {s15}
 801ffe8:	3a01      	subs	r2, #1
 801ffea:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ffee:	e7d2      	b.n	801ff96 <__kernel_rem_pio2f+0x422>
 801fff0:	eef0 7a47 	vmov.f32	s15, s14
 801fff4:	e7d4      	b.n	801ffa0 <__kernel_rem_pio2f+0x42c>
 801fff6:	ecb2 7a01 	vldmia	r2!, {s14}
 801fffa:	3301      	adds	r3, #1
 801fffc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020000:	e7d6      	b.n	801ffb0 <__kernel_rem_pio2f+0x43c>
 8020002:	edd1 7a00 	vldr	s15, [r1]
 8020006:	3801      	subs	r0, #1
 8020008:	edd1 6a01 	vldr	s13, [r1, #4]
 802000c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020014:	ed81 7a00 	vstr	s14, [r1]
 8020018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802001c:	edc1 7a01 	vstr	s15, [r1, #4]
 8020020:	e799      	b.n	801ff56 <__kernel_rem_pio2f+0x3e2>
 8020022:	edd2 7a00 	vldr	s15, [r2]
 8020026:	3901      	subs	r1, #1
 8020028:	edd2 6a01 	vldr	s13, [r2, #4]
 802002c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020030:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020034:	ed82 7a00 	vstr	s14, [r2]
 8020038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802003c:	edc2 7a01 	vstr	s15, [r2, #4]
 8020040:	e78e      	b.n	801ff60 <__kernel_rem_pio2f+0x3ec>
 8020042:	ed33 7a01 	vldmdb	r3!, {s14}
 8020046:	3c01      	subs	r4, #1
 8020048:	ee77 7a87 	vadd.f32	s15, s15, s14
 802004c:	e78f      	b.n	801ff6e <__kernel_rem_pio2f+0x3fa>
 802004e:	eef1 6a66 	vneg.f32	s13, s13
 8020052:	eeb1 7a47 	vneg.f32	s14, s14
 8020056:	eef1 7a67 	vneg.f32	s15, s15
 802005a:	edc8 6a00 	vstr	s13, [r8]
 802005e:	ed88 7a01 	vstr	s14, [r8, #4]
 8020062:	e790      	b.n	801ff86 <__kernel_rem_pio2f+0x412>

08020064 <__kernel_sinf>:
 8020064:	ee10 3a10 	vmov	r3, s0
 8020068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802006c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8020070:	da04      	bge.n	802007c <__kernel_sinf+0x18>
 8020072:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8020076:	ee17 3a90 	vmov	r3, s15
 802007a:	b35b      	cbz	r3, 80200d4 <__kernel_sinf+0x70>
 802007c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8020080:	eddf 7a15 	vldr	s15, [pc, #84]	; 80200d8 <__kernel_sinf+0x74>
 8020084:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80200dc <__kernel_sinf+0x78>
 8020088:	eea7 6a27 	vfma.f32	s12, s14, s15
 802008c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80200e0 <__kernel_sinf+0x7c>
 8020090:	ee60 6a07 	vmul.f32	s13, s0, s14
 8020094:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020098:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80200e4 <__kernel_sinf+0x80>
 802009c:	eea7 6a87 	vfma.f32	s12, s15, s14
 80200a0:	eddf 7a11 	vldr	s15, [pc, #68]	; 80200e8 <__kernel_sinf+0x84>
 80200a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80200a8:	b930      	cbnz	r0, 80200b8 <__kernel_sinf+0x54>
 80200aa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80200ec <__kernel_sinf+0x88>
 80200ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 80200b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80200b6:	4770      	bx	lr
 80200b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80200bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80200c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80200c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80200c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80200f0 <__kernel_sinf+0x8c>
 80200cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80200d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80200d4:	4770      	bx	lr
 80200d6:	bf00      	nop
 80200d8:	2f2ec9d3 	.word	0x2f2ec9d3
 80200dc:	b2d72f34 	.word	0xb2d72f34
 80200e0:	3638ef1b 	.word	0x3638ef1b
 80200e4:	b9500d01 	.word	0xb9500d01
 80200e8:	3c088889 	.word	0x3c088889
 80200ec:	be2aaaab 	.word	0xbe2aaaab
 80200f0:	3e2aaaab 	.word	0x3e2aaaab

080200f4 <fabs>:
 80200f4:	ec51 0b10 	vmov	r0, r1, d0
 80200f8:	ee10 2a10 	vmov	r2, s0
 80200fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020100:	ec43 2b10 	vmov	d0, r2, r3
 8020104:	4770      	bx	lr
	...

08020108 <nan>:
 8020108:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020110 <nan+0x8>
 802010c:	4770      	bx	lr
 802010e:	bf00      	nop
 8020110:	00000000 	.word	0x00000000
 8020114:	7ff80000 	.word	0x7ff80000

08020118 <scalbn>:
 8020118:	b570      	push	{r4, r5, r6, lr}
 802011a:	ec55 4b10 	vmov	r4, r5, d0
 802011e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8020122:	4606      	mov	r6, r0
 8020124:	462b      	mov	r3, r5
 8020126:	b99a      	cbnz	r2, 8020150 <scalbn+0x38>
 8020128:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802012c:	4323      	orrs	r3, r4
 802012e:	d036      	beq.n	802019e <scalbn+0x86>
 8020130:	4b39      	ldr	r3, [pc, #228]	; (8020218 <scalbn+0x100>)
 8020132:	4629      	mov	r1, r5
 8020134:	2200      	movs	r2, #0
 8020136:	ee10 0a10 	vmov	r0, s0
 802013a:	f7e0 fb83 	bl	8000844 <__aeabi_dmul>
 802013e:	4b37      	ldr	r3, [pc, #220]	; (802021c <scalbn+0x104>)
 8020140:	4604      	mov	r4, r0
 8020142:	460d      	mov	r5, r1
 8020144:	429e      	cmp	r6, r3
 8020146:	da10      	bge.n	802016a <scalbn+0x52>
 8020148:	a32b      	add	r3, pc, #172	; (adr r3, 80201f8 <scalbn+0xe0>)
 802014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802014e:	e03a      	b.n	80201c6 <scalbn+0xae>
 8020150:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8020154:	428a      	cmp	r2, r1
 8020156:	d10c      	bne.n	8020172 <scalbn+0x5a>
 8020158:	ee10 2a10 	vmov	r2, s0
 802015c:	4620      	mov	r0, r4
 802015e:	4629      	mov	r1, r5
 8020160:	f7e0 f9ba 	bl	80004d8 <__adddf3>
 8020164:	4604      	mov	r4, r0
 8020166:	460d      	mov	r5, r1
 8020168:	e019      	b.n	802019e <scalbn+0x86>
 802016a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802016e:	460b      	mov	r3, r1
 8020170:	3a36      	subs	r2, #54	; 0x36
 8020172:	4432      	add	r2, r6
 8020174:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8020178:	428a      	cmp	r2, r1
 802017a:	dd08      	ble.n	802018e <scalbn+0x76>
 802017c:	2d00      	cmp	r5, #0
 802017e:	a120      	add	r1, pc, #128	; (adr r1, 8020200 <scalbn+0xe8>)
 8020180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020184:	da1c      	bge.n	80201c0 <scalbn+0xa8>
 8020186:	a120      	add	r1, pc, #128	; (adr r1, 8020208 <scalbn+0xf0>)
 8020188:	e9d1 0100 	ldrd	r0, r1, [r1]
 802018c:	e018      	b.n	80201c0 <scalbn+0xa8>
 802018e:	2a00      	cmp	r2, #0
 8020190:	dd08      	ble.n	80201a4 <scalbn+0x8c>
 8020192:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802019a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802019e:	ec45 4b10 	vmov	d0, r4, r5
 80201a2:	bd70      	pop	{r4, r5, r6, pc}
 80201a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80201a8:	da19      	bge.n	80201de <scalbn+0xc6>
 80201aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80201ae:	429e      	cmp	r6, r3
 80201b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80201b4:	dd0a      	ble.n	80201cc <scalbn+0xb4>
 80201b6:	a112      	add	r1, pc, #72	; (adr r1, 8020200 <scalbn+0xe8>)
 80201b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d1e2      	bne.n	8020186 <scalbn+0x6e>
 80201c0:	a30f      	add	r3, pc, #60	; (adr r3, 8020200 <scalbn+0xe8>)
 80201c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201c6:	f7e0 fb3d 	bl	8000844 <__aeabi_dmul>
 80201ca:	e7cb      	b.n	8020164 <scalbn+0x4c>
 80201cc:	a10a      	add	r1, pc, #40	; (adr r1, 80201f8 <scalbn+0xe0>)
 80201ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d0b8      	beq.n	8020148 <scalbn+0x30>
 80201d6:	a10e      	add	r1, pc, #56	; (adr r1, 8020210 <scalbn+0xf8>)
 80201d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80201dc:	e7b4      	b.n	8020148 <scalbn+0x30>
 80201de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80201e2:	3236      	adds	r2, #54	; 0x36
 80201e4:	4620      	mov	r0, r4
 80201e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80201ea:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80201ee:	2200      	movs	r2, #0
 80201f0:	4b0b      	ldr	r3, [pc, #44]	; (8020220 <scalbn+0x108>)
 80201f2:	e7e8      	b.n	80201c6 <scalbn+0xae>
 80201f4:	f3af 8000 	nop.w
 80201f8:	c2f8f359 	.word	0xc2f8f359
 80201fc:	01a56e1f 	.word	0x01a56e1f
 8020200:	8800759c 	.word	0x8800759c
 8020204:	7e37e43c 	.word	0x7e37e43c
 8020208:	8800759c 	.word	0x8800759c
 802020c:	fe37e43c 	.word	0xfe37e43c
 8020210:	c2f8f359 	.word	0xc2f8f359
 8020214:	81a56e1f 	.word	0x81a56e1f
 8020218:	43500000 	.word	0x43500000
 802021c:	ffff3cb0 	.word	0xffff3cb0
 8020220:	3c900000 	.word	0x3c900000

08020224 <atanf>:
 8020224:	b538      	push	{r3, r4, r5, lr}
 8020226:	ee10 5a10 	vmov	r5, s0
 802022a:	eef0 7a40 	vmov.f32	s15, s0
 802022e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8020232:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8020236:	db0f      	blt.n	8020258 <atanf+0x34>
 8020238:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802023c:	dd04      	ble.n	8020248 <atanf+0x24>
 802023e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8020242:	eeb0 0a67 	vmov.f32	s0, s15
 8020246:	bd38      	pop	{r3, r4, r5, pc}
 8020248:	2d00      	cmp	r5, #0
 802024a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8020380 <atanf+0x15c>
 802024e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8020384 <atanf+0x160>
 8020252:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8020256:	e7f4      	b.n	8020242 <atanf+0x1e>
 8020258:	4b4b      	ldr	r3, [pc, #300]	; (8020388 <atanf+0x164>)
 802025a:	429c      	cmp	r4, r3
 802025c:	dc10      	bgt.n	8020280 <atanf+0x5c>
 802025e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8020262:	da0a      	bge.n	802027a <atanf+0x56>
 8020264:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802038c <atanf+0x168>
 8020268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802026c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8020270:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8020274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020278:	dce3      	bgt.n	8020242 <atanf+0x1e>
 802027a:	f04f 33ff 	mov.w	r3, #4294967295
 802027e:	e013      	b.n	80202a8 <atanf+0x84>
 8020280:	f000 f8a4 	bl	80203cc <fabsf>
 8020284:	4b42      	ldr	r3, [pc, #264]	; (8020390 <atanf+0x16c>)
 8020286:	429c      	cmp	r4, r3
 8020288:	dc4f      	bgt.n	802032a <atanf+0x106>
 802028a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 802028e:	429c      	cmp	r4, r3
 8020290:	dc41      	bgt.n	8020316 <atanf+0xf2>
 8020292:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8020296:	2300      	movs	r3, #0
 8020298:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802029c:	eea0 7a27 	vfma.f32	s14, s0, s15
 80202a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80202a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80202a8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8020394 <atanf+0x170>
 80202ac:	1c5a      	adds	r2, r3, #1
 80202ae:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8020398 <atanf+0x174>
 80202b2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 802039c <atanf+0x178>
 80202b6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80202ba:	ee66 6a06 	vmul.f32	s13, s12, s12
 80202be:	eee6 5a87 	vfma.f32	s11, s13, s14
 80202c2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80203a0 <atanf+0x17c>
 80202c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80202ca:	eddf 5a36 	vldr	s11, [pc, #216]	; 80203a4 <atanf+0x180>
 80202ce:	eee7 5a26 	vfma.f32	s11, s14, s13
 80202d2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80203a8 <atanf+0x184>
 80202d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80202da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80203ac <atanf+0x188>
 80202de:	eee7 5a26 	vfma.f32	s11, s14, s13
 80202e2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80203b0 <atanf+0x18c>
 80202e6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80202ea:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80203b4 <atanf+0x190>
 80202ee:	eea5 7a26 	vfma.f32	s14, s10, s13
 80202f2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80203b8 <atanf+0x194>
 80202f6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80202fa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80203bc <atanf+0x198>
 80202fe:	eea5 7a26 	vfma.f32	s14, s10, s13
 8020302:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020306:	eea5 7a86 	vfma.f32	s14, s11, s12
 802030a:	ee27 7a87 	vmul.f32	s14, s15, s14
 802030e:	d121      	bne.n	8020354 <atanf+0x130>
 8020310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020314:	e795      	b.n	8020242 <atanf+0x1e>
 8020316:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802031a:	2301      	movs	r3, #1
 802031c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8020320:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020324:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020328:	e7be      	b.n	80202a8 <atanf+0x84>
 802032a:	4b25      	ldr	r3, [pc, #148]	; (80203c0 <atanf+0x19c>)
 802032c:	429c      	cmp	r4, r3
 802032e:	dc0b      	bgt.n	8020348 <atanf+0x124>
 8020330:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8020334:	2302      	movs	r3, #2
 8020336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802033a:	ee70 6a67 	vsub.f32	s13, s0, s15
 802033e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8020342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020346:	e7af      	b.n	80202a8 <atanf+0x84>
 8020348:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802034c:	2303      	movs	r3, #3
 802034e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020352:	e7a9      	b.n	80202a8 <atanf+0x84>
 8020354:	4a1b      	ldr	r2, [pc, #108]	; (80203c4 <atanf+0x1a0>)
 8020356:	2d00      	cmp	r5, #0
 8020358:	491b      	ldr	r1, [pc, #108]	; (80203c8 <atanf+0x1a4>)
 802035a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802035e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020362:	ed93 0a00 	vldr	s0, [r3]
 8020366:	ee37 7a40 	vsub.f32	s14, s14, s0
 802036a:	ed92 0a00 	vldr	s0, [r2]
 802036e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020372:	ee70 7a67 	vsub.f32	s15, s0, s15
 8020376:	bfb8      	it	lt
 8020378:	eef1 7a67 	vneglt.f32	s15, s15
 802037c:	e761      	b.n	8020242 <atanf+0x1e>
 802037e:	bf00      	nop
 8020380:	3fc90fdb 	.word	0x3fc90fdb
 8020384:	bfc90fdb 	.word	0xbfc90fdb
 8020388:	3edfffff 	.word	0x3edfffff
 802038c:	7149f2ca 	.word	0x7149f2ca
 8020390:	3f97ffff 	.word	0x3f97ffff
 8020394:	3c8569d7 	.word	0x3c8569d7
 8020398:	3d4bda59 	.word	0x3d4bda59
 802039c:	bd6ef16b 	.word	0xbd6ef16b
 80203a0:	3d886b35 	.word	0x3d886b35
 80203a4:	3dba2e6e 	.word	0x3dba2e6e
 80203a8:	3e124925 	.word	0x3e124925
 80203ac:	3eaaaaab 	.word	0x3eaaaaab
 80203b0:	bd15a221 	.word	0xbd15a221
 80203b4:	bd9d8795 	.word	0xbd9d8795
 80203b8:	bde38e38 	.word	0xbde38e38
 80203bc:	be4ccccd 	.word	0xbe4ccccd
 80203c0:	401bffff 	.word	0x401bffff
 80203c4:	080241c0 	.word	0x080241c0
 80203c8:	080241d0 	.word	0x080241d0

080203cc <fabsf>:
 80203cc:	ee10 3a10 	vmov	r3, s0
 80203d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80203d4:	ee00 3a10 	vmov	s0, r3
 80203d8:	4770      	bx	lr

080203da <floorf>:
 80203da:	febb 0a40 	vrintm.f32	s0, s0
 80203de:	4770      	bx	lr

080203e0 <scalbnf>:
 80203e0:	ee10 3a10 	vmov	r3, s0
 80203e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80203e8:	d024      	beq.n	8020434 <scalbnf+0x54>
 80203ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80203ee:	d302      	bcc.n	80203f6 <scalbnf+0x16>
 80203f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80203f4:	4770      	bx	lr
 80203f6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80203fa:	d121      	bne.n	8020440 <scalbnf+0x60>
 80203fc:	4b29      	ldr	r3, [pc, #164]	; (80204a4 <scalbnf+0xc4>)
 80203fe:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80204a8 <scalbnf+0xc8>
 8020402:	4298      	cmp	r0, r3
 8020404:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020408:	db15      	blt.n	8020436 <scalbnf+0x56>
 802040a:	ee10 3a10 	vmov	r3, s0
 802040e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020412:	3a19      	subs	r2, #25
 8020414:	4402      	add	r2, r0
 8020416:	2afe      	cmp	r2, #254	; 0xfe
 8020418:	dd14      	ble.n	8020444 <scalbnf+0x64>
 802041a:	ee10 3a10 	vmov	r3, s0
 802041e:	eddf 7a23 	vldr	s15, [pc, #140]	; 80204ac <scalbnf+0xcc>
 8020422:	eddf 6a23 	vldr	s13, [pc, #140]	; 80204b0 <scalbnf+0xd0>
 8020426:	2b00      	cmp	r3, #0
 8020428:	eeb0 7a67 	vmov.f32	s14, s15
 802042c:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8020430:	ee27 0a27 	vmul.f32	s0, s14, s15
 8020434:	4770      	bx	lr
 8020436:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80204b4 <scalbnf+0xd4>
 802043a:	ee20 0a27 	vmul.f32	s0, s0, s15
 802043e:	4770      	bx	lr
 8020440:	0dd2      	lsrs	r2, r2, #23
 8020442:	e7e7      	b.n	8020414 <scalbnf+0x34>
 8020444:	2a00      	cmp	r2, #0
 8020446:	dd06      	ble.n	8020456 <scalbnf+0x76>
 8020448:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802044c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8020450:	ee00 3a10 	vmov	s0, r3
 8020454:	4770      	bx	lr
 8020456:	f112 0f16 	cmn.w	r2, #22
 802045a:	da19      	bge.n	8020490 <scalbnf+0xb0>
 802045c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8020460:	4298      	cmp	r0, r3
 8020462:	ee10 3a10 	vmov	r3, s0
 8020466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802046a:	dd09      	ble.n	8020480 <scalbnf+0xa0>
 802046c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80204ac <scalbnf+0xcc>
 8020470:	2b00      	cmp	r3, #0
 8020472:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80204b0 <scalbnf+0xd0>
 8020476:	eef0 7a40 	vmov.f32	s15, s0
 802047a:	fe00 0a07 	vseleq.f32	s0, s0, s14
 802047e:	e7dc      	b.n	802043a <scalbnf+0x5a>
 8020480:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80204b4 <scalbnf+0xd4>
 8020484:	2b00      	cmp	r3, #0
 8020486:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80204b8 <scalbnf+0xd8>
 802048a:	eef0 7a40 	vmov.f32	s15, s0
 802048e:	e7f4      	b.n	802047a <scalbnf+0x9a>
 8020490:	3219      	adds	r2, #25
 8020492:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020496:	eddf 7a09 	vldr	s15, [pc, #36]	; 80204bc <scalbnf+0xdc>
 802049a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802049e:	ee07 3a10 	vmov	s14, r3
 80204a2:	e7c5      	b.n	8020430 <scalbnf+0x50>
 80204a4:	ffff3cb0 	.word	0xffff3cb0
 80204a8:	4c000000 	.word	0x4c000000
 80204ac:	7149f2ca 	.word	0x7149f2ca
 80204b0:	f149f2ca 	.word	0xf149f2ca
 80204b4:	0da24260 	.word	0x0da24260
 80204b8:	8da24260 	.word	0x8da24260
 80204bc:	33000000 	.word	0x33000000

080204c0 <atof>:
 80204c0:	2100      	movs	r1, #0
 80204c2:	f000 bea3 	b.w	802120c <strtod>

080204c6 <atoi>:
 80204c6:	220a      	movs	r2, #10
 80204c8:	2100      	movs	r1, #0
 80204ca:	f000 bf2d 	b.w	8021328 <strtol>
	...

080204d0 <__errno>:
 80204d0:	4b01      	ldr	r3, [pc, #4]	; (80204d8 <__errno+0x8>)
 80204d2:	6818      	ldr	r0, [r3, #0]
 80204d4:	4770      	bx	lr
 80204d6:	bf00      	nop
 80204d8:	20000038 	.word	0x20000038

080204dc <__libc_init_array>:
 80204dc:	b570      	push	{r4, r5, r6, lr}
 80204de:	4d0d      	ldr	r5, [pc, #52]	; (8020514 <__libc_init_array+0x38>)
 80204e0:	2600      	movs	r6, #0
 80204e2:	4c0d      	ldr	r4, [pc, #52]	; (8020518 <__libc_init_array+0x3c>)
 80204e4:	1b64      	subs	r4, r4, r5
 80204e6:	10a4      	asrs	r4, r4, #2
 80204e8:	42a6      	cmp	r6, r4
 80204ea:	d109      	bne.n	8020500 <__libc_init_array+0x24>
 80204ec:	4d0b      	ldr	r5, [pc, #44]	; (802051c <__libc_init_array+0x40>)
 80204ee:	2600      	movs	r6, #0
 80204f0:	4c0b      	ldr	r4, [pc, #44]	; (8020520 <__libc_init_array+0x44>)
 80204f2:	f002 ffeb 	bl	80234cc <_init>
 80204f6:	1b64      	subs	r4, r4, r5
 80204f8:	10a4      	asrs	r4, r4, #2
 80204fa:	42a6      	cmp	r6, r4
 80204fc:	d105      	bne.n	802050a <__libc_init_array+0x2e>
 80204fe:	bd70      	pop	{r4, r5, r6, pc}
 8020500:	f855 3b04 	ldr.w	r3, [r5], #4
 8020504:	3601      	adds	r6, #1
 8020506:	4798      	blx	r3
 8020508:	e7ee      	b.n	80204e8 <__libc_init_array+0xc>
 802050a:	f855 3b04 	ldr.w	r3, [r5], #4
 802050e:	3601      	adds	r6, #1
 8020510:	4798      	blx	r3
 8020512:	e7f2      	b.n	80204fa <__libc_init_array+0x1e>
 8020514:	0802463c 	.word	0x0802463c
 8020518:	0802463c 	.word	0x0802463c
 802051c:	0802463c 	.word	0x0802463c
 8020520:	08024640 	.word	0x08024640

08020524 <__itoa>:
 8020524:	1e93      	subs	r3, r2, #2
 8020526:	2b22      	cmp	r3, #34	; 0x22
 8020528:	b510      	push	{r4, lr}
 802052a:	460c      	mov	r4, r1
 802052c:	d904      	bls.n	8020538 <__itoa+0x14>
 802052e:	2300      	movs	r3, #0
 8020530:	461c      	mov	r4, r3
 8020532:	700b      	strb	r3, [r1, #0]
 8020534:	4620      	mov	r0, r4
 8020536:	bd10      	pop	{r4, pc}
 8020538:	2a0a      	cmp	r2, #10
 802053a:	d109      	bne.n	8020550 <__itoa+0x2c>
 802053c:	2800      	cmp	r0, #0
 802053e:	da07      	bge.n	8020550 <__itoa+0x2c>
 8020540:	232d      	movs	r3, #45	; 0x2d
 8020542:	4240      	negs	r0, r0
 8020544:	700b      	strb	r3, [r1, #0]
 8020546:	2101      	movs	r1, #1
 8020548:	4421      	add	r1, r4
 802054a:	f000 fef7 	bl	802133c <__utoa>
 802054e:	e7f1      	b.n	8020534 <__itoa+0x10>
 8020550:	2100      	movs	r1, #0
 8020552:	e7f9      	b.n	8020548 <__itoa+0x24>

08020554 <itoa>:
 8020554:	f7ff bfe6 	b.w	8020524 <__itoa>

08020558 <memcpy>:
 8020558:	440a      	add	r2, r1
 802055a:	1e43      	subs	r3, r0, #1
 802055c:	4291      	cmp	r1, r2
 802055e:	d100      	bne.n	8020562 <memcpy+0xa>
 8020560:	4770      	bx	lr
 8020562:	b510      	push	{r4, lr}
 8020564:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020568:	4291      	cmp	r1, r2
 802056a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802056e:	d1f9      	bne.n	8020564 <memcpy+0xc>
 8020570:	bd10      	pop	{r4, pc}

08020572 <memset>:
 8020572:	4402      	add	r2, r0
 8020574:	4603      	mov	r3, r0
 8020576:	4293      	cmp	r3, r2
 8020578:	d100      	bne.n	802057c <memset+0xa>
 802057a:	4770      	bx	lr
 802057c:	f803 1b01 	strb.w	r1, [r3], #1
 8020580:	e7f9      	b.n	8020576 <memset+0x4>

08020582 <strcat>:
 8020582:	4602      	mov	r2, r0
 8020584:	b510      	push	{r4, lr}
 8020586:	7814      	ldrb	r4, [r2, #0]
 8020588:	4613      	mov	r3, r2
 802058a:	3201      	adds	r2, #1
 802058c:	2c00      	cmp	r4, #0
 802058e:	d1fa      	bne.n	8020586 <strcat+0x4>
 8020590:	3b01      	subs	r3, #1
 8020592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020596:	f803 2f01 	strb.w	r2, [r3, #1]!
 802059a:	2a00      	cmp	r2, #0
 802059c:	d1f9      	bne.n	8020592 <strcat+0x10>
 802059e:	bd10      	pop	{r4, pc}

080205a0 <strstr>:
 80205a0:	780a      	ldrb	r2, [r1, #0]
 80205a2:	b570      	push	{r4, r5, r6, lr}
 80205a4:	b96a      	cbnz	r2, 80205c2 <strstr+0x22>
 80205a6:	bd70      	pop	{r4, r5, r6, pc}
 80205a8:	429a      	cmp	r2, r3
 80205aa:	d109      	bne.n	80205c0 <strstr+0x20>
 80205ac:	460c      	mov	r4, r1
 80205ae:	4605      	mov	r5, r0
 80205b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d0f6      	beq.n	80205a6 <strstr+0x6>
 80205b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80205bc:	429e      	cmp	r6, r3
 80205be:	d0f7      	beq.n	80205b0 <strstr+0x10>
 80205c0:	3001      	adds	r0, #1
 80205c2:	7803      	ldrb	r3, [r0, #0]
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	d1ef      	bne.n	80205a8 <strstr+0x8>
 80205c8:	4618      	mov	r0, r3
 80205ca:	e7ec      	b.n	80205a6 <strstr+0x6>

080205cc <sulp>:
 80205cc:	b570      	push	{r4, r5, r6, lr}
 80205ce:	4604      	mov	r4, r0
 80205d0:	460d      	mov	r5, r1
 80205d2:	4616      	mov	r6, r2
 80205d4:	ec45 4b10 	vmov	d0, r4, r5
 80205d8:	f001 fdea 	bl	80221b0 <__ulp>
 80205dc:	ec51 0b10 	vmov	r0, r1, d0
 80205e0:	b17e      	cbz	r6, 8020602 <sulp+0x36>
 80205e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80205e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	dd09      	ble.n	8020602 <sulp+0x36>
 80205ee:	051b      	lsls	r3, r3, #20
 80205f0:	2400      	movs	r4, #0
 80205f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80205f6:	4622      	mov	r2, r4
 80205f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80205fc:	462b      	mov	r3, r5
 80205fe:	f7e0 f921 	bl	8000844 <__aeabi_dmul>
 8020602:	bd70      	pop	{r4, r5, r6, pc}
 8020604:	0000      	movs	r0, r0
	...

08020608 <_strtod_l>:
 8020608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802060c:	461f      	mov	r7, r3
 802060e:	2300      	movs	r3, #0
 8020610:	4604      	mov	r4, r0
 8020612:	4688      	mov	r8, r1
 8020614:	f04f 0a00 	mov.w	sl, #0
 8020618:	f04f 0b00 	mov.w	fp, #0
 802061c:	ed2d 8b02 	vpush	{d8}
 8020620:	b09d      	sub	sp, #116	; 0x74
 8020622:	9318      	str	r3, [sp, #96]	; 0x60
 8020624:	4b9f      	ldr	r3, [pc, #636]	; (80208a4 <_strtod_l+0x29c>)
 8020626:	9213      	str	r2, [sp, #76]	; 0x4c
 8020628:	681b      	ldr	r3, [r3, #0]
 802062a:	4618      	mov	r0, r3
 802062c:	9305      	str	r3, [sp, #20]
 802062e:	f7df ff45 	bl	80004bc <strlen>
 8020632:	4605      	mov	r5, r0
 8020634:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8020638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802063a:	781a      	ldrb	r2, [r3, #0]
 802063c:	2a2b      	cmp	r2, #43	; 0x2b
 802063e:	d04e      	beq.n	80206de <_strtod_l+0xd6>
 8020640:	d83b      	bhi.n	80206ba <_strtod_l+0xb2>
 8020642:	2a0d      	cmp	r2, #13
 8020644:	d834      	bhi.n	80206b0 <_strtod_l+0xa8>
 8020646:	2a08      	cmp	r2, #8
 8020648:	d834      	bhi.n	80206b4 <_strtod_l+0xac>
 802064a:	2a00      	cmp	r2, #0
 802064c:	d03e      	beq.n	80206cc <_strtod_l+0xc4>
 802064e:	2300      	movs	r3, #0
 8020650:	930a      	str	r3, [sp, #40]	; 0x28
 8020652:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8020654:	7833      	ldrb	r3, [r6, #0]
 8020656:	2b30      	cmp	r3, #48	; 0x30
 8020658:	f040 80b0 	bne.w	80207bc <_strtod_l+0x1b4>
 802065c:	7873      	ldrb	r3, [r6, #1]
 802065e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020662:	2b58      	cmp	r3, #88	; 0x58
 8020664:	d168      	bne.n	8020738 <_strtod_l+0x130>
 8020666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020668:	a917      	add	r1, sp, #92	; 0x5c
 802066a:	9702      	str	r7, [sp, #8]
 802066c:	4620      	mov	r0, r4
 802066e:	9301      	str	r3, [sp, #4]
 8020670:	ab18      	add	r3, sp, #96	; 0x60
 8020672:	4a8d      	ldr	r2, [pc, #564]	; (80208a8 <_strtod_l+0x2a0>)
 8020674:	9300      	str	r3, [sp, #0]
 8020676:	ab19      	add	r3, sp, #100	; 0x64
 8020678:	f000 ff08 	bl	802148c <__gethex>
 802067c:	f010 0707 	ands.w	r7, r0, #7
 8020680:	4605      	mov	r5, r0
 8020682:	d005      	beq.n	8020690 <_strtod_l+0x88>
 8020684:	2f06      	cmp	r7, #6
 8020686:	d12c      	bne.n	80206e2 <_strtod_l+0xda>
 8020688:	3601      	adds	r6, #1
 802068a:	2300      	movs	r3, #0
 802068c:	9617      	str	r6, [sp, #92]	; 0x5c
 802068e:	930a      	str	r3, [sp, #40]	; 0x28
 8020690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020692:	2b00      	cmp	r3, #0
 8020694:	f040 858e 	bne.w	80211b4 <_strtod_l+0xbac>
 8020698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802069a:	b1eb      	cbz	r3, 80206d8 <_strtod_l+0xd0>
 802069c:	4652      	mov	r2, sl
 802069e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80206a2:	ec43 2b10 	vmov	d0, r2, r3
 80206a6:	b01d      	add	sp, #116	; 0x74
 80206a8:	ecbd 8b02 	vpop	{d8}
 80206ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206b0:	2a20      	cmp	r2, #32
 80206b2:	d1cc      	bne.n	802064e <_strtod_l+0x46>
 80206b4:	3301      	adds	r3, #1
 80206b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80206b8:	e7be      	b.n	8020638 <_strtod_l+0x30>
 80206ba:	2a2d      	cmp	r2, #45	; 0x2d
 80206bc:	d1c7      	bne.n	802064e <_strtod_l+0x46>
 80206be:	2201      	movs	r2, #1
 80206c0:	920a      	str	r2, [sp, #40]	; 0x28
 80206c2:	1c5a      	adds	r2, r3, #1
 80206c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80206c6:	785b      	ldrb	r3, [r3, #1]
 80206c8:	2b00      	cmp	r3, #0
 80206ca:	d1c2      	bne.n	8020652 <_strtod_l+0x4a>
 80206cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80206ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	f040 856c 	bne.w	80211b0 <_strtod_l+0xba8>
 80206d8:	4652      	mov	r2, sl
 80206da:	465b      	mov	r3, fp
 80206dc:	e7e1      	b.n	80206a2 <_strtod_l+0x9a>
 80206de:	2200      	movs	r2, #0
 80206e0:	e7ee      	b.n	80206c0 <_strtod_l+0xb8>
 80206e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80206e4:	b13a      	cbz	r2, 80206f6 <_strtod_l+0xee>
 80206e6:	2135      	movs	r1, #53	; 0x35
 80206e8:	a81a      	add	r0, sp, #104	; 0x68
 80206ea:	f001 fe6a 	bl	80223c2 <__copybits>
 80206ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80206f0:	4620      	mov	r0, r4
 80206f2:	f001 fa25 	bl	8021b40 <_Bfree>
 80206f6:	3f01      	subs	r7, #1
 80206f8:	2f04      	cmp	r7, #4
 80206fa:	d806      	bhi.n	802070a <_strtod_l+0x102>
 80206fc:	e8df f007 	tbb	[pc, r7]
 8020700:	1714030a 	.word	0x1714030a
 8020704:	0a          	.byte	0x0a
 8020705:	00          	.byte	0x00
 8020706:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 802070a:	0728      	lsls	r0, r5, #28
 802070c:	d5c0      	bpl.n	8020690 <_strtod_l+0x88>
 802070e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8020712:	e7bd      	b.n	8020690 <_strtod_l+0x88>
 8020714:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8020718:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802071a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802071e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8020722:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8020726:	e7f0      	b.n	802070a <_strtod_l+0x102>
 8020728:	f8df b180 	ldr.w	fp, [pc, #384]	; 80208ac <_strtod_l+0x2a4>
 802072c:	e7ed      	b.n	802070a <_strtod_l+0x102>
 802072e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8020732:	f04f 3aff 	mov.w	sl, #4294967295
 8020736:	e7e8      	b.n	802070a <_strtod_l+0x102>
 8020738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802073a:	1c5a      	adds	r2, r3, #1
 802073c:	9217      	str	r2, [sp, #92]	; 0x5c
 802073e:	785b      	ldrb	r3, [r3, #1]
 8020740:	2b30      	cmp	r3, #48	; 0x30
 8020742:	d0f9      	beq.n	8020738 <_strtod_l+0x130>
 8020744:	2b00      	cmp	r3, #0
 8020746:	d0a3      	beq.n	8020690 <_strtod_l+0x88>
 8020748:	2301      	movs	r3, #1
 802074a:	f04f 0900 	mov.w	r9, #0
 802074e:	9304      	str	r3, [sp, #16]
 8020750:	220a      	movs	r2, #10
 8020752:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020754:	464f      	mov	r7, r9
 8020756:	f8cd 901c 	str.w	r9, [sp, #28]
 802075a:	9308      	str	r3, [sp, #32]
 802075c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802075e:	7806      	ldrb	r6, [r0, #0]
 8020760:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8020764:	b2d9      	uxtb	r1, r3
 8020766:	2909      	cmp	r1, #9
 8020768:	d92a      	bls.n	80207c0 <_strtod_l+0x1b8>
 802076a:	462a      	mov	r2, r5
 802076c:	9905      	ldr	r1, [sp, #20]
 802076e:	f001 ff27 	bl	80225c0 <strncmp>
 8020772:	b3a0      	cbz	r0, 80207de <_strtod_l+0x1d6>
 8020774:	2000      	movs	r0, #0
 8020776:	4632      	mov	r2, r6
 8020778:	463d      	mov	r5, r7
 802077a:	4603      	mov	r3, r0
 802077c:	9005      	str	r0, [sp, #20]
 802077e:	2a65      	cmp	r2, #101	; 0x65
 8020780:	d001      	beq.n	8020786 <_strtod_l+0x17e>
 8020782:	2a45      	cmp	r2, #69	; 0x45
 8020784:	d118      	bne.n	80207b8 <_strtod_l+0x1b0>
 8020786:	b91d      	cbnz	r5, 8020790 <_strtod_l+0x188>
 8020788:	9a04      	ldr	r2, [sp, #16]
 802078a:	4302      	orrs	r2, r0
 802078c:	d09e      	beq.n	80206cc <_strtod_l+0xc4>
 802078e:	2500      	movs	r5, #0
 8020790:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8020794:	f108 0201 	add.w	r2, r8, #1
 8020798:	9217      	str	r2, [sp, #92]	; 0x5c
 802079a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802079e:	2a2b      	cmp	r2, #43	; 0x2b
 80207a0:	d075      	beq.n	802088e <_strtod_l+0x286>
 80207a2:	2a2d      	cmp	r2, #45	; 0x2d
 80207a4:	d07b      	beq.n	802089e <_strtod_l+0x296>
 80207a6:	f04f 0c00 	mov.w	ip, #0
 80207aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80207ae:	2909      	cmp	r1, #9
 80207b0:	f240 8082 	bls.w	80208b8 <_strtod_l+0x2b0>
 80207b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80207b8:	2600      	movs	r6, #0
 80207ba:	e09d      	b.n	80208f8 <_strtod_l+0x2f0>
 80207bc:	2300      	movs	r3, #0
 80207be:	e7c4      	b.n	802074a <_strtod_l+0x142>
 80207c0:	2f08      	cmp	r7, #8
 80207c2:	f100 0001 	add.w	r0, r0, #1
 80207c6:	f107 0701 	add.w	r7, r7, #1
 80207ca:	bfd4      	ite	le
 80207cc:	9907      	ldrle	r1, [sp, #28]
 80207ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80207d2:	9017      	str	r0, [sp, #92]	; 0x5c
 80207d4:	bfdc      	itt	le
 80207d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80207da:	9307      	strle	r3, [sp, #28]
 80207dc:	e7be      	b.n	802075c <_strtod_l+0x154>
 80207de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80207e0:	195a      	adds	r2, r3, r5
 80207e2:	9217      	str	r2, [sp, #92]	; 0x5c
 80207e4:	5d5a      	ldrb	r2, [r3, r5]
 80207e6:	2f00      	cmp	r7, #0
 80207e8:	d036      	beq.n	8020858 <_strtod_l+0x250>
 80207ea:	463d      	mov	r5, r7
 80207ec:	9005      	str	r0, [sp, #20]
 80207ee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80207f2:	2b09      	cmp	r3, #9
 80207f4:	d912      	bls.n	802081c <_strtod_l+0x214>
 80207f6:	2301      	movs	r3, #1
 80207f8:	e7c1      	b.n	802077e <_strtod_l+0x176>
 80207fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80207fc:	3001      	adds	r0, #1
 80207fe:	1c5a      	adds	r2, r3, #1
 8020800:	9217      	str	r2, [sp, #92]	; 0x5c
 8020802:	785a      	ldrb	r2, [r3, #1]
 8020804:	2a30      	cmp	r2, #48	; 0x30
 8020806:	d0f8      	beq.n	80207fa <_strtod_l+0x1f2>
 8020808:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802080c:	2b08      	cmp	r3, #8
 802080e:	f200 84d6 	bhi.w	80211be <_strtod_l+0xbb6>
 8020812:	9005      	str	r0, [sp, #20]
 8020814:	2000      	movs	r0, #0
 8020816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020818:	4605      	mov	r5, r0
 802081a:	9308      	str	r3, [sp, #32]
 802081c:	3a30      	subs	r2, #48	; 0x30
 802081e:	f100 0301 	add.w	r3, r0, #1
 8020822:	d013      	beq.n	802084c <_strtod_l+0x244>
 8020824:	9905      	ldr	r1, [sp, #20]
 8020826:	eb00 0e05 	add.w	lr, r0, r5
 802082a:	4419      	add	r1, r3
 802082c:	462b      	mov	r3, r5
 802082e:	9105      	str	r1, [sp, #20]
 8020830:	210a      	movs	r1, #10
 8020832:	4573      	cmp	r3, lr
 8020834:	d112      	bne.n	802085c <_strtod_l+0x254>
 8020836:	182b      	adds	r3, r5, r0
 8020838:	3501      	adds	r5, #1
 802083a:	2b08      	cmp	r3, #8
 802083c:	4405      	add	r5, r0
 802083e:	dc1c      	bgt.n	802087a <_strtod_l+0x272>
 8020840:	9907      	ldr	r1, [sp, #28]
 8020842:	230a      	movs	r3, #10
 8020844:	fb03 2301 	mla	r3, r3, r1, r2
 8020848:	9307      	str	r3, [sp, #28]
 802084a:	2300      	movs	r3, #0
 802084c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802084e:	4618      	mov	r0, r3
 8020850:	1c51      	adds	r1, r2, #1
 8020852:	9117      	str	r1, [sp, #92]	; 0x5c
 8020854:	7852      	ldrb	r2, [r2, #1]
 8020856:	e7ca      	b.n	80207ee <_strtod_l+0x1e6>
 8020858:	4638      	mov	r0, r7
 802085a:	e7d3      	b.n	8020804 <_strtod_l+0x1fc>
 802085c:	2b08      	cmp	r3, #8
 802085e:	dc04      	bgt.n	802086a <_strtod_l+0x262>
 8020860:	9e07      	ldr	r6, [sp, #28]
 8020862:	434e      	muls	r6, r1
 8020864:	9607      	str	r6, [sp, #28]
 8020866:	3301      	adds	r3, #1
 8020868:	e7e3      	b.n	8020832 <_strtod_l+0x22a>
 802086a:	f103 0c01 	add.w	ip, r3, #1
 802086e:	f1bc 0f10 	cmp.w	ip, #16
 8020872:	bfd8      	it	le
 8020874:	fb01 f909 	mulle.w	r9, r1, r9
 8020878:	e7f5      	b.n	8020866 <_strtod_l+0x25e>
 802087a:	2d10      	cmp	r5, #16
 802087c:	bfdc      	itt	le
 802087e:	230a      	movle	r3, #10
 8020880:	fb03 2909 	mlale	r9, r3, r9, r2
 8020884:	e7e1      	b.n	802084a <_strtod_l+0x242>
 8020886:	2300      	movs	r3, #0
 8020888:	9305      	str	r3, [sp, #20]
 802088a:	2301      	movs	r3, #1
 802088c:	e77c      	b.n	8020788 <_strtod_l+0x180>
 802088e:	f04f 0c00 	mov.w	ip, #0
 8020892:	f108 0202 	add.w	r2, r8, #2
 8020896:	9217      	str	r2, [sp, #92]	; 0x5c
 8020898:	f898 2002 	ldrb.w	r2, [r8, #2]
 802089c:	e785      	b.n	80207aa <_strtod_l+0x1a2>
 802089e:	f04f 0c01 	mov.w	ip, #1
 80208a2:	e7f6      	b.n	8020892 <_strtod_l+0x28a>
 80208a4:	080243dc 	.word	0x080243dc
 80208a8:	080241f0 	.word	0x080241f0
 80208ac:	7ff00000 	.word	0x7ff00000
 80208b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80208b2:	1c51      	adds	r1, r2, #1
 80208b4:	9117      	str	r1, [sp, #92]	; 0x5c
 80208b6:	7852      	ldrb	r2, [r2, #1]
 80208b8:	2a30      	cmp	r2, #48	; 0x30
 80208ba:	d0f9      	beq.n	80208b0 <_strtod_l+0x2a8>
 80208bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80208c0:	2908      	cmp	r1, #8
 80208c2:	f63f af79 	bhi.w	80207b8 <_strtod_l+0x1b0>
 80208c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80208ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80208cc:	9206      	str	r2, [sp, #24]
 80208ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80208d0:	1c51      	adds	r1, r2, #1
 80208d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80208d4:	7852      	ldrb	r2, [r2, #1]
 80208d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80208da:	2e09      	cmp	r6, #9
 80208dc:	d937      	bls.n	802094e <_strtod_l+0x346>
 80208de:	9e06      	ldr	r6, [sp, #24]
 80208e0:	1b89      	subs	r1, r1, r6
 80208e2:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80208e6:	2908      	cmp	r1, #8
 80208e8:	dc02      	bgt.n	80208f0 <_strtod_l+0x2e8>
 80208ea:	4576      	cmp	r6, lr
 80208ec:	bfa8      	it	ge
 80208ee:	4676      	movge	r6, lr
 80208f0:	f1bc 0f00 	cmp.w	ip, #0
 80208f4:	d000      	beq.n	80208f8 <_strtod_l+0x2f0>
 80208f6:	4276      	negs	r6, r6
 80208f8:	2d00      	cmp	r5, #0
 80208fa:	d14d      	bne.n	8020998 <_strtod_l+0x390>
 80208fc:	9904      	ldr	r1, [sp, #16]
 80208fe:	4301      	orrs	r1, r0
 8020900:	f47f aec6 	bne.w	8020690 <_strtod_l+0x88>
 8020904:	2b00      	cmp	r3, #0
 8020906:	f47f aee1 	bne.w	80206cc <_strtod_l+0xc4>
 802090a:	2a69      	cmp	r2, #105	; 0x69
 802090c:	d027      	beq.n	802095e <_strtod_l+0x356>
 802090e:	dc24      	bgt.n	802095a <_strtod_l+0x352>
 8020910:	2a49      	cmp	r2, #73	; 0x49
 8020912:	d024      	beq.n	802095e <_strtod_l+0x356>
 8020914:	2a4e      	cmp	r2, #78	; 0x4e
 8020916:	f47f aed9 	bne.w	80206cc <_strtod_l+0xc4>
 802091a:	499f      	ldr	r1, [pc, #636]	; (8020b98 <_strtod_l+0x590>)
 802091c:	a817      	add	r0, sp, #92	; 0x5c
 802091e:	f001 f80d 	bl	802193c <__match>
 8020922:	2800      	cmp	r0, #0
 8020924:	f43f aed2 	beq.w	80206cc <_strtod_l+0xc4>
 8020928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802092a:	781b      	ldrb	r3, [r3, #0]
 802092c:	2b28      	cmp	r3, #40	; 0x28
 802092e:	d12d      	bne.n	802098c <_strtod_l+0x384>
 8020930:	aa1a      	add	r2, sp, #104	; 0x68
 8020932:	499a      	ldr	r1, [pc, #616]	; (8020b9c <_strtod_l+0x594>)
 8020934:	a817      	add	r0, sp, #92	; 0x5c
 8020936:	f001 f815 	bl	8021964 <__hexnan>
 802093a:	2805      	cmp	r0, #5
 802093c:	d126      	bne.n	802098c <_strtod_l+0x384>
 802093e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020940:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8020944:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8020948:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 802094c:	e6a0      	b.n	8020690 <_strtod_l+0x88>
 802094e:	210a      	movs	r1, #10
 8020950:	fb01 2e0e 	mla	lr, r1, lr, r2
 8020954:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8020958:	e7b9      	b.n	80208ce <_strtod_l+0x2c6>
 802095a:	2a6e      	cmp	r2, #110	; 0x6e
 802095c:	e7db      	b.n	8020916 <_strtod_l+0x30e>
 802095e:	4990      	ldr	r1, [pc, #576]	; (8020ba0 <_strtod_l+0x598>)
 8020960:	a817      	add	r0, sp, #92	; 0x5c
 8020962:	f000 ffeb 	bl	802193c <__match>
 8020966:	2800      	cmp	r0, #0
 8020968:	f43f aeb0 	beq.w	80206cc <_strtod_l+0xc4>
 802096c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802096e:	a817      	add	r0, sp, #92	; 0x5c
 8020970:	498c      	ldr	r1, [pc, #560]	; (8020ba4 <_strtod_l+0x59c>)
 8020972:	3b01      	subs	r3, #1
 8020974:	9317      	str	r3, [sp, #92]	; 0x5c
 8020976:	f000 ffe1 	bl	802193c <__match>
 802097a:	b910      	cbnz	r0, 8020982 <_strtod_l+0x37a>
 802097c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802097e:	3301      	adds	r3, #1
 8020980:	9317      	str	r3, [sp, #92]	; 0x5c
 8020982:	f8df b230 	ldr.w	fp, [pc, #560]	; 8020bb4 <_strtod_l+0x5ac>
 8020986:	f04f 0a00 	mov.w	sl, #0
 802098a:	e681      	b.n	8020690 <_strtod_l+0x88>
 802098c:	4886      	ldr	r0, [pc, #536]	; (8020ba8 <_strtod_l+0x5a0>)
 802098e:	f7ff fbbb 	bl	8020108 <nan>
 8020992:	ec5b ab10 	vmov	sl, fp, d0
 8020996:	e67b      	b.n	8020690 <_strtod_l+0x88>
 8020998:	9b05      	ldr	r3, [sp, #20]
 802099a:	2f00      	cmp	r7, #0
 802099c:	bf08      	it	eq
 802099e:	462f      	moveq	r7, r5
 80209a0:	2d10      	cmp	r5, #16
 80209a2:	9807      	ldr	r0, [sp, #28]
 80209a4:	eba6 0303 	sub.w	r3, r6, r3
 80209a8:	46a8      	mov	r8, r5
 80209aa:	bfa8      	it	ge
 80209ac:	f04f 0810 	movge.w	r8, #16
 80209b0:	9306      	str	r3, [sp, #24]
 80209b2:	f7df fecd 	bl	8000750 <__aeabi_ui2d>
 80209b6:	2d09      	cmp	r5, #9
 80209b8:	4682      	mov	sl, r0
 80209ba:	468b      	mov	fp, r1
 80209bc:	dd13      	ble.n	80209e6 <_strtod_l+0x3de>
 80209be:	4b7b      	ldr	r3, [pc, #492]	; (8020bac <_strtod_l+0x5a4>)
 80209c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80209c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80209c8:	f7df ff3c 	bl	8000844 <__aeabi_dmul>
 80209cc:	4682      	mov	sl, r0
 80209ce:	468b      	mov	fp, r1
 80209d0:	4648      	mov	r0, r9
 80209d2:	f7df febd 	bl	8000750 <__aeabi_ui2d>
 80209d6:	4602      	mov	r2, r0
 80209d8:	460b      	mov	r3, r1
 80209da:	4650      	mov	r0, sl
 80209dc:	4659      	mov	r1, fp
 80209de:	f7df fd7b 	bl	80004d8 <__adddf3>
 80209e2:	4682      	mov	sl, r0
 80209e4:	468b      	mov	fp, r1
 80209e6:	2d0f      	cmp	r5, #15
 80209e8:	dc38      	bgt.n	8020a5c <_strtod_l+0x454>
 80209ea:	9b06      	ldr	r3, [sp, #24]
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	f43f ae4f 	beq.w	8020690 <_strtod_l+0x88>
 80209f2:	dd24      	ble.n	8020a3e <_strtod_l+0x436>
 80209f4:	2b16      	cmp	r3, #22
 80209f6:	dc0b      	bgt.n	8020a10 <_strtod_l+0x408>
 80209f8:	496c      	ldr	r1, [pc, #432]	; (8020bac <_strtod_l+0x5a4>)
 80209fa:	4652      	mov	r2, sl
 80209fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020a00:	465b      	mov	r3, fp
 8020a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a06:	f7df ff1d 	bl	8000844 <__aeabi_dmul>
 8020a0a:	4682      	mov	sl, r0
 8020a0c:	468b      	mov	fp, r1
 8020a0e:	e63f      	b.n	8020690 <_strtod_l+0x88>
 8020a10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8020a14:	9a06      	ldr	r2, [sp, #24]
 8020a16:	4293      	cmp	r3, r2
 8020a18:	db20      	blt.n	8020a5c <_strtod_l+0x454>
 8020a1a:	f1c5 050f 	rsb	r5, r5, #15
 8020a1e:	4c63      	ldr	r4, [pc, #396]	; (8020bac <_strtod_l+0x5a4>)
 8020a20:	4652      	mov	r2, sl
 8020a22:	465b      	mov	r3, fp
 8020a24:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a2c:	f7df ff0a 	bl	8000844 <__aeabi_dmul>
 8020a30:	9b06      	ldr	r3, [sp, #24]
 8020a32:	1b5d      	subs	r5, r3, r5
 8020a34:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020a38:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020a3c:	e7e3      	b.n	8020a06 <_strtod_l+0x3fe>
 8020a3e:	9b06      	ldr	r3, [sp, #24]
 8020a40:	3316      	adds	r3, #22
 8020a42:	db0b      	blt.n	8020a5c <_strtod_l+0x454>
 8020a44:	9b05      	ldr	r3, [sp, #20]
 8020a46:	4650      	mov	r0, sl
 8020a48:	4659      	mov	r1, fp
 8020a4a:	1b9e      	subs	r6, r3, r6
 8020a4c:	4b57      	ldr	r3, [pc, #348]	; (8020bac <_strtod_l+0x5a4>)
 8020a4e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8020a52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020a56:	f7e0 f81f 	bl	8000a98 <__aeabi_ddiv>
 8020a5a:	e7d6      	b.n	8020a0a <_strtod_l+0x402>
 8020a5c:	eba5 0808 	sub.w	r8, r5, r8
 8020a60:	9b06      	ldr	r3, [sp, #24]
 8020a62:	4498      	add	r8, r3
 8020a64:	f1b8 0f00 	cmp.w	r8, #0
 8020a68:	dd74      	ble.n	8020b54 <_strtod_l+0x54c>
 8020a6a:	f018 030f 	ands.w	r3, r8, #15
 8020a6e:	d00a      	beq.n	8020a86 <_strtod_l+0x47e>
 8020a70:	494e      	ldr	r1, [pc, #312]	; (8020bac <_strtod_l+0x5a4>)
 8020a72:	4652      	mov	r2, sl
 8020a74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020a78:	465b      	mov	r3, fp
 8020a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a7e:	f7df fee1 	bl	8000844 <__aeabi_dmul>
 8020a82:	4682      	mov	sl, r0
 8020a84:	468b      	mov	fp, r1
 8020a86:	f038 080f 	bics.w	r8, r8, #15
 8020a8a:	d04f      	beq.n	8020b2c <_strtod_l+0x524>
 8020a8c:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8020a90:	dd22      	ble.n	8020ad8 <_strtod_l+0x4d0>
 8020a92:	2500      	movs	r5, #0
 8020a94:	462e      	mov	r6, r5
 8020a96:	9507      	str	r5, [sp, #28]
 8020a98:	9505      	str	r5, [sp, #20]
 8020a9a:	2322      	movs	r3, #34	; 0x22
 8020a9c:	f8df b114 	ldr.w	fp, [pc, #276]	; 8020bb4 <_strtod_l+0x5ac>
 8020aa0:	f04f 0a00 	mov.w	sl, #0
 8020aa4:	6023      	str	r3, [r4, #0]
 8020aa6:	9b07      	ldr	r3, [sp, #28]
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	f43f adf1 	beq.w	8020690 <_strtod_l+0x88>
 8020aae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020ab0:	4620      	mov	r0, r4
 8020ab2:	f001 f845 	bl	8021b40 <_Bfree>
 8020ab6:	9905      	ldr	r1, [sp, #20]
 8020ab8:	4620      	mov	r0, r4
 8020aba:	f001 f841 	bl	8021b40 <_Bfree>
 8020abe:	4631      	mov	r1, r6
 8020ac0:	4620      	mov	r0, r4
 8020ac2:	f001 f83d 	bl	8021b40 <_Bfree>
 8020ac6:	9907      	ldr	r1, [sp, #28]
 8020ac8:	4620      	mov	r0, r4
 8020aca:	f001 f839 	bl	8021b40 <_Bfree>
 8020ace:	4629      	mov	r1, r5
 8020ad0:	4620      	mov	r0, r4
 8020ad2:	f001 f835 	bl	8021b40 <_Bfree>
 8020ad6:	e5db      	b.n	8020690 <_strtod_l+0x88>
 8020ad8:	4b35      	ldr	r3, [pc, #212]	; (8020bb0 <_strtod_l+0x5a8>)
 8020ada:	ea4f 1828 	mov.w	r8, r8, asr #4
 8020ade:	4650      	mov	r0, sl
 8020ae0:	4659      	mov	r1, fp
 8020ae2:	9304      	str	r3, [sp, #16]
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	4699      	mov	r9, r3
 8020ae8:	f1b8 0f01 	cmp.w	r8, #1
 8020aec:	dc21      	bgt.n	8020b32 <_strtod_l+0x52a>
 8020aee:	b10b      	cbz	r3, 8020af4 <_strtod_l+0x4ec>
 8020af0:	4682      	mov	sl, r0
 8020af2:	468b      	mov	fp, r1
 8020af4:	4b2e      	ldr	r3, [pc, #184]	; (8020bb0 <_strtod_l+0x5a8>)
 8020af6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8020afa:	4652      	mov	r2, sl
 8020afc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8020b00:	465b      	mov	r3, fp
 8020b02:	e9d9 0100 	ldrd	r0, r1, [r9]
 8020b06:	f7df fe9d 	bl	8000844 <__aeabi_dmul>
 8020b0a:	4b2a      	ldr	r3, [pc, #168]	; (8020bb4 <_strtod_l+0x5ac>)
 8020b0c:	460a      	mov	r2, r1
 8020b0e:	4682      	mov	sl, r0
 8020b10:	400b      	ands	r3, r1
 8020b12:	4929      	ldr	r1, [pc, #164]	; (8020bb8 <_strtod_l+0x5b0>)
 8020b14:	428b      	cmp	r3, r1
 8020b16:	d8bc      	bhi.n	8020a92 <_strtod_l+0x48a>
 8020b18:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8020b1c:	428b      	cmp	r3, r1
 8020b1e:	bf86      	itte	hi
 8020b20:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8020bbc <_strtod_l+0x5b4>
 8020b24:	f04f 3aff 	movhi.w	sl, #4294967295
 8020b28:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8020b2c:	2300      	movs	r3, #0
 8020b2e:	9304      	str	r3, [sp, #16]
 8020b30:	e083      	b.n	8020c3a <_strtod_l+0x632>
 8020b32:	f018 0f01 	tst.w	r8, #1
 8020b36:	d005      	beq.n	8020b44 <_strtod_l+0x53c>
 8020b38:	9b04      	ldr	r3, [sp, #16]
 8020b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b3e:	f7df fe81 	bl	8000844 <__aeabi_dmul>
 8020b42:	2301      	movs	r3, #1
 8020b44:	9a04      	ldr	r2, [sp, #16]
 8020b46:	f109 0901 	add.w	r9, r9, #1
 8020b4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8020b4e:	3208      	adds	r2, #8
 8020b50:	9204      	str	r2, [sp, #16]
 8020b52:	e7c9      	b.n	8020ae8 <_strtod_l+0x4e0>
 8020b54:	d0ea      	beq.n	8020b2c <_strtod_l+0x524>
 8020b56:	f1c8 0800 	rsb	r8, r8, #0
 8020b5a:	f018 020f 	ands.w	r2, r8, #15
 8020b5e:	d00a      	beq.n	8020b76 <_strtod_l+0x56e>
 8020b60:	4b12      	ldr	r3, [pc, #72]	; (8020bac <_strtod_l+0x5a4>)
 8020b62:	4650      	mov	r0, sl
 8020b64:	4659      	mov	r1, fp
 8020b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b6e:	f7df ff93 	bl	8000a98 <__aeabi_ddiv>
 8020b72:	4682      	mov	sl, r0
 8020b74:	468b      	mov	fp, r1
 8020b76:	ea5f 1828 	movs.w	r8, r8, asr #4
 8020b7a:	d0d7      	beq.n	8020b2c <_strtod_l+0x524>
 8020b7c:	f1b8 0f1f 	cmp.w	r8, #31
 8020b80:	dd1e      	ble.n	8020bc0 <_strtod_l+0x5b8>
 8020b82:	2500      	movs	r5, #0
 8020b84:	462e      	mov	r6, r5
 8020b86:	9507      	str	r5, [sp, #28]
 8020b88:	9505      	str	r5, [sp, #20]
 8020b8a:	2322      	movs	r3, #34	; 0x22
 8020b8c:	f04f 0a00 	mov.w	sl, #0
 8020b90:	f04f 0b00 	mov.w	fp, #0
 8020b94:	6023      	str	r3, [r4, #0]
 8020b96:	e786      	b.n	8020aa6 <_strtod_l+0x49e>
 8020b98:	080241ed 	.word	0x080241ed
 8020b9c:	08024204 	.word	0x08024204
 8020ba0:	080241e4 	.word	0x080241e4
 8020ba4:	080241e7 	.word	0x080241e7
 8020ba8:	0802459f 	.word	0x0802459f
 8020bac:	08024490 	.word	0x08024490
 8020bb0:	08024468 	.word	0x08024468
 8020bb4:	7ff00000 	.word	0x7ff00000
 8020bb8:	7ca00000 	.word	0x7ca00000
 8020bbc:	7fefffff 	.word	0x7fefffff
 8020bc0:	f018 0310 	ands.w	r3, r8, #16
 8020bc4:	4650      	mov	r0, sl
 8020bc6:	4659      	mov	r1, fp
 8020bc8:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8020f74 <_strtod_l+0x96c>
 8020bcc:	bf18      	it	ne
 8020bce:	236a      	movne	r3, #106	; 0x6a
 8020bd0:	9304      	str	r3, [sp, #16]
 8020bd2:	2300      	movs	r3, #0
 8020bd4:	f018 0f01 	tst.w	r8, #1
 8020bd8:	d004      	beq.n	8020be4 <_strtod_l+0x5dc>
 8020bda:	e9d9 2300 	ldrd	r2, r3, [r9]
 8020bde:	f7df fe31 	bl	8000844 <__aeabi_dmul>
 8020be2:	2301      	movs	r3, #1
 8020be4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8020be8:	f109 0908 	add.w	r9, r9, #8
 8020bec:	d1f2      	bne.n	8020bd4 <_strtod_l+0x5cc>
 8020bee:	b10b      	cbz	r3, 8020bf4 <_strtod_l+0x5ec>
 8020bf0:	4682      	mov	sl, r0
 8020bf2:	468b      	mov	fp, r1
 8020bf4:	9b04      	ldr	r3, [sp, #16]
 8020bf6:	b1c3      	cbz	r3, 8020c2a <_strtod_l+0x622>
 8020bf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020bfc:	4659      	mov	r1, fp
 8020bfe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	dd11      	ble.n	8020c2a <_strtod_l+0x622>
 8020c06:	2b1f      	cmp	r3, #31
 8020c08:	f340 8121 	ble.w	8020e4e <_strtod_l+0x846>
 8020c0c:	2b34      	cmp	r3, #52	; 0x34
 8020c0e:	f04f 0a00 	mov.w	sl, #0
 8020c12:	bfdb      	ittet	le
 8020c14:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8020c18:	f04f 33ff 	movle.w	r3, #4294967295
 8020c1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8020c20:	fa03 f202 	lslle.w	r2, r3, r2
 8020c24:	bfd8      	it	le
 8020c26:	ea02 0b01 	andle.w	fp, r2, r1
 8020c2a:	2200      	movs	r2, #0
 8020c2c:	2300      	movs	r3, #0
 8020c2e:	4650      	mov	r0, sl
 8020c30:	4659      	mov	r1, fp
 8020c32:	f7e0 f86f 	bl	8000d14 <__aeabi_dcmpeq>
 8020c36:	2800      	cmp	r0, #0
 8020c38:	d1a3      	bne.n	8020b82 <_strtod_l+0x57a>
 8020c3a:	9b07      	ldr	r3, [sp, #28]
 8020c3c:	463a      	mov	r2, r7
 8020c3e:	9908      	ldr	r1, [sp, #32]
 8020c40:	4620      	mov	r0, r4
 8020c42:	9300      	str	r3, [sp, #0]
 8020c44:	462b      	mov	r3, r5
 8020c46:	f000 ffe5 	bl	8021c14 <__s2b>
 8020c4a:	9007      	str	r0, [sp, #28]
 8020c4c:	2800      	cmp	r0, #0
 8020c4e:	f43f af20 	beq.w	8020a92 <_strtod_l+0x48a>
 8020c52:	9b05      	ldr	r3, [sp, #20]
 8020c54:	2500      	movs	r5, #0
 8020c56:	1b9e      	subs	r6, r3, r6
 8020c58:	9b06      	ldr	r3, [sp, #24]
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	bfb4      	ite	lt
 8020c5e:	4633      	movlt	r3, r6
 8020c60:	2300      	movge	r3, #0
 8020c62:	462e      	mov	r6, r5
 8020c64:	930c      	str	r3, [sp, #48]	; 0x30
 8020c66:	9b06      	ldr	r3, [sp, #24]
 8020c68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020c6c:	9312      	str	r3, [sp, #72]	; 0x48
 8020c6e:	9b07      	ldr	r3, [sp, #28]
 8020c70:	4620      	mov	r0, r4
 8020c72:	6859      	ldr	r1, [r3, #4]
 8020c74:	f000 ff24 	bl	8021ac0 <_Balloc>
 8020c78:	9005      	str	r0, [sp, #20]
 8020c7a:	2800      	cmp	r0, #0
 8020c7c:	f43f af0d 	beq.w	8020a9a <_strtod_l+0x492>
 8020c80:	9b07      	ldr	r3, [sp, #28]
 8020c82:	300c      	adds	r0, #12
 8020c84:	691a      	ldr	r2, [r3, #16]
 8020c86:	f103 010c 	add.w	r1, r3, #12
 8020c8a:	3202      	adds	r2, #2
 8020c8c:	0092      	lsls	r2, r2, #2
 8020c8e:	f7ff fc63 	bl	8020558 <memcpy>
 8020c92:	aa1a      	add	r2, sp, #104	; 0x68
 8020c94:	a919      	add	r1, sp, #100	; 0x64
 8020c96:	4620      	mov	r0, r4
 8020c98:	ec4b ab10 	vmov	d0, sl, fp
 8020c9c:	f001 fb02 	bl	80222a4 <__d2b>
 8020ca0:	9018      	str	r0, [sp, #96]	; 0x60
 8020ca2:	ec4b ab18 	vmov	d8, sl, fp
 8020ca6:	2800      	cmp	r0, #0
 8020ca8:	f43f aef7 	beq.w	8020a9a <_strtod_l+0x492>
 8020cac:	2101      	movs	r1, #1
 8020cae:	4620      	mov	r0, r4
 8020cb0:	f001 f84a 	bl	8021d48 <__i2b>
 8020cb4:	4606      	mov	r6, r0
 8020cb6:	2800      	cmp	r0, #0
 8020cb8:	f43f aeef 	beq.w	8020a9a <_strtod_l+0x492>
 8020cbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020cbe:	9904      	ldr	r1, [sp, #16]
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	eba3 0801 	sub.w	r8, r3, r1
 8020cc6:	bfa9      	itett	ge
 8020cc8:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8020cca:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8020ccc:	eb03 0902 	addge.w	r9, r3, r2
 8020cd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8020cd2:	bfb8      	it	lt
 8020cd4:	1ad7      	sublt	r7, r2, r3
 8020cd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020cd8:	4ba1      	ldr	r3, [pc, #644]	; (8020f60 <_strtod_l+0x958>)
 8020cda:	4490      	add	r8, r2
 8020cdc:	bfb8      	it	lt
 8020cde:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8020ce2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8020ce6:	f108 38ff 	add.w	r8, r8, #4294967295
 8020cea:	4598      	cmp	r8, r3
 8020cec:	f280 80c3 	bge.w	8020e76 <_strtod_l+0x86e>
 8020cf0:	eba3 0308 	sub.w	r3, r3, r8
 8020cf4:	2101      	movs	r1, #1
 8020cf6:	2b1f      	cmp	r3, #31
 8020cf8:	eba2 0203 	sub.w	r2, r2, r3
 8020cfc:	f300 80ae 	bgt.w	8020e5c <_strtod_l+0x854>
 8020d00:	fa01 f303 	lsl.w	r3, r1, r3
 8020d04:	930d      	str	r3, [sp, #52]	; 0x34
 8020d06:	2300      	movs	r3, #0
 8020d08:	9308      	str	r3, [sp, #32]
 8020d0a:	eb09 0802 	add.w	r8, r9, r2
 8020d0e:	9b04      	ldr	r3, [sp, #16]
 8020d10:	4417      	add	r7, r2
 8020d12:	45c1      	cmp	r9, r8
 8020d14:	441f      	add	r7, r3
 8020d16:	464b      	mov	r3, r9
 8020d18:	bfa8      	it	ge
 8020d1a:	4643      	movge	r3, r8
 8020d1c:	42bb      	cmp	r3, r7
 8020d1e:	bfa8      	it	ge
 8020d20:	463b      	movge	r3, r7
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	bfc2      	ittt	gt
 8020d26:	eba8 0803 	subgt.w	r8, r8, r3
 8020d2a:	1aff      	subgt	r7, r7, r3
 8020d2c:	eba9 0903 	subgt.w	r9, r9, r3
 8020d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	dd17      	ble.n	8020d66 <_strtod_l+0x75e>
 8020d36:	4631      	mov	r1, r6
 8020d38:	461a      	mov	r2, r3
 8020d3a:	4620      	mov	r0, r4
 8020d3c:	f001 f8c2 	bl	8021ec4 <__pow5mult>
 8020d40:	4606      	mov	r6, r0
 8020d42:	2800      	cmp	r0, #0
 8020d44:	f43f aea9 	beq.w	8020a9a <_strtod_l+0x492>
 8020d48:	4601      	mov	r1, r0
 8020d4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020d4c:	4620      	mov	r0, r4
 8020d4e:	f001 f811 	bl	8021d74 <__multiply>
 8020d52:	900b      	str	r0, [sp, #44]	; 0x2c
 8020d54:	2800      	cmp	r0, #0
 8020d56:	f43f aea0 	beq.w	8020a9a <_strtod_l+0x492>
 8020d5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020d5c:	4620      	mov	r0, r4
 8020d5e:	f000 feef 	bl	8021b40 <_Bfree>
 8020d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d64:	9318      	str	r3, [sp, #96]	; 0x60
 8020d66:	f1b8 0f00 	cmp.w	r8, #0
 8020d6a:	f300 8089 	bgt.w	8020e80 <_strtod_l+0x878>
 8020d6e:	9b06      	ldr	r3, [sp, #24]
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	dd08      	ble.n	8020d86 <_strtod_l+0x77e>
 8020d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020d76:	4620      	mov	r0, r4
 8020d78:	9905      	ldr	r1, [sp, #20]
 8020d7a:	f001 f8a3 	bl	8021ec4 <__pow5mult>
 8020d7e:	9005      	str	r0, [sp, #20]
 8020d80:	2800      	cmp	r0, #0
 8020d82:	f43f ae8a 	beq.w	8020a9a <_strtod_l+0x492>
 8020d86:	2f00      	cmp	r7, #0
 8020d88:	dd08      	ble.n	8020d9c <_strtod_l+0x794>
 8020d8a:	463a      	mov	r2, r7
 8020d8c:	9905      	ldr	r1, [sp, #20]
 8020d8e:	4620      	mov	r0, r4
 8020d90:	f001 f8f2 	bl	8021f78 <__lshift>
 8020d94:	9005      	str	r0, [sp, #20]
 8020d96:	2800      	cmp	r0, #0
 8020d98:	f43f ae7f 	beq.w	8020a9a <_strtod_l+0x492>
 8020d9c:	f1b9 0f00 	cmp.w	r9, #0
 8020da0:	dd08      	ble.n	8020db4 <_strtod_l+0x7ac>
 8020da2:	4631      	mov	r1, r6
 8020da4:	464a      	mov	r2, r9
 8020da6:	4620      	mov	r0, r4
 8020da8:	f001 f8e6 	bl	8021f78 <__lshift>
 8020dac:	4606      	mov	r6, r0
 8020dae:	2800      	cmp	r0, #0
 8020db0:	f43f ae73 	beq.w	8020a9a <_strtod_l+0x492>
 8020db4:	9a05      	ldr	r2, [sp, #20]
 8020db6:	4620      	mov	r0, r4
 8020db8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020dba:	f001 f969 	bl	8022090 <__mdiff>
 8020dbe:	4605      	mov	r5, r0
 8020dc0:	2800      	cmp	r0, #0
 8020dc2:	f43f ae6a 	beq.w	8020a9a <_strtod_l+0x492>
 8020dc6:	68c3      	ldr	r3, [r0, #12]
 8020dc8:	4631      	mov	r1, r6
 8020dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8020dcc:	2300      	movs	r3, #0
 8020dce:	60c3      	str	r3, [r0, #12]
 8020dd0:	f001 f942 	bl	8022058 <__mcmp>
 8020dd4:	2800      	cmp	r0, #0
 8020dd6:	da5d      	bge.n	8020e94 <_strtod_l+0x88c>
 8020dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020dda:	ea53 030a 	orrs.w	r3, r3, sl
 8020dde:	d17f      	bne.n	8020ee0 <_strtod_l+0x8d8>
 8020de0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d17b      	bne.n	8020ee0 <_strtod_l+0x8d8>
 8020de8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020dec:	0d1b      	lsrs	r3, r3, #20
 8020dee:	051b      	lsls	r3, r3, #20
 8020df0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8020df4:	d974      	bls.n	8020ee0 <_strtod_l+0x8d8>
 8020df6:	696b      	ldr	r3, [r5, #20]
 8020df8:	b913      	cbnz	r3, 8020e00 <_strtod_l+0x7f8>
 8020dfa:	692b      	ldr	r3, [r5, #16]
 8020dfc:	2b01      	cmp	r3, #1
 8020dfe:	dd6f      	ble.n	8020ee0 <_strtod_l+0x8d8>
 8020e00:	4629      	mov	r1, r5
 8020e02:	2201      	movs	r2, #1
 8020e04:	4620      	mov	r0, r4
 8020e06:	f001 f8b7 	bl	8021f78 <__lshift>
 8020e0a:	4631      	mov	r1, r6
 8020e0c:	4605      	mov	r5, r0
 8020e0e:	f001 f923 	bl	8022058 <__mcmp>
 8020e12:	2800      	cmp	r0, #0
 8020e14:	dd64      	ble.n	8020ee0 <_strtod_l+0x8d8>
 8020e16:	9904      	ldr	r1, [sp, #16]
 8020e18:	465b      	mov	r3, fp
 8020e1a:	4a52      	ldr	r2, [pc, #328]	; (8020f64 <_strtod_l+0x95c>)
 8020e1c:	2900      	cmp	r1, #0
 8020e1e:	d07f      	beq.n	8020f20 <_strtod_l+0x918>
 8020e20:	ea02 010b 	and.w	r1, r2, fp
 8020e24:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020e28:	dc7a      	bgt.n	8020f20 <_strtod_l+0x918>
 8020e2a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8020e2e:	f77f aeac 	ble.w	8020b8a <_strtod_l+0x582>
 8020e32:	4b4d      	ldr	r3, [pc, #308]	; (8020f68 <_strtod_l+0x960>)
 8020e34:	4650      	mov	r0, sl
 8020e36:	4659      	mov	r1, fp
 8020e38:	2200      	movs	r2, #0
 8020e3a:	f7df fd03 	bl	8000844 <__aeabi_dmul>
 8020e3e:	460b      	mov	r3, r1
 8020e40:	4682      	mov	sl, r0
 8020e42:	468b      	mov	fp, r1
 8020e44:	4303      	orrs	r3, r0
 8020e46:	bf04      	itt	eq
 8020e48:	2322      	moveq	r3, #34	; 0x22
 8020e4a:	6023      	streq	r3, [r4, #0]
 8020e4c:	e62f      	b.n	8020aae <_strtod_l+0x4a6>
 8020e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8020e52:	fa02 f303 	lsl.w	r3, r2, r3
 8020e56:	ea03 0a0a 	and.w	sl, r3, sl
 8020e5a:	e6e6      	b.n	8020c2a <_strtod_l+0x622>
 8020e5c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8020e60:	910d      	str	r1, [sp, #52]	; 0x34
 8020e62:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8020e66:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8020e6a:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8020e6e:	fa01 f308 	lsl.w	r3, r1, r8
 8020e72:	9308      	str	r3, [sp, #32]
 8020e74:	e749      	b.n	8020d0a <_strtod_l+0x702>
 8020e76:	2300      	movs	r3, #0
 8020e78:	9308      	str	r3, [sp, #32]
 8020e7a:	2301      	movs	r3, #1
 8020e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8020e7e:	e744      	b.n	8020d0a <_strtod_l+0x702>
 8020e80:	4642      	mov	r2, r8
 8020e82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020e84:	4620      	mov	r0, r4
 8020e86:	f001 f877 	bl	8021f78 <__lshift>
 8020e8a:	9018      	str	r0, [sp, #96]	; 0x60
 8020e8c:	2800      	cmp	r0, #0
 8020e8e:	f47f af6e 	bne.w	8020d6e <_strtod_l+0x766>
 8020e92:	e602      	b.n	8020a9a <_strtod_l+0x492>
 8020e94:	465f      	mov	r7, fp
 8020e96:	d16f      	bne.n	8020f78 <_strtod_l+0x970>
 8020e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020e9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020e9e:	b342      	cbz	r2, 8020ef2 <_strtod_l+0x8ea>
 8020ea0:	4a32      	ldr	r2, [pc, #200]	; (8020f6c <_strtod_l+0x964>)
 8020ea2:	4293      	cmp	r3, r2
 8020ea4:	d128      	bne.n	8020ef8 <_strtod_l+0x8f0>
 8020ea6:	9b04      	ldr	r3, [sp, #16]
 8020ea8:	4651      	mov	r1, sl
 8020eaa:	b1eb      	cbz	r3, 8020ee8 <_strtod_l+0x8e0>
 8020eac:	4b2d      	ldr	r3, [pc, #180]	; (8020f64 <_strtod_l+0x95c>)
 8020eae:	f04f 32ff 	mov.w	r2, #4294967295
 8020eb2:	403b      	ands	r3, r7
 8020eb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020eb8:	d819      	bhi.n	8020eee <_strtod_l+0x8e6>
 8020eba:	0d1b      	lsrs	r3, r3, #20
 8020ebc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8020ec4:	4299      	cmp	r1, r3
 8020ec6:	d117      	bne.n	8020ef8 <_strtod_l+0x8f0>
 8020ec8:	4b29      	ldr	r3, [pc, #164]	; (8020f70 <_strtod_l+0x968>)
 8020eca:	429f      	cmp	r7, r3
 8020ecc:	d102      	bne.n	8020ed4 <_strtod_l+0x8cc>
 8020ece:	3101      	adds	r1, #1
 8020ed0:	f43f ade3 	beq.w	8020a9a <_strtod_l+0x492>
 8020ed4:	4b23      	ldr	r3, [pc, #140]	; (8020f64 <_strtod_l+0x95c>)
 8020ed6:	f04f 0a00 	mov.w	sl, #0
 8020eda:	403b      	ands	r3, r7
 8020edc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8020ee0:	9b04      	ldr	r3, [sp, #16]
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d1a5      	bne.n	8020e32 <_strtod_l+0x82a>
 8020ee6:	e5e2      	b.n	8020aae <_strtod_l+0x4a6>
 8020ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8020eec:	e7ea      	b.n	8020ec4 <_strtod_l+0x8bc>
 8020eee:	4613      	mov	r3, r2
 8020ef0:	e7e8      	b.n	8020ec4 <_strtod_l+0x8bc>
 8020ef2:	ea53 030a 	orrs.w	r3, r3, sl
 8020ef6:	d08e      	beq.n	8020e16 <_strtod_l+0x80e>
 8020ef8:	9b08      	ldr	r3, [sp, #32]
 8020efa:	b1db      	cbz	r3, 8020f34 <_strtod_l+0x92c>
 8020efc:	423b      	tst	r3, r7
 8020efe:	d0ef      	beq.n	8020ee0 <_strtod_l+0x8d8>
 8020f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f02:	4650      	mov	r0, sl
 8020f04:	9a04      	ldr	r2, [sp, #16]
 8020f06:	4659      	mov	r1, fp
 8020f08:	b1c3      	cbz	r3, 8020f3c <_strtod_l+0x934>
 8020f0a:	f7ff fb5f 	bl	80205cc <sulp>
 8020f0e:	4602      	mov	r2, r0
 8020f10:	460b      	mov	r3, r1
 8020f12:	ec51 0b18 	vmov	r0, r1, d8
 8020f16:	f7df fadf 	bl	80004d8 <__adddf3>
 8020f1a:	4682      	mov	sl, r0
 8020f1c:	468b      	mov	fp, r1
 8020f1e:	e7df      	b.n	8020ee0 <_strtod_l+0x8d8>
 8020f20:	4013      	ands	r3, r2
 8020f22:	f04f 3aff 	mov.w	sl, #4294967295
 8020f26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8020f2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020f2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020f32:	e7d5      	b.n	8020ee0 <_strtod_l+0x8d8>
 8020f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f36:	ea13 0f0a 	tst.w	r3, sl
 8020f3a:	e7e0      	b.n	8020efe <_strtod_l+0x8f6>
 8020f3c:	f7ff fb46 	bl	80205cc <sulp>
 8020f40:	4602      	mov	r2, r0
 8020f42:	460b      	mov	r3, r1
 8020f44:	ec51 0b18 	vmov	r0, r1, d8
 8020f48:	f7df fac4 	bl	80004d4 <__aeabi_dsub>
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	2300      	movs	r3, #0
 8020f50:	4682      	mov	sl, r0
 8020f52:	468b      	mov	fp, r1
 8020f54:	f7df fede 	bl	8000d14 <__aeabi_dcmpeq>
 8020f58:	2800      	cmp	r0, #0
 8020f5a:	d0c1      	beq.n	8020ee0 <_strtod_l+0x8d8>
 8020f5c:	e615      	b.n	8020b8a <_strtod_l+0x582>
 8020f5e:	bf00      	nop
 8020f60:	fffffc02 	.word	0xfffffc02
 8020f64:	7ff00000 	.word	0x7ff00000
 8020f68:	39500000 	.word	0x39500000
 8020f6c:	000fffff 	.word	0x000fffff
 8020f70:	7fefffff 	.word	0x7fefffff
 8020f74:	08024218 	.word	0x08024218
 8020f78:	4631      	mov	r1, r6
 8020f7a:	4628      	mov	r0, r5
 8020f7c:	f001 f9ee 	bl	802235c <__ratio>
 8020f80:	2200      	movs	r2, #0
 8020f82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020f86:	ee10 0a10 	vmov	r0, s0
 8020f8a:	ec59 8b10 	vmov	r8, r9, d0
 8020f8e:	4649      	mov	r1, r9
 8020f90:	f7df fed4 	bl	8000d3c <__aeabi_dcmple>
 8020f94:	2800      	cmp	r0, #0
 8020f96:	d07a      	beq.n	802108e <_strtod_l+0xa86>
 8020f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f9a:	2b00      	cmp	r3, #0
 8020f9c:	d04a      	beq.n	8021034 <_strtod_l+0xa2c>
 8020f9e:	2200      	movs	r2, #0
 8020fa0:	4b93      	ldr	r3, [pc, #588]	; (80211f0 <_strtod_l+0xbe8>)
 8020fa2:	f04f 0800 	mov.w	r8, #0
 8020fa6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 80211f0 <_strtod_l+0xbe8>
 8020faa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020fae:	4b91      	ldr	r3, [pc, #580]	; (80211f4 <_strtod_l+0xbec>)
 8020fb0:	403b      	ands	r3, r7
 8020fb2:	930d      	str	r3, [sp, #52]	; 0x34
 8020fb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020fb6:	4b90      	ldr	r3, [pc, #576]	; (80211f8 <_strtod_l+0xbf0>)
 8020fb8:	429a      	cmp	r2, r3
 8020fba:	f040 80b0 	bne.w	802111e <_strtod_l+0xb16>
 8020fbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8020fc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020fc6:	ec4b ab10 	vmov	d0, sl, fp
 8020fca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020fce:	f001 f8ef 	bl	80221b0 <__ulp>
 8020fd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020fd6:	ec53 2b10 	vmov	r2, r3, d0
 8020fda:	f7df fc33 	bl	8000844 <__aeabi_dmul>
 8020fde:	4652      	mov	r2, sl
 8020fe0:	465b      	mov	r3, fp
 8020fe2:	f7df fa79 	bl	80004d8 <__adddf3>
 8020fe6:	460b      	mov	r3, r1
 8020fe8:	4982      	ldr	r1, [pc, #520]	; (80211f4 <_strtod_l+0xbec>)
 8020fea:	4682      	mov	sl, r0
 8020fec:	4a83      	ldr	r2, [pc, #524]	; (80211fc <_strtod_l+0xbf4>)
 8020fee:	4019      	ands	r1, r3
 8020ff0:	4291      	cmp	r1, r2
 8020ff2:	d960      	bls.n	80210b6 <_strtod_l+0xaae>
 8020ff4:	ee18 3a90 	vmov	r3, s17
 8020ff8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020ffc:	4293      	cmp	r3, r2
 8020ffe:	d104      	bne.n	802100a <_strtod_l+0xa02>
 8021000:	ee18 3a10 	vmov	r3, s16
 8021004:	3301      	adds	r3, #1
 8021006:	f43f ad48 	beq.w	8020a9a <_strtod_l+0x492>
 802100a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8021208 <_strtod_l+0xc00>
 802100e:	f04f 3aff 	mov.w	sl, #4294967295
 8021012:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021014:	4620      	mov	r0, r4
 8021016:	f000 fd93 	bl	8021b40 <_Bfree>
 802101a:	9905      	ldr	r1, [sp, #20]
 802101c:	4620      	mov	r0, r4
 802101e:	f000 fd8f 	bl	8021b40 <_Bfree>
 8021022:	4631      	mov	r1, r6
 8021024:	4620      	mov	r0, r4
 8021026:	f000 fd8b 	bl	8021b40 <_Bfree>
 802102a:	4629      	mov	r1, r5
 802102c:	4620      	mov	r0, r4
 802102e:	f000 fd87 	bl	8021b40 <_Bfree>
 8021032:	e61c      	b.n	8020c6e <_strtod_l+0x666>
 8021034:	f1ba 0f00 	cmp.w	sl, #0
 8021038:	d11b      	bne.n	8021072 <_strtod_l+0xa6a>
 802103a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802103e:	b9f3      	cbnz	r3, 802107e <_strtod_l+0xa76>
 8021040:	2200      	movs	r2, #0
 8021042:	4b6b      	ldr	r3, [pc, #428]	; (80211f0 <_strtod_l+0xbe8>)
 8021044:	4640      	mov	r0, r8
 8021046:	4649      	mov	r1, r9
 8021048:	f7df fe6e 	bl	8000d28 <__aeabi_dcmplt>
 802104c:	b9d0      	cbnz	r0, 8021084 <_strtod_l+0xa7c>
 802104e:	4640      	mov	r0, r8
 8021050:	4649      	mov	r1, r9
 8021052:	2200      	movs	r2, #0
 8021054:	4b6a      	ldr	r3, [pc, #424]	; (8021200 <_strtod_l+0xbf8>)
 8021056:	f7df fbf5 	bl	8000844 <__aeabi_dmul>
 802105a:	4680      	mov	r8, r0
 802105c:	4689      	mov	r9, r1
 802105e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021062:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8021066:	9315      	str	r3, [sp, #84]	; 0x54
 8021068:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 802106c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8021070:	e79d      	b.n	8020fae <_strtod_l+0x9a6>
 8021072:	f1ba 0f01 	cmp.w	sl, #1
 8021076:	d102      	bne.n	802107e <_strtod_l+0xa76>
 8021078:	2f00      	cmp	r7, #0
 802107a:	f43f ad86 	beq.w	8020b8a <_strtod_l+0x582>
 802107e:	2200      	movs	r2, #0
 8021080:	4b60      	ldr	r3, [pc, #384]	; (8021204 <_strtod_l+0xbfc>)
 8021082:	e78e      	b.n	8020fa2 <_strtod_l+0x99a>
 8021084:	f04f 0800 	mov.w	r8, #0
 8021088:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8021200 <_strtod_l+0xbf8>
 802108c:	e7e7      	b.n	802105e <_strtod_l+0xa56>
 802108e:	4b5c      	ldr	r3, [pc, #368]	; (8021200 <_strtod_l+0xbf8>)
 8021090:	4640      	mov	r0, r8
 8021092:	4649      	mov	r1, r9
 8021094:	2200      	movs	r2, #0
 8021096:	f7df fbd5 	bl	8000844 <__aeabi_dmul>
 802109a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802109c:	4680      	mov	r8, r0
 802109e:	4689      	mov	r9, r1
 80210a0:	b933      	cbnz	r3, 80210b0 <_strtod_l+0xaa8>
 80210a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80210a6:	900e      	str	r0, [sp, #56]	; 0x38
 80210a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80210aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80210ae:	e7dd      	b.n	802106c <_strtod_l+0xa64>
 80210b0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80210b4:	e7f9      	b.n	80210aa <_strtod_l+0xaa2>
 80210b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80210ba:	9b04      	ldr	r3, [sp, #16]
 80210bc:	2b00      	cmp	r3, #0
 80210be:	d1a8      	bne.n	8021012 <_strtod_l+0xa0a>
 80210c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80210c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80210c6:	0d1b      	lsrs	r3, r3, #20
 80210c8:	051b      	lsls	r3, r3, #20
 80210ca:	429a      	cmp	r2, r3
 80210cc:	d1a1      	bne.n	8021012 <_strtod_l+0xa0a>
 80210ce:	4640      	mov	r0, r8
 80210d0:	4649      	mov	r1, r9
 80210d2:	f7df ff17 	bl	8000f04 <__aeabi_d2lz>
 80210d6:	f7df fb87 	bl	80007e8 <__aeabi_l2d>
 80210da:	4602      	mov	r2, r0
 80210dc:	460b      	mov	r3, r1
 80210de:	4640      	mov	r0, r8
 80210e0:	4649      	mov	r1, r9
 80210e2:	f7df f9f7 	bl	80004d4 <__aeabi_dsub>
 80210e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80210ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80210ec:	4680      	mov	r8, r0
 80210ee:	ea43 030a 	orr.w	r3, r3, sl
 80210f2:	4689      	mov	r9, r1
 80210f4:	4313      	orrs	r3, r2
 80210f6:	d055      	beq.n	80211a4 <_strtod_l+0xb9c>
 80210f8:	a335      	add	r3, pc, #212	; (adr r3, 80211d0 <_strtod_l+0xbc8>)
 80210fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210fe:	f7df fe13 	bl	8000d28 <__aeabi_dcmplt>
 8021102:	2800      	cmp	r0, #0
 8021104:	f47f acd3 	bne.w	8020aae <_strtod_l+0x4a6>
 8021108:	4640      	mov	r0, r8
 802110a:	4649      	mov	r1, r9
 802110c:	a332      	add	r3, pc, #200	; (adr r3, 80211d8 <_strtod_l+0xbd0>)
 802110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021112:	f7df fe27 	bl	8000d64 <__aeabi_dcmpgt>
 8021116:	2800      	cmp	r0, #0
 8021118:	f43f af7b 	beq.w	8021012 <_strtod_l+0xa0a>
 802111c:	e4c7      	b.n	8020aae <_strtod_l+0x4a6>
 802111e:	9b04      	ldr	r3, [sp, #16]
 8021120:	b333      	cbz	r3, 8021170 <_strtod_l+0xb68>
 8021122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021124:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8021128:	d822      	bhi.n	8021170 <_strtod_l+0xb68>
 802112a:	4640      	mov	r0, r8
 802112c:	4649      	mov	r1, r9
 802112e:	a32c      	add	r3, pc, #176	; (adr r3, 80211e0 <_strtod_l+0xbd8>)
 8021130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021134:	f7df fe02 	bl	8000d3c <__aeabi_dcmple>
 8021138:	b1a0      	cbz	r0, 8021164 <_strtod_l+0xb5c>
 802113a:	4649      	mov	r1, r9
 802113c:	4640      	mov	r0, r8
 802113e:	f7df fe59 	bl	8000df4 <__aeabi_d2uiz>
 8021142:	2801      	cmp	r0, #1
 8021144:	bf38      	it	cc
 8021146:	2001      	movcc	r0, #1
 8021148:	f7df fb02 	bl	8000750 <__aeabi_ui2d>
 802114c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802114e:	4680      	mov	r8, r0
 8021150:	4689      	mov	r9, r1
 8021152:	bb23      	cbnz	r3, 802119e <_strtod_l+0xb96>
 8021154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021158:	9010      	str	r0, [sp, #64]	; 0x40
 802115a:	9311      	str	r3, [sp, #68]	; 0x44
 802115c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8021160:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8021164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021168:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802116c:	1a9b      	subs	r3, r3, r2
 802116e:	9309      	str	r3, [sp, #36]	; 0x24
 8021170:	eeb0 0a48 	vmov.f32	s0, s16
 8021174:	eef0 0a68 	vmov.f32	s1, s17
 8021178:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802117c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021180:	f001 f816 	bl	80221b0 <__ulp>
 8021184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8021188:	ec53 2b10 	vmov	r2, r3, d0
 802118c:	f7df fb5a 	bl	8000844 <__aeabi_dmul>
 8021190:	ec53 2b18 	vmov	r2, r3, d8
 8021194:	f7df f9a0 	bl	80004d8 <__adddf3>
 8021198:	4682      	mov	sl, r0
 802119a:	468b      	mov	fp, r1
 802119c:	e78d      	b.n	80210ba <_strtod_l+0xab2>
 802119e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80211a2:	e7db      	b.n	802115c <_strtod_l+0xb54>
 80211a4:	a310      	add	r3, pc, #64	; (adr r3, 80211e8 <_strtod_l+0xbe0>)
 80211a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211aa:	f7df fdbd 	bl	8000d28 <__aeabi_dcmplt>
 80211ae:	e7b2      	b.n	8021116 <_strtod_l+0xb0e>
 80211b0:	2300      	movs	r3, #0
 80211b2:	930a      	str	r3, [sp, #40]	; 0x28
 80211b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80211b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80211b8:	6013      	str	r3, [r2, #0]
 80211ba:	f7ff ba6d 	b.w	8020698 <_strtod_l+0x90>
 80211be:	2a65      	cmp	r2, #101	; 0x65
 80211c0:	f43f ab61 	beq.w	8020886 <_strtod_l+0x27e>
 80211c4:	2a45      	cmp	r2, #69	; 0x45
 80211c6:	f43f ab5e 	beq.w	8020886 <_strtod_l+0x27e>
 80211ca:	2301      	movs	r3, #1
 80211cc:	f7ff bb96 	b.w	80208fc <_strtod_l+0x2f4>
 80211d0:	94a03595 	.word	0x94a03595
 80211d4:	3fdfffff 	.word	0x3fdfffff
 80211d8:	35afe535 	.word	0x35afe535
 80211dc:	3fe00000 	.word	0x3fe00000
 80211e0:	ffc00000 	.word	0xffc00000
 80211e4:	41dfffff 	.word	0x41dfffff
 80211e8:	94a03595 	.word	0x94a03595
 80211ec:	3fcfffff 	.word	0x3fcfffff
 80211f0:	3ff00000 	.word	0x3ff00000
 80211f4:	7ff00000 	.word	0x7ff00000
 80211f8:	7fe00000 	.word	0x7fe00000
 80211fc:	7c9fffff 	.word	0x7c9fffff
 8021200:	3fe00000 	.word	0x3fe00000
 8021204:	bff00000 	.word	0xbff00000
 8021208:	7fefffff 	.word	0x7fefffff

0802120c <strtod>:
 802120c:	460a      	mov	r2, r1
 802120e:	4601      	mov	r1, r0
 8021210:	4802      	ldr	r0, [pc, #8]	; (802121c <strtod+0x10>)
 8021212:	4b03      	ldr	r3, [pc, #12]	; (8021220 <strtod+0x14>)
 8021214:	6800      	ldr	r0, [r0, #0]
 8021216:	f7ff b9f7 	b.w	8020608 <_strtod_l>
 802121a:	bf00      	nop
 802121c:	20000038 	.word	0x20000038
 8021220:	200000a0 	.word	0x200000a0

08021224 <_strtol_l.constprop.0>:
 8021224:	2b01      	cmp	r3, #1
 8021226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802122a:	d001      	beq.n	8021230 <_strtol_l.constprop.0+0xc>
 802122c:	2b24      	cmp	r3, #36	; 0x24
 802122e:	d906      	bls.n	802123e <_strtol_l.constprop.0+0x1a>
 8021230:	f7ff f94e 	bl	80204d0 <__errno>
 8021234:	2316      	movs	r3, #22
 8021236:	6003      	str	r3, [r0, #0]
 8021238:	2000      	movs	r0, #0
 802123a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802123e:	460d      	mov	r5, r1
 8021240:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8021324 <_strtol_l.constprop.0+0x100>
 8021244:	462e      	mov	r6, r5
 8021246:	f815 4b01 	ldrb.w	r4, [r5], #1
 802124a:	f814 700c 	ldrb.w	r7, [r4, ip]
 802124e:	f017 0708 	ands.w	r7, r7, #8
 8021252:	d1f7      	bne.n	8021244 <_strtol_l.constprop.0+0x20>
 8021254:	2c2d      	cmp	r4, #45	; 0x2d
 8021256:	d132      	bne.n	80212be <_strtol_l.constprop.0+0x9a>
 8021258:	782c      	ldrb	r4, [r5, #0]
 802125a:	2701      	movs	r7, #1
 802125c:	1cb5      	adds	r5, r6, #2
 802125e:	2b00      	cmp	r3, #0
 8021260:	d05b      	beq.n	802131a <_strtol_l.constprop.0+0xf6>
 8021262:	2b10      	cmp	r3, #16
 8021264:	d109      	bne.n	802127a <_strtol_l.constprop.0+0x56>
 8021266:	2c30      	cmp	r4, #48	; 0x30
 8021268:	d107      	bne.n	802127a <_strtol_l.constprop.0+0x56>
 802126a:	782c      	ldrb	r4, [r5, #0]
 802126c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021270:	2c58      	cmp	r4, #88	; 0x58
 8021272:	d14d      	bne.n	8021310 <_strtol_l.constprop.0+0xec>
 8021274:	786c      	ldrb	r4, [r5, #1]
 8021276:	2310      	movs	r3, #16
 8021278:	3502      	adds	r5, #2
 802127a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802127e:	f04f 0c00 	mov.w	ip, #0
 8021282:	f108 38ff 	add.w	r8, r8, #4294967295
 8021286:	4666      	mov	r6, ip
 8021288:	fbb8 f9f3 	udiv	r9, r8, r3
 802128c:	fb03 8a19 	mls	sl, r3, r9, r8
 8021290:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8021294:	f1be 0f09 	cmp.w	lr, #9
 8021298:	d816      	bhi.n	80212c8 <_strtol_l.constprop.0+0xa4>
 802129a:	4674      	mov	r4, lr
 802129c:	42a3      	cmp	r3, r4
 802129e:	dd24      	ble.n	80212ea <_strtol_l.constprop.0+0xc6>
 80212a0:	f1bc 0f00 	cmp.w	ip, #0
 80212a4:	db1e      	blt.n	80212e4 <_strtol_l.constprop.0+0xc0>
 80212a6:	45b1      	cmp	r9, r6
 80212a8:	d31c      	bcc.n	80212e4 <_strtol_l.constprop.0+0xc0>
 80212aa:	d101      	bne.n	80212b0 <_strtol_l.constprop.0+0x8c>
 80212ac:	45a2      	cmp	sl, r4
 80212ae:	db19      	blt.n	80212e4 <_strtol_l.constprop.0+0xc0>
 80212b0:	fb06 4603 	mla	r6, r6, r3, r4
 80212b4:	f04f 0c01 	mov.w	ip, #1
 80212b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80212bc:	e7e8      	b.n	8021290 <_strtol_l.constprop.0+0x6c>
 80212be:	2c2b      	cmp	r4, #43	; 0x2b
 80212c0:	bf04      	itt	eq
 80212c2:	782c      	ldrbeq	r4, [r5, #0]
 80212c4:	1cb5      	addeq	r5, r6, #2
 80212c6:	e7ca      	b.n	802125e <_strtol_l.constprop.0+0x3a>
 80212c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80212cc:	f1be 0f19 	cmp.w	lr, #25
 80212d0:	d801      	bhi.n	80212d6 <_strtol_l.constprop.0+0xb2>
 80212d2:	3c37      	subs	r4, #55	; 0x37
 80212d4:	e7e2      	b.n	802129c <_strtol_l.constprop.0+0x78>
 80212d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80212da:	f1be 0f19 	cmp.w	lr, #25
 80212de:	d804      	bhi.n	80212ea <_strtol_l.constprop.0+0xc6>
 80212e0:	3c57      	subs	r4, #87	; 0x57
 80212e2:	e7db      	b.n	802129c <_strtol_l.constprop.0+0x78>
 80212e4:	f04f 3cff 	mov.w	ip, #4294967295
 80212e8:	e7e6      	b.n	80212b8 <_strtol_l.constprop.0+0x94>
 80212ea:	f1bc 0f00 	cmp.w	ip, #0
 80212ee:	da05      	bge.n	80212fc <_strtol_l.constprop.0+0xd8>
 80212f0:	2322      	movs	r3, #34	; 0x22
 80212f2:	4646      	mov	r6, r8
 80212f4:	6003      	str	r3, [r0, #0]
 80212f6:	b942      	cbnz	r2, 802130a <_strtol_l.constprop.0+0xe6>
 80212f8:	4630      	mov	r0, r6
 80212fa:	e79e      	b.n	802123a <_strtol_l.constprop.0+0x16>
 80212fc:	b107      	cbz	r7, 8021300 <_strtol_l.constprop.0+0xdc>
 80212fe:	4276      	negs	r6, r6
 8021300:	2a00      	cmp	r2, #0
 8021302:	d0f9      	beq.n	80212f8 <_strtol_l.constprop.0+0xd4>
 8021304:	f1bc 0f00 	cmp.w	ip, #0
 8021308:	d000      	beq.n	802130c <_strtol_l.constprop.0+0xe8>
 802130a:	1e69      	subs	r1, r5, #1
 802130c:	6011      	str	r1, [r2, #0]
 802130e:	e7f3      	b.n	80212f8 <_strtol_l.constprop.0+0xd4>
 8021310:	2430      	movs	r4, #48	; 0x30
 8021312:	2b00      	cmp	r3, #0
 8021314:	d1b1      	bne.n	802127a <_strtol_l.constprop.0+0x56>
 8021316:	2308      	movs	r3, #8
 8021318:	e7af      	b.n	802127a <_strtol_l.constprop.0+0x56>
 802131a:	2c30      	cmp	r4, #48	; 0x30
 802131c:	d0a5      	beq.n	802126a <_strtol_l.constprop.0+0x46>
 802131e:	230a      	movs	r3, #10
 8021320:	e7ab      	b.n	802127a <_strtol_l.constprop.0+0x56>
 8021322:	bf00      	nop
 8021324:	08024266 	.word	0x08024266

08021328 <strtol>:
 8021328:	4613      	mov	r3, r2
 802132a:	460a      	mov	r2, r1
 802132c:	4601      	mov	r1, r0
 802132e:	4802      	ldr	r0, [pc, #8]	; (8021338 <strtol+0x10>)
 8021330:	6800      	ldr	r0, [r0, #0]
 8021332:	f7ff bf77 	b.w	8021224 <_strtol_l.constprop.0>
 8021336:	bf00      	nop
 8021338:	20000038 	.word	0x20000038

0802133c <__utoa>:
 802133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802133e:	4c1f      	ldr	r4, [pc, #124]	; (80213bc <__utoa+0x80>)
 8021340:	b08b      	sub	sp, #44	; 0x2c
 8021342:	4605      	mov	r5, r0
 8021344:	460b      	mov	r3, r1
 8021346:	466e      	mov	r6, sp
 8021348:	f104 0c20 	add.w	ip, r4, #32
 802134c:	6820      	ldr	r0, [r4, #0]
 802134e:	3408      	adds	r4, #8
 8021350:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8021354:	4637      	mov	r7, r6
 8021356:	4564      	cmp	r4, ip
 8021358:	c703      	stmia	r7!, {r0, r1}
 802135a:	463e      	mov	r6, r7
 802135c:	d1f6      	bne.n	802134c <__utoa+0x10>
 802135e:	7921      	ldrb	r1, [r4, #4]
 8021360:	6820      	ldr	r0, [r4, #0]
 8021362:	7139      	strb	r1, [r7, #4]
 8021364:	1e91      	subs	r1, r2, #2
 8021366:	6038      	str	r0, [r7, #0]
 8021368:	2922      	cmp	r1, #34	; 0x22
 802136a:	f04f 0100 	mov.w	r1, #0
 802136e:	d904      	bls.n	802137a <__utoa+0x3e>
 8021370:	7019      	strb	r1, [r3, #0]
 8021372:	460b      	mov	r3, r1
 8021374:	4618      	mov	r0, r3
 8021376:	b00b      	add	sp, #44	; 0x2c
 8021378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802137a:	1e58      	subs	r0, r3, #1
 802137c:	4684      	mov	ip, r0
 802137e:	460c      	mov	r4, r1
 8021380:	3101      	adds	r1, #1
 8021382:	fbb5 f7f2 	udiv	r7, r5, r2
 8021386:	fb02 5617 	mls	r6, r2, r7, r5
 802138a:	3628      	adds	r6, #40	; 0x28
 802138c:	446e      	add	r6, sp
 802138e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8021392:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8021396:	462e      	mov	r6, r5
 8021398:	463d      	mov	r5, r7
 802139a:	42b2      	cmp	r2, r6
 802139c:	d9ef      	bls.n	802137e <__utoa+0x42>
 802139e:	2200      	movs	r2, #0
 80213a0:	545a      	strb	r2, [r3, r1]
 80213a2:	1919      	adds	r1, r3, r4
 80213a4:	1aa5      	subs	r5, r4, r2
 80213a6:	42aa      	cmp	r2, r5
 80213a8:	dae4      	bge.n	8021374 <__utoa+0x38>
 80213aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80213ae:	3201      	adds	r2, #1
 80213b0:	780e      	ldrb	r6, [r1, #0]
 80213b2:	7006      	strb	r6, [r0, #0]
 80213b4:	f801 5901 	strb.w	r5, [r1], #-1
 80213b8:	e7f4      	b.n	80213a4 <__utoa+0x68>
 80213ba:	bf00      	nop
 80213bc:	08024240 	.word	0x08024240

080213c0 <rshift>:
 80213c0:	6903      	ldr	r3, [r0, #16]
 80213c2:	114a      	asrs	r2, r1, #5
 80213c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80213c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80213cc:	f100 0414 	add.w	r4, r0, #20
 80213d0:	dd45      	ble.n	802145e <rshift+0x9e>
 80213d2:	f011 011f 	ands.w	r1, r1, #31
 80213d6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80213da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80213de:	d10c      	bne.n	80213fa <rshift+0x3a>
 80213e0:	f100 0710 	add.w	r7, r0, #16
 80213e4:	4629      	mov	r1, r5
 80213e6:	42b1      	cmp	r1, r6
 80213e8:	d334      	bcc.n	8021454 <rshift+0x94>
 80213ea:	1a9b      	subs	r3, r3, r2
 80213ec:	1eea      	subs	r2, r5, #3
 80213ee:	009b      	lsls	r3, r3, #2
 80213f0:	4296      	cmp	r6, r2
 80213f2:	bf38      	it	cc
 80213f4:	2300      	movcc	r3, #0
 80213f6:	4423      	add	r3, r4
 80213f8:	e015      	b.n	8021426 <rshift+0x66>
 80213fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80213fe:	f1c1 0820 	rsb	r8, r1, #32
 8021402:	f105 0e04 	add.w	lr, r5, #4
 8021406:	46a1      	mov	r9, r4
 8021408:	40cf      	lsrs	r7, r1
 802140a:	4576      	cmp	r6, lr
 802140c:	46f4      	mov	ip, lr
 802140e:	d815      	bhi.n	802143c <rshift+0x7c>
 8021410:	1a9a      	subs	r2, r3, r2
 8021412:	3501      	adds	r5, #1
 8021414:	0092      	lsls	r2, r2, #2
 8021416:	3a04      	subs	r2, #4
 8021418:	42ae      	cmp	r6, r5
 802141a:	bf38      	it	cc
 802141c:	2200      	movcc	r2, #0
 802141e:	18a3      	adds	r3, r4, r2
 8021420:	50a7      	str	r7, [r4, r2]
 8021422:	b107      	cbz	r7, 8021426 <rshift+0x66>
 8021424:	3304      	adds	r3, #4
 8021426:	1b1a      	subs	r2, r3, r4
 8021428:	42a3      	cmp	r3, r4
 802142a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802142e:	bf08      	it	eq
 8021430:	2300      	moveq	r3, #0
 8021432:	6102      	str	r2, [r0, #16]
 8021434:	bf08      	it	eq
 8021436:	6143      	streq	r3, [r0, #20]
 8021438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802143c:	f8dc c000 	ldr.w	ip, [ip]
 8021440:	fa0c fc08 	lsl.w	ip, ip, r8
 8021444:	ea4c 0707 	orr.w	r7, ip, r7
 8021448:	f849 7b04 	str.w	r7, [r9], #4
 802144c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021450:	40cf      	lsrs	r7, r1
 8021452:	e7da      	b.n	802140a <rshift+0x4a>
 8021454:	f851 cb04 	ldr.w	ip, [r1], #4
 8021458:	f847 cf04 	str.w	ip, [r7, #4]!
 802145c:	e7c3      	b.n	80213e6 <rshift+0x26>
 802145e:	4623      	mov	r3, r4
 8021460:	e7e1      	b.n	8021426 <rshift+0x66>

08021462 <__hexdig_fun>:
 8021462:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8021466:	2b09      	cmp	r3, #9
 8021468:	d802      	bhi.n	8021470 <__hexdig_fun+0xe>
 802146a:	3820      	subs	r0, #32
 802146c:	b2c0      	uxtb	r0, r0
 802146e:	4770      	bx	lr
 8021470:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021474:	2b05      	cmp	r3, #5
 8021476:	d801      	bhi.n	802147c <__hexdig_fun+0x1a>
 8021478:	3847      	subs	r0, #71	; 0x47
 802147a:	e7f7      	b.n	802146c <__hexdig_fun+0xa>
 802147c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021480:	2b05      	cmp	r3, #5
 8021482:	d801      	bhi.n	8021488 <__hexdig_fun+0x26>
 8021484:	3827      	subs	r0, #39	; 0x27
 8021486:	e7f1      	b.n	802146c <__hexdig_fun+0xa>
 8021488:	2000      	movs	r0, #0
 802148a:	4770      	bx	lr

0802148c <__gethex>:
 802148c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021490:	ed2d 8b02 	vpush	{d8}
 8021494:	b089      	sub	sp, #36	; 0x24
 8021496:	ee08 0a10 	vmov	s16, r0
 802149a:	468b      	mov	fp, r1
 802149c:	4690      	mov	r8, r2
 802149e:	9304      	str	r3, [sp, #16]
 80214a0:	4bb2      	ldr	r3, [pc, #712]	; (802176c <__gethex+0x2e0>)
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	4618      	mov	r0, r3
 80214a6:	9301      	str	r3, [sp, #4]
 80214a8:	f7df f808 	bl	80004bc <strlen>
 80214ac:	9b01      	ldr	r3, [sp, #4]
 80214ae:	f8db 2000 	ldr.w	r2, [fp]
 80214b2:	4682      	mov	sl, r0
 80214b4:	4403      	add	r3, r0
 80214b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80214ba:	9305      	str	r3, [sp, #20]
 80214bc:	1c93      	adds	r3, r2, #2
 80214be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80214c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80214c6:	32fe      	adds	r2, #254	; 0xfe
 80214c8:	18d1      	adds	r1, r2, r3
 80214ca:	461f      	mov	r7, r3
 80214cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80214d0:	9100      	str	r1, [sp, #0]
 80214d2:	2830      	cmp	r0, #48	; 0x30
 80214d4:	d0f8      	beq.n	80214c8 <__gethex+0x3c>
 80214d6:	f7ff ffc4 	bl	8021462 <__hexdig_fun>
 80214da:	4604      	mov	r4, r0
 80214dc:	2800      	cmp	r0, #0
 80214de:	d139      	bne.n	8021554 <__gethex+0xc8>
 80214e0:	4652      	mov	r2, sl
 80214e2:	9901      	ldr	r1, [sp, #4]
 80214e4:	4638      	mov	r0, r7
 80214e6:	f001 f86b 	bl	80225c0 <strncmp>
 80214ea:	4605      	mov	r5, r0
 80214ec:	2800      	cmp	r0, #0
 80214ee:	d167      	bne.n	80215c0 <__gethex+0x134>
 80214f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80214f4:	eb07 060a 	add.w	r6, r7, sl
 80214f8:	f7ff ffb3 	bl	8021462 <__hexdig_fun>
 80214fc:	2800      	cmp	r0, #0
 80214fe:	d061      	beq.n	80215c4 <__gethex+0x138>
 8021500:	4633      	mov	r3, r6
 8021502:	7818      	ldrb	r0, [r3, #0]
 8021504:	461f      	mov	r7, r3
 8021506:	3301      	adds	r3, #1
 8021508:	2830      	cmp	r0, #48	; 0x30
 802150a:	d0fa      	beq.n	8021502 <__gethex+0x76>
 802150c:	f7ff ffa9 	bl	8021462 <__hexdig_fun>
 8021510:	fab0 f480 	clz	r4, r0
 8021514:	2301      	movs	r3, #1
 8021516:	4635      	mov	r5, r6
 8021518:	0964      	lsrs	r4, r4, #5
 802151a:	9300      	str	r3, [sp, #0]
 802151c:	463a      	mov	r2, r7
 802151e:	4616      	mov	r6, r2
 8021520:	3201      	adds	r2, #1
 8021522:	7830      	ldrb	r0, [r6, #0]
 8021524:	f7ff ff9d 	bl	8021462 <__hexdig_fun>
 8021528:	2800      	cmp	r0, #0
 802152a:	d1f8      	bne.n	802151e <__gethex+0x92>
 802152c:	4652      	mov	r2, sl
 802152e:	9901      	ldr	r1, [sp, #4]
 8021530:	4630      	mov	r0, r6
 8021532:	f001 f845 	bl	80225c0 <strncmp>
 8021536:	b980      	cbnz	r0, 802155a <__gethex+0xce>
 8021538:	b94d      	cbnz	r5, 802154e <__gethex+0xc2>
 802153a:	eb06 050a 	add.w	r5, r6, sl
 802153e:	462a      	mov	r2, r5
 8021540:	4616      	mov	r6, r2
 8021542:	3201      	adds	r2, #1
 8021544:	7830      	ldrb	r0, [r6, #0]
 8021546:	f7ff ff8c 	bl	8021462 <__hexdig_fun>
 802154a:	2800      	cmp	r0, #0
 802154c:	d1f8      	bne.n	8021540 <__gethex+0xb4>
 802154e:	1bad      	subs	r5, r5, r6
 8021550:	00ad      	lsls	r5, r5, #2
 8021552:	e004      	b.n	802155e <__gethex+0xd2>
 8021554:	2400      	movs	r4, #0
 8021556:	4625      	mov	r5, r4
 8021558:	e7e0      	b.n	802151c <__gethex+0x90>
 802155a:	2d00      	cmp	r5, #0
 802155c:	d1f7      	bne.n	802154e <__gethex+0xc2>
 802155e:	7833      	ldrb	r3, [r6, #0]
 8021560:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021564:	2b50      	cmp	r3, #80	; 0x50
 8021566:	d13b      	bne.n	80215e0 <__gethex+0x154>
 8021568:	7873      	ldrb	r3, [r6, #1]
 802156a:	2b2b      	cmp	r3, #43	; 0x2b
 802156c:	d02c      	beq.n	80215c8 <__gethex+0x13c>
 802156e:	2b2d      	cmp	r3, #45	; 0x2d
 8021570:	d02e      	beq.n	80215d0 <__gethex+0x144>
 8021572:	1c71      	adds	r1, r6, #1
 8021574:	f04f 0900 	mov.w	r9, #0
 8021578:	7808      	ldrb	r0, [r1, #0]
 802157a:	f7ff ff72 	bl	8021462 <__hexdig_fun>
 802157e:	1e43      	subs	r3, r0, #1
 8021580:	b2db      	uxtb	r3, r3
 8021582:	2b18      	cmp	r3, #24
 8021584:	d82c      	bhi.n	80215e0 <__gethex+0x154>
 8021586:	f1a0 0210 	sub.w	r2, r0, #16
 802158a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802158e:	f7ff ff68 	bl	8021462 <__hexdig_fun>
 8021592:	1e43      	subs	r3, r0, #1
 8021594:	b2db      	uxtb	r3, r3
 8021596:	2b18      	cmp	r3, #24
 8021598:	d91d      	bls.n	80215d6 <__gethex+0x14a>
 802159a:	f1b9 0f00 	cmp.w	r9, #0
 802159e:	d000      	beq.n	80215a2 <__gethex+0x116>
 80215a0:	4252      	negs	r2, r2
 80215a2:	4415      	add	r5, r2
 80215a4:	f8cb 1000 	str.w	r1, [fp]
 80215a8:	b1e4      	cbz	r4, 80215e4 <__gethex+0x158>
 80215aa:	9b00      	ldr	r3, [sp, #0]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	bf14      	ite	ne
 80215b0:	2700      	movne	r7, #0
 80215b2:	2706      	moveq	r7, #6
 80215b4:	4638      	mov	r0, r7
 80215b6:	b009      	add	sp, #36	; 0x24
 80215b8:	ecbd 8b02 	vpop	{d8}
 80215bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215c0:	463e      	mov	r6, r7
 80215c2:	4625      	mov	r5, r4
 80215c4:	2401      	movs	r4, #1
 80215c6:	e7ca      	b.n	802155e <__gethex+0xd2>
 80215c8:	f04f 0900 	mov.w	r9, #0
 80215cc:	1cb1      	adds	r1, r6, #2
 80215ce:	e7d3      	b.n	8021578 <__gethex+0xec>
 80215d0:	f04f 0901 	mov.w	r9, #1
 80215d4:	e7fa      	b.n	80215cc <__gethex+0x140>
 80215d6:	230a      	movs	r3, #10
 80215d8:	fb03 0202 	mla	r2, r3, r2, r0
 80215dc:	3a10      	subs	r2, #16
 80215de:	e7d4      	b.n	802158a <__gethex+0xfe>
 80215e0:	4631      	mov	r1, r6
 80215e2:	e7df      	b.n	80215a4 <__gethex+0x118>
 80215e4:	1bf3      	subs	r3, r6, r7
 80215e6:	4621      	mov	r1, r4
 80215e8:	3b01      	subs	r3, #1
 80215ea:	2b07      	cmp	r3, #7
 80215ec:	dc0b      	bgt.n	8021606 <__gethex+0x17a>
 80215ee:	ee18 0a10 	vmov	r0, s16
 80215f2:	f000 fa65 	bl	8021ac0 <_Balloc>
 80215f6:	4604      	mov	r4, r0
 80215f8:	b940      	cbnz	r0, 802160c <__gethex+0x180>
 80215fa:	4b5d      	ldr	r3, [pc, #372]	; (8021770 <__gethex+0x2e4>)
 80215fc:	4602      	mov	r2, r0
 80215fe:	21de      	movs	r1, #222	; 0xde
 8021600:	485c      	ldr	r0, [pc, #368]	; (8021774 <__gethex+0x2e8>)
 8021602:	f000 ffff 	bl	8022604 <__assert_func>
 8021606:	3101      	adds	r1, #1
 8021608:	105b      	asrs	r3, r3, #1
 802160a:	e7ee      	b.n	80215ea <__gethex+0x15e>
 802160c:	f100 0914 	add.w	r9, r0, #20
 8021610:	f04f 0b00 	mov.w	fp, #0
 8021614:	f1ca 0301 	rsb	r3, sl, #1
 8021618:	f8cd 9008 	str.w	r9, [sp, #8]
 802161c:	f8cd b000 	str.w	fp, [sp]
 8021620:	9306      	str	r3, [sp, #24]
 8021622:	42b7      	cmp	r7, r6
 8021624:	d340      	bcc.n	80216a8 <__gethex+0x21c>
 8021626:	9802      	ldr	r0, [sp, #8]
 8021628:	9b00      	ldr	r3, [sp, #0]
 802162a:	f840 3b04 	str.w	r3, [r0], #4
 802162e:	eba0 0009 	sub.w	r0, r0, r9
 8021632:	1080      	asrs	r0, r0, #2
 8021634:	0146      	lsls	r6, r0, #5
 8021636:	6120      	str	r0, [r4, #16]
 8021638:	4618      	mov	r0, r3
 802163a:	f000 fb35 	bl	8021ca8 <__hi0bits>
 802163e:	1a30      	subs	r0, r6, r0
 8021640:	f8d8 6000 	ldr.w	r6, [r8]
 8021644:	42b0      	cmp	r0, r6
 8021646:	dd63      	ble.n	8021710 <__gethex+0x284>
 8021648:	1b87      	subs	r7, r0, r6
 802164a:	4620      	mov	r0, r4
 802164c:	4639      	mov	r1, r7
 802164e:	f000 fedb 	bl	8022408 <__any_on>
 8021652:	4682      	mov	sl, r0
 8021654:	b1a8      	cbz	r0, 8021682 <__gethex+0x1f6>
 8021656:	1e7b      	subs	r3, r7, #1
 8021658:	f04f 0a01 	mov.w	sl, #1
 802165c:	1159      	asrs	r1, r3, #5
 802165e:	f003 021f 	and.w	r2, r3, #31
 8021662:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8021666:	fa0a f202 	lsl.w	r2, sl, r2
 802166a:	420a      	tst	r2, r1
 802166c:	d009      	beq.n	8021682 <__gethex+0x1f6>
 802166e:	4553      	cmp	r3, sl
 8021670:	dd05      	ble.n	802167e <__gethex+0x1f2>
 8021672:	1eb9      	subs	r1, r7, #2
 8021674:	4620      	mov	r0, r4
 8021676:	f000 fec7 	bl	8022408 <__any_on>
 802167a:	2800      	cmp	r0, #0
 802167c:	d145      	bne.n	802170a <__gethex+0x27e>
 802167e:	f04f 0a02 	mov.w	sl, #2
 8021682:	443d      	add	r5, r7
 8021684:	4639      	mov	r1, r7
 8021686:	4620      	mov	r0, r4
 8021688:	f7ff fe9a 	bl	80213c0 <rshift>
 802168c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021690:	42ab      	cmp	r3, r5
 8021692:	da4c      	bge.n	802172e <__gethex+0x2a2>
 8021694:	4621      	mov	r1, r4
 8021696:	ee18 0a10 	vmov	r0, s16
 802169a:	f000 fa51 	bl	8021b40 <_Bfree>
 802169e:	2300      	movs	r3, #0
 80216a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80216a2:	27a3      	movs	r7, #163	; 0xa3
 80216a4:	6013      	str	r3, [r2, #0]
 80216a6:	e785      	b.n	80215b4 <__gethex+0x128>
 80216a8:	1e73      	subs	r3, r6, #1
 80216aa:	9a05      	ldr	r2, [sp, #20]
 80216ac:	9303      	str	r3, [sp, #12]
 80216ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80216b2:	4293      	cmp	r3, r2
 80216b4:	d019      	beq.n	80216ea <__gethex+0x25e>
 80216b6:	f1bb 0f20 	cmp.w	fp, #32
 80216ba:	d107      	bne.n	80216cc <__gethex+0x240>
 80216bc:	9b02      	ldr	r3, [sp, #8]
 80216be:	9a00      	ldr	r2, [sp, #0]
 80216c0:	f843 2b04 	str.w	r2, [r3], #4
 80216c4:	9302      	str	r3, [sp, #8]
 80216c6:	2300      	movs	r3, #0
 80216c8:	469b      	mov	fp, r3
 80216ca:	9300      	str	r3, [sp, #0]
 80216cc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80216d0:	f7ff fec7 	bl	8021462 <__hexdig_fun>
 80216d4:	f000 000f 	and.w	r0, r0, #15
 80216d8:	9b00      	ldr	r3, [sp, #0]
 80216da:	fa00 f00b 	lsl.w	r0, r0, fp
 80216de:	f10b 0b04 	add.w	fp, fp, #4
 80216e2:	4303      	orrs	r3, r0
 80216e4:	9300      	str	r3, [sp, #0]
 80216e6:	9b03      	ldr	r3, [sp, #12]
 80216e8:	e00d      	b.n	8021706 <__gethex+0x27a>
 80216ea:	9b03      	ldr	r3, [sp, #12]
 80216ec:	9a06      	ldr	r2, [sp, #24]
 80216ee:	4413      	add	r3, r2
 80216f0:	42bb      	cmp	r3, r7
 80216f2:	d3e0      	bcc.n	80216b6 <__gethex+0x22a>
 80216f4:	4618      	mov	r0, r3
 80216f6:	4652      	mov	r2, sl
 80216f8:	9901      	ldr	r1, [sp, #4]
 80216fa:	9307      	str	r3, [sp, #28]
 80216fc:	f000 ff60 	bl	80225c0 <strncmp>
 8021700:	9b07      	ldr	r3, [sp, #28]
 8021702:	2800      	cmp	r0, #0
 8021704:	d1d7      	bne.n	80216b6 <__gethex+0x22a>
 8021706:	461e      	mov	r6, r3
 8021708:	e78b      	b.n	8021622 <__gethex+0x196>
 802170a:	f04f 0a03 	mov.w	sl, #3
 802170e:	e7b8      	b.n	8021682 <__gethex+0x1f6>
 8021710:	da0a      	bge.n	8021728 <__gethex+0x29c>
 8021712:	1a37      	subs	r7, r6, r0
 8021714:	4621      	mov	r1, r4
 8021716:	ee18 0a10 	vmov	r0, s16
 802171a:	463a      	mov	r2, r7
 802171c:	1bed      	subs	r5, r5, r7
 802171e:	f000 fc2b 	bl	8021f78 <__lshift>
 8021722:	4604      	mov	r4, r0
 8021724:	f100 0914 	add.w	r9, r0, #20
 8021728:	f04f 0a00 	mov.w	sl, #0
 802172c:	e7ae      	b.n	802168c <__gethex+0x200>
 802172e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021732:	42a8      	cmp	r0, r5
 8021734:	dd72      	ble.n	802181c <__gethex+0x390>
 8021736:	1b45      	subs	r5, r0, r5
 8021738:	42ae      	cmp	r6, r5
 802173a:	dc35      	bgt.n	80217a8 <__gethex+0x31c>
 802173c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021740:	2b02      	cmp	r3, #2
 8021742:	d029      	beq.n	8021798 <__gethex+0x30c>
 8021744:	2b03      	cmp	r3, #3
 8021746:	d02b      	beq.n	80217a0 <__gethex+0x314>
 8021748:	2b01      	cmp	r3, #1
 802174a:	d11b      	bne.n	8021784 <__gethex+0x2f8>
 802174c:	42ae      	cmp	r6, r5
 802174e:	d119      	bne.n	8021784 <__gethex+0x2f8>
 8021750:	2e01      	cmp	r6, #1
 8021752:	d111      	bne.n	8021778 <__gethex+0x2ec>
 8021754:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021758:	2762      	movs	r7, #98	; 0x62
 802175a:	9a04      	ldr	r2, [sp, #16]
 802175c:	6013      	str	r3, [r2, #0]
 802175e:	2301      	movs	r3, #1
 8021760:	6123      	str	r3, [r4, #16]
 8021762:	f8c9 3000 	str.w	r3, [r9]
 8021766:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021768:	601c      	str	r4, [r3, #0]
 802176a:	e723      	b.n	80215b4 <__gethex+0x128>
 802176c:	080243dc 	.word	0x080243dc
 8021770:	08024366 	.word	0x08024366
 8021774:	08024377 	.word	0x08024377
 8021778:	1e71      	subs	r1, r6, #1
 802177a:	4620      	mov	r0, r4
 802177c:	f000 fe44 	bl	8022408 <__any_on>
 8021780:	2800      	cmp	r0, #0
 8021782:	d1e7      	bne.n	8021754 <__gethex+0x2c8>
 8021784:	4621      	mov	r1, r4
 8021786:	ee18 0a10 	vmov	r0, s16
 802178a:	f000 f9d9 	bl	8021b40 <_Bfree>
 802178e:	2300      	movs	r3, #0
 8021790:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021792:	2750      	movs	r7, #80	; 0x50
 8021794:	6013      	str	r3, [r2, #0]
 8021796:	e70d      	b.n	80215b4 <__gethex+0x128>
 8021798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802179a:	2b00      	cmp	r3, #0
 802179c:	d1f2      	bne.n	8021784 <__gethex+0x2f8>
 802179e:	e7d9      	b.n	8021754 <__gethex+0x2c8>
 80217a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	d1d6      	bne.n	8021754 <__gethex+0x2c8>
 80217a6:	e7ed      	b.n	8021784 <__gethex+0x2f8>
 80217a8:	1e6f      	subs	r7, r5, #1
 80217aa:	f1ba 0f00 	cmp.w	sl, #0
 80217ae:	d132      	bne.n	8021816 <__gethex+0x38a>
 80217b0:	b127      	cbz	r7, 80217bc <__gethex+0x330>
 80217b2:	4639      	mov	r1, r7
 80217b4:	4620      	mov	r0, r4
 80217b6:	f000 fe27 	bl	8022408 <__any_on>
 80217ba:	4682      	mov	sl, r0
 80217bc:	117b      	asrs	r3, r7, #5
 80217be:	2101      	movs	r1, #1
 80217c0:	f007 071f 	and.w	r7, r7, #31
 80217c4:	4620      	mov	r0, r4
 80217c6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80217ca:	1b76      	subs	r6, r6, r5
 80217cc:	fa01 f707 	lsl.w	r7, r1, r7
 80217d0:	4629      	mov	r1, r5
 80217d2:	421f      	tst	r7, r3
 80217d4:	f04f 0702 	mov.w	r7, #2
 80217d8:	bf18      	it	ne
 80217da:	f04a 0a02 	orrne.w	sl, sl, #2
 80217de:	f7ff fdef 	bl	80213c0 <rshift>
 80217e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80217e6:	f1ba 0f00 	cmp.w	sl, #0
 80217ea:	d048      	beq.n	802187e <__gethex+0x3f2>
 80217ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80217f0:	2b02      	cmp	r3, #2
 80217f2:	d015      	beq.n	8021820 <__gethex+0x394>
 80217f4:	2b03      	cmp	r3, #3
 80217f6:	d017      	beq.n	8021828 <__gethex+0x39c>
 80217f8:	2b01      	cmp	r3, #1
 80217fa:	d109      	bne.n	8021810 <__gethex+0x384>
 80217fc:	f01a 0f02 	tst.w	sl, #2
 8021800:	d006      	beq.n	8021810 <__gethex+0x384>
 8021802:	f8d9 0000 	ldr.w	r0, [r9]
 8021806:	ea4a 0a00 	orr.w	sl, sl, r0
 802180a:	f01a 0f01 	tst.w	sl, #1
 802180e:	d10e      	bne.n	802182e <__gethex+0x3a2>
 8021810:	f047 0710 	orr.w	r7, r7, #16
 8021814:	e033      	b.n	802187e <__gethex+0x3f2>
 8021816:	f04f 0a01 	mov.w	sl, #1
 802181a:	e7cf      	b.n	80217bc <__gethex+0x330>
 802181c:	2701      	movs	r7, #1
 802181e:	e7e2      	b.n	80217e6 <__gethex+0x35a>
 8021820:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021822:	f1c3 0301 	rsb	r3, r3, #1
 8021826:	9315      	str	r3, [sp, #84]	; 0x54
 8021828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802182a:	2b00      	cmp	r3, #0
 802182c:	d0f0      	beq.n	8021810 <__gethex+0x384>
 802182e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021832:	f104 0314 	add.w	r3, r4, #20
 8021836:	f04f 0c00 	mov.w	ip, #0
 802183a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802183e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021842:	4618      	mov	r0, r3
 8021844:	f853 2b04 	ldr.w	r2, [r3], #4
 8021848:	f1b2 3fff 	cmp.w	r2, #4294967295
 802184c:	d01c      	beq.n	8021888 <__gethex+0x3fc>
 802184e:	3201      	adds	r2, #1
 8021850:	6002      	str	r2, [r0, #0]
 8021852:	2f02      	cmp	r7, #2
 8021854:	f104 0314 	add.w	r3, r4, #20
 8021858:	d13f      	bne.n	80218da <__gethex+0x44e>
 802185a:	f8d8 2000 	ldr.w	r2, [r8]
 802185e:	3a01      	subs	r2, #1
 8021860:	42b2      	cmp	r2, r6
 8021862:	d10a      	bne.n	802187a <__gethex+0x3ee>
 8021864:	1171      	asrs	r1, r6, #5
 8021866:	2201      	movs	r2, #1
 8021868:	f006 061f 	and.w	r6, r6, #31
 802186c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021870:	fa02 f606 	lsl.w	r6, r2, r6
 8021874:	421e      	tst	r6, r3
 8021876:	bf18      	it	ne
 8021878:	4617      	movne	r7, r2
 802187a:	f047 0720 	orr.w	r7, r7, #32
 802187e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021880:	601c      	str	r4, [r3, #0]
 8021882:	9b04      	ldr	r3, [sp, #16]
 8021884:	601d      	str	r5, [r3, #0]
 8021886:	e695      	b.n	80215b4 <__gethex+0x128>
 8021888:	4299      	cmp	r1, r3
 802188a:	f843 cc04 	str.w	ip, [r3, #-4]
 802188e:	d8d8      	bhi.n	8021842 <__gethex+0x3b6>
 8021890:	68a3      	ldr	r3, [r4, #8]
 8021892:	459b      	cmp	fp, r3
 8021894:	db19      	blt.n	80218ca <__gethex+0x43e>
 8021896:	6861      	ldr	r1, [r4, #4]
 8021898:	ee18 0a10 	vmov	r0, s16
 802189c:	3101      	adds	r1, #1
 802189e:	f000 f90f 	bl	8021ac0 <_Balloc>
 80218a2:	4681      	mov	r9, r0
 80218a4:	b918      	cbnz	r0, 80218ae <__gethex+0x422>
 80218a6:	4b1b      	ldr	r3, [pc, #108]	; (8021914 <__gethex+0x488>)
 80218a8:	4602      	mov	r2, r0
 80218aa:	2184      	movs	r1, #132	; 0x84
 80218ac:	e6a8      	b.n	8021600 <__gethex+0x174>
 80218ae:	6922      	ldr	r2, [r4, #16]
 80218b0:	f104 010c 	add.w	r1, r4, #12
 80218b4:	300c      	adds	r0, #12
 80218b6:	3202      	adds	r2, #2
 80218b8:	0092      	lsls	r2, r2, #2
 80218ba:	f7fe fe4d 	bl	8020558 <memcpy>
 80218be:	4621      	mov	r1, r4
 80218c0:	464c      	mov	r4, r9
 80218c2:	ee18 0a10 	vmov	r0, s16
 80218c6:	f000 f93b 	bl	8021b40 <_Bfree>
 80218ca:	6923      	ldr	r3, [r4, #16]
 80218cc:	1c5a      	adds	r2, r3, #1
 80218ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80218d2:	6122      	str	r2, [r4, #16]
 80218d4:	2201      	movs	r2, #1
 80218d6:	615a      	str	r2, [r3, #20]
 80218d8:	e7bb      	b.n	8021852 <__gethex+0x3c6>
 80218da:	6922      	ldr	r2, [r4, #16]
 80218dc:	455a      	cmp	r2, fp
 80218de:	dd0b      	ble.n	80218f8 <__gethex+0x46c>
 80218e0:	2101      	movs	r1, #1
 80218e2:	4620      	mov	r0, r4
 80218e4:	f7ff fd6c 	bl	80213c0 <rshift>
 80218e8:	3501      	adds	r5, #1
 80218ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80218ee:	42ab      	cmp	r3, r5
 80218f0:	f6ff aed0 	blt.w	8021694 <__gethex+0x208>
 80218f4:	2701      	movs	r7, #1
 80218f6:	e7c0      	b.n	802187a <__gethex+0x3ee>
 80218f8:	f016 061f 	ands.w	r6, r6, #31
 80218fc:	d0fa      	beq.n	80218f4 <__gethex+0x468>
 80218fe:	4453      	add	r3, sl
 8021900:	f1c6 0620 	rsb	r6, r6, #32
 8021904:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021908:	f000 f9ce 	bl	8021ca8 <__hi0bits>
 802190c:	42b0      	cmp	r0, r6
 802190e:	dbe7      	blt.n	80218e0 <__gethex+0x454>
 8021910:	e7f0      	b.n	80218f4 <__gethex+0x468>
 8021912:	bf00      	nop
 8021914:	08024366 	.word	0x08024366

08021918 <L_shift>:
 8021918:	f1c2 0208 	rsb	r2, r2, #8
 802191c:	0092      	lsls	r2, r2, #2
 802191e:	b570      	push	{r4, r5, r6, lr}
 8021920:	f1c2 0620 	rsb	r6, r2, #32
 8021924:	6843      	ldr	r3, [r0, #4]
 8021926:	6804      	ldr	r4, [r0, #0]
 8021928:	fa03 f506 	lsl.w	r5, r3, r6
 802192c:	40d3      	lsrs	r3, r2
 802192e:	432c      	orrs	r4, r5
 8021930:	6004      	str	r4, [r0, #0]
 8021932:	f840 3f04 	str.w	r3, [r0, #4]!
 8021936:	4288      	cmp	r0, r1
 8021938:	d3f4      	bcc.n	8021924 <L_shift+0xc>
 802193a:	bd70      	pop	{r4, r5, r6, pc}

0802193c <__match>:
 802193c:	6803      	ldr	r3, [r0, #0]
 802193e:	3301      	adds	r3, #1
 8021940:	b530      	push	{r4, r5, lr}
 8021942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021946:	b914      	cbnz	r4, 802194e <__match+0x12>
 8021948:	6003      	str	r3, [r0, #0]
 802194a:	2001      	movs	r0, #1
 802194c:	bd30      	pop	{r4, r5, pc}
 802194e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021952:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8021956:	2d19      	cmp	r5, #25
 8021958:	bf98      	it	ls
 802195a:	3220      	addls	r2, #32
 802195c:	42a2      	cmp	r2, r4
 802195e:	d0f0      	beq.n	8021942 <__match+0x6>
 8021960:	2000      	movs	r0, #0
 8021962:	e7f3      	b.n	802194c <__match+0x10>

08021964 <__hexnan>:
 8021964:	680b      	ldr	r3, [r1, #0]
 8021966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802196a:	115e      	asrs	r6, r3, #5
 802196c:	f013 031f 	ands.w	r3, r3, #31
 8021970:	f04f 0500 	mov.w	r5, #0
 8021974:	b087      	sub	sp, #28
 8021976:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802197a:	4690      	mov	r8, r2
 802197c:	4682      	mov	sl, r0
 802197e:	6802      	ldr	r2, [r0, #0]
 8021980:	bf18      	it	ne
 8021982:	3604      	addne	r6, #4
 8021984:	46ab      	mov	fp, r5
 8021986:	9301      	str	r3, [sp, #4]
 8021988:	1f37      	subs	r7, r6, #4
 802198a:	f846 5c04 	str.w	r5, [r6, #-4]
 802198e:	9502      	str	r5, [sp, #8]
 8021990:	46b9      	mov	r9, r7
 8021992:	463c      	mov	r4, r7
 8021994:	1c53      	adds	r3, r2, #1
 8021996:	7851      	ldrb	r1, [r2, #1]
 8021998:	9303      	str	r3, [sp, #12]
 802199a:	b341      	cbz	r1, 80219ee <__hexnan+0x8a>
 802199c:	4608      	mov	r0, r1
 802199e:	9205      	str	r2, [sp, #20]
 80219a0:	9104      	str	r1, [sp, #16]
 80219a2:	f7ff fd5e 	bl	8021462 <__hexdig_fun>
 80219a6:	2800      	cmp	r0, #0
 80219a8:	d14f      	bne.n	8021a4a <__hexnan+0xe6>
 80219aa:	9904      	ldr	r1, [sp, #16]
 80219ac:	9a05      	ldr	r2, [sp, #20]
 80219ae:	2920      	cmp	r1, #32
 80219b0:	d818      	bhi.n	80219e4 <__hexnan+0x80>
 80219b2:	9b02      	ldr	r3, [sp, #8]
 80219b4:	459b      	cmp	fp, r3
 80219b6:	dd13      	ble.n	80219e0 <__hexnan+0x7c>
 80219b8:	454c      	cmp	r4, r9
 80219ba:	d206      	bcs.n	80219ca <__hexnan+0x66>
 80219bc:	2d07      	cmp	r5, #7
 80219be:	dc04      	bgt.n	80219ca <__hexnan+0x66>
 80219c0:	462a      	mov	r2, r5
 80219c2:	4649      	mov	r1, r9
 80219c4:	4620      	mov	r0, r4
 80219c6:	f7ff ffa7 	bl	8021918 <L_shift>
 80219ca:	4544      	cmp	r4, r8
 80219cc:	d94f      	bls.n	8021a6e <__hexnan+0x10a>
 80219ce:	2300      	movs	r3, #0
 80219d0:	f1a4 0904 	sub.w	r9, r4, #4
 80219d4:	f8cd b008 	str.w	fp, [sp, #8]
 80219d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80219dc:	461d      	mov	r5, r3
 80219de:	464c      	mov	r4, r9
 80219e0:	9a03      	ldr	r2, [sp, #12]
 80219e2:	e7d7      	b.n	8021994 <__hexnan+0x30>
 80219e4:	2929      	cmp	r1, #41	; 0x29
 80219e6:	d155      	bne.n	8021a94 <__hexnan+0x130>
 80219e8:	3202      	adds	r2, #2
 80219ea:	f8ca 2000 	str.w	r2, [sl]
 80219ee:	f1bb 0f00 	cmp.w	fp, #0
 80219f2:	d04f      	beq.n	8021a94 <__hexnan+0x130>
 80219f4:	454c      	cmp	r4, r9
 80219f6:	d206      	bcs.n	8021a06 <__hexnan+0xa2>
 80219f8:	2d07      	cmp	r5, #7
 80219fa:	dc04      	bgt.n	8021a06 <__hexnan+0xa2>
 80219fc:	462a      	mov	r2, r5
 80219fe:	4649      	mov	r1, r9
 8021a00:	4620      	mov	r0, r4
 8021a02:	f7ff ff89 	bl	8021918 <L_shift>
 8021a06:	4544      	cmp	r4, r8
 8021a08:	d933      	bls.n	8021a72 <__hexnan+0x10e>
 8021a0a:	f1a8 0204 	sub.w	r2, r8, #4
 8021a0e:	4623      	mov	r3, r4
 8021a10:	f853 1b04 	ldr.w	r1, [r3], #4
 8021a14:	429f      	cmp	r7, r3
 8021a16:	f842 1f04 	str.w	r1, [r2, #4]!
 8021a1a:	d2f9      	bcs.n	8021a10 <__hexnan+0xac>
 8021a1c:	1b3b      	subs	r3, r7, r4
 8021a1e:	3e03      	subs	r6, #3
 8021a20:	3401      	adds	r4, #1
 8021a22:	2200      	movs	r2, #0
 8021a24:	f023 0303 	bic.w	r3, r3, #3
 8021a28:	3304      	adds	r3, #4
 8021a2a:	42b4      	cmp	r4, r6
 8021a2c:	bf88      	it	hi
 8021a2e:	2304      	movhi	r3, #4
 8021a30:	4443      	add	r3, r8
 8021a32:	f843 2b04 	str.w	r2, [r3], #4
 8021a36:	429f      	cmp	r7, r3
 8021a38:	d2fb      	bcs.n	8021a32 <__hexnan+0xce>
 8021a3a:	683b      	ldr	r3, [r7, #0]
 8021a3c:	b91b      	cbnz	r3, 8021a46 <__hexnan+0xe2>
 8021a3e:	4547      	cmp	r7, r8
 8021a40:	d126      	bne.n	8021a90 <__hexnan+0x12c>
 8021a42:	2301      	movs	r3, #1
 8021a44:	603b      	str	r3, [r7, #0]
 8021a46:	2005      	movs	r0, #5
 8021a48:	e025      	b.n	8021a96 <__hexnan+0x132>
 8021a4a:	3501      	adds	r5, #1
 8021a4c:	f10b 0b01 	add.w	fp, fp, #1
 8021a50:	2d08      	cmp	r5, #8
 8021a52:	dd05      	ble.n	8021a60 <__hexnan+0xfc>
 8021a54:	4544      	cmp	r4, r8
 8021a56:	d9c3      	bls.n	80219e0 <__hexnan+0x7c>
 8021a58:	2300      	movs	r3, #0
 8021a5a:	3c04      	subs	r4, #4
 8021a5c:	2501      	movs	r5, #1
 8021a5e:	6023      	str	r3, [r4, #0]
 8021a60:	6822      	ldr	r2, [r4, #0]
 8021a62:	f000 000f 	and.w	r0, r0, #15
 8021a66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8021a6a:	6022      	str	r2, [r4, #0]
 8021a6c:	e7b8      	b.n	80219e0 <__hexnan+0x7c>
 8021a6e:	2508      	movs	r5, #8
 8021a70:	e7b6      	b.n	80219e0 <__hexnan+0x7c>
 8021a72:	9b01      	ldr	r3, [sp, #4]
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d0e0      	beq.n	8021a3a <__hexnan+0xd6>
 8021a78:	f04f 32ff 	mov.w	r2, #4294967295
 8021a7c:	f1c3 0320 	rsb	r3, r3, #32
 8021a80:	fa22 f303 	lsr.w	r3, r2, r3
 8021a84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8021a88:	401a      	ands	r2, r3
 8021a8a:	f846 2c04 	str.w	r2, [r6, #-4]
 8021a8e:	e7d4      	b.n	8021a3a <__hexnan+0xd6>
 8021a90:	3f04      	subs	r7, #4
 8021a92:	e7d2      	b.n	8021a3a <__hexnan+0xd6>
 8021a94:	2004      	movs	r0, #4
 8021a96:	b007      	add	sp, #28
 8021a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a9c <__ascii_mbtowc>:
 8021a9c:	b082      	sub	sp, #8
 8021a9e:	b901      	cbnz	r1, 8021aa2 <__ascii_mbtowc+0x6>
 8021aa0:	a901      	add	r1, sp, #4
 8021aa2:	b142      	cbz	r2, 8021ab6 <__ascii_mbtowc+0x1a>
 8021aa4:	b14b      	cbz	r3, 8021aba <__ascii_mbtowc+0x1e>
 8021aa6:	7813      	ldrb	r3, [r2, #0]
 8021aa8:	600b      	str	r3, [r1, #0]
 8021aaa:	7812      	ldrb	r2, [r2, #0]
 8021aac:	1e10      	subs	r0, r2, #0
 8021aae:	bf18      	it	ne
 8021ab0:	2001      	movne	r0, #1
 8021ab2:	b002      	add	sp, #8
 8021ab4:	4770      	bx	lr
 8021ab6:	4610      	mov	r0, r2
 8021ab8:	e7fb      	b.n	8021ab2 <__ascii_mbtowc+0x16>
 8021aba:	f06f 0001 	mvn.w	r0, #1
 8021abe:	e7f8      	b.n	8021ab2 <__ascii_mbtowc+0x16>

08021ac0 <_Balloc>:
 8021ac0:	b570      	push	{r4, r5, r6, lr}
 8021ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021ac4:	4604      	mov	r4, r0
 8021ac6:	460d      	mov	r5, r1
 8021ac8:	b976      	cbnz	r6, 8021ae8 <_Balloc+0x28>
 8021aca:	2010      	movs	r0, #16
 8021acc:	f000 fdca 	bl	8022664 <malloc>
 8021ad0:	4602      	mov	r2, r0
 8021ad2:	6260      	str	r0, [r4, #36]	; 0x24
 8021ad4:	b920      	cbnz	r0, 8021ae0 <_Balloc+0x20>
 8021ad6:	4b18      	ldr	r3, [pc, #96]	; (8021b38 <_Balloc+0x78>)
 8021ad8:	2166      	movs	r1, #102	; 0x66
 8021ada:	4818      	ldr	r0, [pc, #96]	; (8021b3c <_Balloc+0x7c>)
 8021adc:	f000 fd92 	bl	8022604 <__assert_func>
 8021ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021ae4:	6006      	str	r6, [r0, #0]
 8021ae6:	60c6      	str	r6, [r0, #12]
 8021ae8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021aea:	68f3      	ldr	r3, [r6, #12]
 8021aec:	b183      	cbz	r3, 8021b10 <_Balloc+0x50>
 8021aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021af0:	68db      	ldr	r3, [r3, #12]
 8021af2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021af6:	b9b8      	cbnz	r0, 8021b28 <_Balloc+0x68>
 8021af8:	2101      	movs	r1, #1
 8021afa:	4620      	mov	r0, r4
 8021afc:	fa01 f605 	lsl.w	r6, r1, r5
 8021b00:	1d72      	adds	r2, r6, #5
 8021b02:	0092      	lsls	r2, r2, #2
 8021b04:	f000 fca1 	bl	802244a <_calloc_r>
 8021b08:	b160      	cbz	r0, 8021b24 <_Balloc+0x64>
 8021b0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021b0e:	e00e      	b.n	8021b2e <_Balloc+0x6e>
 8021b10:	2221      	movs	r2, #33	; 0x21
 8021b12:	2104      	movs	r1, #4
 8021b14:	4620      	mov	r0, r4
 8021b16:	f000 fc98 	bl	802244a <_calloc_r>
 8021b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021b1c:	60f0      	str	r0, [r6, #12]
 8021b1e:	68db      	ldr	r3, [r3, #12]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d1e4      	bne.n	8021aee <_Balloc+0x2e>
 8021b24:	2000      	movs	r0, #0
 8021b26:	bd70      	pop	{r4, r5, r6, pc}
 8021b28:	6802      	ldr	r2, [r0, #0]
 8021b2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021b2e:	2300      	movs	r3, #0
 8021b30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021b34:	e7f7      	b.n	8021b26 <_Balloc+0x66>
 8021b36:	bf00      	nop
 8021b38:	080243f0 	.word	0x080243f0
 8021b3c:	08024407 	.word	0x08024407

08021b40 <_Bfree>:
 8021b40:	b570      	push	{r4, r5, r6, lr}
 8021b42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021b44:	4605      	mov	r5, r0
 8021b46:	460c      	mov	r4, r1
 8021b48:	b976      	cbnz	r6, 8021b68 <_Bfree+0x28>
 8021b4a:	2010      	movs	r0, #16
 8021b4c:	f000 fd8a 	bl	8022664 <malloc>
 8021b50:	4602      	mov	r2, r0
 8021b52:	6268      	str	r0, [r5, #36]	; 0x24
 8021b54:	b920      	cbnz	r0, 8021b60 <_Bfree+0x20>
 8021b56:	4b09      	ldr	r3, [pc, #36]	; (8021b7c <_Bfree+0x3c>)
 8021b58:	218a      	movs	r1, #138	; 0x8a
 8021b5a:	4809      	ldr	r0, [pc, #36]	; (8021b80 <_Bfree+0x40>)
 8021b5c:	f000 fd52 	bl	8022604 <__assert_func>
 8021b60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021b64:	6006      	str	r6, [r0, #0]
 8021b66:	60c6      	str	r6, [r0, #12]
 8021b68:	b13c      	cbz	r4, 8021b7a <_Bfree+0x3a>
 8021b6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021b6c:	6862      	ldr	r2, [r4, #4]
 8021b6e:	68db      	ldr	r3, [r3, #12]
 8021b70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021b74:	6021      	str	r1, [r4, #0]
 8021b76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021b7a:	bd70      	pop	{r4, r5, r6, pc}
 8021b7c:	080243f0 	.word	0x080243f0
 8021b80:	08024407 	.word	0x08024407

08021b84 <__multadd>:
 8021b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b88:	f101 0c14 	add.w	ip, r1, #20
 8021b8c:	4607      	mov	r7, r0
 8021b8e:	460c      	mov	r4, r1
 8021b90:	461e      	mov	r6, r3
 8021b92:	690d      	ldr	r5, [r1, #16]
 8021b94:	2000      	movs	r0, #0
 8021b96:	f8dc 3000 	ldr.w	r3, [ip]
 8021b9a:	3001      	adds	r0, #1
 8021b9c:	b299      	uxth	r1, r3
 8021b9e:	4285      	cmp	r5, r0
 8021ba0:	fb02 6101 	mla	r1, r2, r1, r6
 8021ba4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021ba8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8021bac:	b289      	uxth	r1, r1
 8021bae:	fb02 3306 	mla	r3, r2, r6, r3
 8021bb2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021bb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021bba:	f84c 1b04 	str.w	r1, [ip], #4
 8021bbe:	dcea      	bgt.n	8021b96 <__multadd+0x12>
 8021bc0:	b30e      	cbz	r6, 8021c06 <__multadd+0x82>
 8021bc2:	68a3      	ldr	r3, [r4, #8]
 8021bc4:	42ab      	cmp	r3, r5
 8021bc6:	dc19      	bgt.n	8021bfc <__multadd+0x78>
 8021bc8:	6861      	ldr	r1, [r4, #4]
 8021bca:	4638      	mov	r0, r7
 8021bcc:	3101      	adds	r1, #1
 8021bce:	f7ff ff77 	bl	8021ac0 <_Balloc>
 8021bd2:	4680      	mov	r8, r0
 8021bd4:	b928      	cbnz	r0, 8021be2 <__multadd+0x5e>
 8021bd6:	4602      	mov	r2, r0
 8021bd8:	4b0c      	ldr	r3, [pc, #48]	; (8021c0c <__multadd+0x88>)
 8021bda:	21b5      	movs	r1, #181	; 0xb5
 8021bdc:	480c      	ldr	r0, [pc, #48]	; (8021c10 <__multadd+0x8c>)
 8021bde:	f000 fd11 	bl	8022604 <__assert_func>
 8021be2:	6922      	ldr	r2, [r4, #16]
 8021be4:	f104 010c 	add.w	r1, r4, #12
 8021be8:	300c      	adds	r0, #12
 8021bea:	3202      	adds	r2, #2
 8021bec:	0092      	lsls	r2, r2, #2
 8021bee:	f7fe fcb3 	bl	8020558 <memcpy>
 8021bf2:	4621      	mov	r1, r4
 8021bf4:	4644      	mov	r4, r8
 8021bf6:	4638      	mov	r0, r7
 8021bf8:	f7ff ffa2 	bl	8021b40 <_Bfree>
 8021bfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021c00:	3501      	adds	r5, #1
 8021c02:	615e      	str	r6, [r3, #20]
 8021c04:	6125      	str	r5, [r4, #16]
 8021c06:	4620      	mov	r0, r4
 8021c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c0c:	08024366 	.word	0x08024366
 8021c10:	08024407 	.word	0x08024407

08021c14 <__s2b>:
 8021c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c18:	4615      	mov	r5, r2
 8021c1a:	461f      	mov	r7, r3
 8021c1c:	2209      	movs	r2, #9
 8021c1e:	3308      	adds	r3, #8
 8021c20:	460c      	mov	r4, r1
 8021c22:	4606      	mov	r6, r0
 8021c24:	2100      	movs	r1, #0
 8021c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8021c2a:	2201      	movs	r2, #1
 8021c2c:	429a      	cmp	r2, r3
 8021c2e:	db09      	blt.n	8021c44 <__s2b+0x30>
 8021c30:	4630      	mov	r0, r6
 8021c32:	f7ff ff45 	bl	8021ac0 <_Balloc>
 8021c36:	b940      	cbnz	r0, 8021c4a <__s2b+0x36>
 8021c38:	4602      	mov	r2, r0
 8021c3a:	4b19      	ldr	r3, [pc, #100]	; (8021ca0 <__s2b+0x8c>)
 8021c3c:	21ce      	movs	r1, #206	; 0xce
 8021c3e:	4819      	ldr	r0, [pc, #100]	; (8021ca4 <__s2b+0x90>)
 8021c40:	f000 fce0 	bl	8022604 <__assert_func>
 8021c44:	0052      	lsls	r2, r2, #1
 8021c46:	3101      	adds	r1, #1
 8021c48:	e7f0      	b.n	8021c2c <__s2b+0x18>
 8021c4a:	9b08      	ldr	r3, [sp, #32]
 8021c4c:	2d09      	cmp	r5, #9
 8021c4e:	6143      	str	r3, [r0, #20]
 8021c50:	f04f 0301 	mov.w	r3, #1
 8021c54:	6103      	str	r3, [r0, #16]
 8021c56:	dd16      	ble.n	8021c86 <__s2b+0x72>
 8021c58:	f104 0909 	add.w	r9, r4, #9
 8021c5c:	442c      	add	r4, r5
 8021c5e:	46c8      	mov	r8, r9
 8021c60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021c64:	4601      	mov	r1, r0
 8021c66:	220a      	movs	r2, #10
 8021c68:	4630      	mov	r0, r6
 8021c6a:	3b30      	subs	r3, #48	; 0x30
 8021c6c:	f7ff ff8a 	bl	8021b84 <__multadd>
 8021c70:	45a0      	cmp	r8, r4
 8021c72:	d1f5      	bne.n	8021c60 <__s2b+0x4c>
 8021c74:	f1a5 0408 	sub.w	r4, r5, #8
 8021c78:	444c      	add	r4, r9
 8021c7a:	1b2d      	subs	r5, r5, r4
 8021c7c:	1963      	adds	r3, r4, r5
 8021c7e:	42bb      	cmp	r3, r7
 8021c80:	db04      	blt.n	8021c8c <__s2b+0x78>
 8021c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021c86:	340a      	adds	r4, #10
 8021c88:	2509      	movs	r5, #9
 8021c8a:	e7f6      	b.n	8021c7a <__s2b+0x66>
 8021c8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021c90:	4601      	mov	r1, r0
 8021c92:	220a      	movs	r2, #10
 8021c94:	4630      	mov	r0, r6
 8021c96:	3b30      	subs	r3, #48	; 0x30
 8021c98:	f7ff ff74 	bl	8021b84 <__multadd>
 8021c9c:	e7ee      	b.n	8021c7c <__s2b+0x68>
 8021c9e:	bf00      	nop
 8021ca0:	08024366 	.word	0x08024366
 8021ca4:	08024407 	.word	0x08024407

08021ca8 <__hi0bits>:
 8021ca8:	0c03      	lsrs	r3, r0, #16
 8021caa:	041b      	lsls	r3, r3, #16
 8021cac:	b9d3      	cbnz	r3, 8021ce4 <__hi0bits+0x3c>
 8021cae:	0400      	lsls	r0, r0, #16
 8021cb0:	2310      	movs	r3, #16
 8021cb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021cb6:	bf04      	itt	eq
 8021cb8:	0200      	lsleq	r0, r0, #8
 8021cba:	3308      	addeq	r3, #8
 8021cbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021cc0:	bf04      	itt	eq
 8021cc2:	0100      	lsleq	r0, r0, #4
 8021cc4:	3304      	addeq	r3, #4
 8021cc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021cca:	bf04      	itt	eq
 8021ccc:	0080      	lsleq	r0, r0, #2
 8021cce:	3302      	addeq	r3, #2
 8021cd0:	2800      	cmp	r0, #0
 8021cd2:	db05      	blt.n	8021ce0 <__hi0bits+0x38>
 8021cd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021cd8:	f103 0301 	add.w	r3, r3, #1
 8021cdc:	bf08      	it	eq
 8021cde:	2320      	moveq	r3, #32
 8021ce0:	4618      	mov	r0, r3
 8021ce2:	4770      	bx	lr
 8021ce4:	2300      	movs	r3, #0
 8021ce6:	e7e4      	b.n	8021cb2 <__hi0bits+0xa>

08021ce8 <__lo0bits>:
 8021ce8:	6803      	ldr	r3, [r0, #0]
 8021cea:	4601      	mov	r1, r0
 8021cec:	f013 0207 	ands.w	r2, r3, #7
 8021cf0:	d00b      	beq.n	8021d0a <__lo0bits+0x22>
 8021cf2:	07da      	lsls	r2, r3, #31
 8021cf4:	d423      	bmi.n	8021d3e <__lo0bits+0x56>
 8021cf6:	0798      	lsls	r0, r3, #30
 8021cf8:	bf47      	ittee	mi
 8021cfa:	085b      	lsrmi	r3, r3, #1
 8021cfc:	2001      	movmi	r0, #1
 8021cfe:	089b      	lsrpl	r3, r3, #2
 8021d00:	2002      	movpl	r0, #2
 8021d02:	bf4c      	ite	mi
 8021d04:	600b      	strmi	r3, [r1, #0]
 8021d06:	600b      	strpl	r3, [r1, #0]
 8021d08:	4770      	bx	lr
 8021d0a:	b298      	uxth	r0, r3
 8021d0c:	b9a8      	cbnz	r0, 8021d3a <__lo0bits+0x52>
 8021d0e:	0c1b      	lsrs	r3, r3, #16
 8021d10:	2010      	movs	r0, #16
 8021d12:	b2da      	uxtb	r2, r3
 8021d14:	b90a      	cbnz	r2, 8021d1a <__lo0bits+0x32>
 8021d16:	3008      	adds	r0, #8
 8021d18:	0a1b      	lsrs	r3, r3, #8
 8021d1a:	071a      	lsls	r2, r3, #28
 8021d1c:	bf04      	itt	eq
 8021d1e:	091b      	lsreq	r3, r3, #4
 8021d20:	3004      	addeq	r0, #4
 8021d22:	079a      	lsls	r2, r3, #30
 8021d24:	bf04      	itt	eq
 8021d26:	089b      	lsreq	r3, r3, #2
 8021d28:	3002      	addeq	r0, #2
 8021d2a:	07da      	lsls	r2, r3, #31
 8021d2c:	d403      	bmi.n	8021d36 <__lo0bits+0x4e>
 8021d2e:	085b      	lsrs	r3, r3, #1
 8021d30:	f100 0001 	add.w	r0, r0, #1
 8021d34:	d005      	beq.n	8021d42 <__lo0bits+0x5a>
 8021d36:	600b      	str	r3, [r1, #0]
 8021d38:	4770      	bx	lr
 8021d3a:	4610      	mov	r0, r2
 8021d3c:	e7e9      	b.n	8021d12 <__lo0bits+0x2a>
 8021d3e:	2000      	movs	r0, #0
 8021d40:	4770      	bx	lr
 8021d42:	2020      	movs	r0, #32
 8021d44:	4770      	bx	lr
	...

08021d48 <__i2b>:
 8021d48:	b510      	push	{r4, lr}
 8021d4a:	460c      	mov	r4, r1
 8021d4c:	2101      	movs	r1, #1
 8021d4e:	f7ff feb7 	bl	8021ac0 <_Balloc>
 8021d52:	4602      	mov	r2, r0
 8021d54:	b928      	cbnz	r0, 8021d62 <__i2b+0x1a>
 8021d56:	4b05      	ldr	r3, [pc, #20]	; (8021d6c <__i2b+0x24>)
 8021d58:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021d5c:	4804      	ldr	r0, [pc, #16]	; (8021d70 <__i2b+0x28>)
 8021d5e:	f000 fc51 	bl	8022604 <__assert_func>
 8021d62:	2301      	movs	r3, #1
 8021d64:	6144      	str	r4, [r0, #20]
 8021d66:	6103      	str	r3, [r0, #16]
 8021d68:	bd10      	pop	{r4, pc}
 8021d6a:	bf00      	nop
 8021d6c:	08024366 	.word	0x08024366
 8021d70:	08024407 	.word	0x08024407

08021d74 <__multiply>:
 8021d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d78:	4691      	mov	r9, r2
 8021d7a:	690a      	ldr	r2, [r1, #16]
 8021d7c:	460c      	mov	r4, r1
 8021d7e:	b085      	sub	sp, #20
 8021d80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021d84:	429a      	cmp	r2, r3
 8021d86:	bfbe      	ittt	lt
 8021d88:	460b      	movlt	r3, r1
 8021d8a:	464c      	movlt	r4, r9
 8021d8c:	4699      	movlt	r9, r3
 8021d8e:	6927      	ldr	r7, [r4, #16]
 8021d90:	68a3      	ldr	r3, [r4, #8]
 8021d92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021d96:	6861      	ldr	r1, [r4, #4]
 8021d98:	eb07 060a 	add.w	r6, r7, sl
 8021d9c:	42b3      	cmp	r3, r6
 8021d9e:	bfb8      	it	lt
 8021da0:	3101      	addlt	r1, #1
 8021da2:	f7ff fe8d 	bl	8021ac0 <_Balloc>
 8021da6:	b930      	cbnz	r0, 8021db6 <__multiply+0x42>
 8021da8:	4602      	mov	r2, r0
 8021daa:	4b44      	ldr	r3, [pc, #272]	; (8021ebc <__multiply+0x148>)
 8021dac:	f240 115d 	movw	r1, #349	; 0x15d
 8021db0:	4843      	ldr	r0, [pc, #268]	; (8021ec0 <__multiply+0x14c>)
 8021db2:	f000 fc27 	bl	8022604 <__assert_func>
 8021db6:	f100 0514 	add.w	r5, r0, #20
 8021dba:	2200      	movs	r2, #0
 8021dbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021dc0:	462b      	mov	r3, r5
 8021dc2:	4543      	cmp	r3, r8
 8021dc4:	d321      	bcc.n	8021e0a <__multiply+0x96>
 8021dc6:	f104 0314 	add.w	r3, r4, #20
 8021dca:	f104 0115 	add.w	r1, r4, #21
 8021dce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021dd2:	f109 0314 	add.w	r3, r9, #20
 8021dd6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021dda:	9202      	str	r2, [sp, #8]
 8021ddc:	1b3a      	subs	r2, r7, r4
 8021dde:	3a15      	subs	r2, #21
 8021de0:	f022 0203 	bic.w	r2, r2, #3
 8021de4:	3204      	adds	r2, #4
 8021de6:	428f      	cmp	r7, r1
 8021de8:	bf38      	it	cc
 8021dea:	2204      	movcc	r2, #4
 8021dec:	9201      	str	r2, [sp, #4]
 8021dee:	9a02      	ldr	r2, [sp, #8]
 8021df0:	9303      	str	r3, [sp, #12]
 8021df2:	429a      	cmp	r2, r3
 8021df4:	d80c      	bhi.n	8021e10 <__multiply+0x9c>
 8021df6:	2e00      	cmp	r6, #0
 8021df8:	dd03      	ble.n	8021e02 <__multiply+0x8e>
 8021dfa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d05a      	beq.n	8021eb8 <__multiply+0x144>
 8021e02:	6106      	str	r6, [r0, #16]
 8021e04:	b005      	add	sp, #20
 8021e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e0a:	f843 2b04 	str.w	r2, [r3], #4
 8021e0e:	e7d8      	b.n	8021dc2 <__multiply+0x4e>
 8021e10:	f8b3 a000 	ldrh.w	sl, [r3]
 8021e14:	f1ba 0f00 	cmp.w	sl, #0
 8021e18:	d024      	beq.n	8021e64 <__multiply+0xf0>
 8021e1a:	f104 0e14 	add.w	lr, r4, #20
 8021e1e:	46a9      	mov	r9, r5
 8021e20:	f04f 0c00 	mov.w	ip, #0
 8021e24:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021e28:	f8d9 1000 	ldr.w	r1, [r9]
 8021e2c:	fa1f fb82 	uxth.w	fp, r2
 8021e30:	4577      	cmp	r7, lr
 8021e32:	b289      	uxth	r1, r1
 8021e34:	fb0a 110b 	mla	r1, sl, fp, r1
 8021e38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8021e40:	4461      	add	r1, ip
 8021e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021e46:	fb0a c20b 	mla	r2, sl, fp, ip
 8021e4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021e4e:	b289      	uxth	r1, r1
 8021e50:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021e54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021e58:	f849 1b04 	str.w	r1, [r9], #4
 8021e5c:	d8e2      	bhi.n	8021e24 <__multiply+0xb0>
 8021e5e:	9a01      	ldr	r2, [sp, #4]
 8021e60:	f845 c002 	str.w	ip, [r5, r2]
 8021e64:	9a03      	ldr	r2, [sp, #12]
 8021e66:	3304      	adds	r3, #4
 8021e68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021e6c:	f1b9 0f00 	cmp.w	r9, #0
 8021e70:	d020      	beq.n	8021eb4 <__multiply+0x140>
 8021e72:	6829      	ldr	r1, [r5, #0]
 8021e74:	f104 0c14 	add.w	ip, r4, #20
 8021e78:	46ae      	mov	lr, r5
 8021e7a:	f04f 0a00 	mov.w	sl, #0
 8021e7e:	f8bc b000 	ldrh.w	fp, [ip]
 8021e82:	b289      	uxth	r1, r1
 8021e84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021e88:	fb09 220b 	mla	r2, r9, fp, r2
 8021e8c:	4492      	add	sl, r2
 8021e8e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021e92:	f84e 1b04 	str.w	r1, [lr], #4
 8021e96:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021e9a:	f8be 1000 	ldrh.w	r1, [lr]
 8021e9e:	0c12      	lsrs	r2, r2, #16
 8021ea0:	4567      	cmp	r7, ip
 8021ea2:	fb09 1102 	mla	r1, r9, r2, r1
 8021ea6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021eaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021eae:	d8e6      	bhi.n	8021e7e <__multiply+0x10a>
 8021eb0:	9a01      	ldr	r2, [sp, #4]
 8021eb2:	50a9      	str	r1, [r5, r2]
 8021eb4:	3504      	adds	r5, #4
 8021eb6:	e79a      	b.n	8021dee <__multiply+0x7a>
 8021eb8:	3e01      	subs	r6, #1
 8021eba:	e79c      	b.n	8021df6 <__multiply+0x82>
 8021ebc:	08024366 	.word	0x08024366
 8021ec0:	08024407 	.word	0x08024407

08021ec4 <__pow5mult>:
 8021ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ec8:	4615      	mov	r5, r2
 8021eca:	f012 0203 	ands.w	r2, r2, #3
 8021ece:	4606      	mov	r6, r0
 8021ed0:	460f      	mov	r7, r1
 8021ed2:	d007      	beq.n	8021ee4 <__pow5mult+0x20>
 8021ed4:	3a01      	subs	r2, #1
 8021ed6:	4c25      	ldr	r4, [pc, #148]	; (8021f6c <__pow5mult+0xa8>)
 8021ed8:	2300      	movs	r3, #0
 8021eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021ede:	f7ff fe51 	bl	8021b84 <__multadd>
 8021ee2:	4607      	mov	r7, r0
 8021ee4:	10ad      	asrs	r5, r5, #2
 8021ee6:	d03d      	beq.n	8021f64 <__pow5mult+0xa0>
 8021ee8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021eea:	b97c      	cbnz	r4, 8021f0c <__pow5mult+0x48>
 8021eec:	2010      	movs	r0, #16
 8021eee:	f000 fbb9 	bl	8022664 <malloc>
 8021ef2:	4602      	mov	r2, r0
 8021ef4:	6270      	str	r0, [r6, #36]	; 0x24
 8021ef6:	b928      	cbnz	r0, 8021f04 <__pow5mult+0x40>
 8021ef8:	4b1d      	ldr	r3, [pc, #116]	; (8021f70 <__pow5mult+0xac>)
 8021efa:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021efe:	481d      	ldr	r0, [pc, #116]	; (8021f74 <__pow5mult+0xb0>)
 8021f00:	f000 fb80 	bl	8022604 <__assert_func>
 8021f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021f08:	6004      	str	r4, [r0, #0]
 8021f0a:	60c4      	str	r4, [r0, #12]
 8021f0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021f14:	b94c      	cbnz	r4, 8021f2a <__pow5mult+0x66>
 8021f16:	f240 2171 	movw	r1, #625	; 0x271
 8021f1a:	4630      	mov	r0, r6
 8021f1c:	f7ff ff14 	bl	8021d48 <__i2b>
 8021f20:	2300      	movs	r3, #0
 8021f22:	4604      	mov	r4, r0
 8021f24:	f8c8 0008 	str.w	r0, [r8, #8]
 8021f28:	6003      	str	r3, [r0, #0]
 8021f2a:	f04f 0900 	mov.w	r9, #0
 8021f2e:	07eb      	lsls	r3, r5, #31
 8021f30:	d50a      	bpl.n	8021f48 <__pow5mult+0x84>
 8021f32:	4639      	mov	r1, r7
 8021f34:	4622      	mov	r2, r4
 8021f36:	4630      	mov	r0, r6
 8021f38:	f7ff ff1c 	bl	8021d74 <__multiply>
 8021f3c:	4680      	mov	r8, r0
 8021f3e:	4639      	mov	r1, r7
 8021f40:	4630      	mov	r0, r6
 8021f42:	4647      	mov	r7, r8
 8021f44:	f7ff fdfc 	bl	8021b40 <_Bfree>
 8021f48:	106d      	asrs	r5, r5, #1
 8021f4a:	d00b      	beq.n	8021f64 <__pow5mult+0xa0>
 8021f4c:	6820      	ldr	r0, [r4, #0]
 8021f4e:	b938      	cbnz	r0, 8021f60 <__pow5mult+0x9c>
 8021f50:	4622      	mov	r2, r4
 8021f52:	4621      	mov	r1, r4
 8021f54:	4630      	mov	r0, r6
 8021f56:	f7ff ff0d 	bl	8021d74 <__multiply>
 8021f5a:	6020      	str	r0, [r4, #0]
 8021f5c:	f8c0 9000 	str.w	r9, [r0]
 8021f60:	4604      	mov	r4, r0
 8021f62:	e7e4      	b.n	8021f2e <__pow5mult+0x6a>
 8021f64:	4638      	mov	r0, r7
 8021f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f6a:	bf00      	nop
 8021f6c:	08024558 	.word	0x08024558
 8021f70:	080243f0 	.word	0x080243f0
 8021f74:	08024407 	.word	0x08024407

08021f78 <__lshift>:
 8021f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f7c:	460c      	mov	r4, r1
 8021f7e:	4607      	mov	r7, r0
 8021f80:	4691      	mov	r9, r2
 8021f82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021f86:	6923      	ldr	r3, [r4, #16]
 8021f88:	6849      	ldr	r1, [r1, #4]
 8021f8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021f8e:	68a3      	ldr	r3, [r4, #8]
 8021f90:	f108 0601 	add.w	r6, r8, #1
 8021f94:	42b3      	cmp	r3, r6
 8021f96:	db0b      	blt.n	8021fb0 <__lshift+0x38>
 8021f98:	4638      	mov	r0, r7
 8021f9a:	f7ff fd91 	bl	8021ac0 <_Balloc>
 8021f9e:	4605      	mov	r5, r0
 8021fa0:	b948      	cbnz	r0, 8021fb6 <__lshift+0x3e>
 8021fa2:	4602      	mov	r2, r0
 8021fa4:	4b2a      	ldr	r3, [pc, #168]	; (8022050 <__lshift+0xd8>)
 8021fa6:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021faa:	482a      	ldr	r0, [pc, #168]	; (8022054 <__lshift+0xdc>)
 8021fac:	f000 fb2a 	bl	8022604 <__assert_func>
 8021fb0:	3101      	adds	r1, #1
 8021fb2:	005b      	lsls	r3, r3, #1
 8021fb4:	e7ee      	b.n	8021f94 <__lshift+0x1c>
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	f100 0114 	add.w	r1, r0, #20
 8021fbc:	f100 0210 	add.w	r2, r0, #16
 8021fc0:	4618      	mov	r0, r3
 8021fc2:	4553      	cmp	r3, sl
 8021fc4:	db37      	blt.n	8022036 <__lshift+0xbe>
 8021fc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021fca:	f104 0314 	add.w	r3, r4, #20
 8021fce:	6920      	ldr	r0, [r4, #16]
 8021fd0:	f019 091f 	ands.w	r9, r9, #31
 8021fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021fd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021fdc:	d02f      	beq.n	802203e <__lshift+0xc6>
 8021fde:	f1c9 0e20 	rsb	lr, r9, #32
 8021fe2:	468a      	mov	sl, r1
 8021fe4:	f04f 0c00 	mov.w	ip, #0
 8021fe8:	681a      	ldr	r2, [r3, #0]
 8021fea:	fa02 f209 	lsl.w	r2, r2, r9
 8021fee:	ea42 020c 	orr.w	r2, r2, ip
 8021ff2:	f84a 2b04 	str.w	r2, [sl], #4
 8021ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8021ffa:	4298      	cmp	r0, r3
 8021ffc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022000:	d8f2      	bhi.n	8021fe8 <__lshift+0x70>
 8022002:	1b03      	subs	r3, r0, r4
 8022004:	f104 0215 	add.w	r2, r4, #21
 8022008:	3b15      	subs	r3, #21
 802200a:	f023 0303 	bic.w	r3, r3, #3
 802200e:	3304      	adds	r3, #4
 8022010:	4290      	cmp	r0, r2
 8022012:	bf38      	it	cc
 8022014:	2304      	movcc	r3, #4
 8022016:	f841 c003 	str.w	ip, [r1, r3]
 802201a:	f1bc 0f00 	cmp.w	ip, #0
 802201e:	d001      	beq.n	8022024 <__lshift+0xac>
 8022020:	f108 0602 	add.w	r6, r8, #2
 8022024:	3e01      	subs	r6, #1
 8022026:	4638      	mov	r0, r7
 8022028:	4621      	mov	r1, r4
 802202a:	612e      	str	r6, [r5, #16]
 802202c:	f7ff fd88 	bl	8021b40 <_Bfree>
 8022030:	4628      	mov	r0, r5
 8022032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022036:	3301      	adds	r3, #1
 8022038:	f842 0f04 	str.w	r0, [r2, #4]!
 802203c:	e7c1      	b.n	8021fc2 <__lshift+0x4a>
 802203e:	3904      	subs	r1, #4
 8022040:	f853 2b04 	ldr.w	r2, [r3], #4
 8022044:	4298      	cmp	r0, r3
 8022046:	f841 2f04 	str.w	r2, [r1, #4]!
 802204a:	d8f9      	bhi.n	8022040 <__lshift+0xc8>
 802204c:	e7ea      	b.n	8022024 <__lshift+0xac>
 802204e:	bf00      	nop
 8022050:	08024366 	.word	0x08024366
 8022054:	08024407 	.word	0x08024407

08022058 <__mcmp>:
 8022058:	6902      	ldr	r2, [r0, #16]
 802205a:	b530      	push	{r4, r5, lr}
 802205c:	690c      	ldr	r4, [r1, #16]
 802205e:	1b12      	subs	r2, r2, r4
 8022060:	d10e      	bne.n	8022080 <__mcmp+0x28>
 8022062:	f100 0314 	add.w	r3, r0, #20
 8022066:	3114      	adds	r1, #20
 8022068:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802206c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022070:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022074:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022078:	42a5      	cmp	r5, r4
 802207a:	d003      	beq.n	8022084 <__mcmp+0x2c>
 802207c:	d305      	bcc.n	802208a <__mcmp+0x32>
 802207e:	2201      	movs	r2, #1
 8022080:	4610      	mov	r0, r2
 8022082:	bd30      	pop	{r4, r5, pc}
 8022084:	4283      	cmp	r3, r0
 8022086:	d3f3      	bcc.n	8022070 <__mcmp+0x18>
 8022088:	e7fa      	b.n	8022080 <__mcmp+0x28>
 802208a:	f04f 32ff 	mov.w	r2, #4294967295
 802208e:	e7f7      	b.n	8022080 <__mcmp+0x28>

08022090 <__mdiff>:
 8022090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022094:	460c      	mov	r4, r1
 8022096:	4606      	mov	r6, r0
 8022098:	4611      	mov	r1, r2
 802209a:	4692      	mov	sl, r2
 802209c:	4620      	mov	r0, r4
 802209e:	f7ff ffdb 	bl	8022058 <__mcmp>
 80220a2:	1e05      	subs	r5, r0, #0
 80220a4:	d110      	bne.n	80220c8 <__mdiff+0x38>
 80220a6:	4629      	mov	r1, r5
 80220a8:	4630      	mov	r0, r6
 80220aa:	f7ff fd09 	bl	8021ac0 <_Balloc>
 80220ae:	b930      	cbnz	r0, 80220be <__mdiff+0x2e>
 80220b0:	4b3d      	ldr	r3, [pc, #244]	; (80221a8 <__mdiff+0x118>)
 80220b2:	4602      	mov	r2, r0
 80220b4:	f240 2132 	movw	r1, #562	; 0x232
 80220b8:	483c      	ldr	r0, [pc, #240]	; (80221ac <__mdiff+0x11c>)
 80220ba:	f000 faa3 	bl	8022604 <__assert_func>
 80220be:	2301      	movs	r3, #1
 80220c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80220c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220c8:	bfa4      	itt	ge
 80220ca:	4653      	movge	r3, sl
 80220cc:	46a2      	movge	sl, r4
 80220ce:	4630      	mov	r0, r6
 80220d0:	bfa8      	it	ge
 80220d2:	2500      	movge	r5, #0
 80220d4:	f8da 1004 	ldr.w	r1, [sl, #4]
 80220d8:	bfac      	ite	ge
 80220da:	461c      	movge	r4, r3
 80220dc:	2501      	movlt	r5, #1
 80220de:	f7ff fcef 	bl	8021ac0 <_Balloc>
 80220e2:	b920      	cbnz	r0, 80220ee <__mdiff+0x5e>
 80220e4:	4b30      	ldr	r3, [pc, #192]	; (80221a8 <__mdiff+0x118>)
 80220e6:	4602      	mov	r2, r0
 80220e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80220ec:	e7e4      	b.n	80220b8 <__mdiff+0x28>
 80220ee:	f8da 7010 	ldr.w	r7, [sl, #16]
 80220f2:	f104 0914 	add.w	r9, r4, #20
 80220f6:	6926      	ldr	r6, [r4, #16]
 80220f8:	f100 0814 	add.w	r8, r0, #20
 80220fc:	60c5      	str	r5, [r0, #12]
 80220fe:	f10a 0514 	add.w	r5, sl, #20
 8022102:	f10a 0210 	add.w	r2, sl, #16
 8022106:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802210a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 802210e:	46c2      	mov	sl, r8
 8022110:	f04f 0c00 	mov.w	ip, #0
 8022114:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022118:	f859 3b04 	ldr.w	r3, [r9], #4
 802211c:	fa1f f18b 	uxth.w	r1, fp
 8022120:	454e      	cmp	r6, r9
 8022122:	448c      	add	ip, r1
 8022124:	b299      	uxth	r1, r3
 8022126:	ea4f 4313 	mov.w	r3, r3, lsr #16
 802212a:	ebac 0101 	sub.w	r1, ip, r1
 802212e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022132:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8022136:	b289      	uxth	r1, r1
 8022138:	ea4f 4c23 	mov.w	ip, r3, asr #16
 802213c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8022140:	f84a 3b04 	str.w	r3, [sl], #4
 8022144:	d8e6      	bhi.n	8022114 <__mdiff+0x84>
 8022146:	1b33      	subs	r3, r6, r4
 8022148:	3415      	adds	r4, #21
 802214a:	3b15      	subs	r3, #21
 802214c:	f023 0303 	bic.w	r3, r3, #3
 8022150:	3304      	adds	r3, #4
 8022152:	42a6      	cmp	r6, r4
 8022154:	bf38      	it	cc
 8022156:	2304      	movcc	r3, #4
 8022158:	441d      	add	r5, r3
 802215a:	4443      	add	r3, r8
 802215c:	462c      	mov	r4, r5
 802215e:	461e      	mov	r6, r3
 8022160:	4574      	cmp	r4, lr
 8022162:	d30e      	bcc.n	8022182 <__mdiff+0xf2>
 8022164:	f10e 0203 	add.w	r2, lr, #3
 8022168:	1b52      	subs	r2, r2, r5
 802216a:	3d03      	subs	r5, #3
 802216c:	f022 0203 	bic.w	r2, r2, #3
 8022170:	45ae      	cmp	lr, r5
 8022172:	bf38      	it	cc
 8022174:	2200      	movcc	r2, #0
 8022176:	441a      	add	r2, r3
 8022178:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802217c:	b18b      	cbz	r3, 80221a2 <__mdiff+0x112>
 802217e:	6107      	str	r7, [r0, #16]
 8022180:	e7a0      	b.n	80220c4 <__mdiff+0x34>
 8022182:	f854 8b04 	ldr.w	r8, [r4], #4
 8022186:	fa1f f288 	uxth.w	r2, r8
 802218a:	4462      	add	r2, ip
 802218c:	1411      	asrs	r1, r2, #16
 802218e:	b292      	uxth	r2, r2
 8022190:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8022194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022198:	ea4f 4c21 	mov.w	ip, r1, asr #16
 802219c:	f846 2b04 	str.w	r2, [r6], #4
 80221a0:	e7de      	b.n	8022160 <__mdiff+0xd0>
 80221a2:	3f01      	subs	r7, #1
 80221a4:	e7e8      	b.n	8022178 <__mdiff+0xe8>
 80221a6:	bf00      	nop
 80221a8:	08024366 	.word	0x08024366
 80221ac:	08024407 	.word	0x08024407

080221b0 <__ulp>:
 80221b0:	b082      	sub	sp, #8
 80221b2:	4913      	ldr	r1, [pc, #76]	; (8022200 <__ulp+0x50>)
 80221b4:	ed8d 0b00 	vstr	d0, [sp]
 80221b8:	9b01      	ldr	r3, [sp, #4]
 80221ba:	4019      	ands	r1, r3
 80221bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80221c0:	2900      	cmp	r1, #0
 80221c2:	dd05      	ble.n	80221d0 <__ulp+0x20>
 80221c4:	2200      	movs	r2, #0
 80221c6:	460b      	mov	r3, r1
 80221c8:	ec43 2b10 	vmov	d0, r2, r3
 80221cc:	b002      	add	sp, #8
 80221ce:	4770      	bx	lr
 80221d0:	4249      	negs	r1, r1
 80221d2:	2200      	movs	r2, #0
 80221d4:	2300      	movs	r3, #0
 80221d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80221da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80221de:	da04      	bge.n	80221ea <__ulp+0x3a>
 80221e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80221e4:	fa41 f300 	asr.w	r3, r1, r0
 80221e8:	e7ee      	b.n	80221c8 <__ulp+0x18>
 80221ea:	f1a0 0114 	sub.w	r1, r0, #20
 80221ee:	291e      	cmp	r1, #30
 80221f0:	bfd6      	itet	le
 80221f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80221f6:	2101      	movgt	r1, #1
 80221f8:	fa20 f101 	lsrle.w	r1, r0, r1
 80221fc:	460a      	mov	r2, r1
 80221fe:	e7e3      	b.n	80221c8 <__ulp+0x18>
 8022200:	7ff00000 	.word	0x7ff00000

08022204 <__b2d>:
 8022204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022206:	6905      	ldr	r5, [r0, #16]
 8022208:	f100 0714 	add.w	r7, r0, #20
 802220c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022210:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8022214:	1f2e      	subs	r6, r5, #4
 8022216:	4620      	mov	r0, r4
 8022218:	f7ff fd46 	bl	8021ca8 <__hi0bits>
 802221c:	f1c0 0320 	rsb	r3, r0, #32
 8022220:	280a      	cmp	r0, #10
 8022222:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80222a0 <__b2d+0x9c>
 8022226:	600b      	str	r3, [r1, #0]
 8022228:	dc15      	bgt.n	8022256 <__b2d+0x52>
 802222a:	f1c0 0e0b 	rsb	lr, r0, #11
 802222e:	42b7      	cmp	r7, r6
 8022230:	f100 0015 	add.w	r0, r0, #21
 8022234:	fa24 f10e 	lsr.w	r1, r4, lr
 8022238:	fa04 f000 	lsl.w	r0, r4, r0
 802223c:	ea41 030c 	orr.w	r3, r1, ip
 8022240:	bf34      	ite	cc
 8022242:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022246:	2100      	movcs	r1, #0
 8022248:	fa21 f10e 	lsr.w	r1, r1, lr
 802224c:	ea40 0201 	orr.w	r2, r0, r1
 8022250:	ec43 2b10 	vmov	d0, r2, r3
 8022254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022256:	42b7      	cmp	r7, r6
 8022258:	bf3a      	itte	cc
 802225a:	f1a5 0608 	subcc.w	r6, r5, #8
 802225e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022262:	2100      	movcs	r1, #0
 8022264:	380b      	subs	r0, #11
 8022266:	d017      	beq.n	8022298 <__b2d+0x94>
 8022268:	f1c0 0c20 	rsb	ip, r0, #32
 802226c:	fa04 f500 	lsl.w	r5, r4, r0
 8022270:	42be      	cmp	r6, r7
 8022272:	fa01 f000 	lsl.w	r0, r1, r0
 8022276:	fa21 f40c 	lsr.w	r4, r1, ip
 802227a:	ea45 0504 	orr.w	r5, r5, r4
 802227e:	bf8c      	ite	hi
 8022280:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022284:	2400      	movls	r4, #0
 8022286:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802228a:	fa24 f40c 	lsr.w	r4, r4, ip
 802228e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022292:	ea40 0204 	orr.w	r2, r0, r4
 8022296:	e7db      	b.n	8022250 <__b2d+0x4c>
 8022298:	ea44 030c 	orr.w	r3, r4, ip
 802229c:	460a      	mov	r2, r1
 802229e:	e7d7      	b.n	8022250 <__b2d+0x4c>
 80222a0:	3ff00000 	.word	0x3ff00000

080222a4 <__d2b>:
 80222a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80222a8:	4689      	mov	r9, r1
 80222aa:	2101      	movs	r1, #1
 80222ac:	4690      	mov	r8, r2
 80222ae:	ec57 6b10 	vmov	r6, r7, d0
 80222b2:	f7ff fc05 	bl	8021ac0 <_Balloc>
 80222b6:	4604      	mov	r4, r0
 80222b8:	b930      	cbnz	r0, 80222c8 <__d2b+0x24>
 80222ba:	4602      	mov	r2, r0
 80222bc:	4b25      	ldr	r3, [pc, #148]	; (8022354 <__d2b+0xb0>)
 80222be:	f240 310a 	movw	r1, #778	; 0x30a
 80222c2:	4825      	ldr	r0, [pc, #148]	; (8022358 <__d2b+0xb4>)
 80222c4:	f000 f99e 	bl	8022604 <__assert_func>
 80222c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80222cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80222d0:	bb35      	cbnz	r5, 8022320 <__d2b+0x7c>
 80222d2:	2e00      	cmp	r6, #0
 80222d4:	9301      	str	r3, [sp, #4]
 80222d6:	d028      	beq.n	802232a <__d2b+0x86>
 80222d8:	4668      	mov	r0, sp
 80222da:	9600      	str	r6, [sp, #0]
 80222dc:	f7ff fd04 	bl	8021ce8 <__lo0bits>
 80222e0:	9900      	ldr	r1, [sp, #0]
 80222e2:	b300      	cbz	r0, 8022326 <__d2b+0x82>
 80222e4:	9a01      	ldr	r2, [sp, #4]
 80222e6:	f1c0 0320 	rsb	r3, r0, #32
 80222ea:	fa02 f303 	lsl.w	r3, r2, r3
 80222ee:	40c2      	lsrs	r2, r0
 80222f0:	430b      	orrs	r3, r1
 80222f2:	9201      	str	r2, [sp, #4]
 80222f4:	6163      	str	r3, [r4, #20]
 80222f6:	9b01      	ldr	r3, [sp, #4]
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	61a3      	str	r3, [r4, #24]
 80222fc:	bf14      	ite	ne
 80222fe:	2202      	movne	r2, #2
 8022300:	2201      	moveq	r2, #1
 8022302:	6122      	str	r2, [r4, #16]
 8022304:	b1d5      	cbz	r5, 802233c <__d2b+0x98>
 8022306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802230a:	4405      	add	r5, r0
 802230c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022310:	f8c9 5000 	str.w	r5, [r9]
 8022314:	f8c8 0000 	str.w	r0, [r8]
 8022318:	4620      	mov	r0, r4
 802231a:	b003      	add	sp, #12
 802231c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022324:	e7d5      	b.n	80222d2 <__d2b+0x2e>
 8022326:	6161      	str	r1, [r4, #20]
 8022328:	e7e5      	b.n	80222f6 <__d2b+0x52>
 802232a:	a801      	add	r0, sp, #4
 802232c:	f7ff fcdc 	bl	8021ce8 <__lo0bits>
 8022330:	9b01      	ldr	r3, [sp, #4]
 8022332:	2201      	movs	r2, #1
 8022334:	3020      	adds	r0, #32
 8022336:	6163      	str	r3, [r4, #20]
 8022338:	6122      	str	r2, [r4, #16]
 802233a:	e7e3      	b.n	8022304 <__d2b+0x60>
 802233c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022340:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022344:	f8c9 0000 	str.w	r0, [r9]
 8022348:	6918      	ldr	r0, [r3, #16]
 802234a:	f7ff fcad 	bl	8021ca8 <__hi0bits>
 802234e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022352:	e7df      	b.n	8022314 <__d2b+0x70>
 8022354:	08024366 	.word	0x08024366
 8022358:	08024407 	.word	0x08024407

0802235c <__ratio>:
 802235c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022360:	4688      	mov	r8, r1
 8022362:	4681      	mov	r9, r0
 8022364:	4669      	mov	r1, sp
 8022366:	f7ff ff4d 	bl	8022204 <__b2d>
 802236a:	a901      	add	r1, sp, #4
 802236c:	4640      	mov	r0, r8
 802236e:	ec55 4b10 	vmov	r4, r5, d0
 8022372:	f7ff ff47 	bl	8022204 <__b2d>
 8022376:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802237a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802237e:	462f      	mov	r7, r5
 8022380:	eba3 0c02 	sub.w	ip, r3, r2
 8022384:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022388:	ec51 0b10 	vmov	r0, r1, d0
 802238c:	1a9b      	subs	r3, r3, r2
 802238e:	468b      	mov	fp, r1
 8022390:	4620      	mov	r0, r4
 8022392:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022396:	2b00      	cmp	r3, #0
 8022398:	bfd5      	itete	le
 802239a:	460a      	movle	r2, r1
 802239c:	462a      	movgt	r2, r5
 802239e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80223a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80223a6:	bfd8      	it	le
 80223a8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80223ac:	ee10 2a10 	vmov	r2, s0
 80223b0:	4639      	mov	r1, r7
 80223b2:	465b      	mov	r3, fp
 80223b4:	f7de fb70 	bl	8000a98 <__aeabi_ddiv>
 80223b8:	ec41 0b10 	vmov	d0, r0, r1
 80223bc:	b003      	add	sp, #12
 80223be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080223c2 <__copybits>:
 80223c2:	3901      	subs	r1, #1
 80223c4:	f102 0314 	add.w	r3, r2, #20
 80223c8:	1149      	asrs	r1, r1, #5
 80223ca:	b570      	push	{r4, r5, r6, lr}
 80223cc:	3101      	adds	r1, #1
 80223ce:	6914      	ldr	r4, [r2, #16]
 80223d0:	1f05      	subs	r5, r0, #4
 80223d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80223d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80223da:	42a3      	cmp	r3, r4
 80223dc:	d30c      	bcc.n	80223f8 <__copybits+0x36>
 80223de:	1aa3      	subs	r3, r4, r2
 80223e0:	3211      	adds	r2, #17
 80223e2:	3b11      	subs	r3, #17
 80223e4:	f023 0303 	bic.w	r3, r3, #3
 80223e8:	42a2      	cmp	r2, r4
 80223ea:	bf88      	it	hi
 80223ec:	2300      	movhi	r3, #0
 80223ee:	4418      	add	r0, r3
 80223f0:	2300      	movs	r3, #0
 80223f2:	4288      	cmp	r0, r1
 80223f4:	d305      	bcc.n	8022402 <__copybits+0x40>
 80223f6:	bd70      	pop	{r4, r5, r6, pc}
 80223f8:	f853 6b04 	ldr.w	r6, [r3], #4
 80223fc:	f845 6f04 	str.w	r6, [r5, #4]!
 8022400:	e7eb      	b.n	80223da <__copybits+0x18>
 8022402:	f840 3b04 	str.w	r3, [r0], #4
 8022406:	e7f4      	b.n	80223f2 <__copybits+0x30>

08022408 <__any_on>:
 8022408:	f100 0214 	add.w	r2, r0, #20
 802240c:	114b      	asrs	r3, r1, #5
 802240e:	6900      	ldr	r0, [r0, #16]
 8022410:	4298      	cmp	r0, r3
 8022412:	b510      	push	{r4, lr}
 8022414:	db11      	blt.n	802243a <__any_on+0x32>
 8022416:	dd0a      	ble.n	802242e <__any_on+0x26>
 8022418:	f011 011f 	ands.w	r1, r1, #31
 802241c:	d007      	beq.n	802242e <__any_on+0x26>
 802241e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022422:	fa24 f001 	lsr.w	r0, r4, r1
 8022426:	fa00 f101 	lsl.w	r1, r0, r1
 802242a:	428c      	cmp	r4, r1
 802242c:	d10b      	bne.n	8022446 <__any_on+0x3e>
 802242e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022432:	4293      	cmp	r3, r2
 8022434:	d803      	bhi.n	802243e <__any_on+0x36>
 8022436:	2000      	movs	r0, #0
 8022438:	bd10      	pop	{r4, pc}
 802243a:	4603      	mov	r3, r0
 802243c:	e7f7      	b.n	802242e <__any_on+0x26>
 802243e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022442:	2900      	cmp	r1, #0
 8022444:	d0f5      	beq.n	8022432 <__any_on+0x2a>
 8022446:	2001      	movs	r0, #1
 8022448:	e7f6      	b.n	8022438 <__any_on+0x30>

0802244a <_calloc_r>:
 802244a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802244c:	fba1 2402 	umull	r2, r4, r1, r2
 8022450:	b94c      	cbnz	r4, 8022466 <_calloc_r+0x1c>
 8022452:	4611      	mov	r1, r2
 8022454:	9201      	str	r2, [sp, #4]
 8022456:	f000 f82f 	bl	80224b8 <_malloc_r>
 802245a:	9a01      	ldr	r2, [sp, #4]
 802245c:	4605      	mov	r5, r0
 802245e:	b930      	cbnz	r0, 802246e <_calloc_r+0x24>
 8022460:	4628      	mov	r0, r5
 8022462:	b003      	add	sp, #12
 8022464:	bd30      	pop	{r4, r5, pc}
 8022466:	220c      	movs	r2, #12
 8022468:	2500      	movs	r5, #0
 802246a:	6002      	str	r2, [r0, #0]
 802246c:	e7f8      	b.n	8022460 <_calloc_r+0x16>
 802246e:	4621      	mov	r1, r4
 8022470:	f7fe f87f 	bl	8020572 <memset>
 8022474:	e7f4      	b.n	8022460 <_calloc_r+0x16>
	...

08022478 <sbrk_aligned>:
 8022478:	b570      	push	{r4, r5, r6, lr}
 802247a:	4e0e      	ldr	r6, [pc, #56]	; (80224b4 <sbrk_aligned+0x3c>)
 802247c:	460c      	mov	r4, r1
 802247e:	4605      	mov	r5, r0
 8022480:	6831      	ldr	r1, [r6, #0]
 8022482:	b911      	cbnz	r1, 802248a <sbrk_aligned+0x12>
 8022484:	f000 f88c 	bl	80225a0 <_sbrk_r>
 8022488:	6030      	str	r0, [r6, #0]
 802248a:	4621      	mov	r1, r4
 802248c:	4628      	mov	r0, r5
 802248e:	f000 f887 	bl	80225a0 <_sbrk_r>
 8022492:	1c43      	adds	r3, r0, #1
 8022494:	d00a      	beq.n	80224ac <sbrk_aligned+0x34>
 8022496:	1cc4      	adds	r4, r0, #3
 8022498:	f024 0403 	bic.w	r4, r4, #3
 802249c:	42a0      	cmp	r0, r4
 802249e:	d007      	beq.n	80224b0 <sbrk_aligned+0x38>
 80224a0:	1a21      	subs	r1, r4, r0
 80224a2:	4628      	mov	r0, r5
 80224a4:	f000 f87c 	bl	80225a0 <_sbrk_r>
 80224a8:	3001      	adds	r0, #1
 80224aa:	d101      	bne.n	80224b0 <sbrk_aligned+0x38>
 80224ac:	f04f 34ff 	mov.w	r4, #4294967295
 80224b0:	4620      	mov	r0, r4
 80224b2:	bd70      	pop	{r4, r5, r6, pc}
 80224b4:	200b70cc 	.word	0x200b70cc

080224b8 <_malloc_r>:
 80224b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80224bc:	1ccd      	adds	r5, r1, #3
 80224be:	4607      	mov	r7, r0
 80224c0:	f025 0503 	bic.w	r5, r5, #3
 80224c4:	3508      	adds	r5, #8
 80224c6:	2d0c      	cmp	r5, #12
 80224c8:	bf38      	it	cc
 80224ca:	250c      	movcc	r5, #12
 80224cc:	2d00      	cmp	r5, #0
 80224ce:	db01      	blt.n	80224d4 <_malloc_r+0x1c>
 80224d0:	42a9      	cmp	r1, r5
 80224d2:	d905      	bls.n	80224e0 <_malloc_r+0x28>
 80224d4:	230c      	movs	r3, #12
 80224d6:	2600      	movs	r6, #0
 80224d8:	603b      	str	r3, [r7, #0]
 80224da:	4630      	mov	r0, r6
 80224dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224e0:	4e2e      	ldr	r6, [pc, #184]	; (802259c <_malloc_r+0xe4>)
 80224e2:	f000 f8c7 	bl	8022674 <__malloc_lock>
 80224e6:	6833      	ldr	r3, [r6, #0]
 80224e8:	461c      	mov	r4, r3
 80224ea:	bb34      	cbnz	r4, 802253a <_malloc_r+0x82>
 80224ec:	4629      	mov	r1, r5
 80224ee:	4638      	mov	r0, r7
 80224f0:	f7ff ffc2 	bl	8022478 <sbrk_aligned>
 80224f4:	1c43      	adds	r3, r0, #1
 80224f6:	4604      	mov	r4, r0
 80224f8:	d14d      	bne.n	8022596 <_malloc_r+0xde>
 80224fa:	6834      	ldr	r4, [r6, #0]
 80224fc:	4626      	mov	r6, r4
 80224fe:	2e00      	cmp	r6, #0
 8022500:	d140      	bne.n	8022584 <_malloc_r+0xcc>
 8022502:	6823      	ldr	r3, [r4, #0]
 8022504:	4631      	mov	r1, r6
 8022506:	4638      	mov	r0, r7
 8022508:	eb04 0803 	add.w	r8, r4, r3
 802250c:	f000 f848 	bl	80225a0 <_sbrk_r>
 8022510:	4580      	cmp	r8, r0
 8022512:	d13a      	bne.n	802258a <_malloc_r+0xd2>
 8022514:	6821      	ldr	r1, [r4, #0]
 8022516:	3503      	adds	r5, #3
 8022518:	4638      	mov	r0, r7
 802251a:	1a6d      	subs	r5, r5, r1
 802251c:	f025 0503 	bic.w	r5, r5, #3
 8022520:	3508      	adds	r5, #8
 8022522:	2d0c      	cmp	r5, #12
 8022524:	bf38      	it	cc
 8022526:	250c      	movcc	r5, #12
 8022528:	4629      	mov	r1, r5
 802252a:	f7ff ffa5 	bl	8022478 <sbrk_aligned>
 802252e:	3001      	adds	r0, #1
 8022530:	d02b      	beq.n	802258a <_malloc_r+0xd2>
 8022532:	6823      	ldr	r3, [r4, #0]
 8022534:	442b      	add	r3, r5
 8022536:	6023      	str	r3, [r4, #0]
 8022538:	e00e      	b.n	8022558 <_malloc_r+0xa0>
 802253a:	6822      	ldr	r2, [r4, #0]
 802253c:	1b52      	subs	r2, r2, r5
 802253e:	d41e      	bmi.n	802257e <_malloc_r+0xc6>
 8022540:	2a0b      	cmp	r2, #11
 8022542:	d916      	bls.n	8022572 <_malloc_r+0xba>
 8022544:	1961      	adds	r1, r4, r5
 8022546:	42a3      	cmp	r3, r4
 8022548:	6025      	str	r5, [r4, #0]
 802254a:	bf18      	it	ne
 802254c:	6059      	strne	r1, [r3, #4]
 802254e:	6863      	ldr	r3, [r4, #4]
 8022550:	bf08      	it	eq
 8022552:	6031      	streq	r1, [r6, #0]
 8022554:	5162      	str	r2, [r4, r5]
 8022556:	604b      	str	r3, [r1, #4]
 8022558:	f104 060b 	add.w	r6, r4, #11
 802255c:	4638      	mov	r0, r7
 802255e:	f000 f88f 	bl	8022680 <__malloc_unlock>
 8022562:	1d23      	adds	r3, r4, #4
 8022564:	f026 0607 	bic.w	r6, r6, #7
 8022568:	1af2      	subs	r2, r6, r3
 802256a:	d0b6      	beq.n	80224da <_malloc_r+0x22>
 802256c:	1b9b      	subs	r3, r3, r6
 802256e:	50a3      	str	r3, [r4, r2]
 8022570:	e7b3      	b.n	80224da <_malloc_r+0x22>
 8022572:	6862      	ldr	r2, [r4, #4]
 8022574:	42a3      	cmp	r3, r4
 8022576:	bf0c      	ite	eq
 8022578:	6032      	streq	r2, [r6, #0]
 802257a:	605a      	strne	r2, [r3, #4]
 802257c:	e7ec      	b.n	8022558 <_malloc_r+0xa0>
 802257e:	4623      	mov	r3, r4
 8022580:	6864      	ldr	r4, [r4, #4]
 8022582:	e7b2      	b.n	80224ea <_malloc_r+0x32>
 8022584:	4634      	mov	r4, r6
 8022586:	6876      	ldr	r6, [r6, #4]
 8022588:	e7b9      	b.n	80224fe <_malloc_r+0x46>
 802258a:	230c      	movs	r3, #12
 802258c:	4638      	mov	r0, r7
 802258e:	603b      	str	r3, [r7, #0]
 8022590:	f000 f876 	bl	8022680 <__malloc_unlock>
 8022594:	e7a1      	b.n	80224da <_malloc_r+0x22>
 8022596:	6025      	str	r5, [r4, #0]
 8022598:	e7de      	b.n	8022558 <_malloc_r+0xa0>
 802259a:	bf00      	nop
 802259c:	200b70c8 	.word	0x200b70c8

080225a0 <_sbrk_r>:
 80225a0:	b538      	push	{r3, r4, r5, lr}
 80225a2:	2300      	movs	r3, #0
 80225a4:	4d05      	ldr	r5, [pc, #20]	; (80225bc <_sbrk_r+0x1c>)
 80225a6:	4604      	mov	r4, r0
 80225a8:	4608      	mov	r0, r1
 80225aa:	602b      	str	r3, [r5, #0]
 80225ac:	f7ed ff02 	bl	80103b4 <_sbrk>
 80225b0:	1c43      	adds	r3, r0, #1
 80225b2:	d102      	bne.n	80225ba <_sbrk_r+0x1a>
 80225b4:	682b      	ldr	r3, [r5, #0]
 80225b6:	b103      	cbz	r3, 80225ba <_sbrk_r+0x1a>
 80225b8:	6023      	str	r3, [r4, #0]
 80225ba:	bd38      	pop	{r3, r4, r5, pc}
 80225bc:	200b70d0 	.word	0x200b70d0

080225c0 <strncmp>:
 80225c0:	b510      	push	{r4, lr}
 80225c2:	b17a      	cbz	r2, 80225e4 <strncmp+0x24>
 80225c4:	4603      	mov	r3, r0
 80225c6:	3901      	subs	r1, #1
 80225c8:	1884      	adds	r4, r0, r2
 80225ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80225ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80225d2:	4290      	cmp	r0, r2
 80225d4:	d101      	bne.n	80225da <strncmp+0x1a>
 80225d6:	42a3      	cmp	r3, r4
 80225d8:	d101      	bne.n	80225de <strncmp+0x1e>
 80225da:	1a80      	subs	r0, r0, r2
 80225dc:	bd10      	pop	{r4, pc}
 80225de:	2800      	cmp	r0, #0
 80225e0:	d1f3      	bne.n	80225ca <strncmp+0xa>
 80225e2:	e7fa      	b.n	80225da <strncmp+0x1a>
 80225e4:	4610      	mov	r0, r2
 80225e6:	e7f9      	b.n	80225dc <strncmp+0x1c>

080225e8 <__ascii_wctomb>:
 80225e8:	b149      	cbz	r1, 80225fe <__ascii_wctomb+0x16>
 80225ea:	2aff      	cmp	r2, #255	; 0xff
 80225ec:	bf8d      	iteet	hi
 80225ee:	238a      	movhi	r3, #138	; 0x8a
 80225f0:	2001      	movls	r0, #1
 80225f2:	700a      	strbls	r2, [r1, #0]
 80225f4:	6003      	strhi	r3, [r0, #0]
 80225f6:	bf88      	it	hi
 80225f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80225fc:	4770      	bx	lr
 80225fe:	4608      	mov	r0, r1
 8022600:	4770      	bx	lr
	...

08022604 <__assert_func>:
 8022604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022606:	4614      	mov	r4, r2
 8022608:	461a      	mov	r2, r3
 802260a:	4b09      	ldr	r3, [pc, #36]	; (8022630 <__assert_func+0x2c>)
 802260c:	4605      	mov	r5, r0
 802260e:	681b      	ldr	r3, [r3, #0]
 8022610:	68d8      	ldr	r0, [r3, #12]
 8022612:	b14c      	cbz	r4, 8022628 <__assert_func+0x24>
 8022614:	4b07      	ldr	r3, [pc, #28]	; (8022634 <__assert_func+0x30>)
 8022616:	9100      	str	r1, [sp, #0]
 8022618:	4907      	ldr	r1, [pc, #28]	; (8022638 <__assert_func+0x34>)
 802261a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802261e:	462b      	mov	r3, r5
 8022620:	f000 f80e 	bl	8022640 <fiprintf>
 8022624:	f000 fc2e 	bl	8022e84 <abort>
 8022628:	4b04      	ldr	r3, [pc, #16]	; (802263c <__assert_func+0x38>)
 802262a:	461c      	mov	r4, r3
 802262c:	e7f3      	b.n	8022616 <__assert_func+0x12>
 802262e:	bf00      	nop
 8022630:	20000038 	.word	0x20000038
 8022634:	08024564 	.word	0x08024564
 8022638:	08024571 	.word	0x08024571
 802263c:	0802459f 	.word	0x0802459f

08022640 <fiprintf>:
 8022640:	b40e      	push	{r1, r2, r3}
 8022642:	b503      	push	{r0, r1, lr}
 8022644:	ab03      	add	r3, sp, #12
 8022646:	4601      	mov	r1, r0
 8022648:	4805      	ldr	r0, [pc, #20]	; (8022660 <fiprintf+0x20>)
 802264a:	f853 2b04 	ldr.w	r2, [r3], #4
 802264e:	6800      	ldr	r0, [r0, #0]
 8022650:	9301      	str	r3, [sp, #4]
 8022652:	f000 f891 	bl	8022778 <_vfiprintf_r>
 8022656:	b002      	add	sp, #8
 8022658:	f85d eb04 	ldr.w	lr, [sp], #4
 802265c:	b003      	add	sp, #12
 802265e:	4770      	bx	lr
 8022660:	20000038 	.word	0x20000038

08022664 <malloc>:
 8022664:	4b02      	ldr	r3, [pc, #8]	; (8022670 <malloc+0xc>)
 8022666:	4601      	mov	r1, r0
 8022668:	6818      	ldr	r0, [r3, #0]
 802266a:	f7ff bf25 	b.w	80224b8 <_malloc_r>
 802266e:	bf00      	nop
 8022670:	20000038 	.word	0x20000038

08022674 <__malloc_lock>:
 8022674:	4801      	ldr	r0, [pc, #4]	; (802267c <__malloc_lock+0x8>)
 8022676:	f000 bdc3 	b.w	8023200 <__retarget_lock_acquire_recursive>
 802267a:	bf00      	nop
 802267c:	200b70d4 	.word	0x200b70d4

08022680 <__malloc_unlock>:
 8022680:	4801      	ldr	r0, [pc, #4]	; (8022688 <__malloc_unlock+0x8>)
 8022682:	f000 bdbe 	b.w	8023202 <__retarget_lock_release_recursive>
 8022686:	bf00      	nop
 8022688:	200b70d4 	.word	0x200b70d4

0802268c <_free_r>:
 802268c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802268e:	2900      	cmp	r1, #0
 8022690:	d043      	beq.n	802271a <_free_r+0x8e>
 8022692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022696:	1f0c      	subs	r4, r1, #4
 8022698:	9001      	str	r0, [sp, #4]
 802269a:	2b00      	cmp	r3, #0
 802269c:	bfb8      	it	lt
 802269e:	18e4      	addlt	r4, r4, r3
 80226a0:	f7ff ffe8 	bl	8022674 <__malloc_lock>
 80226a4:	4a1e      	ldr	r2, [pc, #120]	; (8022720 <_free_r+0x94>)
 80226a6:	9801      	ldr	r0, [sp, #4]
 80226a8:	6813      	ldr	r3, [r2, #0]
 80226aa:	b933      	cbnz	r3, 80226ba <_free_r+0x2e>
 80226ac:	6063      	str	r3, [r4, #4]
 80226ae:	6014      	str	r4, [r2, #0]
 80226b0:	b003      	add	sp, #12
 80226b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80226b6:	f7ff bfe3 	b.w	8022680 <__malloc_unlock>
 80226ba:	42a3      	cmp	r3, r4
 80226bc:	d908      	bls.n	80226d0 <_free_r+0x44>
 80226be:	6825      	ldr	r5, [r4, #0]
 80226c0:	1961      	adds	r1, r4, r5
 80226c2:	428b      	cmp	r3, r1
 80226c4:	bf01      	itttt	eq
 80226c6:	6819      	ldreq	r1, [r3, #0]
 80226c8:	685b      	ldreq	r3, [r3, #4]
 80226ca:	1949      	addeq	r1, r1, r5
 80226cc:	6021      	streq	r1, [r4, #0]
 80226ce:	e7ed      	b.n	80226ac <_free_r+0x20>
 80226d0:	461a      	mov	r2, r3
 80226d2:	685b      	ldr	r3, [r3, #4]
 80226d4:	b10b      	cbz	r3, 80226da <_free_r+0x4e>
 80226d6:	42a3      	cmp	r3, r4
 80226d8:	d9fa      	bls.n	80226d0 <_free_r+0x44>
 80226da:	6811      	ldr	r1, [r2, #0]
 80226dc:	1855      	adds	r5, r2, r1
 80226de:	42a5      	cmp	r5, r4
 80226e0:	d10b      	bne.n	80226fa <_free_r+0x6e>
 80226e2:	6824      	ldr	r4, [r4, #0]
 80226e4:	4421      	add	r1, r4
 80226e6:	1854      	adds	r4, r2, r1
 80226e8:	6011      	str	r1, [r2, #0]
 80226ea:	42a3      	cmp	r3, r4
 80226ec:	d1e0      	bne.n	80226b0 <_free_r+0x24>
 80226ee:	681c      	ldr	r4, [r3, #0]
 80226f0:	685b      	ldr	r3, [r3, #4]
 80226f2:	4421      	add	r1, r4
 80226f4:	6053      	str	r3, [r2, #4]
 80226f6:	6011      	str	r1, [r2, #0]
 80226f8:	e7da      	b.n	80226b0 <_free_r+0x24>
 80226fa:	d902      	bls.n	8022702 <_free_r+0x76>
 80226fc:	230c      	movs	r3, #12
 80226fe:	6003      	str	r3, [r0, #0]
 8022700:	e7d6      	b.n	80226b0 <_free_r+0x24>
 8022702:	6825      	ldr	r5, [r4, #0]
 8022704:	1961      	adds	r1, r4, r5
 8022706:	428b      	cmp	r3, r1
 8022708:	bf02      	ittt	eq
 802270a:	6819      	ldreq	r1, [r3, #0]
 802270c:	685b      	ldreq	r3, [r3, #4]
 802270e:	1949      	addeq	r1, r1, r5
 8022710:	6063      	str	r3, [r4, #4]
 8022712:	bf08      	it	eq
 8022714:	6021      	streq	r1, [r4, #0]
 8022716:	6054      	str	r4, [r2, #4]
 8022718:	e7ca      	b.n	80226b0 <_free_r+0x24>
 802271a:	b003      	add	sp, #12
 802271c:	bd30      	pop	{r4, r5, pc}
 802271e:	bf00      	nop
 8022720:	200b70c8 	.word	0x200b70c8

08022724 <__sfputc_r>:
 8022724:	6893      	ldr	r3, [r2, #8]
 8022726:	3b01      	subs	r3, #1
 8022728:	2b00      	cmp	r3, #0
 802272a:	6093      	str	r3, [r2, #8]
 802272c:	b410      	push	{r4}
 802272e:	da08      	bge.n	8022742 <__sfputc_r+0x1e>
 8022730:	6994      	ldr	r4, [r2, #24]
 8022732:	42a3      	cmp	r3, r4
 8022734:	db01      	blt.n	802273a <__sfputc_r+0x16>
 8022736:	290a      	cmp	r1, #10
 8022738:	d103      	bne.n	8022742 <__sfputc_r+0x1e>
 802273a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802273e:	f000 bae1 	b.w	8022d04 <__swbuf_r>
 8022742:	6813      	ldr	r3, [r2, #0]
 8022744:	1c58      	adds	r0, r3, #1
 8022746:	6010      	str	r0, [r2, #0]
 8022748:	4608      	mov	r0, r1
 802274a:	7019      	strb	r1, [r3, #0]
 802274c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022750:	4770      	bx	lr

08022752 <__sfputs_r>:
 8022752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022754:	4606      	mov	r6, r0
 8022756:	460f      	mov	r7, r1
 8022758:	4614      	mov	r4, r2
 802275a:	18d5      	adds	r5, r2, r3
 802275c:	42ac      	cmp	r4, r5
 802275e:	d101      	bne.n	8022764 <__sfputs_r+0x12>
 8022760:	2000      	movs	r0, #0
 8022762:	e007      	b.n	8022774 <__sfputs_r+0x22>
 8022764:	463a      	mov	r2, r7
 8022766:	f814 1b01 	ldrb.w	r1, [r4], #1
 802276a:	4630      	mov	r0, r6
 802276c:	f7ff ffda 	bl	8022724 <__sfputc_r>
 8022770:	1c43      	adds	r3, r0, #1
 8022772:	d1f3      	bne.n	802275c <__sfputs_r+0xa>
 8022774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022778 <_vfiprintf_r>:
 8022778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802277c:	460d      	mov	r5, r1
 802277e:	b09d      	sub	sp, #116	; 0x74
 8022780:	4614      	mov	r4, r2
 8022782:	4698      	mov	r8, r3
 8022784:	4606      	mov	r6, r0
 8022786:	b118      	cbz	r0, 8022790 <_vfiprintf_r+0x18>
 8022788:	6983      	ldr	r3, [r0, #24]
 802278a:	b90b      	cbnz	r3, 8022790 <_vfiprintf_r+0x18>
 802278c:	f000 fc9a 	bl	80230c4 <__sinit>
 8022790:	4b89      	ldr	r3, [pc, #548]	; (80229b8 <_vfiprintf_r+0x240>)
 8022792:	429d      	cmp	r5, r3
 8022794:	d11b      	bne.n	80227ce <_vfiprintf_r+0x56>
 8022796:	6875      	ldr	r5, [r6, #4]
 8022798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802279a:	07d9      	lsls	r1, r3, #31
 802279c:	d405      	bmi.n	80227aa <_vfiprintf_r+0x32>
 802279e:	89ab      	ldrh	r3, [r5, #12]
 80227a0:	059a      	lsls	r2, r3, #22
 80227a2:	d402      	bmi.n	80227aa <_vfiprintf_r+0x32>
 80227a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80227a6:	f000 fd2b 	bl	8023200 <__retarget_lock_acquire_recursive>
 80227aa:	89ab      	ldrh	r3, [r5, #12]
 80227ac:	071b      	lsls	r3, r3, #28
 80227ae:	d501      	bpl.n	80227b4 <_vfiprintf_r+0x3c>
 80227b0:	692b      	ldr	r3, [r5, #16]
 80227b2:	b9eb      	cbnz	r3, 80227f0 <_vfiprintf_r+0x78>
 80227b4:	4629      	mov	r1, r5
 80227b6:	4630      	mov	r0, r6
 80227b8:	f000 faf6 	bl	8022da8 <__swsetup_r>
 80227bc:	b1c0      	cbz	r0, 80227f0 <_vfiprintf_r+0x78>
 80227be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80227c0:	07dc      	lsls	r4, r3, #31
 80227c2:	d50e      	bpl.n	80227e2 <_vfiprintf_r+0x6a>
 80227c4:	f04f 30ff 	mov.w	r0, #4294967295
 80227c8:	b01d      	add	sp, #116	; 0x74
 80227ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ce:	4b7b      	ldr	r3, [pc, #492]	; (80229bc <_vfiprintf_r+0x244>)
 80227d0:	429d      	cmp	r5, r3
 80227d2:	d101      	bne.n	80227d8 <_vfiprintf_r+0x60>
 80227d4:	68b5      	ldr	r5, [r6, #8]
 80227d6:	e7df      	b.n	8022798 <_vfiprintf_r+0x20>
 80227d8:	4b79      	ldr	r3, [pc, #484]	; (80229c0 <_vfiprintf_r+0x248>)
 80227da:	429d      	cmp	r5, r3
 80227dc:	bf08      	it	eq
 80227de:	68f5      	ldreq	r5, [r6, #12]
 80227e0:	e7da      	b.n	8022798 <_vfiprintf_r+0x20>
 80227e2:	89ab      	ldrh	r3, [r5, #12]
 80227e4:	0598      	lsls	r0, r3, #22
 80227e6:	d4ed      	bmi.n	80227c4 <_vfiprintf_r+0x4c>
 80227e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80227ea:	f000 fd0a 	bl	8023202 <__retarget_lock_release_recursive>
 80227ee:	e7e9      	b.n	80227c4 <_vfiprintf_r+0x4c>
 80227f0:	2300      	movs	r3, #0
 80227f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80227f6:	f04f 0901 	mov.w	r9, #1
 80227fa:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80229c4 <_vfiprintf_r+0x24c>
 80227fe:	9309      	str	r3, [sp, #36]	; 0x24
 8022800:	2320      	movs	r3, #32
 8022802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022806:	2330      	movs	r3, #48	; 0x30
 8022808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802280c:	4623      	mov	r3, r4
 802280e:	469a      	mov	sl, r3
 8022810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022814:	b10a      	cbz	r2, 802281a <_vfiprintf_r+0xa2>
 8022816:	2a25      	cmp	r2, #37	; 0x25
 8022818:	d1f9      	bne.n	802280e <_vfiprintf_r+0x96>
 802281a:	ebba 0b04 	subs.w	fp, sl, r4
 802281e:	d00b      	beq.n	8022838 <_vfiprintf_r+0xc0>
 8022820:	465b      	mov	r3, fp
 8022822:	4622      	mov	r2, r4
 8022824:	4629      	mov	r1, r5
 8022826:	4630      	mov	r0, r6
 8022828:	f7ff ff93 	bl	8022752 <__sfputs_r>
 802282c:	3001      	adds	r0, #1
 802282e:	f000 80aa 	beq.w	8022986 <_vfiprintf_r+0x20e>
 8022832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022834:	445a      	add	r2, fp
 8022836:	9209      	str	r2, [sp, #36]	; 0x24
 8022838:	f89a 3000 	ldrb.w	r3, [sl]
 802283c:	2b00      	cmp	r3, #0
 802283e:	f000 80a2 	beq.w	8022986 <_vfiprintf_r+0x20e>
 8022842:	2300      	movs	r3, #0
 8022844:	f04f 32ff 	mov.w	r2, #4294967295
 8022848:	f10a 0a01 	add.w	sl, sl, #1
 802284c:	9304      	str	r3, [sp, #16]
 802284e:	9307      	str	r3, [sp, #28]
 8022850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022854:	931a      	str	r3, [sp, #104]	; 0x68
 8022856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802285a:	4654      	mov	r4, sl
 802285c:	2205      	movs	r2, #5
 802285e:	4859      	ldr	r0, [pc, #356]	; (80229c4 <_vfiprintf_r+0x24c>)
 8022860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022864:	f000 fd34 	bl	80232d0 <memchr>
 8022868:	9a04      	ldr	r2, [sp, #16]
 802286a:	b9d8      	cbnz	r0, 80228a4 <_vfiprintf_r+0x12c>
 802286c:	06d1      	lsls	r1, r2, #27
 802286e:	bf44      	itt	mi
 8022870:	2320      	movmi	r3, #32
 8022872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022876:	0713      	lsls	r3, r2, #28
 8022878:	bf44      	itt	mi
 802287a:	232b      	movmi	r3, #43	; 0x2b
 802287c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022880:	f89a 3000 	ldrb.w	r3, [sl]
 8022884:	2b2a      	cmp	r3, #42	; 0x2a
 8022886:	d015      	beq.n	80228b4 <_vfiprintf_r+0x13c>
 8022888:	9a07      	ldr	r2, [sp, #28]
 802288a:	4654      	mov	r4, sl
 802288c:	2000      	movs	r0, #0
 802288e:	f04f 0c0a 	mov.w	ip, #10
 8022892:	4621      	mov	r1, r4
 8022894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022898:	3b30      	subs	r3, #48	; 0x30
 802289a:	2b09      	cmp	r3, #9
 802289c:	d94e      	bls.n	802293c <_vfiprintf_r+0x1c4>
 802289e:	b1b0      	cbz	r0, 80228ce <_vfiprintf_r+0x156>
 80228a0:	9207      	str	r2, [sp, #28]
 80228a2:	e014      	b.n	80228ce <_vfiprintf_r+0x156>
 80228a4:	eba0 0308 	sub.w	r3, r0, r8
 80228a8:	46a2      	mov	sl, r4
 80228aa:	fa09 f303 	lsl.w	r3, r9, r3
 80228ae:	4313      	orrs	r3, r2
 80228b0:	9304      	str	r3, [sp, #16]
 80228b2:	e7d2      	b.n	802285a <_vfiprintf_r+0xe2>
 80228b4:	9b03      	ldr	r3, [sp, #12]
 80228b6:	1d19      	adds	r1, r3, #4
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	9103      	str	r1, [sp, #12]
 80228be:	bfbb      	ittet	lt
 80228c0:	425b      	neglt	r3, r3
 80228c2:	f042 0202 	orrlt.w	r2, r2, #2
 80228c6:	9307      	strge	r3, [sp, #28]
 80228c8:	9307      	strlt	r3, [sp, #28]
 80228ca:	bfb8      	it	lt
 80228cc:	9204      	strlt	r2, [sp, #16]
 80228ce:	7823      	ldrb	r3, [r4, #0]
 80228d0:	2b2e      	cmp	r3, #46	; 0x2e
 80228d2:	d10c      	bne.n	80228ee <_vfiprintf_r+0x176>
 80228d4:	7863      	ldrb	r3, [r4, #1]
 80228d6:	2b2a      	cmp	r3, #42	; 0x2a
 80228d8:	d135      	bne.n	8022946 <_vfiprintf_r+0x1ce>
 80228da:	9b03      	ldr	r3, [sp, #12]
 80228dc:	3402      	adds	r4, #2
 80228de:	1d1a      	adds	r2, r3, #4
 80228e0:	681b      	ldr	r3, [r3, #0]
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	9203      	str	r2, [sp, #12]
 80228e6:	bfb8      	it	lt
 80228e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80228ec:	9305      	str	r3, [sp, #20]
 80228ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80229d4 <_vfiprintf_r+0x25c>
 80228f2:	2203      	movs	r2, #3
 80228f4:	7821      	ldrb	r1, [r4, #0]
 80228f6:	4650      	mov	r0, sl
 80228f8:	f000 fcea 	bl	80232d0 <memchr>
 80228fc:	b140      	cbz	r0, 8022910 <_vfiprintf_r+0x198>
 80228fe:	2340      	movs	r3, #64	; 0x40
 8022900:	eba0 000a 	sub.w	r0, r0, sl
 8022904:	3401      	adds	r4, #1
 8022906:	fa03 f000 	lsl.w	r0, r3, r0
 802290a:	9b04      	ldr	r3, [sp, #16]
 802290c:	4303      	orrs	r3, r0
 802290e:	9304      	str	r3, [sp, #16]
 8022910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022914:	2206      	movs	r2, #6
 8022916:	482c      	ldr	r0, [pc, #176]	; (80229c8 <_vfiprintf_r+0x250>)
 8022918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802291c:	f000 fcd8 	bl	80232d0 <memchr>
 8022920:	2800      	cmp	r0, #0
 8022922:	d03f      	beq.n	80229a4 <_vfiprintf_r+0x22c>
 8022924:	4b29      	ldr	r3, [pc, #164]	; (80229cc <_vfiprintf_r+0x254>)
 8022926:	bb1b      	cbnz	r3, 8022970 <_vfiprintf_r+0x1f8>
 8022928:	9b03      	ldr	r3, [sp, #12]
 802292a:	3307      	adds	r3, #7
 802292c:	f023 0307 	bic.w	r3, r3, #7
 8022930:	3308      	adds	r3, #8
 8022932:	9303      	str	r3, [sp, #12]
 8022934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022936:	443b      	add	r3, r7
 8022938:	9309      	str	r3, [sp, #36]	; 0x24
 802293a:	e767      	b.n	802280c <_vfiprintf_r+0x94>
 802293c:	fb0c 3202 	mla	r2, ip, r2, r3
 8022940:	460c      	mov	r4, r1
 8022942:	2001      	movs	r0, #1
 8022944:	e7a5      	b.n	8022892 <_vfiprintf_r+0x11a>
 8022946:	2300      	movs	r3, #0
 8022948:	3401      	adds	r4, #1
 802294a:	f04f 0c0a 	mov.w	ip, #10
 802294e:	4619      	mov	r1, r3
 8022950:	9305      	str	r3, [sp, #20]
 8022952:	4620      	mov	r0, r4
 8022954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022958:	3a30      	subs	r2, #48	; 0x30
 802295a:	2a09      	cmp	r2, #9
 802295c:	d903      	bls.n	8022966 <_vfiprintf_r+0x1ee>
 802295e:	2b00      	cmp	r3, #0
 8022960:	d0c5      	beq.n	80228ee <_vfiprintf_r+0x176>
 8022962:	9105      	str	r1, [sp, #20]
 8022964:	e7c3      	b.n	80228ee <_vfiprintf_r+0x176>
 8022966:	fb0c 2101 	mla	r1, ip, r1, r2
 802296a:	4604      	mov	r4, r0
 802296c:	2301      	movs	r3, #1
 802296e:	e7f0      	b.n	8022952 <_vfiprintf_r+0x1da>
 8022970:	ab03      	add	r3, sp, #12
 8022972:	462a      	mov	r2, r5
 8022974:	a904      	add	r1, sp, #16
 8022976:	4630      	mov	r0, r6
 8022978:	9300      	str	r3, [sp, #0]
 802297a:	4b15      	ldr	r3, [pc, #84]	; (80229d0 <_vfiprintf_r+0x258>)
 802297c:	e000      	b.n	8022980 <_vfiprintf_r+0x208>
 802297e:	bf00      	nop
 8022980:	4607      	mov	r7, r0
 8022982:	1c78      	adds	r0, r7, #1
 8022984:	d1d6      	bne.n	8022934 <_vfiprintf_r+0x1bc>
 8022986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022988:	07d9      	lsls	r1, r3, #31
 802298a:	d405      	bmi.n	8022998 <_vfiprintf_r+0x220>
 802298c:	89ab      	ldrh	r3, [r5, #12]
 802298e:	059a      	lsls	r2, r3, #22
 8022990:	d402      	bmi.n	8022998 <_vfiprintf_r+0x220>
 8022992:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022994:	f000 fc35 	bl	8023202 <__retarget_lock_release_recursive>
 8022998:	89ab      	ldrh	r3, [r5, #12]
 802299a:	065b      	lsls	r3, r3, #25
 802299c:	f53f af12 	bmi.w	80227c4 <_vfiprintf_r+0x4c>
 80229a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80229a2:	e711      	b.n	80227c8 <_vfiprintf_r+0x50>
 80229a4:	ab03      	add	r3, sp, #12
 80229a6:	462a      	mov	r2, r5
 80229a8:	a904      	add	r1, sp, #16
 80229aa:	4630      	mov	r0, r6
 80229ac:	9300      	str	r3, [sp, #0]
 80229ae:	4b08      	ldr	r3, [pc, #32]	; (80229d0 <_vfiprintf_r+0x258>)
 80229b0:	f000 f882 	bl	8022ab8 <_printf_i>
 80229b4:	e7e4      	b.n	8022980 <_vfiprintf_r+0x208>
 80229b6:	bf00      	nop
 80229b8:	080245f4 	.word	0x080245f4
 80229bc:	08024614 	.word	0x08024614
 80229c0:	080245d4 	.word	0x080245d4
 80229c4:	080245a0 	.word	0x080245a0
 80229c8:	080245aa 	.word	0x080245aa
 80229cc:	00000000 	.word	0x00000000
 80229d0:	08022753 	.word	0x08022753
 80229d4:	080245a6 	.word	0x080245a6

080229d8 <_printf_common>:
 80229d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80229dc:	4616      	mov	r6, r2
 80229de:	4699      	mov	r9, r3
 80229e0:	688a      	ldr	r2, [r1, #8]
 80229e2:	4607      	mov	r7, r0
 80229e4:	690b      	ldr	r3, [r1, #16]
 80229e6:	460c      	mov	r4, r1
 80229e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80229ec:	4293      	cmp	r3, r2
 80229ee:	bfb8      	it	lt
 80229f0:	4613      	movlt	r3, r2
 80229f2:	6033      	str	r3, [r6, #0]
 80229f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80229f8:	b10a      	cbz	r2, 80229fe <_printf_common+0x26>
 80229fa:	3301      	adds	r3, #1
 80229fc:	6033      	str	r3, [r6, #0]
 80229fe:	6823      	ldr	r3, [r4, #0]
 8022a00:	0699      	lsls	r1, r3, #26
 8022a02:	bf42      	ittt	mi
 8022a04:	6833      	ldrmi	r3, [r6, #0]
 8022a06:	3302      	addmi	r3, #2
 8022a08:	6033      	strmi	r3, [r6, #0]
 8022a0a:	6825      	ldr	r5, [r4, #0]
 8022a0c:	f015 0506 	ands.w	r5, r5, #6
 8022a10:	d106      	bne.n	8022a20 <_printf_common+0x48>
 8022a12:	f104 0a19 	add.w	sl, r4, #25
 8022a16:	68e3      	ldr	r3, [r4, #12]
 8022a18:	6832      	ldr	r2, [r6, #0]
 8022a1a:	1a9b      	subs	r3, r3, r2
 8022a1c:	42ab      	cmp	r3, r5
 8022a1e:	dc29      	bgt.n	8022a74 <_printf_common+0x9c>
 8022a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022a24:	1e13      	subs	r3, r2, #0
 8022a26:	6822      	ldr	r2, [r4, #0]
 8022a28:	bf18      	it	ne
 8022a2a:	2301      	movne	r3, #1
 8022a2c:	0692      	lsls	r2, r2, #26
 8022a2e:	d42e      	bmi.n	8022a8e <_printf_common+0xb6>
 8022a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022a34:	4649      	mov	r1, r9
 8022a36:	4638      	mov	r0, r7
 8022a38:	47c0      	blx	r8
 8022a3a:	3001      	adds	r0, #1
 8022a3c:	d021      	beq.n	8022a82 <_printf_common+0xaa>
 8022a3e:	6823      	ldr	r3, [r4, #0]
 8022a40:	341a      	adds	r4, #26
 8022a42:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8022a46:	f003 0306 	and.w	r3, r3, #6
 8022a4a:	6832      	ldr	r2, [r6, #0]
 8022a4c:	2600      	movs	r6, #0
 8022a4e:	2b04      	cmp	r3, #4
 8022a50:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8022a54:	bf08      	it	eq
 8022a56:	1aad      	subeq	r5, r5, r2
 8022a58:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8022a5c:	bf14      	ite	ne
 8022a5e:	2500      	movne	r5, #0
 8022a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022a64:	4293      	cmp	r3, r2
 8022a66:	bfc4      	itt	gt
 8022a68:	1a9b      	subgt	r3, r3, r2
 8022a6a:	18ed      	addgt	r5, r5, r3
 8022a6c:	42b5      	cmp	r5, r6
 8022a6e:	d11a      	bne.n	8022aa6 <_printf_common+0xce>
 8022a70:	2000      	movs	r0, #0
 8022a72:	e008      	b.n	8022a86 <_printf_common+0xae>
 8022a74:	2301      	movs	r3, #1
 8022a76:	4652      	mov	r2, sl
 8022a78:	4649      	mov	r1, r9
 8022a7a:	4638      	mov	r0, r7
 8022a7c:	47c0      	blx	r8
 8022a7e:	3001      	adds	r0, #1
 8022a80:	d103      	bne.n	8022a8a <_printf_common+0xb2>
 8022a82:	f04f 30ff 	mov.w	r0, #4294967295
 8022a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a8a:	3501      	adds	r5, #1
 8022a8c:	e7c3      	b.n	8022a16 <_printf_common+0x3e>
 8022a8e:	18e1      	adds	r1, r4, r3
 8022a90:	1c5a      	adds	r2, r3, #1
 8022a92:	2030      	movs	r0, #48	; 0x30
 8022a94:	3302      	adds	r3, #2
 8022a96:	4422      	add	r2, r4
 8022a98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022aa4:	e7c4      	b.n	8022a30 <_printf_common+0x58>
 8022aa6:	2301      	movs	r3, #1
 8022aa8:	4622      	mov	r2, r4
 8022aaa:	4649      	mov	r1, r9
 8022aac:	4638      	mov	r0, r7
 8022aae:	47c0      	blx	r8
 8022ab0:	3001      	adds	r0, #1
 8022ab2:	d0e6      	beq.n	8022a82 <_printf_common+0xaa>
 8022ab4:	3601      	adds	r6, #1
 8022ab6:	e7d9      	b.n	8022a6c <_printf_common+0x94>

08022ab8 <_printf_i>:
 8022ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022abc:	7e0f      	ldrb	r7, [r1, #24]
 8022abe:	4691      	mov	r9, r2
 8022ac0:	4680      	mov	r8, r0
 8022ac2:	460c      	mov	r4, r1
 8022ac4:	2f78      	cmp	r7, #120	; 0x78
 8022ac6:	469a      	mov	sl, r3
 8022ac8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022ace:	d807      	bhi.n	8022ae0 <_printf_i+0x28>
 8022ad0:	2f62      	cmp	r7, #98	; 0x62
 8022ad2:	d80a      	bhi.n	8022aea <_printf_i+0x32>
 8022ad4:	2f00      	cmp	r7, #0
 8022ad6:	f000 80d8 	beq.w	8022c8a <_printf_i+0x1d2>
 8022ada:	2f58      	cmp	r7, #88	; 0x58
 8022adc:	f000 80a3 	beq.w	8022c26 <_printf_i+0x16e>
 8022ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022ae8:	e03a      	b.n	8022b60 <_printf_i+0xa8>
 8022aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022aee:	2b15      	cmp	r3, #21
 8022af0:	d8f6      	bhi.n	8022ae0 <_printf_i+0x28>
 8022af2:	a101      	add	r1, pc, #4	; (adr r1, 8022af8 <_printf_i+0x40>)
 8022af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022af8:	08022b51 	.word	0x08022b51
 8022afc:	08022b65 	.word	0x08022b65
 8022b00:	08022ae1 	.word	0x08022ae1
 8022b04:	08022ae1 	.word	0x08022ae1
 8022b08:	08022ae1 	.word	0x08022ae1
 8022b0c:	08022ae1 	.word	0x08022ae1
 8022b10:	08022b65 	.word	0x08022b65
 8022b14:	08022ae1 	.word	0x08022ae1
 8022b18:	08022ae1 	.word	0x08022ae1
 8022b1c:	08022ae1 	.word	0x08022ae1
 8022b20:	08022ae1 	.word	0x08022ae1
 8022b24:	08022c71 	.word	0x08022c71
 8022b28:	08022b95 	.word	0x08022b95
 8022b2c:	08022c53 	.word	0x08022c53
 8022b30:	08022ae1 	.word	0x08022ae1
 8022b34:	08022ae1 	.word	0x08022ae1
 8022b38:	08022c93 	.word	0x08022c93
 8022b3c:	08022ae1 	.word	0x08022ae1
 8022b40:	08022b95 	.word	0x08022b95
 8022b44:	08022ae1 	.word	0x08022ae1
 8022b48:	08022ae1 	.word	0x08022ae1
 8022b4c:	08022c5b 	.word	0x08022c5b
 8022b50:	682b      	ldr	r3, [r5, #0]
 8022b52:	1d1a      	adds	r2, r3, #4
 8022b54:	681b      	ldr	r3, [r3, #0]
 8022b56:	602a      	str	r2, [r5, #0]
 8022b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022b60:	2301      	movs	r3, #1
 8022b62:	e0a3      	b.n	8022cac <_printf_i+0x1f4>
 8022b64:	6820      	ldr	r0, [r4, #0]
 8022b66:	6829      	ldr	r1, [r5, #0]
 8022b68:	0606      	lsls	r6, r0, #24
 8022b6a:	f101 0304 	add.w	r3, r1, #4
 8022b6e:	d50a      	bpl.n	8022b86 <_printf_i+0xce>
 8022b70:	680e      	ldr	r6, [r1, #0]
 8022b72:	602b      	str	r3, [r5, #0]
 8022b74:	2e00      	cmp	r6, #0
 8022b76:	da03      	bge.n	8022b80 <_printf_i+0xc8>
 8022b78:	232d      	movs	r3, #45	; 0x2d
 8022b7a:	4276      	negs	r6, r6
 8022b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022b80:	485e      	ldr	r0, [pc, #376]	; (8022cfc <_printf_i+0x244>)
 8022b82:	230a      	movs	r3, #10
 8022b84:	e019      	b.n	8022bba <_printf_i+0x102>
 8022b86:	680e      	ldr	r6, [r1, #0]
 8022b88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022b8c:	602b      	str	r3, [r5, #0]
 8022b8e:	bf18      	it	ne
 8022b90:	b236      	sxthne	r6, r6
 8022b92:	e7ef      	b.n	8022b74 <_printf_i+0xbc>
 8022b94:	682b      	ldr	r3, [r5, #0]
 8022b96:	6820      	ldr	r0, [r4, #0]
 8022b98:	1d19      	adds	r1, r3, #4
 8022b9a:	6029      	str	r1, [r5, #0]
 8022b9c:	0601      	lsls	r1, r0, #24
 8022b9e:	d501      	bpl.n	8022ba4 <_printf_i+0xec>
 8022ba0:	681e      	ldr	r6, [r3, #0]
 8022ba2:	e002      	b.n	8022baa <_printf_i+0xf2>
 8022ba4:	0646      	lsls	r6, r0, #25
 8022ba6:	d5fb      	bpl.n	8022ba0 <_printf_i+0xe8>
 8022ba8:	881e      	ldrh	r6, [r3, #0]
 8022baa:	2f6f      	cmp	r7, #111	; 0x6f
 8022bac:	4853      	ldr	r0, [pc, #332]	; (8022cfc <_printf_i+0x244>)
 8022bae:	bf0c      	ite	eq
 8022bb0:	2308      	moveq	r3, #8
 8022bb2:	230a      	movne	r3, #10
 8022bb4:	2100      	movs	r1, #0
 8022bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022bba:	6865      	ldr	r5, [r4, #4]
 8022bbc:	2d00      	cmp	r5, #0
 8022bbe:	60a5      	str	r5, [r4, #8]
 8022bc0:	bfa2      	ittt	ge
 8022bc2:	6821      	ldrge	r1, [r4, #0]
 8022bc4:	f021 0104 	bicge.w	r1, r1, #4
 8022bc8:	6021      	strge	r1, [r4, #0]
 8022bca:	b90e      	cbnz	r6, 8022bd0 <_printf_i+0x118>
 8022bcc:	2d00      	cmp	r5, #0
 8022bce:	d04d      	beq.n	8022c6c <_printf_i+0x1b4>
 8022bd0:	4615      	mov	r5, r2
 8022bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8022bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8022bda:	5dc7      	ldrb	r7, [r0, r7]
 8022bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022be0:	4637      	mov	r7, r6
 8022be2:	460e      	mov	r6, r1
 8022be4:	42bb      	cmp	r3, r7
 8022be6:	d9f4      	bls.n	8022bd2 <_printf_i+0x11a>
 8022be8:	2b08      	cmp	r3, #8
 8022bea:	d10b      	bne.n	8022c04 <_printf_i+0x14c>
 8022bec:	6823      	ldr	r3, [r4, #0]
 8022bee:	07de      	lsls	r6, r3, #31
 8022bf0:	d508      	bpl.n	8022c04 <_printf_i+0x14c>
 8022bf2:	6923      	ldr	r3, [r4, #16]
 8022bf4:	6861      	ldr	r1, [r4, #4]
 8022bf6:	4299      	cmp	r1, r3
 8022bf8:	bfde      	ittt	le
 8022bfa:	2330      	movle	r3, #48	; 0x30
 8022bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022c04:	1b52      	subs	r2, r2, r5
 8022c06:	6122      	str	r2, [r4, #16]
 8022c08:	464b      	mov	r3, r9
 8022c0a:	aa03      	add	r2, sp, #12
 8022c0c:	4621      	mov	r1, r4
 8022c0e:	4640      	mov	r0, r8
 8022c10:	f8cd a000 	str.w	sl, [sp]
 8022c14:	f7ff fee0 	bl	80229d8 <_printf_common>
 8022c18:	3001      	adds	r0, #1
 8022c1a:	d14c      	bne.n	8022cb6 <_printf_i+0x1fe>
 8022c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8022c20:	b004      	add	sp, #16
 8022c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c26:	4835      	ldr	r0, [pc, #212]	; (8022cfc <_printf_i+0x244>)
 8022c28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022c2c:	6829      	ldr	r1, [r5, #0]
 8022c2e:	6823      	ldr	r3, [r4, #0]
 8022c30:	f851 6b04 	ldr.w	r6, [r1], #4
 8022c34:	6029      	str	r1, [r5, #0]
 8022c36:	061d      	lsls	r5, r3, #24
 8022c38:	d514      	bpl.n	8022c64 <_printf_i+0x1ac>
 8022c3a:	07df      	lsls	r7, r3, #31
 8022c3c:	bf44      	itt	mi
 8022c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8022c42:	6023      	strmi	r3, [r4, #0]
 8022c44:	b91e      	cbnz	r6, 8022c4e <_printf_i+0x196>
 8022c46:	6823      	ldr	r3, [r4, #0]
 8022c48:	f023 0320 	bic.w	r3, r3, #32
 8022c4c:	6023      	str	r3, [r4, #0]
 8022c4e:	2310      	movs	r3, #16
 8022c50:	e7b0      	b.n	8022bb4 <_printf_i+0xfc>
 8022c52:	6823      	ldr	r3, [r4, #0]
 8022c54:	f043 0320 	orr.w	r3, r3, #32
 8022c58:	6023      	str	r3, [r4, #0]
 8022c5a:	2378      	movs	r3, #120	; 0x78
 8022c5c:	4828      	ldr	r0, [pc, #160]	; (8022d00 <_printf_i+0x248>)
 8022c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022c62:	e7e3      	b.n	8022c2c <_printf_i+0x174>
 8022c64:	0659      	lsls	r1, r3, #25
 8022c66:	bf48      	it	mi
 8022c68:	b2b6      	uxthmi	r6, r6
 8022c6a:	e7e6      	b.n	8022c3a <_printf_i+0x182>
 8022c6c:	4615      	mov	r5, r2
 8022c6e:	e7bb      	b.n	8022be8 <_printf_i+0x130>
 8022c70:	682b      	ldr	r3, [r5, #0]
 8022c72:	6826      	ldr	r6, [r4, #0]
 8022c74:	1d18      	adds	r0, r3, #4
 8022c76:	6961      	ldr	r1, [r4, #20]
 8022c78:	6028      	str	r0, [r5, #0]
 8022c7a:	0635      	lsls	r5, r6, #24
 8022c7c:	681b      	ldr	r3, [r3, #0]
 8022c7e:	d501      	bpl.n	8022c84 <_printf_i+0x1cc>
 8022c80:	6019      	str	r1, [r3, #0]
 8022c82:	e002      	b.n	8022c8a <_printf_i+0x1d2>
 8022c84:	0670      	lsls	r0, r6, #25
 8022c86:	d5fb      	bpl.n	8022c80 <_printf_i+0x1c8>
 8022c88:	8019      	strh	r1, [r3, #0]
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	4615      	mov	r5, r2
 8022c8e:	6123      	str	r3, [r4, #16]
 8022c90:	e7ba      	b.n	8022c08 <_printf_i+0x150>
 8022c92:	682b      	ldr	r3, [r5, #0]
 8022c94:	2100      	movs	r1, #0
 8022c96:	1d1a      	adds	r2, r3, #4
 8022c98:	602a      	str	r2, [r5, #0]
 8022c9a:	681d      	ldr	r5, [r3, #0]
 8022c9c:	6862      	ldr	r2, [r4, #4]
 8022c9e:	4628      	mov	r0, r5
 8022ca0:	f000 fb16 	bl	80232d0 <memchr>
 8022ca4:	b108      	cbz	r0, 8022caa <_printf_i+0x1f2>
 8022ca6:	1b40      	subs	r0, r0, r5
 8022ca8:	6060      	str	r0, [r4, #4]
 8022caa:	6863      	ldr	r3, [r4, #4]
 8022cac:	6123      	str	r3, [r4, #16]
 8022cae:	2300      	movs	r3, #0
 8022cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022cb4:	e7a8      	b.n	8022c08 <_printf_i+0x150>
 8022cb6:	6923      	ldr	r3, [r4, #16]
 8022cb8:	462a      	mov	r2, r5
 8022cba:	4649      	mov	r1, r9
 8022cbc:	4640      	mov	r0, r8
 8022cbe:	47d0      	blx	sl
 8022cc0:	3001      	adds	r0, #1
 8022cc2:	d0ab      	beq.n	8022c1c <_printf_i+0x164>
 8022cc4:	6823      	ldr	r3, [r4, #0]
 8022cc6:	079b      	lsls	r3, r3, #30
 8022cc8:	d413      	bmi.n	8022cf2 <_printf_i+0x23a>
 8022cca:	68e0      	ldr	r0, [r4, #12]
 8022ccc:	9b03      	ldr	r3, [sp, #12]
 8022cce:	4298      	cmp	r0, r3
 8022cd0:	bfb8      	it	lt
 8022cd2:	4618      	movlt	r0, r3
 8022cd4:	e7a4      	b.n	8022c20 <_printf_i+0x168>
 8022cd6:	2301      	movs	r3, #1
 8022cd8:	4632      	mov	r2, r6
 8022cda:	4649      	mov	r1, r9
 8022cdc:	4640      	mov	r0, r8
 8022cde:	47d0      	blx	sl
 8022ce0:	3001      	adds	r0, #1
 8022ce2:	d09b      	beq.n	8022c1c <_printf_i+0x164>
 8022ce4:	3501      	adds	r5, #1
 8022ce6:	68e3      	ldr	r3, [r4, #12]
 8022ce8:	9903      	ldr	r1, [sp, #12]
 8022cea:	1a5b      	subs	r3, r3, r1
 8022cec:	42ab      	cmp	r3, r5
 8022cee:	dcf2      	bgt.n	8022cd6 <_printf_i+0x21e>
 8022cf0:	e7eb      	b.n	8022cca <_printf_i+0x212>
 8022cf2:	2500      	movs	r5, #0
 8022cf4:	f104 0619 	add.w	r6, r4, #25
 8022cf8:	e7f5      	b.n	8022ce6 <_printf_i+0x22e>
 8022cfa:	bf00      	nop
 8022cfc:	080245b1 	.word	0x080245b1
 8022d00:	080245c2 	.word	0x080245c2

08022d04 <__swbuf_r>:
 8022d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d06:	460e      	mov	r6, r1
 8022d08:	4614      	mov	r4, r2
 8022d0a:	4605      	mov	r5, r0
 8022d0c:	b118      	cbz	r0, 8022d16 <__swbuf_r+0x12>
 8022d0e:	6983      	ldr	r3, [r0, #24]
 8022d10:	b90b      	cbnz	r3, 8022d16 <__swbuf_r+0x12>
 8022d12:	f000 f9d7 	bl	80230c4 <__sinit>
 8022d16:	4b21      	ldr	r3, [pc, #132]	; (8022d9c <__swbuf_r+0x98>)
 8022d18:	429c      	cmp	r4, r3
 8022d1a:	d12b      	bne.n	8022d74 <__swbuf_r+0x70>
 8022d1c:	686c      	ldr	r4, [r5, #4]
 8022d1e:	69a3      	ldr	r3, [r4, #24]
 8022d20:	60a3      	str	r3, [r4, #8]
 8022d22:	89a3      	ldrh	r3, [r4, #12]
 8022d24:	071a      	lsls	r2, r3, #28
 8022d26:	d52f      	bpl.n	8022d88 <__swbuf_r+0x84>
 8022d28:	6923      	ldr	r3, [r4, #16]
 8022d2a:	b36b      	cbz	r3, 8022d88 <__swbuf_r+0x84>
 8022d2c:	6923      	ldr	r3, [r4, #16]
 8022d2e:	b2f6      	uxtb	r6, r6
 8022d30:	6820      	ldr	r0, [r4, #0]
 8022d32:	4637      	mov	r7, r6
 8022d34:	1ac0      	subs	r0, r0, r3
 8022d36:	6963      	ldr	r3, [r4, #20]
 8022d38:	4283      	cmp	r3, r0
 8022d3a:	dc04      	bgt.n	8022d46 <__swbuf_r+0x42>
 8022d3c:	4621      	mov	r1, r4
 8022d3e:	4628      	mov	r0, r5
 8022d40:	f000 f92c 	bl	8022f9c <_fflush_r>
 8022d44:	bb30      	cbnz	r0, 8022d94 <__swbuf_r+0x90>
 8022d46:	68a3      	ldr	r3, [r4, #8]
 8022d48:	3001      	adds	r0, #1
 8022d4a:	3b01      	subs	r3, #1
 8022d4c:	60a3      	str	r3, [r4, #8]
 8022d4e:	6823      	ldr	r3, [r4, #0]
 8022d50:	1c5a      	adds	r2, r3, #1
 8022d52:	6022      	str	r2, [r4, #0]
 8022d54:	701e      	strb	r6, [r3, #0]
 8022d56:	6963      	ldr	r3, [r4, #20]
 8022d58:	4283      	cmp	r3, r0
 8022d5a:	d004      	beq.n	8022d66 <__swbuf_r+0x62>
 8022d5c:	89a3      	ldrh	r3, [r4, #12]
 8022d5e:	07db      	lsls	r3, r3, #31
 8022d60:	d506      	bpl.n	8022d70 <__swbuf_r+0x6c>
 8022d62:	2e0a      	cmp	r6, #10
 8022d64:	d104      	bne.n	8022d70 <__swbuf_r+0x6c>
 8022d66:	4621      	mov	r1, r4
 8022d68:	4628      	mov	r0, r5
 8022d6a:	f000 f917 	bl	8022f9c <_fflush_r>
 8022d6e:	b988      	cbnz	r0, 8022d94 <__swbuf_r+0x90>
 8022d70:	4638      	mov	r0, r7
 8022d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d74:	4b0a      	ldr	r3, [pc, #40]	; (8022da0 <__swbuf_r+0x9c>)
 8022d76:	429c      	cmp	r4, r3
 8022d78:	d101      	bne.n	8022d7e <__swbuf_r+0x7a>
 8022d7a:	68ac      	ldr	r4, [r5, #8]
 8022d7c:	e7cf      	b.n	8022d1e <__swbuf_r+0x1a>
 8022d7e:	4b09      	ldr	r3, [pc, #36]	; (8022da4 <__swbuf_r+0xa0>)
 8022d80:	429c      	cmp	r4, r3
 8022d82:	bf08      	it	eq
 8022d84:	68ec      	ldreq	r4, [r5, #12]
 8022d86:	e7ca      	b.n	8022d1e <__swbuf_r+0x1a>
 8022d88:	4621      	mov	r1, r4
 8022d8a:	4628      	mov	r0, r5
 8022d8c:	f000 f80c 	bl	8022da8 <__swsetup_r>
 8022d90:	2800      	cmp	r0, #0
 8022d92:	d0cb      	beq.n	8022d2c <__swbuf_r+0x28>
 8022d94:	f04f 37ff 	mov.w	r7, #4294967295
 8022d98:	e7ea      	b.n	8022d70 <__swbuf_r+0x6c>
 8022d9a:	bf00      	nop
 8022d9c:	080245f4 	.word	0x080245f4
 8022da0:	08024614 	.word	0x08024614
 8022da4:	080245d4 	.word	0x080245d4

08022da8 <__swsetup_r>:
 8022da8:	4b32      	ldr	r3, [pc, #200]	; (8022e74 <__swsetup_r+0xcc>)
 8022daa:	b570      	push	{r4, r5, r6, lr}
 8022dac:	681d      	ldr	r5, [r3, #0]
 8022dae:	4606      	mov	r6, r0
 8022db0:	460c      	mov	r4, r1
 8022db2:	b125      	cbz	r5, 8022dbe <__swsetup_r+0x16>
 8022db4:	69ab      	ldr	r3, [r5, #24]
 8022db6:	b913      	cbnz	r3, 8022dbe <__swsetup_r+0x16>
 8022db8:	4628      	mov	r0, r5
 8022dba:	f000 f983 	bl	80230c4 <__sinit>
 8022dbe:	4b2e      	ldr	r3, [pc, #184]	; (8022e78 <__swsetup_r+0xd0>)
 8022dc0:	429c      	cmp	r4, r3
 8022dc2:	d10f      	bne.n	8022de4 <__swsetup_r+0x3c>
 8022dc4:	686c      	ldr	r4, [r5, #4]
 8022dc6:	89a3      	ldrh	r3, [r4, #12]
 8022dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022dcc:	0719      	lsls	r1, r3, #28
 8022dce:	d42c      	bmi.n	8022e2a <__swsetup_r+0x82>
 8022dd0:	06dd      	lsls	r5, r3, #27
 8022dd2:	d411      	bmi.n	8022df8 <__swsetup_r+0x50>
 8022dd4:	2309      	movs	r3, #9
 8022dd6:	6033      	str	r3, [r6, #0]
 8022dd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8022de0:	81a3      	strh	r3, [r4, #12]
 8022de2:	e03e      	b.n	8022e62 <__swsetup_r+0xba>
 8022de4:	4b25      	ldr	r3, [pc, #148]	; (8022e7c <__swsetup_r+0xd4>)
 8022de6:	429c      	cmp	r4, r3
 8022de8:	d101      	bne.n	8022dee <__swsetup_r+0x46>
 8022dea:	68ac      	ldr	r4, [r5, #8]
 8022dec:	e7eb      	b.n	8022dc6 <__swsetup_r+0x1e>
 8022dee:	4b24      	ldr	r3, [pc, #144]	; (8022e80 <__swsetup_r+0xd8>)
 8022df0:	429c      	cmp	r4, r3
 8022df2:	bf08      	it	eq
 8022df4:	68ec      	ldreq	r4, [r5, #12]
 8022df6:	e7e6      	b.n	8022dc6 <__swsetup_r+0x1e>
 8022df8:	0758      	lsls	r0, r3, #29
 8022dfa:	d512      	bpl.n	8022e22 <__swsetup_r+0x7a>
 8022dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022dfe:	b141      	cbz	r1, 8022e12 <__swsetup_r+0x6a>
 8022e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e04:	4299      	cmp	r1, r3
 8022e06:	d002      	beq.n	8022e0e <__swsetup_r+0x66>
 8022e08:	4630      	mov	r0, r6
 8022e0a:	f7ff fc3f 	bl	802268c <_free_r>
 8022e0e:	2300      	movs	r3, #0
 8022e10:	6363      	str	r3, [r4, #52]	; 0x34
 8022e12:	89a3      	ldrh	r3, [r4, #12]
 8022e14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022e18:	81a3      	strh	r3, [r4, #12]
 8022e1a:	2300      	movs	r3, #0
 8022e1c:	6063      	str	r3, [r4, #4]
 8022e1e:	6923      	ldr	r3, [r4, #16]
 8022e20:	6023      	str	r3, [r4, #0]
 8022e22:	89a3      	ldrh	r3, [r4, #12]
 8022e24:	f043 0308 	orr.w	r3, r3, #8
 8022e28:	81a3      	strh	r3, [r4, #12]
 8022e2a:	6923      	ldr	r3, [r4, #16]
 8022e2c:	b94b      	cbnz	r3, 8022e42 <__swsetup_r+0x9a>
 8022e2e:	89a3      	ldrh	r3, [r4, #12]
 8022e30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022e38:	d003      	beq.n	8022e42 <__swsetup_r+0x9a>
 8022e3a:	4621      	mov	r1, r4
 8022e3c:	4630      	mov	r0, r6
 8022e3e:	f000 fa07 	bl	8023250 <__smakebuf_r>
 8022e42:	89a0      	ldrh	r0, [r4, #12]
 8022e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022e48:	f010 0301 	ands.w	r3, r0, #1
 8022e4c:	d00a      	beq.n	8022e64 <__swsetup_r+0xbc>
 8022e4e:	2300      	movs	r3, #0
 8022e50:	60a3      	str	r3, [r4, #8]
 8022e52:	6963      	ldr	r3, [r4, #20]
 8022e54:	425b      	negs	r3, r3
 8022e56:	61a3      	str	r3, [r4, #24]
 8022e58:	6923      	ldr	r3, [r4, #16]
 8022e5a:	b943      	cbnz	r3, 8022e6e <__swsetup_r+0xc6>
 8022e5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022e60:	d1ba      	bne.n	8022dd8 <__swsetup_r+0x30>
 8022e62:	bd70      	pop	{r4, r5, r6, pc}
 8022e64:	0781      	lsls	r1, r0, #30
 8022e66:	bf58      	it	pl
 8022e68:	6963      	ldrpl	r3, [r4, #20]
 8022e6a:	60a3      	str	r3, [r4, #8]
 8022e6c:	e7f4      	b.n	8022e58 <__swsetup_r+0xb0>
 8022e6e:	2000      	movs	r0, #0
 8022e70:	e7f7      	b.n	8022e62 <__swsetup_r+0xba>
 8022e72:	bf00      	nop
 8022e74:	20000038 	.word	0x20000038
 8022e78:	080245f4 	.word	0x080245f4
 8022e7c:	08024614 	.word	0x08024614
 8022e80:	080245d4 	.word	0x080245d4

08022e84 <abort>:
 8022e84:	2006      	movs	r0, #6
 8022e86:	b508      	push	{r3, lr}
 8022e88:	f000 fa58 	bl	802333c <raise>
 8022e8c:	2001      	movs	r0, #1
 8022e8e:	f7ed fa1a 	bl	80102c6 <_exit>
	...

08022e94 <__sflush_r>:
 8022e94:	898a      	ldrh	r2, [r1, #12]
 8022e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e9a:	4605      	mov	r5, r0
 8022e9c:	0710      	lsls	r0, r2, #28
 8022e9e:	460c      	mov	r4, r1
 8022ea0:	d458      	bmi.n	8022f54 <__sflush_r+0xc0>
 8022ea2:	684b      	ldr	r3, [r1, #4]
 8022ea4:	2b00      	cmp	r3, #0
 8022ea6:	dc05      	bgt.n	8022eb4 <__sflush_r+0x20>
 8022ea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022eaa:	2b00      	cmp	r3, #0
 8022eac:	dc02      	bgt.n	8022eb4 <__sflush_r+0x20>
 8022eae:	2000      	movs	r0, #0
 8022eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022eb6:	2e00      	cmp	r6, #0
 8022eb8:	d0f9      	beq.n	8022eae <__sflush_r+0x1a>
 8022eba:	2300      	movs	r3, #0
 8022ebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022ec0:	682f      	ldr	r7, [r5, #0]
 8022ec2:	602b      	str	r3, [r5, #0]
 8022ec4:	d032      	beq.n	8022f2c <__sflush_r+0x98>
 8022ec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022ec8:	89a3      	ldrh	r3, [r4, #12]
 8022eca:	075a      	lsls	r2, r3, #29
 8022ecc:	d505      	bpl.n	8022eda <__sflush_r+0x46>
 8022ece:	6863      	ldr	r3, [r4, #4]
 8022ed0:	1ac0      	subs	r0, r0, r3
 8022ed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022ed4:	b10b      	cbz	r3, 8022eda <__sflush_r+0x46>
 8022ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022ed8:	1ac0      	subs	r0, r0, r3
 8022eda:	2300      	movs	r3, #0
 8022edc:	4602      	mov	r2, r0
 8022ede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022ee0:	4628      	mov	r0, r5
 8022ee2:	6a21      	ldr	r1, [r4, #32]
 8022ee4:	47b0      	blx	r6
 8022ee6:	1c43      	adds	r3, r0, #1
 8022ee8:	89a3      	ldrh	r3, [r4, #12]
 8022eea:	d106      	bne.n	8022efa <__sflush_r+0x66>
 8022eec:	6829      	ldr	r1, [r5, #0]
 8022eee:	291d      	cmp	r1, #29
 8022ef0:	d82c      	bhi.n	8022f4c <__sflush_r+0xb8>
 8022ef2:	4a29      	ldr	r2, [pc, #164]	; (8022f98 <__sflush_r+0x104>)
 8022ef4:	40ca      	lsrs	r2, r1
 8022ef6:	07d6      	lsls	r6, r2, #31
 8022ef8:	d528      	bpl.n	8022f4c <__sflush_r+0xb8>
 8022efa:	2200      	movs	r2, #0
 8022efc:	04d9      	lsls	r1, r3, #19
 8022efe:	6062      	str	r2, [r4, #4]
 8022f00:	6922      	ldr	r2, [r4, #16]
 8022f02:	6022      	str	r2, [r4, #0]
 8022f04:	d504      	bpl.n	8022f10 <__sflush_r+0x7c>
 8022f06:	1c42      	adds	r2, r0, #1
 8022f08:	d101      	bne.n	8022f0e <__sflush_r+0x7a>
 8022f0a:	682b      	ldr	r3, [r5, #0]
 8022f0c:	b903      	cbnz	r3, 8022f10 <__sflush_r+0x7c>
 8022f0e:	6560      	str	r0, [r4, #84]	; 0x54
 8022f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022f12:	602f      	str	r7, [r5, #0]
 8022f14:	2900      	cmp	r1, #0
 8022f16:	d0ca      	beq.n	8022eae <__sflush_r+0x1a>
 8022f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022f1c:	4299      	cmp	r1, r3
 8022f1e:	d002      	beq.n	8022f26 <__sflush_r+0x92>
 8022f20:	4628      	mov	r0, r5
 8022f22:	f7ff fbb3 	bl	802268c <_free_r>
 8022f26:	2000      	movs	r0, #0
 8022f28:	6360      	str	r0, [r4, #52]	; 0x34
 8022f2a:	e7c1      	b.n	8022eb0 <__sflush_r+0x1c>
 8022f2c:	6a21      	ldr	r1, [r4, #32]
 8022f2e:	2301      	movs	r3, #1
 8022f30:	4628      	mov	r0, r5
 8022f32:	47b0      	blx	r6
 8022f34:	1c41      	adds	r1, r0, #1
 8022f36:	d1c7      	bne.n	8022ec8 <__sflush_r+0x34>
 8022f38:	682b      	ldr	r3, [r5, #0]
 8022f3a:	2b00      	cmp	r3, #0
 8022f3c:	d0c4      	beq.n	8022ec8 <__sflush_r+0x34>
 8022f3e:	2b1d      	cmp	r3, #29
 8022f40:	d001      	beq.n	8022f46 <__sflush_r+0xb2>
 8022f42:	2b16      	cmp	r3, #22
 8022f44:	d101      	bne.n	8022f4a <__sflush_r+0xb6>
 8022f46:	602f      	str	r7, [r5, #0]
 8022f48:	e7b1      	b.n	8022eae <__sflush_r+0x1a>
 8022f4a:	89a3      	ldrh	r3, [r4, #12]
 8022f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f50:	81a3      	strh	r3, [r4, #12]
 8022f52:	e7ad      	b.n	8022eb0 <__sflush_r+0x1c>
 8022f54:	690f      	ldr	r7, [r1, #16]
 8022f56:	2f00      	cmp	r7, #0
 8022f58:	d0a9      	beq.n	8022eae <__sflush_r+0x1a>
 8022f5a:	0793      	lsls	r3, r2, #30
 8022f5c:	680e      	ldr	r6, [r1, #0]
 8022f5e:	600f      	str	r7, [r1, #0]
 8022f60:	bf0c      	ite	eq
 8022f62:	694b      	ldreq	r3, [r1, #20]
 8022f64:	2300      	movne	r3, #0
 8022f66:	eba6 0807 	sub.w	r8, r6, r7
 8022f6a:	608b      	str	r3, [r1, #8]
 8022f6c:	f1b8 0f00 	cmp.w	r8, #0
 8022f70:	dd9d      	ble.n	8022eae <__sflush_r+0x1a>
 8022f72:	4643      	mov	r3, r8
 8022f74:	463a      	mov	r2, r7
 8022f76:	6a21      	ldr	r1, [r4, #32]
 8022f78:	4628      	mov	r0, r5
 8022f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022f7c:	47b0      	blx	r6
 8022f7e:	2800      	cmp	r0, #0
 8022f80:	dc06      	bgt.n	8022f90 <__sflush_r+0xfc>
 8022f82:	89a3      	ldrh	r3, [r4, #12]
 8022f84:	f04f 30ff 	mov.w	r0, #4294967295
 8022f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f8c:	81a3      	strh	r3, [r4, #12]
 8022f8e:	e78f      	b.n	8022eb0 <__sflush_r+0x1c>
 8022f90:	4407      	add	r7, r0
 8022f92:	eba8 0800 	sub.w	r8, r8, r0
 8022f96:	e7e9      	b.n	8022f6c <__sflush_r+0xd8>
 8022f98:	20400001 	.word	0x20400001

08022f9c <_fflush_r>:
 8022f9c:	b538      	push	{r3, r4, r5, lr}
 8022f9e:	690b      	ldr	r3, [r1, #16]
 8022fa0:	4605      	mov	r5, r0
 8022fa2:	460c      	mov	r4, r1
 8022fa4:	b913      	cbnz	r3, 8022fac <_fflush_r+0x10>
 8022fa6:	2500      	movs	r5, #0
 8022fa8:	4628      	mov	r0, r5
 8022faa:	bd38      	pop	{r3, r4, r5, pc}
 8022fac:	b118      	cbz	r0, 8022fb6 <_fflush_r+0x1a>
 8022fae:	6983      	ldr	r3, [r0, #24]
 8022fb0:	b90b      	cbnz	r3, 8022fb6 <_fflush_r+0x1a>
 8022fb2:	f000 f887 	bl	80230c4 <__sinit>
 8022fb6:	4b14      	ldr	r3, [pc, #80]	; (8023008 <_fflush_r+0x6c>)
 8022fb8:	429c      	cmp	r4, r3
 8022fba:	d11b      	bne.n	8022ff4 <_fflush_r+0x58>
 8022fbc:	686c      	ldr	r4, [r5, #4]
 8022fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022fc2:	2b00      	cmp	r3, #0
 8022fc4:	d0ef      	beq.n	8022fa6 <_fflush_r+0xa>
 8022fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022fc8:	07d0      	lsls	r0, r2, #31
 8022fca:	d404      	bmi.n	8022fd6 <_fflush_r+0x3a>
 8022fcc:	0599      	lsls	r1, r3, #22
 8022fce:	d402      	bmi.n	8022fd6 <_fflush_r+0x3a>
 8022fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022fd2:	f000 f915 	bl	8023200 <__retarget_lock_acquire_recursive>
 8022fd6:	4628      	mov	r0, r5
 8022fd8:	4621      	mov	r1, r4
 8022fda:	f7ff ff5b 	bl	8022e94 <__sflush_r>
 8022fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022fe0:	4605      	mov	r5, r0
 8022fe2:	07da      	lsls	r2, r3, #31
 8022fe4:	d4e0      	bmi.n	8022fa8 <_fflush_r+0xc>
 8022fe6:	89a3      	ldrh	r3, [r4, #12]
 8022fe8:	059b      	lsls	r3, r3, #22
 8022fea:	d4dd      	bmi.n	8022fa8 <_fflush_r+0xc>
 8022fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022fee:	f000 f908 	bl	8023202 <__retarget_lock_release_recursive>
 8022ff2:	e7d9      	b.n	8022fa8 <_fflush_r+0xc>
 8022ff4:	4b05      	ldr	r3, [pc, #20]	; (802300c <_fflush_r+0x70>)
 8022ff6:	429c      	cmp	r4, r3
 8022ff8:	d101      	bne.n	8022ffe <_fflush_r+0x62>
 8022ffa:	68ac      	ldr	r4, [r5, #8]
 8022ffc:	e7df      	b.n	8022fbe <_fflush_r+0x22>
 8022ffe:	4b04      	ldr	r3, [pc, #16]	; (8023010 <_fflush_r+0x74>)
 8023000:	429c      	cmp	r4, r3
 8023002:	bf08      	it	eq
 8023004:	68ec      	ldreq	r4, [r5, #12]
 8023006:	e7da      	b.n	8022fbe <_fflush_r+0x22>
 8023008:	080245f4 	.word	0x080245f4
 802300c:	08024614 	.word	0x08024614
 8023010:	080245d4 	.word	0x080245d4

08023014 <std>:
 8023014:	2300      	movs	r3, #0
 8023016:	b510      	push	{r4, lr}
 8023018:	4604      	mov	r4, r0
 802301a:	6083      	str	r3, [r0, #8]
 802301c:	8181      	strh	r1, [r0, #12]
 802301e:	4619      	mov	r1, r3
 8023020:	6643      	str	r3, [r0, #100]	; 0x64
 8023022:	81c2      	strh	r2, [r0, #14]
 8023024:	2208      	movs	r2, #8
 8023026:	6183      	str	r3, [r0, #24]
 8023028:	e9c0 3300 	strd	r3, r3, [r0]
 802302c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023030:	305c      	adds	r0, #92	; 0x5c
 8023032:	f7fd fa9e 	bl	8020572 <memset>
 8023036:	4b05      	ldr	r3, [pc, #20]	; (802304c <std+0x38>)
 8023038:	6224      	str	r4, [r4, #32]
 802303a:	6263      	str	r3, [r4, #36]	; 0x24
 802303c:	4b04      	ldr	r3, [pc, #16]	; (8023050 <std+0x3c>)
 802303e:	62a3      	str	r3, [r4, #40]	; 0x28
 8023040:	4b04      	ldr	r3, [pc, #16]	; (8023054 <std+0x40>)
 8023042:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023044:	4b04      	ldr	r3, [pc, #16]	; (8023058 <std+0x44>)
 8023046:	6323      	str	r3, [r4, #48]	; 0x30
 8023048:	bd10      	pop	{r4, pc}
 802304a:	bf00      	nop
 802304c:	08023375 	.word	0x08023375
 8023050:	08023397 	.word	0x08023397
 8023054:	080233cf 	.word	0x080233cf
 8023058:	080233f3 	.word	0x080233f3

0802305c <_cleanup_r>:
 802305c:	4901      	ldr	r1, [pc, #4]	; (8023064 <_cleanup_r+0x8>)
 802305e:	f000 b8af 	b.w	80231c0 <_fwalk_reent>
 8023062:	bf00      	nop
 8023064:	08022f9d 	.word	0x08022f9d

08023068 <__sfmoreglue>:
 8023068:	b570      	push	{r4, r5, r6, lr}
 802306a:	2268      	movs	r2, #104	; 0x68
 802306c:	1e4d      	subs	r5, r1, #1
 802306e:	460e      	mov	r6, r1
 8023070:	4355      	muls	r5, r2
 8023072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023076:	f7ff fa1f 	bl	80224b8 <_malloc_r>
 802307a:	4604      	mov	r4, r0
 802307c:	b140      	cbz	r0, 8023090 <__sfmoreglue+0x28>
 802307e:	2100      	movs	r1, #0
 8023080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023084:	e9c0 1600 	strd	r1, r6, [r0]
 8023088:	300c      	adds	r0, #12
 802308a:	60a0      	str	r0, [r4, #8]
 802308c:	f7fd fa71 	bl	8020572 <memset>
 8023090:	4620      	mov	r0, r4
 8023092:	bd70      	pop	{r4, r5, r6, pc}

08023094 <__sfp_lock_acquire>:
 8023094:	4801      	ldr	r0, [pc, #4]	; (802309c <__sfp_lock_acquire+0x8>)
 8023096:	f000 b8b3 	b.w	8023200 <__retarget_lock_acquire_recursive>
 802309a:	bf00      	nop
 802309c:	200b70d5 	.word	0x200b70d5

080230a0 <__sfp_lock_release>:
 80230a0:	4801      	ldr	r0, [pc, #4]	; (80230a8 <__sfp_lock_release+0x8>)
 80230a2:	f000 b8ae 	b.w	8023202 <__retarget_lock_release_recursive>
 80230a6:	bf00      	nop
 80230a8:	200b70d5 	.word	0x200b70d5

080230ac <__sinit_lock_acquire>:
 80230ac:	4801      	ldr	r0, [pc, #4]	; (80230b4 <__sinit_lock_acquire+0x8>)
 80230ae:	f000 b8a7 	b.w	8023200 <__retarget_lock_acquire_recursive>
 80230b2:	bf00      	nop
 80230b4:	200b70d6 	.word	0x200b70d6

080230b8 <__sinit_lock_release>:
 80230b8:	4801      	ldr	r0, [pc, #4]	; (80230c0 <__sinit_lock_release+0x8>)
 80230ba:	f000 b8a2 	b.w	8023202 <__retarget_lock_release_recursive>
 80230be:	bf00      	nop
 80230c0:	200b70d6 	.word	0x200b70d6

080230c4 <__sinit>:
 80230c4:	b510      	push	{r4, lr}
 80230c6:	4604      	mov	r4, r0
 80230c8:	f7ff fff0 	bl	80230ac <__sinit_lock_acquire>
 80230cc:	69a3      	ldr	r3, [r4, #24]
 80230ce:	b11b      	cbz	r3, 80230d8 <__sinit+0x14>
 80230d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230d4:	f7ff bff0 	b.w	80230b8 <__sinit_lock_release>
 80230d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80230dc:	6523      	str	r3, [r4, #80]	; 0x50
 80230de:	4620      	mov	r0, r4
 80230e0:	4b12      	ldr	r3, [pc, #72]	; (802312c <__sinit+0x68>)
 80230e2:	4a13      	ldr	r2, [pc, #76]	; (8023130 <__sinit+0x6c>)
 80230e4:	681b      	ldr	r3, [r3, #0]
 80230e6:	62a2      	str	r2, [r4, #40]	; 0x28
 80230e8:	42a3      	cmp	r3, r4
 80230ea:	bf04      	itt	eq
 80230ec:	2301      	moveq	r3, #1
 80230ee:	61a3      	streq	r3, [r4, #24]
 80230f0:	f000 f820 	bl	8023134 <__sfp>
 80230f4:	6060      	str	r0, [r4, #4]
 80230f6:	4620      	mov	r0, r4
 80230f8:	f000 f81c 	bl	8023134 <__sfp>
 80230fc:	60a0      	str	r0, [r4, #8]
 80230fe:	4620      	mov	r0, r4
 8023100:	f000 f818 	bl	8023134 <__sfp>
 8023104:	2200      	movs	r2, #0
 8023106:	2104      	movs	r1, #4
 8023108:	60e0      	str	r0, [r4, #12]
 802310a:	6860      	ldr	r0, [r4, #4]
 802310c:	f7ff ff82 	bl	8023014 <std>
 8023110:	2201      	movs	r2, #1
 8023112:	2109      	movs	r1, #9
 8023114:	68a0      	ldr	r0, [r4, #8]
 8023116:	f7ff ff7d 	bl	8023014 <std>
 802311a:	2202      	movs	r2, #2
 802311c:	2112      	movs	r1, #18
 802311e:	68e0      	ldr	r0, [r4, #12]
 8023120:	f7ff ff78 	bl	8023014 <std>
 8023124:	2301      	movs	r3, #1
 8023126:	61a3      	str	r3, [r4, #24]
 8023128:	e7d2      	b.n	80230d0 <__sinit+0xc>
 802312a:	bf00      	nop
 802312c:	080241e0 	.word	0x080241e0
 8023130:	0802305d 	.word	0x0802305d

08023134 <__sfp>:
 8023134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023136:	4607      	mov	r7, r0
 8023138:	f7ff ffac 	bl	8023094 <__sfp_lock_acquire>
 802313c:	4b1e      	ldr	r3, [pc, #120]	; (80231b8 <__sfp+0x84>)
 802313e:	681e      	ldr	r6, [r3, #0]
 8023140:	69b3      	ldr	r3, [r6, #24]
 8023142:	b913      	cbnz	r3, 802314a <__sfp+0x16>
 8023144:	4630      	mov	r0, r6
 8023146:	f7ff ffbd 	bl	80230c4 <__sinit>
 802314a:	3648      	adds	r6, #72	; 0x48
 802314c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023150:	3b01      	subs	r3, #1
 8023152:	d503      	bpl.n	802315c <__sfp+0x28>
 8023154:	6833      	ldr	r3, [r6, #0]
 8023156:	b30b      	cbz	r3, 802319c <__sfp+0x68>
 8023158:	6836      	ldr	r6, [r6, #0]
 802315a:	e7f7      	b.n	802314c <__sfp+0x18>
 802315c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023160:	b9d5      	cbnz	r5, 8023198 <__sfp+0x64>
 8023162:	4b16      	ldr	r3, [pc, #88]	; (80231bc <__sfp+0x88>)
 8023164:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023168:	6665      	str	r5, [r4, #100]	; 0x64
 802316a:	60e3      	str	r3, [r4, #12]
 802316c:	f000 f847 	bl	80231fe <__retarget_lock_init_recursive>
 8023170:	f7ff ff96 	bl	80230a0 <__sfp_lock_release>
 8023174:	2208      	movs	r2, #8
 8023176:	4629      	mov	r1, r5
 8023178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802317c:	6025      	str	r5, [r4, #0]
 802317e:	61a5      	str	r5, [r4, #24]
 8023180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023188:	f7fd f9f3 	bl	8020572 <memset>
 802318c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023194:	4620      	mov	r0, r4
 8023196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023198:	3468      	adds	r4, #104	; 0x68
 802319a:	e7d9      	b.n	8023150 <__sfp+0x1c>
 802319c:	2104      	movs	r1, #4
 802319e:	4638      	mov	r0, r7
 80231a0:	f7ff ff62 	bl	8023068 <__sfmoreglue>
 80231a4:	4604      	mov	r4, r0
 80231a6:	6030      	str	r0, [r6, #0]
 80231a8:	2800      	cmp	r0, #0
 80231aa:	d1d5      	bne.n	8023158 <__sfp+0x24>
 80231ac:	f7ff ff78 	bl	80230a0 <__sfp_lock_release>
 80231b0:	230c      	movs	r3, #12
 80231b2:	603b      	str	r3, [r7, #0]
 80231b4:	e7ee      	b.n	8023194 <__sfp+0x60>
 80231b6:	bf00      	nop
 80231b8:	080241e0 	.word	0x080241e0
 80231bc:	ffff0001 	.word	0xffff0001

080231c0 <_fwalk_reent>:
 80231c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231c4:	4606      	mov	r6, r0
 80231c6:	4688      	mov	r8, r1
 80231c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80231cc:	2700      	movs	r7, #0
 80231ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80231d2:	f1b9 0901 	subs.w	r9, r9, #1
 80231d6:	d505      	bpl.n	80231e4 <_fwalk_reent+0x24>
 80231d8:	6824      	ldr	r4, [r4, #0]
 80231da:	2c00      	cmp	r4, #0
 80231dc:	d1f7      	bne.n	80231ce <_fwalk_reent+0xe>
 80231de:	4638      	mov	r0, r7
 80231e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231e4:	89ab      	ldrh	r3, [r5, #12]
 80231e6:	2b01      	cmp	r3, #1
 80231e8:	d907      	bls.n	80231fa <_fwalk_reent+0x3a>
 80231ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80231ee:	3301      	adds	r3, #1
 80231f0:	d003      	beq.n	80231fa <_fwalk_reent+0x3a>
 80231f2:	4629      	mov	r1, r5
 80231f4:	4630      	mov	r0, r6
 80231f6:	47c0      	blx	r8
 80231f8:	4307      	orrs	r7, r0
 80231fa:	3568      	adds	r5, #104	; 0x68
 80231fc:	e7e9      	b.n	80231d2 <_fwalk_reent+0x12>

080231fe <__retarget_lock_init_recursive>:
 80231fe:	4770      	bx	lr

08023200 <__retarget_lock_acquire_recursive>:
 8023200:	4770      	bx	lr

08023202 <__retarget_lock_release_recursive>:
 8023202:	4770      	bx	lr

08023204 <__swhatbuf_r>:
 8023204:	b570      	push	{r4, r5, r6, lr}
 8023206:	460e      	mov	r6, r1
 8023208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802320c:	b096      	sub	sp, #88	; 0x58
 802320e:	4614      	mov	r4, r2
 8023210:	2900      	cmp	r1, #0
 8023212:	461d      	mov	r5, r3
 8023214:	da08      	bge.n	8023228 <__swhatbuf_r+0x24>
 8023216:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802321a:	2200      	movs	r2, #0
 802321c:	602a      	str	r2, [r5, #0]
 802321e:	061a      	lsls	r2, r3, #24
 8023220:	d410      	bmi.n	8023244 <__swhatbuf_r+0x40>
 8023222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023226:	e00e      	b.n	8023246 <__swhatbuf_r+0x42>
 8023228:	466a      	mov	r2, sp
 802322a:	f000 f909 	bl	8023440 <_fstat_r>
 802322e:	2800      	cmp	r0, #0
 8023230:	dbf1      	blt.n	8023216 <__swhatbuf_r+0x12>
 8023232:	9a01      	ldr	r2, [sp, #4]
 8023234:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023238:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802323c:	425a      	negs	r2, r3
 802323e:	415a      	adcs	r2, r3
 8023240:	602a      	str	r2, [r5, #0]
 8023242:	e7ee      	b.n	8023222 <__swhatbuf_r+0x1e>
 8023244:	2340      	movs	r3, #64	; 0x40
 8023246:	2000      	movs	r0, #0
 8023248:	6023      	str	r3, [r4, #0]
 802324a:	b016      	add	sp, #88	; 0x58
 802324c:	bd70      	pop	{r4, r5, r6, pc}
	...

08023250 <__smakebuf_r>:
 8023250:	898b      	ldrh	r3, [r1, #12]
 8023252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023254:	079d      	lsls	r5, r3, #30
 8023256:	4606      	mov	r6, r0
 8023258:	460c      	mov	r4, r1
 802325a:	d507      	bpl.n	802326c <__smakebuf_r+0x1c>
 802325c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023260:	6023      	str	r3, [r4, #0]
 8023262:	6123      	str	r3, [r4, #16]
 8023264:	2301      	movs	r3, #1
 8023266:	6163      	str	r3, [r4, #20]
 8023268:	b002      	add	sp, #8
 802326a:	bd70      	pop	{r4, r5, r6, pc}
 802326c:	ab01      	add	r3, sp, #4
 802326e:	466a      	mov	r2, sp
 8023270:	f7ff ffc8 	bl	8023204 <__swhatbuf_r>
 8023274:	9900      	ldr	r1, [sp, #0]
 8023276:	4605      	mov	r5, r0
 8023278:	4630      	mov	r0, r6
 802327a:	f7ff f91d 	bl	80224b8 <_malloc_r>
 802327e:	b948      	cbnz	r0, 8023294 <__smakebuf_r+0x44>
 8023280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023284:	059a      	lsls	r2, r3, #22
 8023286:	d4ef      	bmi.n	8023268 <__smakebuf_r+0x18>
 8023288:	f023 0303 	bic.w	r3, r3, #3
 802328c:	f043 0302 	orr.w	r3, r3, #2
 8023290:	81a3      	strh	r3, [r4, #12]
 8023292:	e7e3      	b.n	802325c <__smakebuf_r+0xc>
 8023294:	4b0d      	ldr	r3, [pc, #52]	; (80232cc <__smakebuf_r+0x7c>)
 8023296:	62b3      	str	r3, [r6, #40]	; 0x28
 8023298:	89a3      	ldrh	r3, [r4, #12]
 802329a:	6020      	str	r0, [r4, #0]
 802329c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80232a0:	6120      	str	r0, [r4, #16]
 80232a2:	81a3      	strh	r3, [r4, #12]
 80232a4:	9b00      	ldr	r3, [sp, #0]
 80232a6:	6163      	str	r3, [r4, #20]
 80232a8:	9b01      	ldr	r3, [sp, #4]
 80232aa:	b15b      	cbz	r3, 80232c4 <__smakebuf_r+0x74>
 80232ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80232b0:	4630      	mov	r0, r6
 80232b2:	f000 f8d7 	bl	8023464 <_isatty_r>
 80232b6:	b128      	cbz	r0, 80232c4 <__smakebuf_r+0x74>
 80232b8:	89a3      	ldrh	r3, [r4, #12]
 80232ba:	f023 0303 	bic.w	r3, r3, #3
 80232be:	f043 0301 	orr.w	r3, r3, #1
 80232c2:	81a3      	strh	r3, [r4, #12]
 80232c4:	89a0      	ldrh	r0, [r4, #12]
 80232c6:	4305      	orrs	r5, r0
 80232c8:	81a5      	strh	r5, [r4, #12]
 80232ca:	e7cd      	b.n	8023268 <__smakebuf_r+0x18>
 80232cc:	0802305d 	.word	0x0802305d

080232d0 <memchr>:
 80232d0:	b2c9      	uxtb	r1, r1
 80232d2:	4402      	add	r2, r0
 80232d4:	b510      	push	{r4, lr}
 80232d6:	4290      	cmp	r0, r2
 80232d8:	4603      	mov	r3, r0
 80232da:	d101      	bne.n	80232e0 <memchr+0x10>
 80232dc:	2300      	movs	r3, #0
 80232de:	e003      	b.n	80232e8 <memchr+0x18>
 80232e0:	781c      	ldrb	r4, [r3, #0]
 80232e2:	3001      	adds	r0, #1
 80232e4:	428c      	cmp	r4, r1
 80232e6:	d1f6      	bne.n	80232d6 <memchr+0x6>
 80232e8:	4618      	mov	r0, r3
 80232ea:	bd10      	pop	{r4, pc}

080232ec <_raise_r>:
 80232ec:	291f      	cmp	r1, #31
 80232ee:	b538      	push	{r3, r4, r5, lr}
 80232f0:	4604      	mov	r4, r0
 80232f2:	460d      	mov	r5, r1
 80232f4:	d904      	bls.n	8023300 <_raise_r+0x14>
 80232f6:	2316      	movs	r3, #22
 80232f8:	6003      	str	r3, [r0, #0]
 80232fa:	f04f 30ff 	mov.w	r0, #4294967295
 80232fe:	bd38      	pop	{r3, r4, r5, pc}
 8023300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023302:	b112      	cbz	r2, 802330a <_raise_r+0x1e>
 8023304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023308:	b94b      	cbnz	r3, 802331e <_raise_r+0x32>
 802330a:	4620      	mov	r0, r4
 802330c:	f000 f830 	bl	8023370 <_getpid_r>
 8023310:	462a      	mov	r2, r5
 8023312:	4601      	mov	r1, r0
 8023314:	4620      	mov	r0, r4
 8023316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802331a:	f000 b817 	b.w	802334c <_kill_r>
 802331e:	2b01      	cmp	r3, #1
 8023320:	d00a      	beq.n	8023338 <_raise_r+0x4c>
 8023322:	1c59      	adds	r1, r3, #1
 8023324:	d103      	bne.n	802332e <_raise_r+0x42>
 8023326:	2316      	movs	r3, #22
 8023328:	6003      	str	r3, [r0, #0]
 802332a:	2001      	movs	r0, #1
 802332c:	e7e7      	b.n	80232fe <_raise_r+0x12>
 802332e:	2400      	movs	r4, #0
 8023330:	4628      	mov	r0, r5
 8023332:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023336:	4798      	blx	r3
 8023338:	2000      	movs	r0, #0
 802333a:	e7e0      	b.n	80232fe <_raise_r+0x12>

0802333c <raise>:
 802333c:	4b02      	ldr	r3, [pc, #8]	; (8023348 <raise+0xc>)
 802333e:	4601      	mov	r1, r0
 8023340:	6818      	ldr	r0, [r3, #0]
 8023342:	f7ff bfd3 	b.w	80232ec <_raise_r>
 8023346:	bf00      	nop
 8023348:	20000038 	.word	0x20000038

0802334c <_kill_r>:
 802334c:	b538      	push	{r3, r4, r5, lr}
 802334e:	2300      	movs	r3, #0
 8023350:	4d06      	ldr	r5, [pc, #24]	; (802336c <_kill_r+0x20>)
 8023352:	4604      	mov	r4, r0
 8023354:	4608      	mov	r0, r1
 8023356:	4611      	mov	r1, r2
 8023358:	602b      	str	r3, [r5, #0]
 802335a:	f7ec ffa4 	bl	80102a6 <_kill>
 802335e:	1c43      	adds	r3, r0, #1
 8023360:	d102      	bne.n	8023368 <_kill_r+0x1c>
 8023362:	682b      	ldr	r3, [r5, #0]
 8023364:	b103      	cbz	r3, 8023368 <_kill_r+0x1c>
 8023366:	6023      	str	r3, [r4, #0]
 8023368:	bd38      	pop	{r3, r4, r5, pc}
 802336a:	bf00      	nop
 802336c:	200b70d0 	.word	0x200b70d0

08023370 <_getpid_r>:
 8023370:	f7ec bf91 	b.w	8010296 <_getpid>

08023374 <__sread>:
 8023374:	b510      	push	{r4, lr}
 8023376:	460c      	mov	r4, r1
 8023378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802337c:	f000 f894 	bl	80234a8 <_read_r>
 8023380:	2800      	cmp	r0, #0
 8023382:	bfab      	itete	ge
 8023384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023386:	89a3      	ldrhlt	r3, [r4, #12]
 8023388:	181b      	addge	r3, r3, r0
 802338a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802338e:	bfac      	ite	ge
 8023390:	6563      	strge	r3, [r4, #84]	; 0x54
 8023392:	81a3      	strhlt	r3, [r4, #12]
 8023394:	bd10      	pop	{r4, pc}

08023396 <__swrite>:
 8023396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802339a:	461f      	mov	r7, r3
 802339c:	898b      	ldrh	r3, [r1, #12]
 802339e:	4605      	mov	r5, r0
 80233a0:	460c      	mov	r4, r1
 80233a2:	05db      	lsls	r3, r3, #23
 80233a4:	4616      	mov	r6, r2
 80233a6:	d505      	bpl.n	80233b4 <__swrite+0x1e>
 80233a8:	2302      	movs	r3, #2
 80233aa:	2200      	movs	r2, #0
 80233ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80233b0:	f000 f868 	bl	8023484 <_lseek_r>
 80233b4:	89a3      	ldrh	r3, [r4, #12]
 80233b6:	4632      	mov	r2, r6
 80233b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80233bc:	4628      	mov	r0, r5
 80233be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80233c2:	81a3      	strh	r3, [r4, #12]
 80233c4:	463b      	mov	r3, r7
 80233c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80233ca:	f000 b817 	b.w	80233fc <_write_r>

080233ce <__sseek>:
 80233ce:	b510      	push	{r4, lr}
 80233d0:	460c      	mov	r4, r1
 80233d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80233d6:	f000 f855 	bl	8023484 <_lseek_r>
 80233da:	1c43      	adds	r3, r0, #1
 80233dc:	89a3      	ldrh	r3, [r4, #12]
 80233de:	bf15      	itete	ne
 80233e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80233e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80233e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80233ea:	81a3      	strheq	r3, [r4, #12]
 80233ec:	bf18      	it	ne
 80233ee:	81a3      	strhne	r3, [r4, #12]
 80233f0:	bd10      	pop	{r4, pc}

080233f2 <__sclose>:
 80233f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80233f6:	f000 b813 	b.w	8023420 <_close_r>
	...

080233fc <_write_r>:
 80233fc:	b538      	push	{r3, r4, r5, lr}
 80233fe:	4604      	mov	r4, r0
 8023400:	4d06      	ldr	r5, [pc, #24]	; (802341c <_write_r+0x20>)
 8023402:	4608      	mov	r0, r1
 8023404:	4611      	mov	r1, r2
 8023406:	2200      	movs	r2, #0
 8023408:	602a      	str	r2, [r5, #0]
 802340a:	461a      	mov	r2, r3
 802340c:	f7ec ff82 	bl	8010314 <_write>
 8023410:	1c43      	adds	r3, r0, #1
 8023412:	d102      	bne.n	802341a <_write_r+0x1e>
 8023414:	682b      	ldr	r3, [r5, #0]
 8023416:	b103      	cbz	r3, 802341a <_write_r+0x1e>
 8023418:	6023      	str	r3, [r4, #0]
 802341a:	bd38      	pop	{r3, r4, r5, pc}
 802341c:	200b70d0 	.word	0x200b70d0

08023420 <_close_r>:
 8023420:	b538      	push	{r3, r4, r5, lr}
 8023422:	2300      	movs	r3, #0
 8023424:	4d05      	ldr	r5, [pc, #20]	; (802343c <_close_r+0x1c>)
 8023426:	4604      	mov	r4, r0
 8023428:	4608      	mov	r0, r1
 802342a:	602b      	str	r3, [r5, #0]
 802342c:	f7ec ff8e 	bl	801034c <_close>
 8023430:	1c43      	adds	r3, r0, #1
 8023432:	d102      	bne.n	802343a <_close_r+0x1a>
 8023434:	682b      	ldr	r3, [r5, #0]
 8023436:	b103      	cbz	r3, 802343a <_close_r+0x1a>
 8023438:	6023      	str	r3, [r4, #0]
 802343a:	bd38      	pop	{r3, r4, r5, pc}
 802343c:	200b70d0 	.word	0x200b70d0

08023440 <_fstat_r>:
 8023440:	b538      	push	{r3, r4, r5, lr}
 8023442:	2300      	movs	r3, #0
 8023444:	4d06      	ldr	r5, [pc, #24]	; (8023460 <_fstat_r+0x20>)
 8023446:	4604      	mov	r4, r0
 8023448:	4608      	mov	r0, r1
 802344a:	4611      	mov	r1, r2
 802344c:	602b      	str	r3, [r5, #0]
 802344e:	f7ec ff89 	bl	8010364 <_fstat>
 8023452:	1c43      	adds	r3, r0, #1
 8023454:	d102      	bne.n	802345c <_fstat_r+0x1c>
 8023456:	682b      	ldr	r3, [r5, #0]
 8023458:	b103      	cbz	r3, 802345c <_fstat_r+0x1c>
 802345a:	6023      	str	r3, [r4, #0]
 802345c:	bd38      	pop	{r3, r4, r5, pc}
 802345e:	bf00      	nop
 8023460:	200b70d0 	.word	0x200b70d0

08023464 <_isatty_r>:
 8023464:	b538      	push	{r3, r4, r5, lr}
 8023466:	2300      	movs	r3, #0
 8023468:	4d05      	ldr	r5, [pc, #20]	; (8023480 <_isatty_r+0x1c>)
 802346a:	4604      	mov	r4, r0
 802346c:	4608      	mov	r0, r1
 802346e:	602b      	str	r3, [r5, #0]
 8023470:	f7ec ff88 	bl	8010384 <_isatty>
 8023474:	1c43      	adds	r3, r0, #1
 8023476:	d102      	bne.n	802347e <_isatty_r+0x1a>
 8023478:	682b      	ldr	r3, [r5, #0]
 802347a:	b103      	cbz	r3, 802347e <_isatty_r+0x1a>
 802347c:	6023      	str	r3, [r4, #0]
 802347e:	bd38      	pop	{r3, r4, r5, pc}
 8023480:	200b70d0 	.word	0x200b70d0

08023484 <_lseek_r>:
 8023484:	b538      	push	{r3, r4, r5, lr}
 8023486:	4604      	mov	r4, r0
 8023488:	4d06      	ldr	r5, [pc, #24]	; (80234a4 <_lseek_r+0x20>)
 802348a:	4608      	mov	r0, r1
 802348c:	4611      	mov	r1, r2
 802348e:	2200      	movs	r2, #0
 8023490:	602a      	str	r2, [r5, #0]
 8023492:	461a      	mov	r2, r3
 8023494:	f7ec ff81 	bl	801039a <_lseek>
 8023498:	1c43      	adds	r3, r0, #1
 802349a:	d102      	bne.n	80234a2 <_lseek_r+0x1e>
 802349c:	682b      	ldr	r3, [r5, #0]
 802349e:	b103      	cbz	r3, 80234a2 <_lseek_r+0x1e>
 80234a0:	6023      	str	r3, [r4, #0]
 80234a2:	bd38      	pop	{r3, r4, r5, pc}
 80234a4:	200b70d0 	.word	0x200b70d0

080234a8 <_read_r>:
 80234a8:	b538      	push	{r3, r4, r5, lr}
 80234aa:	4604      	mov	r4, r0
 80234ac:	4d06      	ldr	r5, [pc, #24]	; (80234c8 <_read_r+0x20>)
 80234ae:	4608      	mov	r0, r1
 80234b0:	4611      	mov	r1, r2
 80234b2:	2200      	movs	r2, #0
 80234b4:	602a      	str	r2, [r5, #0]
 80234b6:	461a      	mov	r2, r3
 80234b8:	f7ec ff0f 	bl	80102da <_read>
 80234bc:	1c43      	adds	r3, r0, #1
 80234be:	d102      	bne.n	80234c6 <_read_r+0x1e>
 80234c0:	682b      	ldr	r3, [r5, #0]
 80234c2:	b103      	cbz	r3, 80234c6 <_read_r+0x1e>
 80234c4:	6023      	str	r3, [r4, #0]
 80234c6:	bd38      	pop	{r3, r4, r5, pc}
 80234c8:	200b70d0 	.word	0x200b70d0

080234cc <_init>:
 80234cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234ce:	bf00      	nop
 80234d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80234d2:	bc08      	pop	{r3}
 80234d4:	469e      	mov	lr, r3
 80234d6:	4770      	bx	lr

080234d8 <_fini>:
 80234d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234da:	bf00      	nop
 80234dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80234de:	bc08      	pop	{r3}
 80234e0:	469e      	mov	lr, r3
 80234e2:	4770      	bx	lr
